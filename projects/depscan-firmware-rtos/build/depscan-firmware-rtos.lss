
build/depscan-firmware-rtos.elf:     file format elf32-littlearm
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080084c1


Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003b8 	.word	0x200003b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800feb4 	.word	0x0800feb4

080001c4 <frame_dummy>:
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <frame_dummy+0x24>)
 80001c6:	b510      	push	{r4, lr}
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <frame_dummy+0x28>)
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <frame_dummy+0x2c>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	4808      	ldr	r0, [pc, #32]	; (80001f4 <frame_dummy+0x30>)
 80001d4:	6803      	ldr	r3, [r0, #0]
 80001d6:	b903      	cbnz	r3, 80001da <frame_dummy+0x16>
 80001d8:	bd10      	pop	{r4, pc}
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <frame_dummy+0x34>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d0fb      	beq.n	80001d8 <frame_dummy+0x14>
 80001e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001e4:	4718      	bx	r3
 80001e6:	bf00      	nop
 80001e8:	00000000 	.word	0x00000000
 80001ec:	200003bc 	.word	0x200003bc
 80001f0:	0800feb4 	.word	0x0800feb4
 80001f4:	200003b4 	.word	0x200003b4
 80001f8:	00000000 	.word	0x00000000

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr
 800020c:	0000      	movs	r0, r0
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uidiv>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d002      	beq.n	80002ba <__aeabi_uidiv+0xa>
 80002b4:	fbb0 f0f1 	udiv	r0, r0, r1
 80002b8:	4770      	bx	lr
 80002ba:	b108      	cbz	r0, 80002c0 <__aeabi_uidiv+0x10>
 80002bc:	f04f 30ff 	mov.w	r0, #4294967295
 80002c0:	f000 b81e 	b.w	8000300 <__aeabi_idiv0>

080002c4 <__aeabi_uidivmod>:
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d0f8      	beq.n	80002ba <__aeabi_uidiv+0xa>
 80002c8:	4602      	mov	r2, r0
 80002ca:	fbb0 f0f1 	udiv	r0, r0, r1
 80002ce:	fb00 2111 	mls	r1, r0, r1, r2
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_idiv>:
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d002      	beq.n	80002de <__aeabi_idiv+0xa>
 80002d8:	fb90 f0f1 	sdiv	r0, r0, r1
 80002dc:	4770      	bx	lr
 80002de:	2800      	cmp	r0, #0
 80002e0:	bfc8      	it	gt
 80002e2:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
 80002e6:	bfb8      	it	lt
 80002e8:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 80002ec:	f000 b808 	b.w	8000300 <__aeabi_idiv0>

080002f0 <__aeabi_idivmod>:
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d0f4      	beq.n	80002de <__aeabi_idiv+0xa>
 80002f4:	4602      	mov	r2, r0
 80002f6:	fb90 f0f1 	sdiv	r0, r0, r1
 80002fa:	fb00 2111 	mls	r1, r0, r1, r2
 80002fe:	4770      	bx	lr

08000300 <__aeabi_idiv0>:
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295
 8000314:	f04f 30ff 	movne.w	r0, #4294967295
 8000318:	f7ff bff2 	b.w	8000300 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	468c      	mov	ip, r1
 800033a:	460e      	mov	r6, r1
 800033c:	4604      	mov	r4, r0
 800033e:	9d08      	ldr	r5, [sp, #32]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d150      	bne.n	80003e6 <__udivmoddi4+0xb2>
 8000344:	428a      	cmp	r2, r1
 8000346:	4617      	mov	r7, r2
 8000348:	d96c      	bls.n	8000424 <__udivmoddi4+0xf0>
 800034a:	fab2 fe82 	clz	lr, r2
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d00b      	beq.n	800036c <__udivmoddi4+0x38>
 8000354:	f1ce 0420 	rsb	r4, lr, #32
 8000358:	fa20 f404 	lsr.w	r4, r0, r4
 800035c:	fa01 f60e 	lsl.w	r6, r1, lr
 8000360:	ea44 0c06 	orr.w	ip, r4, r6
 8000364:	fa02 f70e 	lsl.w	r7, r2, lr
 8000368:	fa00 f40e 	lsl.w	r4, r0, lr
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	0c22      	lsrs	r2, r4, #16
 8000372:	fbbc f0f9 	udiv	r0, ip, r9
 8000376:	fa1f f887 	uxth.w	r8, r7
 800037a:	fb09 c610 	mls	r6, r9, r0, ip
 800037e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000382:	fb00 f308 	mul.w	r3, r0, r8
 8000386:	42b3      	cmp	r3, r6
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x6a>
 800038a:	19f6      	adds	r6, r6, r7
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 8122 	bcs.w	80005d8 <__udivmoddi4+0x2a4>
 8000394:	42b3      	cmp	r3, r6
 8000396:	f240 811f 	bls.w	80005d8 <__udivmoddi4+0x2a4>
 800039a:	3802      	subs	r0, #2
 800039c:	443e      	add	r6, r7
 800039e:	1af6      	subs	r6, r6, r3
 80003a0:	b2a2      	uxth	r2, r4
 80003a2:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a6:	fb09 6613 	mls	r6, r9, r3, r6
 80003aa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80003ae:	fb03 f808 	mul.w	r8, r3, r8
 80003b2:	45a0      	cmp	r8, r4
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0x96>
 80003b6:	19e4      	adds	r4, r4, r7
 80003b8:	f103 32ff 	add.w	r2, r3, #4294967295
 80003bc:	f080 810a 	bcs.w	80005d4 <__udivmoddi4+0x2a0>
 80003c0:	45a0      	cmp	r8, r4
 80003c2:	f240 8107 	bls.w	80005d4 <__udivmoddi4+0x2a0>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ebc8 0404 	rsb	r4, r8, r4
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	2100      	movs	r1, #0
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d062      	beq.n	800049e <__udivmoddi4+0x16a>
 80003d8:	fa24 f40e 	lsr.w	r4, r4, lr
 80003dc:	2300      	movs	r3, #0
 80003de:	602c      	str	r4, [r5, #0]
 80003e0:	606b      	str	r3, [r5, #4]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0xc6>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d055      	beq.n	800049a <__udivmoddi4+0x166>
 80003ee:	2100      	movs	r1, #0
 80003f0:	e885 0041 	stmia.w	r5, {r0, r6}
 80003f4:	4608      	mov	r0, r1
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x1f0>
 8000404:	42b3      	cmp	r3, r6
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xda>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2ca>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb66 0603 	sbc.w	r6, r6, r3
 8000414:	2001      	movs	r0, #1
 8000416:	46b4      	mov	ip, r6
 8000418:	2d00      	cmp	r5, #0
 800041a:	d040      	beq.n	800049e <__udivmoddi4+0x16a>
 800041c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	b912      	cbnz	r2, 800042c <__udivmoddi4+0xf8>
 8000426:	2701      	movs	r7, #1
 8000428:	fbb7 f7f2 	udiv	r7, r7, r2
 800042c:	fab7 fe87 	clz	lr, r7
 8000430:	f1be 0f00 	cmp.w	lr, #0
 8000434:	d135      	bne.n	80004a2 <__udivmoddi4+0x16e>
 8000436:	1bf3      	subs	r3, r6, r7
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	fa1f fc87 	uxth.w	ip, r7
 8000440:	2101      	movs	r1, #1
 8000442:	fbb3 f0f8 	udiv	r0, r3, r8
 8000446:	0c22      	lsrs	r2, r4, #16
 8000448:	fb08 3610 	mls	r6, r8, r0, r3
 800044c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000450:	fb0c f300 	mul.w	r3, ip, r0
 8000454:	42b3      	cmp	r3, r6
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x134>
 8000458:	19f6      	adds	r6, r6, r7
 800045a:	f100 32ff 	add.w	r2, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x132>
 8000460:	42b3      	cmp	r3, r6
 8000462:	f200 80ce 	bhi.w	8000602 <__udivmoddi4+0x2ce>
 8000466:	4610      	mov	r0, r2
 8000468:	1af6      	subs	r6, r6, r3
 800046a:	b2a2      	uxth	r2, r4
 800046c:	fbb6 f3f8 	udiv	r3, r6, r8
 8000470:	fb08 6613 	mls	r6, r8, r3, r6
 8000474:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000478:	fb0c fc03 	mul.w	ip, ip, r3
 800047c:	45a4      	cmp	ip, r4
 800047e:	d907      	bls.n	8000490 <__udivmoddi4+0x15c>
 8000480:	19e4      	adds	r4, r4, r7
 8000482:	f103 32ff 	add.w	r2, r3, #4294967295
 8000486:	d202      	bcs.n	800048e <__udivmoddi4+0x15a>
 8000488:	45a4      	cmp	ip, r4
 800048a:	f200 80b5 	bhi.w	80005f8 <__udivmoddi4+0x2c4>
 800048e:	4613      	mov	r3, r2
 8000490:	ebcc 0404 	rsb	r4, ip, r4
 8000494:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000498:	e79c      	b.n	80003d4 <__udivmoddi4+0xa0>
 800049a:	4629      	mov	r1, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	f1ce 0120 	rsb	r1, lr, #32
 80004a6:	fa06 f30e 	lsl.w	r3, r6, lr
 80004aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80004ae:	fa20 f901 	lsr.w	r9, r0, r1
 80004b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004b6:	40ce      	lsrs	r6, r1
 80004b8:	ea49 0903 	orr.w	r9, r9, r3
 80004bc:	fbb6 faf8 	udiv	sl, r6, r8
 80004c0:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80004c4:	fb08 661a 	mls	r6, r8, sl, r6
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80004d0:	fb0a f20c 	mul.w	r2, sl, ip
 80004d4:	429a      	cmp	r2, r3
 80004d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x1be>
 80004dc:	19db      	adds	r3, r3, r7
 80004de:	f10a 31ff 	add.w	r1, sl, #4294967295
 80004e2:	f080 8087 	bcs.w	80005f4 <__udivmoddi4+0x2c0>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f240 8084 	bls.w	80005f4 <__udivmoddi4+0x2c0>
 80004ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	1a9b      	subs	r3, r3, r2
 80004f4:	fa1f f989 	uxth.w	r9, r9
 80004f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000500:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000504:	fb01 f60c 	mul.w	r6, r1, ip
 8000508:	429e      	cmp	r6, r3
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x1e8>
 800050c:	19db      	adds	r3, r3, r7
 800050e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000512:	d26b      	bcs.n	80005ec <__udivmoddi4+0x2b8>
 8000514:	429e      	cmp	r6, r3
 8000516:	d969      	bls.n	80005ec <__udivmoddi4+0x2b8>
 8000518:	3902      	subs	r1, #2
 800051a:	443b      	add	r3, r7
 800051c:	1b9b      	subs	r3, r3, r6
 800051e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000522:	e78e      	b.n	8000442 <__udivmoddi4+0x10e>
 8000524:	f1c1 0e20 	rsb	lr, r1, #32
 8000528:	fa22 f40e 	lsr.w	r4, r2, lr
 800052c:	408b      	lsls	r3, r1
 800052e:	4323      	orrs	r3, r4
 8000530:	fa20 f70e 	lsr.w	r7, r0, lr
 8000534:	fa06 f401 	lsl.w	r4, r6, r1
 8000538:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800053c:	fa26 f60e 	lsr.w	r6, r6, lr
 8000540:	433c      	orrs	r4, r7
 8000542:	fbb6 f9fc 	udiv	r9, r6, ip
 8000546:	0c27      	lsrs	r7, r4, #16
 8000548:	fb0c 6619 	mls	r6, ip, r9, r6
 800054c:	fa1f f883 	uxth.w	r8, r3
 8000550:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000554:	fb09 f708 	mul.w	r7, r9, r8
 8000558:	42b7      	cmp	r7, r6
 800055a:	fa02 f201 	lsl.w	r2, r2, r1
 800055e:	fa00 fa01 	lsl.w	sl, r0, r1
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x242>
 8000564:	18f6      	adds	r6, r6, r3
 8000566:	f109 30ff 	add.w	r0, r9, #4294967295
 800056a:	d241      	bcs.n	80005f0 <__udivmoddi4+0x2bc>
 800056c:	42b7      	cmp	r7, r6
 800056e:	d93f      	bls.n	80005f0 <__udivmoddi4+0x2bc>
 8000570:	f1a9 0902 	sub.w	r9, r9, #2
 8000574:	441e      	add	r6, r3
 8000576:	1bf6      	subs	r6, r6, r7
 8000578:	b2a0      	uxth	r0, r4
 800057a:	fbb6 f4fc 	udiv	r4, r6, ip
 800057e:	fb0c 6614 	mls	r6, ip, r4, r6
 8000582:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000586:	fb04 f808 	mul.w	r8, r4, r8
 800058a:	45b8      	cmp	r8, r7
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x26a>
 800058e:	18ff      	adds	r7, r7, r3
 8000590:	f104 30ff 	add.w	r0, r4, #4294967295
 8000594:	d228      	bcs.n	80005e8 <__udivmoddi4+0x2b4>
 8000596:	45b8      	cmp	r8, r7
 8000598:	d926      	bls.n	80005e8 <__udivmoddi4+0x2b4>
 800059a:	3c02      	subs	r4, #2
 800059c:	441f      	add	r7, r3
 800059e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80005a2:	ebc8 0707 	rsb	r7, r8, r7
 80005a6:	fba0 8902 	umull	r8, r9, r0, r2
 80005aa:	454f      	cmp	r7, r9
 80005ac:	4644      	mov	r4, r8
 80005ae:	464e      	mov	r6, r9
 80005b0:	d314      	bcc.n	80005dc <__udivmoddi4+0x2a8>
 80005b2:	d029      	beq.n	8000608 <__udivmoddi4+0x2d4>
 80005b4:	b365      	cbz	r5, 8000610 <__udivmoddi4+0x2dc>
 80005b6:	ebba 0304 	subs.w	r3, sl, r4
 80005ba:	eb67 0706 	sbc.w	r7, r7, r6
 80005be:	fa07 fe0e 	lsl.w	lr, r7, lr
 80005c2:	40cb      	lsrs	r3, r1
 80005c4:	40cf      	lsrs	r7, r1
 80005c6:	ea4e 0303 	orr.w	r3, lr, r3
 80005ca:	e885 0088 	stmia.w	r5, {r3, r7}
 80005ce:	2100      	movs	r1, #0
 80005d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d4:	4613      	mov	r3, r2
 80005d6:	e6f8      	b.n	80003ca <__udivmoddi4+0x96>
 80005d8:	4610      	mov	r0, r2
 80005da:	e6e0      	b.n	800039e <__udivmoddi4+0x6a>
 80005dc:	ebb8 0402 	subs.w	r4, r8, r2
 80005e0:	eb69 0603 	sbc.w	r6, r9, r3
 80005e4:	3801      	subs	r0, #1
 80005e6:	e7e5      	b.n	80005b4 <__udivmoddi4+0x280>
 80005e8:	4604      	mov	r4, r0
 80005ea:	e7d8      	b.n	800059e <__udivmoddi4+0x26a>
 80005ec:	4611      	mov	r1, r2
 80005ee:	e795      	b.n	800051c <__udivmoddi4+0x1e8>
 80005f0:	4681      	mov	r9, r0
 80005f2:	e7c0      	b.n	8000576 <__udivmoddi4+0x242>
 80005f4:	468a      	mov	sl, r1
 80005f6:	e77c      	b.n	80004f2 <__udivmoddi4+0x1be>
 80005f8:	3b02      	subs	r3, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e748      	b.n	8000490 <__udivmoddi4+0x15c>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xe4>
 8000602:	3802      	subs	r0, #2
 8000604:	443e      	add	r6, r7
 8000606:	e72f      	b.n	8000468 <__udivmoddi4+0x134>
 8000608:	45c2      	cmp	sl, r8
 800060a:	d3e7      	bcc.n	80005dc <__udivmoddi4+0x2a8>
 800060c:	463e      	mov	r6, r7
 800060e:	e7d1      	b.n	80005b4 <__udivmoddi4+0x280>
 8000610:	4629      	mov	r1, r5
 8000612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000616:	bf00      	nop

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	2400      	movs	r4, #0
 800061e:	9405      	str	r4, [sp, #20]
 8000620:	9406      	str	r4, [sp, #24]
 8000622:	9407      	str	r4, [sp, #28]
 8000624:	9408      	str	r4, [sp, #32]
 8000626:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000628:	9401      	str	r4, [sp, #4]
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800062c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	9402      	str	r4, [sp, #8]
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	f042 0204 	orr.w	r2, r2, #4
 8000646:	631a      	str	r2, [r3, #48]	; 0x30
 8000648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064a:	f002 0204 	and.w	r2, r2, #4
 800064e:	9202      	str	r2, [sp, #8]
 8000650:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	9403      	str	r4, [sp, #12]
 8000654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000656:	f042 0201 	orr.w	r2, r2, #1
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
 800065c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065e:	f002 0201 	and.w	r2, r2, #1
 8000662:	9203      	str	r2, [sp, #12]
 8000664:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	9404      	str	r4, [sp, #16]
 8000668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066a:	f042 0202 	orr.w	r2, r2, #2
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	9304      	str	r3, [sp, #16]
 8000678:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 800067a:	4e1a      	ldr	r6, [pc, #104]	; (80006e4 <MX_GPIO_Init+0xcc>)
 800067c:	4622      	mov	r2, r4
 800067e:	2101      	movs	r1, #1
 8000680:	4630      	mov	r0, r6
 8000682:	f002 fc87 	bl	8002f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);
 8000686:	4f18      	ldr	r7, [pc, #96]	; (80006e8 <MX_GPIO_Init+0xd0>)
 8000688:	4622      	mov	r2, r4
 800068a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800068e:	4638      	mov	r0, r7
 8000690:	f002 fc80 	bl	8002f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
 8000694:	2501      	movs	r5, #1
 8000696:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);
 800069e:	a905      	add	r1, sp, #20
 80006a0:	4630      	mov	r0, r6
 80006a2:	f002 fb99 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
 80006a6:	2302      	movs	r3, #2
 80006a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_GPIO_Init+0xd4>)
 80006ac:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80006b0:	a905      	add	r1, sp, #20
 80006b2:	4630      	mov	r0, r6
 80006b4:	f002 fb90 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
  GPIO_InitStruct.Pin = MOT_DIR_1_Pin|MOT_DIR_2_Pin;
 80006b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	a905      	add	r1, sp, #20
 80006c6:	4638      	mov	r0, r7
 80006c8:	f002 fb86 	bl	8002dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80006cc:	4622      	mov	r2, r4
 80006ce:	2105      	movs	r1, #5
 80006d0:	2007      	movs	r0, #7
 80006d2:	f002 fe7d 	bl	80033d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006d6:	2007      	movs	r0, #7
 80006d8:	f002 feac 	bl	8003434 <HAL_NVIC_EnableIRQ>

}
 80006dc:	b00b      	add	sp, #44	; 0x2c
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020800 	.word	0x40020800
 80006e8:	40020400 	.word	0x40020400
 80006ec:	10110000 	.word	0x10110000

080006f0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80006f0:	b510      	push	{r4, lr}
 80006f2:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006f4:	2400      	movs	r4, #0
 80006f6:	9401      	str	r4, [sp, #4]
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_DMA_Init+0x40>)
 80006fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800070c:	4622      	mov	r2, r4
 800070e:	2105      	movs	r1, #5
 8000710:	203a      	movs	r0, #58	; 0x3a
 8000712:	f002 fe5d 	bl	80033d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000716:	203a      	movs	r0, #58	; 0x3a
 8000718:	f002 fe8c 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800071c:	4622      	mov	r2, r4
 800071e:	2105      	movs	r1, #5
 8000720:	203b      	movs	r0, #59	; 0x3b
 8000722:	f002 fe55 	bl	80033d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000726:	203b      	movs	r0, #59	; 0x3b
 8000728:	f002 fe84 	bl	8003434 <HAL_NVIC_EnableIRQ>

}
 800072c:	b002      	add	sp, #8
 800072e:	bd10      	pop	{r4, pc}
 8000730:	40023800 	.word	0x40023800

08000734 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000734:	b530      	push	{r4, r5, lr}
 8000736:	b097      	sub	sp, #92	; 0x5c

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000738:	2400      	movs	r4, #0
 800073a:	9412      	str	r4, [sp, #72]	; 0x48
 800073c:	9413      	str	r4, [sp, #76]	; 0x4c
 800073e:	9414      	str	r4, [sp, #80]	; 0x50
 8000740:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	9410      	str	r4, [sp, #64]	; 0x40
 8000744:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	9409      	str	r4, [sp, #36]	; 0x24
 8000748:	940a      	str	r4, [sp, #40]	; 0x28
 800074a:	940b      	str	r4, [sp, #44]	; 0x2c
 800074c:	940c      	str	r4, [sp, #48]	; 0x30
 800074e:	940d      	str	r4, [sp, #52]	; 0x34
 8000750:	940e      	str	r4, [sp, #56]	; 0x38
 8000752:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000754:	2220      	movs	r2, #32
 8000756:	4621      	mov	r1, r4
 8000758:	a801      	add	r0, sp, #4
 800075a:	f007 ff71 	bl	8008640 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800075e:	4d1e      	ldr	r5, [pc, #120]	; (80007d8 <MX_TIM1_Init+0xa4>)
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_TIM1_Init+0xa8>)
 8000762:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8000764:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8000768:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800076c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000770:	4628      	mov	r0, r5
 8000772:	f002 ffbf 	bl	80036f4 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800077c:	a912      	add	r1, sp, #72	; 0x48
 800077e:	4628      	mov	r0, r5
 8000780:	f003 f8e8 	bl	8003954 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000784:	4628      	mov	r0, r5
 8000786:	f002 ffed 	bl	8003764 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078e:	a910      	add	r1, sp, #64	; 0x40
 8000790:	4628      	mov	r0, r5
 8000792:	f003 f963 	bl	8003a5c <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000796:	2360      	movs	r3, #96	; 0x60
 8000798:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800079a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800079c:	2302      	movs	r3, #2
 800079e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a0:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a2:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a4:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a6:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a8:	4622      	mov	r2, r4
 80007aa:	a909      	add	r1, sp, #36	; 0x24
 80007ac:	4628      	mov	r0, r5
 80007ae:	f003 f855 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b2:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007b4:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007b6:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007b8:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ba:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c0:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007c2:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c4:	a901      	add	r1, sp, #4
 80007c6:	4628      	mov	r0, r5
 80007c8:	f003 f986 	bl	8003ad8 <HAL_TIMEx_ConfigBreakDeadTime>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007cc:	4628      	mov	r0, r5
 80007ce:	f000 fc79 	bl	80010c4 <HAL_TIM_MspPostInit>

}
 80007d2:	b017      	add	sp, #92	; 0x5c
 80007d4:	bd30      	pop	{r4, r5, pc}
 80007d6:	bf00      	nop
 80007d8:	200052b0 	.word	0x200052b0
 80007dc:	40010000 	.word	0x40010000

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b530      	push	{r4, r5, lr}
 80007e2:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e4:	2400      	movs	r4, #0
 80007e6:	940a      	str	r4, [sp, #40]	; 0x28
 80007e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80007ea:	940c      	str	r4, [sp, #48]	; 0x30
 80007ec:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ee:	9408      	str	r4, [sp, #32]
 80007f0:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f2:	9401      	str	r4, [sp, #4]
 80007f4:	9402      	str	r4, [sp, #8]
 80007f6:	9403      	str	r4, [sp, #12]
 80007f8:	9404      	str	r4, [sp, #16]
 80007fa:	9405      	str	r4, [sp, #20]
 80007fc:	9406      	str	r4, [sp, #24]
 80007fe:	9407      	str	r4, [sp, #28]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000800:	4d15      	ldr	r5, [pc, #84]	; (8000858 <MX_TIM3_Init+0x78>)
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_TIM3_Init+0x7c>)
 8000804:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 8000806:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
 800080a:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000810:	4628      	mov	r0, r5
 8000812:	f002 ff6f 	bl	80036f4 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800081c:	a90a      	add	r1, sp, #40	; 0x28
 800081e:	4628      	mov	r0, r5
 8000820:	f003 f898 	bl	8003954 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000824:	4628      	mov	r0, r5
 8000826:	f002 ff9d 	bl	8003764 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082a:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800082e:	a908      	add	r1, sp, #32
 8000830:	4628      	mov	r0, r5
 8000832:	f003 f913 	bl	8003a5c <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800083a:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800083c:	2302      	movs	r3, #2
 800083e:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000840:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000842:	4622      	mov	r2, r4
 8000844:	a901      	add	r1, sp, #4
 8000846:	4628      	mov	r0, r5
 8000848:	f003 f808 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800084c:	4628      	mov	r0, r5
 800084e:	f000 fc39 	bl	80010c4 <HAL_TIM_MspPostInit>

}
 8000852:	b00f      	add	sp, #60	; 0x3c
 8000854:	bd30      	pop	{r4, r5, pc}
 8000856:	bf00      	nop
 8000858:	2000526c 	.word	0x2000526c
 800085c:	40000400 	.word	0x40000400

08000860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000860:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_SPI1_Init+0x38>)
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_SPI1_Init+0x3c>)
 8000866:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000868:	f44f 7382 	mov.w	r3, #260	; 0x104
 800086c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	2300      	movs	r3, #0
 8000870:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000872:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000874:	2202      	movs	r2, #2
 8000876:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000878:	2201      	movs	r2, #1
 800087a:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000880:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000882:	2208      	movs	r2, #8
 8000884:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000886:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000888:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088c:	230a      	movs	r3, #10
 800088e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000890:	f006 f808 	bl	80068a4 <HAL_SPI_Init>
 8000894:	bd08      	pop	{r3, pc}
 8000896:	bf00      	nop
 8000898:	20005af0 	.word	0x20005af0
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a0:	b530      	push	{r4, r5, lr}
 80008a2:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a4:	2400      	movs	r4, #0
 80008a6:	940a      	str	r4, [sp, #40]	; 0x28
 80008a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80008aa:	940c      	str	r4, [sp, #48]	; 0x30
 80008ac:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ae:	9408      	str	r4, [sp, #32]
 80008b0:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	9401      	str	r4, [sp, #4]
 80008b4:	9402      	str	r4, [sp, #8]
 80008b6:	9403      	str	r4, [sp, #12]
 80008b8:	9404      	str	r4, [sp, #16]
 80008ba:	9405      	str	r4, [sp, #20]
 80008bc:	9406      	str	r4, [sp, #24]
 80008be:	9407      	str	r4, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c0:	4d14      	ldr	r5, [pc, #80]	; (8000914 <MX_TIM2_Init+0x74>)
 80008c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008c6:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 83;
 80008c8:	2353      	movs	r3, #83	; 0x53
 80008ca:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 999999999;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_TIM2_Init+0x78>)
 80008d0:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d6:	4628      	mov	r0, r5
 80008d8:	f002 ff0c 	bl	80036f4 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e2:	a90a      	add	r1, sp, #40	; 0x28
 80008e4:	4628      	mov	r0, r5
 80008e6:	f003 f835 	bl	8003954 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80008ea:	4628      	mov	r0, r5
 80008ec:	f002 ff1e 	bl	800372c <HAL_TIM_OC_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f4:	a908      	add	r1, sp, #32
 80008f6:	4628      	mov	r0, r5
 80008f8:	f003 f8b0 	bl	8003a5c <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008fc:	9401      	str	r4, [sp, #4]
  sConfigOC.Pulse = 0;
 80008fe:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000902:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000904:	4622      	mov	r2, r4
 8000906:	a901      	add	r1, sp, #4
 8000908:	4628      	mov	r0, r5
 800090a:	f002 ff77 	bl	80037fc <HAL_TIM_OC_ConfigChannel>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800090e:	b00f      	add	sp, #60	; 0x3c
 8000910:	bd30      	pop	{r4, r5, pc}
 8000912:	bf00      	nop
 8000914:	20005ba4 	.word	0x20005ba4
 8000918:	3b9ac9ff 	.word	0x3b9ac9ff

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b530      	push	{r4, r5, lr}
 800091e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000920:	2230      	movs	r2, #48	; 0x30
 8000922:	2100      	movs	r1, #0
 8000924:	a808      	add	r0, sp, #32
 8000926:	f007 fe8b 	bl	8008640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092a:	2400      	movs	r4, #0
 800092c:	9403      	str	r4, [sp, #12]
 800092e:	9404      	str	r4, [sp, #16]
 8000930:	9405      	str	r4, [sp, #20]
 8000932:	9406      	str	r4, [sp, #24]
 8000934:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	9401      	str	r4, [sp, #4]
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <SystemClock_Config+0x94>)
 800093a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000940:	641a      	str	r2, [r3, #64]	; 0x40
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800094c:	9402      	str	r4, [sp, #8]
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <SystemClock_Config+0x98>)
 8000950:	6813      	ldr	r3, [r2, #0]
 8000952:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000966:	2301      	movs	r3, #1
 8000968:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2502      	movs	r5, #2
 8000972:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000974:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000978:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800097a:	2308      	movs	r3, #8
 800097c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800097e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000982:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000984:	2304      	movs	r3, #4
 8000986:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000988:	2307      	movs	r3, #7
 800098a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	a808      	add	r0, sp, #32
 800098e:	f001 fec9 	bl	8002724 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a0:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a2:	4629      	mov	r1, r5
 80009a4:	a803      	add	r0, sp, #12
 80009a6:	f002 f92f 	bl	8002c08 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80009aa:	b015      	add	sp, #84	; 0x54
 80009ac:	bd30      	pop	{r4, r5, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b508      	push	{r3, lr}
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ba:	f002 fd49 	bl	8003450 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009be:	f7ff ffad 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f7ff fe29 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c6:	f7ff fe93 	bl	80006f0 <MX_DMA_Init>
  MX_TIM1_Init();
 80009ca:	f7ff feb3 	bl	8000734 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009ce:	f7ff ff07 	bl	80007e0 <MX_TIM3_Init>
  MX_SPI1_Init();
 80009d2:	f7ff ff45 	bl	8000860 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009d6:	f7ff ff63 	bl	80008a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80009da:	f004 fc71 	bl	80052c0 <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HostIO */
  HostIOHandle = osThreadNew(StartDefaultTask, NULL, &HostIO_attributes);
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <main+0x3c>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <main+0x40>)
 80009e4:	f004 fcb4 	bl	8005350 <osThreadNew>
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <main+0x44>)
 80009ea:	6018      	str	r0, [r3, #0]
    /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009ec:	f004 fc8a 	bl	8005304 <osKernelStart>
 80009f0:	e7fe      	b.n	80009f0 <main+0x38>
 80009f2:	bf00      	nop
 80009f4:	0800fecc 	.word	0x0800fecc
 80009f8:	08007211 	.word	0x08007211
 80009fc:	200052ac 	.word	0x200052ac

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000a04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000a06:	2200      	movs	r2, #0
 8000a08:	490d      	ldr	r1, [pc, #52]	; (8000a40 <MX_USB_DEVICE_Init+0x3c>)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_USB_DEVICE_Init+0x40>)
 8000a0c:	f005 f80a 	bl	8005a24 <USBD_Init>
 8000a10:	b108      	cbz	r0, 8000a16 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8000a12:	f7ff fff5 	bl	8000a00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000a16:	490c      	ldr	r1, [pc, #48]	; (8000a48 <MX_USB_DEVICE_Init+0x44>)
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <MX_USB_DEVICE_Init+0x40>)
 8000a1a:	f005 f81b 	bl	8005a54 <USBD_RegisterClass>
 8000a1e:	b108      	cbz	r0, 8000a24 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8000a20:	f7ff ffee 	bl	8000a00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000a24:	4909      	ldr	r1, [pc, #36]	; (8000a4c <MX_USB_DEVICE_Init+0x48>)
 8000a26:	4807      	ldr	r0, [pc, #28]	; (8000a44 <MX_USB_DEVICE_Init+0x40>)
 8000a28:	f005 fe2e 	bl	8006688 <USBD_CDC_RegisterInterface>
 8000a2c:	b108      	cbz	r0, 8000a32 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8000a2e:	f7ff ffe7 	bl	8000a00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_USB_DEVICE_Init+0x40>)
 8000a34:	f005 f816 	bl	8005a64 <USBD_Start>
 8000a38:	b108      	cbz	r0, 8000a3e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8000a3a:	f7ff ffe1 	bl	8000a00 <Error_Handler>
 8000a3e:	bd08      	pop	{r3, pc}
 8000a40:	20000004 	.word	0x20000004
 8000a44:	20005ca4 	.word	0x20005ca4
 8000a48:	200000b8 	.word	0x200000b8
 8000a4c:	20000054 	.word	0x20000054

08000a50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	2300      	movs	r3, #0
 8000a56:	9303      	str	r3, [sp, #12]
 8000a58:	9304      	str	r3, [sp, #16]
 8000a5a:	9305      	str	r3, [sp, #20]
 8000a5c:	9306      	str	r3, [sp, #24]
 8000a5e:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000a60:	6803      	ldr	r3, [r0, #0]
 8000a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a66:	d139      	bne.n	8000adc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	2500      	movs	r5, #0
 8000a6a:	9501      	str	r5, [sp, #4]
 8000a6c:	4c1c      	ldr	r4, [pc, #112]	; (8000ae0 <HAL_PCD_MspInit+0x90>)
 8000a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6323      	str	r3, [r4, #48]	; 0x30
 8000a76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	9b01      	ldr	r3, [sp, #4]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a80:	ae08      	add	r6, sp, #32
 8000a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a86:	f846 3d14 	str.w	r3, [r6, #-20]!
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	4f16      	ldr	r7, [pc, #88]	; (8000ae4 <HAL_PCD_MspInit+0x94>)
 8000a8c:	4631      	mov	r1, r6
 8000a8e:	4638      	mov	r0, r7
 8000a90:	f002 f9a2 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa4:	230a      	movs	r3, #10
 8000aa6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	4638      	mov	r0, r7
 8000aac:	f002 f994 	bl	8002dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab6:	6363      	str	r3, [r4, #52]	; 0x34
 8000ab8:	9502      	str	r5, [sp, #8]
 8000aba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6463      	str	r3, [r4, #68]	; 0x44
 8000ac2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000acc:	462a      	mov	r2, r5
 8000ace:	4629      	mov	r1, r5
 8000ad0:	2043      	movs	r0, #67	; 0x43
 8000ad2:	f002 fc7d 	bl	80033d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000ad6:	2043      	movs	r0, #67	; 0x43
 8000ad8:	f002 fcac 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000adc:	b009      	add	sp, #36	; 0x24
 8000ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ae8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000aea:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8000aee:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000af2:	f004 ffd3 	bl	8005a9c <USBD_LL_SetupStage>
 8000af6:	bd08      	pop	{r3, pc}

08000af8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000af8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000afa:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000afe:	0093      	lsls	r3, r2, #2
 8000b00:	4403      	add	r3, r0
 8000b02:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000b06:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b0a:	f004 fff5 	bl	8005af8 <USBD_LL_DataOutStage>
 8000b0e:	bd08      	pop	{r3, pc}

08000b10 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b10:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000b12:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000b16:	0093      	lsls	r3, r2, #2
 8000b18:	4403      	add	r3, r0
 8000b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b1c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b20:	f005 f834 	bl	8005b8c <USBD_LL_DataInStage>
 8000b24:	bd08      	pop	{r3, pc}
 8000b26:	bf00      	nop

08000b28 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b28:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000b2a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b2e:	f005 f8d1 	bl	8005cd4 <USBD_LL_SOF>
 8000b32:	bd08      	pop	{r3, pc}

08000b34 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8000b34:	b510      	push	{r4, lr}
 8000b36:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000b38:	68c3      	ldr	r3, [r0, #12]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d001      	beq.n	8000b42 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8000b3e:	f7ff ff5f 	bl	8000a00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000b42:	2101      	movs	r1, #1
 8000b44:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000b48:	f005 f8b0 	bl	8005cac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000b4c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000b50:	f005 f884 	bl	8005c5c <USBD_LL_Reset>
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	bf00      	nop

08000b58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b58:	b510      	push	{r4, lr}
 8000b5a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000b5c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b60:	f005 f8a8 	bl	8005cb4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8000b64:	6822      	ldr	r2, [r4, #0]
 8000b66:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000b72:	6a23      	ldr	r3, [r4, #32]
 8000b74:	b123      	cbz	r3, 8000b80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000b76:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <HAL_PCD_SuspendCallback+0x2c>)
 8000b78:	6913      	ldr	r3, [r2, #16]
 8000b7a:	f043 0306 	orr.w	r3, r3, #6
 8000b7e:	6113      	str	r3, [r2, #16]
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000b8a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b8e:	f005 f89b 	bl	8005cc8 <USBD_LL_Resume>
 8000b92:	bd08      	pop	{r3, pc}

08000b94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b94:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000b96:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b9a:	f005 f8a9 	bl	8005cf0 <USBD_LL_IsoOUTIncomplete>
 8000b9e:	bd08      	pop	{r3, pc}

08000ba0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ba0:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000ba2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ba6:	f005 f8a1 	bl	8005cec <USBD_LL_IsoINIncomplete>
 8000baa:	bd08      	pop	{r3, pc}

08000bac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000bac:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8000bae:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000bb2:	f005 f89f 	bl	8005cf4 <USBD_LL_DevConnected>
 8000bb6:	bd08      	pop	{r3, pc}

08000bb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000bb8:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8000bba:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000bbe:	f005 f89b 	bl	8005cf8 <USBD_LL_DevDisconnected>
 8000bc2:	bd08      	pop	{r3, pc}

08000bc4 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8000bc4:	7803      	ldrb	r3, [r0, #0]
 8000bc6:	bb63      	cbnz	r3, 8000c22 <USBD_LL_Init+0x5e>
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000bc8:	b510      	push	{r4, lr}
 8000bca:	4603      	mov	r3, r0
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000bcc:	4816      	ldr	r0, [pc, #88]	; (8000c28 <USBD_LL_Init+0x64>)
 8000bce:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8000bd2:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bda:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be0:	2202      	movs	r2, #2
 8000be2:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000be8:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bea:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bec:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bee:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bf4:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bf6:	f000 fb19 	bl	800122c <HAL_PCD_Init>
 8000bfa:	b108      	cbz	r0, 8000c00 <USBD_LL_Init+0x3c>
  {
    Error_Handler( );
 8000bfc:	f7ff ff00 	bl	8000a00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8000c00:	4c09      	ldr	r4, [pc, #36]	; (8000c28 <USBD_LL_Init+0x64>)
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	4620      	mov	r0, r4
 8000c06:	f001 f825 	bl	8001c54 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8000c0a:	2240      	movs	r2, #64	; 0x40
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f000 fffc 	bl	8001c0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	2101      	movs	r1, #1
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f000 fff7 	bl	8001c0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8000c1e:	2000      	movs	r0, #0
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	2000      	movs	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20005f40 	.word	0x20005f40

08000c2c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000c2c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
  
  if((ep_addr & 0x80) == 0x80)
 8000c30:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000c34:	d008      	beq.n	8000c48 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000c36:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000c3a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000c3e:	008b      	lsls	r3, r1, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8000c46:	4770      	bx	lr
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000c48:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000c4c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000c50:	008b      	lsls	r3, r1, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c5c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000c5e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c62:	f000 ff27 	bl	8001ab4 <HAL_PCD_EP_GetRxCount>
}
 8000c66:	bd08      	pop	{r3, pc}

08000c68 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8000c68:	b110      	cbz	r0, 8000c70 <USBD_Get_USB_Status+0x8>
 8000c6a:	2802      	cmp	r0, #2
 8000c6c:	d002      	beq.n	8000c74 <USBD_Get_USB_Status+0xc>
 8000c6e:	e003      	b.n	8000c78 <USBD_Get_USB_Status+0x10>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8000c70:	2000      	movs	r0, #0
 8000c72:	4770      	bx	lr
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000c74:	2001      	movs	r0, #1
    break;
 8000c76:	4770      	bx	lr
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000c78:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8000c7a:	4770      	bx	lr

08000c7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000c7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8000c7e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c82:	f000 fb67 	bl	8001354 <HAL_PCD_Start>
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8000c86:	f7ff ffef 	bl	8000c68 <USBD_Get_USB_Status>
  
  return usb_status;
}
 8000c8a:	bd08      	pop	{r3, pc}

08000c8c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000c90:	4613      	mov	r3, r2
 8000c92:	4622      	mov	r2, r4
 8000c94:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c98:	f000 fe66 	bl	8001968 <HAL_PCD_EP_Open>

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000c9c:	f7ff ffe4 	bl	8000c68 <USBD_Get_USB_Status>
  
  return usb_status;
}
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	bf00      	nop

08000ca4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000ca4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000ca6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000caa:	f000 fe9d 	bl	80019e8 <HAL_PCD_EP_Close>
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8000cae:	f7ff ffdb 	bl	8000c68 <USBD_Get_USB_Status>
 
  return usb_status;  
}
 8000cb2:	bd08      	pop	{r3, pc}

08000cb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000cb4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000cb6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000cba:	f000 ff2f 	bl	8001b1c <HAL_PCD_EP_SetStall>

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000cbe:	f7ff ffd3 	bl	8000c68 <USBD_Get_USB_Status>
  
  return usb_status;  
}
 8000cc2:	bd08      	pop	{r3, pc}

08000cc4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000cc4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000cc6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000cca:	f000 ff67 	bl	8001b9c <HAL_PCD_EP_ClrStall>
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8000cce:	f7ff ffcb 	bl	8000c68 <USBD_Get_USB_Status>
  
  return usb_status; 
}
 8000cd2:	bd08      	pop	{r3, pc}

08000cd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000cd4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000cd6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000cda:	f000 fe31 	bl	8001940 <HAL_PCD_SetAddress>
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000cde:	f7ff ffc3 	bl	8000c68 <USBD_Get_USB_Status>
  
  return usb_status;  
}
 8000ce2:	bd08      	pop	{r3, pc}

08000ce4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000ce4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000ce6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000cea:	f000 feed 	bl	8001ac8 <HAL_PCD_EP_Transmit>
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8000cee:	f7ff ffbb 	bl	8000c68 <USBD_Get_USB_Status>
  
  return usb_status;    
}
 8000cf2:	bd08      	pop	{r3, pc}

08000cf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000cf4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000cf6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000cfa:	f000 fead 	bl	8001a58 <HAL_PCD_EP_Receive>
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8000cfe:	f7ff ffb3 	bl	8000c68 <USBD_Get_USB_Status>
  
  return usb_status; 
}
 8000d02:	bd08      	pop	{r3, pc}

08000d04 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000d04:	2312      	movs	r3, #18
 8000d06:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8000d08:	4800      	ldr	r0, [pc, #0]	; (8000d0c <USBD_FS_DeviceDescriptor+0x8>)
 8000d0a:	4770      	bx	lr
 8000d0c:	20000040 	.word	0x20000040

08000d10 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000d10:	2304      	movs	r3, #4
 8000d12:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8000d14:	4800      	ldr	r0, [pc, #0]	; (8000d18 <USBD_FS_LangIDStrDescriptor+0x8>)
 8000d16:	4770      	bx	lr
 8000d18:	20000020 	.word	0x20000020

08000d1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000d1c:	b430      	push	{r4, r5}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e010      	b.n	8000d44 <IntToUnicode+0x28>
  {
    if (((value >> 28)) < 0xA)
 8000d22:	0f04      	lsrs	r4, r0, #28
 8000d24:	2c09      	cmp	r4, #9
 8000d26:	d803      	bhi.n	8000d30 <IntToUnicode+0x14>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000d28:	3430      	adds	r4, #48	; 0x30
 8000d2a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8000d2e:	e002      	b.n	8000d36 <IntToUnicode+0x1a>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000d30:	3437      	adds	r4, #55	; 0x37
 8000d32:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8000d36:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8000d38:	005c      	lsls	r4, r3, #1
 8000d3a:	3401      	adds	r4, #1
 8000d3c:	2500      	movs	r5, #0
 8000d3e:	550d      	strb	r5, [r1, r4]
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000d40:	3301      	adds	r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d3ec      	bcc.n	8000d22 <IntToUnicode+0x6>

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
  }
}
 8000d48:	bc30      	pop	{r4, r5}
 8000d4a:	4770      	bx	lr

08000d4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000d4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <Get_SerialNum+0x2c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <Get_SerialNum+0x30>)
 8000d54:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000d56:	3204      	adds	r2, #4
 8000d58:	6810      	ldr	r0, [r2, #0]

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
 8000d5a:	1818      	adds	r0, r3, r0
 8000d5c:	d00a      	beq.n	8000d74 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000d5e:	4d08      	ldr	r5, [pc, #32]	; (8000d80 <Get_SerialNum+0x34>)
 8000d60:	2208      	movs	r2, #8
 8000d62:	1ca9      	adds	r1, r5, #2
 8000d64:	f7ff ffda 	bl	8000d1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000d68:	2204      	movs	r2, #4
 8000d6a:	f105 0112 	add.w	r1, r5, #18
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff ffd4 	bl	8000d1c <IntToUnicode>
 8000d74:	bd38      	pop	{r3, r4, r5, pc}
 8000d76:	bf00      	nop
 8000d78:	1fff7a10 	.word	0x1fff7a10
 8000d7c:	1fff7a14 	.word	0x1fff7a14
 8000d80:	20000024 	.word	0x20000024

08000d84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d84:	b508      	push	{r3, lr}
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000d86:	231a      	movs	r3, #26
 8000d88:	800b      	strh	r3, [r1, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000d8a:	f7ff ffdf 	bl	8000d4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
}
 8000d8e:	4801      	ldr	r0, [pc, #4]	; (8000d94 <USBD_FS_SerialStrDescriptor+0x10>)
 8000d90:	bd08      	pop	{r3, pc}
 8000d92:	bf00      	nop
 8000d94:	20000024 	.word	0x20000024

08000d98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d98:	b508      	push	{r3, lr}
 8000d9a:	460a      	mov	r2, r1
  if(speed == 0)
 8000d9c:	b920      	cbnz	r0, 8000da8 <USBD_FS_ProductStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000d9e:	4905      	ldr	r1, [pc, #20]	; (8000db4 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <USBD_FS_ProductStrDescriptor+0x20>)
 8000da2:	f005 fabd 	bl	8006320 <USBD_GetString>
 8000da6:	e003      	b.n	8000db0 <USBD_FS_ProductStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000da8:	4902      	ldr	r1, [pc, #8]	; (8000db4 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <USBD_FS_ProductStrDescriptor+0x20>)
 8000dac:	f005 fab8 	bl	8006320 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000db0:	4800      	ldr	r0, [pc, #0]	; (8000db4 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000db2:	bd08      	pop	{r3, pc}
 8000db4:	20006348 	.word	0x20006348
 8000db8:	0800fef8 	.word	0x0800fef8

08000dbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dbc:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000dbe:	4c04      	ldr	r4, [pc, #16]	; (8000dd0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8000dc6:	f005 faab 	bl	8006320 <USBD_GetString>
  return USBD_StrDesc;
}
 8000dca:	4620      	mov	r0, r4
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	bf00      	nop
 8000dd0:	20006348 	.word	0x20006348
 8000dd4:	0800ff10 	.word	0x0800ff10

08000dd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dd8:	b508      	push	{r3, lr}
 8000dda:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8000ddc:	b920      	cbnz	r0, 8000de8 <USBD_FS_ConfigStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000dde:	4905      	ldr	r1, [pc, #20]	; (8000df4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <USBD_FS_ConfigStrDescriptor+0x20>)
 8000de2:	f005 fa9d 	bl	8006320 <USBD_GetString>
 8000de6:	e003      	b.n	8000df0 <USBD_FS_ConfigStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000de8:	4902      	ldr	r1, [pc, #8]	; (8000df4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <USBD_FS_ConfigStrDescriptor+0x20>)
 8000dec:	f005 fa98 	bl	8006320 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000df0:	4800      	ldr	r0, [pc, #0]	; (8000df4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8000df2:	bd08      	pop	{r3, pc}
 8000df4:	20006348 	.word	0x20006348
 8000df8:	0800ff24 	.word	0x0800ff24

08000dfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dfc:	b508      	push	{r3, lr}
 8000dfe:	460a      	mov	r2, r1
  if(speed == 0)
 8000e00:	b920      	cbnz	r0, 8000e0c <USBD_FS_InterfaceStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000e02:	4905      	ldr	r1, [pc, #20]	; (8000e18 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8000e06:	f005 fa8b 	bl	8006320 <USBD_GetString>
 8000e0a:	e003      	b.n	8000e14 <USBD_FS_InterfaceStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000e0c:	4902      	ldr	r1, [pc, #8]	; (8000e18 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000e0e:	4803      	ldr	r0, [pc, #12]	; (8000e1c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8000e10:	f005 fa86 	bl	8006320 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000e14:	4800      	ldr	r0, [pc, #0]	; (8000e18 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000e16:	bd08      	pop	{r3, pc}
 8000e18:	20006348 	.word	0x20006348
 8000e1c:	0800ff30 	.word	0x0800ff30

08000e20 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
    return ( USBD_OK );
  /* USER CODE END 4 */
}
 8000e20:	2000      	movs	r0, #0
 8000e22:	4770      	bx	lr

08000e24 <CDC_Control_FS>:
        break;
    }

    return ( USBD_OK );
  /* USER CODE END 5 */
}
 8000e24:	2000      	movs	r0, #0
 8000e26:	4770      	bx	lr

08000e28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000e28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
    void CdcReceiveHandler( char* Buf, size_t len );
    CdcReceiveHandler( (char*)Buf, (size_t)*Len );
 8000e2a:	6809      	ldr	r1, [r1, #0]
 8000e2c:	f007 face 	bl	80083cc <CdcReceiveHandler>
    return ( USBD_OK );
  /* USER CODE END 6 */
}
 8000e30:	2000      	movs	r0, #0
 8000e32:	bd08      	pop	{r3, pc}

08000e34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000e34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, UserTxBufferFS, 0 );
 8000e36:	4c06      	ldr	r4, [pc, #24]	; (8000e50 <CDC_Init_FS+0x1c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4906      	ldr	r1, [pc, #24]	; (8000e54 <CDC_Init_FS+0x20>)
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f005 fc2b 	bl	8006698 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, UserRxBufferFS );
 8000e42:	4905      	ldr	r1, [pc, #20]	; (8000e58 <CDC_Init_FS+0x24>)
 8000e44:	4620      	mov	r0, r4
 8000e46:	f005 fc2f 	bl	80066a8 <USBD_CDC_SetRxBuffer>
    return ( USBD_OK );
  /* USER CODE END 3 */
}
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	bd10      	pop	{r4, pc}
 8000e4e:	bf00      	nop
 8000e50:	20005ca4 	.word	0x20005ca4
 8000e54:	20006648 	.word	0x20006648
 8000e58:	20006548 	.word	0x20006548

08000e5c <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <CDC_Transmit_FS+0x28>)
 8000e5e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
    if ( hcdc->TxState != 0 ) {
 8000e62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000e66:	b953      	cbnz	r3, 8000e7e <CDC_Transmit_FS+0x22>
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000e68:	b510      	push	{r4, lr}
 8000e6a:	460a      	mov	r2, r1
 8000e6c:	4601      	mov	r1, r0
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
 8000e6e:	4c05      	ldr	r4, [pc, #20]	; (8000e84 <CDC_Transmit_FS+0x28>)
 8000e70:	4620      	mov	r0, r4
 8000e72:	f005 fc11 	bl	8006698 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8000e76:	4620      	mov	r0, r4
 8000e78:	f005 fc1c 	bl	80066b4 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
 8000e7c:	bd10      	pop	{r4, pc}
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
 8000e7e:	2001      	movs	r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20005ca4 	.word	0x20005ca4

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <HardFault_Handler>:
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
    *(volatile int*)0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	e7fe      	b.n	8000e90 <HardFault_Handler+0x4>
 8000e92:	bf00      	nop

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler>
 8000e96:	bf00      	nop

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	e7fe      	b.n	8000e98 <BusFault_Handler>
 8000e9a:	bf00      	nop

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler>
 8000e9e:	bf00      	nop

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
    HAL_IncTick();
 8000ea6:	f002 faed 	bl	8003484 <HAL_IncTick>
    __HAL_TIM_CLEAR_FLAG( &htim11, TIM_IT_UPDATE );
 8000eaa:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f06f 0201 	mvn.w	r2, #1
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	bd08      	pop	{r3, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000668c 	.word	0x2000668c

08000ebc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000ebc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ebe:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <DMA2_Stream2_IRQHandler+0xc>)
 8000ec0:	f002 f988 	bl	80031d4 <HAL_DMA_IRQHandler>
 8000ec4:	bd08      	pop	{r3, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20005be4 	.word	0x20005be4

08000ecc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ecc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ece:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA2_Stream3_IRQHandler+0xc>)
 8000ed0:	f002 f980 	bl	80031d4 <HAL_DMA_IRQHandler>
 8000ed4:	bd08      	pop	{r3, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20005c44 	.word	0x20005c44

08000edc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000edc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ede:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <OTG_FS_IRQHandler+0xc>)
 8000ee0:	f000 fb08 	bl	80014f4 <HAL_PCD_IRQHandler>
 8000ee4:	bd08      	pop	{r3, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20005f40 	.word	0x20005f40

08000eec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b500      	push	{lr}
 8000eee:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	9200      	str	r2, [sp, #0]
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_MspInit+0x40>)
 8000ef6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000ef8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000efc:	6459      	str	r1, [r3, #68]	; 0x44
 8000efe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000f00:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000f04:	9100      	str	r1, [sp, #0]
 8000f06:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f08:	9201      	str	r2, [sp, #4]
 8000f0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000f0c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000f10:	6419      	str	r1, [r3, #64]	; 0x40
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	f06f 0001 	mvn.w	r0, #1
 8000f22:	f002 fa55 	bl	80033d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	b003      	add	sp, #12
 8000f28:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f30:	b530      	push	{r4, r5, lr}
 8000f32:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	2300      	movs	r3, #0
 8000f36:	9303      	str	r3, [sp, #12]
 8000f38:	9304      	str	r3, [sp, #16]
 8000f3a:	9305      	str	r3, [sp, #20]
 8000f3c:	9306      	str	r3, [sp, #24]
 8000f3e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000f40:	6802      	ldr	r2, [r0, #0]
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d155      	bne.n	8000ff4 <HAL_SPI_MspInit+0xc4>
 8000f48:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	9501      	str	r5, [sp, #4]
 8000f4e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
 8000f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000f60:	9201      	str	r2, [sp, #4]
 8000f62:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	9502      	str	r5, [sp, #8]
 8000f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f68:	f042 0201 	orr.w	r2, r2, #1
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f78:	23e0      	movs	r3, #224	; 0xe0
 8000f7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f84:	2305      	movs	r3, #5
 8000f86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	a903      	add	r1, sp, #12
 8000f8a:	481c      	ldr	r0, [pc, #112]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000f8c:	f001 ff24 	bl	8002dd8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000f90:	481b      	ldr	r0, [pc, #108]	; (8001000 <HAL_SPI_MspInit+0xd0>)
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_SPI_MspInit+0xd4>)
 8000f94:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f96:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000f9a:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9c:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9e:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa4:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa6:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa8:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000faa:	61c5      	str	r5, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fac:	6205      	str	r5, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fae:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fb0:	f002 f872 	bl	8003098 <HAL_DMA_Init>
 8000fb4:	b108      	cbz	r0, 8000fba <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
 8000fb6:	f7ff fd23 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_SPI_MspInit+0xd0>)
 8000fbc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000fbe:	639c      	str	r4, [r3, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <HAL_SPI_MspInit+0xd8>)
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_SPI_MspInit+0xdc>)
 8000fc4:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000fc6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000fca:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fcc:	2340      	movs	r3, #64	; 0x40
 8000fce:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd8:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fda:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fdc:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000fde:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe0:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe2:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fe4:	f002 f858 	bl	8003098 <HAL_DMA_Init>
 8000fe8:	b108      	cbz	r0, 8000fee <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000fea:	f7ff fd09 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_SPI_MspInit+0xd8>)
 8000ff0:	64a3      	str	r3, [r4, #72]	; 0x48
 8000ff2:	639c      	str	r4, [r3, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ff4:	b009      	add	sp, #36	; 0x24
 8000ff6:	bd30      	pop	{r4, r5, pc}
 8000ff8:	40013000 	.word	0x40013000
 8000ffc:	40020000 	.word	0x40020000
 8001000:	20005be4 	.word	0x20005be4
 8001004:	40026440 	.word	0x40026440
 8001008:	20005c44 	.word	0x20005c44
 800100c:	40026458 	.word	0x40026458

08001010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001010:	b510      	push	{r4, lr}
 8001012:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8001014:	6803      	ldr	r3, [r0, #0]
 8001016:	4a28      	ldr	r2, [pc, #160]	; (80010b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d11c      	bne.n	8001056 <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101c:	2400      	movs	r4, #0
 800101e:	9401      	str	r4, [sp, #4]
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_TIM_Base_MspInit+0xac>)
 8001022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001024:	f042 0201 	orr.w	r2, r2, #1
 8001028:	645a      	str	r2, [r3, #68]	; 0x44
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001034:	4622      	mov	r2, r4
 8001036:	4621      	mov	r1, r4
 8001038:	2019      	movs	r0, #25
 800103a:	f002 f9c9 	bl	80033d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800103e:	2019      	movs	r0, #25
 8001040:	f002 f9f8 	bl	8003434 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001044:	4622      	mov	r2, r4
 8001046:	4621      	mov	r1, r4
 8001048:	201a      	movs	r0, #26
 800104a:	f002 f9c1 	bl	80033d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800104e:	201a      	movs	r0, #26
 8001050:	f002 f9f0 	bl	8003434 <HAL_NVIC_EnableIRQ>
 8001054:	e02d      	b.n	80010b2 <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105a:	d114      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105c:	2200      	movs	r2, #0
 800105e:	9202      	str	r2, [sp, #8]
 8001060:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001064:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001066:	f041 0101 	orr.w	r1, r1, #1
 800106a:	6419      	str	r1, [r3, #64]	; 0x40
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	9b02      	ldr	r3, [sp, #8]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001076:	2105      	movs	r1, #5
 8001078:	201c      	movs	r0, #28
 800107a:	f002 f9a9 	bl	80033d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800107e:	201c      	movs	r0, #28
 8001080:	f002 f9d8 	bl	8003434 <HAL_NVIC_EnableIRQ>
 8001084:	e015      	b.n	80010b2 <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_TIM_Base_MspInit+0xb0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d112      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800108c:	2100      	movs	r1, #0
 800108e:	9103      	str	r1, [sp, #12]
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_TIM_Base_MspInit+0xac>)
 8001092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001094:	f042 0202 	orr.w	r2, r2, #2
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	9303      	str	r3, [sp, #12]
 80010a2:	9b03      	ldr	r3, [sp, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010a4:	460a      	mov	r2, r1
 80010a6:	201d      	movs	r0, #29
 80010a8:	f002 f992 	bl	80033d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010ac:	201d      	movs	r0, #29
 80010ae:	f002 f9c1 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010b2:	b004      	add	sp, #16
 80010b4:	bd10      	pop	{r4, pc}
 80010b6:	bf00      	nop
 80010b8:	40010000 	.word	0x40010000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40000400 	.word	0x40000400

080010c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010c4:	b500      	push	{lr}
 80010c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	2300      	movs	r3, #0
 80010ca:	9303      	str	r3, [sp, #12]
 80010cc:	9304      	str	r3, [sp, #16]
 80010ce:	9305      	str	r3, [sp, #20]
 80010d0:	9306      	str	r3, [sp, #24]
 80010d2:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80010d4:	6803      	ldr	r3, [r0, #0]
 80010d6:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <HAL_TIM_MspPostInit+0x80>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d117      	bne.n	800110c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_TIM_MspPostInit+0x84>)
 80010e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e4:	f042 0201 	orr.w	r2, r2, #1
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP1_Pin;
 80010f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010fe:	2301      	movs	r3, #1
 8001100:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP1_GPIO_Port, &GPIO_InitStruct);
 8001102:	a903      	add	r1, sp, #12
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <HAL_TIM_MspPostInit+0x88>)
 8001106:	f001 fe67 	bl	8002dd8 <HAL_GPIO_Init>
 800110a:	e017      	b.n	800113c <HAL_TIM_MspPostInit+0x78>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 800110c:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_TIM_MspPostInit+0x8c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d114      	bne.n	800113c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_TIM_MspPostInit+0x84>)
 8001118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800111a:	f042 0202 	orr.w	r2, r2, #2
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	9b02      	ldr	r3, [sp, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP2_Pin;
 800112a:	2310      	movs	r3, #16
 800112c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001132:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP2_GPIO_Port, &GPIO_InitStruct);
 8001134:	a903      	add	r1, sp, #12
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <HAL_TIM_MspPostInit+0x90>)
 8001138:	f001 fe4e 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800113c:	b009      	add	sp, #36	; 0x24
 800113e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001142:	bf00      	nop
 8001144:	40010000 	.word	0x40010000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40000400 	.word	0x40000400
 8001154:	40020400 	.word	0x40020400

08001158 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800115c:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800115e:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001162:	00ca      	lsls	r2, r1, #3
 8001164:	1a52      	subs	r2, r2, r1
 8001166:	0093      	lsls	r3, r2, #2
 8001168:	4403      	add	r3, r0
 800116a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800116c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800116e:	429a      	cmp	r2, r3
 8001170:	d856      	bhi.n	8001220 <PCD_WriteEmptyTxFifo+0xc8>
 8001172:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001174:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001176:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 800117a:	00a2      	lsls	r2, r4, #2
 800117c:	4402      	add	r2, r0
 800117e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001180:	4293      	cmp	r3, r2
 8001182:	d800      	bhi.n	8001186 <PCD_WriteEmptyTxFifo+0x2e>
  if (ep->xfer_count > ep->xfer_len)
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001184:	461a      	mov	r2, r3
 8001186:	460c      	mov	r4, r1
 8001188:	4607      	mov	r7, r0
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800118a:	f102 0a03 	add.w	sl, r2, #3
 800118e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001192:	e01e      	b.n	80011d2 <PCD_WriteEmptyTxFifo+0x7a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001194:	1a5b      	subs	r3, r3, r1

    if (len > ep->maxpacket)
 8001196:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800119a:	008a      	lsls	r2, r1, #2
 800119c:	443a      	add	r2, r7
 800119e:	6c56      	ldr	r6, [r2, #68]	; 0x44
 80011a0:	42b3      	cmp	r3, r6
 80011a2:	d800      	bhi.n	80011a6 <PCD_WriteEmptyTxFifo+0x4e>

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80011a4:	461e      	mov	r6, r3

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80011a6:	f106 0a03 	add.w	sl, r6, #3
 80011aa:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80011ae:	00e3      	lsls	r3, r4, #3
 80011b0:	1b1b      	subs	r3, r3, r4
 80011b2:	009d      	lsls	r5, r3, #2
 80011b4:	443d      	add	r5, r7
 80011b6:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80011b8:	7c3b      	ldrb	r3, [r7, #16]
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	b2b3      	uxth	r3, r6
 80011be:	b2e2      	uxtb	r2, r4
 80011c0:	4640      	mov	r0, r8
 80011c2:	f001 f87b 	bl	80022bc <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80011c6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80011c8:	4433      	add	r3, r6
 80011ca:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80011cc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80011ce:	441e      	add	r6, r3
 80011d0:	656e      	str	r6, [r5, #84]	; 0x54
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011d2:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 80011d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	459a      	cmp	sl, r3
 80011e0:	d809      	bhi.n	80011f6 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80011e2:	00e3      	lsls	r3, r4, #3
 80011e4:	1b1b      	subs	r3, r3, r4
 80011e6:	009a      	lsls	r2, r3, #2
 80011e8:	443a      	add	r2, r7
 80011ea:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80011ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011ee:	4299      	cmp	r1, r3
 80011f0:	d201      	bcs.n	80011f6 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ce      	bne.n	8001194 <PCD_WriteEmptyTxFifo+0x3c>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if (ep->xfer_len <= ep->xfer_count)
 80011f6:	00e3      	lsls	r3, r4, #3
 80011f8:	1b1b      	subs	r3, r3, r4
 80011fa:	0098      	lsls	r0, r3, #2
 80011fc:	4407      	add	r7, r0
 80011fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001202:	429a      	cmp	r2, r3
 8001204:	d80e      	bhi.n	8001224 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001206:	f004 040f 	and.w	r4, r4, #15
 800120a:	2301      	movs	r3, #1
 800120c:	fa03 f404 	lsl.w	r4, r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001210:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 8001214:	ea23 0404 	bic.w	r4, r3, r4
 8001218:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 800121c:	2000      	movs	r0, #0
 800121e:	e002      	b.n	8001226 <PCD_WriteEmptyTxFifo+0xce>

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
  {
    return HAL_ERROR;
 8001220:	2001      	movs	r0, #1
 8001222:	e000      	b.n	8001226 <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
  }

  return HAL_OK;
 8001224:	2000      	movs	r0, #0
}
 8001226:	b002      	add	sp, #8
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800122c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001230:	2800      	cmp	r0, #0
 8001232:	f000 808a 	beq.w	800134a <HAL_PCD_Init+0x11e>
 8001236:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001238:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800123a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800123e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001242:	d104      	bne.n	800124e <HAL_PCD_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001244:	2300      	movs	r3, #0
 8001246:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800124a:	f7ff fc01 	bl	8000a50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800124e:	2303      	movs	r3, #3
 8001250:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001254:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001256:	f413 7f80 	tst.w	r3, #256	; 0x100
 800125a:	d101      	bne.n	8001260 <HAL_PCD_Init+0x34>
  {
    hpcd->Init.dma_enable = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001260:	6820      	ldr	r0, [r4, #0]
 8001262:	f000 fddb 	bl	8001e1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001266:	4625      	mov	r5, r4
 8001268:	f855 7b10 	ldr.w	r7, [r5], #16
 800126c:	466e      	mov	r6, sp
 800126e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001270:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001276:	e895 0003 	ldmia.w	r5, {r0, r1}
 800127a:	e886 0003 	stmia.w	r6, {r0, r1}
 800127e:	1d23      	adds	r3, r4, #4
 8001280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001282:	4638      	mov	r0, r7
 8001284:	f000 fd0a 	bl	8001c9c <USB_CoreInit>
 8001288:	b120      	cbz	r0, 8001294 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800128a:	2302      	movs	r3, #2
 800128c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001290:	2501      	movs	r5, #1
 8001292:	e05b      	b.n	800134c <HAL_PCD_Init+0x120>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001294:	2100      	movs	r1, #0
 8001296:	6820      	ldr	r0, [r4, #0]
 8001298:	f000 fdc6 	bl	8001e28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129c:	2300      	movs	r3, #0
 800129e:	e015      	b.n	80012cc <HAL_PCD_Init+0xa0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012a0:	00d9      	lsls	r1, r3, #3
 80012a2:	1ac8      	subs	r0, r1, r3
 80012a4:	0082      	lsls	r2, r0, #2
 80012a6:	4422      	add	r2, r4
 80012a8:	2001      	movs	r0, #1
 80012aa:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80012ae:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012b2:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012b6:	2000      	movs	r0, #0
 80012b8:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80012bc:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012be:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80012c0:	1aca      	subs	r2, r1, r3
 80012c2:	0091      	lsls	r1, r2, #2
 80012c4:	4421      	add	r1, r4
 80012c6:	6508      	str	r0, [r1, #80]	; 0x50

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c8:	3301      	adds	r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	6865      	ldr	r5, [r4, #4]
 80012ce:	42ab      	cmp	r3, r5
 80012d0:	d3e6      	bcc.n	80012a0 <HAL_PCD_Init+0x74>
 80012d2:	2300      	movs	r3, #0
 80012d4:	e015      	b.n	8001302 <HAL_PCD_Init+0xd6>
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012d6:	00d8      	lsls	r0, r3, #3
 80012d8:	1ac1      	subs	r1, r0, r3
 80012da:	008a      	lsls	r2, r1, #2
 80012dc:	4422      	add	r2, r4
 80012de:	2100      	movs	r1, #0
 80012e0:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80012e4:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012e8:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ec:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012f0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012f4:	1ac2      	subs	r2, r0, r3
 80012f6:	0090      	lsls	r0, r2, #2
 80012f8:	4420      	add	r0, r4
 80012fa:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fe:	3301      	adds	r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	429d      	cmp	r5, r3
 8001304:	d8e7      	bhi.n	80012d6 <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001306:	4625      	mov	r5, r4
 8001308:	f855 7b10 	ldr.w	r7, [r5], #16
 800130c:	466e      	mov	r6, sp
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001314:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001316:	e895 0003 	ldmia.w	r5, {r0, r1}
 800131a:	e886 0003 	stmia.w	r6, {r0, r1}
 800131e:	1d23      	adds	r3, r4, #4
 8001320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001322:	4638      	mov	r0, r7
 8001324:	f000 fdc6 	bl	8001eb4 <USB_DevInit>
 8001328:	4605      	mov	r5, r0
 800132a:	b120      	cbz	r0, 8001336 <HAL_PCD_Init+0x10a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800132c:	2302      	movs	r3, #2
 800132e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001332:	2501      	movs	r5, #1
 8001334:	e00a      	b.n	800134c <HAL_PCD_Init+0x120>
  }

  hpcd->USB_Address = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800133c:	2301      	movs	r3, #1
 800133e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001342:	6820      	ldr	r0, [r4, #0]
 8001344:	f001 f960 	bl	8002608 <USB_DevDisconnect>

  return HAL_OK;
 8001348:	e000      	b.n	800134c <HAL_PCD_Init+0x120>
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 800134a:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800134c:	4628      	mov	r0, r5
 800134e:	b00b      	add	sp, #44	; 0x2c
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001352:	bf00      	nop

08001354 <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001354:	6802      	ldr	r2, [r0, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001356:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800135a:	2b01      	cmp	r3, #1
 800135c:	d018      	beq.n	8001390 <HAL_PCD_Start+0x3c>
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800135e:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001360:	2301      	movs	r3, #1
 8001362:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001366:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001368:	2b01      	cmp	r3, #1
 800136a:	d106      	bne.n	800137a <HAL_PCD_Start+0x26>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800136c:	6983      	ldr	r3, [r0, #24]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800136e:	2b01      	cmp	r3, #1
 8001370:	d003      	beq.n	800137a <HAL_PCD_Start+0x26>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001372:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6393      	str	r3, [r2, #56]	; 0x38
 800137a:	4604      	mov	r4, r0
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800137c:	6800      	ldr	r0, [r0, #0]
 800137e:	f001 f937 	bl	80025f0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001382:	6820      	ldr	r0, [r4, #0]
 8001384:	f000 fd44 	bl	8001e10 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001388:	2000      	movs	r0, #0
 800138a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800138e:	bd10      	pop	{r4, pc}
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001390:	2002      	movs	r0, #2
 8001392:	4770      	bx	lr

08001394 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	4605      	mov	r5, r0
 8001398:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800139a:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800139c:	6c19      	ldr	r1, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800139e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 80013a2:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 80013a6:	68a3      	ldr	r3, [r4, #8]

  if (hpcd->Init.dma_enable == 1U)
 80013a8:	6902      	ldr	r2, [r0, #16]
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d150      	bne.n	8001450 <PCD_EP_OutXfrComplete_int+0xbc>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80013ae:	f013 0f08 	tst.w	r3, #8
 80013b2:	d014      	beq.n	80013de <PCD_EP_OutXfrComplete_int+0x4a>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80013b4:	4a33      	ldr	r2, [pc, #204]	; (8001484 <PCD_EP_OutXfrComplete_int+0xf0>)
 80013b6:	4291      	cmp	r1, r2
 80013b8:	d905      	bls.n	80013c6 <PCD_EP_OutXfrComplete_int+0x32>
 80013ba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80013be:	d002      	beq.n	80013c6 <PCD_EP_OutXfrComplete_int+0x32>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80013c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c4:	60a3      	str	r3, [r4, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80013c6:	4628      	mov	r0, r5
 80013c8:	f7ff fb8e 	bl	8000ae8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013cc:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 80013d0:	2101      	movs	r1, #1
 80013d2:	6828      	ldr	r0, [r5, #0]
 80013d4:	f001 f978 	bl	80026c8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013d8:	2308      	movs	r3, #8
 80013da:	60a3      	str	r3, [r4, #8]
 80013dc:	e04f      	b.n	800147e <PCD_EP_OutXfrComplete_int+0xea>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80013de:	f013 0f20 	tst.w	r3, #32
 80013e2:	d002      	beq.n	80013ea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013e4:	2320      	movs	r3, #32
 80013e6:	60a3      	str	r3, [r4, #8]
 80013e8:	e049      	b.n	800147e <PCD_EP_OutXfrComplete_int+0xea>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80013ea:	f013 0f28 	tst.w	r3, #40	; 0x28
 80013ee:	d146      	bne.n	800147e <PCD_EP_OutXfrComplete_int+0xea>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80013f0:	4a24      	ldr	r2, [pc, #144]	; (8001484 <PCD_EP_OutXfrComplete_int+0xf0>)
 80013f2:	4291      	cmp	r1, r2
 80013f4:	d906      	bls.n	8001404 <PCD_EP_OutXfrComplete_int+0x70>
 80013f6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80013fa:	d003      	beq.n	8001404 <PCD_EP_OutXfrComplete_int+0x70>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80013fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001400:	60a3      	str	r3, [r4, #8]
 8001402:	e03c      	b.n	800147e <PCD_EP_OutXfrComplete_int+0xea>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001404:	00f2      	lsls	r2, r6, #3
 8001406:	1b92      	subs	r2, r2, r6
 8001408:	0093      	lsls	r3, r2, #2
 800140a:	442b      	add	r3, r5
 800140c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001410:	6921      	ldr	r1, [r4, #16]
 8001412:	f3c1 0112 	ubfx	r1, r1, #0, #19
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001416:	1a52      	subs	r2, r2, r1
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
 8001418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800141c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8001420:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001424:	440a      	add	r2, r1
 8001426:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800142a:	b2f1      	uxtb	r1, r6
 800142c:	4628      	mov	r0, r5
 800142e:	f7ff fb63 	bl	8000af8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001432:	bb26      	cbnz	r6, 800147e <PCD_EP_OutXfrComplete_int+0xea>
 8001434:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001438:	00b3      	lsls	r3, r6, #2
 800143a:	442b      	add	r3, r5
 800143c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001440:	b9eb      	cbnz	r3, 800147e <PCD_EP_OutXfrComplete_int+0xea>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001442:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8001446:	2101      	movs	r1, #1
 8001448:	6828      	ldr	r0, [r5, #0]
 800144a:	f001 f93d 	bl	80026c8 <USB_EP0_OutStart>
 800144e:	e016      	b.n	800147e <PCD_EP_OutXfrComplete_int+0xea>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <PCD_EP_OutXfrComplete_int+0xf4>)
 8001452:	4291      	cmp	r1, r2
 8001454:	d110      	bne.n	8001478 <PCD_EP_OutXfrComplete_int+0xe4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001456:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800145a:	d003      	beq.n	8001464 <PCD_EP_OutXfrComplete_int+0xd0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800145c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001460:	60a3      	str	r3, [r4, #8]
 8001462:	e00c      	b.n	800147e <PCD_EP_OutXfrComplete_int+0xea>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001464:	f013 0f20 	tst.w	r3, #32
 8001468:	d001      	beq.n	800146e <PCD_EP_OutXfrComplete_int+0xda>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800146a:	2320      	movs	r3, #32
 800146c:	60a3      	str	r3, [r4, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800146e:	b2f1      	uxtb	r1, r6
 8001470:	4628      	mov	r0, r5
 8001472:	f7ff fb41 	bl	8000af8 <HAL_PCD_DataOutStageCallback>
 8001476:	e002      	b.n	800147e <PCD_EP_OutXfrComplete_int+0xea>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001478:	b2f1      	uxtb	r1, r6
 800147a:	f7ff fb3d 	bl	8000af8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800147e:	2000      	movs	r0, #0
 8001480:	bd70      	pop	{r4, r5, r6, pc}
 8001482:	bf00      	nop
 8001484:	4f54300a 	.word	0x4f54300a
 8001488:	4f54310a 	.word	0x4f54310a

0800148c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800148c:	b538      	push	{r3, r4, r5, lr}
 800148e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001490:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001492:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001494:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8001498:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800149c:	688a      	ldr	r2, [r1, #8]

  if (hpcd->Init.dma_enable == 1U)
 800149e:	6903      	ldr	r3, [r0, #16]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d109      	bne.n	80014b8 <PCD_EP_OutSetupPacket_int+0x2c>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <PCD_EP_OutSetupPacket_int+0x60>)
 80014a6:	429d      	cmp	r5, r3
 80014a8:	d90f      	bls.n	80014ca <PCD_EP_OutSetupPacket_int+0x3e>
 80014aa:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80014ae:	d00c      	beq.n	80014ca <PCD_EP_OutSetupPacket_int+0x3e>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80014b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b4:	608b      	str	r3, [r1, #8]
 80014b6:	e008      	b.n	80014ca <PCD_EP_OutSetupPacket_int+0x3e>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <PCD_EP_OutSetupPacket_int+0x64>)
 80014ba:	429d      	cmp	r5, r3
 80014bc:	d105      	bne.n	80014ca <PCD_EP_OutSetupPacket_int+0x3e>
 80014be:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80014c2:	d002      	beq.n	80014ca <PCD_EP_OutSetupPacket_int+0x3e>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80014c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c8:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80014ca:	4620      	mov	r0, r4
 80014cc:	f7ff fb0c 	bl	8000ae8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <PCD_EP_OutSetupPacket_int+0x60>)
 80014d2:	429d      	cmp	r5, r3
 80014d4:	d908      	bls.n	80014e8 <PCD_EP_OutSetupPacket_int+0x5c>
 80014d6:	6923      	ldr	r3, [r4, #16]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <PCD_EP_OutSetupPacket_int+0x5c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014dc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80014e0:	2101      	movs	r1, #1
 80014e2:	6820      	ldr	r0, [r4, #0]
 80014e4:	f001 f8f0 	bl	80026c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
}
 80014e8:	2000      	movs	r0, #0
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
 80014ec:	4f54300a 	.word	0x4f54300a
 80014f0:	4f54310a 	.word	0x4f54310a

080014f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014f8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014fa:	6805      	ldr	r5, [r0, #0]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014fc:	4628      	mov	r0, r5
 80014fe:	f001 f8c3 	bl	8002688 <USB_GetMode>
 8001502:	2800      	cmp	r0, #0
 8001504:	f040 8219 	bne.w	800193a <HAL_PCD_IRQHandler+0x446>
 8001508:	462e      	mov	r6, r5
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800150a:	6820      	ldr	r0, [r4, #0]
 800150c:	f001 f888 	bl	8002620 <USB_ReadInterrupts>
 8001510:	2800      	cmp	r0, #0
 8001512:	f000 8212 	beq.w	800193a <HAL_PCD_IRQHandler+0x446>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001516:	6820      	ldr	r0, [r4, #0]
 8001518:	f001 f882 	bl	8002620 <USB_ReadInterrupts>
 800151c:	f010 0f02 	tst.w	r0, #2
 8001520:	d004      	beq.n	800152c <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001522:	6822      	ldr	r2, [r4, #0]
 8001524:	6953      	ldr	r3, [r2, #20]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	6153      	str	r3, [r2, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800152c:	6820      	ldr	r0, [r4, #0]
 800152e:	f001 f877 	bl	8002620 <USB_ReadInterrupts>
 8001532:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8001536:	d04e      	beq.n	80015d6 <HAL_PCD_IRQHandler+0xe2>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001538:	6820      	ldr	r0, [r4, #0]
 800153a:	f001 f875 	bl	8002628 <USB_ReadDevAllOutEpInterrupt>
 800153e:	4607      	mov	r7, r0
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 8001540:	f04f 0800 	mov.w	r8, #0

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 8001544:	e045      	b.n	80015d2 <HAL_PCD_IRQHandler+0xde>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001546:	f017 0f01 	tst.w	r7, #1
 800154a:	d03f      	beq.n	80015cc <HAL_PCD_IRQHandler+0xd8>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800154c:	fa5f f188 	uxtb.w	r1, r8
 8001550:	6820      	ldr	r0, [r4, #0]
 8001552:	f001 f879 	bl	8002648 <USB_ReadDevOutEPInterrupt>
 8001556:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001558:	f010 0f01 	tst.w	r0, #1
 800155c:	d008      	beq.n	8001570 <HAL_PCD_IRQHandler+0x7c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800155e:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001562:	2201      	movs	r2, #1
 8001564:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001568:	4641      	mov	r1, r8
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff ff12 	bl	8001394 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001570:	f019 0f08 	tst.w	r9, #8
 8001574:	d008      	beq.n	8001588 <HAL_PCD_IRQHandler+0x94>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001576:	4641      	mov	r1, r8
 8001578:	4620      	mov	r0, r4
 800157a:	f7ff ff87 	bl	800148c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800157e:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001582:	2208      	movs	r2, #8
 8001584:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001588:	f019 0f10 	tst.w	r9, #16
 800158c:	d004      	beq.n	8001598 <HAL_PCD_IRQHandler+0xa4>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800158e:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001592:	2210      	movs	r2, #16
 8001594:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001598:	f019 0f20 	tst.w	r9, #32
 800159c:	d00d      	beq.n	80015ba <HAL_PCD_IRQHandler+0xc6>
          {
            if (hpcd->Init.dma_enable == 1U)
 800159e:	6923      	ldr	r3, [r4, #16]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_PCD_IRQHandler+0xbc>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015a4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80015a8:	2101      	movs	r1, #1
 80015aa:	6820      	ldr	r0, [r4, #0]
 80015ac:	f001 f88c 	bl	80026c8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015b0:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80015b4:	2220      	movs	r2, #32
 80015b6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015ba:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 80015be:	d005      	beq.n	80015cc <HAL_PCD_IRQHandler+0xd8>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015c0:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80015c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }
        }
        epnum++;
 80015cc:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80015d0:	087f      	lsrs	r7, r7, #1
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 80015d2:	2f00      	cmp	r7, #0
 80015d4:	d1b7      	bne.n	8001546 <HAL_PCD_IRQHandler+0x52>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015d6:	6820      	ldr	r0, [r4, #0]
 80015d8:	f001 f822 	bl	8002620 <USB_ReadInterrupts>
 80015dc:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80015e0:	d071      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015e2:	6820      	ldr	r0, [r4, #0]
 80015e4:	f001 f828 	bl	8002638 <USB_ReadDevAllInEpInterrupt>
 80015e8:	4607      	mov	r7, r0

      epnum = 0U;
 80015ea:	f04f 0800 	mov.w	r8, #0

      while (ep_intr != 0U)
 80015ee:	e068      	b.n	80016c2 <HAL_PCD_IRQHandler+0x1ce>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015f0:	f017 0f01 	tst.w	r7, #1
 80015f4:	d062      	beq.n	80016bc <HAL_PCD_IRQHandler+0x1c8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015f6:	fa5f fa88 	uxtb.w	sl, r8
 80015fa:	4651      	mov	r1, sl
 80015fc:	6820      	ldr	r0, [r4, #0]
 80015fe:	f001 f82d 	bl	800265c <USB_ReadDevInEPInterrupt>
 8001602:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001604:	f010 0f01 	tst.w	r0, #1
 8001608:	d031      	beq.n	800166e <HAL_PCD_IRQHandler+0x17a>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800160a:	f008 030f 	and.w	r3, r8, #15
 800160e:	2101      	movs	r1, #1
 8001610:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001614:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 8001618:	ea23 0302 	bic.w	r3, r3, r2
 800161c:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001620:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001624:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908

            if (hpcd->Init.dma_enable == 1U)
 8001628:	6923      	ldr	r3, [r4, #16]
 800162a:	428b      	cmp	r3, r1
 800162c:	d109      	bne.n	8001642 <HAL_PCD_IRQHandler+0x14e>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800162e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001632:	ebc8 0202 	rsb	r2, r8, r2
 8001636:	0093      	lsls	r3, r2, #2
 8001638:	4423      	add	r3, r4
 800163a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800163c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800163e:	440a      	add	r2, r1
 8001640:	649a      	str	r2, [r3, #72]	; 0x48
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001642:	4651      	mov	r1, sl
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff fa63 	bl	8000b10 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800164a:	6923      	ldr	r3, [r4, #16]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10e      	bne.n	800166e <HAL_PCD_IRQHandler+0x17a>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001650:	f1b8 0f00 	cmp.w	r8, #0
 8001654:	d10b      	bne.n	800166e <HAL_PCD_IRQHandler+0x17a>
 8001656:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 800165a:	0093      	lsls	r3, r2, #2
 800165c:	4423      	add	r3, r4
 800165e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001660:	b92b      	cbnz	r3, 800166e <HAL_PCD_IRQHandler+0x17a>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001662:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001666:	2101      	movs	r1, #1
 8001668:	6820      	ldr	r0, [r4, #0]
 800166a:	f001 f82d 	bl	80026c8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800166e:	f019 0f08 	tst.w	r9, #8
 8001672:	d004      	beq.n	800167e <HAL_PCD_IRQHandler+0x18a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001674:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001678:	2208      	movs	r2, #8
 800167a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800167e:	f019 0f10 	tst.w	r9, #16
 8001682:	d004      	beq.n	800168e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001684:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001688:	2210      	movs	r2, #16
 800168a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800168e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001692:	d004      	beq.n	800169e <HAL_PCD_IRQHandler+0x1aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001694:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800169e:	f019 0f02 	tst.w	r9, #2
 80016a2:	d004      	beq.n	80016ae <HAL_PCD_IRQHandler+0x1ba>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016a4:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80016a8:	2202      	movs	r2, #2
 80016aa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016ae:	f019 0f80 	tst.w	r9, #128	; 0x80
 80016b2:	d003      	beq.n	80016bc <HAL_PCD_IRQHandler+0x1c8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016b4:	4641      	mov	r1, r8
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff fd4e 	bl	8001158 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016bc:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80016c0:	087f      	lsrs	r7, r7, #1
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);

      epnum = 0U;

      while (ep_intr != 0U)
 80016c2:	2f00      	cmp	r7, #0
 80016c4:	d194      	bne.n	80015f0 <HAL_PCD_IRQHandler+0xfc>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	f000 ffaa 	bl	8002620 <USB_ReadInterrupts>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	da18      	bge.n	8001702 <HAL_PCD_IRQHandler+0x20e>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016d0:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 80016dc:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d106      	bne.n	80016f2 <HAL_PCD_IRQHandler+0x1fe>
      {
        hpcd->LPM_State = LPM_L0;
 80016e4:	2100      	movs	r1, #0
 80016e6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016ea:	4620      	mov	r0, r4
 80016ec:	f000 fab6 	bl	8001c5c <HAL_PCDEx_LPM_Callback>
 80016f0:	e002      	b.n	80016f8 <HAL_PCD_IRQHandler+0x204>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fa48 	bl	8000b88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016f8:	6822      	ldr	r2, [r4, #0]
 80016fa:	6953      	ldr	r3, [r2, #20]
 80016fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001700:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001702:	6820      	ldr	r0, [r4, #0]
 8001704:	f000 ff8c 	bl	8002620 <USB_ReadInterrupts>
 8001708:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800170c:	d00c      	beq.n	8001728 <HAL_PCD_IRQHandler+0x234>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800170e:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8001712:	f013 0f01 	tst.w	r3, #1
 8001716:	d002      	beq.n	800171e <HAL_PCD_IRQHandler+0x22a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fa1d 	bl	8000b58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800171e:	6822      	ldr	r2, [r4, #0]
 8001720:	6953      	ldr	r3, [r2, #20]
 8001722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001726:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001728:	6820      	ldr	r0, [r4, #0]
 800172a:	f000 ff79 	bl	8002620 <USB_ReadInterrupts>
 800172e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001732:	d04f      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x2e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001734:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001740:	2110      	movs	r1, #16
 8001742:	6820      	ldr	r0, [r4, #0]
 8001744:	f000 fb88 	bl	8001e58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001748:	2200      	movs	r2, #0
 800174a:	e014      	b.n	8001776 <HAL_PCD_IRQHandler+0x282>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800174c:	eb06 1342 	add.w	r3, r6, r2, lsl #5
 8001750:	f64f 307f 	movw	r0, #64383	; 0xfb7f
 8001754:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001758:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800175c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8001760:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001764:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001768:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800176c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8001770:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001774:	3201      	adds	r2, #1
 8001776:	6863      	ldr	r3, [r4, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	d3e7      	bcc.n	800174c <HAL_PCD_IRQHandler+0x258>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001782:	61fb      	str	r3, [r7, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001786:	b153      	cbz	r3, 800179e <HAL_PCD_IRQHandler+0x2aa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800178c:	f043 030b 	orr.w	r3, r3, #11
 8001790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001796:	f043 030b 	orr.w	r3, r3, #11
 800179a:	647b      	str	r3, [r7, #68]	; 0x44
 800179c:	e009      	b.n	80017b2 <HAL_PCD_IRQHandler+0x2be>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017a8:	617b      	str	r3, [r7, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f043 030b 	orr.w	r3, r3, #11
 80017b0:	613b      	str	r3, [r7, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017b2:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80017b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017ba:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017be:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80017c2:	7c21      	ldrb	r1, [r4, #16]
 80017c4:	6820      	ldr	r0, [r4, #0]
 80017c6:	f000 ff7f 	bl	80026c8 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017ca:	6822      	ldr	r2, [r4, #0]
 80017cc:	6953      	ldr	r3, [r2, #20]
 80017ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017d4:	6820      	ldr	r0, [r4, #0]
 80017d6:	f000 ff23 	bl	8002620 <USB_ReadInterrupts>
 80017da:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80017de:	d016      	beq.n	800180e <HAL_PCD_IRQHandler+0x31a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017e0:	6820      	ldr	r0, [r4, #0]
 80017e2:	f000 ff55 	bl	8002690 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017e6:	6820      	ldr	r0, [r4, #0]
 80017e8:	f000 fc34 	bl	8002054 <USB_GetDevSpeed>
 80017ec:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017ee:	6826      	ldr	r6, [r4, #0]
 80017f0:	f001 fabe 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 80017f4:	7b22      	ldrb	r2, [r4, #12]
 80017f6:	4601      	mov	r1, r0
 80017f8:	4630      	mov	r0, r6
 80017fa:	f000 fa93 	bl	8001d24 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff f998 	bl	8000b34 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001804:	6822      	ldr	r2, [r4, #0]
 8001806:	6953      	ldr	r3, [r2, #20]
 8001808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180c:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800180e:	6820      	ldr	r0, [r4, #0]
 8001810:	f000 ff06 	bl	8002620 <USB_ReadInterrupts>
 8001814:	f010 0f10 	tst.w	r0, #16
 8001818:	d043      	beq.n	80018a2 <HAL_PCD_IRQHandler+0x3ae>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800181a:	6822      	ldr	r2, [r4, #0]
 800181c:	6993      	ldr	r3, [r2, #24]
 800181e:	f023 0310 	bic.w	r3, r3, #16
 8001822:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8001824:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001826:	f006 070f 	and.w	r7, r6, #15

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800182a:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800182e:	2b02      	cmp	r3, #2
 8001830:	d11f      	bne.n	8001872 <HAL_PCD_IRQHandler+0x37e>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001832:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001836:	421e      	tst	r6, r3
 8001838:	d02e      	beq.n	8001898 <HAL_PCD_IRQHandler+0x3a4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800183a:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800183e:	ebc7 0309 	rsb	r3, r7, r9
 8001842:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001846:	44a0      	add	r8, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001848:	0936      	lsrs	r6, r6, #4

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800184a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800184e:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8001852:	4628      	mov	r0, r5
 8001854:	f000 fe4e 	bl	80024f4 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001858:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800185c:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8001860:	4433      	add	r3, r6
 8001862:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001866:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 800186a:	441e      	add	r6, r3
 800186c:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
 8001870:	e012      	b.n	8001898 <HAL_PCD_IRQHandler+0x3a4>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001872:	2b06      	cmp	r3, #6
 8001874:	d110      	bne.n	8001898 <HAL_PCD_IRQHandler+0x3a4>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001876:	2208      	movs	r2, #8
 8001878:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800187c:	4628      	mov	r0, r5
 800187e:	f000 fe39 	bl	80024f4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001882:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001886:	00fb      	lsls	r3, r7, #3
 8001888:	1bd9      	subs	r1, r3, r7
 800188a:	008a      	lsls	r2, r1, #2
 800188c:	4422      	add	r2, r4
 800188e:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001892:	4433      	add	r3, r6
 8001894:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001898:	6822      	ldr	r2, [r4, #0]
 800189a:	6993      	ldr	r3, [r2, #24]
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018a2:	6820      	ldr	r0, [r4, #0]
 80018a4:	f000 febc 	bl	8002620 <USB_ReadInterrupts>
 80018a8:	f010 0f08 	tst.w	r0, #8
 80018ac:	d007      	beq.n	80018be <HAL_PCD_IRQHandler+0x3ca>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff f93a 	bl	8000b28 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	6953      	ldr	r3, [r2, #20]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018be:	6820      	ldr	r0, [r4, #0]
 80018c0:	f000 feae 	bl	8002620 <USB_ReadInterrupts>
 80018c4:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80018c8:	d008      	beq.n	80018dc <HAL_PCD_IRQHandler+0x3e8>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018ca:	2100      	movs	r1, #0
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff f967 	bl	8000ba0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018d2:	6822      	ldr	r2, [r4, #0]
 80018d4:	6953      	ldr	r3, [r2, #20]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018dc:	6820      	ldr	r0, [r4, #0]
 80018de:	f000 fe9f 	bl	8002620 <USB_ReadInterrupts>
 80018e2:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80018e6:	d008      	beq.n	80018fa <HAL_PCD_IRQHandler+0x406>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018e8:	2100      	movs	r1, #0
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff f952 	bl	8000b94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	6953      	ldr	r3, [r2, #20]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018fa:	6820      	ldr	r0, [r4, #0]
 80018fc:	f000 fe90 	bl	8002620 <USB_ReadInterrupts>
 8001900:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001904:	d007      	beq.n	8001916 <HAL_PCD_IRQHandler+0x422>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff f950 	bl	8000bac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	6953      	ldr	r3, [r2, #20]
 8001910:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001914:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001916:	6820      	ldr	r0, [r4, #0]
 8001918:	f000 fe82 	bl	8002620 <USB_ReadInterrupts>
 800191c:	f010 0f04 	tst.w	r0, #4
 8001920:	d00b      	beq.n	800193a <HAL_PCD_IRQHandler+0x446>
    {
      temp = hpcd->Instance->GOTGINT;
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001926:	f015 0f04 	tst.w	r5, #4
 800192a:	d002      	beq.n	8001932 <HAL_PCD_IRQHandler+0x43e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff f943 	bl	8000bb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	6853      	ldr	r3, [r2, #4]
 8001936:	432b      	orrs	r3, r5
 8001938:	6053      	str	r3, [r2, #4]
 800193a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800193e:	bf00      	nop

08001940 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001940:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001944:	2b01      	cmp	r3, #1
 8001946:	d00d      	beq.n	8001964 <HAL_PCD_SetAddress+0x24>
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001948:	b510      	push	{r4, lr}
 800194a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800194c:	2301      	movs	r3, #1
 800194e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001952:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001956:	6800      	ldr	r0, [r0, #0]
 8001958:	f000 fe3a 	bl	80025d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800195c:	2000      	movs	r0, #0
 800195e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001962:	bd10      	pop	{r4, pc}
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001964:	2002      	movs	r0, #2
 8001966:	4770      	bx	lr

08001968 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800196a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800196e:	d00e      	beq.n	800198e <HAL_PCD_EP_Open+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001970:	f001 060f 	and.w	r6, r1, #15
 8001974:	00f5      	lsls	r5, r6, #3
 8001976:	1baf      	subs	r7, r5, r6
 8001978:	00bc      	lsls	r4, r7, #2
 800197a:	4627      	mov	r7, r4
 800197c:	3438      	adds	r4, #56	; 0x38
 800197e:	4404      	add	r4, r0
 8001980:	3404      	adds	r4, #4
    ep->is_in = 1U;
 8001982:	463e      	mov	r6, r7
 8001984:	4406      	add	r6, r0
 8001986:	2501      	movs	r5, #1
 8001988:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 800198c:	e00e      	b.n	80019ac <HAL_PCD_EP_Open+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198e:	f001 060f 	and.w	r6, r1, #15
 8001992:	00f5      	lsls	r5, r6, #3
 8001994:	1baf      	subs	r7, r5, r6
 8001996:	00bc      	lsls	r4, r7, #2
 8001998:	4627      	mov	r7, r4
 800199a:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 800199e:	4404      	add	r4, r0
 80019a0:	3404      	adds	r4, #4
    ep->is_in = 0U;
 80019a2:	463e      	mov	r6, r7
 80019a4:	4406      	add	r6, r0
 80019a6:	2500      	movs	r5, #0
 80019a8:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019ac:	f001 010f 	and.w	r1, r1, #15
 80019b0:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 80019b2:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 80019b4:	70e3      	strb	r3, [r4, #3]

  if (ep->is_in != 0U)
 80019b6:	7862      	ldrb	r2, [r4, #1]
 80019b8:	b102      	cbz	r2, 80019bc <HAL_PCD_EP_Open+0x54>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019ba:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d101      	bne.n	80019c4 <HAL_PCD_EP_Open+0x5c>
  {
    ep->data_pid_start = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	7123      	strb	r3, [r4, #4]
  }

  __HAL_LOCK(hpcd);
 80019c4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d00b      	beq.n	80019e4 <HAL_PCD_EP_Open+0x7c>
 80019cc:	4605      	mov	r5, r0
 80019ce:	2301      	movs	r3, #1
 80019d0:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019d4:	4621      	mov	r1, r4
 80019d6:	6800      	ldr	r0, [r0, #0]
 80019d8:	f000 fb4e 	bl	8002078 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019dc:	2000      	movs	r0, #0
 80019de:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc

  return ret;
 80019e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ep_type == EP_TYPE_BULK)
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 80019e4:	2002      	movs	r0, #2
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return ret;
}
 80019e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e8:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019ee:	d00e      	beq.n	8001a0e <HAL_PCD_EP_Close+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f0:	f001 040f 	and.w	r4, r1, #15
 80019f4:	00e2      	lsls	r2, r4, #3
 80019f6:	1b15      	subs	r5, r2, r4
 80019f8:	00ab      	lsls	r3, r5, #2
 80019fa:	461d      	mov	r5, r3
 80019fc:	3338      	adds	r3, #56	; 0x38
 80019fe:	4403      	add	r3, r0
 8001a00:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8001a02:	462c      	mov	r4, r5
 8001a04:	4404      	add	r4, r0
 8001a06:	2201      	movs	r2, #1
 8001a08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001a0c:	e00e      	b.n	8001a2c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a0e:	f001 040f 	and.w	r4, r1, #15
 8001a12:	00e2      	lsls	r2, r4, #3
 8001a14:	1b15      	subs	r5, r2, r4
 8001a16:	00ab      	lsls	r3, r5, #2
 8001a18:	461d      	mov	r5, r3
 8001a1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a1e:	4403      	add	r3, r0
 8001a20:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001a22:	462c      	mov	r4, r5
 8001a24:	4404      	add	r4, r0
 8001a26:	2200      	movs	r2, #0
 8001a28:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a2c:	f001 010f 	and.w	r1, r1, #15
 8001a30:	7019      	strb	r1, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a32:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001a36:	2a01      	cmp	r2, #1
 8001a38:	d00b      	beq.n	8001a52 <HAL_PCD_EP_Close+0x6a>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a42:	4619      	mov	r1, r3
 8001a44:	6800      	ldr	r0, [r0, #0]
 8001a46:	f000 fb63 	bl	8002110 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001a50:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001a52:	2002      	movs	r0, #2
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001a54:	bd38      	pop	{r3, r4, r5, pc}
 8001a56:	bf00      	nop

08001a58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a5e:	00ee      	lsls	r6, r5, #3
 8001a60:	1b71      	subs	r1, r6, r5
 8001a62:	008c      	lsls	r4, r1, #2
 8001a64:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001a68:	4404      	add	r4, r0
 8001a6a:	1d21      	adds	r1, r4, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a6c:	1b76      	subs	r6, r6, r5
 8001a6e:	00b4      	lsls	r4, r6, #2
 8001a70:	4404      	add	r4, r0
 8001a72:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8001a76:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001a80:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a84:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc

  if (hpcd->Init.dma_enable == 1U)
 8001a88:	6903      	ldr	r3, [r0, #16]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d105      	bne.n	8001a9a <HAL_PCD_EP_Receive+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a8e:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001a92:	00b4      	lsls	r4, r6, #2
 8001a94:	4404      	add	r4, r0
 8001a96:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a9a:	b925      	cbnz	r5, 8001aa6 <HAL_PCD_EP_Receive+0x4e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	6800      	ldr	r0, [r0, #0]
 8001aa0:	f000 fb7e 	bl	80021a0 <USB_EP0StartXfer>
 8001aa4:	e003      	b.n	8001aae <HAL_PCD_EP_Receive+0x56>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	6800      	ldr	r0, [r0, #0]
 8001aaa:	f000 fc1d 	bl	80022e8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001aae:	2000      	movs	r0, #0
 8001ab0:	bd70      	pop	{r4, r5, r6, pc}
 8001ab2:	bf00      	nop

08001ab4 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ab4:	f001 010f 	and.w	r1, r1, #15
 8001ab8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001abc:	008b      	lsls	r3, r1, #2
 8001abe:	4418      	add	r0, r3
}
 8001ac0:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ace:	00ee      	lsls	r6, r5, #3
 8001ad0:	1b71      	subs	r1, r6, r5
 8001ad2:	008c      	lsls	r4, r1, #2
 8001ad4:	3438      	adds	r4, #56	; 0x38
 8001ad6:	4404      	add	r4, r0
 8001ad8:	1d21      	adds	r1, r4, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ada:	1b76      	subs	r6, r6, r5
 8001adc:	00b4      	lsls	r4, r6, #2
 8001ade:	4404      	add	r4, r0
 8001ae0:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8001ae2:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aee:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c

  if (hpcd->Init.dma_enable == 1U)
 8001af2:	6903      	ldr	r3, [r0, #16]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d104      	bne.n	8001b02 <HAL_PCD_EP_Transmit+0x3a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001af8:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001afc:	00b4      	lsls	r4, r6, #2
 8001afe:	4404      	add	r4, r0
 8001b00:	64e2      	str	r2, [r4, #76]	; 0x4c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b02:	b925      	cbnz	r5, 8001b0e <HAL_PCD_EP_Transmit+0x46>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	6800      	ldr	r0, [r0, #0]
 8001b08:	f000 fb4a 	bl	80021a0 <USB_EP0StartXfer>
 8001b0c:	e003      	b.n	8001b16 <HAL_PCD_EP_Transmit+0x4e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	6800      	ldr	r0, [r0, #0]
 8001b12:	f000 fbe9 	bl	80022e8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001b16:	2000      	movs	r0, #0
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
 8001b1a:	bf00      	nop

08001b1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b22:	6843      	ldr	r3, [r0, #4]
 8001b24:	429d      	cmp	r5, r3
 8001b26:	d835      	bhi.n	8001b94 <HAL_PCD_EP_SetStall+0x78>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b28:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b2c:	d00b      	beq.n	8001b46 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2e:	00ea      	lsls	r2, r5, #3
 8001b30:	1b51      	subs	r1, r2, r5
 8001b32:	008b      	lsls	r3, r1, #2
 8001b34:	4619      	mov	r1, r3
 8001b36:	3338      	adds	r3, #56	; 0x38
 8001b38:	4403      	add	r3, r0
 8001b3a:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8001b3c:	4401      	add	r1, r0
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 8001b44:	e00c      	b.n	8001b60 <HAL_PCD_EP_SetStall+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b46:	00ca      	lsls	r2, r1, #3
 8001b48:	1a54      	subs	r4, r2, r1
 8001b4a:	00a3      	lsls	r3, r4, #2
 8001b4c:	461c      	mov	r4, r3
 8001b4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b52:	4403      	add	r3, r0
 8001b54:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001b56:	4622      	mov	r2, r4
 8001b58:	4402      	add	r2, r0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  }

  ep->is_stall = 1U;
 8001b60:	2201      	movs	r2, #1
 8001b62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b64:	701d      	strb	r5, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b66:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001b6a:	2a01      	cmp	r2, #1
 8001b6c:	d014      	beq.n	8001b98 <HAL_PCD_EP_SetStall+0x7c>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	2201      	movs	r2, #1
 8001b72:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b76:	4619      	mov	r1, r3
 8001b78:	6800      	ldr	r0, [r0, #0]
 8001b7a:	f000 fccd 	bl	8002518 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b7e:	b92d      	cbnz	r5, 8001b8c <HAL_PCD_EP_SetStall+0x70>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b80:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001b84:	7c21      	ldrb	r1, [r4, #16]
 8001b86:	6820      	ldr	r0, [r4, #0]
 8001b88:	f000 fd9e 	bl	80026c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001b92:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001b94:	2001      	movs	r0, #1
 8001b96:	bd38      	pop	{r3, r4, r5, pc}
  }

  ep->is_stall = 1U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001b98:	2002      	movs	r0, #2
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}

08001b9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b9c:	f001 030f 	and.w	r3, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ba0:	6842      	ldr	r2, [r0, #4]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d82d      	bhi.n	8001c02 <HAL_PCD_EP_ClrStall+0x66>
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ba6:	b510      	push	{r4, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ba8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001bac:	d00b      	beq.n	8001bc6 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	00da      	lsls	r2, r3, #3
 8001bb0:	1ad4      	subs	r4, r2, r3
 8001bb2:	00a1      	lsls	r1, r4, #2
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	3138      	adds	r1, #56	; 0x38
 8001bb8:	4401      	add	r1, r0
 8001bba:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001bbc:	4404      	add	r4, r0
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001bc4:	e00b      	b.n	8001bde <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc6:	00da      	lsls	r2, r3, #3
 8001bc8:	1ad4      	subs	r4, r2, r3
 8001bca:	00a1      	lsls	r1, r4, #2
 8001bcc:	460c      	mov	r4, r1
 8001bce:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001bd2:	4401      	add	r1, r0
 8001bd4:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001bd6:	4404      	add	r4, r0
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  }

  ep->is_stall = 0U;
 8001bde:	2200      	movs	r2, #0
 8001be0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be2:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8001be4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d00c      	beq.n	8001c06 <HAL_PCD_EP_ClrStall+0x6a>
 8001bec:	4604      	mov	r4, r0
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bf4:	6800      	ldr	r0, [r0, #0]
 8001bf6:	f000 fcbd 	bl	8002574 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001c00:	bd10      	pop	{r4, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001c02:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001c04:	4770      	bx	lr
  }

  ep->is_stall = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001c06:	2002      	movs	r0, #2
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001c08:	bd10      	pop	{r4, pc}
 8001c0a:	bf00      	nop

08001c0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001c0c:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001c0e:	6804      	ldr	r4, [r0, #0]
 8001c10:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001c12:	b919      	cbnz	r1, 8001c1c <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001c14:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8001c18:	62a0      	str	r0, [r4, #40]	; 0x28
 8001c1a:	e018      	b.n	8001c4e <HAL_PCDEx_SetTxFiFo+0x42>
 8001c1c:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001c1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c20:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	e008      	b.n	8001c3a <HAL_PCDEx_SetTxFiFo+0x2e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001c28:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001c2c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001c30:	6849      	ldr	r1, [r1, #4]
 8001c32:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
    for (i = 0U; i < (fifo - 1U); i++)
 8001c36:	3301      	adds	r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	1e69      	subs	r1, r5, #1
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d3f3      	bcc.n	8001c28 <HAL_PCDEx_SetTxFiFo+0x1c>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001c40:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001c44:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8001c48:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001c4c:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8001c4e:	2000      	movs	r0, #0
 8001c50:	bc30      	pop	{r4, r5}
 8001c52:	4770      	bx	lr

08001c54 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001c54:	6803      	ldr	r3, [r0, #0]
 8001c56:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001c58:	2000      	movs	r0, #0
 8001c5a:	4770      	bx	lr

08001c5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8001c60:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001c62:	3301      	adds	r3, #1
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <USB_CoreReset+0x38>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d811      	bhi.n	8001c8e <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001c6a:	6902      	ldr	r2, [r0, #16]
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	daf8      	bge.n	8001c62 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001c70:	6903      	ldr	r3, [r0, #16]
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6103      	str	r3, [r0, #16]
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);

  /* Core Soft Reset */
  count = 0U;
 8001c78:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <USB_CoreReset+0x38>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d807      	bhi.n	8001c92 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001c82:	6902      	ldr	r2, [r0, #16]
 8001c84:	f012 0f01 	tst.w	r2, #1
 8001c88:	d1f7      	bne.n	8001c7a <USB_CoreReset+0x1a>

  return HAL_OK;
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	4770      	bx	lr
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001c8e:	2003      	movs	r0, #3
 8001c90:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001c92:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	00030d40 	.word	0x00030d40

08001c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	b510      	push	{r4, lr}
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	a803      	add	r0, sp, #12
 8001ca4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ca8:	9b08      	ldr	r3, [sp, #32]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d118      	bne.n	8001ce0 <USB_CoreInit+0x44>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001cae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb4:	63a3      	str	r3, [r4, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001cb6:	68e3      	ldr	r3, [r4, #12]
 8001cb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cc0:	60e3      	str	r3, [r4, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001cc2:	68e3      	ldr	r3, [r4, #12]
 8001cc4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001cc8:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8001cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d103      	bne.n	8001cd8 <USB_CoreInit+0x3c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001cd0:	68e3      	ldr	r3, [r4, #12]
 8001cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cd6:	60e3      	str	r3, [r4, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff ffc1 	bl	8001c60 <USB_CoreReset>
 8001cde:	e011      	b.n	8001d04 <USB_CoreInit+0x68>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001ce0:	68e3      	ldr	r3, [r4, #12]
 8001ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce6:	60e3      	str	r3, [r4, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff ffb9 	bl	8001c60 <USB_CoreReset>

    if (cfg.battery_charging_enable == 0U)
 8001cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001cf0:	b923      	cbnz	r3, 8001cfc <USB_CoreInit+0x60>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	63a3      	str	r3, [r4, #56]	; 0x38
 8001cfa:	e003      	b.n	8001d04 <USB_CoreInit+0x68>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001cfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8001d04:	9b06      	ldr	r3, [sp, #24]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <USB_CoreInit+0x7e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001d0a:	68a3      	ldr	r3, [r4, #8]
 8001d0c:	f043 0306 	orr.w	r3, r3, #6
 8001d10:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001d12:	68a3      	ldr	r3, [r4, #8]
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	60a3      	str	r3, [r4, #8]
  }

  return ret;
}
 8001d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d1e:	b004      	add	sp, #16
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop

08001d24 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8001d24:	2a02      	cmp	r2, #2
 8001d26:	d142      	bne.n	8001dae <USB_SetTurnaroundTime+0x8a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <USB_SetTurnaroundTime+0xc4>)
 8001d2a:	440b      	add	r3, r1
 8001d2c:	4a2f      	ldr	r2, [pc, #188]	; (8001dec <USB_SetTurnaroundTime+0xc8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d93f      	bls.n	8001db2 <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001d32:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <USB_SetTurnaroundTime+0xcc>)
 8001d34:	440b      	add	r3, r1
 8001d36:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <USB_SetTurnaroundTime+0xd0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d93c      	bls.n	8001db6 <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8001d3c:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8001d40:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8001d44:	4a2c      	ldr	r2, [pc, #176]	; (8001df8 <USB_SetTurnaroundTime+0xd4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d937      	bls.n	8001dba <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8001d4a:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8001d4e:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8001d52:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8001d56:	32a0      	adds	r2, #160	; 0xa0
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d930      	bls.n	8001dbe <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <USB_SetTurnaroundTime+0xd8>)
 8001d5e:	440b      	add	r3, r1
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <USB_SetTurnaroundTime+0xdc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d92d      	bls.n	8001dc2 <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <USB_SetTurnaroundTime+0xe0>)
 8001d68:	440b      	add	r3, r1
 8001d6a:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8001d6e:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d927      	bls.n	8001dc6 <USB_SetTurnaroundTime+0xa2>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <USB_SetTurnaroundTime+0xe4>)
 8001d78:	440b      	add	r3, r1
 8001d7a:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8001d7e:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d921      	bls.n	8001dca <USB_SetTurnaroundTime+0xa6>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8001d86:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8001d8a:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8001d8e:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8001d92:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d919      	bls.n	8001dce <USB_SetTurnaroundTime+0xaa>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <USB_SetTurnaroundTime+0xe8>)
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8001da2:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d813      	bhi.n	8001dd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8001daa:	2107      	movs	r1, #7
 8001dac:	e012      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
      UsbTrd = 0x6U;
    }
  }
  else if (speed == USBD_HS_SPEED)
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8001dae:	2109      	movs	r1, #9
 8001db0:	e010      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
  if (speed == USBD_FS_SPEED)
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8001db2:	210f      	movs	r1, #15
 8001db4:	e00e      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8001db6:	210e      	movs	r1, #14
 8001db8:	e00c      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8001dba:	210d      	movs	r1, #13
 8001dbc:	e00a      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8001dbe:	210c      	movs	r1, #12
 8001dc0:	e008      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8001dc2:	210b      	movs	r1, #11
 8001dc4:	e006      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8001dc6:	210a      	movs	r1, #10
 8001dc8:	e004      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8001dca:	2109      	movs	r1, #9
 8001dcc:	e002      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8001dce:	2108      	movs	r1, #8
 8001dd0:	e000      	b.n	8001dd4 <USB_SetTurnaroundTime+0xb0>
      UsbTrd = 0x7U;
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8001dd2:	2106      	movs	r1, #6
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001dd4:	68c2      	ldr	r2, [r0, #12]
 8001dd6:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001dda:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8001ddc:	68c3      	ldr	r3, [r0, #12]
 8001dde:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001de2:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8001de4:	2000      	movs	r0, #0
 8001de6:	4770      	bx	lr
 8001de8:	ff275340 	.word	0xff275340
 8001dec:	000c34ff 	.word	0x000c34ff
 8001df0:	ff1b1e40 	.word	0xff1b1e40
 8001df4:	000f423f 	.word	0x000f423f
 8001df8:	00124f7f 	.word	0x00124f7f
 8001dfc:	fee5b660 	.word	0xfee5b660
 8001e00:	0016e35f 	.word	0x0016e35f
 8001e04:	feced300 	.word	0xfeced300
 8001e08:	feb35bc0 	.word	0xfeb35bc0
 8001e0c:	fe5954e0 	.word	0xfe5954e0

08001e10 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001e10:	6883      	ldr	r3, [r0, #8]
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001e18:	2000      	movs	r0, #0
 8001e1a:	4770      	bx	lr

08001e1c <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001e1c:	6883      	ldr	r3, [r0, #8]
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001e24:	2000      	movs	r0, #0
 8001e26:	4770      	bx	lr

08001e28 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001e28:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001e2a:	68c3      	ldr	r3, [r0, #12]
 8001e2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001e30:	60c3      	str	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 8001e32:	2901      	cmp	r1, #1
 8001e34:	d104      	bne.n	8001e40 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001e36:	68c3      	ldr	r3, [r0, #12]
 8001e38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e3c:	60c3      	str	r3, [r0, #12]
 8001e3e:	e004      	b.n	8001e4a <USB_SetCurrentMode+0x22>
  }
  else if (mode == USB_DEVICE_MODE)
 8001e40:	b941      	cbnz	r1, 8001e54 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001e42:	68c3      	ldr	r3, [r0, #12]
 8001e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e48:	60c3      	str	r3, [r0, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  HAL_Delay(50U);
 8001e4a:	2032      	movs	r0, #50	; 0x32
 8001e4c:	f001 fb2c 	bl	80034a8 <HAL_Delay>

  return HAL_OK;
 8001e50:	2000      	movs	r0, #0
 8001e52:	bd08      	pop	{r3, pc}
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
  }
  else
  {
    return HAL_ERROR;
 8001e54:	2001      	movs	r0, #1
  }
  HAL_Delay(50U);

  return HAL_OK;
}
 8001e56:	bd08      	pop	{r3, pc}

08001e58 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001e58:	0189      	lsls	r1, r1, #6
 8001e5a:	f041 0120 	orr.w	r1, r1, #32
 8001e5e:	6101      	str	r1, [r0, #16]
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;
 8001e60:	2300      	movs	r3, #0

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));

  do
  {
    if (++count > 200000U)
 8001e62:	3301      	adds	r3, #1
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <USB_FlushTxFifo+0x24>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d805      	bhi.n	8001e76 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001e6a:	6902      	ldr	r2, [r0, #16]
 8001e6c:	f012 0f20 	tst.w	r2, #32
 8001e70:	d1f7      	bne.n	8001e62 <USB_FlushTxFifo+0xa>

  return HAL_OK;
 8001e72:	2000      	movs	r0, #0
 8001e74:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001e76:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);

  return HAL_OK;
}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	00030d40 	.word	0x00030d40

08001e80 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001e80:	2310      	movs	r3, #16
 8001e82:	6103      	str	r3, [r0, #16]
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
 8001e84:	2300      	movs	r3, #0

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;

  do
  {
    if (++count > 200000U)
 8001e86:	3301      	adds	r3, #1
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <USB_FlushRxFifo+0x20>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d805      	bhi.n	8001e9a <USB_FlushRxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001e8e:	6902      	ldr	r2, [r0, #16]
 8001e90:	f012 0f10 	tst.w	r2, #16
 8001e94:	d1f7      	bne.n	8001e86 <USB_FlushRxFifo+0x6>

  return HAL_OK;
 8001e96:	2000      	movs	r0, #0
 8001e98:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001e9a:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);

  return HAL_OK;
}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	00030d40 	.word	0x00030d40

08001ea4 <USB_SetDevSpeed>:
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG |= speed;
 8001ea4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001ea8:	4319      	orrs	r1, r3
 8001eaa:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop

08001eb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eba:	4604      	mov	r4, r0
 8001ebc:	a807      	add	r0, sp, #28
 8001ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec2:	4625      	mov	r5, r4
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e006      	b.n	8001ed6 <USB_DevInit+0x22>
  {
    USBx->DIEPTXF[i] = 0U;
 8001ec8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001ecc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	6051      	str	r1, [r2, #4]
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	2b0e      	cmp	r3, #14
 8001ed8:	d9f6      	bls.n	8001ec8 <USB_DevInit+0x14>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8001eda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001edc:	b963      	cbnz	r3, 8001ef8 <USB_DevInit+0x44>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ee4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ee8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001eec:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef4:	63a3      	str	r3, [r4, #56]	; 0x38
 8001ef6:	e007      	b.n	8001f08 <USB_DevInit+0x54>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001efe:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f06:	63a3      	str	r3, [r4, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001f0e:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8001f12:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001f16:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10b      	bne.n	8001f38 <USB_DevInit+0x84>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8001f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f22:	b923      	cbnz	r3, 8001f2e <USB_DevInit+0x7a>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8001f24:	2100      	movs	r1, #0
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff ffbc 	bl	8001ea4 <USB_SetDevSpeed>
 8001f2c:	e008      	b.n	8001f40 <USB_DevInit+0x8c>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff ffb7 	bl	8001ea4 <USB_SetDevSpeed>
 8001f36:	e003      	b.n	8001f40 <USB_DevInit+0x8c>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001f38:	2103      	movs	r1, #3
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff ffb2 	bl	8001ea4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001f40:	2110      	movs	r1, #16
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7ff ff88 	bl	8001e58 <USB_FlushTxFifo>
 8001f48:	b910      	cbnz	r0, 8001f50 <USB_DevInit+0x9c>
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret = HAL_OK;
 8001f4a:	f04f 0800 	mov.w	r8, #0
 8001f4e:	e001      	b.n	8001f54 <USB_DevInit+0xa0>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
  {
    ret = HAL_ERROR;
 8001f50:	f04f 0801 	mov.w	r8, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001f54:	4620      	mov	r0, r4
 8001f56:	f7ff ff93 	bl	8001e80 <USB_FlushRxFifo>
 8001f5a:	b108      	cbz	r0, 8001f60 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8001f5c:	f04f 0801 	mov.w	r8, #1
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8001f64:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001f66:	61f3      	str	r3, [r6, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f68:	e01b      	b.n	8001fa2 <USB_DevInit+0xee>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001f6a:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001f6e:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8001f72:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8001f76:	2800      	cmp	r0, #0
 8001f78:	da0a      	bge.n	8001f90 <USB_DevInit+0xdc>
    {
      if (i == 0U)
 8001f7a:	b923      	cbnz	r3, 8001f86 <USB_DevInit+0xd2>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001f7c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f80:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8001f84:	e007      	b.n	8001f96 <USB_DevInit+0xe2>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8001f8e:	e002      	b.n	8001f96 <USB_DevInit+0xe2>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001f90:	2000      	movs	r0, #0
 8001f92:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001f96:	2200      	movs	r2, #0
 8001f98:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001f9a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8001f9e:	608a      	str	r2, [r1, #8]
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	9907      	ldr	r1, [sp, #28]
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d3e0      	bcc.n	8001f6a <USB_DevInit+0xb6>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e01b      	b.n	8001fe4 <USB_DevInit+0x130>
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001fac:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001fb0:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8001fb4:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 8001fb8:	2f00      	cmp	r7, #0
 8001fba:	da0a      	bge.n	8001fd2 <USB_DevInit+0x11e>
    {
      if (i == 0U)
 8001fbc:	b923      	cbnz	r3, 8001fc8 <USB_DevInit+0x114>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001fbe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8001fc2:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8001fc6:	e007      	b.n	8001fd8 <USB_DevInit+0x124>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001fc8:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8001fcc:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8001fd0:	e002      	b.n	8001fd8 <USB_DevInit+0x124>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001fd2:	2700      	movs	r7, #0
 8001fd4:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001fdc:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8001fe0:	6082      	str	r2, [r0, #8]

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	428b      	cmp	r3, r1
 8001fe6:	d3e1      	bcc.n	8001fac <USB_DevInit+0xf8>

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001fe8:	6933      	ldr	r3, [r6, #16]
 8001fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fee:	6133      	str	r3, [r6, #16]

  if (cfg.dma_enable == 1U)
 8001ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <USB_DevInit+0x152>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <USB_DevInit+0x198>)
 8001ff8:	6332      	str	r2, [r6, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001ffa:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8001ffc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002000:	f042 0203 	orr.w	r2, r2, #3
 8002004:	6332      	str	r2, [r6, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002006:	2200      	movs	r2, #0
 8002008:	61a2      	str	r2, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800200a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800200e:	6162      	str	r2, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002010:	b91b      	cbnz	r3, 800201a <USB_DevInit+0x166>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002012:	69a3      	ldr	r3, [r4, #24]
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800201a:	69a2      	ldr	r2, [r4, #24]
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <USB_DevInit+0x19c>)
 800201e:	4313      	orrs	r3, r2
 8002020:	61a3      	str	r3, [r4, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002024:	b11b      	cbz	r3, 800202e <USB_DevInit+0x17a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002026:	69a3      	ldr	r3, [r4, #24]
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800202e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002030:	2b01      	cmp	r3, #1
 8002032:	d105      	bne.n	8002040 <USB_DevInit+0x18c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002034:	69a3      	ldr	r3, [r4, #24]
 8002036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	61a3      	str	r3, [r4, #24]
  }

  return ret;
}
 8002040:	4640      	mov	r0, r8
 8002042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002046:	b004      	add	sp, #16
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	00800100 	.word	0x00800100
 8002050:	803c3800 	.word	0x803c3800

08002054 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002054:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002058:	f013 0306 	ands.w	r3, r3, #6
 800205c:	d005      	beq.n	800206a <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800205e:	2b02      	cmp	r3, #2
 8002060:	d005      	beq.n	800206e <USB_GetDevSpeed+0x1a>
 8002062:	2b06      	cmp	r3, #6
 8002064:	d105      	bne.n	8002072 <USB_GetDevSpeed+0x1e>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002066:	2002      	movs	r0, #2
 8002068:	4770      	bx	lr
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USBD_HS_SPEED;
 800206a:	2000      	movs	r0, #0
 800206c:	4770      	bx	lr
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800206e:	2002      	movs	r0, #2
 8002070:	4770      	bx	lr
  }
  else
  {
    speed = 0xFU;
 8002072:	200f      	movs	r0, #15
  }

  return speed;
}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop

08002078 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002078:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800207a:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 800207c:	784a      	ldrb	r2, [r1, #1]
 800207e:	2a01      	cmp	r2, #1
 8002080:	d123      	bne.n	80020ca <USB_ActivateEndpoint+0x52>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002082:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8002086:	f003 020f 	and.w	r2, r3, #15
 800208a:	2401      	movs	r4, #1
 800208c:	fa04 f202 	lsl.w	r2, r4, r2
 8002090:	b292      	uxth	r2, r2
 8002092:	4332      	orrs	r2, r6
 8002094:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002098:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800209c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80020a0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80020a4:	d131      	bne.n	800210a <USB_ActivateEndpoint+0x92>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80020a6:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 80020aa:	688a      	ldr	r2, [r1, #8]
 80020ac:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80020b0:	78c9      	ldrb	r1, [r1, #3]
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80020b2:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80020b6:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80020ba:	4323      	orrs	r3, r4
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80020c8:	e01f      	b.n	800210a <USB_ActivateEndpoint+0x92>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80020ca:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 80020ce:	f003 060f 	and.w	r6, r3, #15
 80020d2:	2201      	movs	r2, #1
 80020d4:	40b2      	lsls	r2, r6
 80020d6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80020da:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80020de:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80020e2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80020e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80020ea:	d10e      	bne.n	800210a <USB_ActivateEndpoint+0x92>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80020ec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80020f0:	688a      	ldr	r2, [r1, #8]
 80020f2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80020f6:	78c9      	ldrb	r1, [r1, #3]
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80020f8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002106:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 800210a:	2000      	movs	r0, #0
 800210c:	bc70      	pop	{r4, r5, r6}
 800210e:	4770      	bx	lr

08002110 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002110:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002112:	780c      	ldrb	r4, [r1, #0]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002114:	784b      	ldrb	r3, [r1, #1]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d11e      	bne.n	8002158 <USB_DeactivateEndpoint+0x48>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800211a:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 800211e:	f004 020f 	and.w	r2, r4, #15
 8002122:	fa03 f202 	lsl.w	r2, r3, r2
 8002126:	b292      	uxth	r2, r2
 8002128:	ea26 0202 	bic.w	r2, r6, r2
 800212c:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002130:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002134:	7809      	ldrb	r1, [r1, #0]
 8002136:	f001 010f 	and.w	r1, r1, #15
 800213a:	408b      	lsls	r3, r1
 800213c:	b29b      	uxth	r3, r3
 800213e:	ea22 0303 	bic.w	r3, r2, r3
 8002142:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002146:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800214a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <USB_DeactivateEndpoint+0x88>)
 8002150:	4013      	ands	r3, r2
 8002152:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002156:	e01c      	b.n	8002192 <USB_DeactivateEndpoint+0x82>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002158:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 800215c:	f004 050f 	and.w	r5, r4, #15
 8002160:	2201      	movs	r2, #1
 8002162:	fa02 f505 	lsl.w	r5, r2, r5
 8002166:	ea26 4505 	bic.w	r5, r6, r5, lsl #16
 800216a:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800216e:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8002172:	7809      	ldrb	r1, [r1, #0]
 8002174:	f001 010f 	and.w	r1, r1, #15
 8002178:	408a      	lsls	r2, r1
 800217a:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 800217e:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002182:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002186:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <USB_DeactivateEndpoint+0x8c>)
 800218c:	4013      	ands	r3, r2
 800218e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
}
 8002192:	2000      	movs	r0, #0
 8002194:	bc70      	pop	{r4, r5, r6}
 8002196:	4770      	bx	lr
 8002198:	ec337800 	.word	0xec337800
 800219c:	eff37800 	.word	0xeff37800

080021a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80021a0:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80021a2:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80021a4:	784c      	ldrb	r4, [r1, #1]
 80021a6:	2c01      	cmp	r4, #1
 80021a8:	d15d      	bne.n	8002266 <USB_EP0StartXfer+0xc6>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80021aa:	694c      	ldr	r4, [r1, #20]
 80021ac:	b9b4      	cbnz	r4, 80021dc <USB_EP0StartXfer+0x3c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80021ae:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80021b2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80021b6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80021ba:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80021be:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80021c2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80021c6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80021ca:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80021ce:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80021d2:	0ced      	lsrs	r5, r5, #19
 80021d4:	04ed      	lsls	r5, r5, #19
 80021d6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 80021da:	e01c      	b.n	8002216 <USB_EP0StartXfer+0x76>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80021dc:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80021e0:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 80021e4:	6925      	ldr	r5, [r4, #16]
 80021e6:	0ced      	lsrs	r5, r5, #19
 80021e8:	04ed      	lsls	r5, r5, #19
 80021ea:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80021ec:	6925      	ldr	r5, [r4, #16]
 80021ee:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80021f2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80021f6:	6125      	str	r5, [r4, #16]

      if (ep->xfer_len > ep->maxpacket)
 80021f8:	694e      	ldr	r6, [r1, #20]
 80021fa:	688d      	ldr	r5, [r1, #8]
 80021fc:	42ae      	cmp	r6, r5
 80021fe:	d900      	bls.n	8002202 <USB_EP0StartXfer+0x62>
      {
        ep->xfer_len = ep->maxpacket;
 8002200:	614d      	str	r5, [r1, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002202:	6925      	ldr	r5, [r4, #16]
 8002204:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002208:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800220a:	6926      	ldr	r6, [r4, #16]
 800220c:	694d      	ldr	r5, [r1, #20]
 800220e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002212:	4335      	orrs	r5, r6
 8002214:	6125      	str	r5, [r4, #16]
    }

    if (dma == 1U)
 8002216:	2a01      	cmp	r2, #1
 8002218:	d10e      	bne.n	8002238 <USB_EP0StartXfer+0x98>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800221a:	690a      	ldr	r2, [r1, #16]
 800221c:	b11a      	cbz	r2, 8002226 <USB_EP0StartXfer+0x86>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800221e:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002222:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002226:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800222a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800222e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002232:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002236:	e03d      	b.n	80022b4 <USB_EP0StartXfer+0x114>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002238:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800223c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002240:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002244:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8002248:	694b      	ldr	r3, [r1, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d032      	beq.n	80022b4 <USB_EP0StartXfer+0x114>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800224e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8002252:	780a      	ldrb	r2, [r1, #0]
 8002254:	f002 020f 	and.w	r2, r2, #15
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f202 	lsl.w	r2, r1, r2
 800225e:	431a      	orrs	r2, r3
 8002260:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002264:	e026      	b.n	80022b4 <USB_EP0StartXfer+0x114>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002266:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800226a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800226e:	691c      	ldr	r4, [r3, #16]
 8002270:	0ce4      	lsrs	r4, r4, #19
 8002272:	04e4      	lsls	r4, r4, #19
 8002274:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002276:	691c      	ldr	r4, [r3, #16]
 8002278:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800227c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002280:	611c      	str	r4, [r3, #16]

    if (ep->xfer_len > 0U)
 8002282:	694c      	ldr	r4, [r1, #20]
 8002284:	b10c      	cbz	r4, 800228a <USB_EP0StartXfer+0xea>
    {
      ep->xfer_len = ep->maxpacket;
 8002286:	688c      	ldr	r4, [r1, #8]
 8002288:	614c      	str	r4, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800228a:	691c      	ldr	r4, [r3, #16]
 800228c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002290:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002292:	691d      	ldr	r5, [r3, #16]
 8002294:	688c      	ldr	r4, [r1, #8]
 8002296:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800229a:	432c      	orrs	r4, r5
 800229c:	611c      	str	r4, [r3, #16]

    if (dma == 1U)
 800229e:	2a01      	cmp	r2, #1
 80022a0:	d102      	bne.n	80022a8 <USB_EP0StartXfer+0x108>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80022a2:	68ca      	ldr	r2, [r1, #12]
 80022a4:	b102      	cbz	r2, 80022a8 <USB_EP0StartXfer+0x108>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80022a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80022a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80022ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80022b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 80022b4:	2000      	movs	r0, #0
 80022b6:	bc70      	pop	{r4, r5, r6}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop

080022bc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80022bc:	b470      	push	{r4, r5, r6}
 80022be:	f89d 400c 	ldrb.w	r4, [sp, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 80022c2:	b96c      	cbnz	r4, 80022e0 <USB_WritePacket+0x24>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80022c4:	3303      	adds	r3, #3
 80022c6:	089b      	lsrs	r3, r3, #2
    for (i = 0U; i < count32b; i++)
 80022c8:	2500      	movs	r5, #0
 80022ca:	e007      	b.n	80022dc <USB_WritePacket+0x20>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80022cc:	eb00 3402 	add.w	r4, r0, r2, lsl #12
 80022d0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80022d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80022d8:	6026      	str	r6, [r4, #0]
  uint32_t count32b, i;

  if (dma == 0U)
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
 80022da:	3501      	adds	r5, #1
 80022dc:	429d      	cmp	r5, r3
 80022de:	d3f5      	bcc.n	80022cc <USB_WritePacket+0x10>
      pSrc++;
    }
  }

  return HAL_OK;
}
 80022e0:	2000      	movs	r0, #0
 80022e2:	bc70      	pop	{r4, r5, r6}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop

080022e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80022ec:	780c      	ldrb	r4, [r1, #0]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80022ee:	784b      	ldrb	r3, [r1, #1]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	f040 80ab 	bne.w	800244c <USB_EPStartXfer+0x164>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80022f6:	694b      	ldr	r3, [r1, #20]
 80022f8:	b9b3      	cbnz	r3, 8002328 <USB_EPStartXfer+0x40>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80022fa:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80022fe:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002302:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002306:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800230a:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800230e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002312:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002316:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800231a:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800231e:	0ced      	lsrs	r5, r5, #19
 8002320:	04ed      	lsls	r5, r5, #19
 8002322:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
 8002326:	e032      	b.n	800238e <USB_EPStartXfer+0xa6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002328:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800232c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002330:	0ced      	lsrs	r5, r5, #19
 8002332:	04ed      	lsls	r5, r5, #19
 8002334:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002338:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800233c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002340:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002344:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002348:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 800234c:	694d      	ldr	r5, [r1, #20]
 800234e:	688e      	ldr	r6, [r1, #8]
 8002350:	4435      	add	r5, r6
 8002352:	3d01      	subs	r5, #1
 8002354:	fbb5 f5f6 	udiv	r5, r5, r6
 8002358:	4e65      	ldr	r6, [pc, #404]	; (80024f0 <USB_EPStartXfer+0x208>)
 800235a:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 800235e:	433d      	orrs	r5, r7
 8002360:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002364:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8002368:	694d      	ldr	r5, [r1, #20]
 800236a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800236e:	4335      	orrs	r5, r6
 8002370:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);

      if (ep->type == EP_TYPE_ISOC)
 8002378:	78cd      	ldrb	r5, [r1, #3]
 800237a:	2d01      	cmp	r5, #1
 800237c:	d107      	bne.n	800238e <USB_EPStartXfer+0xa6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800237e:	691d      	ldr	r5, [r3, #16]
 8002380:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002384:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002386:	691d      	ldr	r5, [r3, #16]
 8002388:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800238c:	611d      	str	r5, [r3, #16]
      }
    }

    if (dma == 1U)
 800238e:	2a01      	cmp	r2, #1
 8002390:	d127      	bne.n	80023e2 <USB_EPStartXfer+0xfa>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002392:	690b      	ldr	r3, [r1, #16]
 8002394:	b11b      	cbz	r3, 800239e <USB_EPStartXfer+0xb6>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002396:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800239a:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
      }

      if (ep->type == EP_TYPE_ISOC)
 800239e:	78cb      	ldrb	r3, [r1, #3]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d115      	bne.n	80023d0 <USB_EPStartXfer+0xe8>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80023a4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80023a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023ac:	d108      	bne.n	80023c0 <USB_EPStartXfer+0xd8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80023ae:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80023b2:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80023b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023ba:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 80023be:	e007      	b.n	80023d0 <USB_EPStartXfer+0xe8>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80023c0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80023c4:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80023d0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80023d4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80023d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80023dc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 80023e0:	e083      	b.n	80024ea <USB_EPStartXfer+0x202>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80023e2:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80023e6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80023ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80023ee:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900

      if (ep->type != EP_TYPE_ISOC)
 80023f2:	78cb      	ldrb	r3, [r1, #3]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d00e      	beq.n	8002416 <USB_EPStartXfer+0x12e>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80023f8:	694b      	ldr	r3, [r1, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d075      	beq.n	80024ea <USB_EPStartXfer+0x202>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80023fe:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8002402:	780b      	ldrb	r3, [r1, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	2201      	movs	r2, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	4323      	orrs	r3, r4
 8002410:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002414:	e069      	b.n	80024ea <USB_EPStartXfer+0x202>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002416:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800241a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800241e:	d106      	bne.n	800242e <USB_EPStartXfer+0x146>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002420:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002428:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800242c:	e005      	b.n	800243a <USB_EPStartXfer+0x152>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800242e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800243a:	4614      	mov	r4, r2
 800243c:	460b      	mov	r3, r1
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800243e:	68c9      	ldr	r1, [r1, #12]
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	8a9b      	ldrh	r3, [r3, #20]
 8002444:	9400      	str	r4, [sp, #0]
 8002446:	f7ff ff39 	bl	80022bc <USB_WritePacket>
 800244a:	e04e      	b.n	80024ea <USB_EPStartXfer+0x202>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800244c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002450:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002454:	691d      	ldr	r5, [r3, #16]
 8002456:	0ced      	lsrs	r5, r5, #19
 8002458:	04ed      	lsls	r5, r5, #19
 800245a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800245c:	691d      	ldr	r5, [r3, #16]
 800245e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002462:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002466:	611d      	str	r5, [r3, #16]

    if (ep->xfer_len == 0U)
 8002468:	694d      	ldr	r5, [r1, #20]
 800246a:	b955      	cbnz	r5, 8002482 <USB_EPStartXfer+0x19a>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800246c:	691e      	ldr	r6, [r3, #16]
 800246e:	688d      	ldr	r5, [r1, #8]
 8002470:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002474:	4335      	orrs	r5, r6
 8002476:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002478:	691d      	ldr	r5, [r3, #16]
 800247a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800247e:	611d      	str	r5, [r3, #16]
 8002480:	e013      	b.n	80024aa <USB_EPStartXfer+0x1c2>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002482:	688e      	ldr	r6, [r1, #8]
 8002484:	4435      	add	r5, r6
 8002486:	3d01      	subs	r5, #1
 8002488:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800248c:	691f      	ldr	r7, [r3, #16]
 800248e:	4e18      	ldr	r6, [pc, #96]	; (80024f0 <USB_EPStartXfer+0x208>)
 8002490:	ea06 46c5 	and.w	r6, r6, r5, lsl #19
 8002494:	433e      	orrs	r6, r7
 8002496:	611e      	str	r6, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002498:	691f      	ldr	r7, [r3, #16]
 800249a:	688e      	ldr	r6, [r1, #8]
 800249c:	b2ad      	uxth	r5, r5
 800249e:	fb06 f505 	mul.w	r5, r6, r5
 80024a2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80024a6:	433d      	orrs	r5, r7
 80024a8:	611d      	str	r5, [r3, #16]
    }

    if (dma == 1U)
 80024aa:	2a01      	cmp	r2, #1
 80024ac:	d102      	bne.n	80024b4 <USB_EPStartXfer+0x1cc>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80024ae:	68ca      	ldr	r2, [r1, #12]
 80024b0:	b102      	cbz	r2, 80024b4 <USB_EPStartXfer+0x1cc>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80024b2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80024b4:	78cb      	ldrb	r3, [r1, #3]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d111      	bne.n	80024de <USB_EPStartXfer+0x1f6>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80024ba:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80024be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024c2:	d106      	bne.n	80024d2 <USB_EPStartXfer+0x1ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80024c4:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80024c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024cc:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 80024d0:	e005      	b.n	80024de <USB_EPStartXfer+0x1f6>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80024d2:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80024d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024da:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80024de:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80024e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80024e6:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  }

  return HAL_OK;
}
 80024ea:	2000      	movs	r0, #0
 80024ec:	b003      	add	sp, #12
 80024ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f0:	1ff80000 	.word	0x1ff80000

080024f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80024f4:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80024f6:	3203      	adds	r2, #3
 80024f8:	0892      	lsrs	r2, r2, #2

  for (i = 0U; i < count32b; i++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	e005      	b.n	800250a <USB_ReadPacket+0x16>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80024fe:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8002502:	6824      	ldr	r4, [r4, #0]
 8002504:	f841 4b04 	str.w	r4, [r1], #4
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
 8002508:	3301      	adds	r3, #1
 800250a:	4293      	cmp	r3, r2
 800250c:	d3f7      	bcc.n	80024fe <USB_ReadPacket+0xa>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
    pDest++;
  }

  return ((void *)pDest);
}
 800250e:	4608      	mov	r0, r1
 8002510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <USB_EPSetStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002518:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 800251a:	784a      	ldrb	r2, [r1, #1]
 800251c:	2a01      	cmp	r2, #1
 800251e:	d113      	bne.n	8002548 <USB_EPSetStall+0x30>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002520:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002524:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002528:	2a00      	cmp	r2, #0
 800252a:	db06      	blt.n	800253a <USB_EPSetStall+0x22>
 800252c:	b12b      	cbz	r3, 800253a <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800252e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002536:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800253a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800253e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002542:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002546:	e012      	b.n	800256e <USB_EPSetStall+0x56>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002548:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800254c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002550:	2a00      	cmp	r2, #0
 8002552:	db06      	blt.n	8002562 <USB_EPSetStall+0x4a>
 8002554:	b12b      	cbz	r3, 8002562 <USB_EPSetStall+0x4a>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002556:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800255a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800255e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002562:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800256a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800256e:	2000      	movs	r0, #0
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop

08002574 <USB_EPClearStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002574:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8002576:	784a      	ldrb	r2, [r1, #1]
 8002578:	2a01      	cmp	r2, #1
 800257a:	d113      	bne.n	80025a4 <USB_EPClearStall+0x30>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800257c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002580:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002584:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002588:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800258c:	78cb      	ldrb	r3, [r1, #3]
 800258e:	3b02      	subs	r3, #2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d819      	bhi.n	80025ca <USB_EPClearStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002596:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80025a2:	e012      	b.n	80025ca <USB_EPClearStall+0x56>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80025a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80025ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80025b4:	78cb      	ldrb	r3, [r1, #3]
 80025b6:	3b02      	subs	r3, #2
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d805      	bhi.n	80025ca <USB_EPClearStall+0x56>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80025be:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
  }
  return HAL_OK;
}
 80025ca:	2000      	movs	r0, #0
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop

080025d0 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80025d0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80025d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025d8:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80025dc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80025e0:	0109      	lsls	r1, r1, #4
 80025e2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80025e6:	4319      	orrs	r1, r3
 80025e8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800

  return HAL_OK;
}
 80025ec:	2000      	movs	r0, #0
 80025ee:	4770      	bx	lr

080025f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80025f0:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80025f2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80025f6:	f023 0302 	bic.w	r3, r3, #2
 80025fa:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80025fe:	2003      	movs	r0, #3
 8002600:	f000 ff52 	bl	80034a8 <HAL_Delay>

  return HAL_OK;
}
 8002604:	2000      	movs	r0, #0
 8002606:	bd08      	pop	{r3, pc}

08002608 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002608:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800260a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002616:	2003      	movs	r0, #3
 8002618:	f000 ff46 	bl	80034a8 <HAL_Delay>

  return HAL_OK;
}
 800261c:	2000      	movs	r0, #0
 800261e:	bd08      	pop	{r3, pc}

08002620 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002620:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002622:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8002624:	4010      	ands	r0, r2
 8002626:	4770      	bx	lr

08002628 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8002628:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800262c:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
 8002634:	0c00      	lsrs	r0, r0, #16
 8002636:	4770      	bx	lr

08002638 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8002638:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800263c:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
 8002644:	b280      	uxth	r0, r0
 8002646:	4770      	bx	lr

08002648 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002648:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800264c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002650:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8002654:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 8002656:	4010      	ands	r0, r2
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop

0800265c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800265c:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800265e:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002662:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002666:	f001 030f 	and.w	r3, r1, #15
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	01db      	lsls	r3, r3, #7
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002674:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8002678:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800267c:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
}
 800267e:	4018      	ands	r0, r3
 8002680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop

08002688 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8002688:	6940      	ldr	r0, [r0, #20]
}
 800268a:	f000 0001 	and.w	r0, r0, #1
 800268e:	4770      	bx	lr

08002690 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002690:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002694:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002698:	f023 0307 	bic.w	r3, r3, #7
 800269c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80026a0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	f002 0206 	and.w	r2, r2, #6
 80026aa:	2a04      	cmp	r2, #4
 80026ac:	d105      	bne.n	80026ba <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80026ae:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80026b2:	f042 0203 	orr.w	r2, r2, #3
 80026b6:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 80026c2:	2000      	movs	r0, #0
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop

080026c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80026c8:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026ca:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <USB_EP0_OutStart+0x58>)
 80026ce:	429c      	cmp	r4, r3
 80026d0:	d903      	bls.n	80026da <USB_EP0_OutStart+0x12>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80026d2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db1e      	blt.n	8002718 <USB_EP0_OutStart+0x50>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80026da:	2400      	movs	r4, #0
 80026dc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80026e0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80026e4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80026e8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80026ec:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80026f0:	f044 0418 	orr.w	r4, r4, #24
 80026f4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80026f8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80026fc:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8002700:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
 8002704:	2901      	cmp	r1, #1
 8002706:	d107      	bne.n	8002718 <USB_EP0_OutStart+0x50>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002708:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800270c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002710:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8002714:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8002718:	2000      	movs	r0, #0
 800271a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	4f54300a 	.word	0x4f54300a

08002724 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002724:	2800      	cmp	r0, #0
 8002726:	f000 81d7 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x3b4>
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272a:	b570      	push	{r4, r5, r6, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002730:	6803      	ldr	r3, [r0, #0]
 8002732:	f013 0f01 	tst.w	r3, #1
 8002736:	d05a      	beq.n	80027ee <HAL_RCC_OscConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002738:	4ba0      	ldr	r3, [pc, #640]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b04      	cmp	r3, #4
 8002742:	d00a      	beq.n	800275a <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002744:	4b9d      	ldr	r3, [pc, #628]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274c:	2b08      	cmp	r3, #8
 800274e:	d10d      	bne.n	800276c <HAL_RCC_OscConfig+0x48>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002750:	4b9a      	ldr	r3, [pc, #616]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002758:	d008      	beq.n	800276c <HAL_RCC_OscConfig+0x48>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275a:	4b98      	ldr	r3, [pc, #608]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002762:	d044      	beq.n	80027ee <HAL_RCC_OscConfig+0xca>
 8002764:	6863      	ldr	r3, [r4, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d141      	bne.n	80027ee <HAL_RCC_OscConfig+0xca>
 800276a:	e1b7      	b.n	8002adc <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276c:	6863      	ldr	r3, [r4, #4]
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002772:	d105      	bne.n	8002780 <HAL_RCC_OscConfig+0x5c>
 8002774:	4a91      	ldr	r2, [pc, #580]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e015      	b.n	80027ac <HAL_RCC_OscConfig+0x88>
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002784:	d109      	bne.n	800279a <HAL_RCC_OscConfig+0x76>
 8002786:	4b8d      	ldr	r3, [pc, #564]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x88>
 800279a:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027ac:	6863      	ldr	r3, [r4, #4]
 80027ae:	b17b      	cbz	r3, 80027d0 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f000 fe74 	bl	800349c <HAL_GetTick>
 80027b4:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	e005      	b.n	80027c4 <HAL_RCC_OscConfig+0xa0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b8:	f000 fe70 	bl	800349c <HAL_GetTick>
 80027bc:	1b40      	subs	r0, r0, r5
 80027be:	2864      	cmp	r0, #100	; 0x64
 80027c0:	f200 818e 	bhi.w	8002ae0 <HAL_RCC_OscConfig+0x3bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c4:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027cc:	d0f4      	beq.n	80027b8 <HAL_RCC_OscConfig+0x94>
 80027ce:	e00e      	b.n	80027ee <HAL_RCC_OscConfig+0xca>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f000 fe64 	bl	800349c <HAL_GetTick>
 80027d4:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	e005      	b.n	80027e4 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f000 fe60 	bl	800349c <HAL_GetTick>
 80027dc:	1b40      	subs	r0, r0, r5
 80027de:	2864      	cmp	r0, #100	; 0x64
 80027e0:	f200 8180 	bhi.w	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e4:	4b75      	ldr	r3, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027ec:	d1f4      	bne.n	80027d8 <HAL_RCC_OscConfig+0xb4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	f013 0f02 	tst.w	r3, #2
 80027f4:	d050      	beq.n	8002898 <HAL_RCC_OscConfig+0x174>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f6:	4b71      	ldr	r3, [pc, #452]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f013 0f0c 	tst.w	r3, #12
 80027fe:	d00a      	beq.n	8002816 <HAL_RCC_OscConfig+0xf2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002800:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002808:	2b08      	cmp	r3, #8
 800280a:	d116      	bne.n	800283a <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280c:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002814:	d111      	bne.n	800283a <HAL_RCC_OscConfig+0x116>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b69      	ldr	r3, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f013 0f02 	tst.w	r3, #2
 800281e:	d003      	beq.n	8002828 <HAL_RCC_OscConfig+0x104>
 8002820:	68e3      	ldr	r3, [r4, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	f040 8160 	bne.w	8002ae8 <HAL_RCC_OscConfig+0x3c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4a64      	ldr	r2, [pc, #400]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800282a:	6813      	ldr	r3, [r2, #0]
 800282c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002830:	6921      	ldr	r1, [r4, #16]
 8002832:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002836:	6013      	str	r3, [r2, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002838:	e02e      	b.n	8002898 <HAL_RCC_OscConfig+0x174>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800283a:	68e3      	ldr	r3, [r4, #12]
 800283c:	b1d3      	cbz	r3, 8002874 <HAL_RCC_OscConfig+0x150>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283e:	2201      	movs	r2, #1
 8002840:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <HAL_RCC_OscConfig+0x29c>)
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f000 fe2a 	bl	800349c <HAL_GetTick>
 8002848:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284a:	e005      	b.n	8002858 <HAL_RCC_OscConfig+0x134>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284c:	f000 fe26 	bl	800349c <HAL_GetTick>
 8002850:	1b40      	subs	r0, r0, r5
 8002852:	2802      	cmp	r0, #2
 8002854:	f200 814a 	bhi.w	8002aec <HAL_RCC_OscConfig+0x3c8>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	4b58      	ldr	r3, [pc, #352]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f013 0f02 	tst.w	r3, #2
 8002860:	d0f4      	beq.n	800284c <HAL_RCC_OscConfig+0x128>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002862:	4a56      	ldr	r2, [pc, #344]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002864:	6813      	ldr	r3, [r2, #0]
 8002866:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800286a:	6921      	ldr	r1, [r4, #16]
 800286c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e011      	b.n	8002898 <HAL_RCC_OscConfig+0x174>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002874:	2200      	movs	r2, #0
 8002876:	4b52      	ldr	r3, [pc, #328]	; (80029c0 <HAL_RCC_OscConfig+0x29c>)
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f000 fe0f 	bl	800349c <HAL_GetTick>
 800287e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002880:	e005      	b.n	800288e <HAL_RCC_OscConfig+0x16a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002882:	f000 fe0b 	bl	800349c <HAL_GetTick>
 8002886:	1b40      	subs	r0, r0, r5
 8002888:	2802      	cmp	r0, #2
 800288a:	f200 8131 	bhi.w	8002af0 <HAL_RCC_OscConfig+0x3cc>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f013 0f02 	tst.w	r3, #2
 8002896:	d1f4      	bne.n	8002882 <HAL_RCC_OscConfig+0x15e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	f013 0f08 	tst.w	r3, #8
 800289e:	d026      	beq.n	80028ee <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028a0:	6963      	ldr	r3, [r4, #20]
 80028a2:	b193      	cbz	r3, 80028ca <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a4:	2201      	movs	r2, #1
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f000 fdf7 	bl	800349c <HAL_GetTick>
 80028ae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b0:	e005      	b.n	80028be <HAL_RCC_OscConfig+0x19a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f000 fdf3 	bl	800349c <HAL_GetTick>
 80028b6:	1b40      	subs	r0, r0, r5
 80028b8:	2802      	cmp	r0, #2
 80028ba:	f200 811b 	bhi.w	8002af4 <HAL_RCC_OscConfig+0x3d0>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	f013 0f02 	tst.w	r3, #2
 80028c6:	d0f4      	beq.n	80028b2 <HAL_RCC_OscConfig+0x18e>
 80028c8:	e011      	b.n	80028ee <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ca:	2200      	movs	r2, #0
 80028cc:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d0:	f000 fde4 	bl	800349c <HAL_GetTick>
 80028d4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d6:	e005      	b.n	80028e4 <HAL_RCC_OscConfig+0x1c0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d8:	f000 fde0 	bl	800349c <HAL_GetTick>
 80028dc:	1b40      	subs	r0, r0, r5
 80028de:	2802      	cmp	r0, #2
 80028e0:	f200 810a 	bhi.w	8002af8 <HAL_RCC_OscConfig+0x3d4>

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e8:	f013 0f02 	tst.w	r3, #2
 80028ec:	d1f4      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1b4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	f013 0f04 	tst.w	r3, #4
 80028f4:	d07d      	beq.n	80029f2 <HAL_RCC_OscConfig+0x2ce>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80028fe:	d10d      	bne.n	800291c <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002908:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002918:	2501      	movs	r5, #1
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x1fa>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800291c:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_RCC_OscConfig+0x2a4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002926:	d113      	bne.n	8002950 <HAL_RCC_OscConfig+0x22c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <HAL_RCC_OscConfig+0x2a4>)
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f000 fdb3 	bl	800349c <HAL_GetTick>
 8002936:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e005      	b.n	8002946 <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f000 fdaf 	bl	800349c <HAL_GetTick>
 800293e:	1b80      	subs	r0, r0, r6
 8002940:	2802      	cmp	r0, #2
 8002942:	f200 80db 	bhi.w	8002afc <HAL_RCC_OscConfig+0x3d8>
      SET_BIT(PWR->CR, PWR_CR_DBP);

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCC_OscConfig+0x2a4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800294e:	d0f4      	beq.n	800293a <HAL_RCC_OscConfig+0x216>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	68a3      	ldr	r3, [r4, #8]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <HAL_RCC_OscConfig+0x23e>
 8002956:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002958:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	e014      	b.n	800298c <HAL_RCC_OscConfig+0x268>
 8002962:	2b05      	cmp	r3, #5
 8002964:	d109      	bne.n	800297a <HAL_RCC_OscConfig+0x256>
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002968:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800296a:	f042 0204 	orr.w	r2, r2, #4
 800296e:	671a      	str	r2, [r3, #112]	; 0x70
 8002970:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	671a      	str	r2, [r3, #112]	; 0x70
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x268>
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800297c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	671a      	str	r2, [r3, #112]	; 0x70
 8002984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002986:	f022 0204 	bic.w	r2, r2, #4
 800298a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298c:	68a3      	ldr	r3, [r4, #8]
 800298e:	b18b      	cbz	r3, 80029b4 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f000 fd84 	bl	800349c <HAL_GetTick>
 8002994:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002996:	e007      	b.n	80029a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f000 fd80 	bl	800349c <HAL_GetTick>
 800299c:	1b80      	subs	r0, r0, r6
 800299e:	f241 3388 	movw	r3, #5000	; 0x1388
 80029a2:	4298      	cmp	r0, r3
 80029a4:	f200 80ac 	bhi.w	8002b00 <HAL_RCC_OscConfig+0x3dc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	f013 0f02 	tst.w	r3, #2
 80029b0:	d0f2      	beq.n	8002998 <HAL_RCC_OscConfig+0x274>
 80029b2:	e018      	b.n	80029e6 <HAL_RCC_OscConfig+0x2c2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f000 fd72 	bl	800349c <HAL_GetTick>
 80029b8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ba:	e00f      	b.n	80029dc <HAL_RCC_OscConfig+0x2b8>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	42470000 	.word	0x42470000
 80029c4:	42470e80 	.word	0x42470e80
 80029c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f000 fd66 	bl	800349c <HAL_GetTick>
 80029d0:	1b80      	subs	r0, r0, r6
 80029d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80029d6:	4298      	cmp	r0, r3
 80029d8:	f200 8094 	bhi.w	8002b04 <HAL_RCC_OscConfig+0x3e0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029dc:	4b55      	ldr	r3, [pc, #340]	; (8002b34 <HAL_RCC_OscConfig+0x410>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	f013 0f02 	tst.w	r3, #2
 80029e4:	d1f2      	bne.n	80029cc <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e6:	b125      	cbz	r5, 80029f2 <HAL_RCC_OscConfig+0x2ce>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4a52      	ldr	r2, [pc, #328]	; (8002b34 <HAL_RCC_OscConfig+0x410>)
 80029ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f2:	69a3      	ldr	r3, [r4, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8087 	beq.w	8002b08 <HAL_RCC_OscConfig+0x3e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fa:	4a4e      	ldr	r2, [pc, #312]	; (8002b34 <HAL_RCC_OscConfig+0x410>)
 80029fc:	6892      	ldr	r2, [r2, #8]
 80029fe:	f002 020c 	and.w	r2, r2, #12
 8002a02:	2a08      	cmp	r2, #8
 8002a04:	d048      	beq.n	8002a98 <HAL_RCC_OscConfig+0x374>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d133      	bne.n	8002a72 <HAL_RCC_OscConfig+0x34e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4b4a      	ldr	r3, [pc, #296]	; (8002b38 <HAL_RCC_OscConfig+0x414>)
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f000 fd44 	bl	800349c <HAL_GetTick>
 8002a14:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	e004      	b.n	8002a22 <HAL_RCC_OscConfig+0x2fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a18:	f000 fd40 	bl	800349c <HAL_GetTick>
 8002a1c:	1b40      	subs	r0, r0, r5
 8002a1e:	2802      	cmp	r0, #2
 8002a20:	d874      	bhi.n	8002b0c <HAL_RCC_OscConfig+0x3e8>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	4b44      	ldr	r3, [pc, #272]	; (8002b34 <HAL_RCC_OscConfig+0x410>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a2a:	d1f5      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a2c:	69e2      	ldr	r2, [r4, #28]
 8002a2e:	6a23      	ldr	r3, [r4, #32]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a34:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a48:	4a3a      	ldr	r2, [pc, #232]	; (8002b34 <HAL_RCC_OscConfig+0x410>)
 8002a4a:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_RCC_OscConfig+0x414>)
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a52:	f000 fd23 	bl	800349c <HAL_GetTick>
 8002a56:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a58:	e004      	b.n	8002a64 <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5a:	f000 fd1f 	bl	800349c <HAL_GetTick>
 8002a5e:	1b00      	subs	r0, r0, r4
 8002a60:	2802      	cmp	r0, #2
 8002a62:	d855      	bhi.n	8002b10 <HAL_RCC_OscConfig+0x3ec>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <HAL_RCC_OscConfig+0x410>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a6c:	d0f5      	beq.n	8002a5a <HAL_RCC_OscConfig+0x336>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002a6e:	2000      	movs	r0, #0
 8002a70:	e05d      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	2200      	movs	r2, #0
 8002a74:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <HAL_RCC_OscConfig+0x414>)
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f000 fd10 	bl	800349c <HAL_GetTick>
 8002a7c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e004      	b.n	8002a8a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f000 fd0c 	bl	800349c <HAL_GetTick>
 8002a84:	1b00      	subs	r0, r0, r4
 8002a86:	2802      	cmp	r0, #2
 8002a88:	d844      	bhi.n	8002b14 <HAL_RCC_OscConfig+0x3f0>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_RCC_OscConfig+0x410>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a92:	d1f5      	bne.n	8002a80 <HAL_RCC_OscConfig+0x35c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002a94:	2000      	movs	r0, #0
 8002a96:	e04a      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d03d      	beq.n	8002b18 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_RCC_OscConfig+0x410>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002aa4:	69e2      	ldr	r2, [r4, #28]
 8002aa6:	4291      	cmp	r1, r2
 8002aa8:	d138      	bne.n	8002b1c <HAL_RCC_OscConfig+0x3f8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aae:	6a21      	ldr	r1, [r4, #32]
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab0:	428a      	cmp	r2, r1
 8002ab2:	d135      	bne.n	8002b20 <HAL_RCC_OscConfig+0x3fc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ab4:	6a61      	ldr	r1, [r4, #36]	; 0x24
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ab6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002aba:	401a      	ands	r2, r3
 8002abc:	428a      	cmp	r2, r1
 8002abe:	d131      	bne.n	8002b24 <HAL_RCC_OscConfig+0x400>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ac0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ac4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ac6:	428a      	cmp	r2, r1
 8002ac8:	d12e      	bne.n	8002b28 <HAL_RCC_OscConfig+0x404>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002aca:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002ace:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d02b      	beq.n	8002b2c <HAL_RCC_OscConfig+0x408>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
        {
          return HAL_ERROR;
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	e02a      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 8002ad8:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002ada:	4770      	bx	lr
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8002adc:	2001      	movs	r0, #1
 8002ade:	e026      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	e024      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	e022      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
 8002aea:	e020      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
 8002aee:	e01e      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002af0:	2003      	movs	r0, #3
 8002af2:	e01c      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002af4:	2003      	movs	r0, #3
 8002af6:	e01a      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002af8:	2003      	movs	r0, #3
 8002afa:	e018      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002afc:	2003      	movs	r0, #3
 8002afe:	e016      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002b00:	2003      	movs	r0, #3
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002b04:	2003      	movs	r0, #3
 8002b06:	e012      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002b08:	2000      	movs	r0, #0
 8002b0a:	e010      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	e00e      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002b10:	2003      	movs	r0, #3
 8002b12:	e00c      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002b14:	2003      	movs	r0, #3
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002b18:	2001      	movs	r0, #1
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
        {
          return HAL_ERROR;
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	e006      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
 8002b20:	2001      	movs	r0, #1
 8002b22:	e004      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
 8002b24:	2001      	movs	r0, #1
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
 8002b28:	2001      	movs	r0, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  return HAL_OK;
 8002b2c:	2000      	movs	r0, #0
}
 8002b2e:	b002      	add	sp, #8
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470060 	.word	0x42470060

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	b538      	push	{r3, r4, r5, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d055      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0xba>
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b4e:	482c      	ldr	r0, [pc, #176]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b50:	bd38      	pop	{r3, r4, r5, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b52:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b60:	d020      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x68>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002b6a:	00dc      	lsls	r4, r3, #3
 8002b6c:	2500      	movs	r5, #0
 8002b6e:	0169      	lsls	r1, r5, #5
 8002b70:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 8002b74:	0160      	lsls	r0, r4, #5
 8002b76:	1b04      	subs	r4, r0, r4
 8002b78:	eb61 0505 	sbc.w	r5, r1, r5
 8002b7c:	01a9      	lsls	r1, r5, #6
 8002b7e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002b82:	01a0      	lsls	r0, r4, #6
 8002b84:	1b00      	subs	r0, r0, r4
 8002b86:	eb61 0105 	sbc.w	r1, r1, r5
 8002b8a:	18c0      	adds	r0, r0, r3
 8002b8c:	f141 0100 	adc.w	r1, r1, #0
 8002b90:	024b      	lsls	r3, r1, #9
 8002b92:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002b96:	0244      	lsls	r4, r0, #9
 8002b98:	4620      	mov	r0, r4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f7fd fbb1 	bl	8000304 <__aeabi_uldivmod>
 8002ba2:	e01f      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002bac:	00dc      	lsls	r4, r3, #3
 8002bae:	2500      	movs	r5, #0
 8002bb0:	0169      	lsls	r1, r5, #5
 8002bb2:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 8002bb6:	0160      	lsls	r0, r4, #5
 8002bb8:	1b04      	subs	r4, r0, r4
 8002bba:	eb61 0505 	sbc.w	r5, r1, r5
 8002bbe:	01a9      	lsls	r1, r5, #6
 8002bc0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002bc4:	01a0      	lsls	r0, r4, #6
 8002bc6:	1b00      	subs	r0, r0, r4
 8002bc8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bcc:	18c0      	adds	r0, r0, r3
 8002bce:	f141 0100 	adc.w	r1, r1, #0
 8002bd2:	028b      	lsls	r3, r1, #10
 8002bd4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002bd8:	0284      	lsls	r4, r0, #10
 8002bda:	4620      	mov	r0, r4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	2300      	movs	r3, #0
 8002be0:	f7fd fb90 	bl	8000304 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002bec:	3301      	adds	r3, #1
 8002bee:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002bf0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf6:	4803      	ldr	r0, [pc, #12]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002bf8:	bd38      	pop	{r3, r4, r5, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	00f42400 	.word	0x00f42400
 8002c04:	007a1200 	.word	0x007a1200

08002c08 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	f000 8098 	beq.w	8002d3e <HAL_RCC_ClockConfig+0x136>
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0e:	b570      	push	{r4, r5, r6, lr}
 8002c10:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c12:	4b52      	ldr	r3, [pc, #328]	; (8002d5c <HAL_RCC_ClockConfig+0x154>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	428b      	cmp	r3, r1
 8002c1c:	d208      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	b2cb      	uxtb	r3, r1
 8002c20:	4a4e      	ldr	r2, [pc, #312]	; (8002d5c <HAL_RCC_ClockConfig+0x154>)
 8002c22:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c24:	6813      	ldr	r3, [r2, #0]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	4299      	cmp	r1, r3
 8002c2c:	f040 8089 	bne.w	8002d42 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	f013 0f02 	tst.w	r3, #2
 8002c36:	d017      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	f013 0f04 	tst.w	r3, #4
 8002c3c:	d004      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c3e:	4a48      	ldr	r2, [pc, #288]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002c40:	6893      	ldr	r3, [r2, #8]
 8002c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	f013 0f08 	tst.w	r3, #8
 8002c4e:	d004      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x52>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c50:	4a43      	ldr	r2, [pc, #268]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002c52:	6893      	ldr	r3, [r2, #8]
 8002c54:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c58:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5a:	4841      	ldr	r0, [pc, #260]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002c5c:	6883      	ldr	r3, [r0, #8]
 8002c5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c62:	68a3      	ldr	r3, [r4, #8]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	6083      	str	r3, [r0, #8]
 8002c68:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	f013 0f01 	tst.w	r3, #1
 8002c70:	d02f      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c72:	6862      	ldr	r2, [r4, #4]
 8002c74:	2a01      	cmp	r2, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x7c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c78:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c80:	d10e      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x98>
 8002c82:	e060      	b.n	8002d46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c84:	1e93      	subs	r3, r2, #2
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d805      	bhi.n	8002c96 <HAL_RCC_ClockConfig+0x8e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c92:	d105      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x98>
 8002c94:	e059      	b.n	8002d4a <HAL_RCC_ClockConfig+0x142>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f013 0f02 	tst.w	r3, #2
 8002c9e:	d056      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x146>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca0:	492f      	ldr	r1, [pc, #188]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002ca2:	688b      	ldr	r3, [r1, #8]
 8002ca4:	f023 0303 	bic.w	r3, r3, #3
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f000 fbf6 	bl	800349c <HAL_GetTick>
 8002cb0:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e006      	b.n	8002cc2 <HAL_RCC_ClockConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f000 fbf2 	bl	800349c <HAL_GetTick>
 8002cb8:	1b80      	subs	r0, r0, r6
 8002cba:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cbe:	4298      	cmp	r0, r3
 8002cc0:	d847      	bhi.n	8002d52 <HAL_RCC_ClockConfig+0x14a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_ClockConfig+0x154>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	429d      	cmp	r5, r3
 8002cdc:	d207      	bcs.n	8002cee <HAL_RCC_ClockConfig+0xe6>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	b2ea      	uxtb	r2, r5
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <HAL_RCC_ClockConfig+0x154>)
 8002ce2:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	429d      	cmp	r5, r3
 8002cec:	d133      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x14e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	f013 0f04 	tst.w	r3, #4
 8002cf4:	d006      	beq.n	8002d04 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf6:	491a      	ldr	r1, [pc, #104]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002cf8:	688b      	ldr	r3, [r1, #8]
 8002cfa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cfe:	68e3      	ldr	r3, [r4, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	f013 0f08 	tst.w	r3, #8
 8002d0a:	d007      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002d0e:	6893      	ldr	r3, [r2, #8]
 8002d10:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002d14:	6921      	ldr	r1, [r4, #16]
 8002d16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d1a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1c:	f7ff ff0e 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCC_ClockConfig+0x158>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d28:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_RCC_ClockConfig+0x15c>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	40d8      	lsrs	r0, r3
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_RCC_ClockConfig+0x160>)
 8002d30:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_RCC_ClockConfig+0x164>)
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	f003 ffcf 	bl	8006cd8 <HAL_InitTick>

  return HAL_OK;
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 8002d3e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002d40:	4770      	bx	lr

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8002d42:	2001      	movs	r0, #1
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
 8002d48:	bd70      	pop	{r4, r5, r6, pc}
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 8002d4e:	2001      	movs	r0, #1
 8002d50:	bd70      	pop	{r4, r5, r6, pc}

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8002d52:	2003      	movs	r0, #3
 8002d54:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8002d56:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	0800ff48 	.word	0x0800ff48
 8002d68:	2000006c 	.word	0x2000006c
 8002d6c:	20000064 	.word	0x20000064

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002d70:	4b01      	ldr	r3, [pc, #4]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x8>)
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	2000006c 	.word	0x2000006c

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d7e:	f7ff fff7 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002d8a:	4a03      	ldr	r2, [pc, #12]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d8e:	40d8      	lsrs	r0, r3
 8002d90:	bd08      	pop	{r3, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	0800ff58 	.word	0x0800ff58

08002d9c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_GetClockConfig+0x34>)
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	f002 0203 	and.w	r2, r2, #3
 8002da8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002db0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002db8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002dc2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_RCC_GetClockConfig+0x38>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	600b      	str	r3, [r1, #0]
 8002dce:	4770      	bx	lr
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40023c00 	.word	0x40023c00

08002dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ddc:	b082      	sub	sp, #8
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	e0c1      	b.n	8002f66 <HAL_GPIO_Init+0x18e>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de2:	2201      	movs	r2, #1
 8002de4:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de6:	680c      	ldr	r4, [r1, #0]
 8002de8:	ea02 0504 	and.w	r5, r2, r4

    if(iocurrent == ioposition)
 8002dec:	42aa      	cmp	r2, r5
 8002dee:	f040 80b9 	bne.w	8002f64 <HAL_GPIO_Init+0x18c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df2:	684c      	ldr	r4, [r1, #4]
 8002df4:	1e66      	subs	r6, r4, #1
 8002df6:	2e01      	cmp	r6, #1
 8002df8:	d903      	bls.n	8002e02 <HAL_GPIO_Init+0x2a>
 8002dfa:	2c11      	cmp	r4, #17
 8002dfc:	d001      	beq.n	8002e02 <HAL_GPIO_Init+0x2a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dfe:	2c12      	cmp	r4, #18
 8002e00:	d115      	bne.n	8002e2e <HAL_GPIO_Init+0x56>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e02:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e04:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002e08:	2603      	movs	r6, #3
 8002e0a:	fa06 f60e 	lsl.w	r6, r6, lr
 8002e0e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e12:	68cc      	ldr	r4, [r1, #12]
 8002e14:	fa04 f40e 	lsl.w	r4, r4, lr
 8002e18:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002e1a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e1c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e1e:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e22:	684c      	ldr	r4, [r1, #4]
 8002e24:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002e28:	409c      	lsls	r4, r3
 8002e2a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002e2c:	6042      	str	r2, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e2e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e30:	005f      	lsls	r7, r3, #1
 8002e32:	2403      	movs	r4, #3
 8002e34:	40bc      	lsls	r4, r7
 8002e36:	43e4      	mvns	r4, r4
 8002e38:	ea06 0204 	and.w	r2, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e3c:	688e      	ldr	r6, [r1, #8]
 8002e3e:	40be      	lsls	r6, r7
 8002e40:	4316      	orrs	r6, r2
      GPIOx->PUPDR = temp;
 8002e42:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e44:	684a      	ldr	r2, [r1, #4]
 8002e46:	2a02      	cmp	r2, #2
 8002e48:	d001      	beq.n	8002e4e <HAL_GPIO_Init+0x76>
 8002e4a:	2a12      	cmp	r2, #18
 8002e4c:	d113      	bne.n	8002e76 <HAL_GPIO_Init+0x9e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e4e:	08de      	lsrs	r6, r3, #3
 8002e50:	3608      	adds	r6, #8
 8002e52:	f850 8026 	ldr.w	r8, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e56:	f003 0207 	and.w	r2, r3, #7
 8002e5a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8002e5e:	220f      	movs	r2, #15
 8002e60:	fa02 f20e 	lsl.w	r2, r2, lr
 8002e64:	ea28 0c02 	bic.w	ip, r8, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e68:	690a      	ldr	r2, [r1, #16]
 8002e6a:	fa02 f20e 	lsl.w	r2, r2, lr
 8002e6e:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3U] = temp;
 8002e72:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e76:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e78:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e7a:	684a      	ldr	r2, [r1, #4]
 8002e7c:	f002 0403 	and.w	r4, r2, #3
 8002e80:	fa04 f207 	lsl.w	r2, r4, r7
 8002e84:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 8002e86:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e88:	684a      	ldr	r2, [r1, #4]
 8002e8a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002e8e:	d069      	beq.n	8002f64 <HAL_GPIO_Init+0x18c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e90:	2200      	movs	r2, #0
 8002e92:	9201      	str	r2, [sp, #4]
 8002e94:	4a37      	ldr	r2, [pc, #220]	; (8002f74 <HAL_GPIO_Init+0x19c>)
 8002e96:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002e98:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002e9c:	6454      	str	r4, [r2, #68]	; 0x44
 8002e9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ea0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002ea4:	9201      	str	r2, [sp, #4]
 8002ea6:	9a01      	ldr	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea8:	089e      	lsrs	r6, r3, #2
 8002eaa:	1cb4      	adds	r4, r6, #2
 8002eac:	4a32      	ldr	r2, [pc, #200]	; (8002f78 <HAL_GPIO_Init+0x1a0>)
 8002eae:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	270f      	movs	r7, #15
 8002eba:	4097      	lsls	r7, r2
 8002ebc:	ea24 0707 	bic.w	r7, r4, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec0:	4c2e      	ldr	r4, [pc, #184]	; (8002f7c <HAL_GPIO_Init+0x1a4>)
 8002ec2:	42a0      	cmp	r0, r4
 8002ec4:	d011      	beq.n	8002eea <HAL_GPIO_Init+0x112>
 8002ec6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002eca:	42a0      	cmp	r0, r4
 8002ecc:	d00f      	beq.n	8002eee <HAL_GPIO_Init+0x116>
 8002ece:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ed2:	42a0      	cmp	r0, r4
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_GPIO_Init+0x11a>
 8002ed6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002eda:	42a0      	cmp	r0, r4
 8002edc:	d00b      	beq.n	8002ef6 <HAL_GPIO_Init+0x11e>
 8002ede:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ee2:	42a0      	cmp	r0, r4
 8002ee4:	d109      	bne.n	8002efa <HAL_GPIO_Init+0x122>
 8002ee6:	2404      	movs	r4, #4
 8002ee8:	e008      	b.n	8002efc <HAL_GPIO_Init+0x124>
 8002eea:	2400      	movs	r4, #0
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x124>
 8002eee:	2401      	movs	r4, #1
 8002ef0:	e004      	b.n	8002efc <HAL_GPIO_Init+0x124>
 8002ef2:	2402      	movs	r4, #2
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_Init+0x124>
 8002ef6:	2403      	movs	r4, #3
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x124>
 8002efa:	2407      	movs	r4, #7
 8002efc:	fa04 f202 	lsl.w	r2, r4, r2
 8002f00:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f02:	3602      	adds	r6, #2
 8002f04:	4c1c      	ldr	r4, [pc, #112]	; (8002f78 <HAL_GPIO_Init+0x1a0>)
 8002f06:	f844 2026 	str.w	r2, [r4, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_GPIO_Init+0x1a8>)
 8002f0c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	43ea      	mvns	r2, r5
 8002f10:	ea04 0602 	and.w	r6, r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f14:	684f      	ldr	r7, [r1, #4]
 8002f16:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002f1a:	d001      	beq.n	8002f20 <HAL_GPIO_Init+0x148>
        {
          temp |= iocurrent;
 8002f1c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002f20:	4c17      	ldr	r4, [pc, #92]	; (8002f80 <HAL_GPIO_Init+0x1a8>)
 8002f22:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002f24:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002f26:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f2a:	684f      	ldr	r7, [r1, #4]
 8002f2c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002f30:	d001      	beq.n	8002f36 <HAL_GPIO_Init+0x15e>
        {
          temp |= iocurrent;
 8002f32:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002f36:	4c12      	ldr	r4, [pc, #72]	; (8002f80 <HAL_GPIO_Init+0x1a8>)
 8002f38:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f3a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f40:	684f      	ldr	r7, [r1, #4]
 8002f42:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002f46:	d001      	beq.n	8002f4c <HAL_GPIO_Init+0x174>
        {
          temp |= iocurrent;
 8002f48:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002f4c:	4c0c      	ldr	r4, [pc, #48]	; (8002f80 <HAL_GPIO_Init+0x1a8>)
 8002f4e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002f50:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f54:	684e      	ldr	r6, [r1, #4]
 8002f56:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002f5a:	d001      	beq.n	8002f60 <HAL_GPIO_Init+0x188>
        {
          temp |= iocurrent;
 8002f5c:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002f60:	4c07      	ldr	r4, [pc, #28]	; (8002f80 <HAL_GPIO_Init+0x1a8>)
 8002f62:	60e2      	str	r2, [r4, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f64:	3301      	adds	r3, #1
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	f67f af3b 	bls.w	8002de2 <HAL_GPIO_Init+0xa>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8002f6c:	b002      	add	sp, #8
 8002f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40013c00 	.word	0x40013c00

08002f84 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f84:	6903      	ldr	r3, [r0, #16]
 8002f86:	4219      	tst	r1, r3
 8002f88:	d001      	beq.n	8002f8e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f8e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f94:	b10a      	cbz	r2, 8002f9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f96:	6181      	str	r1, [r0, #24]
 8002f98:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f9a:	0409      	lsls	r1, r1, #16
 8002f9c:	6181      	str	r1, [r0, #24]
 8002f9e:	4770      	bx	lr

08002fa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fa2:	6805      	ldr	r5, [r0, #0]
 8002fa4:	682c      	ldr	r4, [r5, #0]
 8002fa6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002faa:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fac:	6804      	ldr	r4, [r0, #0]
 8002fae:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb0:	6883      	ldr	r3, [r0, #8]
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	d104      	bne.n	8002fc0 <DMA_SetConfig+0x20>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fb6:	6803      	ldr	r3, [r0, #0]
 8002fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fba:	6803      	ldr	r3, [r0, #0]
 8002fbc:	60d9      	str	r1, [r3, #12]
 8002fbe:	e003      	b.n	8002fc8 <DMA_SetConfig+0x28>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002fc0:	6803      	ldr	r3, [r0, #0]
 8002fc2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002fc4:	6803      	ldr	r3, [r0, #0]
 8002fc6:	60da      	str	r2, [r3, #12]
  }
}
 8002fc8:	bc30      	pop	{r4, r5}
 8002fca:	4770      	bx	lr

08002fcc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fcc:	6802      	ldr	r2, [r0, #0]
 8002fce:	b2d3      	uxtb	r3, r2
 8002fd0:	3b10      	subs	r3, #16
 8002fd2:	490b      	ldr	r1, [pc, #44]	; (8003000 <DMA_CalcBaseAndBitshift+0x34>)
 8002fd4:	fba1 1303 	umull	r1, r3, r1, r3
 8002fd8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fda:	490a      	ldr	r1, [pc, #40]	; (8003004 <DMA_CalcBaseAndBitshift+0x38>)
 8002fdc:	5cc9      	ldrb	r1, [r1, r3]
 8002fde:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d906      	bls.n	8002ff2 <DMA_CalcBaseAndBitshift+0x26>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fe4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002fe8:	f022 0203 	bic.w	r2, r2, #3
 8002fec:	3204      	adds	r2, #4
 8002fee:	6582      	str	r2, [r0, #88]	; 0x58
 8002ff0:	e004      	b.n	8002ffc <DMA_CalcBaseAndBitshift+0x30>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ff2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002ff6:	f022 0203 	bic.w	r2, r2, #3
 8002ffa:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002ffc:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002ffe:	4770      	bx	lr
 8003000:	aaaaaaab 	.word	0xaaaaaaab
 8003004:	0800ff40 	.word	0x0800ff40

08003008 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003008:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800300a:	6982      	ldr	r2, [r0, #24]
 800300c:	b982      	cbnz	r2, 8003030 <DMA_CheckFifoParam+0x28>
  {
    switch (tmp)
 800300e:	2b01      	cmp	r3, #1
 8003010:	d008      	beq.n	8003024 <DMA_CheckFifoParam+0x1c>
 8003012:	b10b      	cbz	r3, 8003018 <DMA_CheckFifoParam+0x10>
 8003014:	2b02      	cmp	r3, #2
 8003016:	d12e      	bne.n	8003076 <DMA_CheckFifoParam+0x6e>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003018:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800301a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800301e:	d12c      	bne.n	800307a <DMA_CheckFifoParam+0x72>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2000      	movs	r0, #0
 8003022:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003024:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003026:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800302a:	d028      	beq.n	800307e <DMA_CheckFifoParam+0x76>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2000      	movs	r0, #0
 800302e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003030:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003034:	d113      	bne.n	800305e <DMA_CheckFifoParam+0x56>
  {
    switch (tmp)
 8003036:	2b03      	cmp	r3, #3
 8003038:	d803      	bhi.n	8003042 <DMA_CheckFifoParam+0x3a>
 800303a:	e8df f003 	tbb	[pc, r3]
 800303e:	0422      	.short	0x0422
 8003040:	0a22      	.short	0x0a22
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	2000      	movs	r0, #0
 8003044:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003046:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003048:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800304c:	d11b      	bne.n	8003086 <DMA_CheckFifoParam+0x7e>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2000      	movs	r0, #0
 8003050:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003052:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003054:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003058:	d017      	beq.n	800308a <DMA_CheckFifoParam+0x82>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 800305a:	2000      	movs	r0, #0
 800305c:	4770      	bx	lr
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800305e:	2b02      	cmp	r3, #2
 8003060:	d915      	bls.n	800308e <DMA_CheckFifoParam+0x86>
 8003062:	2b03      	cmp	r3, #3
 8003064:	d001      	beq.n	800306a <DMA_CheckFifoParam+0x62>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	2000      	movs	r0, #0
 8003068:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800306a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800306c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003070:	d10f      	bne.n	8003092 <DMA_CheckFifoParam+0x8a>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2000      	movs	r0, #0
 8003074:	4770      	bx	lr
 8003076:	2000      	movs	r0, #0
 8003078:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 800307a:	2001      	movs	r0, #1
 800307c:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 800307e:	2001      	movs	r0, #1
 8003080:	4770      	bx	lr
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003082:	2001      	movs	r0, #1
 8003084:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8003086:	2001      	movs	r0, #1
 8003088:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 800308a:	2001      	movs	r0, #1
 800308c:	4770      	bx	lr
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800308e:	2001      	movs	r0, #1
 8003090:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8003092:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop

08003098 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800309c:	f000 f9fe 	bl	800349c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030a0:	2c00      	cmp	r4, #0
 80030a2:	d05c      	beq.n	800315e <HAL_DMA_Init+0xc6>
 80030a4:	4605      	mov	r5, r0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030a6:	2300      	movs	r3, #0
 80030a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	6813      	ldr	r3, [r2, #0]
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_DMA_Init+0x3c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030be:	f000 f9ed 	bl	800349c <HAL_GetTick>
 80030c2:	1b40      	subs	r0, r0, r5
 80030c4:	2805      	cmp	r0, #5
 80030c6:	d905      	bls.n	80030d4 <HAL_DMA_Init+0x3c>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c8:	2320      	movs	r3, #32
 80030ca:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030cc:	2003      	movs	r0, #3
 80030ce:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f012 0f01 	tst.w	r2, #1
 80030dc:	d1ef      	bne.n	80030be <HAL_DMA_Init+0x26>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030de:	681a      	ldr	r2, [r3, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030e0:	4820      	ldr	r0, [pc, #128]	; (8003164 <HAL_DMA_Init+0xcc>)
 80030e2:	4010      	ands	r0, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e4:	6861      	ldr	r1, [r4, #4]
 80030e6:	68a2      	ldr	r2, [r4, #8]
 80030e8:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ea:	68e2      	ldr	r2, [r4, #12]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ec:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ee:	6922      	ldr	r2, [r4, #16]
 80030f0:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f2:	6962      	ldr	r2, [r4, #20]
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f4:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f6:	69a2      	ldr	r2, [r4, #24]
 80030f8:	4311      	orrs	r1, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fa:	69e2      	ldr	r2, [r4, #28]
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fc:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fe:	6a21      	ldr	r1, [r4, #32]
 8003100:	4311      	orrs	r1, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003102:	ea40 0201 	orr.w	r2, r0, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003106:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003108:	2904      	cmp	r1, #4
 800310a:	d103      	bne.n	8003114 <HAL_DMA_Init+0x7c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800310c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800310e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003110:	4301      	orrs	r1, r0
 8003112:	430a      	orrs	r2, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003114:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003116:	6826      	ldr	r6, [r4, #0]
 8003118:	6975      	ldr	r5, [r6, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800311a:	f025 0507 	bic.w	r5, r5, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800311e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003120:	431d      	orrs	r5, r3

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003122:	2b04      	cmp	r3, #4
 8003124:	d10d      	bne.n	8003142 <HAL_DMA_Init+0xaa>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003128:	431d      	orrs	r5, r3
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800312a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800312c:	b14b      	cbz	r3, 8003142 <HAL_DMA_Init+0xaa>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800312e:	4620      	mov	r0, r4
 8003130:	f7ff ff6a 	bl	8003008 <DMA_CheckFifoParam>
 8003134:	b128      	cbz	r0, 8003142 <HAL_DMA_Init+0xaa>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003136:	2340      	movs	r3, #64	; 0x40
 8003138:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313a:	2001      	movs	r0, #1
 800313c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_ERROR; 
 8003140:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003142:	6175      	str	r5, [r6, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff ff41 	bl	8002fcc <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800314c:	233f      	movs	r3, #63	; 0x3f
 800314e:	4093      	lsls	r3, r2
 8003150:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003152:	2000      	movs	r0, #0
 8003154:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003156:	2301      	movs	r3, #1
 8003158:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 800315c:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800315e:	2001      	movs	r0, #1
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	bf00      	nop
 8003164:	f010803f 	.word	0xf010803f

08003168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003168:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800316c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003170:	2c01      	cmp	r4, #1
 8003172:	d02c      	beq.n	80031ce <HAL_DMA_Start_IT+0x66>
 8003174:	2401      	movs	r4, #1
 8003176:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800317a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800317e:	b2e4      	uxtb	r4, r4
 8003180:	2c01      	cmp	r4, #1
 8003182:	d11f      	bne.n	80031c4 <HAL_DMA_Start_IT+0x5c>
 8003184:	4604      	mov	r4, r0
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003186:	2002      	movs	r0, #2
 8003188:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318c:	2000      	movs	r0, #0
 800318e:	6560      	str	r0, [r4, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003190:	4620      	mov	r0, r4
 8003192:	f7ff ff05 	bl	8002fa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003196:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003198:	233f      	movs	r3, #63	; 0x3f
 800319a:	4093      	lsls	r3, r2
 800319c:	60ab      	str	r3, [r5, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800319e:	6822      	ldr	r2, [r4, #0]
 80031a0:	6813      	ldr	r3, [r2, #0]
 80031a2:	f043 0316 	orr.w	r3, r3, #22
 80031a6:	6013      	str	r3, [r2, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031aa:	b123      	cbz	r3, 80031b6 <HAL_DMA_Start_IT+0x4e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	6013      	str	r3, [r2, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6013      	str	r3, [r2, #0]
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2000      	movs	r0, #0
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031c4:	2300      	movs	r3, #0
 80031c6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031ca:	2002      	movs	r0, #2
 80031cc:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031ce:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 80031d0:	bd38      	pop	{r3, r4, r5, pc}
 80031d2:	bf00      	nop

080031d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	b083      	sub	sp, #12
 80031d8:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031de:	4b71      	ldr	r3, [pc, #452]	; (80033a4 <HAL_DMA_IRQHandler+0x1d0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4d71      	ldr	r5, [pc, #452]	; (80033a8 <HAL_DMA_IRQHandler+0x1d4>)
 80031e4:	fba5 3503 	umull	r3, r5, r5, r3
 80031e8:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ea:	6d87      	ldr	r7, [r0, #88]	; 0x58

  tmpisr = regs->ISR;
 80031ec:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ee:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80031f0:	2308      	movs	r3, #8
 80031f2:	4093      	lsls	r3, r2
 80031f4:	421e      	tst	r6, r3
 80031f6:	d010      	beq.n	800321a <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031f8:	6803      	ldr	r3, [r0, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	f012 0f04 	tst.w	r2, #4
 8003200:	d00b      	beq.n	800321a <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	f022 0204 	bic.w	r2, r2, #4
 8003208:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800320a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800320c:	2308      	movs	r3, #8
 800320e:	4093      	lsls	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003212:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6543      	str	r3, [r0, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800321a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800321c:	2301      	movs	r3, #1
 800321e:	4093      	lsls	r3, r2
 8003220:	421e      	tst	r6, r3
 8003222:	d009      	beq.n	8003238 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	6952      	ldr	r2, [r2, #20]
 8003228:	f012 0f80 	tst.w	r2, #128	; 0x80
 800322c:	d004      	beq.n	8003238 <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800322e:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003230:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003238:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800323a:	2304      	movs	r3, #4
 800323c:	4093      	lsls	r3, r2
 800323e:	421e      	tst	r6, r3
 8003240:	d009      	beq.n	8003256 <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003242:	6822      	ldr	r2, [r4, #0]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	f012 0f02 	tst.w	r2, #2
 800324a:	d004      	beq.n	8003256 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800324c:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800324e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003256:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003258:	2310      	movs	r3, #16
 800325a:	4093      	lsls	r3, r2
 800325c:	421e      	tst	r6, r3
 800325e:	d024      	beq.n	80032aa <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	f012 0f08 	tst.w	r2, #8
 8003268:	d01f      	beq.n	80032aa <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800326a:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003274:	d00d      	beq.n	8003292 <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800327c:	d104      	bne.n	8003288 <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800327e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003280:	b19b      	cbz	r3, 80032aa <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003282:	4620      	mov	r0, r4
 8003284:	4798      	blx	r3
 8003286:	e010      	b.n	80032aa <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003288:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800328a:	b173      	cbz	r3, 80032aa <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800328c:	4620      	mov	r0, r4
 800328e:	4798      	blx	r3
 8003290:	e00b      	b.n	80032aa <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003298:	d103      	bne.n	80032a2 <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f022 0208 	bic.w	r2, r2, #8
 80032a0:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032a4:	b10b      	cbz	r3, 80032aa <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032a6:	4620      	mov	r0, r4
 80032a8:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032ac:	2320      	movs	r3, #32
 80032ae:	4093      	lsls	r3, r2
 80032b0:	421e      	tst	r6, r3
 80032b2:	d052      	beq.n	800335a <HAL_DMA_IRQHandler+0x186>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	f012 0f10 	tst.w	r2, #16
 80032bc:	d04d      	beq.n	800335a <HAL_DMA_IRQHandler+0x186>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032be:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d122      	bne.n	8003310 <HAL_DMA_IRQHandler+0x13c>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ca:	6822      	ldr	r2, [r4, #0]
 80032cc:	6813      	ldr	r3, [r2, #0]
 80032ce:	f023 0316 	bic.w	r3, r3, #22
 80032d2:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6953      	ldr	r3, [r2, #20]
 80032d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032dc:	6153      	str	r3, [r2, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032e0:	b90b      	cbnz	r3, 80032e6 <HAL_DMA_IRQHandler+0x112>
 80032e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032e4:	b123      	cbz	r3, 80032f0 <HAL_DMA_IRQHandler+0x11c>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e6:	6822      	ldr	r2, [r4, #0]
 80032e8:	6813      	ldr	r3, [r2, #0]
 80032ea:	f023 0308 	bic.w	r3, r3, #8
 80032ee:	6013      	str	r3, [r2, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032f2:	233f      	movs	r3, #63	; 0x3f
 80032f4:	4093      	lsls	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f8:	2300      	movs	r3, #0
 80032fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032fe:	2301      	movs	r3, #1
 8003300:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003304:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003306:	2b00      	cmp	r3, #0
 8003308:	d049      	beq.n	800339e <HAL_DMA_IRQHandler+0x1ca>
        {
          hdma->XferAbortCallback(hdma);
 800330a:	4620      	mov	r0, r4
 800330c:	4798      	blx	r3
 800330e:	e046      	b.n	800339e <HAL_DMA_IRQHandler+0x1ca>
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003318:	d00d      	beq.n	8003336 <HAL_DMA_IRQHandler+0x162>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003320:	d104      	bne.n	800332c <HAL_DMA_IRQHandler+0x158>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003322:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003324:	b1cb      	cbz	r3, 800335a <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003326:	4620      	mov	r0, r4
 8003328:	4798      	blx	r3
 800332a:	e016      	b.n	800335a <HAL_DMA_IRQHandler+0x186>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800332c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800332e:	b1a3      	cbz	r3, 800335a <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003330:	4620      	mov	r0, r4
 8003332:	4798      	blx	r3
 8003334:	e011      	b.n	800335a <HAL_DMA_IRQHandler+0x186>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	f412 7f80 	tst.w	r2, #256	; 0x100
 800333c:	d109      	bne.n	8003352 <HAL_DMA_IRQHandler+0x17e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	f022 0210 	bic.w	r2, r2, #16
 8003344:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003346:	2300      	movs	r3, #0
 8003348:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800334c:	2301      	movs	r3, #1
 800334e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003352:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003354:	b10b      	cbz	r3, 800335a <HAL_DMA_IRQHandler+0x186>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003356:	4620      	mov	r0, r4
 8003358:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800335a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800335c:	b1fb      	cbz	r3, 800339e <HAL_DMA_IRQHandler+0x1ca>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800335e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003360:	f013 0f01 	tst.w	r3, #1
 8003364:	d017      	beq.n	8003396 <HAL_DMA_IRQHandler+0x1c2>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003366:	2305      	movs	r3, #5
 8003368:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800336c:	6822      	ldr	r2, [r4, #0]
 800336e:	6813      	ldr	r3, [r2, #0]
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 8003376:	9b01      	ldr	r3, [sp, #4]
 8003378:	3301      	adds	r3, #1
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	429d      	cmp	r5, r3
 800337e:	d304      	bcc.n	800338a <HAL_DMA_IRQHandler+0x1b6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f013 0f01 	tst.w	r3, #1
 8003388:	d1f5      	bne.n	8003376 <HAL_DMA_IRQHandler+0x1a2>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800338a:	2300      	movs	r3, #0
 800338c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003390:	2301      	movs	r3, #1
 8003392:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003396:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003398:	b10b      	cbz	r3, 800339e <HAL_DMA_IRQHandler+0x1ca>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800339a:	4620      	mov	r0, r4
 800339c:	4798      	blx	r3
    }
  }
}
 800339e:	b003      	add	sp, #12
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a2:	bf00      	nop
 80033a4:	2000006c 	.word	0x2000006c
 80033a8:	1b4e81b5 	.word	0x1b4e81b5

080033ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80033ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b8:	0200      	lsls	r0, r0, #8
 80033ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033be:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80033c0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80033c4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80033c8:	60d0      	str	r0, [r2, #12]
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d2:	4b16      	ldr	r3, [pc, #88]	; (800342c <HAL_NVIC_SetPriority+0x5c>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033da:	f1c3 0407 	rsb	r4, r3, #7
 80033de:	2c04      	cmp	r4, #4
 80033e0:	bf28      	it	cs
 80033e2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e4:	1d1d      	adds	r5, r3, #4
 80033e6:	2d06      	cmp	r5, #6
 80033e8:	d901      	bls.n	80033ee <HAL_NVIC_SetPriority+0x1e>
 80033ea:	1edd      	subs	r5, r3, #3
 80033ec:	e000      	b.n	80033f0 <HAL_NVIC_SetPriority+0x20>
 80033ee:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f0:	2301      	movs	r3, #1
 80033f2:	fa03 f404 	lsl.w	r4, r3, r4
 80033f6:	3c01      	subs	r4, #1
 80033f8:	4021      	ands	r1, r4
 80033fa:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033fc:	40ab      	lsls	r3, r5
 80033fe:	3b01      	subs	r3, #1
 8003400:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003402:	430a      	orrs	r2, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003404:	2800      	cmp	r0, #0
 8003406:	db08      	blt.n	800341a <HAL_NVIC_SetPriority+0x4a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003410:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003414:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8003418:	e005      	b.n	8003426 <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341a:	f000 000f 	and.w	r0, r0, #15
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_NVIC_SetPriority+0x60>)
 8003424:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003426:	bc30      	pop	{r4, r5}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000ed00 	.word	0xe000ed00
 8003430:	e000ed14 	.word	0xe000ed14

08003434 <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003434:	2800      	cmp	r0, #0
 8003436:	db08      	blt.n	800344a <HAL_NVIC_EnableIRQ+0x16>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003438:	0942      	lsrs	r2, r0, #5
 800343a:	f000 001f 	and.w	r0, r0, #31
 800343e:	2301      	movs	r3, #1
 8003440:	fa03 f000 	lsl.w	r0, r3, r0
 8003444:	4b01      	ldr	r3, [pc, #4]	; (800344c <HAL_NVIC_EnableIRQ+0x18>)
 8003446:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100

08003450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003450:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_Init+0x30>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003462:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800346a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800346c:	2003      	movs	r0, #3
 800346e:	f7ff ff9d 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003472:	2000      	movs	r0, #0
 8003474:	f003 fc30 	bl	8006cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003478:	f7fd fd38 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800347c:	2000      	movs	r0, #0
 800347e:	bd08      	pop	{r3, pc}
 8003480:	40023c00 	.word	0x40023c00

08003484 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003484:	4a03      	ldr	r2, [pc, #12]	; (8003494 <HAL_IncTick+0x10>)
 8003486:	6813      	ldr	r3, [r2, #0]
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_IncTick+0x14>)
 800348a:	7809      	ldrb	r1, [r1, #0]
 800348c:	440b      	add	r3, r1
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20006648 	.word	0x20006648
 8003498:	20000068 	.word	0x20000068

0800349c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800349c:	4b01      	ldr	r3, [pc, #4]	; (80034a4 <HAL_GetTick+0x8>)
 800349e:	6818      	ldr	r0, [r3, #0]
}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20006648 	.word	0x20006648

080034a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff fff6 	bl	800349c <HAL_GetTick>
 80034b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80034b6:	d002      	beq.n	80034be <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <HAL_Delay+0x24>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034be:	f7ff ffed 	bl	800349c <HAL_GetTick>
 80034c2:	1b40      	subs	r0, r0, r5
 80034c4:	4284      	cmp	r4, r0
 80034c6:	d8fa      	bhi.n	80034be <HAL_Delay+0x16>
  {
  }
}
 80034c8:	bd38      	pop	{r3, r4, r5, pc}
 80034ca:	bf00      	nop
 80034cc:	20000068 	.word	0x20000068

080034d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034d2:	6a03      	ldr	r3, [r0, #32]
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034de:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034e0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e4:	680c      	ldr	r4, [r1, #0]
 80034e6:	ea42 0504 	orr.w	r5, r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ea:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ee:	688b      	ldr	r3, [r1, #8]
 80034f0:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034f2:	4c0c      	ldr	r4, [pc, #48]	; (8003524 <TIM_OC1_SetConfig+0x54>)
 80034f4:	42a0      	cmp	r0, r4
 80034f6:	d105      	bne.n	8003504 <TIM_OC1_SetConfig+0x34>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034f8:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034fc:	68ca      	ldr	r2, [r1, #12]
 80034fe:	4313      	orrs	r3, r2
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003500:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003504:	4c07      	ldr	r4, [pc, #28]	; (8003524 <TIM_OC1_SetConfig+0x54>)
 8003506:	42a0      	cmp	r0, r4
 8003508:	d105      	bne.n	8003516 <TIM_OC1_SetConfig+0x46>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800350a:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800350e:	694a      	ldr	r2, [r1, #20]
 8003510:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003512:	698e      	ldr	r6, [r1, #24]
 8003514:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003518:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800351a:	684a      	ldr	r2, [r1, #4]
 800351c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351e:	6203      	str	r3, [r0, #32]
}
 8003520:	bc70      	pop	{r4, r5, r6}
 8003522:	4770      	bx	lr
 8003524:	40010000 	.word	0x40010000

08003528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800352a:	6a03      	ldr	r3, [r0, #32]
 800352c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003530:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003536:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003538:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800353c:	680c      	ldr	r4, [r1, #0]
 800353e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003544:	688c      	ldr	r4, [r1, #8]
 8003546:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354a:	4c0e      	ldr	r4, [pc, #56]	; (8003584 <TIM_OC3_SetConfig+0x5c>)
 800354c:	42a0      	cmp	r0, r4
 800354e:	d106      	bne.n	800355e <TIM_OC3_SetConfig+0x36>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003554:	68cc      	ldr	r4, [r1, #12]
 8003556:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800355a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355e:	4c09      	ldr	r4, [pc, #36]	; (8003584 <TIM_OC3_SetConfig+0x5c>)
 8003560:	42a0      	cmp	r0, r4
 8003562:	d107      	bne.n	8003574 <TIM_OC3_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003564:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003568:	694c      	ldr	r4, [r1, #20]
 800356a:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800356e:	698c      	ldr	r4, [r1, #24]
 8003570:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003574:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003576:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003578:	684a      	ldr	r2, [r1, #4]
 800357a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357c:	6203      	str	r3, [r0, #32]
}
 800357e:	bc30      	pop	{r4, r5}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000

08003588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800358a:	6a03      	ldr	r3, [r0, #32]
 800358c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003590:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003596:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003598:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359c:	680d      	ldr	r5, [r1, #0]
 800359e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a6:	688d      	ldr	r5, [r1, #8]
 80035a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ac:	4d07      	ldr	r5, [pc, #28]	; (80035cc <TIM_OC4_SetConfig+0x44>)
 80035ae:	42a8      	cmp	r0, r5
 80035b0:	d104      	bne.n	80035bc <TIM_OC4_SetConfig+0x34>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b6:	694d      	ldr	r5, [r1, #20]
 80035b8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035be:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c0:	684a      	ldr	r2, [r1, #4]
 80035c2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c4:	6203      	str	r3, [r0, #32]
}
 80035c6:	bc30      	pop	{r4, r5}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000

080035d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d4:	6a04      	ldr	r4, [r0, #32]
 80035d6:	f024 0401 	bic.w	r4, r4, #1
 80035da:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035dc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035de:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035e6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80035ea:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80035ee:	6201      	str	r1, [r0, #32]
}
 80035f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop

080035f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035fa:	6a03      	ldr	r3, [r0, #32]
 80035fc:	f023 0310 	bic.w	r3, r3, #16
 8003600:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003602:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003604:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003606:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800360e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003612:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003616:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003618:	6201      	str	r1, [r0, #32]
}
 800361a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800361e:	4770      	bx	lr

08003620 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003620:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003626:	4319      	orrs	r1, r3
 8003628:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800362c:	6081      	str	r1, [r0, #8]
 800362e:	4770      	bx	lr

08003630 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003630:	6802      	ldr	r2, [r0, #0]
 8003632:	68d3      	ldr	r3, [r2, #12]
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363a:	6802      	ldr	r2, [r0, #0]
 800363c:	6893      	ldr	r3, [r2, #8]
 800363e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003642:	2b06      	cmp	r3, #6
 8003644:	d003      	beq.n	800364e <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800364e:	2000      	movs	r0, #0
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop

08003658 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800365e:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <TIM_Base_SetConfig+0x94>)
 8003660:	4290      	cmp	r0, r2
 8003662:	d00e      	beq.n	8003682 <TIM_Base_SetConfig+0x26>
 8003664:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0x26>
 800366a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800366e:	4290      	cmp	r0, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0x26>
 8003672:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003676:	4290      	cmp	r0, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0x26>
 800367a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800367e:	4290      	cmp	r0, r2
 8003680:	d103      	bne.n	800368a <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003686:	684a      	ldr	r2, [r1, #4]
 8003688:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800368a:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <TIM_Base_SetConfig+0x94>)
 800368c:	4290      	cmp	r0, r2
 800368e:	d01a      	beq.n	80036c6 <TIM_Base_SetConfig+0x6a>
 8003690:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003694:	d017      	beq.n	80036c6 <TIM_Base_SetConfig+0x6a>
 8003696:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800369a:	4290      	cmp	r0, r2
 800369c:	d013      	beq.n	80036c6 <TIM_Base_SetConfig+0x6a>
 800369e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036a2:	4290      	cmp	r0, r2
 80036a4:	d00f      	beq.n	80036c6 <TIM_Base_SetConfig+0x6a>
 80036a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036aa:	4290      	cmp	r0, r2
 80036ac:	d00b      	beq.n	80036c6 <TIM_Base_SetConfig+0x6a>
 80036ae:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80036b2:	4290      	cmp	r0, r2
 80036b4:	d007      	beq.n	80036c6 <TIM_Base_SetConfig+0x6a>
 80036b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036ba:	4290      	cmp	r0, r2
 80036bc:	d003      	beq.n	80036c6 <TIM_Base_SetConfig+0x6a>
 80036be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036c2:	4290      	cmp	r0, r2
 80036c4:	d103      	bne.n	80036ce <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ca:	68ca      	ldr	r2, [r1, #12]
 80036cc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d2:	694a      	ldr	r2, [r1, #20]
 80036d4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80036d6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d8:	688b      	ldr	r3, [r1, #8]
 80036da:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036dc:	680b      	ldr	r3, [r1, #0]
 80036de:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <TIM_Base_SetConfig+0x94>)
 80036e2:	4298      	cmp	r0, r3
 80036e4:	d101      	bne.n	80036ea <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e6:	690b      	ldr	r3, [r1, #16]
 80036e8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ea:	2301      	movs	r3, #1
 80036ec:	6143      	str	r3, [r0, #20]
 80036ee:	4770      	bx	lr
 80036f0:	40010000 	.word	0x40010000

080036f4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f4:	b1b8      	cbz	r0, 8003726 <HAL_TIM_Base_Init+0x32>
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f6:	b510      	push	{r4, lr}
 80036f8:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003702:	d104      	bne.n	800370e <HAL_TIM_Base_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003704:	2300      	movs	r3, #0
 8003706:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800370a:	f7fd fc81 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370e:	2302      	movs	r3, #2
 8003710:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	1d21      	adds	r1, r4, #4
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	f7ff ffa0 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	2301      	movs	r3, #1
 800371e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8003722:	2000      	movs	r0, #0
 8003724:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8003726:	2001      	movs	r0, #1
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop

0800372c <HAL_TIM_OC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372c:	b1b8      	cbz	r0, 800375e <HAL_TIM_OC_Init+0x32>
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800372e:	b510      	push	{r4, lr}
 8003730:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003732:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003736:	f013 0fff 	tst.w	r3, #255	; 0xff
 800373a:	d104      	bne.n	8003746 <HAL_TIM_OC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373c:	2300      	movs	r3, #0
 800373e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003742:	f7ff ff87 	bl	8003654 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003746:	2302      	movs	r3, #2
 8003748:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800374c:	1d21      	adds	r1, r4, #4
 800374e:	6820      	ldr	r0, [r4, #0]
 8003750:	f7ff ff84 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003754:	2301      	movs	r3, #1
 8003756:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 800375a:	2000      	movs	r0, #0
 800375c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 800375e:	2001      	movs	r0, #1
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop

08003764 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003764:	b1b8      	cbz	r0, 8003796 <HAL_TIM_PWM_Init+0x32>
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003766:	b510      	push	{r4, lr}
 8003768:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800376e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003772:	d104      	bne.n	800377e <HAL_TIM_PWM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003774:	2300      	movs	r3, #0
 8003776:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800377a:	f7ff ff6d 	bl	8003658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377e:	2302      	movs	r3, #2
 8003780:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003784:	1d21      	adds	r1, r4, #4
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	f7ff ff68 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	2301      	movs	r3, #1
 800378e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8003792:	2000      	movs	r0, #0
 8003794:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8003796:	2001      	movs	r0, #1
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop

0800379c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379e:	6a03      	ldr	r3, [r0, #32]
 80037a0:	f023 0310 	bic.w	r3, r3, #16
 80037a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037aa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037ac:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b0:	680d      	ldr	r5, [r1, #0]
 80037b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037b6:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037ba:	688d      	ldr	r5, [r1, #8]
 80037bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037c0:	4d0d      	ldr	r5, [pc, #52]	; (80037f8 <TIM_OC2_SetConfig+0x5c>)
 80037c2:	42a8      	cmp	r0, r5
 80037c4:	d106      	bne.n	80037d4 <TIM_OC2_SetConfig+0x38>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ca:	68cd      	ldr	r5, [r1, #12]
 80037cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	4d08      	ldr	r5, [pc, #32]	; (80037f8 <TIM_OC2_SetConfig+0x5c>)
 80037d6:	42a8      	cmp	r0, r5
 80037d8:	d107      	bne.n	80037ea <TIM_OC2_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037da:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037de:	694d      	ldr	r5, [r1, #20]
 80037e0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e4:	698d      	ldr	r5, [r1, #24]
 80037e6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037ee:	684a      	ldr	r2, [r1, #4]
 80037f0:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f2:	6203      	str	r3, [r0, #32]
}
 80037f4:	bc30      	pop	{r4, r5}
 80037f6:	4770      	bx	lr
 80037f8:	40010000 	.word	0x40010000

080037fc <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003800:	2b01      	cmp	r3, #1
 8003802:	d028      	beq.n	8003856 <HAL_TIM_OC_ConfigChannel+0x5a>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003804:	b510      	push	{r4, lr}
 8003806:	4604      	mov	r4, r0
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003808:	2301      	movs	r3, #1
 800380a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800380e:	2302      	movs	r3, #2
 8003810:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 8003814:	2a0c      	cmp	r2, #12
 8003816:	d817      	bhi.n	8003848 <HAL_TIM_OC_ConfigChannel+0x4c>
 8003818:	e8df f002 	tbb	[pc, r2]
 800381c:	16161607 	.word	0x16161607
 8003820:	1616160b 	.word	0x1616160b
 8003824:	1616160f 	.word	0x1616160f
 8003828:	13          	.byte	0x13
 8003829:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800382a:	6800      	ldr	r0, [r0, #0]
 800382c:	f7ff fe50 	bl	80034d0 <TIM_OC1_SetConfig>
      break;
 8003830:	e00a      	b.n	8003848 <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003832:	6800      	ldr	r0, [r0, #0]
 8003834:	f7ff ffb2 	bl	800379c <TIM_OC2_SetConfig>
      break;
 8003838:	e006      	b.n	8003848 <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383a:	6800      	ldr	r0, [r0, #0]
 800383c:	f7ff fe74 	bl	8003528 <TIM_OC3_SetConfig>
      break;
 8003840:	e002      	b.n	8003848 <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003842:	6800      	ldr	r0, [r0, #0]
 8003844:	f7ff fea0 	bl	8003588 <TIM_OC4_SetConfig>

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8003848:	2301      	movs	r3, #1
 800384a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800384e:	2000      	movs	r0, #0
 8003850:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8003854:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003856:	2002      	movs	r0, #2
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop

0800385c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800385c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800385e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d066      	beq.n	8003934 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003866:	460d      	mov	r5, r1
 8003868:	4604      	mov	r4, r0
 800386a:	2301      	movs	r3, #1
 800386c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	2302      	movs	r3, #2
 8003872:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 8003876:	2a0c      	cmp	r2, #12
 8003878:	d855      	bhi.n	8003926 <HAL_TIM_PWM_ConfigChannel+0xca>
 800387a:	e8df f002 	tbb	[pc, r2]
 800387e:	5407      	.short	0x5407
 8003880:	541a5454 	.word	0x541a5454
 8003884:	542e5454 	.word	0x542e5454
 8003888:	5454      	.short	0x5454
 800388a:	41          	.byte	0x41
 800388b:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800388c:	6800      	ldr	r0, [r0, #0]
 800388e:	f7ff fe1f 	bl	80034d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003892:	6822      	ldr	r2, [r4, #0]
 8003894:	6993      	ldr	r3, [r2, #24]
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800389c:	6822      	ldr	r2, [r4, #0]
 800389e:	6993      	ldr	r3, [r2, #24]
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	6991      	ldr	r1, [r2, #24]
 80038aa:	692b      	ldr	r3, [r5, #16]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6193      	str	r3, [r2, #24]
      break;
 80038b0:	e039      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b2:	6800      	ldr	r0, [r0, #0]
 80038b4:	f7ff ff72 	bl	800379c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b8:	6822      	ldr	r2, [r4, #0]
 80038ba:	6993      	ldr	r3, [r2, #24]
 80038bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038c0:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c2:	6822      	ldr	r2, [r4, #0]
 80038c4:	6993      	ldr	r3, [r2, #24]
 80038c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ca:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	6993      	ldr	r3, [r2, #24]
 80038d0:	6929      	ldr	r1, [r5, #16]
 80038d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038d6:	6193      	str	r3, [r2, #24]
      break;
 80038d8:	e025      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	f7ff fe24 	bl	8003528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038e0:	6822      	ldr	r2, [r4, #0]
 80038e2:	69d3      	ldr	r3, [r2, #28]
 80038e4:	f043 0308 	orr.w	r3, r3, #8
 80038e8:	61d3      	str	r3, [r2, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	69d3      	ldr	r3, [r2, #28]
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038f4:	6822      	ldr	r2, [r4, #0]
 80038f6:	69d1      	ldr	r1, [r2, #28]
 80038f8:	692b      	ldr	r3, [r5, #16]
 80038fa:	430b      	orrs	r3, r1
 80038fc:	61d3      	str	r3, [r2, #28]
      break;
 80038fe:	e012      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003900:	6800      	ldr	r0, [r0, #0]
 8003902:	f7ff fe41 	bl	8003588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003906:	6822      	ldr	r2, [r4, #0]
 8003908:	69d3      	ldr	r3, [r2, #28]
 800390a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800390e:	61d3      	str	r3, [r2, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003910:	6822      	ldr	r2, [r4, #0]
 8003912:	69d3      	ldr	r3, [r2, #28]
 8003914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003918:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	69d3      	ldr	r3, [r2, #28]
 800391e:	6929      	ldr	r1, [r5, #16]
 8003920:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003924:	61d3      	str	r3, [r2, #28]

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8003926:	2301      	movs	r3, #1
 8003928:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392c:	2000      	movs	r0, #0
 800392e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8003932:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003934:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8003936:	bd38      	pop	{r3, r4, r5, pc}

08003938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003938:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800393a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003940:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003944:	4319      	orrs	r1, r3
 8003946:	ea44 0301 	orr.w	r3, r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	6083      	str	r3, [r0, #8]
}
 800394c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop

08003954 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003954:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d06a      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0xde>
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800395c:	b510      	push	{r4, lr}
 800395e:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003960:	2301      	movs	r3, #1
 8003962:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003966:	2302      	movs	r3, #2
 8003968:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800396c:	6802      	ldr	r2, [r0, #0]
 800396e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003974:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003978:	6093      	str	r3, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 800397a:	680b      	ldr	r3, [r1, #0]
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d043      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0xb4>
 8003980:	d80a      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x44>
 8003982:	2b10      	cmp	r3, #16
 8003984:	d04a      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0xc8>
 8003986:	d802      	bhi.n	800398e <HAL_TIM_ConfigClockSource+0x3a>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d047      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0xc8>
 800398c:	e04a      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>
 800398e:	2b20      	cmp	r3, #32
 8003990:	d044      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0xc8>
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	d042      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0xc8>
 8003996:	e045      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>
 8003998:	2b60      	cmp	r3, #96	; 0x60
 800399a:	d02b      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0xa0>
 800399c:	d802      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x50>
 800399e:	2b50      	cmp	r3, #80	; 0x50
 80039a0:	d01e      	beq.n	80039e0 <HAL_TIM_ConfigClockSource+0x8c>
 80039a2:	e03f      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>
 80039a4:	2b70      	cmp	r3, #112	; 0x70
 80039a6:	d003      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0x5c>
 80039a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ac:	d00c      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x74>
 80039ae:	e039      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b0:	68cb      	ldr	r3, [r1, #12]
 80039b2:	684a      	ldr	r2, [r1, #4]
 80039b4:	6889      	ldr	r1, [r1, #8]
 80039b6:	6800      	ldr	r0, [r0, #0]
 80039b8:	f7ff ffbe 	bl	8003938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039c4:	6093      	str	r3, [r2, #8]
      break;
 80039c6:	e02d      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c8:	68cb      	ldr	r3, [r1, #12]
 80039ca:	684a      	ldr	r2, [r1, #4]
 80039cc:	6889      	ldr	r1, [r1, #8]
 80039ce:	6800      	ldr	r0, [r0, #0]
 80039d0:	f7ff ffb2 	bl	8003938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	6893      	ldr	r3, [r2, #8]
 80039d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039dc:	6093      	str	r3, [r2, #8]
      break;
 80039de:	e021      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e0:	68ca      	ldr	r2, [r1, #12]
 80039e2:	6849      	ldr	r1, [r1, #4]
 80039e4:	6800      	ldr	r0, [r0, #0]
 80039e6:	f7ff fdf3 	bl	80035d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ea:	2150      	movs	r1, #80	; 0x50
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	f7ff fe17 	bl	8003620 <TIM_ITRx_SetConfig>
      break;
 80039f2:	e017      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039f4:	68ca      	ldr	r2, [r1, #12]
 80039f6:	6849      	ldr	r1, [r1, #4]
 80039f8:	6800      	ldr	r0, [r0, #0]
 80039fa:	f7ff fdfd 	bl	80035f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039fe:	2160      	movs	r1, #96	; 0x60
 8003a00:	6820      	ldr	r0, [r4, #0]
 8003a02:	f7ff fe0d 	bl	8003620 <TIM_ITRx_SetConfig>
      break;
 8003a06:	e00d      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a08:	68ca      	ldr	r2, [r1, #12]
 8003a0a:	6849      	ldr	r1, [r1, #4]
 8003a0c:	6800      	ldr	r0, [r0, #0]
 8003a0e:	f7ff fddf 	bl	80035d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a12:	2140      	movs	r1, #64	; 0x40
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	f7ff fe03 	bl	8003620 <TIM_ITRx_SetConfig>
      break;
 8003a1a:	e003      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6820      	ldr	r0, [r4, #0]
 8003a20:	f7ff fdfe 	bl	8003620 <TIM_ITRx_SetConfig>
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8003a30:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a32:	2002      	movs	r0, #2
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop

08003a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a38:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a3a:	f001 011f 	and.w	r1, r1, #31
 8003a3e:	2301      	movs	r3, #1
 8003a40:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a44:	6a03      	ldr	r3, [r0, #32]
 8003a46:	ea23 0304 	bic.w	r3, r3, r4
 8003a4a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a4c:	6a03      	ldr	r3, [r0, #32]
 8003a4e:	408a      	lsls	r2, r1
 8003a50:	431a      	orrs	r2, r3
 8003a52:	6202      	str	r2, [r0, #32]
}
 8003a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop

08003a5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d032      	beq.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a64:	b430      	push	{r4, r5}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a66:	2301      	movs	r3, #1
 8003a68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a72:	6803      	ldr	r3, [r0, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a76:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a78:	f022 0470 	bic.w	r4, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a7c:	680a      	ldr	r2, [r1, #0]
 8003a7e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a82:	6803      	ldr	r3, [r0, #0]
 8003a84:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d012      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8e:	d00f      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003a90:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00b      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003a98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003aa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003aa8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d104      	bne.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab4:	684a      	ldr	r2, [r1, #4]
 8003ab6:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab8:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	e001      	b.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x72>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aca:	2002      	movs	r0, #2
 8003acc:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8003ace:	bc30      	pop	{r4, r5}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40010000 	.word	0x40010000

08003ad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ad8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d022      	beq.n	8003b26 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ae6:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aec:	688b      	ldr	r3, [r1, #8]
 8003aee:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003af0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003af4:	684b      	ldr	r3, [r1, #4]
 8003af6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003af8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003afc:	680b      	ldr	r3, [r1, #0]
 8003afe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b04:	690b      	ldr	r3, [r1, #16]
 8003b06:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b0c:	694b      	ldr	r3, [r1, #20]
 8003b0e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b14:	69ca      	ldr	r2, [r1, #28]
 8003b16:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b18:	6802      	ldr	r2, [r0, #0]
 8003b1a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003b22:	4618      	mov	r0, r3
 8003b24:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b26:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop

08003b2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <SystemInit+0x18>)
 8003b2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b32:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b48:	f100 0308 	add.w	r3, r0, #8
 8003b4c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b52:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b54:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b56:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6003      	str	r3, [r0, #0]
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop

08003b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	6103      	str	r3, [r0, #16]
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop

08003b68 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b68:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b6a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b74:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b76:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003b78:	6803      	ldr	r3, [r0, #0]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	6003      	str	r3, [r0, #0]
 8003b7e:	4770      	bx	lr

08003b80 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b80:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b82:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b84:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b88:	d101      	bne.n	8003b8e <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b8a:	6902      	ldr	r2, [r0, #16]
 8003b8c:	e007      	b.n	8003b9e <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b8e:	f100 0208 	add.w	r2, r0, #8
 8003b92:	e000      	b.n	8003b96 <vListInsert+0x16>
 8003b94:	461a      	mov	r2, r3
 8003b96:	6853      	ldr	r3, [r2, #4]
 8003b98:	681c      	ldr	r4, [r3, #0]
 8003b9a:	42a5      	cmp	r5, r4
 8003b9c:	d2fa      	bcs.n	8003b94 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b9e:	6853      	ldr	r3, [r2, #4]
 8003ba0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ba2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ba4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ba6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ba8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003baa:	6803      	ldr	r3, [r0, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	6003      	str	r3, [r0, #0]
}
 8003bb0:	bc30      	pop	{r4, r5}
 8003bb2:	4770      	bx	lr

08003bb4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003bb4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bb6:	6842      	ldr	r2, [r0, #4]
 8003bb8:	6881      	ldr	r1, [r0, #8]
 8003bba:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bbc:	6882      	ldr	r2, [r0, #8]
 8003bbe:	6841      	ldr	r1, [r0, #4]
 8003bc0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	4290      	cmp	r0, r2
 8003bc6:	d101      	bne.n	8003bcc <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bc8:	6882      	ldr	r2, [r0, #8]
 8003bca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bcc:	2200      	movs	r2, #0
 8003bce:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	3a01      	subs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bd6:	6818      	ldr	r0, [r3, #0]
}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop

08003bdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003be0:	f001 fdc8 	bl	8005774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003be4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003be6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d101      	bne.n	8003bf0 <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
 8003bec:	2401      	movs	r4, #1
 8003bee:	e000      	b.n	8003bf2 <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
 8003bf0:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003bf2:	f001 fde1 	bl	80057b8 <vPortExitCritical>

	return xReturn;
}
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	bf00      	nop

08003bfc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c00:	f001 fdb8 	bl	8005774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c06:	b90b      	cbnz	r3, 8003c0c <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
 8003c08:	2401      	movs	r4, #1
 8003c0a:	e000      	b.n	8003c0e <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
 8003c0c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003c0e:	f001 fdd3 	bl	80057b8 <vPortExitCritical>

	return xReturn;
}
 8003c12:	4620      	mov	r0, r4
 8003c14:	bd10      	pop	{r4, pc}
 8003c16:	bf00      	nop

08003c18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c1e:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c20:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003c22:	b93a      	cbnz	r2, 8003c34 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c24:	6803      	ldr	r3, [r0, #0]
 8003c26:	bb43      	cbnz	r3, 8003c7a <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003c28:	6840      	ldr	r0, [r0, #4]
 8003c2a:	f000 ffe5 	bl	8004bf8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	6063      	str	r3, [r4, #4]
 8003c32:	e029      	b.n	8003c88 <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c34:	b96e      	cbnz	r6, 8003c52 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003c36:	6880      	ldr	r0, [r0, #8]
 8003c38:	f004 fcf7 	bl	800862a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003c3c:	68a2      	ldr	r2, [r4, #8]
 8003c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c40:	4413      	add	r3, r2
 8003c42:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c44:	6862      	ldr	r2, [r4, #4]
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d319      	bcc.n	8003c7e <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8003c4e:	2000      	movs	r0, #0
 8003c50:	e01a      	b.n	8003c88 <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c52:	68c0      	ldr	r0, [r0, #12]
 8003c54:	f004 fce9 	bl	800862a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c5a:	425b      	negs	r3, r3
 8003c5c:	68e2      	ldr	r2, [r4, #12]
 8003c5e:	441a      	add	r2, r3
 8003c60:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c62:	6821      	ldr	r1, [r4, #0]
 8003c64:	428a      	cmp	r2, r1
 8003c66:	d202      	bcs.n	8003c6e <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c68:	6862      	ldr	r2, [r4, #4]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c6e:	2e02      	cmp	r6, #2
 8003c70:	d107      	bne.n	8003c82 <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c72:	b145      	cbz	r5, 8003c86 <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c74:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8003c76:	2000      	movs	r0, #0
 8003c78:	e006      	b.n	8003c88 <prvCopyDataToQueue+0x70>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	e004      	b.n	8003c88 <prvCopyDataToQueue+0x70>
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e002      	b.n	8003c88 <prvCopyDataToQueue+0x70>
 8003c82:	2000      	movs	r0, #0
 8003c84:	e000      	b.n	8003c88 <prvCopyDataToQueue+0x70>
 8003c86:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c88:	3501      	adds	r5, #1
 8003c8a:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
 8003c8e:	bf00      	nop

08003c90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c90:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003c92:	b172      	cbz	r2, 8003cb2 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c98:	68c4      	ldr	r4, [r0, #12]
 8003c9a:	4414      	add	r4, r2
 8003c9c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c9e:	6840      	ldr	r0, [r0, #4]
 8003ca0:	4284      	cmp	r4, r0
 8003ca2:	d301      	bcc.n	8003ca8 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	60d8      	str	r0, [r3, #12]
 8003ca8:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003caa:	68d9      	ldr	r1, [r3, #12]
 8003cac:	f004 fcbd 	bl	800862a <memcpy>
 8003cb0:	bd10      	pop	{r4, pc}
 8003cb2:	4770      	bx	lr

08003cb4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cb8:	f001 fd5c 	bl	8005774 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cbc:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003cc0:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cc2:	e00a      	b.n	8003cda <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cc6:	b153      	cbz	r3, 8003cde <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cc8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003ccc:	f000 feec 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003cd0:	b108      	cbz	r0, 8003cd6 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cd2:	f000 ff7b 	bl	8004bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cd6:	3c01      	subs	r4, #1
 8003cd8:	b264      	sxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cda:	2c00      	cmp	r4, #0
 8003cdc:	dcf2      	bgt.n	8003cc4 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cde:	23ff      	movs	r3, #255	; 0xff
 8003ce0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ce4:	f001 fd68 	bl	80057b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ce8:	f001 fd44 	bl	8005774 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cec:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8003cf0:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cf2:	e00a      	b.n	8003d0a <prvUnlockQueue+0x56>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf4:	692b      	ldr	r3, [r5, #16]
 8003cf6:	b153      	cbz	r3, 8003d0e <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cf8:	f105 0010 	add.w	r0, r5, #16
 8003cfc:	f000 fed4 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003d00:	b108      	cbz	r0, 8003d06 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 8003d02:	f000 ff63 	bl	8004bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d06:	3c01      	subs	r4, #1
 8003d08:	b264      	sxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d0a:	2c00      	cmp	r4, #0
 8003d0c:	dcf2      	bgt.n	8003cf4 <prvUnlockQueue+0x40>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d0e:	23ff      	movs	r3, #255	; 0xff
 8003d10:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d14:	f001 fd50 	bl	80057b8 <vPortExitCritical>
 8003d18:	bd38      	pop	{r3, r4, r5, pc}
 8003d1a:	bf00      	nop

08003d1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d1c:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003d1e:	b940      	cbnz	r0, 8003d32 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	e7fe      	b.n	8003d30 <xQueueGenericReset+0x14>
 8003d32:	4604      	mov	r4, r0
 8003d34:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 8003d36:	f001 fd1d 	bl	8005774 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d3a:	6821      	ldr	r1, [r4, #0]
 8003d3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d40:	fb03 1002 	mla	r0, r3, r2, r1
 8003d44:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d46:	2000      	movs	r0, #0
 8003d48:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d4a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d4c:	3a01      	subs	r2, #1
 8003d4e:	fb02 1303 	mla	r3, r2, r3, r1
 8003d52:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d54:	23ff      	movs	r3, #255	; 0xff
 8003d56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d5e:	b97d      	cbnz	r5, 8003d80 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	b1ab      	cbz	r3, 8003d90 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d64:	f104 0010 	add.w	r0, r4, #16
 8003d68:	f000 fe9e 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003d6c:	b180      	cbz	r0, 8003d90 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <xQueueGenericReset+0x7c>)
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	e007      	b.n	8003d90 <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d80:	f104 0010 	add.w	r0, r4, #16
 8003d84:	f7ff fee0 	bl	8003b48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d8c:	f7ff fedc 	bl	8003b48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d90:	f001 fd12 	bl	80057b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8003d94:	2001      	movs	r0, #1
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	461d      	mov	r5, r3
 8003da0:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003da2:	460b      	mov	r3, r1
 8003da4:	b909      	cbnz	r1, 8003daa <prvInitialiseNewQueue+0xe>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003da6:	6024      	str	r4, [r4, #0]
 8003da8:	e000      	b.n	8003dac <prvInitialiseNewQueue+0x10>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003daa:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dac:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dae:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003db0:	2101      	movs	r1, #1
 8003db2:	4620      	mov	r0, r4
 8003db4:	f7ff ffb2 	bl	8003d1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003db8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8003dbc:	bd38      	pop	{r3, r4, r5, pc}
 8003dbe:	bf00      	nop

08003dc0 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dc0:	b940      	cbnz	r0, 8003dd4 <xQueueGenericCreateStatic+0x14>
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	e7fe      	b.n	8003dd2 <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003dda:	b943      	cbnz	r3, 8003dee <xQueueGenericCreateStatic+0x2e>
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	e7fe      	b.n	8003dec <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dee:	b112      	cbz	r2, 8003df6 <xQueueGenericCreateStatic+0x36>
 8003df0:	b119      	cbz	r1, 8003dfa <xQueueGenericCreateStatic+0x3a>
 8003df2:	2001      	movs	r0, #1
 8003df4:	e002      	b.n	8003dfc <xQueueGenericCreateStatic+0x3c>
 8003df6:	2001      	movs	r0, #1
 8003df8:	e000      	b.n	8003dfc <xQueueGenericCreateStatic+0x3c>
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	b940      	cbnz	r0, 8003e10 <xQueueGenericCreateStatic+0x50>
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	e7fe      	b.n	8003e0e <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e10:	b912      	cbnz	r2, 8003e18 <xQueueGenericCreateStatic+0x58>
 8003e12:	b919      	cbnz	r1, 8003e1c <xQueueGenericCreateStatic+0x5c>
 8003e14:	2001      	movs	r0, #1
 8003e16:	e002      	b.n	8003e1e <xQueueGenericCreateStatic+0x5e>
 8003e18:	2001      	movs	r0, #1
 8003e1a:	e000      	b.n	8003e1e <xQueueGenericCreateStatic+0x5e>
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	b940      	cbnz	r0, 8003e32 <xQueueGenericCreateStatic+0x72>
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	e7fe      	b.n	8003e30 <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e32:	2050      	movs	r0, #80	; 0x50
 8003e34:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e36:	9803      	ldr	r0, [sp, #12]
 8003e38:	2850      	cmp	r0, #80	; 0x50
 8003e3a:	d008      	beq.n	8003e4e <xQueueGenericCreateStatic+0x8e>
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	e7fe      	b.n	8003e4c <xQueueGenericCreateStatic+0x8c>
 8003e4e:	4620      	mov	r0, r4
 8003e50:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
 8003e52:	b13b      	cbz	r3, 8003e64 <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e5a:	9400      	str	r4, [sp, #0]
 8003e5c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003e60:	f7ff ff9c 	bl	8003d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
 8003e64:	4620      	mov	r0, r4
 8003e66:	b004      	add	sp, #16
 8003e68:	bd10      	pop	{r4, pc}
 8003e6a:	bf00      	nop

08003e6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003e72:	b940      	cbnz	r0, 8003e86 <xQueueGenericSend+0x1a>
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	e7fe      	b.n	8003e84 <xQueueGenericSend+0x18>
 8003e86:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e88:	b919      	cbnz	r1, 8003e92 <xQueueGenericSend+0x26>
 8003e8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003e8c:	b91a      	cbnz	r2, 8003e96 <xQueueGenericSend+0x2a>
 8003e8e:	2201      	movs	r2, #1
 8003e90:	e002      	b.n	8003e98 <xQueueGenericSend+0x2c>
 8003e92:	2201      	movs	r2, #1
 8003e94:	e000      	b.n	8003e98 <xQueueGenericSend+0x2c>
 8003e96:	2200      	movs	r2, #0
 8003e98:	b942      	cbnz	r2, 8003eac <xQueueGenericSend+0x40>
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	e7fe      	b.n	8003eaa <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d103      	bne.n	8003eb8 <xQueueGenericSend+0x4c>
 8003eb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003eb2:	2a01      	cmp	r2, #1
 8003eb4:	d102      	bne.n	8003ebc <xQueueGenericSend+0x50>
 8003eb6:	e002      	b.n	8003ebe <xQueueGenericSend+0x52>
 8003eb8:	2201      	movs	r2, #1
 8003eba:	e000      	b.n	8003ebe <xQueueGenericSend+0x52>
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	b942      	cbnz	r2, 8003ed2 <xQueueGenericSend+0x66>
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	e7fe      	b.n	8003ed0 <xQueueGenericSend+0x64>
 8003ed2:	461d      	mov	r5, r3
 8003ed4:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ed6:	f000 fe7f 	bl	8004bd8 <xTaskGetSchedulerState>
 8003eda:	b918      	cbnz	r0, 8003ee4 <xQueueGenericSend+0x78>
 8003edc:	9b01      	ldr	r3, [sp, #4]
 8003ede:	b91b      	cbnz	r3, 8003ee8 <xQueueGenericSend+0x7c>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e002      	b.n	8003eea <xQueueGenericSend+0x7e>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <xQueueGenericSend+0x7e>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	b943      	cbnz	r3, 8003efe <xQueueGenericSend+0x92>
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	e7fe      	b.n	8003efc <xQueueGenericSend+0x90>
 8003efe:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f00:	f001 fc38 	bl	8005774 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d301      	bcc.n	8003f10 <xQueueGenericSend+0xa4>
 8003f0c:	2d02      	cmp	r5, #2
 8003f0e:	d121      	bne.n	8003f54 <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f10:	462a      	mov	r2, r5
 8003f12:	4631      	mov	r1, r6
 8003f14:	4620      	mov	r0, r4
 8003f16:	f7ff fe7f 	bl	8003c18 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f1c:	b16b      	cbz	r3, 8003f3a <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f22:	f000 fdc1 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003f26:	b188      	cbz	r0, 8003f4c <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <xQueueGenericSend+0x18c>)
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	e008      	b.n	8003f4c <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f3a:	b138      	cbz	r0, 8003f4c <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f40:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <xQueueGenericSend+0x18c>)
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f4c:	f001 fc34 	bl	80057b8 <vPortExitCritical>
				return pdPASS;
 8003f50:	2001      	movs	r0, #1
 8003f52:	e04e      	b.n	8003ff2 <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f54:	9b01      	ldr	r3, [sp, #4]
 8003f56:	b91b      	cbnz	r3, 8003f60 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f58:	f001 fc2e 	bl	80057b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	e048      	b.n	8003ff2 <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f60:	b91f      	cbnz	r7, 8003f6a <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f62:	a802      	add	r0, sp, #8
 8003f64:	f000 fde6 	bl	8004b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f68:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f6a:	f001 fc25 	bl	80057b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f6e:	f000 fbd7 	bl	8004720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f72:	f001 fbff 	bl	8005774 <vPortEnterCritical>
 8003f76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d102      	bne.n	8003f88 <xQueueGenericSend+0x11c>
 8003f82:	2300      	movs	r3, #0
 8003f84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003f88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d102      	bne.n	8003f9a <xQueueGenericSend+0x12e>
 8003f94:	2300      	movs	r3, #0
 8003f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f9a:	f001 fc0d 	bl	80057b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f9e:	a901      	add	r1, sp, #4
 8003fa0:	a802      	add	r0, sp, #8
 8003fa2:	f000 fdd3 	bl	8004b4c <xTaskCheckForTimeOut>
 8003fa6:	b9f0      	cbnz	r0, 8003fe6 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f7ff fe17 	bl	8003bdc <prvIsQueueFull>
 8003fae:	b1a0      	cbz	r0, 8003fda <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fb0:	9901      	ldr	r1, [sp, #4]
 8003fb2:	f104 0010 	add.w	r0, r4, #16
 8003fb6:	f000 fd43 	bl	8004a40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f7ff fe7a 	bl	8003cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fc0:	f000 fc4e 	bl	8004860 <xTaskResumeAll>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d19b      	bne.n	8003f00 <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
 8003fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <xQueueGenericSend+0x18c>)
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	e792      	b.n	8003f00 <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f7ff fe6a 	bl	8003cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe0:	f000 fc3e 	bl	8004860 <xTaskResumeAll>
 8003fe4:	e78c      	b.n	8003f00 <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f7ff fe64 	bl	8003cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fec:	f000 fc38 	bl	8004860 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ff0:	2000      	movs	r0, #0
		}
	}
}
 8003ff2:	b005      	add	sp, #20
 8003ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8004000:	b940      	cbnz	r0, 8004014 <xQueueGenericSendFromISR+0x18>
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	e7fe      	b.n	8004012 <xQueueGenericSendFromISR+0x16>
 8004014:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004016:	b919      	cbnz	r1, 8004020 <xQueueGenericSendFromISR+0x24>
 8004018:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800401a:	b918      	cbnz	r0, 8004024 <xQueueGenericSendFromISR+0x28>
 800401c:	2001      	movs	r0, #1
 800401e:	e002      	b.n	8004026 <xQueueGenericSendFromISR+0x2a>
 8004020:	2001      	movs	r0, #1
 8004022:	e000      	b.n	8004026 <xQueueGenericSendFromISR+0x2a>
 8004024:	2000      	movs	r0, #0
 8004026:	b940      	cbnz	r0, 800403a <xQueueGenericSendFromISR+0x3e>
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	e7fe      	b.n	8004038 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800403a:	2b02      	cmp	r3, #2
 800403c:	d103      	bne.n	8004046 <xQueueGenericSendFromISR+0x4a>
 800403e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004040:	2801      	cmp	r0, #1
 8004042:	d102      	bne.n	800404a <xQueueGenericSendFromISR+0x4e>
 8004044:	e002      	b.n	800404c <xQueueGenericSendFromISR+0x50>
 8004046:	2001      	movs	r0, #1
 8004048:	e000      	b.n	800404c <xQueueGenericSendFromISR+0x50>
 800404a:	2000      	movs	r0, #0
 800404c:	b940      	cbnz	r0, 8004060 <xQueueGenericSendFromISR+0x64>
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	e7fe      	b.n	800405e <xQueueGenericSendFromISR+0x62>
 8004060:	461f      	mov	r7, r3
 8004062:	4690      	mov	r8, r2
 8004064:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004066:	f001 fcaf 	bl	80059c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800406a:	f3ef 8611 	mrs	r6, BASEPRI
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800407e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004082:	429a      	cmp	r2, r3
 8004084:	d301      	bcc.n	800408a <xQueueGenericSendFromISR+0x8e>
 8004086:	2f02      	cmp	r7, #2
 8004088:	d11e      	bne.n	80040c8 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800408a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800408e:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004090:	463a      	mov	r2, r7
 8004092:	4649      	mov	r1, r9
 8004094:	4620      	mov	r0, r4
 8004096:	f7ff fdbf 	bl	8003c18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800409a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800409e:	d10d      	bne.n	80040bc <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040a2:	b19b      	cbz	r3, 80040cc <xQueueGenericSendFromISR+0xd0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040a8:	f000 fcfe 	bl	8004aa8 <xTaskRemoveFromEventList>
 80040ac:	b180      	cbz	r0, 80040d0 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040ae:	f1b8 0f00 	cmp.w	r8, #0
 80040b2:	d00f      	beq.n	80040d4 <xQueueGenericSendFromISR+0xd8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040b4:	2001      	movs	r0, #1
 80040b6:	f8c8 0000 	str.w	r0, [r8]
 80040ba:	e00c      	b.n	80040d6 <xQueueGenericSendFromISR+0xda>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040bc:	1c6b      	adds	r3, r5, #1
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040c4:	2001      	movs	r0, #1
 80040c6:	e006      	b.n	80040d6 <xQueueGenericSendFromISR+0xda>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040c8:	2000      	movs	r0, #0
 80040ca:	e004      	b.n	80040d6 <xQueueGenericSendFromISR+0xda>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
 80040cc:	2001      	movs	r0, #1
 80040ce:	e002      	b.n	80040d6 <xQueueGenericSendFromISR+0xda>
 80040d0:	2001      	movs	r0, #1
 80040d2:	e000      	b.n	80040d6 <xQueueGenericSendFromISR+0xda>
 80040d4:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040d6:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 80040da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040de:	bf00      	nop

080040e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e2:	b085      	sub	sp, #20
 80040e4:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040e6:	b940      	cbnz	r0, 80040fa <xQueueReceive+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	e7fe      	b.n	80040f8 <xQueueReceive+0x18>
 80040fa:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040fc:	b919      	cbnz	r1, 8004106 <xQueueReceive+0x26>
 80040fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004100:	b91b      	cbnz	r3, 800410a <xQueueReceive+0x2a>
 8004102:	2301      	movs	r3, #1
 8004104:	e002      	b.n	800410c <xQueueReceive+0x2c>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <xQueueReceive+0x2c>
 800410a:	2300      	movs	r3, #0
 800410c:	b943      	cbnz	r3, 8004120 <xQueueReceive+0x40>
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	e7fe      	b.n	800411e <xQueueReceive+0x3e>
 8004120:	460e      	mov	r6, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004122:	f000 fd59 	bl	8004bd8 <xTaskGetSchedulerState>
 8004126:	b918      	cbnz	r0, 8004130 <xQueueReceive+0x50>
 8004128:	9b01      	ldr	r3, [sp, #4]
 800412a:	b91b      	cbnz	r3, 8004134 <xQueueReceive+0x54>
 800412c:	2301      	movs	r3, #1
 800412e:	e002      	b.n	8004136 <xQueueReceive+0x56>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <xQueueReceive+0x56>
 8004134:	2300      	movs	r3, #0
 8004136:	b943      	cbnz	r3, 800414a <xQueueReceive+0x6a>
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	e7fe      	b.n	8004148 <xQueueReceive+0x68>
 800414a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800414c:	f001 fb12 	bl	8005774 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004150:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004152:	b1c5      	cbz	r5, 8004186 <xQueueReceive+0xa6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004154:	4631      	mov	r1, r6
 8004156:	4620      	mov	r0, r4
 8004158:	f7ff fd9a 	bl	8003c90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800415c:	3d01      	subs	r5, #1
 800415e:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004160:	6923      	ldr	r3, [r4, #16]
 8004162:	b163      	cbz	r3, 800417e <xQueueReceive+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004164:	f104 0010 	add.w	r0, r4, #16
 8004168:	f000 fc9e 	bl	8004aa8 <xTaskRemoveFromEventList>
 800416c:	b138      	cbz	r0, 800417e <xQueueReceive+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800416e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004172:	4b30      	ldr	r3, [pc, #192]	; (8004234 <xQueueReceive+0x154>)
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800417e:	f001 fb1b 	bl	80057b8 <vPortExitCritical>
				return pdPASS;
 8004182:	2001      	movs	r0, #1
 8004184:	e053      	b.n	800422e <xQueueReceive+0x14e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004186:	9b01      	ldr	r3, [sp, #4]
 8004188:	b91b      	cbnz	r3, 8004192 <xQueueReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800418a:	f001 fb15 	bl	80057b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800418e:	2000      	movs	r0, #0
 8004190:	e04d      	b.n	800422e <xQueueReceive+0x14e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004192:	b91f      	cbnz	r7, 800419c <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004194:	a802      	add	r0, sp, #8
 8004196:	f000 fccd 	bl	8004b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800419a:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800419c:	f001 fb0c 	bl	80057b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041a0:	f000 fabe 	bl	8004720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041a4:	f001 fae6 	bl	8005774 <vPortEnterCritical>
 80041a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d102      	bne.n	80041ba <xQueueReceive+0xda>
 80041b4:	2300      	movs	r3, #0
 80041b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80041ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80041be:	b25b      	sxtb	r3, r3
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d102      	bne.n	80041cc <xQueueReceive+0xec>
 80041c6:	2300      	movs	r3, #0
 80041c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041cc:	f001 faf4 	bl	80057b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041d0:	a901      	add	r1, sp, #4
 80041d2:	a802      	add	r0, sp, #8
 80041d4:	f000 fcba 	bl	8004b4c <xTaskCheckForTimeOut>
 80041d8:	b9f0      	cbnz	r0, 8004218 <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041da:	4620      	mov	r0, r4
 80041dc:	f7ff fd0e 	bl	8003bfc <prvIsQueueEmpty>
 80041e0:	b1a0      	cbz	r0, 800420c <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041e2:	9901      	ldr	r1, [sp, #4]
 80041e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041e8:	f000 fc2a 	bl	8004a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041ec:	4620      	mov	r0, r4
 80041ee:	f7ff fd61 	bl	8003cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041f2:	f000 fb35 	bl	8004860 <xTaskResumeAll>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d1a8      	bne.n	800414c <xQueueReceive+0x6c>
				{
					portYIELD_WITHIN_API();
 80041fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <xQueueReceive+0x154>)
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	e79f      	b.n	800414c <xQueueReceive+0x6c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800420c:	4620      	mov	r0, r4
 800420e:	f7ff fd51 	bl	8003cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004212:	f000 fb25 	bl	8004860 <xTaskResumeAll>
 8004216:	e799      	b.n	800414c <xQueueReceive+0x6c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004218:	4620      	mov	r0, r4
 800421a:	f7ff fd4b 	bl	8003cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800421e:	f000 fb1f 	bl	8004860 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004222:	4620      	mov	r0, r4
 8004224:	f7ff fcea 	bl	8003bfc <prvIsQueueEmpty>
 8004228:	2800      	cmp	r0, #0
 800422a:	d08f      	beq.n	800414c <xQueueReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800422c:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800422e:	b005      	add	sp, #20
 8004230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004232:	bf00      	nop
 8004234:	e000ed04 	.word	0xe000ed04

08004238 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004238:	2300      	movs	r3, #0
 800423a:	e00b      	b.n	8004254 <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <vQueueAddToRegistry+0x24>)
 800423e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004242:	b932      	cbnz	r2, 8004252 <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004244:	4a05      	ldr	r2, [pc, #20]	; (800425c <vQueueAddToRegistry+0x24>)
 8004246:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800424a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800424e:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004250:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004252:	3301      	adds	r3, #1
 8004254:	2b07      	cmp	r3, #7
 8004256:	d9f1      	bls.n	800423c <vQueueAddToRegistry+0x4>
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	2000664c 	.word	0x2000664c

08004260 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	4604      	mov	r4, r0
 8004264:	460d      	mov	r5, r1
 8004266:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004268:	f001 fa84 	bl	8005774 <vPortEnterCritical>
 800426c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004270:	b25b      	sxtb	r3, r3
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d102      	bne.n	800427e <vQueueWaitForMessageRestricted+0x1e>
 8004278:	2300      	movs	r3, #0
 800427a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800427e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004282:	b25b      	sxtb	r3, r3
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d102      	bne.n	8004290 <vQueueWaitForMessageRestricted+0x30>
 800428a:	2300      	movs	r3, #0
 800428c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004290:	f001 fa92 	bl	80057b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004296:	b92b      	cbnz	r3, 80042a4 <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004298:	4632      	mov	r2, r6
 800429a:	4629      	mov	r1, r5
 800429c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042a0:	f000 fbe6 	bl	8004a70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042a4:	4620      	mov	r0, r4
 80042a6:	f7ff fd05 	bl	8003cb4 <prvUnlockQueue>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}

080042ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvResetNextTaskUnblockTime+0x2c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	b90b      	cbnz	r3, 80042b8 <prvResetNextTaskUnblockTime+0xc>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <prvResetNextTaskUnblockTime+0xe>
 80042b8:	2300      	movs	r3, #0
 80042ba:	b123      	cbz	r3, 80042c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042bc:	f04f 32ff 	mov.w	r2, #4294967295
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <prvResetNextTaskUnblockTime+0x30>)
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <prvResetNextTaskUnblockTime+0x2c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	4b02      	ldr	r3, [pc, #8]	; (80042dc <prvResetNextTaskUnblockTime+0x30>)
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	200003d4 	.word	0x200003d4
 80042dc:	20000884 	.word	0x20000884

080042e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	4681      	mov	r9, r0
 80042e6:	460d      	mov	r5, r1
 80042e8:	4617      	mov	r7, r2
 80042ea:	469a      	mov	sl, r3
 80042ec:	9e08      	ldr	r6, [sp, #32]
 80042ee:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80042f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042f4:	0092      	lsls	r2, r2, #2
 80042f6:	21a5      	movs	r1, #165	; 0xa5
 80042f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80042fa:	f004 f9a1 	bl	8008640 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80042fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004300:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8004304:	3a01      	subs	r2, #1
 8004306:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800430a:	f027 0707 	bic.w	r7, r7, #7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800430e:	2300      	movs	r3, #0
 8004310:	e006      	b.n	8004320 <prvInitialiseNewTask+0x40>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004312:	5ce9      	ldrb	r1, [r5, r3]
 8004314:	18e2      	adds	r2, r4, r3
 8004316:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800431a:	5cea      	ldrb	r2, [r5, r3]
 800431c:	b112      	cbz	r2, 8004324 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800431e:	3301      	adds	r3, #1
 8004320:	2b0f      	cmp	r3, #15
 8004322:	d9f6      	bls.n	8004312 <prvInitialiseNewTask+0x32>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004324:	2300      	movs	r3, #0
 8004326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800432a:	2e37      	cmp	r6, #55	; 0x37
 800432c:	d900      	bls.n	8004330 <prvInitialiseNewTask+0x50>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800432e:	2637      	movs	r6, #55	; 0x37
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004330:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004332:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004334:	2500      	movs	r5, #0
 8004336:	6525      	str	r5, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004338:	1d20      	adds	r0, r4, #4
 800433a:	f7ff fc11 	bl	8003b60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800433e:	f104 0018 	add.w	r0, r4, #24
 8004342:	f7ff fc0d 	bl	8003b60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004346:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004348:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800434c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800434e:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004350:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004352:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004356:	4652      	mov	r2, sl
 8004358:	4649      	mov	r1, r9
 800435a:	4638      	mov	r0, r7
 800435c:	f001 f9de 	bl	800571c <pxPortInitialiseStack>
 8004360:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004362:	f1b8 0f00 	cmp.w	r8, #0
 8004366:	d001      	beq.n	800436c <prvInitialiseNewTask+0x8c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004368:	f8c8 4000 	str.w	r4, [r8]
 800436c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004370:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004372:	2400      	movs	r4, #0
 8004374:	e007      	b.n	8004386 <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004376:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800437a:	0093      	lsls	r3, r2, #2
 800437c:	480e      	ldr	r0, [pc, #56]	; (80043b8 <prvInitialiseTaskLists+0x48>)
 800437e:	4418      	add	r0, r3
 8004380:	f7ff fbe2 	bl	8003b48 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004384:	3401      	adds	r4, #1
 8004386:	2c37      	cmp	r4, #55	; 0x37
 8004388:	d9f5      	bls.n	8004376 <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800438a:	4d0c      	ldr	r5, [pc, #48]	; (80043bc <prvInitialiseTaskLists+0x4c>)
 800438c:	4628      	mov	r0, r5
 800438e:	f7ff fbdb 	bl	8003b48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004392:	4c0b      	ldr	r4, [pc, #44]	; (80043c0 <prvInitialiseTaskLists+0x50>)
 8004394:	4620      	mov	r0, r4
 8004396:	f7ff fbd7 	bl	8003b48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800439a:	480a      	ldr	r0, [pc, #40]	; (80043c4 <prvInitialiseTaskLists+0x54>)
 800439c:	f7ff fbd4 	bl	8003b48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043a0:	4809      	ldr	r0, [pc, #36]	; (80043c8 <prvInitialiseTaskLists+0x58>)
 80043a2:	f7ff fbd1 	bl	8003b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043a6:	4809      	ldr	r0, [pc, #36]	; (80043cc <prvInitialiseTaskLists+0x5c>)
 80043a8:	f7ff fbce 	bl	8003b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <prvInitialiseTaskLists+0x60>)
 80043ae:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043b0:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <prvInitialiseTaskLists+0x64>)
 80043b2:	601c      	str	r4, [r3, #0]
 80043b4:	bd38      	pop	{r3, r4, r5, pc}
 80043b6:	bf00      	nop
 80043b8:	200003f8 	.word	0x200003f8
 80043bc:	2000088c 	.word	0x2000088c
 80043c0:	200008a0 	.word	0x200008a0
 80043c4:	20000868 	.word	0x20000868
 80043c8:	200003dc 	.word	0x200003dc
 80043cc:	200008b4 	.word	0x200008b4
 80043d0:	200003d4 	.word	0x200003d4
 80043d4:	200003f0 	.word	0x200003f0

080043d8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d8:	b510      	push	{r4, lr}
 80043da:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043dc:	f001 f9ca 	bl	8005774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e0:	4a20      	ldr	r2, [pc, #128]	; (8004464 <prvAddNewTaskToReadyList+0x8c>)
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043e8:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <prvAddNewTaskToReadyList+0x90>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	b93b      	cbnz	r3, 80043fe <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043ee:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <prvAddNewTaskToReadyList+0x90>)
 80043f0:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d10d      	bne.n	8004414 <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043f8:	f7ff ffba 	bl	8004370 <prvInitialiseTaskLists>
 80043fc:	e00a      	b.n	8004414 <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043fe:	4b1b      	ldr	r3, [pc, #108]	; (800446c <prvAddNewTaskToReadyList+0x94>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b93b      	cbnz	r3, 8004414 <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004404:	4b18      	ldr	r3, [pc, #96]	; (8004468 <prvAddNewTaskToReadyList+0x90>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800440c:	429a      	cmp	r2, r3
 800440e:	d801      	bhi.n	8004414 <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
 8004410:	4b15      	ldr	r3, [pc, #84]	; (8004468 <prvAddNewTaskToReadyList+0x90>)
 8004412:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <prvAddNewTaskToReadyList+0x98>)
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800441c:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800441e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <prvAddNewTaskToReadyList+0x9c>)
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <prvAddNewTaskToReadyList+0x54>
 8004428:	4a12      	ldr	r2, [pc, #72]	; (8004474 <prvAddNewTaskToReadyList+0x9c>)
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004430:	009a      	lsls	r2, r3, #2
 8004432:	1d21      	adds	r1, r4, #4
 8004434:	4810      	ldr	r0, [pc, #64]	; (8004478 <prvAddNewTaskToReadyList+0xa0>)
 8004436:	4410      	add	r0, r2
 8004438:	f7ff fb96 	bl	8003b68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800443c:	f001 f9bc 	bl	80057b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <prvAddNewTaskToReadyList+0x94>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b16b      	cbz	r3, 8004462 <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <prvAddNewTaskToReadyList+0x90>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800444e:	429a      	cmp	r2, r3
 8004450:	d207      	bcs.n	8004462 <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <prvAddNewTaskToReadyList+0xa4>)
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	bd10      	pop	{r4, pc}
 8004464:	20000860 	.word	0x20000860
 8004468:	20000864 	.word	0x20000864
 800446c:	200003d8 	.word	0x200003d8
 8004470:	20000888 	.word	0x20000888
 8004474:	200008c8 	.word	0x200008c8
 8004478:	200003f8 	.word	0x200003f8
 800447c:	e000ed04 	.word	0xe000ed04

08004480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004480:	b510      	push	{r4, lr}
 8004482:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004484:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8004488:	b933      	cbnz	r3, 8004498 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800448a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800448c:	f001 f8cc 	bl	8005628 <vPortFree>
				vPortFree( pxTCB );
 8004490:	4620      	mov	r0, r4
 8004492:	f001 f8c9 	bl	8005628 <vPortFree>
 8004496:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004498:	2b01      	cmp	r3, #1
 800449a:	d102      	bne.n	80044a2 <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 800449c:	f001 f8c4 	bl	8005628 <vPortFree>
 80044a0:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d008      	beq.n	80044b8 <prvDeleteTCB+0x38>
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	e7fe      	b.n	80044b6 <prvDeleteTCB+0x36>
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	bf00      	nop

080044bc <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044bc:	b510      	push	{r4, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044be:	e014      	b.n	80044ea <prvCheckTasksWaitingTermination+0x2e>
		{
			taskENTER_CRITICAL();
 80044c0:	f001 f958 	bl	8005774 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <prvCheckTasksWaitingTermination+0x38>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ca:	1d20      	adds	r0, r4, #4
 80044cc:	f7ff fb72 	bl	8003bb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044d0:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <prvCheckTasksWaitingTermination+0x3c>)
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044d8:	4a08      	ldr	r2, [pc, #32]	; (80044fc <prvCheckTasksWaitingTermination+0x40>)
 80044da:	6813      	ldr	r3, [r2, #0]
 80044dc:	3b01      	subs	r3, #1
 80044de:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044e0:	f001 f96a 	bl	80057b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044e4:	4620      	mov	r0, r4
 80044e6:	f7ff ffcb 	bl	8004480 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ea:	4b04      	ldr	r3, [pc, #16]	; (80044fc <prvCheckTasksWaitingTermination+0x40>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e6      	bne.n	80044c0 <prvCheckTasksWaitingTermination+0x4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044f2:	bd10      	pop	{r4, pc}
 80044f4:	200003dc 	.word	0x200003dc
 80044f8:	20000860 	.word	0x20000860
 80044fc:	2000085c 	.word	0x2000085c

08004500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004500:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004502:	f7ff ffdb 	bl	80044bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <prvIdleTask+0x20>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d9f9      	bls.n	8004502 <prvIdleTask+0x2>
			{
				taskYIELD();
 800450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004512:	4b04      	ldr	r3, [pc, #16]	; (8004524 <prvIdleTask+0x24>)
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	e7f0      	b.n	8004502 <prvIdleTask+0x2>
 8004520:	200003f8 	.word	0x200003f8
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4604      	mov	r4, r0
 800452c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800452e:	4b17      	ldr	r3, [pc, #92]	; (800458c <prvAddCurrentTaskToDelayedList+0x64>)
 8004530:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <prvAddCurrentTaskToDelayedList+0x68>)
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	3004      	adds	r0, #4
 8004538:	f7ff fb3c 	bl	8003bb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800453c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004540:	d107      	bne.n	8004552 <prvAddCurrentTaskToDelayedList+0x2a>
 8004542:	b136      	cbz	r6, 8004552 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <prvAddCurrentTaskToDelayedList+0x68>)
 8004546:	6819      	ldr	r1, [r3, #0]
 8004548:	3104      	adds	r1, #4
 800454a:	4812      	ldr	r0, [pc, #72]	; (8004594 <prvAddCurrentTaskToDelayedList+0x6c>)
 800454c:	f7ff fb0c 	bl	8003b68 <vListInsertEnd>
 8004550:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004552:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <prvAddCurrentTaskToDelayedList+0x68>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800455a:	42a5      	cmp	r5, r4
 800455c:	d907      	bls.n	800456e <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <prvAddCurrentTaskToDelayedList+0x70>)
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <prvAddCurrentTaskToDelayedList+0x68>)
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	3104      	adds	r1, #4
 8004568:	f7ff fb0a 	bl	8003b80 <vListInsert>
 800456c:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <prvAddCurrentTaskToDelayedList+0x74>)
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <prvAddCurrentTaskToDelayedList+0x68>)
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	3104      	adds	r1, #4
 8004578:	f7ff fb02 	bl	8003b80 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <prvAddCurrentTaskToDelayedList+0x78>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429c      	cmp	r4, r3
 8004582:	d201      	bcs.n	8004588 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <prvAddCurrentTaskToDelayedList+0x78>)
 8004586:	601c      	str	r4, [r3, #0]
 8004588:	bd70      	pop	{r4, r5, r6, pc}
 800458a:	bf00      	nop
 800458c:	20000880 	.word	0x20000880
 8004590:	20000864 	.word	0x20000864
 8004594:	200008b4 	.word	0x200008b4
 8004598:	200003f0 	.word	0x200003f0
 800459c:	200003d4 	.word	0x200003d4
 80045a0:	20000884 	.word	0x20000884

080045a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80045aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045ac:	b945      	cbnz	r5, 80045c0 <xTaskCreateStatic+0x1c>
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	e7fe      	b.n	80045be <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80045c0:	b944      	cbnz	r4, 80045d4 <xTaskCreateStatic+0x30>
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	e7fe      	b.n	80045d2 <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045d4:	265c      	movs	r6, #92	; 0x5c
 80045d6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045d8:	9e04      	ldr	r6, [sp, #16]
 80045da:	2e5c      	cmp	r6, #92	; 0x5c
 80045dc:	d008      	beq.n	80045f0 <xTaskCreateStatic+0x4c>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	e7fe      	b.n	80045ee <xTaskCreateStatic+0x4a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045f0:	b18c      	cbz	r4, 8004616 <xTaskCreateStatic+0x72>
 80045f2:	b185      	cbz	r5, 8004616 <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045f4:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045f6:	2502      	movs	r5, #2
 80045f8:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045fc:	2500      	movs	r5, #0
 80045fe:	9503      	str	r5, [sp, #12]
 8004600:	9402      	str	r4, [sp, #8]
 8004602:	ad05      	add	r5, sp, #20
 8004604:	9501      	str	r5, [sp, #4]
 8004606:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004608:	9500      	str	r5, [sp, #0]
 800460a:	f7ff fe69 	bl	80042e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800460e:	4620      	mov	r0, r4
 8004610:	f7ff fee2 	bl	80043d8 <prvAddNewTaskToReadyList>
 8004614:	e001      	b.n	800461a <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
 800461a:	9805      	ldr	r0, [sp, #20]
 800461c:	b006      	add	sp, #24
 800461e:	bd70      	pop	{r4, r5, r6, pc}

08004620 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004624:	b085      	sub	sp, #20
 8004626:	4606      	mov	r6, r0
 8004628:	460f      	mov	r7, r1
 800462a:	4615      	mov	r5, r2
 800462c:	4698      	mov	r8, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800462e:	0090      	lsls	r0, r2, #2
 8004630:	f000 ff78 	bl	8005524 <pvPortMalloc>

			if( pxStack != NULL )
 8004634:	b160      	cbz	r0, 8004650 <xTaskCreate+0x30>
 8004636:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004638:	205c      	movs	r0, #92	; 0x5c
 800463a:	f000 ff73 	bl	8005524 <pvPortMalloc>

				if( pxNewTCB != NULL )
 800463e:	4604      	mov	r4, r0
 8004640:	b110      	cbz	r0, 8004648 <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004642:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
 8004646:	e004      	b.n	8004652 <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004648:	4648      	mov	r0, r9
 800464a:	f000 ffed 	bl	8005628 <vPortFree>
 800464e:	e000      	b.n	8004652 <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004650:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004652:	b19c      	cbz	r4, 800467c <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004654:	2300      	movs	r3, #0
 8004656:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800465a:	9303      	str	r3, [sp, #12]
 800465c:	9402      	str	r4, [sp, #8]
 800465e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	4643      	mov	r3, r8
 8004668:	462a      	mov	r2, r5
 800466a:	4639      	mov	r1, r7
 800466c:	4630      	mov	r0, r6
 800466e:	f7ff fe37 	bl	80042e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004672:	4620      	mov	r0, r4
 8004674:	f7ff feb0 	bl	80043d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004678:	2001      	movs	r0, #1
 800467a:	e001      	b.n	8004680 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800467c:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8004680:	b005      	add	sp, #20
 8004682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004686:	bf00      	nop

08004688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004688:	b510      	push	{r4, lr}
 800468a:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800468c:	2400      	movs	r4, #0
 800468e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004690:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004692:	aa07      	add	r2, sp, #28
 8004694:	a906      	add	r1, sp, #24
 8004696:	a805      	add	r0, sp, #20
 8004698:	f000 fece 	bl	8005438 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800469c:	9b05      	ldr	r3, [sp, #20]
 800469e:	9302      	str	r3, [sp, #8]
 80046a0:	9b06      	ldr	r3, [sp, #24]
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	9400      	str	r4, [sp, #0]
 80046a6:	4623      	mov	r3, r4
 80046a8:	9a07      	ldr	r2, [sp, #28]
 80046aa:	4918      	ldr	r1, [pc, #96]	; (800470c <vTaskStartScheduler+0x84>)
 80046ac:	4818      	ldr	r0, [pc, #96]	; (8004710 <vTaskStartScheduler+0x88>)
 80046ae:	f7ff ff79 	bl	80045a4 <xTaskCreateStatic>
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046b2:	b108      	cbz	r0, 80046b8 <vTaskStartScheduler+0x30>
		{
			xReturn = pdPASS;
 80046b4:	2001      	movs	r0, #1
 80046b6:	e000      	b.n	80046ba <vTaskStartScheduler+0x32>
		}
		else
		{
			xReturn = pdFAIL;
 80046b8:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046ba:	2801      	cmp	r0, #1
 80046bc:	d101      	bne.n	80046c2 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
 80046be:	f000 fc61 	bl	8004f84 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046c2:	2801      	cmp	r0, #1
 80046c4:	d114      	bne.n	80046f0 <vTaskStartScheduler+0x68>
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046d6:	f04f 32ff 	mov.w	r2, #4294967295
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <vTaskStartScheduler+0x8c>)
 80046dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046de:	2201      	movs	r2, #1
 80046e0:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <vTaskStartScheduler+0x90>)
 80046e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80046e4:	2200      	movs	r2, #0
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <vTaskStartScheduler+0x94>)
 80046e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046ea:	f001 f8e5 	bl	80058b8 <xPortStartScheduler>
 80046ee:	e00b      	b.n	8004708 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80046f4:	d108      	bne.n	8004708 <vTaskStartScheduler+0x80>
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	e7fe      	b.n	8004706 <vTaskStartScheduler+0x7e>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004708:	b008      	add	sp, #32
 800470a:	bd10      	pop	{r4, pc}
 800470c:	0800ff60 	.word	0x0800ff60
 8004710:	08004501 	.word	0x08004501
 8004714:	20000884 	.word	0x20000884
 8004718:	200003d8 	.word	0x200003d8
 800471c:	20000880 	.word	0x20000880

08004720 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004720:	4a02      	ldr	r2, [pc, #8]	; (800472c <vTaskSuspendAll+0xc>)
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000858 	.word	0x20000858

08004730 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004730:	4b01      	ldr	r3, [pc, #4]	; (8004738 <xTaskGetTickCount+0x8>)
 8004732:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000880 	.word	0x20000880

0800473c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800473e:	4b3d      	ldr	r3, [pc, #244]	; (8004834 <xTaskIncrementTick+0xf8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d168      	bne.n	8004818 <xTaskIncrementTick+0xdc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004746:	4b3c      	ldr	r3, [pc, #240]	; (8004838 <xTaskIncrementTick+0xfc>)
 8004748:	681d      	ldr	r5, [r3, #0]
 800474a:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800474c:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800474e:	b9c5      	cbnz	r5, 8004782 <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8004750:	4b3a      	ldr	r3, [pc, #232]	; (800483c <xTaskIncrementTick+0x100>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	b143      	cbz	r3, 800476a <xTaskIncrementTick+0x2e>
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	e7fe      	b.n	8004768 <xTaskIncrementTick+0x2c>
 800476a:	4a34      	ldr	r2, [pc, #208]	; (800483c <xTaskIncrementTick+0x100>)
 800476c:	6811      	ldr	r1, [r2, #0]
 800476e:	4b34      	ldr	r3, [pc, #208]	; (8004840 <xTaskIncrementTick+0x104>)
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	6010      	str	r0, [r2, #0]
 8004774:	6019      	str	r1, [r3, #0]
 8004776:	4a33      	ldr	r2, [pc, #204]	; (8004844 <xTaskIncrementTick+0x108>)
 8004778:	6813      	ldr	r3, [r2, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	f7ff fd95 	bl	80042ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004782:	4b31      	ldr	r3, [pc, #196]	; (8004848 <xTaskIncrementTick+0x10c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	429d      	cmp	r5, r3
 8004788:	d203      	bcs.n	8004792 <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800478a:	2400      	movs	r4, #0
 800478c:	e039      	b.n	8004802 <xTaskIncrementTick+0xc6>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
 800478e:	2401      	movs	r4, #1
 8004790:	e000      	b.n	8004794 <xTaskIncrementTick+0x58>
 8004792:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004794:	4b29      	ldr	r3, [pc, #164]	; (800483c <xTaskIncrementTick+0x100>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b90b      	cbnz	r3, 80047a0 <xTaskIncrementTick+0x64>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <xTaskIncrementTick+0x66>
 80047a0:	2300      	movs	r3, #0
 80047a2:	b123      	cbz	r3, 80047ae <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a4:	f04f 32ff 	mov.w	r2, #4294967295
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <xTaskIncrementTick+0x10c>)
 80047aa:	601a      	str	r2, [r3, #0]
					break;
 80047ac:	e029      	b.n	8004802 <xTaskIncrementTick+0xc6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047ae:	4b23      	ldr	r3, [pc, #140]	; (800483c <xTaskIncrementTick+0x100>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047b6:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
 80047b8:	429d      	cmp	r5, r3
 80047ba:	d202      	bcs.n	80047c2 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <xTaskIncrementTick+0x10c>)
 80047be:	6013      	str	r3, [r2, #0]
						break;
 80047c0:	e01f      	b.n	8004802 <xTaskIncrementTick+0xc6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c2:	1d37      	adds	r7, r6, #4
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff f9f5 	bl	8003bb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047ca:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80047cc:	b11b      	cbz	r3, 80047d6 <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ce:	f106 0018 	add.w	r0, r6, #24
 80047d2:	f7ff f9ef 	bl	8003bb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80047d8:	4a1c      	ldr	r2, [pc, #112]	; (800484c <xTaskIncrementTick+0x110>)
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	4293      	cmp	r3, r2
 80047de:	d901      	bls.n	80047e4 <xTaskIncrementTick+0xa8>
 80047e0:	4a1a      	ldr	r2, [pc, #104]	; (800484c <xTaskIncrementTick+0x110>)
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047e8:	009a      	lsls	r2, r3, #2
 80047ea:	4639      	mov	r1, r7
 80047ec:	4818      	ldr	r0, [pc, #96]	; (8004850 <xTaskIncrementTick+0x114>)
 80047ee:	4410      	add	r0, r2
 80047f0:	f7ff f9ba 	bl	8003b68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047f4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80047f6:	4b17      	ldr	r3, [pc, #92]	; (8004854 <xTaskIncrementTick+0x118>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d2c6      	bcs.n	800478e <xTaskIncrementTick+0x52>
 8004800:	e7c8      	b.n	8004794 <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <xTaskIncrementTick+0x118>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800480c:	009a      	lsls	r2, r3, #2
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <xTaskIncrementTick+0x114>)
 8004810:	589b      	ldr	r3, [r3, r2]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d806      	bhi.n	8004824 <xTaskIncrementTick+0xe8>
 8004816:	e006      	b.n	8004826 <xTaskIncrementTick+0xea>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004818:	4a0f      	ldr	r2, [pc, #60]	; (8004858 <xTaskIncrementTick+0x11c>)
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004820:	2400      	movs	r4, #0
 8004822:	e000      	b.n	8004826 <xTaskIncrementTick+0xea>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 8004824:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <xTaskIncrementTick+0x120>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	b103      	cbz	r3, 800482e <xTaskIncrementTick+0xf2>
		{
			xSwitchRequired = pdTRUE;
 800482c:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 800482e:	4620      	mov	r0, r4
 8004830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004832:	bf00      	nop
 8004834:	20000858 	.word	0x20000858
 8004838:	20000880 	.word	0x20000880
 800483c:	200003d4 	.word	0x200003d4
 8004840:	200003f0 	.word	0x200003f0
 8004844:	2000087c 	.word	0x2000087c
 8004848:	20000884 	.word	0x20000884
 800484c:	200008c8 	.word	0x200008c8
 8004850:	200003f8 	.word	0x200003f8
 8004854:	20000864 	.word	0x20000864
 8004858:	200003f4 	.word	0x200003f4
 800485c:	200008cc 	.word	0x200008cc

08004860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004860:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004862:	4b34      	ldr	r3, [pc, #208]	; (8004934 <xTaskResumeAll+0xd4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	b943      	cbnz	r3, 800487a <xTaskResumeAll+0x1a>
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	e7fe      	b.n	8004878 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800487a:	f000 ff7b 	bl	8005774 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800487e:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <xTaskResumeAll+0xd4>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	3a01      	subs	r2, #1
 8004884:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d14b      	bne.n	8004924 <xTaskResumeAll+0xc4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800488c:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <xTaskResumeAll+0xd8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	bb2b      	cbnz	r3, 80048de <xTaskResumeAll+0x7e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8004892:	2400      	movs	r4, #0
 8004894:	e049      	b.n	800492a <xTaskResumeAll+0xca>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004896:	4b29      	ldr	r3, [pc, #164]	; (800493c <xTaskResumeAll+0xdc>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800489c:	f104 0018 	add.w	r0, r4, #24
 80048a0:	f7ff f988 	bl	8003bb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048a4:	1d25      	adds	r5, r4, #4
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7ff f984 	bl	8003bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80048ae:	4a24      	ldr	r2, [pc, #144]	; (8004940 <xTaskResumeAll+0xe0>)
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <xTaskResumeAll+0x5a>
 80048b6:	4a22      	ldr	r2, [pc, #136]	; (8004940 <xTaskResumeAll+0xe0>)
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80048be:	009a      	lsls	r2, r3, #2
 80048c0:	4629      	mov	r1, r5
 80048c2:	4820      	ldr	r0, [pc, #128]	; (8004944 <xTaskResumeAll+0xe4>)
 80048c4:	4410      	add	r0, r2
 80048c6:	f7ff f94f 	bl	8003b68 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80048cc:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <xTaskResumeAll+0xe8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d304      	bcc.n	80048e0 <xTaskResumeAll+0x80>
					{
						xYieldPending = pdTRUE;
 80048d6:	2201      	movs	r2, #1
 80048d8:	4b1c      	ldr	r3, [pc, #112]	; (800494c <xTaskResumeAll+0xec>)
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e000      	b.n	80048e0 <xTaskResumeAll+0x80>
 80048de:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048e0:	4b16      	ldr	r3, [pc, #88]	; (800493c <xTaskResumeAll+0xdc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1d6      	bne.n	8004896 <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048e8:	b10c      	cbz	r4, 80048ee <xTaskResumeAll+0x8e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048ea:	f7ff fcdf 	bl	80042ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <xTaskResumeAll+0xf0>)
 80048f0:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048f2:	b154      	cbz	r4, 800490a <xTaskResumeAll+0xaa>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048f4:	f7ff ff22 	bl	800473c <xTaskIncrementTick>
 80048f8:	b110      	cbz	r0, 8004900 <xTaskResumeAll+0xa0>
							{
								xYieldPending = pdTRUE;
 80048fa:	2201      	movs	r2, #1
 80048fc:	4b13      	ldr	r3, [pc, #76]	; (800494c <xTaskResumeAll+0xec>)
 80048fe:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004900:	3c01      	subs	r4, #1
 8004902:	d1f7      	bne.n	80048f4 <xTaskResumeAll+0x94>

						uxPendedTicks = 0;
 8004904:	2200      	movs	r2, #0
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <xTaskResumeAll+0xf0>)
 8004908:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <xTaskResumeAll+0xec>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b15b      	cbz	r3, 8004928 <xTaskResumeAll+0xc8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <xTaskResumeAll+0xf4>)
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004920:	2401      	movs	r4, #1
 8004922:	e002      	b.n	800492a <xTaskResumeAll+0xca>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8004924:	2400      	movs	r4, #0
 8004926:	e000      	b.n	800492a <xTaskResumeAll+0xca>
 8004928:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800492a:	f000 ff45 	bl	80057b8 <vPortExitCritical>

	return xAlreadyYielded;
}
 800492e:	4620      	mov	r0, r4
 8004930:	bd38      	pop	{r3, r4, r5, pc}
 8004932:	bf00      	nop
 8004934:	20000858 	.word	0x20000858
 8004938:	20000860 	.word	0x20000860
 800493c:	20000868 	.word	0x20000868
 8004940:	200008c8 	.word	0x200008c8
 8004944:	200003f8 	.word	0x200003f8
 8004948:	20000864 	.word	0x20000864
 800494c:	200008cc 	.word	0x200008cc
 8004950:	200003f4 	.word	0x200003f4
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004958:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800495a:	b1a8      	cbz	r0, 8004988 <vTaskDelay+0x30>
 800495c:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <vTaskDelay+0x48>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b143      	cbz	r3, 8004976 <vTaskDelay+0x1e>
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	e7fe      	b.n	8004974 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004976:	f7ff fed3 	bl	8004720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800497a:	2100      	movs	r1, #0
 800497c:	4620      	mov	r0, r4
 800497e:	f7ff fdd3 	bl	8004528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004982:	f7ff ff6d 	bl	8004860 <xTaskResumeAll>
 8004986:	e000      	b.n	800498a <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
 8004988:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800498a:	b938      	cbnz	r0, 800499c <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 800498c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004990:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <vTaskDelay+0x4c>)
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	bd10      	pop	{r4, pc}
 800499e:	bf00      	nop
 80049a0:	20000858 	.word	0x20000858
 80049a4:	e000ed04 	.word	0xe000ed04

080049a8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049a8:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <vTaskSwitchContext+0x84>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	b11b      	cbz	r3, 80049b6 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ae:	2201      	movs	r2, #1
 80049b0:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <vTaskSwitchContext+0x88>)
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
 80049b6:	2200      	movs	r2, #0
 80049b8:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <vTaskSwitchContext+0x88>)
 80049ba:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049bc:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <vTaskSwitchContext+0x8c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	e00a      	b.n	80049d8 <vTaskSwitchContext+0x30>
 80049c2:	b943      	cbnz	r3, 80049d6 <vTaskSwitchContext+0x2e>
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	e7fe      	b.n	80049d4 <vTaskSwitchContext+0x2c>
 80049d6:	3b01      	subs	r3, #1
 80049d8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80049dc:	008a      	lsls	r2, r1, #2
 80049de:	4916      	ldr	r1, [pc, #88]	; (8004a38 <vTaskSwitchContext+0x90>)
 80049e0:	588a      	ldr	r2, [r1, r2]
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	d0ed      	beq.n	80049c2 <vTaskSwitchContext+0x1a>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049e6:	b430      	push	{r4, r5}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049e8:	460d      	mov	r5, r1
 80049ea:	0099      	lsls	r1, r3, #2
 80049ec:	18ca      	adds	r2, r1, r3
 80049ee:	0090      	lsls	r0, r2, #2
 80049f0:	4428      	add	r0, r5
 80049f2:	6842      	ldr	r2, [r0, #4]
 80049f4:	6854      	ldr	r4, [r2, #4]
 80049f6:	6044      	str	r4, [r0, #4]
 80049f8:	4419      	add	r1, r3
 80049fa:	008a      	lsls	r2, r1, #2
 80049fc:	3208      	adds	r2, #8
 80049fe:	442a      	add	r2, r5
 8004a00:	4294      	cmp	r4, r2
 8004a02:	d105      	bne.n	8004a10 <vTaskSwitchContext+0x68>
 8004a04:	6860      	ldr	r0, [r4, #4]
 8004a06:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004a0a:	008a      	lsls	r2, r1, #2
 8004a0c:	442a      	add	r2, r5
 8004a0e:	6050      	str	r0, [r2, #4]
 8004a10:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004a14:	008a      	lsls	r2, r1, #2
 8004a16:	4908      	ldr	r1, [pc, #32]	; (8004a38 <vTaskSwitchContext+0x90>)
 8004a18:	440a      	add	r2, r1
 8004a1a:	6852      	ldr	r2, [r2, #4]
 8004a1c:	68d1      	ldr	r1, [r2, #12]
 8004a1e:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <vTaskSwitchContext+0x94>)
 8004a20:	6011      	str	r1, [r2, #0]
 8004a22:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <vTaskSwitchContext+0x8c>)
 8004a24:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a26:	bc30      	pop	{r4, r5}
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000858 	.word	0x20000858
 8004a30:	200008cc 	.word	0x200008cc
 8004a34:	200008c8 	.word	0x200008c8
 8004a38:	200003f8 	.word	0x200003f8
 8004a3c:	20000864 	.word	0x20000864

08004a40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
 8004a40:	b940      	cbnz	r0, 8004a54 <vTaskPlaceOnEventList+0x14>
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	e7fe      	b.n	8004a52 <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a54:	b510      	push	{r4, lr}
 8004a56:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <vTaskPlaceOnEventList+0x2c>)
 8004a5a:	6819      	ldr	r1, [r3, #0]
 8004a5c:	3118      	adds	r1, #24
 8004a5e:	f7ff f88f 	bl	8003b80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a62:	2101      	movs	r1, #1
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff fd5f 	bl	8004528 <prvAddCurrentTaskToDelayedList>
 8004a6a:	bd10      	pop	{r4, pc}
 8004a6c:	20000864 	.word	0x20000864

08004a70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a70:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004a72:	b940      	cbnz	r0, 8004a86 <vTaskPlaceOnEventListRestricted+0x16>
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	e7fe      	b.n	8004a84 <vTaskPlaceOnEventListRestricted+0x14>
 8004a86:	460c      	mov	r4, r1
 8004a88:	4615      	mov	r5, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a8a:	4a06      	ldr	r2, [pc, #24]	; (8004aa4 <vTaskPlaceOnEventListRestricted+0x34>)
 8004a8c:	6811      	ldr	r1, [r2, #0]
 8004a8e:	3118      	adds	r1, #24
 8004a90:	f7ff f86a 	bl	8003b68 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a94:	b10d      	cbz	r5, 8004a9a <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
 8004a96:	f04f 34ff 	mov.w	r4, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7ff fd43 	bl	8004528 <prvAddCurrentTaskToDelayedList>
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	20000864 	.word	0x20000864

08004aa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004aa8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004aaa:	68c3      	ldr	r3, [r0, #12]
 8004aac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004aae:	b944      	cbnz	r4, 8004ac2 <xTaskRemoveFromEventList+0x1a>
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	e7fe      	b.n	8004ac0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ac2:	f104 0518 	add.w	r5, r4, #24
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f7ff f874 	bl	8003bb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004acc:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <xTaskRemoveFromEventList+0x74>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	b99b      	cbnz	r3, 8004afa <xTaskRemoveFromEventList+0x52>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ad2:	1d25      	adds	r5, r4, #4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f7ff f86d 	bl	8003bb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ada:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004adc:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <xTaskRemoveFromEventList+0x78>)
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <xTaskRemoveFromEventList+0x40>
 8004ae4:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <xTaskRemoveFromEventList+0x78>)
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004aec:	009a      	lsls	r2, r3, #2
 8004aee:	4629      	mov	r1, r5
 8004af0:	480c      	ldr	r0, [pc, #48]	; (8004b24 <xTaskRemoveFromEventList+0x7c>)
 8004af2:	4410      	add	r0, r2
 8004af4:	f7ff f838 	bl	8003b68 <vListInsertEnd>
 8004af8:	e003      	b.n	8004b02 <xTaskRemoveFromEventList+0x5a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004afa:	4629      	mov	r1, r5
 8004afc:	480a      	ldr	r0, [pc, #40]	; (8004b28 <xTaskRemoveFromEventList+0x80>)
 8004afe:	f7ff f833 	bl	8003b68 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <xTaskRemoveFromEventList+0x84>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d903      	bls.n	8004b16 <xTaskRemoveFromEventList+0x6e>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b0e:	2001      	movs	r0, #1
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <xTaskRemoveFromEventList+0x88>)
 8004b12:	6018      	str	r0, [r3, #0]
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
 8004b16:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8004b18:	bd38      	pop	{r3, r4, r5, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000858 	.word	0x20000858
 8004b20:	200008c8 	.word	0x200008c8
 8004b24:	200003f8 	.word	0x200003f8
 8004b28:	20000868 	.word	0x20000868
 8004b2c:	20000864 	.word	0x20000864
 8004b30:	200008cc 	.word	0x200008cc

08004b34 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <vTaskInternalSetTimeOutState+0x10>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b3a:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <vTaskInternalSetTimeOutState+0x14>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6043      	str	r3, [r0, #4]
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	2000087c 	.word	0x2000087c
 8004b48:	20000880 	.word	0x20000880

08004b4c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b4e:	b940      	cbnz	r0, 8004b62 <xTaskCheckForTimeOut+0x16>
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	e7fe      	b.n	8004b60 <xTaskCheckForTimeOut+0x14>
 8004b62:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8004b64:	b941      	cbnz	r1, 8004b78 <xTaskCheckForTimeOut+0x2c>
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	e7fe      	b.n	8004b76 <xTaskCheckForTimeOut+0x2a>
 8004b78:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
 8004b7a:	f000 fdfb 	bl	8005774 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <xTaskCheckForTimeOut+0x78>)
 8004b80:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b82:	6869      	ldr	r1, [r5, #4]
 8004b84:	1a42      	subs	r2, r0, r1
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d013      	beq.n	8004bb6 <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b8e:	682f      	ldr	r7, [r5, #0]
 8004b90:	4e0d      	ldr	r6, [pc, #52]	; (8004bc8 <xTaskCheckForTimeOut+0x7c>)
 8004b92:	6836      	ldr	r6, [r6, #0]
 8004b94:	42b7      	cmp	r7, r6
 8004b96:	d001      	beq.n	8004b9c <xTaskCheckForTimeOut+0x50>
 8004b98:	4288      	cmp	r0, r1
 8004b9a:	d20e      	bcs.n	8004bba <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d206      	bcs.n	8004bae <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f7ff ffc5 	bl	8004b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004baa:	2400      	movs	r4, #0
 8004bac:	e006      	b.n	8004bbc <xTaskCheckForTimeOut+0x70>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004bb2:	2401      	movs	r4, #1
 8004bb4:	e002      	b.n	8004bbc <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bb6:	2400      	movs	r4, #0
 8004bb8:	e000      	b.n	8004bbc <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bba:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8004bbc:	f000 fdfc 	bl	80057b8 <vPortExitCritical>

	return xReturn;
}
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bc4:	20000880 	.word	0x20000880
 8004bc8:	2000087c 	.word	0x2000087c

08004bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8004bcc:	2201      	movs	r2, #1
 8004bce:	4b01      	ldr	r3, [pc, #4]	; (8004bd4 <vTaskMissedYield+0x8>)
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	4770      	bx	lr
 8004bd4:	200008cc 	.word	0x200008cc

08004bd8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <xTaskGetSchedulerState+0x18>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	b123      	cbz	r3, 8004be8 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <xTaskGetSchedulerState+0x1c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	b91b      	cbnz	r3, 8004bec <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004be4:	2002      	movs	r0, #2
 8004be6:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004be8:	2001      	movs	r0, #1
 8004bea:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bec:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
 8004bee:	4770      	bx	lr
 8004bf0:	200003d8 	.word	0x200003d8
 8004bf4:	20000858 	.word	0x20000858

08004bf8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d03a      	beq.n	8004c72 <xTaskPriorityDisinherit+0x7a>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c00:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <xTaskPriorityDisinherit+0x88>)
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	4290      	cmp	r0, r2
 8004c06:	d008      	beq.n	8004c1a <xTaskPriorityDisinherit+0x22>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	e7fe      	b.n	8004c18 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c1a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004c1c:	b942      	cbnz	r2, 8004c30 <xTaskPriorityDisinherit+0x38>
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	e7fe      	b.n	8004c2e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8004c30:	3a01      	subs	r2, #1
 8004c32:	6502      	str	r2, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004c36:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c38:	4288      	cmp	r0, r1
 8004c3a:	d01c      	beq.n	8004c76 <xTaskPriorityDisinherit+0x7e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c3c:	b9ea      	cbnz	r2, 8004c7a <xTaskPriorityDisinherit+0x82>
 8004c3e:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c40:	1d1d      	adds	r5, r3, #4
 8004c42:	4628      	mov	r0, r5
 8004c44:	f7fe ffb6 	bl	8003bb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c48:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004c4a:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c50:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c52:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <xTaskPriorityDisinherit+0x8c>)
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <xTaskPriorityDisinherit+0x66>
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <xTaskPriorityDisinherit+0x8c>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c62:	009a      	lsls	r2, r3, #2
 8004c64:	4629      	mov	r1, r5
 8004c66:	4808      	ldr	r0, [pc, #32]	; (8004c88 <xTaskPriorityDisinherit+0x90>)
 8004c68:	4410      	add	r0, r2
 8004c6a:	f7fe ff7d 	bl	8003b68 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c6e:	2001      	movs	r0, #1
 8004c70:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8004c72:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8004c74:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8004c76:	2000      	movs	r0, #0
 8004c78:	bd38      	pop	{r3, r4, r5, pc}
 8004c7a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8004c7c:	bd38      	pop	{r3, r4, r5, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000864 	.word	0x20000864
 8004c84:	200008c8 	.word	0x200008c8
 8004c88:	200003f8 	.word	0x200003f8

08004c8c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4605      	mov	r5, r0
 8004c90:	460c      	mov	r4, r1
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004c92:	f000 fd6f 	bl	8005774 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <ulTaskNotifyTake+0x6c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9c:	b98b      	cbnz	r3, 8004cc2 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004c9e:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <ulTaskNotifyTake+0x6c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004ca8:	b15c      	cbz	r4, 8004cc2 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004caa:	4611      	mov	r1, r2
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7ff fc3b 	bl	8004528 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb6:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <ulTaskNotifyTake+0x70>)
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004cc2:	f000 fd79 	bl	80057b8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004cc6:	f000 fd55 	bl	8005774 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <ulTaskNotifyTake+0x6c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6d5c      	ldr	r4, [r3, #84]	; 0x54

			if( ulReturn != 0UL )
 8004cd0:	b14c      	cbz	r4, 8004ce6 <ulTaskNotifyTake+0x5a>
			{
				if( xClearCountOnExit != pdFALSE )
 8004cd2:	b125      	cbz	r5, 8004cde <ulTaskNotifyTake+0x52>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <ulTaskNotifyTake+0x6c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54
 8004cdc:	e003      	b.n	8004ce6 <ulTaskNotifyTake+0x5a>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <ulTaskNotifyTake+0x6c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	1e62      	subs	r2, r4, #1
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ce6:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <ulTaskNotifyTake+0x6c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8004cf0:	f000 fd62 	bl	80057b8 <vPortExitCritical>

		return ulReturn;
	}
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	20000864 	.word	0x20000864
 8004cfc:	e000ed04 	.word	0xe000ed04

08004d00 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004d02:	b940      	cbnz	r0, 8004d16 <xTaskGenericNotify+0x16>
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	e7fe      	b.n	8004d14 <xTaskGenericNotify+0x14>
 8004d16:	4604      	mov	r4, r0
 8004d18:	461f      	mov	r7, r3
 8004d1a:	4615      	mov	r5, r2
 8004d1c:	460e      	mov	r6, r1
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8004d1e:	f000 fd29 	bl	8005774 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004d22:	b10f      	cbz	r7, 8004d28 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004d24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d26:	603b      	str	r3, [r7, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004d28:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8004d2c:	b2db      	uxtb	r3, r3

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58

			switch( eAction )
 8004d34:	1e6a      	subs	r2, r5, #1
 8004d36:	2a03      	cmp	r2, #3
 8004d38:	d815      	bhi.n	8004d66 <xTaskGenericNotify+0x66>
 8004d3a:	e8df f002 	tbb	[pc, r2]
 8004d3e:	0702      	.short	0x0702
 8004d40:	0f0c      	.short	0x0f0c
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004d42:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004d44:	4316      	orrs	r6, r2
 8004d46:	6566      	str	r6, [r4, #84]	; 0x54
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004d48:	2501      	movs	r5, #1

			switch( eAction )
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;
 8004d4a:	e00f      	b.n	8004d6c <xTaskGenericNotify+0x6c>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004d4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004d4e:	3201      	adds	r2, #1
 8004d50:	6562      	str	r2, [r4, #84]	; 0x54
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004d52:	2501      	movs	r5, #1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
 8004d54:	e00a      	b.n	8004d6c <xTaskGenericNotify+0x6c>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004d56:	6566      	str	r6, [r4, #84]	; 0x54
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004d58:	2501      	movs	r5, #1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
 8004d5a:	e007      	b.n	8004d6c <xTaskGenericNotify+0x6c>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d004      	beq.n	8004d6a <xTaskGenericNotify+0x6a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004d60:	6566      	str	r6, [r4, #84]	; 0x54
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004d62:	2501      	movs	r5, #1
 8004d64:	e002      	b.n	8004d6c <xTaskGenericNotify+0x6c>
 8004d66:	2501      	movs	r5, #1
 8004d68:	e000      	b.n	8004d6c <xTaskGenericNotify+0x6c>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8004d6a:	2500      	movs	r5, #0

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d12b      	bne.n	8004dc8 <xTaskGenericNotify+0xc8>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d70:	1d26      	adds	r6, r4, #4
 8004d72:	4630      	mov	r0, r6
 8004d74:	f7fe ff1e 	bl	8003bb4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004d78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <xTaskGenericNotify+0xd0>)
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <xTaskGenericNotify+0x86>
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <xTaskGenericNotify+0xd0>)
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d8a:	009a      	lsls	r2, r3, #2
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	4811      	ldr	r0, [pc, #68]	; (8004dd4 <xTaskGenericNotify+0xd4>)
 8004d90:	4410      	add	r0, r2
 8004d92:	f7fe fee9 	bl	8003b68 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004d96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d98:	b143      	cbz	r3, 8004dac <xTaskGenericNotify+0xac>
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	e7fe      	b.n	8004daa <xTaskGenericNotify+0xaa>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <xTaskGenericNotify+0xd8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d907      	bls.n	8004dc8 <xTaskGenericNotify+0xc8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbc:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <xTaskGenericNotify+0xdc>)
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004dc8:	f000 fcf6 	bl	80057b8 <vPortExitCritical>

		return xReturn;
	}
 8004dcc:	4628      	mov	r0, r5
 8004dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd0:	200008c8 	.word	0x200008c8
 8004dd4:	200003f8 	.word	0x200003f8
 8004dd8:	20000864 	.word	0x20000864
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004de2:	b940      	cbnz	r0, 8004df6 <vTaskNotifyGiveFromISR+0x16>
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	e7fe      	b.n	8004df4 <vTaskNotifyGiveFromISR+0x14>
 8004df6:	4604      	mov	r4, r0
 8004df8:	460d      	mov	r5, r1
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dfa:	f000 fde5 	bl	80059c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dfe:	f3ef 8611 	mrs	r6, BASEPRI
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004e12:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8004e16:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8004e1e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e20:	3201      	adds	r2, #1
 8004e22:	6562      	str	r2, [r4, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d133      	bne.n	8004e90 <vTaskNotifyGiveFromISR+0xb0>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e2a:	b143      	cbz	r3, 8004e3e <vTaskNotifyGiveFromISR+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	e7fe      	b.n	8004e3c <vTaskNotifyGiveFromISR+0x5c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e3e:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <vTaskNotifyGiveFromISR+0xb8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	b99b      	cbnz	r3, 8004e6c <vTaskNotifyGiveFromISR+0x8c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e44:	1d27      	adds	r7, r4, #4
 8004e46:	4638      	mov	r0, r7
 8004e48:	f7fe feb4 	bl	8003bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e4e:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <vTaskNotifyGiveFromISR+0xbc>)
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <vTaskNotifyGiveFromISR+0x7a>
 8004e56:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <vTaskNotifyGiveFromISR+0xbc>)
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e5e:	009a      	lsls	r2, r3, #2
 8004e60:	4639      	mov	r1, r7
 8004e62:	480f      	ldr	r0, [pc, #60]	; (8004ea0 <vTaskNotifyGiveFromISR+0xc0>)
 8004e64:	4410      	add	r0, r2
 8004e66:	f7fe fe7f 	bl	8003b68 <vListInsertEnd>
 8004e6a:	e004      	b.n	8004e76 <vTaskNotifyGiveFromISR+0x96>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004e6c:	f104 0118 	add.w	r1, r4, #24
 8004e70:	480c      	ldr	r0, [pc, #48]	; (8004ea4 <vTaskNotifyGiveFromISR+0xc4>)
 8004e72:	f7fe fe79 	bl	8003b68 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <vTaskNotifyGiveFromISR+0xc8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d906      	bls.n	8004e90 <vTaskNotifyGiveFromISR+0xb0>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004e82:	b115      	cbz	r5, 8004e8a <vTaskNotifyGiveFromISR+0xaa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	602b      	str	r3, [r5, #0]
 8004e88:	e002      	b.n	8004e90 <vTaskNotifyGiveFromISR+0xb0>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <vTaskNotifyGiveFromISR+0xcc>)
 8004e8e:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e90:	f386 8811 	msr	BASEPRI, r6
 8004e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000858 	.word	0x20000858
 8004e9c:	200008c8 	.word	0x200008c8
 8004ea0:	200003f8 	.word	0x200003f8
 8004ea4:	20000868 	.word	0x20000868
 8004ea8:	20000864 	.word	0x20000864
 8004eac:	200008cc 	.word	0x200008cc

08004eb0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <prvGetNextExpireTime+0x1c>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	fab3 f383 	clz	r3, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ebe:	b913      	cbnz	r3, 8004ec6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ec0:	68d3      	ldr	r3, [r2, #12]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ec6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	200008d0 	.word	0x200008d0

08004ed0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ed0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ed2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ed4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ed6:	4291      	cmp	r1, r2
 8004ed8:	d80a      	bhi.n	8004ef0 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	6983      	ldr	r3, [r0, #24]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d211      	bcs.n	8004f06 <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ee2:	1d01      	adds	r1, r0, #4
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <prvInsertTimerInActiveList+0x40>)
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	f7fe fe4a 	bl	8003b80 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8004eec:	2000      	movs	r0, #0
 8004eee:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d201      	bcs.n	8004ef8 <prvInsertTimerInActiveList+0x28>
 8004ef4:	4299      	cmp	r1, r3
 8004ef6:	d208      	bcs.n	8004f0a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ef8:	1d01      	adds	r1, r0, #4
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <prvInsertTimerInActiveList+0x44>)
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	f7fe fe3f 	bl	8003b80 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8004f02:	2000      	movs	r0, #0
 8004f04:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f06:	2001      	movs	r0, #1
 8004f08:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f0a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8004f0c:	bd08      	pop	{r3, pc}
 8004f0e:	bf00      	nop
 8004f10:	200009f4 	.word	0x200009f4
 8004f14:	200008d0 	.word	0x200008d0

08004f18 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f18:	b530      	push	{r4, r5, lr}
 8004f1a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f1c:	f000 fc2a 	bl	8005774 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f20:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <prvCheckForValidListAndQueue+0x4c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	b9cb      	cbnz	r3, 8004f5a <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f26:	4d10      	ldr	r5, [pc, #64]	; (8004f68 <prvCheckForValidListAndQueue+0x50>)
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f7fe fe0d 	bl	8003b48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f2e:	4c0f      	ldr	r4, [pc, #60]	; (8004f6c <prvCheckForValidListAndQueue+0x54>)
 8004f30:	4620      	mov	r0, r4
 8004f32:	f7fe fe09 	bl	8003b48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f36:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <prvCheckForValidListAndQueue+0x58>)
 8004f38:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <prvCheckForValidListAndQueue+0x5c>)
 8004f3c:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <prvCheckForValidListAndQueue+0x60>)
 8004f44:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <prvCheckForValidListAndQueue+0x64>)
 8004f46:	2110      	movs	r1, #16
 8004f48:	200a      	movs	r0, #10
 8004f4a:	f7fe ff39 	bl	8003dc0 <xQueueGenericCreateStatic>
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <prvCheckForValidListAndQueue+0x4c>)
 8004f50:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f52:	b110      	cbz	r0, 8004f5a <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f54:	490a      	ldr	r1, [pc, #40]	; (8004f80 <prvCheckForValidListAndQueue+0x68>)
 8004f56:	f7ff f96f 	bl	8004238 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f5a:	f000 fc2d 	bl	80057b8 <vPortExitCritical>
}
 8004f5e:	b003      	add	sp, #12
 8004f60:	bd30      	pop	{r4, r5, pc}
 8004f62:	bf00      	nop
 8004f64:	200009f0 	.word	0x200009f0
 8004f68:	200008d4 	.word	0x200008d4
 8004f6c:	200008e8 	.word	0x200008e8
 8004f70:	200008d0 	.word	0x200008d0
 8004f74:	200009f4 	.word	0x200009f4
 8004f78:	200009a0 	.word	0x200009a0
 8004f7c:	20000900 	.word	0x20000900
 8004f80:	0800ff68 	.word	0x0800ff68

08004f84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f84:	b510      	push	{r4, lr}
 8004f86:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f88:	f7ff ffc6 	bl	8004f18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f8c:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <xTimerCreateTimerTask+0x60>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	b1d3      	cbz	r3, 8004fc8 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f92:	2400      	movs	r4, #0
 8004f94:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f96:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f98:	aa07      	add	r2, sp, #28
 8004f9a:	a906      	add	r1, sp, #24
 8004f9c:	a805      	add	r0, sp, #20
 8004f9e:	f000 fa57 	bl	8005450 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fa2:	9b05      	ldr	r3, [sp, #20]
 8004fa4:	9302      	str	r3, [sp, #8]
 8004fa6:	9b06      	ldr	r3, [sp, #24]
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	2302      	movs	r3, #2
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	4623      	mov	r3, r4
 8004fb0:	9a07      	ldr	r2, [sp, #28]
 8004fb2:	490d      	ldr	r1, [pc, #52]	; (8004fe8 <xTimerCreateTimerTask+0x64>)
 8004fb4:	480d      	ldr	r0, [pc, #52]	; (8004fec <xTimerCreateTimerTask+0x68>)
 8004fb6:	f7ff faf5 	bl	80045a4 <xTaskCreateStatic>
 8004fba:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <xTimerCreateTimerTask+0x6c>)
 8004fbc:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004fbe:	b908      	cbnz	r0, 8004fc4 <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	e002      	b.n	8004fca <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	e000      	b.n	8004fca <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8004fc8:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004fca:	b940      	cbnz	r0, 8004fde <xTimerCreateTimerTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	e7fe      	b.n	8004fdc <xTimerCreateTimerTask+0x58>
	return xReturn;
}
 8004fde:	b008      	add	sp, #32
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200009f0 	.word	0x200009f0
 8004fe8:	0800ff70 	.word	0x0800ff70
 8004fec:	080052a9 	.word	0x080052a9
 8004ff0:	200009f8 	.word	0x200009f8

08004ff4 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ff4:	b940      	cbnz	r0, 8005008 <xTimerGenericCommand+0x14>
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	e7fe      	b.n	8005006 <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005008:	b530      	push	{r4, r5, lr}
 800500a:	b085      	sub	sp, #20
 800500c:	4615      	mov	r5, r2
 800500e:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005010:	4a12      	ldr	r2, [pc, #72]	; (800505c <xTimerGenericCommand+0x68>)
 8005012:	6810      	ldr	r0, [r2, #0]
 8005014:	b1f0      	cbz	r0, 8005054 <xTimerGenericCommand+0x60>
 8005016:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005018:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800501a:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800501c:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800501e:	2905      	cmp	r1, #5
 8005020:	dc13      	bgt.n	800504a <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005022:	f7ff fdd9 	bl	8004bd8 <xTaskGetSchedulerState>
 8005026:	2802      	cmp	r0, #2
 8005028:	d107      	bne.n	800503a <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800502a:	2300      	movs	r3, #0
 800502c:	9a08      	ldr	r2, [sp, #32]
 800502e:	4669      	mov	r1, sp
 8005030:	480a      	ldr	r0, [pc, #40]	; (800505c <xTimerGenericCommand+0x68>)
 8005032:	6800      	ldr	r0, [r0, #0]
 8005034:	f7fe ff1a 	bl	8003e6c <xQueueGenericSend>
 8005038:	e00d      	b.n	8005056 <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800503a:	2300      	movs	r3, #0
 800503c:	461a      	mov	r2, r3
 800503e:	4669      	mov	r1, sp
 8005040:	4806      	ldr	r0, [pc, #24]	; (800505c <xTimerGenericCommand+0x68>)
 8005042:	6800      	ldr	r0, [r0, #0]
 8005044:	f7fe ff12 	bl	8003e6c <xQueueGenericSend>
 8005048:	e005      	b.n	8005056 <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800504a:	2300      	movs	r3, #0
 800504c:	4669      	mov	r1, sp
 800504e:	f7fe ffd5 	bl	8003ffc <xQueueGenericSendFromISR>
 8005052:	e000      	b.n	8005056 <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 8005054:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8005056:	b005      	add	sp, #20
 8005058:	bd30      	pop	{r4, r5, pc}
 800505a:	bf00      	nop
 800505c:	200009f0 	.word	0x200009f0

08005060 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005064:	e029      	b.n	80050ba <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800506a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800506c:	1d25      	adds	r5, r4, #4
 800506e:	4628      	mov	r0, r5
 8005070:	f7fe fda0 	bl	8003bb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005076:	4620      	mov	r0, r4
 8005078:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800507a:	69e3      	ldr	r3, [r4, #28]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d11c      	bne.n	80050ba <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005080:	69a3      	ldr	r3, [r4, #24]
 8005082:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8005084:	429e      	cmp	r6, r3
 8005086:	d207      	bcs.n	8005098 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005088:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800508a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800508c:	4629      	mov	r1, r5
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <prvSwitchTimerLists+0x74>)
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	f7fe fd75 	bl	8003b80 <vListInsert>
 8005096:	e010      	b.n	80050ba <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005098:	2100      	movs	r1, #0
 800509a:	9100      	str	r1, [sp, #0]
 800509c:	460b      	mov	r3, r1
 800509e:	4632      	mov	r2, r6
 80050a0:	4620      	mov	r0, r4
 80050a2:	f7ff ffa7 	bl	8004ff4 <xTimerGenericCommand>
				configASSERT( xResult );
 80050a6:	b940      	cbnz	r0, 80050ba <prvSwitchTimerLists+0x5a>
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	e7fe      	b.n	80050b8 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <prvSwitchTimerLists+0x74>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	2a00      	cmp	r2, #0
 80050c2:	d1d0      	bne.n	8005066 <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80050c4:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <prvSwitchTimerLists+0x78>)
 80050c6:	6810      	ldr	r0, [r2, #0]
 80050c8:	4902      	ldr	r1, [pc, #8]	; (80050d4 <prvSwitchTimerLists+0x74>)
 80050ca:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80050cc:	6013      	str	r3, [r2, #0]
}
 80050ce:	b002      	add	sp, #8
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
 80050d2:	bf00      	nop
 80050d4:	200008d0 	.word	0x200008d0
 80050d8:	200009f4 	.word	0x200009f4

080050dc <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050e0:	f7ff fb26 	bl	8004730 <xTaskGetTickCount>
 80050e4:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <prvSampleTimeNow+0x28>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4298      	cmp	r0, r3
 80050ec:	d204      	bcs.n	80050f8 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
 80050ee:	f7ff ffb7 	bl	8005060 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050f2:	2301      	movs	r3, #1
 80050f4:	602b      	str	r3, [r5, #0]
 80050f6:	e001      	b.n	80050fc <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
 80050fc:	4b01      	ldr	r3, [pc, #4]	; (8005104 <prvSampleTimeNow+0x28>)
 80050fe:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
 8005100:	4620      	mov	r0, r4
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	200008fc 	.word	0x200008fc

08005108 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	4605      	mov	r5, r0
 800510e:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005110:	4b13      	ldr	r3, [pc, #76]	; (8005160 <prvProcessExpiredTimer+0x58>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005118:	1d20      	adds	r0, r4, #4
 800511a:	f7fe fd4b 	bl	8003bb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800511e:	69e3      	ldr	r3, [r4, #28]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d118      	bne.n	8005156 <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005124:	69a1      	ldr	r1, [r4, #24]
 8005126:	462b      	mov	r3, r5
 8005128:	4632      	mov	r2, r6
 800512a:	4429      	add	r1, r5
 800512c:	4620      	mov	r0, r4
 800512e:	f7ff fecf 	bl	8004ed0 <prvInsertTimerInActiveList>
 8005132:	b180      	cbz	r0, 8005156 <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005134:	2100      	movs	r1, #0
 8005136:	9100      	str	r1, [sp, #0]
 8005138:	460b      	mov	r3, r1
 800513a:	462a      	mov	r2, r5
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff ff59 	bl	8004ff4 <xTimerGenericCommand>
			configASSERT( xResult );
 8005142:	b940      	cbnz	r0, 8005156 <prvProcessExpiredTimer+0x4e>
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	e7fe      	b.n	8005154 <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005158:	4620      	mov	r0, r4
 800515a:	4798      	blx	r3
}
 800515c:	b002      	add	sp, #8
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	200008d0 	.word	0x200008d0

08005164 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	4606      	mov	r6, r0
 800516a:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800516c:	f7ff fad8 	bl	8004720 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005170:	a801      	add	r0, sp, #4
 8005172:	f7ff ffb3 	bl	80050dc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005176:	9b01      	ldr	r3, [sp, #4]
 8005178:	bb1b      	cbnz	r3, 80051c2 <prvProcessTimerOrBlockTask+0x5e>
 800517a:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800517c:	b944      	cbnz	r4, 8005190 <prvProcessTimerOrBlockTask+0x2c>
 800517e:	42b0      	cmp	r0, r6
 8005180:	d306      	bcc.n	8005190 <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
 8005182:	f7ff fb6d 	bl	8004860 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005186:	4629      	mov	r1, r5
 8005188:	4630      	mov	r0, r6
 800518a:	f7ff ffbd 	bl	8005108 <prvProcessExpiredTimer>
 800518e:	e01a      	b.n	80051c6 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8005190:	b12c      	cbz	r4, 800519e <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <prvProcessTimerOrBlockTask+0x68>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681c      	ldr	r4, [r3, #0]
 8005198:	fab4 f484 	clz	r4, r4
 800519c:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800519e:	4622      	mov	r2, r4
 80051a0:	1b71      	subs	r1, r6, r5
 80051a2:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <prvProcessTimerOrBlockTask+0x6c>)
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	f7ff f85b 	bl	8004260 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80051aa:	f7ff fb59 	bl	8004860 <xTaskResumeAll>
 80051ae:	b950      	cbnz	r0, 80051c6 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80051b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <prvProcessTimerOrBlockTask+0x70>)
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	e001      	b.n	80051c6 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80051c2:	f7ff fb4d 	bl	8004860 <xTaskResumeAll>
		}
	}
}
 80051c6:	b002      	add	sp, #8
 80051c8:	bd70      	pop	{r4, r5, r6, pc}
 80051ca:	bf00      	nop
 80051cc:	200009f4 	.word	0x200009f4
 80051d0:	200009f0 	.word	0x200009f0
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051d8:	b530      	push	{r4, r5, lr}
 80051da:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051dc:	e057      	b.n	800528e <prvProcessReceivedCommands+0xb6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051de:	9b04      	ldr	r3, [sp, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da03      	bge.n	80051ec <prvProcessReceivedCommands+0x14>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051e4:	9907      	ldr	r1, [sp, #28]
 80051e6:	9806      	ldr	r0, [sp, #24]
 80051e8:	9b05      	ldr	r3, [sp, #20]
 80051ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051ec:	9b04      	ldr	r3, [sp, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	db4d      	blt.n	800528e <prvProcessReceivedCommands+0xb6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051f2:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051f4:	6963      	ldr	r3, [r4, #20]
 80051f6:	b113      	cbz	r3, 80051fe <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051f8:	1d20      	adds	r0, r4, #4
 80051fa:	f7fe fcdb 	bl	8003bb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051fe:	a803      	add	r0, sp, #12
 8005200:	f7ff ff6c 	bl	80050dc <prvSampleTimeNow>

			switch( xMessage.xMessageID )
 8005204:	9b04      	ldr	r3, [sp, #16]
 8005206:	2b09      	cmp	r3, #9
 8005208:	d841      	bhi.n	800528e <prvProcessReceivedCommands+0xb6>
 800520a:	e8df f003 	tbb	[pc, r3]
 800520e:	0505      	.short	0x0505
 8005210:	3a274005 	.word	0x3a274005
 8005214:	27400505 	.word	0x27400505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005218:	9905      	ldr	r1, [sp, #20]
 800521a:	69a5      	ldr	r5, [r4, #24]
 800521c:	460b      	mov	r3, r1
 800521e:	4602      	mov	r2, r0
 8005220:	4429      	add	r1, r5
 8005222:	4620      	mov	r0, r4
 8005224:	f7ff fe54 	bl	8004ed0 <prvInsertTimerInActiveList>
 8005228:	b388      	cbz	r0, 800528e <prvProcessReceivedCommands+0xb6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800522a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800522c:	4620      	mov	r0, r4
 800522e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005230:	69e3      	ldr	r3, [r4, #28]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d12b      	bne.n	800528e <prvProcessReceivedCommands+0xb6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005236:	69a2      	ldr	r2, [r4, #24]
 8005238:	2100      	movs	r1, #0
 800523a:	9100      	str	r1, [sp, #0]
 800523c:	460b      	mov	r3, r1
 800523e:	9805      	ldr	r0, [sp, #20]
 8005240:	4402      	add	r2, r0
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff fed6 	bl	8004ff4 <xTimerGenericCommand>
							configASSERT( xResult );
 8005248:	bb08      	cbnz	r0, 800528e <prvProcessReceivedCommands+0xb6>
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	e7fe      	b.n	800525a <prvProcessReceivedCommands+0x82>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800525c:	9905      	ldr	r1, [sp, #20]
 800525e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005260:	b941      	cbnz	r1, 8005274 <prvProcessReceivedCommands+0x9c>
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	e7fe      	b.n	8005272 <prvProcessReceivedCommands+0x9a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005274:	4603      	mov	r3, r0
 8005276:	4602      	mov	r2, r0
 8005278:	4401      	add	r1, r0
 800527a:	4620      	mov	r0, r4
 800527c:	f7ff fe28 	bl	8004ed0 <prvInsertTimerInActiveList>
					break;
 8005280:	e005      	b.n	800528e <prvProcessReceivedCommands+0xb6>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005282:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005286:	b913      	cbnz	r3, 800528e <prvProcessReceivedCommands+0xb6>
						{
							vPortFree( pxTimer );
 8005288:	4620      	mov	r0, r4
 800528a:	f000 f9cd 	bl	8005628 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800528e:	2200      	movs	r2, #0
 8005290:	a904      	add	r1, sp, #16
 8005292:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <prvProcessReceivedCommands+0xcc>)
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	f7fe ff23 	bl	80040e0 <xQueueReceive>
 800529a:	2800      	cmp	r0, #0
 800529c:	d19f      	bne.n	80051de <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800529e:	b009      	add	sp, #36	; 0x24
 80052a0:	bd30      	pop	{r4, r5, pc}
 80052a2:	bf00      	nop
 80052a4:	200009f0 	.word	0x200009f0

080052a8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80052a8:	b500      	push	{lr}
 80052aa:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052ac:	a801      	add	r0, sp, #4
 80052ae:	f7ff fdff 	bl	8004eb0 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052b2:	9901      	ldr	r1, [sp, #4]
 80052b4:	f7ff ff56 	bl	8005164 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052b8:	f7ff ff8e 	bl	80051d8 <prvProcessReceivedCommands>
 80052bc:	e7f6      	b.n	80052ac <prvTimerTask+0x4>
 80052be:	bf00      	nop

080052c0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80052c4:	b97b      	cbnz	r3, 80052e6 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ca:	b97b      	cbnz	r3, 80052ec <osKernelInitialize+0x2c>
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <osKernelInitialize+0x40>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d102      	bne.n	80052da <osKernelInitialize+0x1a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052d4:	f3ef 8211 	mrs	r2, BASEPRI
 80052d8:	b95a      	cbnz	r2, 80052f2 <osKernelInitialize+0x32>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80052da:	b96b      	cbnz	r3, 80052f8 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80052dc:	2201      	movs	r2, #1
 80052de:	4b08      	ldr	r3, [pc, #32]	; (8005300 <osKernelInitialize+0x40>)
 80052e0:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052e2:	2000      	movs	r0, #0
 80052e4:	4770      	bx	lr

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 80052e6:	f06f 0005 	mvn.w	r0, #5
 80052ea:	4770      	bx	lr
 80052ec:	f06f 0005 	mvn.w	r0, #5
 80052f0:	4770      	bx	lr
 80052f2:	f06f 0005 	mvn.w	r0, #5
 80052f6:	4770      	bx	lr
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20001058 	.word	0x20001058

08005304 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005304:	b508      	push	{r3, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005306:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800530a:	b993      	cbnz	r3, 8005332 <osKernelStart+0x2e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530c:	f3ef 8310 	mrs	r3, PRIMASK
 8005310:	b993      	cbnz	r3, 8005338 <osKernelStart+0x34>
 8005312:	4b0e      	ldr	r3, [pc, #56]	; (800534c <osKernelStart+0x48>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d102      	bne.n	8005320 <osKernelStart+0x1c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800531a:	f3ef 8211 	mrs	r2, BASEPRI
 800531e:	b972      	cbnz	r2, 800533e <osKernelStart+0x3a>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005320:	2b01      	cmp	r3, #1
 8005322:	d10f      	bne.n	8005344 <osKernelStart+0x40>
      KernelState = osKernelRunning;
 8005324:	2202      	movs	r2, #2
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <osKernelStart+0x48>)
 8005328:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800532a:	f7ff f9ad 	bl	8004688 <vTaskStartScheduler>
      stat = osOK;
 800532e:	2000      	movs	r0, #0
 8005330:	bd08      	pop	{r3, pc}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 8005332:	f06f 0005 	mvn.w	r0, #5
 8005336:	bd08      	pop	{r3, pc}
 8005338:	f06f 0005 	mvn.w	r0, #5
 800533c:	bd08      	pop	{r3, pc}
 800533e:	f06f 0005 	mvn.w	r0, #5
 8005342:	bd08      	pop	{r3, pc}
    if (KernelState == osKernelReady) {
      KernelState = osKernelRunning;
      vTaskStartScheduler();
      stat = osOK;
    } else {
      stat = osError;
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005348:	bd08      	pop	{r3, pc}
 800534a:	bf00      	nop
 800534c:	20001058 	.word	0x20001058

08005350 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005352:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005354:	2400      	movs	r4, #0
 8005356:	9404      	str	r4, [sp, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005358:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800535c:	2c00      	cmp	r4, #0
 800535e:	d161      	bne.n	8005424 <osThreadNew+0xd4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005360:	f3ef 8310 	mrs	r3, PRIMASK
 8005364:	2b00      	cmp	r3, #0
 8005366:	d15d      	bne.n	8005424 <osThreadNew+0xd4>
 8005368:	4b32      	ldr	r3, [pc, #200]	; (8005434 <osThreadNew+0xe4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d103      	bne.n	8005378 <osThreadNew+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005370:	f3ef 8311 	mrs	r3, BASEPRI
 8005374:	2b00      	cmp	r3, #0
 8005376:	d155      	bne.n	8005424 <osThreadNew+0xd4>
 8005378:	2800      	cmp	r0, #0
 800537a:	d053      	beq.n	8005424 <osThreadNew+0xd4>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800537c:	2300      	movs	r3, #0
 800537e:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005382:	b322      	cbz	r2, 80053ce <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8005384:	6816      	ldr	r6, [r2, #0]
 8005386:	b90e      	cbnz	r6, 800538c <osThreadNew+0x3c>
  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8005388:	f10d 0617 	add.w	r6, sp, #23

    if (attr != NULL) {
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800538c:	6994      	ldr	r4, [r2, #24]
 800538e:	b904      	cbnz	r4, 8005392 <osThreadNew+0x42>

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;
 8005390:	2418      	movs	r4, #24
      }
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005392:	1e63      	subs	r3, r4, #1
 8005394:	2b37      	cmp	r3, #55	; 0x37
 8005396:	d847      	bhi.n	8005428 <osThreadNew+0xd8>
 8005398:	6853      	ldr	r3, [r2, #4]
 800539a:	f013 0f01 	tst.w	r3, #1
 800539e:	d145      	bne.n	800542c <osThreadNew+0xdc>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80053a0:	6953      	ldr	r3, [r2, #20]
 80053a2:	b113      	cbz	r3, 80053aa <osThreadNew+0x5a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053a4:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80053a8:	e001      	b.n	80053ae <osThreadNew+0x5e>
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 80053aa:	f04f 0e80 	mov.w	lr, #128	; 0x80
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053ae:	6895      	ldr	r5, [r2, #8]
 80053b0:	b12d      	cbz	r5, 80053be <osThreadNew+0x6e>
 80053b2:	68d7      	ldr	r7, [r2, #12]
 80053b4:	2f5b      	cmp	r7, #91	; 0x5b
 80053b6:	d902      	bls.n	80053be <osThreadNew+0x6e>
 80053b8:	6917      	ldr	r7, [r2, #16]
 80053ba:	b107      	cbz	r7, 80053be <osThreadNew+0x6e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053bc:	b973      	cbnz	r3, 80053dc <osThreadNew+0x8c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053be:	b97d      	cbnz	r5, 80053e0 <osThreadNew+0x90>
 80053c0:	68d3      	ldr	r3, [r2, #12]
 80053c2:	b983      	cbnz	r3, 80053e6 <osThreadNew+0x96>
 80053c4:	6913      	ldr	r3, [r2, #16]
 80053c6:	b18b      	cbz	r3, 80053ec <osThreadNew+0x9c>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
    mem   = -1;
 80053c8:	f04f 35ff 	mov.w	r5, #4294967295
 80053cc:	e00f      	b.n	80053ee <osThreadNew+0x9e>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80053ce:	2500      	movs	r5, #0

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;
 80053d0:	2418      	movs	r4, #24
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 80053d2:	f04f 0e80 	mov.w	lr, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 80053d6:	f10d 0617 	add.w	r6, sp, #23
 80053da:	e008      	b.n	80053ee <osThreadNew+0x9e>
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
 80053dc:	2501      	movs	r5, #1
 80053de:	e006      	b.n	80053ee <osThreadNew+0x9e>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
    mem   = -1;
 80053e0:	f04f 35ff 	mov.w	r5, #4294967295
 80053e4:	e003      	b.n	80053ee <osThreadNew+0x9e>
 80053e6:	f04f 35ff 	mov.w	r5, #4294967295
 80053ea:	e000      	b.n	80053ee <osThreadNew+0x9e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
          mem = 0;
 80053ec:	2500      	movs	r5, #0
 80053ee:	460b      	mov	r3, r1
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 80053f0:	2d01      	cmp	r5, #1
 80053f2:	d10a      	bne.n	800540a <osThreadNew+0xba>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053f4:	6911      	ldr	r1, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80053f6:	6892      	ldr	r2, [r2, #8]
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053f8:	9202      	str	r2, [sp, #8]
 80053fa:	9101      	str	r1, [sp, #4]
 80053fc:	9400      	str	r4, [sp, #0]
 80053fe:	4672      	mov	r2, lr
 8005400:	4631      	mov	r1, r6
 8005402:	f7ff f8cf 	bl	80045a4 <xTaskCreateStatic>
 8005406:	9004      	str	r0, [sp, #16]
 8005408:	e00c      	b.n	8005424 <osThreadNew+0xd4>
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800540a:	b95d      	cbnz	r5, 8005424 <osThreadNew+0xd4>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800540c:	aa04      	add	r2, sp, #16
 800540e:	9201      	str	r2, [sp, #4]
 8005410:	9400      	str	r4, [sp, #0]
 8005412:	fa1f f28e 	uxth.w	r2, lr
 8005416:	4631      	mov	r1, r6
 8005418:	f7ff f902 	bl	8004620 <xTaskCreate>
 800541c:	2801      	cmp	r0, #1
 800541e:	d001      	beq.n	8005424 <osThreadNew+0xd4>
          hTask = NULL;
 8005420:	2300      	movs	r3, #0
 8005422:	9304      	str	r3, [sp, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005424:	9804      	ldr	r0, [sp, #16]
 8005426:	e002      	b.n	800542e <osThreadNew+0xde>
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
        return (NULL);
 8005428:	2000      	movs	r0, #0
 800542a:	e000      	b.n	800542e <osThreadNew+0xde>
 800542c:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 800542e:	b007      	add	sp, #28
 8005430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005432:	bf00      	nop
 8005434:	20001058 	.word	0x20001058

08005438 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005438:	4b03      	ldr	r3, [pc, #12]	; (8005448 <vApplicationGetIdleTaskMemory+0x10>)
 800543a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <vApplicationGetIdleTaskMemory+0x14>)
 800543e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000bfc 	.word	0x20000bfc
 800544c:	200009fc 	.word	0x200009fc

08005450 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <vApplicationGetTimerTaskMemory+0x10>)
 8005452:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <vApplicationGetTimerTaskMemory+0x14>)
 8005456:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4770      	bx	lr
 8005460:	2000105c 	.word	0x2000105c
 8005464:	20000c58 	.word	0x20000c58

08005468 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005468:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800546a:	f012 0f07 	tst.w	r2, #7
 800546e:	d007      	beq.n	8005480 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005470:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005472:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005476:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800547a:	4413      	add	r3, r2
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800547c:	460a      	mov	r2, r1
 800547e:	e001      	b.n	8005484 <prvHeapInit+0x1c>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005480:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005484:	480c      	ldr	r0, [pc, #48]	; (80054b8 <prvHeapInit+0x50>)
 8005486:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005488:	2100      	movs	r1, #0
 800548a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800548c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800548e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005490:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005494:	4809      	ldr	r0, [pc, #36]	; (80054bc <prvHeapInit+0x54>)
 8005496:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005498:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800549a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800549c:	1a99      	subs	r1, r3, r2
 800549e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054a0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <prvHeapInit+0x58>)
 80054a4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <prvHeapInit+0x5c>)
 80054a8:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <prvHeapInit+0x60>)
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	4770      	bx	lr
 80054b4:	200010c8 	.word	0x200010c8
 80054b8:	200010c0 	.word	0x200010c0
 80054bc:	200010bc 	.word	0x200010bc
 80054c0:	200030cc 	.word	0x200030cc
 80054c4:	200010b8 	.word	0x200010b8
 80054c8:	200030c8 	.word	0x200030c8

080054cc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054cc:	4b13      	ldr	r3, [pc, #76]	; (800551c <prvInsertBlockIntoFreeList+0x50>)
 80054ce:	e000      	b.n	80054d2 <prvInsertBlockIntoFreeList+0x6>
 80054d0:	4613      	mov	r3, r2
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4282      	cmp	r2, r0
 80054d6:	d3fb      	bcc.n	80054d0 <prvInsertBlockIntoFreeList+0x4>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054d8:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054da:	685c      	ldr	r4, [r3, #4]
 80054dc:	1919      	adds	r1, r3, r4
 80054de:	4288      	cmp	r0, r1
 80054e0:	d103      	bne.n	80054ea <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054e2:	6841      	ldr	r1, [r0, #4]
 80054e4:	4421      	add	r1, r4
 80054e6:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054e8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ea:	6844      	ldr	r4, [r0, #4]
 80054ec:	1901      	adds	r1, r0, r4
 80054ee:	428a      	cmp	r2, r1
 80054f0:	d10c      	bne.n	800550c <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054f2:	490b      	ldr	r1, [pc, #44]	; (8005520 <prvInsertBlockIntoFreeList+0x54>)
 80054f4:	6809      	ldr	r1, [r1, #0]
 80054f6:	428a      	cmp	r2, r1
 80054f8:	d006      	beq.n	8005508 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	4422      	add	r2, r4
 80054fe:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	6002      	str	r2, [r0, #0]
 8005506:	e002      	b.n	800550e <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005508:	6001      	str	r1, [r0, #0]
 800550a:	e000      	b.n	800550e <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800550c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800550e:	4298      	cmp	r0, r3
 8005510:	d000      	beq.n	8005514 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005512:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	200010c0 	.word	0x200010c0
 8005520:	200010bc 	.word	0x200010bc

08005524 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8005528:	f7ff f8fa 	bl	8004720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800552c:	4b39      	ldr	r3, [pc, #228]	; (8005614 <pvPortMalloc+0xf0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	b90b      	cbnz	r3, 8005536 <pvPortMalloc+0x12>
		{
			prvHeapInit();
 8005532:	f7ff ff99 	bl	8005468 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005536:	4b38      	ldr	r3, [pc, #224]	; (8005618 <pvPortMalloc+0xf4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	421c      	tst	r4, r3
 800553c:	d153      	bne.n	80055e6 <pvPortMalloc+0xc2>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800553e:	b194      	cbz	r4, 8005566 <pvPortMalloc+0x42>
			{
				xWantedSize += xHeapStructSize;
 8005540:	3408      	adds	r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005542:	f014 0f07 	tst.w	r4, #7
 8005546:	d00e      	beq.n	8005566 <pvPortMalloc+0x42>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005548:	f024 0407 	bic.w	r4, r4, #7
 800554c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800554e:	f004 0307 	and.w	r3, r4, #7
 8005552:	b143      	cbz	r3, 8005566 <pvPortMalloc+0x42>
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	e7fe      	b.n	8005564 <pvPortMalloc+0x40>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005566:	2c00      	cmp	r4, #0
 8005568:	d03f      	beq.n	80055ea <pvPortMalloc+0xc6>
 800556a:	4b2c      	ldr	r3, [pc, #176]	; (800561c <pvPortMalloc+0xf8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429c      	cmp	r4, r3
 8005570:	d83d      	bhi.n	80055ee <pvPortMalloc+0xca>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8005572:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <pvPortMalloc+0xfc>)
 8005574:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005576:	e001      	b.n	800557c <pvPortMalloc+0x58>
				{
					pxPreviousBlock = pxBlock;
 8005578:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800557a:	4615      	mov	r5, r2
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800557c:	686a      	ldr	r2, [r5, #4]
 800557e:	4294      	cmp	r4, r2
 8005580:	d902      	bls.n	8005588 <pvPortMalloc+0x64>
 8005582:	682a      	ldr	r2, [r5, #0]
 8005584:	2a00      	cmp	r2, #0
 8005586:	d1f7      	bne.n	8005578 <pvPortMalloc+0x54>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005588:	4a22      	ldr	r2, [pc, #136]	; (8005614 <pvPortMalloc+0xf0>)
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	4295      	cmp	r5, r2
 800558e:	d030      	beq.n	80055f2 <pvPortMalloc+0xce>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005590:	681e      	ldr	r6, [r3, #0]
 8005592:	3608      	adds	r6, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005594:	682a      	ldr	r2, [r5, #0]
 8005596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005598:	686b      	ldr	r3, [r5, #4]
 800559a:	1b1b      	subs	r3, r3, r4
 800559c:	2b10      	cmp	r3, #16
 800559e:	d910      	bls.n	80055c2 <pvPortMalloc+0x9e>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055a0:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055a2:	f010 0f07 	tst.w	r0, #7
 80055a6:	d008      	beq.n	80055ba <pvPortMalloc+0x96>
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	e7fe      	b.n	80055b8 <pvPortMalloc+0x94>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055ba:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055bc:	606c      	str	r4, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055be:	f7ff ff85 	bl	80054cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055c2:	686a      	ldr	r2, [r5, #4]
 80055c4:	4915      	ldr	r1, [pc, #84]	; (800561c <pvPortMalloc+0xf8>)
 80055c6:	680b      	ldr	r3, [r1, #0]
 80055c8:	1a9b      	subs	r3, r3, r2
 80055ca:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055cc:	4915      	ldr	r1, [pc, #84]	; (8005624 <pvPortMalloc+0x100>)
 80055ce:	6809      	ldr	r1, [r1, #0]
 80055d0:	428b      	cmp	r3, r1
 80055d2:	d201      	bcs.n	80055d8 <pvPortMalloc+0xb4>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055d4:	4913      	ldr	r1, [pc, #76]	; (8005624 <pvPortMalloc+0x100>)
 80055d6:	600b      	str	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <pvPortMalloc+0xf4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	431a      	orrs	r2, r3
 80055de:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	e006      	b.n	80055f4 <pvPortMalloc+0xd0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055e6:	2600      	movs	r6, #0
 80055e8:	e004      	b.n	80055f4 <pvPortMalloc+0xd0>
 80055ea:	2600      	movs	r6, #0
 80055ec:	e002      	b.n	80055f4 <pvPortMalloc+0xd0>
 80055ee:	2600      	movs	r6, #0
 80055f0:	e000      	b.n	80055f4 <pvPortMalloc+0xd0>
 80055f2:	2600      	movs	r6, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055f4:	f7ff f934 	bl	8004860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055f8:	f016 0f07 	tst.w	r6, #7
 80055fc:	d008      	beq.n	8005610 <pvPortMalloc+0xec>
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	e7fe      	b.n	800560e <pvPortMalloc+0xea>
	return pvReturn;
}
 8005610:	4630      	mov	r0, r6
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	200010bc 	.word	0x200010bc
 8005618:	200030c8 	.word	0x200030c8
 800561c:	200010b8 	.word	0x200010b8
 8005620:	200010c0 	.word	0x200010c0
 8005624:	200030cc 	.word	0x200030cc

08005628 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8005628:	b3a0      	cbz	r0, 8005694 <vPortFree+0x6c>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800562a:	b538      	push	{r3, r4, r5, lr}
 800562c:	4603      	mov	r3, r0

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800562e:	f1a0 0508 	sub.w	r5, r0, #8

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005632:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005636:	4918      	ldr	r1, [pc, #96]	; (8005698 <vPortFree+0x70>)
 8005638:	6809      	ldr	r1, [r1, #0]
 800563a:	ea12 0401 	ands.w	r4, r2, r1
 800563e:	d108      	bne.n	8005652 <vPortFree+0x2a>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	e7fe      	b.n	8005650 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005652:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8005656:	b140      	cbz	r0, 800566a <vPortFree+0x42>
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	e7fe      	b.n	8005668 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800566a:	b194      	cbz	r4, 8005692 <vPortFree+0x6a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800566c:	b988      	cbnz	r0, 8005692 <vPortFree+0x6a>
 800566e:	461c      	mov	r4, r3
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005670:	ea22 0201 	bic.w	r2, r2, r1
 8005674:	f843 2c04 	str.w	r2, [r3, #-4]

				vTaskSuspendAll();
 8005678:	f7ff f852 	bl	8004720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800567c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005680:	4a06      	ldr	r2, [pc, #24]	; (800569c <vPortFree+0x74>)
 8005682:	6811      	ldr	r1, [r2, #0]
 8005684:	440b      	add	r3, r1
 8005686:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005688:	4628      	mov	r0, r5
 800568a:	f7ff ff1f 	bl	80054cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800568e:	f7ff f8e7 	bl	8004860 <xTaskResumeAll>
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	200030c8 	.word	0x200030c8
 800569c:	200010b8 	.word	0x200010b8

080056a0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056a0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056a6:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <prvTaskExitError+0x3c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d008      	beq.n	80056c2 <prvTaskExitError+0x22>
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	e7fe      	b.n	80056c0 <prvTaskExitError+0x20>
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0fc      	beq.n	80056d2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056d8:	b002      	add	sp, #8
 80056da:	4770      	bx	lr
 80056dc:	20000070 	.word	0x20000070

080056e0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056e0:	4808      	ldr	r0, [pc, #32]	; (8005704 <prvPortStartFirstTask+0x24>)
 80056e2:	6800      	ldr	r0, [r0, #0]
 80056e4:	6800      	ldr	r0, [r0, #0]
 80056e6:	f380 8808 	msr	MSP, r0
 80056ea:	f04f 0000 	mov.w	r0, #0
 80056ee:	f380 8814 	msr	CONTROL, r0
 80056f2:	b662      	cpsie	i
 80056f4:	b661      	cpsie	f
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	df00      	svc	0
 8005700:	bf00      	nop
 8005702:	0000      	.short	0x0000
 8005704:	e000ed08 	.word	0xe000ed08

08005708 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005708:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005718 <vPortEnableVFP+0x10>
 800570c:	6801      	ldr	r1, [r0, #0]
 800570e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005712:	6001      	str	r1, [r0, #0]
 8005714:	4770      	bx	lr
 8005716:	0000      	.short	0x0000
 8005718:	e000ed88 	.word	0xe000ed88

0800571c <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800571c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005720:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005724:	f021 0101 	bic.w	r1, r1, #1
 8005728:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <pxPortInitialiseStack+0x28>)
 800572e:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005732:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005736:	f06f 0302 	mvn.w	r3, #2
 800573a:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800573e:	3844      	subs	r0, #68	; 0x44
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	080056a1 	.word	0x080056a1
	...

08005750 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <pxCurrentTCBConst2>)
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	f380 8809 	msr	PSP, r0
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	4770      	bx	lr
 800576c:	f3af 8000 	nop.w

08005770 <pxCurrentTCBConst2>:
 8005770:	20000864 	.word	0x20000864

08005774 <vPortEnterCritical>:
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005784:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <vPortEnterCritical+0x3c>)
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10d      	bne.n	80057ac <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005790:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <vPortEnterCritical+0x40>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005798:	d008      	beq.n	80057ac <vPortEnterCritical+0x38>
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	e7fe      	b.n	80057aa <vPortEnterCritical+0x36>
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000070 	.word	0x20000070
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <vPortExitCritical+0x28>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	b943      	cbnz	r3, 80057d0 <vPortExitCritical+0x18>
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	e7fe      	b.n	80057ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80057d0:	3b01      	subs	r3, #1
 80057d2:	4a03      	ldr	r2, [pc, #12]	; (80057e0 <vPortExitCritical+0x28>)
 80057d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057d6:	b90b      	cbnz	r3, 80057dc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000070 	.word	0x20000070
	...

080057f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057f0:	f3ef 8009 	mrs	r0, PSP
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4b15      	ldr	r3, [pc, #84]	; (8005850 <pxCurrentTCBConst>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f01e 0f10 	tst.w	lr, #16
 8005800:	bf08      	it	eq
 8005802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005814:	f380 8811 	msr	BASEPRI, r0
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f7ff f8c2 	bl	80049a8 <vTaskSwitchContext>
 8005824:	f04f 0000 	mov.w	r0, #0
 8005828:	f380 8811 	msr	BASEPRI, r0
 800582c:	bc09      	pop	{r0, r3}
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005836:	f01e 0f10 	tst.w	lr, #16
 800583a:	bf08      	it	eq
 800583c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005840:	f380 8809 	msr	PSP, r0
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst>:
 8005850:	20000864 	.word	0x20000864

08005854 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005854:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005866:	f7fe ff69 	bl	800473c <xTaskIncrementTick>
 800586a:	b118      	cbz	r0, 8005874 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800586c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <SysTick_Handler+0x28>)
 8005872:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005874:	2300      	movs	r3, #0
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	bd08      	pop	{r3, pc}
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <vPortSetupTimerInterrupt+0x24>)
 8005882:	2300      	movs	r3, #0
 8005884:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005886:	4908      	ldr	r1, [pc, #32]	; (80058a8 <vPortSetupTimerInterrupt+0x28>)
 8005888:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <vPortSetupTimerInterrupt+0x2c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4908      	ldr	r1, [pc, #32]	; (80058b0 <vPortSetupTimerInterrupt+0x30>)
 8005890:	fba1 1303 	umull	r1, r3, r1, r3
 8005894:	099b      	lsrs	r3, r3, #6
 8005896:	3b01      	subs	r3, #1
 8005898:	4906      	ldr	r1, [pc, #24]	; (80058b4 <vPortSetupTimerInterrupt+0x34>)
 800589a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800589c:	2307      	movs	r3, #7
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	e000e010 	.word	0xe000e010
 80058a8:	e000e018 	.word	0xe000e018
 80058ac:	2000006c 	.word	0x2000006c
 80058b0:	10624dd3 	.word	0x10624dd3
 80058b4:	e000e014 	.word	0xe000e014

080058b8 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058b8:	4b3a      	ldr	r3, [pc, #232]	; (80059a4 <xPortStartScheduler+0xec>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b3a      	ldr	r3, [pc, #232]	; (80059a8 <xPortStartScheduler+0xf0>)
 80058be:	429a      	cmp	r2, r3
 80058c0:	d108      	bne.n	80058d4 <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	e7fe      	b.n	80058d2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058d4:	4b33      	ldr	r3, [pc, #204]	; (80059a4 <xPortStartScheduler+0xec>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	4b34      	ldr	r3, [pc, #208]	; (80059ac <xPortStartScheduler+0xf4>)
 80058da:	429a      	cmp	r2, r3
 80058dc:	d108      	bne.n	80058f0 <xPortStartScheduler+0x38>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	e7fe      	b.n	80058ee <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058f0:	b510      	push	{r4, lr}
 80058f2:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058f4:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <xPortStartScheduler+0xf8>)
 80058f6:	781a      	ldrb	r2, [r3, #0]
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058fc:	22ff      	movs	r2, #255	; 0xff
 80058fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005908:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800590c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005910:	4a28      	ldr	r2, [pc, #160]	; (80059b4 <xPortStartScheduler+0xfc>)
 8005912:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005914:	2207      	movs	r2, #7
 8005916:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <xPortStartScheduler+0x100>)
 8005918:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800591a:	e009      	b.n	8005930 <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
 800591c:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <xPortStartScheduler+0x100>)
 800591e:	6813      	ldr	r3, [r2, #0]
 8005920:	3b01      	subs	r3, #1
 8005922:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005924:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005930:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005934:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005938:	d1f0      	bne.n	800591c <xPortStartScheduler+0x64>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800593a:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <xPortStartScheduler+0x100>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d008      	beq.n	8005954 <xPortStartScheduler+0x9c>
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	e7fe      	b.n	8005952 <xPortStartScheduler+0x9a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005954:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <xPortStartScheduler+0x100>)
 800595c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800595e:	9b01      	ldr	r3, [sp, #4]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <xPortStartScheduler+0xf8>)
 8005964:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005966:	4b15      	ldr	r3, [pc, #84]	; (80059bc <xPortStartScheduler+0x104>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800596e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005976:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005978:	f7ff ff82 	bl	8005880 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800597c:	2400      	movs	r4, #0
 800597e:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <xPortStartScheduler+0x108>)
 8005980:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005982:	f7ff fec1 	bl	8005708 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005986:	4a0f      	ldr	r2, [pc, #60]	; (80059c4 <xPortStartScheduler+0x10c>)
 8005988:	6813      	ldr	r3, [r2, #0]
 800598a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800598e:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005990:	f7ff fea6 	bl	80056e0 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005994:	f7ff f808 	bl	80049a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005998:	f7ff fe82 	bl	80056a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
 800599c:	4620      	mov	r0, r4
 800599e:	b002      	add	sp, #8
 80059a0:	bd10      	pop	{r4, pc}
 80059a2:	bf00      	nop
 80059a4:	e000ed00 	.word	0xe000ed00
 80059a8:	410fc271 	.word	0x410fc271
 80059ac:	410fc270 	.word	0x410fc270
 80059b0:	e000e400 	.word	0xe000e400
 80059b4:	200030d0 	.word	0x200030d0
 80059b8:	200030d4 	.word	0x200030d4
 80059bc:	e000ed20 	.word	0xe000ed20
 80059c0:	20000070 	.word	0x20000070
 80059c4:	e000ef34 	.word	0xe000ef34

080059c8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059c8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059cc:	2b0f      	cmp	r3, #15
 80059ce:	d90f      	bls.n	80059f0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059d0:	4a10      	ldr	r2, [pc, #64]	; (8005a14 <vPortValidateInterruptPriority+0x4c>)
 80059d2:	5c9b      	ldrb	r3, [r3, r2]
 80059d4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059d6:	4a10      	ldr	r2, [pc, #64]	; (8005a18 <vPortValidateInterruptPriority+0x50>)
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	4293      	cmp	r3, r2
 80059dc:	d208      	bcs.n	80059f0 <vPortValidateInterruptPriority+0x28>
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	e7fe      	b.n	80059ee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <vPortValidateInterruptPriority+0x54>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059f8:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <vPortValidateInterruptPriority+0x58>)
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d908      	bls.n	8005a12 <vPortValidateInterruptPriority+0x4a>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	e7fe      	b.n	8005a10 <vPortValidateInterruptPriority+0x48>
 8005a12:	4770      	bx	lr
 8005a14:	e000e3f0 	.word	0xe000e3f0
 8005a18:	200030d0 	.word	0x200030d0
 8005a1c:	e000ed0c 	.word	0xe000ed0c
 8005a20:	200030d4 	.word	0x200030d4

08005a24 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005a24:	b198      	cbz	r0, 8005a4e <USBD_Init+0x2a>
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a26:	b508      	push	{r3, lr}
 8005a28:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005a2a:	f8d0 028c 	ldr.w	r0, [r0, #652]	; 0x28c
 8005a2e:	b110      	cbz	r0, 8005a36 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8005a30:	2000      	movs	r0, #0
 8005a32:	f8c3 028c 	str.w	r0, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005a36:	b109      	cbz	r1, 8005a3c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8005a38:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
 8005a3c:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8005a44:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005a46:	f7fb f8bd 	bl	8000bc4 <USBD_LL_Init>

  return USBD_OK;
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	bd08      	pop	{r3, pc}
  if(pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a4e:	2002      	movs	r0, #2
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop

08005a54 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8005a54:	b119      	cbz	r1, 8005a5e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a56:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a5e:	2002      	movs	r0, #2
  }

  return status;
}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop

08005a64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005a64:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005a66:	f7fb f909 	bl	8000c7c <USBD_LL_Start>

  return USBD_OK;
}
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	bd08      	pop	{r3, pc}
 8005a6e:	bf00      	nop

08005a70 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a70:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8005a72:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005a76:	b123      	cbz	r3, 8005a82 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4798      	blx	r3
 8005a7c:	b118      	cbz	r0, 8005a86 <USBD_SetClassConfig+0x16>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005a7e:	2002      	movs	r0, #2
 8005a80:	bd08      	pop	{r3, pc}
 8005a82:	2002      	movs	r0, #2
 8005a84:	bd08      	pop	{r3, pc}
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
    {
      ret = USBD_OK;
 8005a86:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8005a88:	bd08      	pop	{r3, pc}
 8005a8a:	bf00      	nop

08005a8c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a8c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005a8e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4798      	blx	r3
  return USBD_OK;
}
 8005a96:	2000      	movs	r0, #0
 8005a98:	bd08      	pop	{r3, pc}
 8005a9a:	bf00      	nop

08005a9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005aa0:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f000 f947 	bl	8005d38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8005ab0:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8005ab4:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8005ab8:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
 8005abc:	f001 031f 	and.w	r3, r1, #31
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d008      	beq.n	8005ad6 <USBD_LL_SetupStage+0x3a>
 8005ac4:	b113      	cbz	r3, 8005acc <USBD_LL_SetupStage+0x30>
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d00a      	beq.n	8005ae0 <USBD_LL_SetupStage+0x44>
 8005aca:	e00e      	b.n	8005aea <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8005acc:	4629      	mov	r1, r5
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 faba 	bl	8006048 <USBD_StdDevReq>
    break;
 8005ad4:	e00e      	b.n	8005af4 <USBD_LL_SetupStage+0x58>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f000 faeb 	bl	80060b4 <USBD_StdItfReq>
    break;
 8005ade:	e009      	b.n	8005af4 <USBD_LL_SetupStage+0x58>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 fb14 	bl	8006110 <USBD_StdEPReq>
    break;
 8005ae8:	e004      	b.n	8005af4 <USBD_LL_SetupStage+0x58>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005aea:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005aee:	4620      	mov	r0, r4
 8005af0:	f7fb f8e0 	bl	8000cb4 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8005af4:	2000      	movs	r0, #0
 8005af6:	bd38      	pop	{r3, r4, r5, pc}

08005af8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8005afc:	bb91      	cbnz	r1, 8005b64 <USBD_LL_DataOutStage+0x6c>
 8005afe:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b00:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d122      	bne.n	8005b4e <USBD_LL_DataOutStage+0x56>
    {
      if(pep->rem_length > pep->maxpacket)
 8005b08:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8005b0c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d90d      	bls.n	8005b30 <USBD_LL_DataOutStage+0x38>
      {
        pep->rem_length -=  pep->maxpacket;
 8005b14:	1ad2      	subs	r2, r2, r3
 8005b16:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c

        USBD_CtlContinueRx (pdev,
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <USBD_LL_DataOutStage+0x2a>
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	e000      	b.n	8005b24 <USBD_LL_DataOutStage+0x2c>
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	4601      	mov	r1, r0
 8005b26:	4620      	mov	r0, r4
 8005b28:	f000 fc3c 	bl	80063a4 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005b30:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	b12b      	cbz	r3, 8005b44 <USBD_LL_DataOutStage+0x4c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b38:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005b3c:	2a03      	cmp	r2, #3
 8005b3e:	d101      	bne.n	8005b44 <USBD_LL_DataOutStage+0x4c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005b40:	4620      	mov	r0, r4
 8005b42:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fc35 	bl	80063b4 <USBD_CtlSendStatus>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d115      	bne.n	8005b7e <USBD_LL_DataOutStage+0x86>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005b52:	2500      	movs	r5, #0
 8005b54:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f7fb f8aa 	bl	8000cb4 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005b60:	4628      	mov	r0, r5
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	460a      	mov	r2, r1
        pdev->ep0_state = USBD_EP0_IDLE;
        USBD_LL_StallEP(pdev, 0U);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005b66:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	b14b      	cbz	r3, 8005b82 <USBD_LL_DataOutStage+0x8a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b6e:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
        pdev->ep0_state = USBD_EP0_IDLE;
        USBD_LL_StallEP(pdev, 0U);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005b72:	2903      	cmp	r1, #3
 8005b74:	d107      	bne.n	8005b86 <USBD_LL_DataOutStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005b76:	4611      	mov	r1, r2
 8005b78:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005b7a:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005b7c:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005b7e:	2000      	movs	r0, #0
 8005b80:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->DataOut(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b82:	2002      	movs	r0, #2
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
 8005b8a:	bf00      	nop

08005b8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d150      	bne.n	8005c36 <USBD_LL_DataInStage+0xaa>
 8005b94:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b96:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d13c      	bne.n	8005c18 <USBD_LL_DataInStage+0x8c>
    {
      if(pep->rem_length > pep->maxpacket)
 8005b9e:	6a22      	ldr	r2, [r4, #32]
 8005ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d90d      	bls.n	8005bc2 <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -= pep->maxpacket;
 8005ba6:	1ad2      	subs	r2, r2, r3
 8005ba8:	6222      	str	r2, [r4, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8005baa:	b292      	uxth	r2, r2
 8005bac:	4601      	mov	r1, r0
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 fbe0 	bl	8006374 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f7fb f89a 	bl	8000cf4 <USBD_LL_PrepareReceive>
 8005bc0:	e031      	b.n	8005c26 <USBD_LL_DataInStage+0x9a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005bc2:	69e1      	ldr	r1, [r4, #28]
 8005bc4:	fbb1 f2f3 	udiv	r2, r1, r3
 8005bc8:	fb03 1212 	mls	r2, r3, r2, r1
 8005bcc:	b992      	cbnz	r2, 8005bf4 <USBD_LL_DataInStage+0x68>
 8005bce:	428b      	cmp	r3, r1
 8005bd0:	d810      	bhi.n	8005bf4 <USBD_LL_DataInStage+0x68>
           (pep->total_length >= pep->maxpacket) &&
           (pep->total_length < pdev->ep0_data_len))
 8005bd2:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
           (pep->total_length >= pep->maxpacket) &&
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	d20c      	bcs.n	8005bf4 <USBD_LL_DataInStage+0x68>
           (pep->total_length < pdev->ep0_data_len))
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 fbc9 	bl	8006374 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005be2:	2100      	movs	r1, #0
 8005be4:	f8c4 1270 	str.w	r1, [r4, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005be8:	460b      	mov	r3, r1
 8005bea:	460a      	mov	r2, r1
 8005bec:	4620      	mov	r0, r4
 8005bee:	f7fb f881 	bl	8000cf4 <USBD_LL_PrepareReceive>
 8005bf2:	e018      	b.n	8005c26 <USBD_LL_DataInStage+0x9a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005bf4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	b12b      	cbz	r3, 8005c08 <USBD_LL_DataInStage+0x7c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bfc:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005c00:	2a03      	cmp	r2, #3
 8005c02:	d101      	bne.n	8005c08 <USBD_LL_DataInStage+0x7c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005c04:	4620      	mov	r0, r4
 8005c06:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005c08:	2180      	movs	r1, #128	; 0x80
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f7fb f852 	bl	8000cb4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 fbdb 	bl	80063cc <USBD_CtlReceiveStatus>
 8005c16:	e006      	b.n	8005c26 <USBD_LL_DataInStage+0x9a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d000      	beq.n	8005c1e <USBD_LL_DataInStage+0x92>
 8005c1c:	b91b      	cbnz	r3, 8005c26 <USBD_LL_DataInStage+0x9a>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005c1e:	2180      	movs	r1, #128	; 0x80
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7fb f847 	bl	8000cb4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005c26:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d110      	bne.n	8005c50 <USBD_LL_DataInStage+0xc4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8005c34:	bd10      	pop	{r4, pc}
 8005c36:	460a      	mov	r2, r1
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8005c38:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	b14b      	cbz	r3, 8005c54 <USBD_LL_DataInStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c40:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8005c44:	2903      	cmp	r1, #3
 8005c46:	d107      	bne.n	8005c58 <USBD_LL_DataInStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005c4c:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005c4e:	bd10      	pop	{r4, pc}
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005c50:	2000      	movs	r0, #0
 8005c52:	bd10      	pop	{r4, pc}
    pdev->pClass->DataIn(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c54:	2002      	movs	r0, #2
 8005c56:	bd10      	pop	{r4, pc}
 8005c58:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 8005c5a:	bd10      	pop	{r4, pc}

08005c5c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c60:	2340      	movs	r3, #64	; 0x40
 8005c62:	2200      	movs	r2, #0
 8005c64:	4611      	mov	r1, r2
 8005c66:	f7fb f811 	bl	8000c8c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c6a:	2501      	movs	r5, #1
 8005c6c:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c70:	2640      	movs	r6, #64	; 0x40
 8005c72:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c76:	4633      	mov	r3, r6
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f7fb f805 	bl	8000c8c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c82:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c84:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c86:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005c90:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c92:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 8005c96:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8005c9a:	b12b      	cbz	r3, 8005ca8 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c9c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005ca8:	2000      	movs	r0, #0
 8005caa:	bd70      	pop	{r4, r5, r6, pc}

08005cac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005cac:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8005cae:	2000      	movs	r0, #0
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005cb4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005cb8:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop

08005cc8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8005cc8:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8005ccc:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	4770      	bx	lr

08005cd4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005cd4:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d104      	bne.n	8005ce8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8005cde:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	b103      	cbz	r3, 8005ce8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005ce6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8005ce8:	2000      	movs	r0, #0
 8005cea:	bd08      	pop	{r3, pc}

08005cec <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005cec:	2000      	movs	r0, #0
 8005cee:	4770      	bx	lr

08005cf0 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	4770      	bx	lr

08005cf4 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	4770      	bx	lr

08005cf8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005cf8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d00:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8005d04:	6852      	ldr	r2, [r2, #4]
 8005d06:	7901      	ldrb	r1, [r0, #4]
 8005d08:	4790      	blx	r2

  return USBD_OK;
}
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	bd08      	pop	{r3, pc}
 8005d0e:	bf00      	nop

08005d10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d10:	4603      	mov	r3, r0
    uint8_t  len = 0U;
 8005d12:	2000      	movs	r0, #0

    while (*buf != '\0')
 8005d14:	e002      	b.n	8005d1c <USBD_GetLen+0xc>
    {
        len++;
 8005d16:	3001      	adds	r0, #1
 8005d18:	b2c0      	uxtb	r0, r0
        buf++;
 8005d1a:	3301      	adds	r3, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	d1f9      	bne.n	8005d16 <USBD_GetLen+0x6>
        len++;
        buf++;
    }

    return len;
}
 8005d22:	4770      	bx	lr

08005d24 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005d24:	b508      	push	{r3, lr}

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d26:	884b      	ldrh	r3, [r1, #2]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d103      	bne.n	8005d34 <USBD_SetFeature+0x10>
  {
    pdev->dev_remote_wakeup = 1U;
 8005d2c:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005d30:	f000 fb40 	bl	80063b4 <USBD_CtlSendStatus>
 8005d34:	bd08      	pop	{r3, pc}
 8005d36:	bf00      	nop

08005d38 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005d38:	780b      	ldrb	r3, [r1, #0]
 8005d3a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005d3c:	784b      	ldrb	r3, [r1, #1]
 8005d3e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005d40:	788b      	ldrb	r3, [r1, #2]
 8005d42:	78ca      	ldrb	r2, [r1, #3]
 8005d44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005d48:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005d4a:	790b      	ldrb	r3, [r1, #4]
 8005d4c:	794a      	ldrb	r2, [r1, #5]
 8005d4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005d52:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005d54:	798b      	ldrb	r3, [r1, #6]
 8005d56:	79ca      	ldrb	r2, [r1, #7]
 8005d58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005d5c:	80c3      	strh	r3, [r0, #6]
 8005d5e:	4770      	bx	lr

08005d60 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005d60:	b510      	push	{r4, lr}
 8005d62:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8005d64:	2180      	movs	r1, #128	; 0x80
 8005d66:	f7fa ffa5 	bl	8000cb4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f7fa ffa1 	bl	8000cb4 <USBD_LL_StallEP>
 8005d72:	bd10      	pop	{r4, pc}

08005d74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005d74:	b530      	push	{r4, r5, lr}
 8005d76:	b083      	sub	sp, #12
 8005d78:	4605      	mov	r5, r0
 8005d7a:	460c      	mov	r4, r1
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005d7c:	884a      	ldrh	r2, [r1, #2]
 8005d7e:	0a13      	lsrs	r3, r2, #8
 8005d80:	3b01      	subs	r3, #1
 8005d82:	2b06      	cmp	r3, #6
 8005d84:	d879      	bhi.n	8005e7a <USBD_GetDescriptor+0x106>
 8005d86:	e8df f003 	tbb	[pc, r3]
 8005d8a:	0c04      	.short	0x0c04
 8005d8c:	5c787820 	.word	0x5c787820
 8005d90:	69          	.byte	0x69
 8005d91:	00          	.byte	0x00
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d92:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f10d 0106 	add.w	r1, sp, #6
 8005d9c:	7c00      	ldrb	r0, [r0, #16]
 8005d9e:	4798      	blx	r3
    break;
 8005da0:	e06f      	b.n	8005e82 <USBD_GetDescriptor+0x10e>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005da2:	7c03      	ldrb	r3, [r0, #16]
 8005da4:	b943      	cbnz	r3, 8005db8 <USBD_GetDescriptor+0x44>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005da6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	f10d 0006 	add.w	r0, sp, #6
 8005db0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005db2:	2302      	movs	r3, #2
 8005db4:	7043      	strb	r3, [r0, #1]
 8005db6:	e064      	b.n	8005e82 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005db8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbe:	f10d 0006 	add.w	r0, sp, #6
 8005dc2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	7043      	strb	r3, [r0, #1]
 8005dc8:	e05b      	b.n	8005e82 <USBD_GetDescriptor+0x10e>
    }
    break;

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	2a05      	cmp	r2, #5
 8005dce:	d834      	bhi.n	8005e3a <USBD_GetDescriptor+0xc6>
 8005dd0:	e8df f002 	tbb	[pc, r2]
 8005dd4:	1b130b03 	.word	0x1b130b03
 8005dd8:	2b23      	.short	0x2b23
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005dda:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f10d 0106 	add.w	r1, sp, #6
 8005de4:	7c00      	ldrb	r0, [r0, #16]
 8005de6:	4798      	blx	r3
      break;
 8005de8:	e04b      	b.n	8005e82 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005dea:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f10d 0106 	add.w	r1, sp, #6
 8005df4:	7c00      	ldrb	r0, [r0, #16]
 8005df6:	4798      	blx	r3
      break;
 8005df8:	e043      	b.n	8005e82 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005dfa:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f10d 0106 	add.w	r1, sp, #6
 8005e04:	7c00      	ldrb	r0, [r0, #16]
 8005e06:	4798      	blx	r3
      break;
 8005e08:	e03b      	b.n	8005e82 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e0a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f10d 0106 	add.w	r1, sp, #6
 8005e14:	7c00      	ldrb	r0, [r0, #16]
 8005e16:	4798      	blx	r3
      break;
 8005e18:	e033      	b.n	8005e82 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e1a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	f10d 0106 	add.w	r1, sp, #6
 8005e24:	7c00      	ldrb	r0, [r0, #16]
 8005e26:	4798      	blx	r3
      break;
 8005e28:	e02b      	b.n	8005e82 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e2a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	f10d 0106 	add.w	r1, sp, #6
 8005e34:	7c00      	ldrb	r0, [r0, #16]
 8005e36:	4798      	blx	r3
      break;
 8005e38:	e023      	b.n	8005e82 <USBD_GetDescriptor+0x10e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	f7ff ff90 	bl	8005d60 <USBD_CtlError>
      return;
 8005e40:	e032      	b.n	8005ea8 <USBD_GetDescriptor+0x134>
#endif
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005e42:	7c03      	ldrb	r3, [r0, #16]
 8005e44:	b933      	cbnz	r3, 8005e54 <USBD_GetDescriptor+0xe0>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e46:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	f10d 0006 	add.w	r0, sp, #6
 8005e50:	4798      	blx	r3
      break;
 8005e52:	e016      	b.n	8005e82 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005e54:	4621      	mov	r1, r4
 8005e56:	f7ff ff83 	bl	8005d60 <USBD_CtlError>
      return;
 8005e5a:	e025      	b.n	8005ea8 <USBD_GetDescriptor+0x134>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005e5c:	7c03      	ldrb	r3, [r0, #16]
 8005e5e:	b943      	cbnz	r3, 8005e72 <USBD_GetDescriptor+0xfe>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e60:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	f10d 0006 	add.w	r0, sp, #6
 8005e6a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e6c:	2307      	movs	r3, #7
 8005e6e:	7043      	strb	r3, [r0, #1]
      break;
 8005e70:	e007      	b.n	8005e82 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005e72:	4621      	mov	r1, r4
 8005e74:	f7ff ff74 	bl	8005d60 <USBD_CtlError>
      return;
 8005e78:	e016      	b.n	8005ea8 <USBD_GetDescriptor+0x134>
    }

  default:
     USBD_CtlError(pdev , req);
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	f7ff ff70 	bl	8005d60 <USBD_CtlError>
    return;
 8005e80:	e012      	b.n	8005ea8 <USBD_GetDescriptor+0x134>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005e82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005e86:	b153      	cbz	r3, 8005e9e <USBD_GetDescriptor+0x12a>
 8005e88:	88e2      	ldrh	r2, [r4, #6]
 8005e8a:	b142      	cbz	r2, 8005e9e <USBD_GetDescriptor+0x12a>
  {

    len = MIN(len, req->wLength);
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	bf28      	it	cs
 8005e90:	461a      	movcs	r2, r3
 8005e92:	f8ad 2006 	strh.w	r2, [sp, #6]

    USBD_CtlSendData (pdev, pbuf, len);
 8005e96:	4601      	mov	r1, r0
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f000 fa5d 	bl	8006358 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005e9e:	88e3      	ldrh	r3, [r4, #6]
 8005ea0:	b913      	cbnz	r3, 8005ea8 <USBD_GetDescriptor+0x134>
  {
   USBD_CtlSendStatus(pdev);
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 fa86 	bl	80063b4 <USBD_CtlSendStatus>
  }
}
 8005ea8:	b003      	add	sp, #12
 8005eaa:	bd30      	pop	{r4, r5, pc}

08005eac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4604      	mov	r4, r0
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005eb0:	888b      	ldrh	r3, [r1, #4]
 8005eb2:	b9f3      	cbnz	r3, 8005ef2 <USBD_SetAddress+0x46>
 8005eb4:	88cb      	ldrh	r3, [r1, #6]
 8005eb6:	b9e3      	cbnz	r3, 8005ef2 <USBD_SetAddress+0x46>
 8005eb8:	884b      	ldrh	r3, [r1, #2]
 8005eba:	2b7f      	cmp	r3, #127	; 0x7f
 8005ebc:	d819      	bhi.n	8005ef2 <USBD_SetAddress+0x46>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ebe:	f003 057f 	and.w	r5, r3, #127	; 0x7f

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d102      	bne.n	8005ed0 <USBD_SetAddress+0x24>
    {
      USBD_CtlError(pdev , req);
 8005eca:	f7ff ff49 	bl	8005d60 <USBD_CtlError>
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ed0:	f880 5276 	strb.w	r5, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	f7fa fefd 	bl	8000cd4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 fa6a 	bl	80063b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ee0:	b11d      	cbz	r5, 8005eea <USBD_SetAddress+0x3e>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f7ff ff34 	bl	8005d60 <USBD_CtlError>
 8005ef8:	bd38      	pop	{r3, r4, r5, pc}
 8005efa:	bf00      	nop

08005efc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4604      	mov	r4, r0
 8005f00:	460d      	mov	r5, r1
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f02:	7889      	ldrb	r1, [r1, #2]
 8005f04:	4b28      	ldr	r3, [pc, #160]	; (8005fa8 <USBD_SetConfig+0xac>)
 8005f06:	7019      	strb	r1, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f08:	2901      	cmp	r1, #1
 8005f0a:	d903      	bls.n	8005f14 <USBD_SetConfig+0x18>
  {
    USBD_CtlError(pdev, req);
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	f7ff ff27 	bl	8005d60 <USBD_CtlError>
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (pdev->dev_state)
 8005f14:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d002      	beq.n	8005f22 <USBD_SetConfig+0x26>
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d015      	beq.n	8005f4c <USBD_SetConfig+0x50>
 8005f20:	e039      	b.n	8005f96 <USBD_SetConfig+0x9a>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005f22:	b181      	cbz	r1, 8005f46 <USBD_SetConfig+0x4a>
      {
        pdev->dev_config = cfgidx;
 8005f24:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f26:	2303      	movs	r3, #3
 8005f28:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f2c:	f7ff fda0 	bl	8005a70 <USBD_SetClassConfig>
 8005f30:	2802      	cmp	r0, #2
 8005f32:	d104      	bne.n	8005f3e <USBD_SetConfig+0x42>
        {
          USBD_CtlError(pdev, req);
 8005f34:	4629      	mov	r1, r5
 8005f36:	4620      	mov	r0, r4
 8005f38:	f7ff ff12 	bl	8005d60 <USBD_CtlError>
          return;
 8005f3c:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 fa38 	bl	80063b4 <USBD_CtlSendStatus>
 8005f44:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8005f46:	f000 fa35 	bl	80063b4 <USBD_CtlSendStatus>
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f4c:	b949      	cbnz	r1, 8005f62 <USBD_SetConfig+0x66>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005f54:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8005f56:	f7ff fd99 	bl	8005a8c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fa2a 	bl	80063b4 <USBD_CtlSendStatus>
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
      }
      else if (cfgidx != pdev->dev_config)
 8005f62:	6843      	ldr	r3, [r0, #4]
 8005f64:	4299      	cmp	r1, r3
 8005f66:	d013      	beq.n	8005f90 <USBD_SetConfig+0x94>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f68:	b2d9      	uxtb	r1, r3
 8005f6a:	f7ff fd8f 	bl	8005a8c <USBD_ClrClassConfig>

        /* set new configuration */
        pdev->dev_config = cfgidx;
 8005f6e:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <USBD_SetConfig+0xac>)
 8005f70:	7819      	ldrb	r1, [r3, #0]
 8005f72:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f74:	4620      	mov	r0, r4
 8005f76:	f7ff fd7b 	bl	8005a70 <USBD_SetClassConfig>
 8005f7a:	2802      	cmp	r0, #2
 8005f7c:	d104      	bne.n	8005f88 <USBD_SetConfig+0x8c>
        {
          USBD_CtlError(pdev, req);
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7ff feed 	bl	8005d60 <USBD_CtlError>
          return;
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fa13 	bl	80063b4 <USBD_CtlSendStatus>
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8005f90:	f000 fa10 	bl	80063b4 <USBD_CtlSendStatus>
 8005f94:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8005f96:	4629      	mov	r1, r5
 8005f98:	f7ff fee2 	bl	8005d60 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005f9c:	4b02      	ldr	r3, [pc, #8]	; (8005fa8 <USBD_SetConfig+0xac>)
 8005f9e:	7819      	ldrb	r1, [r3, #0]
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f7ff fd73 	bl	8005a8c <USBD_ClrClassConfig>
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	200030d8 	.word	0x200030d8

08005fac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fac:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8005fae:	88cb      	ldrh	r3, [r1, #6]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d002      	beq.n	8005fba <USBD_GetConfig+0xe>
  {
    USBD_CtlError(pdev , req);
 8005fb4:	f7ff fed4 	bl	8005d60 <USBD_CtlError>
 8005fb8:	bd08      	pop	{r3, pc}
  }
  else
  {
    switch (pdev->dev_state)
 8005fba:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005fbe:	b18b      	cbz	r3, 8005fe4 <USBD_GetConfig+0x38>
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d902      	bls.n	8005fca <USBD_GetConfig+0x1e>
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d008      	beq.n	8005fda <USBD_GetConfig+0x2e>
 8005fc8:	e00c      	b.n	8005fe4 <USBD_GetConfig+0x38>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
      pdev->dev_default_config = 0U;
 8005fca:	4601      	mov	r1, r0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f000 f9c0 	bl	8006358 <USBD_CtlSendData>
      break;
 8005fd8:	bd08      	pop	{r3, pc}

    case USBD_STATE_CONFIGURED:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005fda:	2201      	movs	r2, #1
 8005fdc:	1d01      	adds	r1, r0, #4
 8005fde:	f000 f9bb 	bl	8006358 <USBD_CtlSendData>
      break;
 8005fe2:	bd08      	pop	{r3, pc}

    default:
      USBD_CtlError(pdev , req);
 8005fe4:	f7ff febc 	bl	8005d60 <USBD_CtlError>
 8005fe8:	bd08      	pop	{r3, pc}
 8005fea:	bf00      	nop

08005fec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fec:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005fee:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d812      	bhi.n	800601e <USBD_GetStatus+0x32>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8005ff8:	88cb      	ldrh	r3, [r1, #6]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d002      	beq.n	8006004 <USBD_GetStatus+0x18>
    {
      USBD_CtlError(pdev, req);
 8005ffe:	f7ff feaf 	bl	8005d60 <USBD_CtlError>
      break;
 8006002:	bd08      	pop	{r3, pc}
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006004:	2301      	movs	r3, #1
 8006006:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006008:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 800600c:	b10b      	cbz	r3, 8006012 <USBD_GetStatus+0x26>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800600e:	2303      	movs	r3, #3
 8006010:	60c3      	str	r3, [r0, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006012:	2202      	movs	r2, #2
 8006014:	f100 010c 	add.w	r1, r0, #12
 8006018:	f000 f99e 	bl	8006358 <USBD_CtlSendData>
    break;
 800601c:	bd08      	pop	{r3, pc}

  default :
    USBD_CtlError(pdev , req);
 800601e:	f7ff fe9f 	bl	8005d60 <USBD_CtlError>
 8006022:	bd08      	pop	{r3, pc}

08006024 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006024:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006026:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800602a:	3b01      	subs	r3, #1
 800602c:	2b02      	cmp	r3, #2
 800602e:	d808      	bhi.n	8006042 <USBD_ClrFeature+0x1e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006030:	884b      	ldrh	r3, [r1, #2]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <USBD_ClrFeature+0x22>
    {
      pdev->dev_remote_wakeup = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800603c:	f000 f9ba 	bl	80063b4 <USBD_CtlSendStatus>
 8006040:	bd08      	pop	{r3, pc}
    }
    break;

  default :
     USBD_CtlError(pdev , req);
 8006042:	f7ff fe8d 	bl	8005d60 <USBD_CtlError>
 8006046:	bd08      	pop	{r3, pc}

08006048 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006048:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800604a:	780b      	ldrb	r3, [r1, #0]
 800604c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006050:	2b20      	cmp	r3, #32
 8006052:	d003      	beq.n	800605c <USBD_StdDevReq+0x14>
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d001      	beq.n	800605c <USBD_StdDevReq+0x14>
 8006058:	bb3b      	cbnz	r3, 80060aa <USBD_StdDevReq+0x62>
 800605a:	e004      	b.n	8006066 <USBD_StdDevReq+0x1e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800605c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	4798      	blx	r3
    break;
 8006064:	e023      	b.n	80060ae <USBD_StdDevReq+0x66>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006066:	784b      	ldrb	r3, [r1, #1]
 8006068:	2b09      	cmp	r3, #9
 800606a:	d81b      	bhi.n	80060a4 <USBD_StdDevReq+0x5c>
 800606c:	e8df f003 	tbb	[pc, r3]
 8006070:	141a1711 	.word	0x141a1711
 8006074:	1a05081a 	.word	0x1a05081a
 8006078:	0b0e      	.short	0x0b0e
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800607a:	f7ff fe7b 	bl	8005d74 <USBD_GetDescriptor>
      break;
 800607e:	e016      	b.n	80060ae <USBD_StdDevReq+0x66>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006080:	f7ff ff14 	bl	8005eac <USBD_SetAddress>
      break;
 8006084:	e013      	b.n	80060ae <USBD_StdDevReq+0x66>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006086:	f7ff ff39 	bl	8005efc <USBD_SetConfig>
      break;
 800608a:	e010      	b.n	80060ae <USBD_StdDevReq+0x66>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800608c:	f7ff ff8e 	bl	8005fac <USBD_GetConfig>
      break;
 8006090:	e00d      	b.n	80060ae <USBD_StdDevReq+0x66>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006092:	f7ff ffab 	bl	8005fec <USBD_GetStatus>
      break;
 8006096:	e00a      	b.n	80060ae <USBD_StdDevReq+0x66>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006098:	f7ff fe44 	bl	8005d24 <USBD_SetFeature>
      break;
 800609c:	e007      	b.n	80060ae <USBD_StdDevReq+0x66>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800609e:	f7ff ffc1 	bl	8006024 <USBD_ClrFeature>
      break;
 80060a2:	e004      	b.n	80060ae <USBD_StdDevReq+0x66>

    default:
      USBD_CtlError(pdev, req);
 80060a4:	f7ff fe5c 	bl	8005d60 <USBD_CtlError>
      break;
 80060a8:	e001      	b.n	80060ae <USBD_StdDevReq+0x66>
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 80060aa:	f7ff fe59 	bl	8005d60 <USBD_CtlError>
    break;
  }

  return ret;
}
 80060ae:	2000      	movs	r0, #0
 80060b0:	bd08      	pop	{r3, pc}
 80060b2:	bf00      	nop

080060b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4605      	mov	r5, r0
 80060b8:	460c      	mov	r4, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060ba:	780b      	ldrb	r3, [r1, #0]
 80060bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d002      	beq.n	80060ca <USBD_StdItfReq+0x16>
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d000      	beq.n	80060ca <USBD_StdItfReq+0x16>
 80060c8:	b9f3      	cbnz	r3, 8006108 <USBD_StdItfReq+0x54>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80060ca:	f895 3274 	ldrb.w	r3, [r5, #628]	; 0x274
 80060ce:	3b01      	subs	r3, #1
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d814      	bhi.n	80060fe <USBD_StdItfReq+0x4a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060d4:	7923      	ldrb	r3, [r4, #4]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d80c      	bhi.n	80060f4 <USBD_StdItfReq+0x40>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80060da:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4621      	mov	r1, r4
 80060e2:	4628      	mov	r0, r5
 80060e4:	4798      	blx	r3

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80060e6:	88e3      	ldrh	r3, [r4, #6]
 80060e8:	b983      	cbnz	r3, 800610c <USBD_StdItfReq+0x58>
 80060ea:	b978      	cbnz	r0, 800610c <USBD_StdItfReq+0x58>
        {
          USBD_CtlSendStatus(pdev);
 80060ec:	4628      	mov	r0, r5
 80060ee:	f000 f961 	bl	80063b4 <USBD_CtlSendStatus>
 80060f2:	e00b      	b.n	800610c <USBD_StdItfReq+0x58>
        }
      }
      else
      {
        USBD_CtlError(pdev, req);
 80060f4:	4621      	mov	r1, r4
 80060f6:	4628      	mov	r0, r5
 80060f8:	f7ff fe32 	bl	8005d60 <USBD_CtlError>
 80060fc:	e006      	b.n	800610c <USBD_StdItfReq+0x58>
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 80060fe:	4621      	mov	r1, r4
 8006100:	4628      	mov	r0, r5
 8006102:	f7ff fe2d 	bl	8005d60 <USBD_CtlError>
      break;
 8006106:	e001      	b.n	800610c <USBD_StdItfReq+0x58>
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8006108:	f7ff fe2a 	bl	8005d60 <USBD_CtlError>
    break;
  }

  return USBD_OK;
}
 800610c:	2000      	movs	r0, #0
 800610e:	bd38      	pop	{r3, r4, r5, pc}

08006110 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4604      	mov	r4, r0

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006114:	888a      	ldrh	r2, [r1, #4]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006116:	780b      	ldrb	r3, [r1, #0]
 8006118:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800611c:	2b20      	cmp	r3, #32
 800611e:	d006      	beq.n	800612e <USBD_StdEPReq+0x1e>
 8006120:	b2d0      	uxtb	r0, r2
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d003      	beq.n	800612e <USBD_StdEPReq+0x1e>
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 80f3 	bne.w	8006312 <USBD_StdEPReq+0x202>
 800612c:	e006      	b.n	800613c <USBD_StdEPReq+0x2c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800612e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	4620      	mov	r0, r4
 8006136:	4798      	blx	r3
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006138:	2000      	movs	r0, #0
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
    break;
 800613a:	bd38      	pop	{r3, r4, r5, pc}

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800613c:	2b20      	cmp	r3, #32
 800613e:	d105      	bne.n	800614c <USBD_StdEPReq+0x3c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006140:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	4620      	mov	r0, r4
 8006148:	4798      	blx	r3

      return ret;
 800614a:	bd38      	pop	{r3, r4, r5, pc}
    }

    switch (req->bRequest)
 800614c:	784b      	ldrb	r3, [r1, #1]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d032      	beq.n	80061b8 <USBD_StdEPReq+0xa8>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d05e      	beq.n	8006214 <USBD_StdEPReq+0x104>
 8006156:	2b03      	cmp	r3, #3
 8006158:	f040 80d6 	bne.w	8006308 <USBD_StdEPReq+0x1f8>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800615c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8006160:	2b02      	cmp	r3, #2
 8006162:	d002      	beq.n	800616a <USBD_StdEPReq+0x5a>
 8006164:	2b03      	cmp	r3, #3
 8006166:	d012      	beq.n	800618e <USBD_StdEPReq+0x7e>
 8006168:	e021      	b.n	80061ae <USBD_StdEPReq+0x9e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800616a:	b158      	cbz	r0, 8006184 <USBD_StdEPReq+0x74>
 800616c:	2880      	cmp	r0, #128	; 0x80
 800616e:	d009      	beq.n	8006184 <USBD_StdEPReq+0x74>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006170:	4601      	mov	r1, r0
 8006172:	4620      	mov	r0, r4
 8006174:	f7fa fd9e 	bl	8000cb4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006178:	2180      	movs	r1, #128	; 0x80
 800617a:	4620      	mov	r0, r4
 800617c:	f7fa fd9a 	bl	8000cb4 <USBD_LL_StallEP>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006180:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
 8006182:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
          USBD_CtlError(pdev, req);
 8006184:	4620      	mov	r0, r4
 8006186:	f7ff fdeb 	bl	8005d60 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 800618a:	2000      	movs	r0, #0
 800618c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800618e:	884b      	ldrh	r3, [r1, #2]
 8006190:	b943      	cbnz	r3, 80061a4 <USBD_StdEPReq+0x94>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006192:	b138      	cbz	r0, 80061a4 <USBD_StdEPReq+0x94>
 8006194:	2880      	cmp	r0, #128	; 0x80
 8006196:	d005      	beq.n	80061a4 <USBD_StdEPReq+0x94>
 8006198:	88cb      	ldrh	r3, [r1, #6]
 800619a:	b91b      	cbnz	r3, 80061a4 <USBD_StdEPReq+0x94>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800619c:	4601      	mov	r1, r0
 800619e:	4620      	mov	r0, r4
 80061a0:	f7fa fd88 	bl	8000cb4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 f905 	bl	80063b4 <USBD_CtlSendStatus>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 80061aa:	2000      	movs	r0, #0
            USBD_LL_StallEP(pdev, ep_addr);
          }
        }
        USBD_CtlSendStatus(pdev);

        break;
 80061ac:	bd38      	pop	{r3, r4, r5, pc}

      default:
        USBD_CtlError(pdev, req);
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff fdd6 	bl	8005d60 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 80061b4:	2000      	movs	r0, #0

        break;

      default:
        USBD_CtlError(pdev, req);
        break;
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80061b8:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d002      	beq.n	80061c6 <USBD_StdEPReq+0xb6>
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d012      	beq.n	80061ea <USBD_StdEPReq+0xda>
 80061c4:	e021      	b.n	800620a <USBD_StdEPReq+0xfa>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061c6:	b158      	cbz	r0, 80061e0 <USBD_StdEPReq+0xd0>
 80061c8:	2880      	cmp	r0, #128	; 0x80
 80061ca:	d009      	beq.n	80061e0 <USBD_StdEPReq+0xd0>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80061cc:	4601      	mov	r1, r0
 80061ce:	4620      	mov	r0, r4
 80061d0:	f7fa fd70 	bl	8000cb4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80061d4:	2180      	movs	r1, #128	; 0x80
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7fa fd6c 	bl	8000cb4 <USBD_LL_StallEP>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 80061dc:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
 80061de:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
          USBD_CtlError(pdev, req);
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7ff fdbd 	bl	8005d60 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 80061e6:	2000      	movs	r0, #0
 80061e8:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80061ea:	884b      	ldrh	r3, [r1, #2]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 8095 	bne.w	800631c <USBD_StdEPReq+0x20c>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80061f2:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80061f6:	d003      	beq.n	8006200 <USBD_StdEPReq+0xf0>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80061f8:	4601      	mov	r1, r0
 80061fa:	4620      	mov	r0, r4
 80061fc:	f7fa fd62 	bl	8000cc4 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006200:	4620      	mov	r0, r4
 8006202:	f000 f8d7 	bl	80063b4 <USBD_CtlSendStatus>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006206:	2000      	movs	r0, #0
 8006208:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlSendStatus(pdev);
        }
        break;

      default:
        USBD_CtlError(pdev, req);
 800620a:	4620      	mov	r0, r4
 800620c:	f7ff fda8 	bl	8005d60 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006210:	2000      	movs	r0, #0
        }
        break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8006212:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006214:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8006218:	2b02      	cmp	r3, #2
 800621a:	d002      	beq.n	8006222 <USBD_StdEPReq+0x112>
 800621c:	2b03      	cmp	r3, #3
 800621e:	d025      	beq.n	800626c <USBD_StdEPReq+0x15c>
 8006220:	e06d      	b.n	80062fe <USBD_StdEPReq+0x1ee>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006222:	b130      	cbz	r0, 8006232 <USBD_StdEPReq+0x122>
 8006224:	2880      	cmp	r0, #128	; 0x80
 8006226:	d004      	beq.n	8006232 <USBD_StdEPReq+0x122>
        {
          USBD_CtlError(pdev, req);
 8006228:	4620      	mov	r0, r4
 800622a:	f7ff fd99 	bl	8005d60 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 800622e:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_CtlError(pdev, req);
          break;
 8006230:	bd38      	pop	{r3, r4, r5, pc}
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006232:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006236:	d009      	beq.n	800624c <USBD_StdEPReq+0x13c>
 8006238:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800623c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006240:	0083      	lsls	r3, r0, #2
 8006242:	f103 0110 	add.w	r1, r3, #16
 8006246:	4421      	add	r1, r4
 8006248:	3104      	adds	r1, #4
 800624a:	e007      	b.n	800625c <USBD_StdEPReq+0x14c>
          &pdev->ep_out[ep_addr & 0x7FU];
 800624c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_CtlError(pdev, req);
          break;
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006250:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006254:	0083      	lsls	r3, r0, #2
 8006256:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800625a:	18e1      	adds	r1, r4, r3
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;
 800625c:	2500      	movs	r5, #0
 800625e:	600d      	str	r5, [r1, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006260:	2202      	movs	r2, #2
 8006262:	4620      	mov	r0, r4
 8006264:	f000 f878 	bl	8006358 <USBD_CtlSendData>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006268:	4628      	mov	r0, r5
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;
 800626a:	bd38      	pop	{r3, r4, r5, pc}

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800626c:	b252      	sxtb	r2, r2
 800626e:	2a00      	cmp	r2, #0
 8006270:	da0c      	bge.n	800628c <USBD_StdEPReq+0x17c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006272:	f000 030f 	and.w	r3, r0, #15
 8006276:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800627a:	009d      	lsls	r5, r3, #2
 800627c:	4425      	add	r5, r4
 800627e:	69ab      	ldr	r3, [r5, #24]
 8006280:	b993      	cbnz	r3, 80062a8 <USBD_StdEPReq+0x198>
          {
            USBD_CtlError(pdev, req);
 8006282:	4620      	mov	r0, r4
 8006284:	f7ff fd6c 	bl	8005d60 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006288:	2000      	movs	r0, #0
        if((ep_addr & 0x80U) == 0x80U)
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
          {
            USBD_CtlError(pdev, req);
            break;
 800628a:	bd38      	pop	{r3, r4, r5, pc}
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800628c:	f000 030f 	and.w	r3, r0, #15
 8006290:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006294:	009d      	lsls	r5, r3, #2
 8006296:	4425      	add	r5, r4
 8006298:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 800629c:	b923      	cbnz	r3, 80062a8 <USBD_StdEPReq+0x198>
          {
            USBD_CtlError(pdev, req);
 800629e:	4620      	mov	r0, r4
 80062a0:	f7ff fd5e 	bl	8005d60 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 80062a4:	2000      	movs	r0, #0
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
          {
            USBD_CtlError(pdev, req);
            break;
 80062a6:	bd38      	pop	{r3, r4, r5, pc}
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	da09      	bge.n	80062c0 <USBD_StdEPReq+0x1b0>
 80062ac:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80062b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80062b4:	0093      	lsls	r3, r2, #2
 80062b6:	f103 0510 	add.w	r5, r3, #16
 80062ba:	4425      	add	r5, r4
 80062bc:	3504      	adds	r5, #4
 80062be:	e007      	b.n	80062d0 <USBD_StdEPReq+0x1c0>
          &pdev->ep_out[ep_addr & 0x7FU];
 80062c0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80062c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80062c8:	0093      	lsls	r3, r2, #2
 80062ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80062ce:	18e5      	adds	r5, r4, r3
          &pdev->ep_out[ep_addr & 0x7FU];

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062d0:	b108      	cbz	r0, 80062d6 <USBD_StdEPReq+0x1c6>
 80062d2:	2880      	cmp	r0, #128	; 0x80
 80062d4:	d102      	bne.n	80062dc <USBD_StdEPReq+0x1cc>
          {
            pep->status = 0x0000U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	e009      	b.n	80062f0 <USBD_StdEPReq+0x1e0>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80062dc:	4601      	mov	r1, r0
 80062de:	4620      	mov	r0, r4
 80062e0:	f7fa fca4 	bl	8000c2c <USBD_LL_IsStallEP>
 80062e4:	b110      	cbz	r0, 80062ec <USBD_StdEPReq+0x1dc>
          {
            pep->status = 0x0001U;
 80062e6:	2301      	movs	r3, #1
 80062e8:	602b      	str	r3, [r5, #0]
 80062ea:	e001      	b.n	80062f0 <USBD_StdEPReq+0x1e0>
          }
          else
          {
            pep->status = 0x0000U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	602b      	str	r3, [r5, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80062f0:	2202      	movs	r2, #2
 80062f2:	4629      	mov	r1, r5
 80062f4:	4620      	mov	r0, r4
 80062f6:	f000 f82f 	bl	8006358 <USBD_CtlSendData>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 80062fa:	2000      	movs	r0, #0
          {
            pep->status = 0x0000U;
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;
 80062fc:	bd38      	pop	{r3, r4, r5, pc}

      default:
        USBD_CtlError(pdev, req);
 80062fe:	4620      	mov	r0, r4
 8006300:	f7ff fd2e 	bl	8005d60 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006304:	2000      	movs	r0, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8006306:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8006308:	4620      	mov	r0, r4
 800630a:	f7ff fd29 	bl	8005d60 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 800630e:	2000      	movs	r0, #0
      }
      break;

    default:
      USBD_CtlError(pdev, req);
      break;
 8006310:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff fd24 	bl	8005d60 <USBD_CtlError>
    break;
  }

  return ret;
 8006318:	2000      	movs	r0, #0
    }
    break;

  default:
    USBD_CtlError(pdev, req);
    break;
 800631a:	bd38      	pop	{r3, r4, r5, pc}
  }

  return ret;
 800631c:	2000      	movs	r0, #0
}
 800631e:	bd38      	pop	{r3, r4, r5, pc}

08006320 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8006320:	b1c8      	cbz	r0, 8006356 <USBD_GetString+0x36>
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006322:	b570      	push	{r4, r5, r6, lr}
 8006324:	460d      	mov	r5, r1
 8006326:	4616      	mov	r6, r2
 8006328:	4604      	mov	r4, r0
  uint8_t idx = 0U;

  if (desc != NULL)
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800632a:	f7ff fcf1 	bl	8005d10 <USBD_GetLen>
 800632e:	3001      	adds	r0, #1
 8006330:	0040      	lsls	r0, r0, #1
 8006332:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006334:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006336:	2303      	movs	r3, #3
 8006338:	706b      	strb	r3, [r5, #1]
 800633a:	2302      	movs	r3, #2

    while (*desc != '\0')
 800633c:	e007      	b.n	800634e <USBD_GetString+0x2e>
    {
      unicode[idx++] = *desc++;
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	3401      	adds	r4, #1
 8006344:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8006346:	3302      	adds	r3, #2
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2100      	movs	r1, #0
 800634c:	54a9      	strb	r1, [r5, r2]
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
    unicode[idx++] = *(uint8_t *)(void *)len;
    unicode[idx++] = USB_DESC_TYPE_STRING;

    while (*desc != '\0')
 800634e:	7821      	ldrb	r1, [r4, #0]
 8006350:	2900      	cmp	r1, #0
 8006352:	d1f4      	bne.n	800633e <USBD_GetString+0x1e>
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	4770      	bx	lr

08006358 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006358:	b510      	push	{r4, lr}
 800635a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800635c:	2202      	movs	r2, #2
 800635e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006362:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8006364:	6203      	str	r3, [r0, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006366:	460a      	mov	r2, r1
 8006368:	2100      	movs	r1, #0
 800636a:	f7fa fcbb 	bl	8000ce4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800636e:	2000      	movs	r0, #0
 8006370:	bd10      	pop	{r4, pc}
 8006372:	bf00      	nop

08006374 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006374:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006376:	4613      	mov	r3, r2
 8006378:	460a      	mov	r2, r1
 800637a:	2100      	movs	r1, #0
 800637c:	f7fa fcb2 	bl	8000ce4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006380:	2000      	movs	r0, #0
 8006382:	bd08      	pop	{r3, pc}

08006384 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006384:	b510      	push	{r4, lr}
 8006386:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006388:	2203      	movs	r2, #3
 800638a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800638e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006392:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006396:	460a      	mov	r2, r1
 8006398:	2100      	movs	r1, #0
 800639a:	f7fa fcab 	bl	8000cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800639e:	2000      	movs	r0, #0
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop

080063a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80063a4:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063a6:	4613      	mov	r3, r2
 80063a8:	460a      	mov	r2, r1
 80063aa:	2100      	movs	r1, #0
 80063ac:	f7fa fca2 	bl	8000cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80063b0:	2000      	movs	r0, #0
 80063b2:	bd08      	pop	{r3, pc}

080063b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80063b4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063b6:	2304      	movs	r3, #4
 80063b8:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063bc:	2300      	movs	r3, #0
 80063be:	461a      	mov	r2, r3
 80063c0:	4619      	mov	r1, r3
 80063c2:	f7fa fc8f 	bl	8000ce4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80063c6:	2000      	movs	r0, #0
 80063c8:	bd08      	pop	{r3, pc}
 80063ca:	bf00      	nop

080063cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80063cc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063ce:	2305      	movs	r3, #5
 80063d0:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80063d4:	2300      	movs	r3, #0
 80063d6:	461a      	mov	r2, r3
 80063d8:	4619      	mov	r1, r3
 80063da:	f7fa fc8b 	bl	8000cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80063de:	2000      	movs	r0, #0
 80063e0:	bd08      	pop	{r3, pc}
 80063e2:	bf00      	nop

080063e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80063e4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063e6:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063ea:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80063ee:	b15b      	cbz	r3, 8006408 <USBD_CDC_EP0_RxReady+0x24>
 80063f0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80063f4:	28ff      	cmp	r0, #255	; 0xff
 80063f6:	d007      	beq.n	8006408 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80063fe:	4621      	mov	r1, r4
 8006400:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8006402:	23ff      	movs	r3, #255	; 0xff
 8006404:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8006408:	2000      	movs	r0, #0
 800640a:	bd10      	pop	{r4, pc}

0800640c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800640c:	2343      	movs	r3, #67	; 0x43
 800640e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8006410:	4800      	ldr	r0, [pc, #0]	; (8006414 <USBD_CDC_GetFSCfgDesc+0x8>)
 8006412:	4770      	bx	lr
 8006414:	20000074 	.word	0x20000074

08006418 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006418:	2343      	movs	r3, #67	; 0x43
 800641a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800641c:	4800      	ldr	r0, [pc, #0]	; (8006420 <USBD_CDC_GetHSCfgDesc+0x8>)
 800641e:	4770      	bx	lr
 8006420:	20000140 	.word	0x20000140

08006424 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006424:	2343      	movs	r3, #67	; 0x43
 8006426:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006428:	4800      	ldr	r0, [pc, #0]	; (800642c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800642a:	4770      	bx	lr
 800642c:	200000fc 	.word	0x200000fc

08006430 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006430:	230a      	movs	r3, #10
 8006432:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8006434:	4800      	ldr	r0, [pc, #0]	; (8006438 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006436:	4770      	bx	lr
 8006438:	200000f0 	.word	0x200000f0

0800643c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006440:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006444:	f7fa fc0a 	bl	8000c5c <USBD_LL_GetRxDataSize>
 8006448:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800644c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8006450:	b14b      	cbz	r3, 8006466 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006452:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800645c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006460:	4798      	blx	r3

    return USBD_OK;
 8006462:	2000      	movs	r0, #0
 8006464:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8006466:	2002      	movs	r0, #2
  }
}
 8006468:	bd38      	pop	{r3, r4, r5, pc}
 800646a:	bf00      	nop

0800646c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800646c:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800646e:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006472:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298

  if(pdev->pClassData != NULL)
 8006476:	b1fa      	cbz	r2, 80064b8 <USBD_CDC_DataIn+0x4c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006478:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800647c:	00a3      	lsls	r3, r4, #2
 800647e:	4403      	add	r3, r0
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	b1ab      	cbz	r3, 80064b0 <USBD_CDC_DataIn+0x44>
 8006484:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8006488:	00b4      	lsls	r4, r6, #2
 800648a:	442c      	add	r4, r5
 800648c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800648e:	fbb3 f4f5 	udiv	r4, r3, r5
 8006492:	fb05 3314 	mls	r3, r5, r4, r3
 8006496:	b95b      	cbnz	r3, 80064b0 <USBD_CDC_DataIn+0x44>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006498:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800649c:	0093      	lsls	r3, r2, #2
 800649e:	4403      	add	r3, r0
 80064a0:	2400      	movs	r4, #0
 80064a2:	61dc      	str	r4, [r3, #28]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80064a4:	4623      	mov	r3, r4
 80064a6:	4622      	mov	r2, r4
 80064a8:	f7fa fc1c 	bl	8000ce4 <USBD_LL_Transmit>
    }
    else
    {
      hcdc->TxState = 0U;
    }
    return USBD_OK;
 80064ac:	4620      	mov	r0, r4
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
      hcdc->TxState = 0U;
 80064b0:	2000      	movs	r0, #0
 80064b2:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 80064b8:	2002      	movs	r0, #2
  }
}
 80064ba:	bd70      	pop	{r4, r5, r6, pc}

080064bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	4605      	mov	r5, r0
 80064c2:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80064c4:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80064ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d2:	780b      	ldrb	r3, [r1, #0]
 80064d4:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80064d8:	d027      	beq.n	800652a <USBD_CDC_Setup+0x6e>
 80064da:	2a20      	cmp	r2, #32
 80064dc:	d154      	bne.n	8006588 <USBD_CDC_Setup+0xcc>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80064de:	88ca      	ldrh	r2, [r1, #6]
 80064e0:	b1da      	cbz	r2, 800651a <USBD_CDC_Setup+0x5e>
    {
      if (req->bmRequest & 0x80U)
 80064e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064e6:	d00c      	beq.n	8006502 <USBD_CDC_Setup+0x46>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064e8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4631      	mov	r1, r6
 80064f0:	7860      	ldrb	r0, [r4, #1]
 80064f2:	4798      	blx	r3
                                                          (uint8_t *)(void *)hcdc->data,
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064f4:	88e2      	ldrh	r2, [r4, #6]
 80064f6:	4631      	mov	r1, r6
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7ff ff2d 	bl	8006358 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80064fe:	2000      	movs	r0, #0
 8006500:	e047      	b.n	8006592 <USBD_CDC_Setup+0xd6>

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8006502:	784b      	ldrb	r3, [r1, #1]
 8006504:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006508:	798b      	ldrb	r3, [r1, #6]
 800650a:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201

        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800650e:	88ca      	ldrh	r2, [r1, #6]
 8006510:	4631      	mov	r1, r6
 8006512:	f7ff ff37 	bl	8006384 <USBD_CtlPrepareRx>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006516:	2000      	movs	r0, #0
 8006518:	e03b      	b.n	8006592 <USBD_CDC_Setup+0xd6>
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800651a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	2200      	movs	r2, #0
 8006522:	7848      	ldrb	r0, [r1, #1]
 8006524:	4798      	blx	r3
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006526:	2000      	movs	r0, #0
 8006528:	e033      	b.n	8006592 <USBD_CDC_Setup+0xd6>
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800652a:	784b      	ldrb	r3, [r1, #1]
 800652c:	2b0a      	cmp	r3, #10
 800652e:	d010      	beq.n	8006552 <USBD_CDC_Setup+0x96>
 8006530:	2b0b      	cmp	r3, #11
 8006532:	d01d      	beq.n	8006570 <USBD_CDC_Setup+0xb4>
 8006534:	bb23      	cbnz	r3, 8006580 <USBD_CDC_Setup+0xc4>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006536:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800653a:	2b03      	cmp	r3, #3
 800653c:	d105      	bne.n	800654a <USBD_CDC_Setup+0x8e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800653e:	2202      	movs	r2, #2
 8006540:	a901      	add	r1, sp, #4
 8006542:	f7ff ff09 	bl	8006358 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006546:	2000      	movs	r0, #0
 8006548:	e023      	b.n	8006592 <USBD_CDC_Setup+0xd6>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 800654a:	f7ff fc09 	bl	8005d60 <USBD_CtlError>
			  ret = USBD_FAIL;
 800654e:	2002      	movs	r0, #2
 8006550:	e01f      	b.n	8006592 <USBD_CDC_Setup+0xd6>
      }
      break;

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006552:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006556:	2b03      	cmp	r3, #3
 8006558:	d106      	bne.n	8006568 <USBD_CDC_Setup+0xac>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800655a:	2201      	movs	r2, #1
 800655c:	f10d 0107 	add.w	r1, sp, #7
 8006560:	f7ff fefa 	bl	8006358 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006564:	2000      	movs	r0, #0
 8006566:	e014      	b.n	8006592 <USBD_CDC_Setup+0xd6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 8006568:	f7ff fbfa 	bl	8005d60 <USBD_CtlError>
			  ret = USBD_FAIL;
 800656c:	2002      	movs	r0, #2
 800656e:	e010      	b.n	8006592 <USBD_CDC_Setup+0xd6>
      }
      break;

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006570:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006574:	2b03      	cmp	r3, #3
 8006576:	d00b      	beq.n	8006590 <USBD_CDC_Setup+0xd4>
      {
        USBD_CtlError (pdev, req);
 8006578:	f7ff fbf2 	bl	8005d60 <USBD_CtlError>
			  ret = USBD_FAIL;
 800657c:	2002      	movs	r0, #2
 800657e:	e008      	b.n	8006592 <USBD_CDC_Setup+0xd6>
      }
      break;

    default:
      USBD_CtlError (pdev, req);
 8006580:	f7ff fbee 	bl	8005d60 <USBD_CtlError>
      ret = USBD_FAIL;
 8006584:	2002      	movs	r0, #2
      break;
 8006586:	e004      	b.n	8006592 <USBD_CDC_Setup+0xd6>
    }
    break;

  default:
    USBD_CtlError (pdev, req);
 8006588:	f7ff fbea 	bl	8005d60 <USBD_CtlError>
    ret = USBD_FAIL;
 800658c:	2002      	movs	r0, #2
    break;
 800658e:	e000      	b.n	8006592 <USBD_CDC_Setup+0xd6>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006590:	2000      	movs	r0, #0
    ret = USBD_FAIL;
    break;
  }

  return ret;
}
 8006592:	b002      	add	sp, #8
 8006594:	bd70      	pop	{r4, r5, r6, pc}
 8006596:	bf00      	nop

08006598 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4604      	mov	r4, r0
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800659c:	2181      	movs	r1, #129	; 0x81
 800659e:	f7fa fb81 	bl	8000ca4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80065a2:	2500      	movs	r5, #0
 80065a4:	62e5      	str	r5, [r4, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80065a6:	2101      	movs	r1, #1
 80065a8:	4620      	mov	r0, r4
 80065aa:	f7fa fb7b 	bl	8000ca4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80065ae:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80065b2:	2182      	movs	r1, #130	; 0x82
 80065b4:	4620      	mov	r0, r4
 80065b6:	f7fa fb75 	bl	8000ca4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80065ba:	6425      	str	r5, [r4, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80065bc:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 80065c0:	b14b      	cbz	r3, 80065d6 <USBD_CDC_DeInit+0x3e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80065c2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80065ca:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 80065ce:	f002 f815 	bl	80085fc <free>
    pdev->pClassData = NULL;
 80065d2:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
  }

  return ret;
}
 80065d6:	2000      	movs	r0, #0
 80065d8:	bd38      	pop	{r3, r4, r5, pc}
 80065da:	bf00      	nop

080065dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4604      	mov	r4, r0
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80065e0:	7c03      	ldrb	r3, [r0, #16]
 80065e2:	b98b      	cbnz	r3, 8006608 <USBD_CDC_Init+0x2c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065e8:	2202      	movs	r2, #2
 80065ea:	2181      	movs	r1, #129	; 0x81
 80065ec:	f7fa fb4e 	bl	8000c8c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065f0:	2501      	movs	r5, #1
 80065f2:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f8:	2202      	movs	r2, #2
 80065fa:	4629      	mov	r1, r5
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7fa fb45 	bl	8000c8c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006602:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8006606:	e00e      	b.n	8006626 <USBD_CDC_Init+0x4a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006608:	2340      	movs	r3, #64	; 0x40
 800660a:	2202      	movs	r2, #2
 800660c:	2181      	movs	r1, #129	; 0x81
 800660e:	f7fa fb3d 	bl	8000c8c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006612:	2501      	movs	r5, #1
 8006614:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006616:	2340      	movs	r3, #64	; 0x40
 8006618:	2202      	movs	r2, #2
 800661a:	4629      	mov	r1, r5
 800661c:	4620      	mov	r0, r4
 800661e:	f7fa fb35 	bl	8000c8c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006622:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006626:	2308      	movs	r3, #8
 8006628:	2203      	movs	r2, #3
 800662a:	2182      	movs	r1, #130	; 0x82
 800662c:	4620      	mov	r0, r4
 800662e:	f7fa fb2d 	bl	8000c8c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006632:	2301      	movs	r3, #1
 8006634:	6423      	str	r3, [r4, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006636:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800663a:	f001 ffd7 	bl	80085ec <malloc>
 800663e:	4605      	mov	r5, r0
 8006640:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006644:	b1e8      	cbz	r0, 8006682 <USBD_CDC_Init+0xa6>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006646:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8006654:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006658:	7c23      	ldrb	r3, [r4, #16]
 800665a:	b94b      	cbnz	r3, 8006670 <USBD_CDC_Init+0x94>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800665c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006660:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006664:	2101      	movs	r1, #1
 8006666:	4620      	mov	r0, r4
 8006668:	f7fa fb44 	bl	8000cf4 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 800666c:	2000      	movs	r0, #0
 800666e:	bd38      	pop	{r3, r4, r5, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006670:	2340      	movs	r3, #64	; 0x40
 8006672:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006676:	2101      	movs	r1, #1
 8006678:	4620      	mov	r0, r4
 800667a:	f7fa fb3b 	bl	8000cf4 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 800667e:	2000      	movs	r0, #0
 8006680:	bd38      	pop	{r3, r4, r5, pc}

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));

  if(pdev->pClassData == NULL)
  {
    ret = 1U;
 8006682:	2001      	movs	r0, #1
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
}
 8006684:	bd38      	pop	{r3, r4, r5, pc}
 8006686:	bf00      	nop

08006688 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8006688:	b119      	cbz	r1, 8006692 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800668a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 800668e:	2000      	movs	r0, #0
 8006690:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8006692:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;
  }

  return ret;
}
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop

08006698 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006698:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
 800669c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80066a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 80066a4:	2000      	movs	r0, #0
 80066a6:	4770      	bx	lr

080066a8 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066a8:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->RxBuffer = pbuff;
 80066ac:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 80066b0:	2000      	movs	r0, #0
 80066b2:	4770      	bx	lr

080066b4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066b4:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 80066b8:	b192      	cbz	r2, 80066e0 <USBD_CDC_TransmitPacket+0x2c>
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066ba:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0U)
 80066bc:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80066c0:	b983      	cbnz	r3, 80066e4 <USBD_CDC_TransmitPacket+0x30>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066c8:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80066cc:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80066ce:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80066d2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80066d6:	2181      	movs	r1, #129	; 0x81
 80066d8:	f7fa fb04 	bl	8000ce4 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80066dc:	2000      	movs	r0, #0
 80066de:	bd08      	pop	{r3, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80066e0:	2002      	movs	r0, #2
  }
}
 80066e2:	4770      	bx	lr

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80066e4:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80066e6:	bd08      	pop	{r3, pc}

080066e8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066e8:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80066ec:	b19a      	cbz	r2, 8006716 <USBD_CDC_ReceivePacket+0x2e>
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066ee:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80066f0:	7c03      	ldrb	r3, [r0, #16]
 80066f2:	b943      	cbnz	r3, 8006706 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80066f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066f8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80066fc:	2101      	movs	r1, #1
 80066fe:	f7fa faf9 	bl	8000cf4 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006702:	2000      	movs	r0, #0
 8006704:	bd08      	pop	{r3, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006706:	2340      	movs	r3, #64	; 0x40
 8006708:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800670c:	2101      	movs	r1, #1
 800670e:	f7fa faf1 	bl	8000cf4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006712:	2000      	movs	r0, #0
 8006714:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USBD_FAIL;
 8006716:	2002      	movs	r0, #2
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop

0800671c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	4605      	mov	r5, r0
 8006720:	460f      	mov	r7, r1
 8006722:	4616      	mov	r6, r2
 8006724:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006726:	e034      	b.n	8006792 <SPI_WaitFlagStateUntilTimeout+0x76>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006728:	f1b4 3fff 	cmp.w	r4, #4294967295
 800672c:	d031      	beq.n	8006792 <SPI_WaitFlagStateUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800672e:	f7fc feb5 	bl	800349c <HAL_GetTick>
 8006732:	9b06      	ldr	r3, [sp, #24]
 8006734:	1ac0      	subs	r0, r0, r3
 8006736:	4284      	cmp	r4, r0
 8006738:	d900      	bls.n	800673c <SPI_WaitFlagStateUntilTimeout+0x20>
 800673a:	bb54      	cbnz	r4, 8006792 <SPI_WaitFlagStateUntilTimeout+0x76>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800673c:	682a      	ldr	r2, [r5, #0]
 800673e:	6853      	ldr	r3, [r2, #4]
 8006740:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006744:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006746:	686b      	ldr	r3, [r5, #4]
 8006748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800674c:	d10b      	bne.n	8006766 <SPI_WaitFlagStateUntilTimeout+0x4a>
 800674e:	68ab      	ldr	r3, [r5, #8]
 8006750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006754:	d002      	beq.n	800675c <SPI_WaitFlagStateUntilTimeout+0x40>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675a:	d104      	bne.n	8006766 <SPI_WaitFlagStateUntilTimeout+0x4a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800675c:	682a      	ldr	r2, [r5, #0]
 800675e:	6813      	ldr	r3, [r2, #0]
 8006760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006764:	6013      	str	r3, [r2, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006766:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676c:	d109      	bne.n	8006782 <SPI_WaitFlagStateUntilTimeout+0x66>
        {
          SPI_RESET_CRC(hspi);
 800676e:	682a      	ldr	r2, [r5, #0]
 8006770:	6813      	ldr	r3, [r2, #0]
 8006772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	682a      	ldr	r2, [r5, #0]
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006780:	6013      	str	r3, [r2, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006782:	2301      	movs	r3, #1
 8006784:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006788:	2300      	movs	r3, #0
 800678a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 800678e:	2003      	movs	r0, #3
 8006790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006792:	682b      	ldr	r3, [r5, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	ea37 0303 	bics.w	r3, r7, r3
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	42b3      	cmp	r3, r6
 80067a2:	d1c1      	bne.n	8006728 <SPI_WaitFlagStateUntilTimeout+0xc>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80067a4:	2000      	movs	r0, #0
}
 80067a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b530      	push	{r4, r5, lr}
 80067aa:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067ac:	4c16      	ldr	r4, [pc, #88]	; (8006808 <SPI_EndRxTxTransaction+0x60>)
 80067ae:	6824      	ldr	r4, [r4, #0]
 80067b0:	4d16      	ldr	r5, [pc, #88]	; (800680c <SPI_EndRxTxTransaction+0x64>)
 80067b2:	fba5 3404 	umull	r3, r4, r5, r4
 80067b6:	0d64      	lsrs	r4, r4, #21
 80067b8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80067bc:	fb05 f404 	mul.w	r4, r5, r4
 80067c0:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067c2:	6844      	ldr	r4, [r0, #4]
 80067c4:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80067c8:	d10e      	bne.n	80067e8 <SPI_EndRxTxTransaction+0x40>
 80067ca:	460b      	mov	r3, r1
 80067cc:	4604      	mov	r4, r0
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067ce:	9200      	str	r2, [sp, #0]
 80067d0:	2200      	movs	r2, #0
 80067d2:	2180      	movs	r1, #128	; 0x80
 80067d4:	f7ff ffa2 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	b190      	cbz	r0, 8006802 <SPI_EndRxTxTransaction+0x5a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80067de:	f043 0320 	orr.w	r3, r3, #32
 80067e2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e00c      	b.n	8006802 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067e8:	9b03      	ldr	r3, [sp, #12]
 80067ea:	b14b      	cbz	r3, 8006800 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067fa:	d1f5      	bne.n	80067e8 <SPI_EndRxTxTransaction+0x40>
  }

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e000      	b.n	8006802 <SPI_EndRxTxTransaction+0x5a>
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	b005      	add	sp, #20
 8006806:	bd30      	pop	{r4, r5, pc}
 8006808:	2000006c 	.word	0x2000006c
 800680c:	165e9f81 	.word	0x165e9f81

08006810 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b510      	push	{r4, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006816:	6840      	ldr	r0, [r0, #4]
 8006818:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800681c:	d10b      	bne.n	8006836 <SPI_EndRxTransaction+0x26>
 800681e:	68a3      	ldr	r3, [r4, #8]
 8006820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006824:	d002      	beq.n	800682c <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682a:	d104      	bne.n	8006836 <SPI_EndRxTransaction+0x26>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	6803      	ldr	r3, [r0, #0]
 8006830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006834:	6003      	str	r3, [r0, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006836:	6860      	ldr	r0, [r4, #4]
 8006838:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800683c:	d121      	bne.n	8006882 <SPI_EndRxTransaction+0x72>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800683e:	68a3      	ldr	r3, [r4, #8]
 8006840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006844:	d00e      	beq.n	8006864 <SPI_EndRxTransaction+0x54>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006846:	9200      	str	r2, [sp, #0]
 8006848:	460b      	mov	r3, r1
 800684a:	2200      	movs	r2, #0
 800684c:	2180      	movs	r1, #128	; 0x80
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff ff64 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	b310      	cbz	r0, 800689e <SPI_EndRxTransaction+0x8e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006858:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800685a:	f043 0320 	orr.w	r3, r3, #32
 800685e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e01c      	b.n	800689e <SPI_EndRxTransaction+0x8e>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006864:	9200      	str	r2, [sp, #0]
 8006866:	460b      	mov	r3, r1
 8006868:	2200      	movs	r2, #0
 800686a:	2101      	movs	r1, #1
 800686c:	4620      	mov	r0, r4
 800686e:	f7ff ff55 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	b198      	cbz	r0, 800689e <SPI_EndRxTransaction+0x8e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006876:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006878:	f043 0320 	orr.w	r3, r3, #32
 800687c:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e00d      	b.n	800689e <SPI_EndRxTransaction+0x8e>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006882:	9200      	str	r2, [sp, #0]
 8006884:	460b      	mov	r3, r1
 8006886:	2200      	movs	r2, #0
 8006888:	2101      	movs	r1, #1
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff ff46 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	b120      	cbz	r0, 800689e <SPI_EndRxTransaction+0x8e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006894:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006896:	f043 0320 	orr.w	r3, r3, #32
 800689a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
    }
  }
  return HAL_OK;
}
 800689e:	4618      	mov	r0, r3
 80068a0:	b002      	add	sp, #8
 80068a2:	bd10      	pop	{r4, pc}

080068a4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d03c      	beq.n	8006922 <HAL_SPI_Init+0x7e>
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068a8:	b510      	push	{r4, lr}
 80068aa:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068b0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80068b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80068b8:	d104      	bne.n	80068c4 <HAL_SPI_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068ba:	2300      	movs	r3, #0
 80068bc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068c0:	f7fa fb36 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068c4:	2302      	movs	r3, #2
 80068c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	6813      	ldr	r3, [r2, #0]
 80068ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d2:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80068d4:	6821      	ldr	r1, [r4, #0]
 80068d6:	6862      	ldr	r2, [r4, #4]
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	431a      	orrs	r2, r3
 80068dc:	68e3      	ldr	r3, [r4, #12]
 80068de:	431a      	orrs	r2, r3
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	6963      	ldr	r3, [r4, #20]
 80068e6:	431a      	orrs	r2, r3
 80068e8:	69a3      	ldr	r3, [r4, #24]
 80068ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ee:	4313      	orrs	r3, r2
 80068f0:	69e2      	ldr	r2, [r4, #28]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	6a22      	ldr	r2, [r4, #32]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80068fa:	431a      	orrs	r2, r3
 80068fc:	600a      	str	r2, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80068fe:	6821      	ldr	r1, [r4, #0]
 8006900:	8b63      	ldrh	r3, [r4, #26]
 8006902:	f003 0204 	and.w	r2, r3, #4
 8006906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006908:	4313      	orrs	r3, r2
 800690a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800690c:	6822      	ldr	r2, [r4, #0]
 800690e:	69d3      	ldr	r3, [r2, #28]
 8006910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006914:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006916:	2000      	movs	r0, #0
 8006918:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800691a:	2301      	movs	r3, #1
 800691c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8006920:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8006922:	2001      	movs	r0, #1
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop

08006928 <HAL_SPI_Transmit_DMA>:

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006928:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800692c:	2b01      	cmp	r3, #1
 800692e:	d05e      	beq.n	80069ee <HAL_SPI_Transmit_DMA+0xc6>
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006930:	b510      	push	{r4, lr}
 8006932:	4604      	mov	r4, r0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006934:	2301      	movs	r3, #1
 8006936:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800693a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d14b      	bne.n	80069dc <HAL_SPI_Transmit_DMA+0xb4>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pData == NULL) || (Size == 0U))
 8006944:	2900      	cmp	r1, #0
 8006946:	d04b      	beq.n	80069e0 <HAL_SPI_Transmit_DMA+0xb8>
 8006948:	2a00      	cmp	r2, #0
 800694a:	d04b      	beq.n	80069e4 <HAL_SPI_Transmit_DMA+0xbc>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800694c:	2303      	movs	r3, #3
 800694e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006952:	2300      	movs	r3, #0
 8006954:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006956:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006958:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 800695a:	86c2      	strh	r2, [r0, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800695c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxISR       = NULL;
 800695e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006960:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006962:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006964:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006966:	6883      	ldr	r3, [r0, #8]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696c:	d104      	bne.n	8006978 <HAL_SPI_Transmit_DMA+0x50>
  {
    SPI_1LINE_TX(hspi);
 800696e:	6802      	ldr	r2, [r0, #0]
 8006970:	6813      	ldr	r3, [r2, #0]
 8006972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006976:	6013      	str	r3, [r2, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006978:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800697a:	4a1e      	ldr	r2, [pc, #120]	; (80069f4 <HAL_SPI_Transmit_DMA+0xcc>)
 800697c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800697e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006980:	4a1d      	ldr	r2, [pc, #116]	; (80069f8 <HAL_SPI_Transmit_DMA+0xd0>)
 8006982:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006984:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006986:	4a1d      	ldr	r2, [pc, #116]	; (80069fc <HAL_SPI_Transmit_DMA+0xd4>)
 8006988:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800698a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800698c:	2200      	movs	r2, #0
 800698e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006990:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8006992:	8ee3      	ldrh	r3, [r4, #54]	; 0x36

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006994:	b29b      	uxth	r3, r3
 8006996:	320c      	adds	r2, #12
 8006998:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800699a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800699c:	f7fc fbe4 	bl	8003168 <HAL_DMA_Start_IT>
 80069a0:	b138      	cbz	r0, 80069b2 <HAL_SPI_Transmit_DMA+0x8a>
                                 hspi->TxXferCount))
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80069a4:	f043 0310 	orr.w	r3, r3, #16
 80069a8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;

    hspi->State = HAL_SPI_STATE_READY;
 80069aa:	2001      	movs	r0, #1
 80069ac:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    goto error;
 80069b0:	e019      	b.n	80069e6 <HAL_SPI_Transmit_DMA+0xbe>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80069ba:	d103      	bne.n	80069c4 <HAL_SPI_Transmit_DMA+0x9c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80069c4:	6822      	ldr	r2, [r4, #0]
 80069c6:	6853      	ldr	r3, [r2, #4]
 80069c8:	f043 0320 	orr.w	r3, r3, #32
 80069cc:	6053      	str	r3, [r2, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80069ce:	6822      	ldr	r2, [r4, #0]
 80069d0:	6853      	ldr	r3, [r2, #4]
 80069d2:	f043 0302 	orr.w	r3, r3, #2
 80069d6:	6053      	str	r3, [r2, #4]
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069d8:	2000      	movs	r0, #0
 80069da:	e004      	b.n	80069e6 <HAL_SPI_Transmit_DMA+0xbe>
  /* Process Locked */
  __HAL_LOCK(hspi);

  if (hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 80069dc:	2002      	movs	r0, #2
 80069de:	e002      	b.n	80069e6 <HAL_SPI_Transmit_DMA+0xbe>
    goto error;
  }

  if ((pData == NULL) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 80069e0:	2001      	movs	r0, #1
 80069e2:	e000      	b.n	80069e6 <HAL_SPI_Transmit_DMA+0xbe>
 80069e4:	2001      	movs	r0, #1
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069e6:	2300      	movs	r3, #0
 80069e8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80069ec:	bd10      	pop	{r4, pc}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ee:	2002      	movs	r0, #2
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	08006b61 	.word	0x08006b61
 80069f8:	08006bb5 	.word	0x08006bb5
 80069fc:	08006b91 	.word	0x08006b91

08006a00 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006a00:	b538      	push	{r3, r4, r5, lr}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006a02:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8006a06:	2c01      	cmp	r4, #1
 8006a08:	f000 8096 	beq.w	8006b38 <HAL_SPI_TransmitReceive_DMA+0x138>
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	2001      	movs	r0, #1
 8006a10:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a14:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006a18:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8006a1a:	6865      	ldr	r5, [r4, #4]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006a1c:	2801      	cmp	r0, #1
 8006a1e:	d007      	beq.n	8006a30 <HAL_SPI_TransmitReceive_DMA+0x30>
 8006a20:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8006a24:	d179      	bne.n	8006b1a <HAL_SPI_TransmitReceive_DMA+0x11a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a26:	68a5      	ldr	r5, [r4, #8]
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	d178      	bne.n	8006b1e <HAL_SPI_TransmitReceive_DMA+0x11e>
 8006a2c:	2804      	cmp	r0, #4
 8006a2e:	d178      	bne.n	8006b22 <HAL_SPI_TransmitReceive_DMA+0x122>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a30:	2900      	cmp	r1, #0
 8006a32:	d078      	beq.n	8006b26 <HAL_SPI_TransmitReceive_DMA+0x126>
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	d078      	beq.n	8006b2a <HAL_SPI_TransmitReceive_DMA+0x12a>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d078      	beq.n	8006b2e <HAL_SPI_TransmitReceive_DMA+0x12e>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a3c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006a40:	b2c0      	uxtb	r0, r0
 8006a42:	2804      	cmp	r0, #4
 8006a44:	d002      	beq.n	8006a4c <HAL_SPI_TransmitReceive_DMA+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a46:	2005      	movs	r0, #5
 8006a48:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a50:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a52:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a54:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a56:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a58:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a5a:	87e3      	strh	r3, [r4, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a5c:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a5e:	6460      	str	r0, [r4, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006a60:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d106      	bne.n	8006a78 <HAL_SPI_TransmitReceive_DMA+0x78>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006a6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a6c:	4a33      	ldr	r2, [pc, #204]	; (8006b3c <HAL_SPI_TransmitReceive_DMA+0x13c>)
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006a70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a72:	4a33      	ldr	r2, [pc, #204]	; (8006b40 <HAL_SPI_TransmitReceive_DMA+0x140>)
 8006a74:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a76:	e005      	b.n	8006a84 <HAL_SPI_TransmitReceive_DMA+0x84>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006a78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a7a:	4a32      	ldr	r2, [pc, #200]	; (8006b44 <HAL_SPI_TransmitReceive_DMA+0x144>)
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006a7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a80:	4a31      	ldr	r2, [pc, #196]	; (8006b48 <HAL_SPI_TransmitReceive_DMA+0x148>)
 8006a82:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006a84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a86:	4a31      	ldr	r2, [pc, #196]	; (8006b4c <HAL_SPI_TransmitReceive_DMA+0x14c>)
 8006a88:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006a8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a90:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8006a92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a98:	310c      	adds	r1, #12
 8006a9a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006a9c:	f7fc fb64 	bl	8003168 <HAL_DMA_Start_IT>
 8006aa0:	b138      	cbz	r0, 8006ab2 <HAL_SPI_TransmitReceive_DMA+0xb2>
                                 hspi->RxXferCount))
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006aa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006aa4:	f043 0310 	orr.w	r3, r3, #16
 8006aa8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;

    hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	2001      	movs	r0, #1
 8006aac:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    goto error;
 8006ab0:	e03e      	b.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x130>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ab2:	6822      	ldr	r2, [r4, #0]
 8006ab4:	6853      	ldr	r3, [r2, #4]
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	6053      	str	r3, [r2, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006abc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006ac2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006ac4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006ac6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006aca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006acc:	6513      	str	r3, [r2, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006ace:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8006ad0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	320c      	adds	r2, #12
 8006ad6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ad8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006ada:	f7fc fb45 	bl	8003168 <HAL_DMA_Start_IT>
 8006ade:	b138      	cbz	r0, 8006af0 <HAL_SPI_TransmitReceive_DMA+0xf0>
                                 hspi->TxXferCount))
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ae0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ae2:	f043 0310 	orr.w	r3, r3, #16
 8006ae6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;

    hspi->State = HAL_SPI_STATE_READY;
 8006ae8:	2001      	movs	r0, #1
 8006aea:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    goto error;
 8006aee:	e01f      	b.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x130>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006af8:	d103      	bne.n	8006b02 <HAL_SPI_TransmitReceive_DMA+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b00:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006b02:	6822      	ldr	r2, [r4, #0]
 8006b04:	6853      	ldr	r3, [r2, #4]
 8006b06:	f043 0320 	orr.w	r3, r3, #32
 8006b0a:	6053      	str	r3, [r2, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b0c:	6822      	ldr	r2, [r4, #0]
 8006b0e:	6853      	ldr	r3, [r2, #4]
 8006b10:	f043 0302 	orr.w	r3, r3, #2
 8006b14:	6053      	str	r3, [r2, #4]
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b16:	2000      	movs	r0, #0
 8006b18:	e00a      	b.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x130>
  tmp_mode            = hspi->Init.Mode;

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006b1a:	2002      	movs	r0, #2
 8006b1c:	e008      	b.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x130>
 8006b1e:	2002      	movs	r0, #2
 8006b20:	e006      	b.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x130>
 8006b22:	2002      	movs	r0, #2
 8006b24:	e004      	b.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x130>
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 8006b26:	2001      	movs	r0, #1
 8006b28:	e002      	b.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x130>
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	e000      	b.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x130>
 8006b2e:	2001      	movs	r0, #1
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b30:	2300      	movs	r3, #0
 8006b32:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8006b36:	bd38      	pop	{r3, r4, r5, pc}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006b38:	2002      	movs	r0, #2

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	08006b71 	.word	0x08006b71
 8006b40:	08006c25 	.word	0x08006c25
 8006b44:	08006b81 	.word	0x08006b81
 8006b48:	08006c7d 	.word	0x08006c7d
 8006b4c:	08006b91 	.word	0x08006b91

08006b50 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop

08006b54 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop

08006b58 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop

08006b5c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b60:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006b62:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b64:	f7ff fffa 	bl	8006b5c <HAL_SPI_TxHalfCpltCallback>
 8006b68:	bd08      	pop	{r3, pc}
 8006b6a:	bf00      	nop

08006b6c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop

08006b70 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b70:	b508      	push	{r3, lr}

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006b72:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b74:	f7ff fffa 	bl	8006b6c <HAL_SPI_RxHalfCpltCallback>
 8006b78:	bd08      	pop	{r3, pc}
 8006b7a:	bf00      	nop

08006b7c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop

08006b80 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b80:	b508      	push	{r3, lr}

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006b82:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b84:	f7ff fffa 	bl	8006b7c <HAL_SPI_TxRxHalfCpltCallback>
 8006b88:	bd08      	pop	{r3, pc}
 8006b8a:	bf00      	nop

08006b8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop

08006b90 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b90:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b92:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b94:	6802      	ldr	r2, [r0, #0]
 8006b96:	6853      	ldr	r3, [r2, #4]
 8006b98:	f023 0303 	bic.w	r3, r3, #3
 8006b9c:	6053      	str	r3, [r2, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b9e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006ba0:	f043 0310 	orr.w	r3, r3, #16
 8006ba4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006bac:	f7ff ffee 	bl	8006b8c <HAL_SPI_ErrorCallback>
 8006bb0:	bd08      	pop	{r3, pc}
 8006bb2:	bf00      	nop

08006bb4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b530      	push	{r4, r5, lr}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bba:	6b84      	ldr	r4, [r0, #56]	; 0x38
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bbc:	f7fc fc6e 	bl	800349c <HAL_GetTick>

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006bc8:	d127      	bne.n	8006c1a <SPI_DMATransmitCplt+0x66>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	6853      	ldr	r3, [r2, #4]
 8006bce:	f023 0320 	bic.w	r3, r3, #32
 8006bd2:	6053      	str	r3, [r2, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	6853      	ldr	r3, [r2, #4]
 8006bd8:	f023 0302 	bic.w	r3, r3, #2
 8006bdc:	6053      	str	r3, [r2, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006bde:	4602      	mov	r2, r0
 8006be0:	2164      	movs	r1, #100	; 0x64
 8006be2:	4620      	mov	r0, r4
 8006be4:	f7ff fde0 	bl	80067a8 <SPI_EndRxTxTransaction>
 8006be8:	b118      	cbz	r0, 8006bf2 <SPI_DMATransmitCplt+0x3e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006bec:	f043 0320 	orr.w	r3, r3, #32
 8006bf0:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	b933      	cbnz	r3, 8006c04 <SPI_DMATransmitCplt+0x50>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	9201      	str	r2, [sp, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	9b01      	ldr	r3, [sp, #4]
    }

    hspi->TxXferCount = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c10:	b11b      	cbz	r3, 8006c1a <SPI_DMATransmitCplt+0x66>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff ffba 	bl	8006b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c18:	e002      	b.n	8006c20 <SPI_DMATransmitCplt+0x6c>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f7ff ff98 	bl	8006b50 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c20:	b003      	add	sp, #12
 8006c22:	bd30      	pop	{r4, r5, pc}

08006c24 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c28:	6b84      	ldr	r4, [r0, #56]	; 0x38
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c2a:	f7fc fc37 	bl	800349c <HAL_GetTick>

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c36:	d11c      	bne.n	8006c72 <SPI_DMAReceiveCplt+0x4e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006c38:	6822      	ldr	r2, [r4, #0]
 8006c3a:	6853      	ldr	r3, [r2, #4]
 8006c3c:	f023 0320 	bic.w	r3, r3, #32
 8006c40:	6053      	str	r3, [r2, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	6853      	ldr	r3, [r2, #4]
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	6053      	str	r3, [r2, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	2164      	movs	r1, #100	; 0x64
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7ff fddd 	bl	8006810 <SPI_EndRxTransaction>
 8006c56:	b108      	cbz	r0, 8006c5c <SPI_DMAReceiveCplt+0x38>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c58:	2320      	movs	r3, #32
 8006c5a:	6563      	str	r3, [r4, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006c60:	2301      	movs	r3, #1
 8006c62:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c68:	b11b      	cbz	r3, 8006c72 <SPI_DMAReceiveCplt+0x4e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7ff ff8e 	bl	8006b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c70:	bd38      	pop	{r3, r4, r5, pc}
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff ff6e 	bl	8006b54 <HAL_SPI_RxCpltCallback>
 8006c78:	bd38      	pop	{r3, r4, r5, pc}
 8006c7a:	bf00      	nop

08006c7c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c80:	6b84      	ldr	r4, [r0, #56]	; 0x38
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c82:	f7fc fc0b 	bl	800349c <HAL_GetTick>

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c8e:	d11f      	bne.n	8006cd0 <SPI_DMATransmitReceiveCplt+0x54>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006c90:	6822      	ldr	r2, [r4, #0]
 8006c92:	6853      	ldr	r3, [r2, #4]
 8006c94:	f023 0320 	bic.w	r3, r3, #32
 8006c98:	6053      	str	r3, [r2, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	2164      	movs	r1, #100	; 0x64
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7ff fd82 	bl	80067a8 <SPI_EndRxTxTransaction>
 8006ca4:	b118      	cbz	r0, 8006cae <SPI_DMATransmitReceiveCplt+0x32>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ca6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ca8:	f043 0320 	orr.w	r3, r3, #32
 8006cac:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	6853      	ldr	r3, [r2, #4]
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	6053      	str	r3, [r2, #4]

    hspi->TxXferCount = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006cbc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006cc6:	b11b      	cbz	r3, 8006cd0 <SPI_DMATransmitReceiveCplt+0x54>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f7ff ff5f 	bl	8006b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f7ff ff41 	bl	8006b58 <HAL_SPI_TxRxCpltCallback>
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}

08006cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0); 
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4601      	mov	r1, r0
 8006ce0:	201a      	movs	r0, #26
 8006ce2:	f7fc fb75 	bl	80033d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); 
 8006ce6:	201a      	movs	r0, #26
 8006ce8:	f7fc fba4 	bl	8003434 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006cec:	2400      	movs	r4, #0
 8006cee:	9401      	str	r4, [sp, #4]
 8006cf0:	4b13      	ldr	r3, [pc, #76]	; (8006d40 <HAL_InitTick+0x68>)
 8006cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006cf8:	645a      	str	r2, [r3, #68]	; 0x44
 8006cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006d04:	a902      	add	r1, sp, #8
 8006d06:	a803      	add	r0, sp, #12
 8006d08:	f7fc f848 	bl	8002d9c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006d0c:	f7fc f836 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006d10:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <HAL_InitTick+0x6c>)
 8006d12:	fba3 2300 	umull	r2, r3, r3, r0
 8006d16:	0c9b      	lsrs	r3, r3, #18
 8006d18:	3b01      	subs	r3, #1
  
  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8006d1a:	480b      	ldr	r0, [pc, #44]	; (8006d48 <HAL_InitTick+0x70>)
 8006d1c:	4a0b      	ldr	r2, [pc, #44]	; (8006d4c <HAL_InitTick+0x74>)
 8006d1e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 8006d20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006d24:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8006d26:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8006d28:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d2a:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8006d2c:	f7fc fce2 	bl	80036f4 <HAL_TIM_Base_Init>
 8006d30:	b918      	cbnz	r0, 8006d3a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8006d32:	4805      	ldr	r0, [pc, #20]	; (8006d48 <HAL_InitTick+0x70>)
 8006d34:	f7fc fc7c 	bl	8003630 <HAL_TIM_Base_Start_IT>
 8006d38:	e000      	b.n	8006d3c <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006d3a:	2001      	movs	r0, #1
}
 8006d3c:	b008      	add	sp, #32
 8006d3e:	bd10      	pop	{r4, pc}
 8006d40:	40023800 	.word	0x40023800
 8006d44:	431bde83 	.word	0x431bde83
 8006d48:	2000668c 	.word	0x2000668c
 8006d4c:	40014800 	.word	0x40014800

08006d50 <InitRW>:
transceiver_handle_t OpenUsbHostConnection();

/////////////////////////////////////////////////////////////////////////////
// Defs
void InitRW()
{
 8006d50:	b508      	push	{r3, lr}
    gHostConnection = OpenUsbHostConnection();
 8006d52:	f001 fb1f 	bl	8008394 <OpenUsbHostConnection>
 8006d56:	4b01      	ldr	r3, [pc, #4]	; (8006d5c <InitRW+0xc>)
 8006d58:	6018      	str	r0, [r3, #0]
 8006d5a:	bd08      	pop	{r3, pc}
 8006d5c:	200066cc 	.word	0x200066cc

08006d60 <InitHW>:
    //! @todo. Implement VBUS detection
    return false;
}

void InitHW()
{
 8006d60:	b508      	push	{r3, lr}
    MX_USB_DEVICE_Init();
 8006d62:	f7f9 fe4f 	bl	8000a04 <MX_USB_DEVICE_Init>
    HW_TIMER_INIT();
 8006d66:	f000 fcff 	bl	8007768 <HW_TIMER_INIT>
 8006d6a:	bd08      	pop	{r3, pc}

08006d6c <S2PI_CaptureGpioControl>:
};

#define countof( v ) ( sizeof( v ) / sizeof( *v ) )

status_t S2PI_CaptureGpioControl( void )
{
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	b086      	sub	sp, #24
    g_isGpioMode = true;
 8006d70:	2201      	movs	r2, #1
 8006d72:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <S2PI_CaptureGpioControl+0x3c>)
 8006d74:	701a      	strb	r2, [r3, #0]
    size_t i;

    for ( i = 0; i < countof( pins ); i++ ) {
 8006d76:	2400      	movs	r4, #0
 8006d78:	e010      	b.n	8006d9c <S2PI_CaptureGpioControl+0x30>
        pins[i].bWrite = false;
 8006d7a:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <S2PI_CaptureGpioControl+0x40>)
 8006d7c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 8006d80:	2100      	movs	r1, #0
 8006d82:	7191      	strb	r1, [r2, #6]

        GPIO_InitTypeDef init;
        init.Mode  = GPIO_MODE_INPUT;
 8006d84:	9102      	str	r1, [sp, #8]
        init.Pin   = pins[i].pin;
 8006d86:	8892      	ldrh	r2, [r2, #4]
 8006d88:	9201      	str	r2, [sp, #4]
        init.Pull  = GPIO_PULLUP;
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	9203      	str	r2, [sp, #12]
        init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006d8e:	9204      	str	r2, [sp, #16]
        HAL_GPIO_Init( pins[i].port, &init );
 8006d90:	a901      	add	r1, sp, #4
 8006d92:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8006d96:	f7fc f81f 	bl	8002dd8 <HAL_GPIO_Init>
status_t S2PI_CaptureGpioControl( void )
{
    g_isGpioMode = true;
    size_t i;

    for ( i = 0; i < countof( pins ); i++ ) {
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	2c04      	cmp	r4, #4
 8006d9e:	d9ec      	bls.n	8006d7a <S2PI_CaptureGpioControl+0xe>
        init.Pull  = GPIO_PULLUP;
        init.Speed = GPIO_SPEED_FREQ_MEDIUM;
        HAL_GPIO_Init( pins[i].port, &init );
    }
    return STATUS_OK;
}
 8006da0:	2000      	movs	r0, #0
 8006da2:	b006      	add	sp, #24
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	bf00      	nop
 8006da8:	200030da 	.word	0x200030da
 8006dac:	20000184 	.word	0x20000184

08006db0 <S2PI_ReleaseGpioControl>:

status_t S2PI_ReleaseGpioControl( void )
{
 8006db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db2:	b087      	sub	sp, #28
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin       = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8006db4:	23e0      	movs	r3, #224	; 0xe0
 8006db6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006db8:	2702      	movs	r7, #2
 8006dba:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006dbc:	2500      	movs	r5, #0
 8006dbe:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006dc4:	2305      	movs	r3, #5
 8006dc6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init( GPIOA, &GPIO_InitStruct );
 8006dc8:	a901      	add	r1, sp, #4
 8006dca:	480f      	ldr	r0, [pc, #60]	; (8006e08 <S2PI_ReleaseGpioControl+0x58>)
 8006dcc:	f7fc f804 	bl	8002dd8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC0 */
    GPIO_InitStruct.Pin   = GPIO_PIN_0;
 8006dd0:	2401      	movs	r4, #1
 8006dd2:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8006dd4:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8006dd6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd8:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 8006dda:	4e0c      	ldr	r6, [pc, #48]	; (8006e0c <S2PI_ReleaseGpioControl+0x5c>)
 8006ddc:	a901      	add	r1, sp, #4
 8006dde:	4630      	mov	r0, r6
 8006de0:	f7fb fffa 	bl	8002dd8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC1 */
    GPIO_InitStruct.Pin  = GPIO_PIN_1;
 8006de4:	9701      	str	r7, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006de6:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <S2PI_ReleaseGpioControl+0x60>)
 8006de8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dea:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 8006dec:	a901      	add	r1, sp, #4
 8006dee:	4630      	mov	r0, r6
 8006df0:	f7fb fff2 	bl	8002dd8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_1, GPIO_PIN_SET );
 8006df4:	4622      	mov	r2, r4
 8006df6:	4639      	mov	r1, r7
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f7fc f8cb 	bl	8002f94 <HAL_GPIO_WritePin>
    g_isGpioMode = false;
 8006dfe:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <S2PI_ReleaseGpioControl+0x64>)
 8006e00:	701d      	strb	r5, [r3, #0]
    return STATUS_OK;
}
 8006e02:	4628      	mov	r0, r5
 8006e04:	b007      	add	sp, #28
 8006e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e08:	40020000 	.word	0x40020000
 8006e0c:	40020800 	.word	0x40020800
 8006e10:	10210000 	.word	0x10210000
 8006e14:	200030da 	.word	0x200030da

08006e18 <S2PI_WriteGpioPin>:

status_t S2PI_WriteGpioPin( s2pi_slave_t nouse_, s2pi_pin_t pin, uint32_t value )
{
 8006e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1c:	b086      	sub	sp, #24
 8006e1e:	460e      	mov	r6, r1
 8006e20:	4690      	mov	r8, r2
    pinstruct_t* p = pins + pin;
 8006e22:	4d0e      	ldr	r5, [pc, #56]	; (8006e5c <S2PI_WriteGpioPin+0x44>)
 8006e24:	eb05 04c1 	add.w	r4, r5, r1, lsl #3

    if ( p->bWrite == false ) {
 8006e28:	79a3      	ldrb	r3, [r4, #6]
 8006e2a:	b95b      	cbnz	r3, 8006e44 <S2PI_WriteGpioPin+0x2c>
        GPIO_InitTypeDef init;
        init.Mode  = GPIO_MODE_OUTPUT_PP;
 8006e2c:	2701      	movs	r7, #1
 8006e2e:	9702      	str	r7, [sp, #8]
        init.Pin   = p->pin;
 8006e30:	88a3      	ldrh	r3, [r4, #4]
 8006e32:	9301      	str	r3, [sp, #4]
        init.Speed = GPIO_SPEED_MEDIUM;
 8006e34:	9704      	str	r7, [sp, #16]
        init.Pull  = GPIO_PULLUP;
 8006e36:	9703      	str	r7, [sp, #12]
        HAL_GPIO_Init( p->port, &init );
 8006e38:	a901      	add	r1, sp, #4
 8006e3a:	f855 0036 	ldr.w	r0, [r5, r6, lsl #3]
 8006e3e:	f7fb ffcb 	bl	8002dd8 <HAL_GPIO_Init>

        p->bWrite = true;
 8006e42:	71a7      	strb	r7, [r4, #6]
    }

    HAL_GPIO_WritePin( p->port, p->pin, value );
 8006e44:	fa5f f288 	uxtb.w	r2, r8
 8006e48:	88a1      	ldrh	r1, [r4, #4]
 8006e4a:	f855 0036 	ldr.w	r0, [r5, r6, lsl #3]
 8006e4e:	f7fc f8a1 	bl	8002f94 <HAL_GPIO_WritePin>
    return STATUS_OK;
}
 8006e52:	2000      	movs	r0, #0
 8006e54:	b006      	add	sp, #24
 8006e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000184 	.word	0x20000184

08006e60 <S2PI_ReadGpioPin>:

status_t S2PI_ReadGpioPin( s2pi_slave_t nouse_, s2pi_pin_t pin, uint32_t* value )
{
 8006e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	460e      	mov	r6, r1
 8006e68:	4617      	mov	r7, r2
    pinstruct_t* p = pins + pin;
 8006e6a:	4d10      	ldr	r5, [pc, #64]	; (8006eac <S2PI_ReadGpioPin+0x4c>)
 8006e6c:	eb05 04c1 	add.w	r4, r5, r1, lsl #3

    if ( p->bWrite == true ) {
 8006e70:	79a3      	ldrb	r3, [r4, #6]
 8006e72:	b183      	cbz	r3, 8006e96 <S2PI_ReadGpioPin+0x36>
        GPIO_InitTypeDef init;
        init.Mode  = GPIO_MODE_INPUT;
 8006e74:	f04f 0800 	mov.w	r8, #0
 8006e78:	f8cd 8008 	str.w	r8, [sp, #8]
        init.Pin   = p->pin;
 8006e7c:	88a3      	ldrh	r3, [r4, #4]
 8006e7e:	9301      	str	r3, [sp, #4]
        init.Pull  = GPIO_NOPULL;
 8006e80:	f8cd 800c 	str.w	r8, [sp, #12]
        init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006e84:	2301      	movs	r3, #1
 8006e86:	9304      	str	r3, [sp, #16]
        HAL_GPIO_Init( p->port, &init );
 8006e88:	a901      	add	r1, sp, #4
 8006e8a:	f855 0036 	ldr.w	r0, [r5, r6, lsl #3]
 8006e8e:	f7fb ffa3 	bl	8002dd8 <HAL_GPIO_Init>

        p->bWrite = false;
 8006e92:	f884 8006 	strb.w	r8, [r4, #6]
    }

    *value = HAL_GPIO_ReadPin( p->port, p->pin );
 8006e96:	88a1      	ldrh	r1, [r4, #4]
 8006e98:	f855 0036 	ldr.w	r0, [r5, r6, lsl #3]
 8006e9c:	f7fc f872 	bl	8002f84 <HAL_GPIO_ReadPin>
 8006ea0:	6038      	str	r0, [r7, #0]
    return STATUS_OK;
}
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	b006      	add	sp, #24
 8006ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000184 	.word	0x20000184

08006eb0 <S2PI_GetStatus>:
    return STATUS_OK;
}

status_t S2PI_GetStatus( void )
{
    if ( g_rxtxRunning ) {
 8006eb0:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <S2PI_GetStatus+0x20>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006eb8:	d106      	bne.n	8006ec8 <S2PI_GetStatus+0x18>
        return STATUS_BUSY;
    }
    else if ( g_isGpioMode ) {
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <S2PI_GetStatus+0x24>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ec2:	d003      	beq.n	8006ecc <S2PI_GetStatus+0x1c>
        return STATUS_S2PI_GPIO_MODE;
 8006ec4:	2033      	movs	r0, #51	; 0x33
 8006ec6:	4770      	bx	lr
}

status_t S2PI_GetStatus( void )
{
    if ( g_rxtxRunning ) {
        return STATUS_BUSY;
 8006ec8:	2002      	movs	r0, #2
 8006eca:	4770      	bx	lr
    }
    else if ( g_isGpioMode ) {
        return STATUS_S2PI_GPIO_MODE;
    }
    else {
        return STATUS_IDLE;
 8006ecc:	2000      	movs	r0, #0
    }
}
 8006ece:	4770      	bx	lr
 8006ed0:	200030d9 	.word	0x200030d9
 8006ed4:	200030da 	.word	0x200030da

08006ed8 <S2PI_TransferFrame>:
                             uint8_t const*  txData,
                             uint8_t*        rxData,
                             size_t          frameSize,
                             s2pi_callback_t callback,
                             void*           callbackData )
{
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uassert( txData );
 8006eda:	b929      	cbnz	r1, 8006ee8 <S2PI_TransferFrame+0x10>
 8006edc:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <S2PI_TransferFrame+0xec>)
 8006ede:	4a3a      	ldr	r2, [pc, #232]	; (8006fc8 <S2PI_TransferFrame+0xf0>)
 8006ee0:	21d8      	movs	r1, #216	; 0xd8
 8006ee2:	483a      	ldr	r0, [pc, #232]	; (8006fcc <S2PI_TransferFrame+0xf4>)
 8006ee4:	f001 fb1a 	bl	800851c <__assert_func>
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4616      	mov	r6, r2
 8006eec:	461d      	mov	r5, r3
 8006eee:	460f      	mov	r7, r1
    uassert( frameSize );
 8006ef0:	b92b      	cbnz	r3, 8006efe <S2PI_TransferFrame+0x26>
 8006ef2:	4b37      	ldr	r3, [pc, #220]	; (8006fd0 <S2PI_TransferFrame+0xf8>)
 8006ef4:	4a34      	ldr	r2, [pc, #208]	; (8006fc8 <S2PI_TransferFrame+0xf0>)
 8006ef6:	21d9      	movs	r1, #217	; 0xd9
 8006ef8:	4834      	ldr	r0, [pc, #208]	; (8006fcc <S2PI_TransferFrame+0xf4>)
 8006efa:	f001 fb0f 	bl	800851c <__assert_func>

    // print("T:%db \n", frameSize);

    status_t stat = S2PI_GetStatus();
 8006efe:	f7ff ffd7 	bl	8006eb0 <S2PI_GetStatus>

    if ( slave >= S2PI_SLAVE_MAX )
 8006f02:	2c01      	cmp	r4, #1
 8006f04:	dc5b      	bgt.n	8006fbe <S2PI_TransferFrame+0xe6>
        return ERROR_S2PI_INVALID_SLAVE;
    if ( stat != STATUS_IDLE )
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d15b      	bne.n	8006fc2 <S2PI_TransferFrame+0xea>
        return stat;

    IRQ_LOCK();
 8006f0a:	f000 f8ab 	bl	8007064 <IRQ_LOCK>
    g_activeSlave        = slave;
 8006f0e:	4b31      	ldr	r3, [pc, #196]	; (8006fd4 <S2PI_TransferFrame+0xfc>)
 8006f10:	601c      	str	r4, [r3, #0]
    struct slave_desc* s = (struct slave_desc*)&g_slaves[g_activeSlave];
 8006f12:	681c      	ldr	r4, [r3, #0]
    s->callback          = callback;
 8006f14:	4930      	ldr	r1, [pc, #192]	; (8006fd8 <S2PI_TransferFrame+0x100>)
 8006f16:	00a3      	lsls	r3, r4, #2
 8006f18:	4423      	add	r3, r4
 8006f1a:	0098      	lsls	r0, r3, #2
 8006f1c:	180b      	adds	r3, r1, r0
 8006f1e:	9a06      	ldr	r2, [sp, #24]
 8006f20:	609a      	str	r2, [r3, #8]
    s->callbackParam     = callbackData;
 8006f22:	9a07      	ldr	r2, [sp, #28]
 8006f24:	60da      	str	r2, [r3, #12]

    // Select slave. Deselect happens when transmission done.
    HAL_GPIO_WritePin( s->chipSelectPort, s->chipSelectPin, s->csActiveVal );
 8006f26:	799a      	ldrb	r2, [r3, #6]
 8006f28:	889b      	ldrh	r3, [r3, #4]
 8006f2a:	5808      	ldr	r0, [r1, r0]
 8006f2c:	b299      	uxth	r1, r3
 8006f2e:	f7fc f831 	bl	8002f94 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef res;
    status_t          retval;

    if ( rxData ) {
 8006f32:	b14e      	cbz	r6, 8006f48 <S2PI_TransferFrame+0x70>
#if !ASYNC_SPI
        res = HAL_SPI_TransmitReceive( &hspi1, (uint8_t*)txData, rxData, frameSize, 1000 );
#else
        res = HAL_SPI_TransmitReceive_DMA( &hspi1, (uint8_t*)txData, rxData, frameSize );
 8006f34:	b2ab      	uxth	r3, r5
 8006f36:	4632      	mov	r2, r6
 8006f38:	4639      	mov	r1, r7
 8006f3a:	4828      	ldr	r0, [pc, #160]	; (8006fdc <S2PI_TransferFrame+0x104>)
 8006f3c:	f7ff fd60 	bl	8006a00 <HAL_SPI_TransmitReceive_DMA>
#endif
        g_rxtxRunning = 2;
 8006f40:	2202      	movs	r2, #2
 8006f42:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <S2PI_TransferFrame+0x108>)
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	e007      	b.n	8006f58 <S2PI_TransferFrame+0x80>
    }
    else {
#if !ASYNC_SPI
        res = HAL_SPI_Transmit( &hspi1, (uint8_t*)txData, frameSize, 1000 );
#else
        res = HAL_SPI_Transmit_DMA( &hspi1, (uint8_t*)txData, frameSize );
 8006f48:	b2aa      	uxth	r2, r5
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	4823      	ldr	r0, [pc, #140]	; (8006fdc <S2PI_TransferFrame+0x104>)
 8006f4e:	f7ff fceb 	bl	8006928 <HAL_SPI_Transmit_DMA>
#endif
        g_rxtxRunning = 1;
 8006f52:	2201      	movs	r2, #1
 8006f54:	4b22      	ldr	r3, [pc, #136]	; (8006fe0 <S2PI_TransferFrame+0x108>)
 8006f56:	701a      	strb	r2, [r3, #0]
    }

    if ( res == HAL_OK ) {
 8006f58:	b360      	cbz	r0, 8006fb4 <S2PI_TransferFrame+0xdc>
        // print( "Sending %d bytes ... \n", frameSize );
        retval = STATUS_OK;
    }
    else if ( res == HAL_BUSY ) {
 8006f5a:	2802      	cmp	r0, #2
 8006f5c:	d114      	bne.n	8006f88 <S2PI_TransferFrame+0xb0>
        // print("Hal device is busy. \n" );
        retval = STATUS_BUSY;
        HAL_GPIO_WritePin( s->chipSelectPort, s->chipSelectPin, !s->csActiveVal );
 8006f5e:	481e      	ldr	r0, [pc, #120]	; (8006fd8 <S2PI_TransferFrame+0x100>)
 8006f60:	00a3      	lsls	r3, r4, #2
 8006f62:	1919      	adds	r1, r3, r4
 8006f64:	008a      	lsls	r2, r1, #2
 8006f66:	4402      	add	r2, r0
 8006f68:	7991      	ldrb	r1, [r2, #6]
 8006f6a:	f011 0fff 	tst.w	r1, #255	; 0xff
 8006f6e:	8891      	ldrh	r1, [r2, #4]
 8006f70:	441c      	add	r4, r3
 8006f72:	ea4f 0384 	mov.w	r3, r4, lsl #2
 8006f76:	58c0      	ldr	r0, [r0, r3]
 8006f78:	bf0c      	ite	eq
 8006f7a:	2201      	moveq	r2, #1
 8006f7c:	2200      	movne	r2, #0
 8006f7e:	b289      	uxth	r1, r1
 8006f80:	f7fc f808 	bl	8002f94 <HAL_GPIO_WritePin>
        // print( "Sending %d bytes ... \n", frameSize );
        retval = STATUS_OK;
    }
    else if ( res == HAL_BUSY ) {
        // print("Hal device is busy. \n" );
        retval = STATUS_BUSY;
 8006f84:	2402      	movs	r4, #2
 8006f86:	e016      	b.n	8006fb6 <S2PI_TransferFrame+0xde>
        HAL_GPIO_WritePin( s->chipSelectPort, s->chipSelectPin, !s->csActiveVal );
    }
    else {
        // print( "Transmit error. \n" );
        retval = ERROR_ABORTED;
        HAL_GPIO_WritePin( s->chipSelectPort, s->chipSelectPin, !s->csActiveVal );
 8006f88:	4a13      	ldr	r2, [pc, #76]	; (8006fd8 <S2PI_TransferFrame+0x100>)
 8006f8a:	00a0      	lsls	r0, r4, #2
 8006f8c:	1901      	adds	r1, r0, r4
 8006f8e:	008b      	lsls	r3, r1, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	7999      	ldrb	r1, [r3, #6]
 8006f94:	f011 0fff 	tst.w	r1, #255	; 0xff
 8006f98:	8899      	ldrh	r1, [r3, #4]
 8006f9a:	4404      	add	r4, r0
 8006f9c:	ea4f 0384 	mov.w	r3, r4, lsl #2
 8006fa0:	58d0      	ldr	r0, [r2, r3]
 8006fa2:	bf0c      	ite	eq
 8006fa4:	2201      	moveq	r2, #1
 8006fa6:	2200      	movne	r2, #0
 8006fa8:	b289      	uxth	r1, r1
 8006faa:	f7fb fff3 	bl	8002f94 <HAL_GPIO_WritePin>
        retval = STATUS_BUSY;
        HAL_GPIO_WritePin( s->chipSelectPort, s->chipSelectPin, !s->csActiveVal );
    }
    else {
        // print( "Transmit error. \n" );
        retval = ERROR_ABORTED;
 8006fae:	f06f 0401 	mvn.w	r4, #1
 8006fb2:	e000      	b.n	8006fb6 <S2PI_TransferFrame+0xde>
        g_rxtxRunning = 1;
    }

    if ( res == HAL_OK ) {
        // print( "Sending %d bytes ... \n", frameSize );
        retval = STATUS_OK;
 8006fb4:	2400      	movs	r4, #0
    if ( callback )
        QueueTimer( timer_cb__spi, s, 15 );
    g_rxtxRunning = 0;
#endif

    IRQ_UNLOCK();
 8006fb6:	f000 f859 	bl	800706c <IRQ_UNLOCK>
    return retval;
 8006fba:	4620      	mov	r0, r4
 8006fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    // print("T:%db \n", frameSize);

    status_t stat = S2PI_GetStatus();

    if ( slave >= S2PI_SLAVE_MAX )
        return ERROR_S2PI_INVALID_SLAVE;
 8006fbe:	f06f 0036 	mvn.w	r0, #54	; 0x36
    g_rxtxRunning = 0;
#endif

    IRQ_UNLOCK();
    return retval;
}
 8006fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc4:	0800ff8c 	.word	0x0800ff8c
 8006fc8:	0800ff78 	.word	0x0800ff78
 8006fcc:	0800ff94 	.word	0x0800ff94
 8006fd0:	0800ffb0 	.word	0x0800ffb0
 8006fd4:	200030dc 	.word	0x200030dc
 8006fd8:	200001ac 	.word	0x200001ac
 8006fdc:	20005af0 	.word	0x20005af0
 8006fe0:	200030d9 	.word	0x200030d9

08006fe4 <S2PI_Abort>:

status_t S2PI_Abort( void )
{
    // Abort is inavailable.
    return STATUS_OK;
}
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	4770      	bx	lr

08006fe8 <S2PI_CycleCsPin>:

status_t S2PI_CycleCsPin( s2pi_slave_t slave )
{
 8006fe8:	b570      	push	{r4, r5, r6, lr}
    struct slave_desc volatile* s = g_slaves + slave;
 8006fea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fee:	0085      	lsls	r5, r0, #2
 8006ff0:	4e0a      	ldr	r6, [pc, #40]	; (800701c <S2PI_CycleCsPin+0x34>)
 8006ff2:	1974      	adds	r4, r6, r5
    HAL_GPIO_WritePin( s->chipSelectPort, s->chipSelectPin, s->csActiveVal );
 8006ff4:	5970      	ldr	r0, [r6, r5]
 8006ff6:	88a1      	ldrh	r1, [r4, #4]
 8006ff8:	79a2      	ldrb	r2, [r4, #6]
 8006ffa:	b289      	uxth	r1, r1
 8006ffc:	f7fb ffca 	bl	8002f94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin( s->chipSelectPort, s->chipSelectPin, !s->csActiveVal );
 8007000:	5970      	ldr	r0, [r6, r5]
 8007002:	88a1      	ldrh	r1, [r4, #4]
 8007004:	79a3      	ldrb	r3, [r4, #6]
 8007006:	f013 0fff 	tst.w	r3, #255	; 0xff
 800700a:	bf0c      	ite	eq
 800700c:	2201      	moveq	r2, #1
 800700e:	2200      	movne	r2, #0
 8007010:	b289      	uxth	r1, r1
 8007012:	f7fb ffbf 	bl	8002f94 <HAL_GPIO_WritePin>
    return STATUS_OK;
}
 8007016:	2000      	movs	r0, #0
 8007018:	bd70      	pop	{r4, r5, r6, pc}
 800701a:	bf00      	nop
 800701c:	200001ac 	.word	0x200001ac

08007020 <EXTI1_IRQHandler>:
#include <stm32f4xx_hal.h>
static s2pi_irq_callback_t g_cbIrq;
static void*               g_cbIrqObj;

void EXTI1_IRQHandler( void )
{
 8007020:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT( GPIO_PIN_1 );
 8007022:	2202      	movs	r2, #2
 8007024:	4b06      	ldr	r3, [pc, #24]	; (8007040 <EXTI1_IRQHandler+0x20>)
 8007026:	615a      	str	r2, [r3, #20]
    if ( g_cbIrq ) {
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <EXTI1_IRQHandler+0x24>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	b13b      	cbz	r3, 800703e <EXTI1_IRQHandler+0x1e>
        print( "IRQ function call. \n" );
 800702e:	4806      	ldr	r0, [pc, #24]	; (8007048 <EXTI1_IRQHandler+0x28>)
 8007030:	f000 f820 	bl	8007074 <print>
        g_cbIrq( g_cbIrqObj );
 8007034:	4b03      	ldr	r3, [pc, #12]	; (8007044 <EXTI1_IRQHandler+0x24>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a04      	ldr	r2, [pc, #16]	; (800704c <EXTI1_IRQHandler+0x2c>)
 800703a:	6810      	ldr	r0, [r2, #0]
 800703c:	4798      	blx	r3
 800703e:	bd08      	pop	{r3, pc}
 8007040:	40013c00 	.word	0x40013c00
 8007044:	200030e0 	.word	0x200030e0
 8007048:	0800ffbc 	.word	0x0800ffbc
 800704c:	200030e4 	.word	0x200030e4

08007050 <S2PI_SetIrqCallback>:

status_t S2PI_SetIrqCallback( s2pi_slave_t        slave,
                              s2pi_irq_callback_t callback,
                              void*               callbackData )
{
    g_cbIrq    = callback;
 8007050:	4b02      	ldr	r3, [pc, #8]	; (800705c <S2PI_SetIrqCallback+0xc>)
 8007052:	6019      	str	r1, [r3, #0]
    g_cbIrqObj = callbackData;
 8007054:	4b02      	ldr	r3, [pc, #8]	; (8007060 <S2PI_SetIrqCallback+0x10>)
 8007056:	601a      	str	r2, [r3, #0]
    return STATUS_OK;
}
 8007058:	2000      	movs	r0, #0
 800705a:	4770      	bx	lr
 800705c:	200030e0 	.word	0x200030e0
 8007060:	200030e4 	.word	0x200030e4

08007064 <IRQ_LOCK>:
#include <FreeRTOS.h>
#include <platform/argus_irq.h>

void IRQ_LOCK( void )
{
 8007064:	b508      	push	{r3, lr}
    vPortEnterCritical();
 8007066:	f7fe fb85 	bl	8005774 <vPortEnterCritical>
 800706a:	bd08      	pop	{r3, pc}

0800706c <IRQ_UNLOCK>:
}

void IRQ_UNLOCK( void )
{
 800706c:	b508      	push	{r3, lr}
    vPortExitCritical();
 800706e:	f7fe fba3 	bl	80057b8 <vPortExitCritical>
 8007072:	bd08      	pop	{r3, pc}

08007074 <print>:
#include <platform/argus_log.h>
#include <stdarg.h>
#include <stdio.h>

status_t print( const char* fmt, ... )
{
 8007074:	b40f      	push	{r0, r1, r2, r3}
 8007076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	f107 0320 	add.w	r3, r7, #32
 8007080:	f853 5b04 	ldr.w	r5, [r3], #4
    va_list vp;
    va_list vp2;
    va_start( vp, fmt );
 8007084:	607b      	str	r3, [r7, #4]
    size_t allocsz = vsnprintf( NULL, 0, fmt, vp ) + 1;
 8007086:	462a      	mov	r2, r5
 8007088:	2100      	movs	r1, #0
 800708a:	4608      	mov	r0, r1
 800708c:	f001 ff6c 	bl	8008f68 <vsniprintf>
 8007090:	1c46      	adds	r6, r0, #1
    va_end( vp );

    va_copy( vp2, vp );
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	603a      	str	r2, [r7, #0]
    char* buf = (char*)alloca( allocsz );
 8007096:	300f      	adds	r0, #15
 8007098:	f020 0007 	bic.w	r0, r0, #7
 800709c:	ebad 0d00 	sub.w	sp, sp, r0
    vsprintf( buf, fmt, vp2 );
 80070a0:	4629      	mov	r1, r5
 80070a2:	4668      	mov	r0, sp
 80070a4:	f001 ff86 	bl	8008fb4 <vsiprintf>
    va_end( vp2 );

    API_SendHostString( buf, allocsz );
 80070a8:	4631      	mov	r1, r6
 80070aa:	4668      	mov	r0, sp
 80070ac:	f000 f9d6 	bl	800745c <API_SendHostString>
    return STATUS_OK;
}
 80070b0:	2000      	movs	r0, #0
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80070ba:	b004      	add	sp, #16
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop

080070c0 <ring_buffer_init>:
#include "uassert.h"
#include <stdlib.h>

void ring_buffer_init( ring_buffer_t* s, void* buff, size_t buffSz )
{
    s->buff = buff;
 80070c0:	6001      	str	r1, [r0, #0]
    s->cap  = buffSz;
 80070c2:	6042      	str	r2, [r0, #4]
    s->head = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	6083      	str	r3, [r0, #8]
    s->tail = 0;
 80070c8:	60c3      	str	r3, [r0, #12]
 80070ca:	4770      	bx	lr

080070cc <ring_buffer_write>:
}

void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
 80070cc:	b470      	push	{r4, r5, r6}
 80070ce:	b083      	sub	sp, #12
    const size_t nxt[2] = { -1, s->cap - 1 };
 80070d0:	f04f 33ff 	mov.w	r3, #4294967295
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	6843      	ldr	r3, [r0, #4]
 80070d8:	3b01      	subs	r3, #1
 80070da:	9301      	str	r3, [sp, #4]
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 80070dc:	2500      	movs	r5, #0
 80070de:	e012      	b.n	8007106 <ring_buffer_write+0x3a>
        s->buff[s->head] = ( (char const*)d )[i];
 80070e0:	6804      	ldr	r4, [r0, #0]
 80070e2:	6883      	ldr	r3, [r0, #8]
 80070e4:	5d4e      	ldrb	r6, [r1, r5]
 80070e6:	54e6      	strb	r6, [r4, r3]
void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 80070e8:	3501      	adds	r5, #1
 80070ea:	6884      	ldr	r4, [r0, #8]
 80070ec:	6843      	ldr	r3, [r0, #4]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	429c      	cmp	r4, r3
 80070f2:	bf14      	ite	ne
 80070f4:	2300      	movne	r3, #0
 80070f6:	2301      	moveq	r3, #1
 80070f8:	ae02      	add	r6, sp, #8
 80070fa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070fe:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8007102:	1ae4      	subs	r4, r4, r3
 8007104:	6084      	str	r4, [r0, #8]
 8007106:	4295      	cmp	r5, r2
 8007108:	d3ea      	bcc.n	80070e0 <ring_buffer_write+0x14>
        s->buff[s->head] = ( (char const*)d )[i];
    }
}
 800710a:	b003      	add	sp, #12
 800710c:	bc70      	pop	{r4, r5, r6}
 800710e:	4770      	bx	lr

08007110 <ring_buffer_consume>:

void ring_buffer_consume( ring_buffer_t* s, size_t len )
{
    s->tail += len;
 8007110:	68c3      	ldr	r3, [r0, #12]
 8007112:	4419      	add	r1, r3
 8007114:	60c1      	str	r1, [r0, #12]

    if ( s->tail >= s->cap ) {
 8007116:	6843      	ldr	r3, [r0, #4]
 8007118:	4299      	cmp	r1, r3
 800711a:	d301      	bcc.n	8007120 <ring_buffer_consume+0x10>
        s->tail = s->tail - s->cap;
 800711c:	1ac9      	subs	r1, r1, r3
 800711e:	60c1      	str	r1, [r0, #12]
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop

08007124 <ring_buffer_peek>:
    }
}

void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
 8007124:	b530      	push	{r4, r5, lr}
 8007126:	b083      	sub	sp, #12
    const size_t nxt[2] = { -1, s->cap - 1 };
 8007128:	f04f 33ff 	mov.w	r3, #4294967295
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	6843      	ldr	r3, [r0, #4]
 8007130:	3b01      	subs	r3, #1
 8007132:	9301      	str	r3, [sp, #4]
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8007134:	68c5      	ldr	r5, [r0, #12]
 8007136:	2400      	movs	r4, #0
 8007138:	e010      	b.n	800715c <ring_buffer_peek+0x38>
        ( (char*)b )[i] = s->buff[t];
 800713a:	6803      	ldr	r3, [r0, #0]
 800713c:	5d5b      	ldrb	r3, [r3, r5]
 800713e:	550b      	strb	r3, [r1, r4]
void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8007140:	3401      	adds	r4, #1
 8007142:	6843      	ldr	r3, [r0, #4]
 8007144:	3b01      	subs	r3, #1
 8007146:	429d      	cmp	r5, r3
 8007148:	bf14      	ite	ne
 800714a:	2300      	movne	r3, #0
 800714c:	2301      	moveq	r3, #1
 800714e:	f10d 0e08 	add.w	lr, sp, #8
 8007152:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8007156:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800715a:	1aed      	subs	r5, r5, r3
 800715c:	4294      	cmp	r4, r2
 800715e:	d3ec      	bcc.n	800713a <ring_buffer_peek+0x16>
        ( (char*)b )[i] = s->buff[t];
    }
}
 8007160:	b003      	add	sp, #12
 8007162:	bd30      	pop	{r4, r5, pc}

08007164 <ring_buffer_size>:

size_t ring_buffer_size( ring_buffer_t const* s )
{
    if ( s->head >= s->tail )
 8007164:	6883      	ldr	r3, [r0, #8]
 8007166:	68c2      	ldr	r2, [r0, #12]
 8007168:	4293      	cmp	r3, r2
 800716a:	d301      	bcc.n	8007170 <ring_buffer_size+0xc>
        return s->head - s->tail;
 800716c:	1a98      	subs	r0, r3, r2
 800716e:	4770      	bx	lr
    else
        return s->cap - s->tail + s->head;
 8007170:	6840      	ldr	r0, [r0, #4]
 8007172:	1a80      	subs	r0, r0, r2
 8007174:	4418      	add	r0, r3
}
 8007176:	4770      	bx	lr

08007178 <API_Log>:

    API_Log( buf );
}

extern "C" int API_Log( char const* txt )
{
 8007178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800717a:	b085      	sub	sp, #20
 800717c:	4604      	mov	r4, r0
    auto t = API_GetTime_us();
 800717e:	f000 fb87 	bl	8007890 <API_GetTime_us>
 8007182:	4606      	mov	r6, r0
 8007184:	460f      	mov	r7, r1
    char buf[16];
    sprintf( buf, "[%6u.%06u]", ( uint32_t )( t / 1000000u ), ( uint32_t )( t % 1000000u ) );
 8007186:	4a0f      	ldr	r2, [pc, #60]	; (80071c4 <API_Log+0x4c>)
 8007188:	2300      	movs	r3, #0
 800718a:	f7f9 f8bb 	bl	8000304 <__aeabi_uldivmod>
 800718e:	4605      	mov	r5, r0
 8007190:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <API_Log+0x4c>)
 8007192:	2300      	movs	r3, #0
 8007194:	4630      	mov	r0, r6
 8007196:	4639      	mov	r1, r7
 8007198:	f7f9 f8b4 	bl	8000304 <__aeabi_uldivmod>
 800719c:	4613      	mov	r3, r2
 800719e:	462a      	mov	r2, r5
 80071a0:	4909      	ldr	r1, [pc, #36]	; (80071c8 <API_Log+0x50>)
 80071a2:	4668      	mov	r0, sp
 80071a4:	f001 fdf2 	bl	8008d8c <siprintf>
    API_SendHostString( buf, sizeof( buf ) );
 80071a8:	2110      	movs	r1, #16
 80071aa:	4668      	mov	r0, sp
 80071ac:	f000 f956 	bl	800745c <API_SendHostString>
    API_SendHostString( txt, strlen( txt ) + 1 );
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7f9 f823 	bl	80001fc <strlen>
 80071b6:	1c41      	adds	r1, r0, #1
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 f94f 	bl	800745c <API_SendHostString>
    return 0;
}
 80071be:	2000      	movs	r0, #0
 80071c0:	b005      	add	sp, #20
 80071c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c4:	000f4240 	.word	0x000f4240
 80071c8:	0800ffd4 	.word	0x0800ffd4

080071cc <API_Logf>:
}

/////////////////////////////////////////////////////////////////////////////
// Globals
extern "C" void API_Logf( char const* fmt, ... )
{
 80071cc:	b40f      	push	{r0, r1, r2, r3}
 80071ce:	b5b0      	push	{r4, r5, r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	f107 0318 	add.w	r3, r7, #24
 80071d8:	f853 5b04 	ldr.w	r5, [r3], #4
    va_list vp;
    va_list vp2;
    va_start( vp, fmt );
 80071dc:	607b      	str	r3, [r7, #4]
    size_t allocsz = vsnprintf( NULL, 0, fmt, vp ) + 1;
 80071de:	462a      	mov	r2, r5
 80071e0:	2100      	movs	r1, #0
 80071e2:	4608      	mov	r0, r1
 80071e4:	f001 fec0 	bl	8008f68 <vsniprintf>
    va_end( vp );

    va_copy( vp2, vp );
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	603a      	str	r2, [r7, #0]
    char* buf = (char*)alloca( allocsz );
 80071ec:	300f      	adds	r0, #15
 80071ee:	f020 0007 	bic.w	r0, r0, #7
 80071f2:	ebad 0d00 	sub.w	sp, sp, r0
    vsprintf( buf, fmt, vp2 );
 80071f6:	4629      	mov	r1, r5
 80071f8:	4668      	mov	r0, sp
 80071fa:	f001 fedb 	bl	8008fb4 <vsiprintf>
    va_end( vp2 );

    API_Log( buf );
 80071fe:	4668      	mov	r0, sp
 8007200:	f7ff ffba 	bl	8007178 <API_Log>
}
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800720c:	b004      	add	sp, #16
 800720e:	4770      	bx	lr

08007210 <StartDefaultTask>:
// - Launches host communication process
// - Launches command queue/procedure process
// - Initializes hi-precision hardware timer
// - Initializes motor control logic
extern "C" void StartDefaultTask( void* nouse_ )
{
 8007210:	b508      	push	{r3, lr}
    InitHW();
 8007212:	f7ff fda5 	bl	8006d60 <InitHW>
    InitRW();
 8007216:	f7ff fd9b 	bl	8006d50 <InitRW>

    // launch hw timer manager
    //! @todo. implement this

    // this function never returns.
    AppProc_HostIO( NULL );
 800721a:	2000      	movs	r0, #0
 800721c:	f000 f8da 	bl	80073d4 <AppProc_HostIO>

08007220 <AppHandler_CaptureCommand>:
// Statics for capture

#define STRHASH(str) upp::hash::fnv1a_32_const(#str)

extern "C" bool AppHandler_CaptureCommand( int argc, char* argv[] )
{
 8007220:	b508      	push	{r3, lr}
    switch ( upp::hash::fnv1a_32( argv[0] ) ) {
 8007222:	680b      	ldr	r3, [r1, #0]
{
    const char* data  = (char*)key;
    uint32_t    hash  = 0x811c9dc5;
    uint32_t    prime = 0x1000193;

    for ( ; *data; ++data ) {
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	b10a      	cbz	r2, 800722c <AppHandler_CaptureCommand+0xc>
 8007228:	3301      	adds	r3, #1
 800722a:	e7fb      	b.n	8007224 <AppHandler_CaptureCommand+0x4>
        break;
    default:
        break;
    }

    auto hnd = Argus_CreateHandle();
 800722c:	f002 fe8e 	bl	8009f4c <Argus_CreateHandle>
    Argus_Init( hnd, S2PI_SLAVE_ARGUS );
 8007230:	2101      	movs	r1, #1
 8007232:	f002 fe27 	bl	8009e84 <Argus_Init>

    return true;
}
 8007236:	2001      	movs	r0, #1
 8007238:	bd08      	pop	{r3, pc}
 800723a:	bf00      	nop

0800723c <AppHandler_CaptureBinary>:

extern "C" bool AppHandler_CaptureBinary( char* data, size_t len )
{
    return true;
}
 800723c:	2001      	movs	r0, #1
 800723e:	4770      	bx	lr

08007240 <_ZL14stringToTokensPcPS_j>:
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
    // Consume all initial spaces
    while ( *str == ' ' )
 8007240:	7803      	ldrb	r3, [r0, #0]
 8007242:	2b20      	cmp	r3, #32
 8007244:	d101      	bne.n	800724a <_ZL14stringToTokensPcPS_j+0xa>
        ++str;
 8007246:	3001      	adds	r0, #1
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
    // Consume all initial spaces
    while ( *str == ' ' )
 8007248:	e7fa      	b.n	8007240 <_ZL14stringToTokensPcPS_j>
        ++str;

    // Ignore space-only string.
    if ( *str == 0 )
 800724a:	b1eb      	cbz	r3, 8007288 <_ZL14stringToTokensPcPS_j+0x48>

    API_Log( "warning: failed to process binary data\n" );
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
 800724c:	b470      	push	{r4, r5, r6}
 800724e:	4603      	mov	r3, r0
 8007250:	2400      	movs	r4, #0
 8007252:	e001      	b.n	8007258 <_ZL14stringToTokensPcPS_j+0x18>

        argv[num_token++] = str;
        if ( *head == 0 )
            break;

        for ( *head = 0; *++head == ' '; ) { }
 8007254:	4603      	mov	r3, r0
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 8007256:	4634      	mov	r4, r6
        return 0;

    int   num_token = 0;
    char* head      = str;

    for ( ; num_token < (int)argv_len; ) {
 8007258:	4294      	cmp	r4, r2
 800725a:	da17      	bge.n	800728c <_ZL14stringToTokensPcPS_j+0x4c>
        if ( *head != ' ' && *head != '\0' ) {
 800725c:	781d      	ldrb	r5, [r3, #0]
 800725e:	2d20      	cmp	r5, #32
 8007260:	d002      	beq.n	8007268 <_ZL14stringToTokensPcPS_j+0x28>
 8007262:	b10d      	cbz	r5, 8007268 <_ZL14stringToTokensPcPS_j+0x28>
            ++head;
 8007264:	3301      	adds	r3, #1
            continue;
 8007266:	e7f7      	b.n	8007258 <_ZL14stringToTokensPcPS_j+0x18>
        }

        argv[num_token++] = str;
 8007268:	1c66      	adds	r6, r4, #1
 800726a:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
        if ( *head == 0 )
 800726e:	781d      	ldrb	r5, [r3, #0]
 8007270:	b175      	cbz	r5, 8007290 <_ZL14stringToTokensPcPS_j+0x50>
            break;

        for ( *head = 0; *++head == ' '; ) { }
 8007272:	2000      	movs	r0, #0
 8007274:	7018      	strb	r0, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800727c:	2b20      	cmp	r3, #32
 800727e:	d0fb      	beq.n	8007278 <_ZL14stringToTokensPcPS_j+0x38>

        if ( *head == 0 )
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e7      	bne.n	8007254 <_ZL14stringToTokensPcPS_j+0x14>
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 8007284:	4630      	mov	r0, r6
 8007286:	e004      	b.n	8007292 <_ZL14stringToTokensPcPS_j+0x52>
    while ( *str == ' ' )
        ++str;

    // Ignore space-only string.
    if ( *str == 0 )
        return 0;
 8007288:	2000      	movs	r0, #0

        str = head; // Non-space character pos
    }

    return num_token;
}
 800728a:	4770      	bx	lr
 800728c:	4620      	mov	r0, r4
 800728e:	e000      	b.n	8007292 <_ZL14stringToTokensPcPS_j+0x52>
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 8007290:	4630      	mov	r0, r6

        str = head; // Non-space character pos
    }

    return num_token;
}
 8007292:	bc70      	pop	{r4, r5, r6}
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop

08007298 <_ZL17flushTransmitDatav>:
    memcpy( s_hostTrBuf + s_hostTrBufHead - len, d, len );
    --s_writingTask;
}

void flushTransmitData()
{
 8007298:	b538      	push	{r3, r4, r5, lr}
    if ( s_hostTrBufHead == 0 )
 800729a:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <_ZL17flushTransmitDatav+0x40>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	b1d3      	cbz	r3, 80072d6 <_ZL17flushTransmitDatav+0x3e>
        return;

    // Wait for all async write process done
    while ( s_writingTask > 0 )
 80072a0:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <_ZL17flushTransmitDatav+0x44>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd08      	ble.n	80072ba <_ZL17flushTransmitDatav+0x22>
        taskYIELD();
 80072a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <_ZL17flushTransmitDatav+0x48>)
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
{
    if ( s_hostTrBufHead == 0 )
        return;

    // Wait for all async write process done
    while ( s_writingTask > 0 )
 80072b8:	e7f2      	b.n	80072a0 <_ZL17flushTransmitDatav+0x8>
        taskYIELD();

    s_bFlushing = true;
 80072ba:	4c0a      	ldr	r4, [pc, #40]	; (80072e4 <_ZL17flushTransmitDatav+0x4c>)
 80072bc:	2301      	movs	r3, #1
 80072be:	7023      	strb	r3, [r4, #0]
    td_write( gHostConnection, s_hostTrBuf, s_hostTrBufHead );
 80072c0:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <_ZL17flushTransmitDatav+0x50>)
 80072c2:	6818      	ldr	r0, [r3, #0]
 80072c4:	4d04      	ldr	r5, [pc, #16]	; (80072d8 <_ZL17flushTransmitDatav+0x40>)
}

//! Write data into the transceiver
static inline transceiver_result_t td_write( transceiver_handle_t desc, char* buf, size_t wrcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 80072c6:	6803      	ldr	r3, [r0, #0]
    return td->write( (void*)desc, buf, wrcnt );
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	682a      	ldr	r2, [r5, #0]
 80072cc:	4907      	ldr	r1, [pc, #28]	; (80072ec <_ZL17flushTransmitDatav+0x54>)
 80072ce:	4798      	blx	r3
    s_hostTrBufHead = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	602b      	str	r3, [r5, #0]
    s_bFlushing     = false;
 80072d4:	7023      	strb	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	20003108 	.word	0x20003108
 80072dc:	2000410c 	.word	0x2000410c
 80072e0:	e000ed04 	.word	0xe000ed04
 80072e4:	200030e8 	.word	0x200030e8
 80072e8:	200066cc 	.word	0x200066cc
 80072ec:	2000310c 	.word	0x2000310c

080072f0 <_ZZL16stringCmdHandlerPcjENUlPvE_4_FUNES0_>:
        ti.init  = API_GetTime_us();
        ti.cnt   = 0;
        ti.num   = num;
        ti.delay = delay;

        auto timer_cb = []( void* beg ) {
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4604      	mov	r4, r0
            auto&    t       = *(TI*)beg;
            uint64_t init    = t.init;
 80072f4:	6805      	ldr	r5, [r0, #0]
            uint64_t now     = API_GetTime_us();
 80072f6:	f000 facb 	bl	8007890 <API_GetTime_us>
            int      elapsed = now - init;
 80072fa:	1b42      	subs	r2, r0, r5

            API_Logf(
                "<%3d> %d us (error %d us)\n",
                t.cnt,
                elapsed,
                elapsed - ( t.delay * ( t.cnt + 1 ) ) );
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	68a1      	ldr	r1, [r4, #8]
 8007300:	fb01 3303 	mla	r3, r1, r3, r3
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	4803      	ldr	r0, [pc, #12]	; (8007314 <_ZZL16stringCmdHandlerPcjENUlPvE_4_FUNES0_+0x24>)
 8007308:	f7ff ff60 	bl	80071cc <API_Logf>

            t.cnt++;
 800730c:	68a3      	ldr	r3, [r4, #8]
 800730e:	3301      	adds	r3, #1
 8007310:	60a3      	str	r3, [r4, #8]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	08010008 	.word	0x08010008

08007318 <_ZL12readHostConnPvj>:
}

/////////////////////////////////////////////////////////////////////////////
// Utility defs
bool readHostConn( void* dst, size_t len )
{
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	4606      	mov	r6, r0
 800731c:	460d      	mov	r5, r1
    size_t numRetries = 5;
 800731e:	2705      	movs	r7, #5
    for ( ; numRetries; ) {
 8007320:	b1cf      	cbz	r7, 8007356 <_ZL12readHostConnPvj+0x3e>
        // Flush transmit data before try read
        flushTransmitData();
 8007322:	f7ff ffb9 	bl	8007298 <_ZL17flushTransmitDatav>

        auto result = td_read( gHostConnection, (char*)dst, len );
 8007326:	4b0d      	ldr	r3, [pc, #52]	; (800735c <_ZL12readHostConnPvj+0x44>)
 8007328:	6818      	ldr	r0, [r3, #0]
typedef intptr_t transceiver_handle_t;

//! Read data from the transceiver.
static inline transceiver_result_t td_read( transceiver_handle_t desc, char* buf, size_t rdcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 800732a:	6803      	ldr	r3, [r0, #0]
    return td->read( (void*)desc, buf, rdcnt );
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	462a      	mov	r2, r5
 8007330:	4631      	mov	r1, r6
 8007332:	4798      	blx	r3

        // If there's nothing to read, sleep for 1 cycle
        if ( result == 0 ) {
 8007334:	4604      	mov	r4, r0
 8007336:	b918      	cbnz	r0, 8007340 <_ZL12readHostConnPvj+0x28>
            vTaskDelay( 1 );
 8007338:	2001      	movs	r0, #1
 800733a:	f7fd fb0d 	bl	8004958 <vTaskDelay>
            continue;
 800733e:	e7ef      	b.n	8007320 <_ZL12readHostConnPvj+0x8>
        }
        else if ( result < 0 ) {
 8007340:	2800      	cmp	r0, #0
 8007342:	da03      	bge.n	800734c <_ZL12readHostConnPvj+0x34>
            vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8007344:	200a      	movs	r0, #10
 8007346:	f7fd fb07 	bl	8004958 <vTaskDelay>
            --numRetries;
 800734a:	3f01      	subs	r7, #1
        }

        len -= result;
        dst = (char*)dst + result;
 800734c:	4426      	add	r6, r4

        if ( len == 0 ) {
 800734e:	1b2d      	subs	r5, r5, r4
 8007350:	d1e6      	bne.n	8007320 <_ZL12readHostConnPvj+0x8>
            return true;
 8007352:	2001      	movs	r0, #1
 8007354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }
    return false;
 8007356:	2000      	movs	r0, #0
}
 8007358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800735a:	bf00      	nop
 800735c:	200066cc 	.word	0x200066cc

08007360 <_ZL13apndToHostBufPKvj>:

    return num_token;
}

void apndToHostBuf( void const* d, size_t len )
{
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	4606      	mov	r6, r0
 8007364:	460d      	mov	r5, r1
    uassert( s_hostTrBufHead + len < sizeof( s_hostTrBuf ) );
 8007366:	4b14      	ldr	r3, [pc, #80]	; (80073b8 <_ZL13apndToHostBufPKvj+0x58>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	440b      	add	r3, r1
 800736c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007370:	d306      	bcc.n	8007380 <_ZL13apndToHostBufPKvj+0x20>
 8007372:	4b12      	ldr	r3, [pc, #72]	; (80073bc <_ZL13apndToHostBufPKvj+0x5c>)
 8007374:	4a12      	ldr	r2, [pc, #72]	; (80073c0 <_ZL13apndToHostBufPKvj+0x60>)
 8007376:	f44f 7183 	mov.w	r1, #262	; 0x106
 800737a:	4812      	ldr	r0, [pc, #72]	; (80073c4 <_ZL13apndToHostBufPKvj+0x64>)
 800737c:	f001 f8ce 	bl	800851c <__assert_func>

    while ( s_bFlushing )
 8007380:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <_ZL13apndToHostBufPKvj+0x68>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007388:	d003      	beq.n	8007392 <_ZL13apndToHostBufPKvj+0x32>
        vTaskDelay( 1 );
 800738a:	2001      	movs	r0, #1
 800738c:	f7fd fae4 	bl	8004958 <vTaskDelay>

void apndToHostBuf( void const* d, size_t len )
{
    uassert( s_hostTrBufHead + len < sizeof( s_hostTrBuf ) );

    while ( s_bFlushing )
 8007390:	e7f6      	b.n	8007380 <_ZL13apndToHostBufPKvj+0x20>
        vTaskDelay( 1 );

    ++s_writingTask;
 8007392:	4c0e      	ldr	r4, [pc, #56]	; (80073cc <_ZL13apndToHostBufPKvj+0x6c>)
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	3301      	adds	r3, #1
 8007398:	6023      	str	r3, [r4, #0]
    s_hostTrBufHead += len;
 800739a:	4a07      	ldr	r2, [pc, #28]	; (80073b8 <_ZL13apndToHostBufPKvj+0x58>)
 800739c:	6813      	ldr	r3, [r2, #0]
 800739e:	18e9      	adds	r1, r5, r3
 80073a0:	6011      	str	r1, [r2, #0]
    memcpy( s_hostTrBuf + s_hostTrBufHead - len, d, len );
 80073a2:	462a      	mov	r2, r5
 80073a4:	4631      	mov	r1, r6
 80073a6:	480a      	ldr	r0, [pc, #40]	; (80073d0 <_ZL13apndToHostBufPKvj+0x70>)
 80073a8:	4418      	add	r0, r3
 80073aa:	f001 f93e 	bl	800862a <memcpy>
    --s_writingTask;
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	bd70      	pop	{r4, r5, r6, pc}
 80073b6:	bf00      	nop
 80073b8:	20003108 	.word	0x20003108
 80073bc:	08010024 	.word	0x08010024
 80073c0:	0800ffe0 	.word	0x0800ffe0
 80073c4:	08010054 	.word	0x08010054
 80073c8:	200030e8 	.word	0x200030e8
 80073cc:	2000410c 	.word	0x2000410c
 80073d0:	2000310c 	.word	0x2000310c

080073d4 <AppProc_HostIO>:
static bool readHostConn( void* dst, size_t len );

/////////////////////////////////////////////////////////////////////////////
// Primary Procedure
extern "C" _Noreturn void AppProc_HostIO( void* nouse_ )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
        if ( readHostConn( buf, len ) == false )
            continue;

        // Call command procedure
        ( PACKET_IS_STR( packet ) ? stringCmdHandler : binaryCmdHandler )( buf, len );
    }
 80073da:	466c      	mov	r4, sp
{
    packetinfo_t packet;

    for ( ;; ) {
        // Check if read data has valid protocol.
        if ( readHostConn( &packet, PACKET_SIZE ) == false )
 80073dc:	2104      	movs	r1, #4
 80073de:	1878      	adds	r0, r7, r1
 80073e0:	f7ff ff9a 	bl	8007318 <_ZL12readHostConnPvj>
 80073e4:	b1f8      	cbz	r0, 8007426 <AppProc_HostIO+0x52>
            continue;

        // Check packet validity
        // If any data was delivered in bad condition, it'll consume all pending bytes.
        if ( PACKET_IS_PACKET( packet ) == false )
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 80073ec:	f1b3 4f68 	cmp.w	r3, #3892314112	; 0xe8000000
 80073f0:	d119      	bne.n	8007426 <AppProc_HostIO+0x52>
            continue;

        // Should be aware of maximum stack depth!
        // Packet size must be less than 2kByte at once
        // Allocate packet receive memory using VLA
        auto len = PACKET_LENGTH( packet );
 80073f2:	f3c1 0516 	ubfx	r5, r1, #0, #23
        char buf[len + 1];
 80073f6:	f105 0308 	add.w	r3, r5, #8
 80073fa:	f023 0307 	bic.w	r3, r3, #7
 80073fe:	ebad 0d03 	sub.w	sp, sp, r3
 8007402:	466e      	mov	r6, sp
        if ( readHostConn( buf, len ) == false )
 8007404:	4629      	mov	r1, r5
 8007406:	4668      	mov	r0, sp
 8007408:	f7ff ff86 	bl	8007318 <_ZL12readHostConnPvj>
 800740c:	b158      	cbz	r0, 8007426 <AppProc_HostIO+0x52>
            continue;

        // Call command procedure
        ( PACKET_IS_STR( packet ) ? stringCmdHandler : binaryCmdHandler )( buf, len );
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007414:	d001      	beq.n	800741a <AppProc_HostIO+0x46>
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <AppProc_HostIO+0x58>)
 8007418:	e000      	b.n	800741c <AppProc_HostIO+0x48>
 800741a:	4b05      	ldr	r3, [pc, #20]	; (8007430 <AppProc_HostIO+0x5c>)
 800741c:	4629      	mov	r1, r5
 800741e:	4630      	mov	r0, r6
 8007420:	4798      	blx	r3
 8007422:	46a5      	mov	sp, r4
 8007424:	e7d9      	b.n	80073da <AppProc_HostIO+0x6>
    packetinfo_t packet;

    for ( ;; ) {
        // Check if read data has valid protocol.
        if ( readHostConn( &packet, PACKET_SIZE ) == false )
            continue;
 8007426:	46a5      	mov	sp, r4
 8007428:	e7d7      	b.n	80073da <AppProc_HostIO+0x6>
 800742a:	bf00      	nop
 800742c:	08007489 	.word	0x08007489
 8007430:	080075f5 	.word	0x080075f5

08007434 <API_SendHostBinary>:
}

/////////////////////////////////////////////////////////////////////////////
// Global function defs
void API_SendHostBinary( void const* data, size_t len )
{
 8007434:	b530      	push	{r4, r5, lr}
 8007436:	b083      	sub	sp, #12
 8007438:	4605      	mov	r5, r0
 800743a:	460c      	mov	r4, r1
    packetinfo_t packet = PACKET_MAKE( false, len );
 800743c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8007440:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
 8007444:	a802      	add	r0, sp, #8
 8007446:	f840 3d04 	str.w	r3, [r0, #-4]!
    apndToHostBuf( &packet, sizeof packet );
 800744a:	2104      	movs	r1, #4
 800744c:	f7ff ff88 	bl	8007360 <_ZL13apndToHostBufPKvj>
    apndToHostBuf( data, len );
 8007450:	4621      	mov	r1, r4
 8007452:	4628      	mov	r0, r5
 8007454:	f7ff ff84 	bl	8007360 <_ZL13apndToHostBufPKvj>
}
 8007458:	b003      	add	sp, #12
 800745a:	bd30      	pop	{r4, r5, pc}

0800745c <API_SendHostString>:

void API_SendHostString( void const* data, size_t len )
{
 800745c:	b530      	push	{r4, r5, lr}
 800745e:	b083      	sub	sp, #12
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
    packetinfo_t packet = PACKET_MAKE( true, len );
 8007464:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8007468:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
 800746c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007470:	a802      	add	r0, sp, #8
 8007472:	f840 3d04 	str.w	r3, [r0, #-4]!
    apndToHostBuf( &packet, sizeof packet );
 8007476:	2104      	movs	r1, #4
 8007478:	f7ff ff72 	bl	8007360 <_ZL13apndToHostBufPKvj>
    apndToHostBuf( data, len );
 800747c:	4621      	mov	r1, r4
 800747e:	4628      	mov	r0, r5
 8007480:	f7ff ff6e 	bl	8007360 <_ZL13apndToHostBufPKvj>
}
 8007484:	b003      	add	sp, #12
 8007486:	bd30      	pop	{r4, r5, pc}

08007488 <_ZL16stringCmdHandlerPcj>:

/////////////////////////////////////////////////////////////////////////////
//

void stringCmdHandler( char* str, size_t len )
{
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	b09d      	sub	sp, #116	; 0x74
    // Append last byte as null ch
    str[len + 1] = '\0';
 800748e:	3101      	adds	r1, #1
 8007490:	2200      	movs	r2, #0
 8007492:	5442      	strb	r2, [r0, r1]

    // Make tokens from string ... Maximum token = 16
    char* argv[16];
    int   argc = stringToTokens( str, argv, sizeof( argv ) / sizeof( *argv ) );
 8007494:	2210      	movs	r2, #16
 8007496:	a903      	add	r1, sp, #12
 8007498:	f7ff fed2 	bl	8007240 <_ZL14stringToTokensPcPS_j>

    if ( argc == 0 )
 800749c:	2800      	cmp	r0, #0
 800749e:	f000 808e 	beq.w	80075be <_ZL16stringCmdHandlerPcj+0x136>
 80074a2:	4604      	mov	r4, r0
        return;

#define STRCASE( v ) upp::hash::fnv1a_32_const( v )

    switch ( upp::hash::fnv1a_32( argv[0] ) ) {
 80074a4:	9a03      	ldr	r2, [sp, #12]
}

inline const uint32_t fnv1a_32( const void* key )
{
    const char* data  = (char*)key;
    uint32_t    hash  = 0x811c9dc5;
 80074a6:	4b47      	ldr	r3, [pc, #284]	; (80075c4 <_ZL16stringCmdHandlerPcj+0x13c>)
    uint32_t    prime = 0x1000193;

    for ( ; *data; ++data ) {
 80074a8:	7811      	ldrb	r1, [r2, #0]
 80074aa:	b129      	cbz	r1, 80074b8 <_ZL16stringCmdHandlerPcj+0x30>
        hash = hash ^ *data;
 80074ac:	404b      	eors	r3, r1
        hash *= prime;
 80074ae:	4946      	ldr	r1, [pc, #280]	; (80075c8 <_ZL16stringCmdHandlerPcj+0x140>)
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
{
    const char* data  = (char*)key;
    uint32_t    hash  = 0x811c9dc5;
    uint32_t    prime = 0x1000193;

    for ( ; *data; ++data ) {
 80074b4:	3201      	adds	r2, #1
 80074b6:	e7f7      	b.n	80074a8 <_ZL16stringCmdHandlerPcj+0x20>
 80074b8:	4a44      	ldr	r2, [pc, #272]	; (80075cc <_ZL16stringCmdHandlerPcj+0x144>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <_ZL16stringCmdHandlerPcj+0x4e>
 80074be:	d803      	bhi.n	80074c8 <_ZL16stringCmdHandlerPcj+0x40>
 80074c0:	4a43      	ldr	r2, [pc, #268]	; (80075d0 <_ZL16stringCmdHandlerPcj+0x148>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d072      	beq.n	80075ac <_ZL16stringCmdHandlerPcj+0x124>
 80074c6:	e076      	b.n	80075b6 <_ZL16stringCmdHandlerPcj+0x12e>
 80074c8:	4a42      	ldr	r2, [pc, #264]	; (80075d4 <_ZL16stringCmdHandlerPcj+0x14c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d06a      	beq.n	80075a4 <_ZL16stringCmdHandlerPcj+0x11c>
 80074ce:	4a42      	ldr	r2, [pc, #264]	; (80075d8 <_ZL16stringCmdHandlerPcj+0x150>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d074      	beq.n	80075be <_ZL16stringCmdHandlerPcj+0x136>
 80074d4:	e06f      	b.n	80075b6 <_ZL16stringCmdHandlerPcj+0x12e>
        static struct TI {
            uint64_t init;
            int      cnt = 0;
            int      num = 0;
            int      delay;
        } ti;
 80074d6:	4b41      	ldr	r3, [pc, #260]	; (80075dc <_ZL16stringCmdHandlerPcj+0x154>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f013 0f01 	tst.w	r3, #1
 80074de:	d106      	bne.n	80074ee <_ZL16stringCmdHandlerPcj+0x66>
    switch ( upp::hash::fnv1a_32( argv[0] ) ) {
    case STRCASE( "env-report" ): {
    } break;

    case STRCASE( "test-timer" ): {
        static struct TI {
 80074e0:	4b3f      	ldr	r3, [pc, #252]	; (80075e0 <_ZL16stringCmdHandlerPcj+0x158>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	609a      	str	r2, [r3, #8]
 80074e6:	60da      	str	r2, [r3, #12]
            uint64_t init;
            int      cnt = 0;
            int      num = 0;
            int      delay;
        } ti;
 80074e8:	2201      	movs	r2, #1
 80074ea:	4b3c      	ldr	r3, [pc, #240]	; (80075dc <_ZL16stringCmdHandlerPcj+0x154>)
 80074ec:	601a      	str	r2, [r3, #0]
        int num = 1, delay = 1;

        if ( argc >= 2 )
 80074ee:	2c01      	cmp	r4, #1
 80074f0:	dd15      	ble.n	800751e <_ZL16stringCmdHandlerPcj+0x96>
            num = std::min( NUM_MAX_HWTIMER_NODE, std::max( 1, atoi( argv[1] ) ) );
 80074f2:	2328      	movs	r3, #40	; 0x28
 80074f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80074f6:	2301      	movs	r3, #1
 80074f8:	9314      	str	r3, [sp, #80]	; 0x50
 80074fa:	9804      	ldr	r0, [sp, #16]
 80074fc:	f001 f82c 	bl	8008558 <atoi>
 8007500:	9015      	str	r0, [sp, #84]	; 0x54
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007504:	4298      	cmp	r0, r3
 8007506:	dd01      	ble.n	800750c <_ZL16stringCmdHandlerPcj+0x84>
	return __b;
 8007508:	ab15      	add	r3, sp, #84	; 0x54
 800750a:	e000      	b.n	800750e <_ZL16stringCmdHandlerPcj+0x86>
      return __a;
 800750c:	ab14      	add	r3, sp, #80	; 0x50
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800750e:	6819      	ldr	r1, [r3, #0]
 8007510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007512:	4291      	cmp	r1, r2
 8007514:	db00      	blt.n	8007518 <_ZL16stringCmdHandlerPcj+0x90>
	return __b;
      return __a;
 8007516:	ab13      	add	r3, sp, #76	; 0x4c
 8007518:	f8d3 a000 	ldr.w	sl, [r3]
 800751c:	e001      	b.n	8007522 <_ZL16stringCmdHandlerPcj+0x9a>
            uint64_t init;
            int      cnt = 0;
            int      num = 0;
            int      delay;
        } ti;
        int num = 1, delay = 1;
 800751e:	f04f 0a01 	mov.w	sl, #1

        if ( argc >= 2 )
            num = std::min( NUM_MAX_HWTIMER_NODE, std::max( 1, atoi( argv[1] ) ) );
        if ( argc >= 3 )
 8007522:	2c02      	cmp	r4, #2
 8007524:	dd0e      	ble.n	8007544 <_ZL16stringCmdHandlerPcj+0xbc>
            delay = std::max( 100, atoi( argv[2] ) );
 8007526:	2364      	movs	r3, #100	; 0x64
 8007528:	9316      	str	r3, [sp, #88]	; 0x58
 800752a:	9805      	ldr	r0, [sp, #20]
 800752c:	f001 f814 	bl	8008558 <atoi>
 8007530:	9017      	str	r0, [sp, #92]	; 0x5c
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007532:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007534:	4298      	cmp	r0, r3
 8007536:	dd01      	ble.n	800753c <_ZL16stringCmdHandlerPcj+0xb4>
	return __b;
 8007538:	ab17      	add	r3, sp, #92	; 0x5c
 800753a:	e000      	b.n	800753e <_ZL16stringCmdHandlerPcj+0xb6>
      return __a;
 800753c:	ab16      	add	r3, sp, #88	; 0x58
 800753e:	f8d3 b000 	ldr.w	fp, [r3]
 8007542:	e001      	b.n	8007548 <_ZL16stringCmdHandlerPcj+0xc0>
            uint64_t init;
            int      cnt = 0;
            int      num = 0;
            int      delay;
        } ti;
        int num = 1, delay = 1;
 8007544:	f04f 0b01 	mov.w	fp, #1
        if ( argc >= 2 )
            num = std::min( NUM_MAX_HWTIMER_NODE, std::max( 1, atoi( argv[1] ) ) );
        if ( argc >= 3 )
            delay = std::max( 100, atoi( argv[2] ) );

        if ( ti.cnt != ti.num ) {
 8007548:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <_ZL16stringCmdHandlerPcj+0x158>)
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	429a      	cmp	r2, r3
 8007550:	d003      	beq.n	800755a <_ZL16stringCmdHandlerPcj+0xd2>
            API_Log( "Yet timer task is running ... \n" );
 8007552:	4824      	ldr	r0, [pc, #144]	; (80075e4 <_ZL16stringCmdHandlerPcj+0x15c>)
 8007554:	f7ff fe10 	bl	8007178 <API_Log>
 8007558:	e031      	b.n	80075be <_ZL16stringCmdHandlerPcj+0x136>
            break;
        }
        ti.init  = API_GetTime_us();
 800755a:	f000 f999 	bl	8007890 <API_GetTime_us>
 800755e:	4b20      	ldr	r3, [pc, #128]	; (80075e0 <_ZL16stringCmdHandlerPcj+0x158>)
 8007560:	e9c3 0100 	strd	r0, r1, [r3]
        ti.cnt   = 0;
 8007564:	2400      	movs	r4, #0
 8007566:	609c      	str	r4, [r3, #8]
        ti.num   = num;
 8007568:	f8c3 a00c 	str.w	sl, [r3, #12]
        ti.delay = delay;
 800756c:	f8c3 b010 	str.w	fp, [r3, #16]
                elapsed - ( t.delay * ( t.cnt + 1 ) ) );

            t.cnt++;
        };

        for ( int i = 0; i < num; i++ ) {
 8007570:	45a2      	cmp	sl, r4
 8007572:	dd24      	ble.n	80075be <_ZL16stringCmdHandlerPcj+0x136>
            auto correct_delay = delay * ( i + 1 ) - ( API_GetTime_us() - ti.init );
 8007574:	3401      	adds	r4, #1
 8007576:	fb04 f80b 	mul.w	r8, r4, fp
 800757a:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800757e:	4d18      	ldr	r5, [pc, #96]	; (80075e0 <_ZL16stringCmdHandlerPcj+0x158>)
 8007580:	e9d5 6700 	ldrd	r6, r7, [r5]
 8007584:	f000 f984 	bl	8007890 <API_GetTime_us>
 8007588:	1a32      	subs	r2, r6, r0
 800758a:	eb67 0301 	sbc.w	r3, r7, r1
            API_SetTimer( correct_delay, &ti, timer_cb );
 800758e:	4916      	ldr	r1, [pc, #88]	; (80075e8 <_ZL16stringCmdHandlerPcj+0x160>)
 8007590:	9101      	str	r1, [sp, #4]
 8007592:	9500      	str	r5, [sp, #0]
 8007594:	eb12 0208 	adds.w	r2, r2, r8
 8007598:	eb43 0309 	adc.w	r3, r3, r9
 800759c:	a818      	add	r0, sp, #96	; 0x60
 800759e:	f000 fcff 	bl	8007fa0 <API_SetTimer>
                elapsed - ( t.delay * ( t.cnt + 1 ) ) );

            t.cnt++;
        };

        for ( int i = 0; i < num; i++ ) {
 80075a2:	e7e5      	b.n	8007570 <_ZL16stringCmdHandlerPcj+0xe8>
        }

    } break;

    case STRCASE( "test-input" ): {
        API_Logf( "Hello, world!\n" );
 80075a4:	4811      	ldr	r0, [pc, #68]	; (80075ec <_ZL16stringCmdHandlerPcj+0x164>)
 80075a6:	f7ff fe11 	bl	80071cc <API_Logf>
    } break;
 80075aa:	e008      	b.n	80075be <_ZL16stringCmdHandlerPcj+0x136>

    case STRCASE( "ping" ): {
        API_SendHostBinary( "ping", 4 );
 80075ac:	2104      	movs	r1, #4
 80075ae:	4810      	ldr	r0, [pc, #64]	; (80075f0 <_ZL16stringCmdHandlerPcj+0x168>)
 80075b0:	f7ff ff40 	bl	8007434 <API_SendHostBinary>
    } break;
 80075b4:	e003      	b.n	80075be <_ZL16stringCmdHandlerPcj+0x136>

    default:
        if ( AppHandler_CaptureCommand( argc, argv ) )
 80075b6:	a903      	add	r1, sp, #12
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7ff fe31 	bl	8007220 <AppHandler_CaptureCommand>
            break;
        break;
    }
}
 80075be:	b01d      	add	sp, #116	; 0x74
 80075c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c4:	811c9dc5 	.word	0x811c9dc5
 80075c8:	01000193 	.word	0x01000193
 80075cc:	2dbbb3f9 	.word	0x2dbbb3f9
 80075d0:	165df089 	.word	0x165df089
 80075d4:	4eecbbec 	.word	0x4eecbbec
 80075d8:	c08fbc05 	.word	0xc08fbc05
 80075dc:	200030ec 	.word	0x200030ec
 80075e0:	200030f0 	.word	0x200030f0
 80075e4:	08010084 	.word	0x08010084
 80075e8:	080072f1 	.word	0x080072f1
 80075ec:	080100a4 	.word	0x080100a4
 80075f0:	080100b4 	.word	0x080100b4

080075f4 <_ZL16binaryCmdHandlerPcj>:
{
    return false;
}

void binaryCmdHandler( char* data, size_t len )
{
 80075f4:	b508      	push	{r3, lr}
    if ( AppHandler_CaptureBinary( data, len ) ) {
 80075f6:	f7ff fe21 	bl	800723c <AppHandler_CaptureBinary>
 80075fa:	b910      	cbnz	r0, 8007602 <_ZL16binaryCmdHandlerPcj+0xe>
        return;
    }

    API_Log( "warning: failed to process binary data\n" );
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <_ZL16binaryCmdHandlerPcj+0x10>)
 80075fe:	f7ff fdbb 	bl	8007178 <API_Log>
 8007602:	bd08      	pop	{r3, pc}
 8007604:	080100bc 	.word	0x080100bc

08007608 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_>:
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8007608:	4a02      	ldr	r2, [pc, #8]	; (8007614 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_+0xc>)
 800760a:	60c2      	str	r2, [r0, #12]
	    _M_manager = &_My_handler::_M_manager;
 800760c:	4a02      	ldr	r2, [pc, #8]	; (8007618 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_+0x10>)
 800760e:	6082      	str	r2, [r0, #8]
	  }
      }
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	080078bd 	.word	0x080078bd
 8007618:	0800761d 	.word	0x0800761d

0800761c <_ZNSt14_Function_base13_Base_managerIZ13HW_TIMER_INITEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 800761c:	2a01      	cmp	r2, #1
 800761e:	d100      	bne.n	8007622 <_ZNSt14_Function_base13_Base_managerIZ13HW_TIMER_INITEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007620:	6001      	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8007622:	2000      	movs	r0, #0
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop

08007628 <_Z41__static_initialization_and_destruction_0ii>:
void __throw_bad_function_call()
{
    uassert( false );
    for ( ;; ) { }
}
} // namespace std
 8007628:	2801      	cmp	r0, #1
 800762a:	d13b      	bne.n	80076a4 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007632:	4299      	cmp	r1, r3
 8007634:	d135      	bne.n	80076a2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
    using size_type       = nty_;
    using difference_type = ptrdiff_t;
    using node_type       = fslist_node<size_type>;
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
 8007636:	4a1c      	ldr	r2, [pc, #112]	; (80076a8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007638:	2300      	movs	r3, #0
 800763a:	7013      	strb	r3, [r2, #0]
 800763c:	2128      	movs	r1, #40	; 0x28
 800763e:	7051      	strb	r1, [r2, #1]
 8007640:	21ff      	movs	r1, #255	; 0xff
 8007642:	7091      	strb	r1, [r2, #2]
 8007644:	70d1      	strb	r1, [r2, #3]
 8007646:	7113      	strb	r3, [r2, #4]
 8007648:	f502 7174 	add.w	r1, r2, #976	; 0x3d0
 800764c:	6091      	str	r1, [r2, #8]
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
 800764e:	2b27      	cmp	r3, #39	; 0x27
 8007650:	d80d      	bhi.n	800766e <_Z41__static_initialization_and_destruction_0ii+0x46>
            auto p  = narray_ + i;
 8007652:	4a15      	ldr	r2, [pc, #84]	; (80076a8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007654:	6894      	ldr	r4, [r2, #8]
 8007656:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800765a:	1821      	adds	r1, r4, r0
            p->nxt_ = static_cast<size_type>( i + 1 );
 800765c:	b2da      	uxtb	r2, r3
 800765e:	1c55      	adds	r5, r2, #1
 8007660:	5425      	strb	r5, [r4, r0]
            p->cur_ = NODE_NONE;
 8007662:	20ff      	movs	r0, #255	; 0xff
 8007664:	7088      	strb	r0, [r1, #2]
            p->prv_ = static_cast<size_type>( i - 1 );
 8007666:	3a01      	subs	r2, #1
 8007668:	704a      	strb	r2, [r1, #1]
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
 800766a:	3301      	adds	r3, #1
 800766c:	e7ef      	b.n	800764e <_Z41__static_initialization_and_destruction_0ii+0x26>
            auto p  = narray_ + i;
            p->nxt_ = static_cast<size_type>( i + 1 );
            p->cur_ = NODE_NONE;
            p->prv_ = static_cast<size_type>( i - 1 );
        }
        narray_[0].prv_             = NODE_NONE;
 800766e:	480e      	ldr	r0, [pc, #56]	; (80076a8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007670:	6883      	ldr	r3, [r0, #8]
 8007672:	22ff      	movs	r2, #255	; 0xff
 8007674:	705a      	strb	r2, [r3, #1]
        narray_[capacity_ - 1].nxt_ = NODE_NONE;
 8007676:	7843      	ldrb	r3, [r0, #1]
 8007678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800767c:	3b03      	subs	r3, #3
 800767e:	6881      	ldr	r1, [r0, #8]
 8007680:	54ca      	strb	r2, [r1, r3]
            i      = super::next( i );
            super::dealloc_node( k );
        }
    }

    fslist_base( size_type capacity, pointer varray, node_type* narray ) noexcept : super_type( capacity, narray ), varray_( varray )
 8007682:	f100 0310 	add.w	r3, r0, #16
 8007686:	60c3      	str	r3, [r0, #12]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8007688:	2300      	movs	r3, #0
 800768a:	f8c0 3450 	str.w	r3, [r0, #1104]	; 0x450
    timer_cb_t cb_;
};

template <typename tick_ty__,
          typename list_container__>
class timer_logic {
 800768e:	f500 638b 	add.w	r3, r0, #1112	; 0x458
 8007692:	2400      	movs	r4, #0
 8007694:	2500      	movs	r5, #0
 8007696:	e9c3 4500 	strd	r4, r5, [r3]
extern TIM_HandleTypeDef htim2;

/////////////////////////////////////////////////////////////////////////////
// Statics
using timer_t = upp::static_timer_logic<usec_t, uint8_t, NUM_MAX_HWTIMER_NODE>;
static timer_t            s_tim;
 800769a:	4a04      	ldr	r2, [pc, #16]	; (80076ac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800769c:	4904      	ldr	r1, [pc, #16]	; (80076b0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800769e:	f000 ff38 	bl	8008512 <__aeabi_atexit>
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20004110 	.word	0x20004110
 80076ac:	20000000 	.word	0x20000000
 80076b0:	080076b5 	.word	0x080076b5

080076b4 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	4604      	mov	r4, r0

    ~_Function_base()
    {
      if (_M_manager)
 80076b8:	f8d0 3450 	ldr.w	r3, [r0, #1104]	; 0x450
 80076bc:	b123      	cbz	r3, 80076c8 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x14>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80076be:	f500 6089 	add.w	r0, r0, #1096	; 0x448
 80076c2:	2203      	movs	r2, #3
 80076c4:	4601      	mov	r1, r0
 80076c6:	4798      	blx	r3
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 80076c8:	78a3      	ldrb	r3, [r4, #2]
        clear();
    }

    void clear() noexcept
    {
        for ( size_type i = super::head(); i != NODE_NONE; ) {
 80076ca:	2bff      	cmp	r3, #255	; 0xff
 80076cc:	d041      	beq.n	8007752 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x9e>
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 80076ce:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80076d2:	68a1      	ldr	r1, [r4, #8]
 80076d4:	180d      	adds	r5, r1, r0
 80076d6:	5c0e      	ldrb	r6, [r1, r0]
    }

    void dealloc_node( size_type i ) noexcept
    {
        auto& n = narray_[i];
        uassert( n.cur_ != NODE_NONE );
 80076d8:	78aa      	ldrb	r2, [r5, #2]
 80076da:	2aff      	cmp	r2, #255	; 0xff
 80076dc:	d105      	bne.n	80076ea <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x36>
 80076de:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xa4>)
 80076e0:	4a1e      	ldr	r2, [pc, #120]	; (800775c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xa8>)
 80076e2:	216b      	movs	r1, #107	; 0x6b
 80076e4:	481e      	ldr	r0, [pc, #120]	; (8007760 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xac>)
 80076e6:	f000 ff19 	bl	800851c <__assert_func>
        uassert( i >= 0 && i < capacity_ );
 80076ea:	7862      	ldrb	r2, [r4, #1]
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d305      	bcc.n	80076fc <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x48>
 80076f0:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xb0>)
 80076f2:	4a1a      	ldr	r2, [pc, #104]	; (800775c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xa8>)
 80076f4:	216c      	movs	r1, #108	; 0x6c
 80076f6:	481a      	ldr	r0, [pc, #104]	; (8007760 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xac>)
 80076f8:	f000 ff10 	bl	800851c <__assert_func>

        if ( n.nxt_ != NODE_NONE ) {
 80076fc:	5c0a      	ldrb	r2, [r1, r0]
 80076fe:	2aff      	cmp	r2, #255	; 0xff
 8007700:	d005      	beq.n	800770e <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x5a>
            narray_[n.nxt_].prv_ = n.prv_;
 8007702:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007706:	440a      	add	r2, r1
 8007708:	786f      	ldrb	r7, [r5, #1]
 800770a:	7057      	strb	r7, [r2, #1]
 800770c:	e001      	b.n	8007712 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x5e>
        }
        else { // It's tail
            tail_ = n.prv_;
 800770e:	786a      	ldrb	r2, [r5, #1]
 8007710:	70e2      	strb	r2, [r4, #3]
        }

        if ( n.prv_ != NODE_NONE ) {
 8007712:	786a      	ldrb	r2, [r5, #1]
 8007714:	2aff      	cmp	r2, #255	; 0xff
 8007716:	d007      	beq.n	8007728 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x74>
            narray_[n.prv_].nxt_ = n.nxt_;
 8007718:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800771c:	68a7      	ldr	r7, [r4, #8]
 800771e:	f811 e000 	ldrb.w	lr, [r1, r0]
 8007722:	f807 e002 	strb.w	lr, [r7, r2]
 8007726:	e001      	b.n	800772c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x78>
        }
        else { // It's head
            head_ = n.nxt_;
 8007728:	5c0a      	ldrb	r2, [r1, r0]
 800772a:	70a2      	strb	r2, [r4, #2]
        }

        if ( idle_ != NODE_NONE ) {
 800772c:	7922      	ldrb	r2, [r4, #4]
 800772e:	2aff      	cmp	r2, #255	; 0xff
 8007730:	d004      	beq.n	800773c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x88>
            narray_[idle_].prv_ = i;
 8007732:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007736:	68a7      	ldr	r7, [r4, #8]
 8007738:	443a      	add	r2, r7
 800773a:	7053      	strb	r3, [r2, #1]
        }
        n.prv_ = NODE_NONE;
 800773c:	22ff      	movs	r2, #255	; 0xff
 800773e:	706a      	strb	r2, [r5, #1]
        n.cur_ = NODE_NONE;
 8007740:	70aa      	strb	r2, [r5, #2]
        n.nxt_ = idle_;
 8007742:	7922      	ldrb	r2, [r4, #4]
 8007744:	540a      	strb	r2, [r1, r0]
        idle_  = i;
 8007746:	7123      	strb	r3, [r4, #4]
        --size_;
 8007748:	7823      	ldrb	r3, [r4, #0]
 800774a:	3b01      	subs	r3, #1
 800774c:	7023      	strb	r3, [r4, #0]
    void clear() noexcept
    {
        for ( size_type i = super::head(); i != NODE_NONE; ) {
            varray_[i].~value_type();
            auto k = i;
            i      = super::next( i );
 800774e:	4633      	mov	r3, r6
 8007750:	e7bb      	b.n	80076ca <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x16>
 8007752:	4620      	mov	r0, r4
 8007754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007756:	bf00      	nop
 8007758:	08010470 	.word	0x08010470
 800775c:	08010bf8 	.word	0x08010bf8
 8007760:	08010484 	.word	0x08010484
 8007764:	080104b8 	.word	0x080104b8

08007768 <HW_TIMER_INIT>:
//

/////////////////////////////////////////////////////////////////////////////
// Defs
extern "C" void HW_TIMER_INIT()
{
 8007768:	b530      	push	{r4, r5, lr}
 800776a:	b08b      	sub	sp, #44	; 0x2c
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 800776c:	ac06      	add	r4, sp, #24
 800776e:	f04f 0100 	mov.w	r1, #0
 8007772:	4620      	mov	r0, r4
 8007774:	f7ff ff48 	bl	8007608 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007778:	ad04      	add	r5, sp, #16
 800777a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800777e:	e885 0003 	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8007782:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <HW_TIMER_INIT+0x88>)
 8007784:	f503 6289 	add.w	r2, r3, #1096	; 0x448
 8007788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800778c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8007790:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007794:	e882 0003 	stmia.w	r2, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007798:	9908      	ldr	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 800779a:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 800779e:	9208      	str	r2, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 80077a0:	f8c3 1450 	str.w	r1, [r3, #1104]	; 0x450
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80077a4:	9909      	ldr	r1, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80077a6:	f8d3 0454 	ldr.w	r0, [r3, #1108]	; 0x454
 80077aa:	9009      	str	r0, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
 80077ac:	f8c3 1454 	str.w	r1, [r3, #1108]	; 0x454

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80077b0:	b122      	cbz	r2, 80077bc <HW_TIMER_INIT+0x54>
 80077b2:	4613      	mov	r3, r2
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80077b4:	2203      	movs	r2, #3
 80077b6:	a906      	add	r1, sp, #24
 80077b8:	4608      	mov	r0, r1
 80077ba:	4798      	blx	r3
    s_tim.tick_function( []() { return API_GetTime_us(); } );

    sTimerTask = xTaskCreateStatic(
 80077bc:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <HW_TIMER_INIT+0x8c>)
 80077be:	9302      	str	r3, [sp, #8]
 80077c0:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <HW_TIMER_INIT+0x90>)
 80077c2:	9301      	str	r3, [sp, #4]
 80077c4:	2334      	movs	r3, #52	; 0x34
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	2300      	movs	r3, #0
 80077ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ce:	490b      	ldr	r1, [pc, #44]	; (80077fc <HW_TIMER_INIT+0x94>)
 80077d0:	480b      	ldr	r0, [pc, #44]	; (8007800 <HW_TIMER_INIT+0x98>)
 80077d2:	f7fc fee7 	bl	80045a4 <xTaskCreateStatic>
        "TIMER",
        sizeof( sTimerStack ) / sizeof( *sTimerStack ),
        NULL,
        osPriorityRealtime4,
        sTimerStack,
        &sTimerTaskStaticCb );
 80077d6:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <HW_TIMER_INIT+0x9c>)
 80077d8:	6018      	str	r0, [r3, #0]

    HAL_TIM_Base_Start_IT( &htim );
 80077da:	4c0b      	ldr	r4, [pc, #44]	; (8007808 <HW_TIMER_INIT+0xa0>)
 80077dc:	4620      	mov	r0, r4
 80077de:	f7fb ff27 	bl	8003630 <HAL_TIM_Base_Start_IT>
    TIM_CCxChannelCmd( htim.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE );
 80077e2:	2201      	movs	r2, #1
 80077e4:	2100      	movs	r1, #0
 80077e6:	6820      	ldr	r0, [r4, #0]
 80077e8:	f7fc f926 	bl	8003a38 <TIM_CCxChannelCmd>
}
 80077ec:	b00b      	add	sp, #44	; 0x2c
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	20004110 	.word	0x20004110
 80077f4:	20004d74 	.word	0x20004d74
 80077f8:	20004574 	.word	0x20004574
 80077fc:	080104d0 	.word	0x080104d0
 8007800:	08007d21 	.word	0x08007d21
 8007804:	20004570 	.word	0x20004570
 8007808:	20005ba4 	.word	0x20005ba4
 800780c:	00000000 	.word	0x00000000

08007810 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler( void )
{
 8007810:	b530      	push	{r4, r5, lr}
 8007812:	b083      	sub	sp, #12
    // If it's update interrupt, accumulates 1000 second to total time
    if ( __HAL_TIM_GET_FLAG( &htim, TIM_FLAG_UPDATE ) != RESET ) {
 8007814:	4b1a      	ldr	r3, [pc, #104]	; (8007880 <TIM2_IRQHandler+0x70>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691a      	ldr	r2, [r3, #16]
 800781a:	f012 0f01 	tst.w	r2, #1
 800781e:	d00c      	beq.n	800783a <TIM2_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG( &htim, TIM_FLAG_UPDATE );
 8007820:	f06f 0201 	mvn.w	r2, #1
 8007824:	611a      	str	r2, [r3, #16]
        s_total_us += (int)1e9;
 8007826:	4a17      	ldr	r2, [pc, #92]	; (8007884 <TIM2_IRQHandler+0x74>)
 8007828:	e9d2 4500 	ldrd	r4, r5, [r2]
 800782c:	a112      	add	r1, pc, #72	; (adr r1, 8007878 <TIM2_IRQHandler+0x68>)
 800782e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007832:	1900      	adds	r0, r0, r4
 8007834:	4169      	adcs	r1, r5
 8007836:	e9c2 0100 	strd	r0, r1, [r2]
    }

    // If it's oc interrupt, process hwtimer event and switch to timer task
    if ( __HAL_TIM_GET_FLAG( &htim, TIM_FLAG_CC1 ) != RESET ) {
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	f012 0f02 	tst.w	r2, #2
 8007840:	d001      	beq.n	8007846 <TIM2_IRQHandler+0x36>
 8007842:	2201      	movs	r2, #1
 8007844:	e000      	b.n	8007848 <TIM2_IRQHandler+0x38>
 8007846:	2200      	movs	r2, #0
 8007848:	b1a2      	cbz	r2, 8007874 <TIM2_IRQHandler+0x64>
        __HAL_TIM_CLEAR_FLAG( &htim, TIM_FLAG_CC1 );
 800784a:	f06f 0202 	mvn.w	r2, #2
 800784e:	611a      	str	r2, [r3, #16]
        BaseType_t bHigherTaskPriorityWoken = pdFALSE;
 8007850:	a902      	add	r1, sp, #8
 8007852:	2300      	movs	r3, #0
 8007854:	f841 3d04 	str.w	r3, [r1, #-4]!
        vTaskNotifyGiveFromISR( sTimerTask, &bHigherTaskPriorityWoken );
 8007858:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <TIM2_IRQHandler+0x78>)
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	f7fd fac0 	bl	8004de0 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR( bHigherTaskPriorityWoken );
 8007860:	9b01      	ldr	r3, [sp, #4]
 8007862:	b13b      	cbz	r3, 8007874 <TIM2_IRQHandler+0x64>
 8007864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007868:	4b08      	ldr	r3, [pc, #32]	; (800788c <TIM2_IRQHandler+0x7c>)
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	f3bf 8f6f 	isb	sy
    }
}
 8007874:	b003      	add	sp, #12
 8007876:	bd30      	pop	{r4, r5, pc}
 8007878:	3b9aca00 	.word	0x3b9aca00
 800787c:	00000000 	.word	0x00000000
 8007880:	20005ba4 	.word	0x20005ba4
 8007884:	200001d8 	.word	0x200001d8
 8007888:	20004570 	.word	0x20004570
 800788c:	e000ed04 	.word	0xe000ed04

08007890 <API_GetTime_us>:

extern "C" usec_t API_GetTime_us()
{
 8007890:	f84d bd04 	str.w	fp, [sp, #-4]!
    return s_total_us + GET_TICK();
 8007894:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <API_GetTime_us+0x24>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800789a:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <API_GetTime_us+0x28>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80078a0:	eb12 0b00 	adds.w	fp, r2, r0
 80078a4:	f143 0c00 	adc.w	ip, r3, #0
 80078a8:	4658      	mov	r0, fp
 80078aa:	4661      	mov	r1, ip
 80078ac:	f85d bb04 	ldr.w	fp, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20005ba4 	.word	0x20005ba4
 80078b8:	200001d8 	.word	0x200001d8

080078bc <_ZNSt17_Function_handlerIFyvEZ13HW_TIMER_INITEUlvE_E9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80078bc:	b508      	push	{r3, lr}

/////////////////////////////////////////////////////////////////////////////
// Defs
extern "C" void HW_TIMER_INIT()
{
    s_tim.tick_function( []() { return API_GetTime_us(); } );
 80078be:	f7ff ffe7 	bl	8007890 <API_GetTime_us>
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 80078c2:	bd08      	pop	{r3, pc}

080078c4 <API_AbortTimer>:
    portYIELD_FROM_ISR( bHigherTaskPriorityWoken );
    return { r.id_, r.time_ };
}

extern "C" void API_AbortTimer( timer_handle_t h )
{
 80078c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078c6:	b08f      	sub	sp, #60	; 0x3c
 80078c8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    taskENTER_CRITICAL();
 80078cc:	f7fd ff52 	bl	8005774 <vPortEnterCritical>
    s_tim.remove( { h.data_[0], h.data_[1] } );
 80078d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80078d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 80078e0:	4b7d      	ldr	r3, [pc, #500]	; (8007ad8 <API_AbortTimer+0x214>)
 80078e2:	9306      	str	r3, [sp, #24]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 80078e4:	789a      	ldrb	r2, [r3, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 80078e6:	f88d 201c 	strb.w	r2, [sp, #28]
    }

    const_iterator cend() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 80078ea:	9308      	str	r3, [sp, #32]
        i.cur_       = NODE_NONE;
 80078ec:	23ff      	movs	r3, #255	; 0xff
 80078ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fslist_const_iterator<dty_, nty_>& operator--() noexcept;
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
 80078f2:	9c06      	ldr	r4, [sp, #24]
 80078f4:	4b78      	ldr	r3, [pc, #480]	; (8007ad8 <API_AbortTimer+0x214>)
 80078f6:	429c      	cmp	r4, r3
 80078f8:	d105      	bne.n	8007906 <API_AbortTimer+0x42>
 80078fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80078fe:	2bff      	cmp	r3, #255	; 0xff
 8007900:	d003      	beq.n	800790a <API_AbortTimer+0x46>
 8007902:	2201      	movs	r2, #1
 8007904:	e002      	b.n	800790c <API_AbortTimer+0x48>
 8007906:	2201      	movs	r2, #1
 8007908:	e000      	b.n	800790c <API_AbortTimer+0x48>
 800790a:	2200      	movs	r2, #0
    typename container_type::const_iterator
    find_( handle_type const& h ) const
    {
        auto       beg = node_.cbegin();
        auto const end = node_.cend();
        for ( ; beg != end
 800790c:	b362      	cbz	r2, 8007968 <API_AbortTimer+0xa4>
                && h.time_ < beg->trigger_at_;
 800790e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return c->get_arg( cur_ );
 8007912:	f89d 301c 	ldrb.w	r3, [sp, #28]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007916:	2bff      	cmp	r3, #255	; 0xff
 8007918:	d106      	bne.n	8007928 <API_AbortTimer+0x64>
 800791a:	4b70      	ldr	r3, [pc, #448]	; (8007adc <API_AbortTimer+0x218>)
 800791c:	4a70      	ldr	r2, [pc, #448]	; (8007ae0 <API_AbortTimer+0x21c>)
 800791e:	f240 11af 	movw	r1, #431	; 0x1af
 8007922:	4870      	ldr	r0, [pc, #448]	; (8007ae4 <API_AbortTimer+0x220>)
 8007924:	f000 fdfa 	bl	800851c <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007928:	2bff      	cmp	r3, #255	; 0xff
 800792a:	d008      	beq.n	800793e <API_AbortTimer+0x7a>
 800792c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007930:	68a0      	ldr	r0, [r4, #8]
 8007932:	4401      	add	r1, r0
 8007934:	7889      	ldrb	r1, [r1, #2]
 8007936:	29ff      	cmp	r1, #255	; 0xff
 8007938:	d102      	bne.n	8007940 <API_AbortTimer+0x7c>
 800793a:	2200      	movs	r2, #0
 800793c:	e000      	b.n	8007940 <API_AbortTimer+0x7c>
 800793e:	2200      	movs	r2, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8007940:	b932      	cbnz	r2, 8007950 <API_AbortTimer+0x8c>
 8007942:	4b69      	ldr	r3, [pc, #420]	; (8007ae8 <API_AbortTimer+0x224>)
 8007944:	4a66      	ldr	r2, [pc, #408]	; (8007ae0 <API_AbortTimer+0x21c>)
 8007946:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800794a:	4866      	ldr	r0, [pc, #408]	; (8007ae4 <API_AbortTimer+0x220>)
 800794c:	f000 fde6 	bl	800851c <__assert_func>
        return varray_ + node;
 8007950:	68e0      	ldr	r0, [r4, #12]
 8007952:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007956:	00d9      	lsls	r1, r3, #3
 8007958:	4401      	add	r1, r0
 800795a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    typename container_type::const_iterator
    find_( handle_type const& h ) const
    {
        auto       beg = node_.cbegin();
        auto const end = node_.cend();
        for ( ; beg != end
 800795e:	428f      	cmp	r7, r1
 8007960:	bf08      	it	eq
 8007962:	4286      	cmpeq	r6, r0
 8007964:	d300      	bcc.n	8007968 <API_AbortTimer+0xa4>
 8007966:	2200      	movs	r2, #0
 8007968:	2a00      	cmp	r2, #0
 800796a:	d046      	beq.n	80079fa <API_AbortTimer+0x136>
                && h.time_ < beg->trigger_at_;
              ++beg ) {
            if ( h.id_ == beg->id_ )
 800796c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return c->get_arg( cur_ );
 8007970:	f89d 301c 	ldrb.w	r3, [sp, #28]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007974:	2bff      	cmp	r3, #255	; 0xff
 8007976:	d106      	bne.n	8007986 <API_AbortTimer+0xc2>
 8007978:	4b58      	ldr	r3, [pc, #352]	; (8007adc <API_AbortTimer+0x218>)
 800797a:	4a59      	ldr	r2, [pc, #356]	; (8007ae0 <API_AbortTimer+0x21c>)
 800797c:	f240 11af 	movw	r1, #431	; 0x1af
 8007980:	4858      	ldr	r0, [pc, #352]	; (8007ae4 <API_AbortTimer+0x220>)
 8007982:	f000 fdcb 	bl	800851c <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007986:	2bff      	cmp	r3, #255	; 0xff
 8007988:	d008      	beq.n	800799c <API_AbortTimer+0xd8>
 800798a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800798e:	68a6      	ldr	r6, [r4, #8]
 8007990:	4435      	add	r5, r6
 8007992:	78ad      	ldrb	r5, [r5, #2]
 8007994:	2dff      	cmp	r5, #255	; 0xff
 8007996:	d102      	bne.n	800799e <API_AbortTimer+0xda>
 8007998:	2200      	movs	r2, #0
 800799a:	e000      	b.n	800799e <API_AbortTimer+0xda>
 800799c:	2200      	movs	r2, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 800799e:	b932      	cbnz	r2, 80079ae <API_AbortTimer+0xea>
 80079a0:	4b51      	ldr	r3, [pc, #324]	; (8007ae8 <API_AbortTimer+0x224>)
 80079a2:	4a4f      	ldr	r2, [pc, #316]	; (8007ae0 <API_AbortTimer+0x21c>)
 80079a4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80079a8:	484e      	ldr	r0, [pc, #312]	; (8007ae4 <API_AbortTimer+0x220>)
 80079aa:	f000 fdb7 	bl	800851c <__assert_func>
        return varray_ + node;
 80079ae:	68e4      	ldr	r4, [r4, #12]
 80079b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80079b4:	00da      	lsls	r2, r3, #3
 80079b6:	4422      	add	r2, r4
 80079b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80079bc:	4299      	cmp	r1, r3
 80079be:	bf08      	it	eq
 80079c0:	4290      	cmpeq	r0, r2
 80079c2:	d106      	bne.n	80079d2 <API_AbortTimer+0x10e>
                return beg;
 80079c4:	ab04      	add	r3, sp, #16
 80079c6:	aa06      	add	r2, sp, #24
 80079c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80079d0:	e019      	b.n	8007a06 <API_AbortTimer+0x142>
};

template <typename dty_, typename nty_>
inline fslist_const_iterator<dty_, nty_>& fslist_const_iterator<dty_, nty_>::operator++() noexcept
{
    uassert( container_ && cur_ != NODE_NONE );
 80079d2:	9a06      	ldr	r2, [sp, #24]
 80079d4:	b11a      	cbz	r2, 80079de <API_AbortTimer+0x11a>
 80079d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80079da:	2bff      	cmp	r3, #255	; 0xff
 80079dc:	d106      	bne.n	80079ec <API_AbortTimer+0x128>
 80079de:	4b43      	ldr	r3, [pc, #268]	; (8007aec <API_AbortTimer+0x228>)
 80079e0:	4a43      	ldr	r2, [pc, #268]	; (8007af0 <API_AbortTimer+0x22c>)
 80079e2:	f240 11bb 	movw	r1, #443	; 0x1bb
 80079e6:	483f      	ldr	r0, [pc, #252]	; (8007ae4 <API_AbortTimer+0x220>)
 80079e8:	f000 fd98 	bl	800851c <__assert_func>
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 80079ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80079f0:	6892      	ldr	r2, [r2, #8]
 80079f2:	5cd3      	ldrb	r3, [r2, r3]

template <typename dty_, typename nty_>
inline fslist_const_iterator<dty_, nty_>& fslist_const_iterator<dty_, nty_>::operator++() noexcept
{
    uassert( container_ && cur_ != NODE_NONE );
    cur_ = container_->next( cur_ );
 80079f4:	f88d 301c 	strb.w	r3, [sp, #28]
 80079f8:	e77b      	b.n	80078f2 <API_AbortTimer+0x2e>
        }
        return end;
 80079fa:	ab04      	add	r3, sp, #16
 80079fc:	aa08      	add	r2, sp, #32
 80079fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a02:	e883 0003 	stmia.w	r3, {r0, r1}
    fslist_const_iterator<dty_, nty_>& operator--() noexcept;
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
 8007a06:	4b34      	ldr	r3, [pc, #208]	; (8007ad8 <API_AbortTimer+0x214>)
 8007a08:	9a04      	ldr	r2, [sp, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d105      	bne.n	8007a1a <API_AbortTimer+0x156>
 8007a0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007a12:	2bff      	cmp	r3, #255	; 0xff
 8007a14:	d003      	beq.n	8007a1e <API_AbortTimer+0x15a>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e002      	b.n	8007a20 <API_AbortTimer+0x15c>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <API_AbortTimer+0x15c>
 8007a1e:	2300      	movs	r3, #0
    }

    bool remove( handle_type const& t ) noexcept
    {
        auto it = find_( t );
        if ( it != node_.end() ) {
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d055      	beq.n	8007ad0 <API_AbortTimer+0x20c>
 8007a24:	ab08      	add	r3, sp, #32
 8007a26:	aa04      	add	r2, sp, #16
 8007a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a2c:	e883 0003 	stmia.w	r3, {r0, r1}
        release( super::head() );
    }

    void erase( const_iterator pos ) noexcept
    {
        release( pos.cur_ );
 8007a30:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    template <typename ty1_, typename ty2_>
    friend class fslist_const_iterator;

    void release( size_type n )
    {
        uassert( n != NODE_NONE );
 8007a34:	2bff      	cmp	r3, #255	; 0xff
 8007a36:	d106      	bne.n	8007a46 <API_AbortTimer+0x182>
 8007a38:	4b2e      	ldr	r3, [pc, #184]	; (8007af4 <API_AbortTimer+0x230>)
 8007a3a:	4a2f      	ldr	r2, [pc, #188]	; (8007af8 <API_AbortTimer+0x234>)
 8007a3c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8007a40:	4828      	ldr	r0, [pc, #160]	; (8007ae4 <API_AbortTimer+0x220>)
 8007a42:	f000 fd6b 	bl	800851c <__assert_func>
        }
    }

    void dealloc_node( size_type i ) noexcept
    {
        auto& n = narray_[i];
 8007a46:	4a24      	ldr	r2, [pc, #144]	; (8007ad8 <API_AbortTimer+0x214>)
 8007a48:	6890      	ldr	r0, [r2, #8]
 8007a4a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8007a4e:	1901      	adds	r1, r0, r4
        uassert( n.cur_ != NODE_NONE );
 8007a50:	788a      	ldrb	r2, [r1, #2]
 8007a52:	2aff      	cmp	r2, #255	; 0xff
 8007a54:	d105      	bne.n	8007a62 <API_AbortTimer+0x19e>
 8007a56:	4b29      	ldr	r3, [pc, #164]	; (8007afc <API_AbortTimer+0x238>)
 8007a58:	4a29      	ldr	r2, [pc, #164]	; (8007b00 <API_AbortTimer+0x23c>)
 8007a5a:	216b      	movs	r1, #107	; 0x6b
 8007a5c:	4821      	ldr	r0, [pc, #132]	; (8007ae4 <API_AbortTimer+0x220>)
 8007a5e:	f000 fd5d 	bl	800851c <__assert_func>
        uassert( i >= 0 && i < capacity_ );
 8007a62:	4a1d      	ldr	r2, [pc, #116]	; (8007ad8 <API_AbortTimer+0x214>)
 8007a64:	7852      	ldrb	r2, [r2, #1]
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d305      	bcc.n	8007a76 <API_AbortTimer+0x1b2>
 8007a6a:	4b26      	ldr	r3, [pc, #152]	; (8007b04 <API_AbortTimer+0x240>)
 8007a6c:	4a24      	ldr	r2, [pc, #144]	; (8007b00 <API_AbortTimer+0x23c>)
 8007a6e:	216c      	movs	r1, #108	; 0x6c
 8007a70:	481c      	ldr	r0, [pc, #112]	; (8007ae4 <API_AbortTimer+0x220>)
 8007a72:	f000 fd53 	bl	800851c <__assert_func>

        if ( n.nxt_ != NODE_NONE ) {
 8007a76:	5d02      	ldrb	r2, [r0, r4]
 8007a78:	2aff      	cmp	r2, #255	; 0xff
 8007a7a:	d005      	beq.n	8007a88 <API_AbortTimer+0x1c4>
            narray_[n.nxt_].prv_ = n.prv_;
 8007a7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007a80:	4402      	add	r2, r0
 8007a82:	784d      	ldrb	r5, [r1, #1]
 8007a84:	7055      	strb	r5, [r2, #1]
 8007a86:	e002      	b.n	8007a8e <API_AbortTimer+0x1ca>
        }
        else { // It's tail
            tail_ = n.prv_;
 8007a88:	784d      	ldrb	r5, [r1, #1]
 8007a8a:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <API_AbortTimer+0x214>)
 8007a8c:	70d5      	strb	r5, [r2, #3]
        }

        if ( n.prv_ != NODE_NONE ) {
 8007a8e:	784a      	ldrb	r2, [r1, #1]
 8007a90:	2aff      	cmp	r2, #255	; 0xff
 8007a92:	d006      	beq.n	8007aa2 <API_AbortTimer+0x1de>
            narray_[n.prv_].nxt_ = n.nxt_;
 8007a94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007a98:	4d0f      	ldr	r5, [pc, #60]	; (8007ad8 <API_AbortTimer+0x214>)
 8007a9a:	68ad      	ldr	r5, [r5, #8]
 8007a9c:	5d06      	ldrb	r6, [r0, r4]
 8007a9e:	54ae      	strb	r6, [r5, r2]
 8007aa0:	e002      	b.n	8007aa8 <API_AbortTimer+0x1e4>
        }
        else { // It's head
            head_ = n.nxt_;
 8007aa2:	5d05      	ldrb	r5, [r0, r4]
 8007aa4:	4a0c      	ldr	r2, [pc, #48]	; (8007ad8 <API_AbortTimer+0x214>)
 8007aa6:	7095      	strb	r5, [r2, #2]
        }

        if ( idle_ != NODE_NONE ) {
 8007aa8:	4a0b      	ldr	r2, [pc, #44]	; (8007ad8 <API_AbortTimer+0x214>)
 8007aaa:	7912      	ldrb	r2, [r2, #4]
 8007aac:	2aff      	cmp	r2, #255	; 0xff
 8007aae:	d005      	beq.n	8007abc <API_AbortTimer+0x1f8>
            narray_[idle_].prv_ = i;
 8007ab0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007ab4:	4d08      	ldr	r5, [pc, #32]	; (8007ad8 <API_AbortTimer+0x214>)
 8007ab6:	68ad      	ldr	r5, [r5, #8]
 8007ab8:	442a      	add	r2, r5
 8007aba:	7053      	strb	r3, [r2, #1]
        }
        n.prv_ = NODE_NONE;
 8007abc:	22ff      	movs	r2, #255	; 0xff
 8007abe:	704a      	strb	r2, [r1, #1]
        n.cur_ = NODE_NONE;
 8007ac0:	708a      	strb	r2, [r1, #2]
        n.nxt_ = idle_;
 8007ac2:	4a05      	ldr	r2, [pc, #20]	; (8007ad8 <API_AbortTimer+0x214>)
 8007ac4:	7911      	ldrb	r1, [r2, #4]
 8007ac6:	5501      	strb	r1, [r0, r4]
        idle_  = i;
 8007ac8:	7113      	strb	r3, [r2, #4]
        --size_;
 8007aca:	7813      	ldrb	r3, [r2, #0]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	7013      	strb	r3, [r2, #0]
    taskEXIT_CRITICAL();
 8007ad0:	f7fd fe72 	bl	80057b8 <vPortExitCritical>
}
 8007ad4:	b00f      	add	sp, #60	; 0x3c
 8007ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad8:	20004110 	.word	0x20004110
 8007adc:	080104d8 	.word	0x080104d8
 8007ae0:	080100e4 	.word	0x080100e4
 8007ae4:	08010484 	.word	0x08010484
 8007ae8:	080104ec 	.word	0x080104ec
 8007aec:	08010508 	.word	0x08010508
 8007af0:	08010744 	.word	0x08010744
 8007af4:	08010528 	.word	0x08010528
 8007af8:	08010800 	.word	0x08010800
 8007afc:	08010470 	.word	0x08010470
 8007b00:	08010bf8 	.word	0x08010bf8
 8007b04:	080104b8 	.word	0x080104b8

08007b08 <API_CheckTimer>:
        }
    }
}

extern "C" bool API_CheckTimer( timer_handle_t h, usec_t* usLeft )
{
 8007b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0a:	b095      	sub	sp, #84	; 0x54
 8007b0c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8007b10:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    timer_t::desc_type d;
    if ( s_tim.browse( { h.data_[0], h.data_[1] }, d ) == false ) {
 8007b12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b16:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b1e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8007b22:	4b6d      	ldr	r3, [pc, #436]	; (8007cd8 <API_CheckTimer+0x1d0>)
 8007b24:	9306      	str	r3, [sp, #24]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007b26:	789a      	ldrb	r2, [r3, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 8007b28:	f88d 201c 	strb.w	r2, [sp, #28]
    }

    const_iterator cend() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8007b2c:	9308      	str	r3, [sp, #32]
        i.cur_       = NODE_NONE;
 8007b2e:	23ff      	movs	r3, #255	; 0xff
 8007b30:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fslist_const_iterator<dty_, nty_>& operator--() noexcept;
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
 8007b34:	9d06      	ldr	r5, [sp, #24]
 8007b36:	4b68      	ldr	r3, [pc, #416]	; (8007cd8 <API_CheckTimer+0x1d0>)
 8007b38:	429d      	cmp	r5, r3
 8007b3a:	d105      	bne.n	8007b48 <API_CheckTimer+0x40>
 8007b3c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007b40:	2bff      	cmp	r3, #255	; 0xff
 8007b42:	d003      	beq.n	8007b4c <API_CheckTimer+0x44>
 8007b44:	2201      	movs	r2, #1
 8007b46:	e002      	b.n	8007b4e <API_CheckTimer+0x46>
 8007b48:	2201      	movs	r2, #1
 8007b4a:	e000      	b.n	8007b4e <API_CheckTimer+0x46>
 8007b4c:	2200      	movs	r2, #0
    typename container_type::const_iterator
    find_( handle_type const& h ) const
    {
        auto       beg = node_.cbegin();
        auto const end = node_.cend();
        for ( ; beg != end
 8007b4e:	b362      	cbz	r2, 8007baa <API_CheckTimer+0xa2>
                && h.time_ < beg->trigger_at_;
 8007b50:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return c->get_arg( cur_ );
 8007b54:	f89d 301c 	ldrb.w	r3, [sp, #28]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007b58:	2bff      	cmp	r3, #255	; 0xff
 8007b5a:	d106      	bne.n	8007b6a <API_CheckTimer+0x62>
 8007b5c:	4b5f      	ldr	r3, [pc, #380]	; (8007cdc <API_CheckTimer+0x1d4>)
 8007b5e:	4a60      	ldr	r2, [pc, #384]	; (8007ce0 <API_CheckTimer+0x1d8>)
 8007b60:	f240 11af 	movw	r1, #431	; 0x1af
 8007b64:	485f      	ldr	r0, [pc, #380]	; (8007ce4 <API_CheckTimer+0x1dc>)
 8007b66:	f000 fcd9 	bl	800851c <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007b6a:	2bff      	cmp	r3, #255	; 0xff
 8007b6c:	d008      	beq.n	8007b80 <API_CheckTimer+0x78>
 8007b6e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8007b72:	68af      	ldr	r7, [r5, #8]
 8007b74:	443e      	add	r6, r7
 8007b76:	78b6      	ldrb	r6, [r6, #2]
 8007b78:	2eff      	cmp	r6, #255	; 0xff
 8007b7a:	d102      	bne.n	8007b82 <API_CheckTimer+0x7a>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	e000      	b.n	8007b82 <API_CheckTimer+0x7a>
 8007b80:	2200      	movs	r2, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8007b82:	b932      	cbnz	r2, 8007b92 <API_CheckTimer+0x8a>
 8007b84:	4b58      	ldr	r3, [pc, #352]	; (8007ce8 <API_CheckTimer+0x1e0>)
 8007b86:	4a56      	ldr	r2, [pc, #344]	; (8007ce0 <API_CheckTimer+0x1d8>)
 8007b88:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007b8c:	4855      	ldr	r0, [pc, #340]	; (8007ce4 <API_CheckTimer+0x1dc>)
 8007b8e:	f000 fcc5 	bl	800851c <__assert_func>
        return varray_ + node;
 8007b92:	68ee      	ldr	r6, [r5, #12]
 8007b94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007b98:	00df      	lsls	r7, r3, #3
 8007b9a:	443e      	add	r6, r7
 8007b9c:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
    typename container_type::const_iterator
    find_( handle_type const& h ) const
    {
        auto       beg = node_.cbegin();
        auto const end = node_.cend();
        for ( ; beg != end
 8007ba0:	42b9      	cmp	r1, r7
 8007ba2:	bf08      	it	eq
 8007ba4:	42b0      	cmpeq	r0, r6
 8007ba6:	d300      	bcc.n	8007baa <API_CheckTimer+0xa2>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	d046      	beq.n	8007c3c <API_CheckTimer+0x134>
                && h.time_ < beg->trigger_at_;
              ++beg ) {
            if ( h.id_ == beg->id_ )
 8007bae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return c->get_arg( cur_ );
 8007bb2:	f89d 301c 	ldrb.w	r3, [sp, #28]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007bb6:	2bff      	cmp	r3, #255	; 0xff
 8007bb8:	d106      	bne.n	8007bc8 <API_CheckTimer+0xc0>
 8007bba:	4b48      	ldr	r3, [pc, #288]	; (8007cdc <API_CheckTimer+0x1d4>)
 8007bbc:	4a48      	ldr	r2, [pc, #288]	; (8007ce0 <API_CheckTimer+0x1d8>)
 8007bbe:	f240 11af 	movw	r1, #431	; 0x1af
 8007bc2:	4848      	ldr	r0, [pc, #288]	; (8007ce4 <API_CheckTimer+0x1dc>)
 8007bc4:	f000 fcaa 	bl	800851c <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007bc8:	2bff      	cmp	r3, #255	; 0xff
 8007bca:	d008      	beq.n	8007bde <API_CheckTimer+0xd6>
 8007bcc:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8007bd0:	68af      	ldr	r7, [r5, #8]
 8007bd2:	443e      	add	r6, r7
 8007bd4:	78b6      	ldrb	r6, [r6, #2]
 8007bd6:	2eff      	cmp	r6, #255	; 0xff
 8007bd8:	d102      	bne.n	8007be0 <API_CheckTimer+0xd8>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	e000      	b.n	8007be0 <API_CheckTimer+0xd8>
 8007bde:	2200      	movs	r2, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8007be0:	b932      	cbnz	r2, 8007bf0 <API_CheckTimer+0xe8>
 8007be2:	4b41      	ldr	r3, [pc, #260]	; (8007ce8 <API_CheckTimer+0x1e0>)
 8007be4:	4a3e      	ldr	r2, [pc, #248]	; (8007ce0 <API_CheckTimer+0x1d8>)
 8007be6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007bea:	483e      	ldr	r0, [pc, #248]	; (8007ce4 <API_CheckTimer+0x1dc>)
 8007bec:	f000 fc96 	bl	800851c <__assert_func>
        return varray_ + node;
 8007bf0:	68ed      	ldr	r5, [r5, #12]
 8007bf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007bf6:	00da      	lsls	r2, r3, #3
 8007bf8:	442a      	add	r2, r5
 8007bfa:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007bfe:	4299      	cmp	r1, r3
 8007c00:	bf08      	it	eq
 8007c02:	4290      	cmpeq	r0, r2
 8007c04:	d106      	bne.n	8007c14 <API_CheckTimer+0x10c>
                return beg;
 8007c06:	ab04      	add	r3, sp, #16
 8007c08:	aa06      	add	r2, sp, #24
 8007c0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c12:	e019      	b.n	8007c48 <API_CheckTimer+0x140>
};

template <typename dty_, typename nty_>
inline fslist_const_iterator<dty_, nty_>& fslist_const_iterator<dty_, nty_>::operator++() noexcept
{
    uassert( container_ && cur_ != NODE_NONE );
 8007c14:	9a06      	ldr	r2, [sp, #24]
 8007c16:	b11a      	cbz	r2, 8007c20 <API_CheckTimer+0x118>
 8007c18:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007c1c:	2bff      	cmp	r3, #255	; 0xff
 8007c1e:	d106      	bne.n	8007c2e <API_CheckTimer+0x126>
 8007c20:	4b32      	ldr	r3, [pc, #200]	; (8007cec <API_CheckTimer+0x1e4>)
 8007c22:	4a33      	ldr	r2, [pc, #204]	; (8007cf0 <API_CheckTimer+0x1e8>)
 8007c24:	f240 11bb 	movw	r1, #443	; 0x1bb
 8007c28:	482e      	ldr	r0, [pc, #184]	; (8007ce4 <API_CheckTimer+0x1dc>)
 8007c2a:	f000 fc77 	bl	800851c <__assert_func>
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 8007c2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007c32:	6892      	ldr	r2, [r2, #8]
 8007c34:	5cd3      	ldrb	r3, [r2, r3]

template <typename dty_, typename nty_>
inline fslist_const_iterator<dty_, nty_>& fslist_const_iterator<dty_, nty_>::operator++() noexcept
{
    uassert( container_ && cur_ != NODE_NONE );
    cur_ = container_->next( cur_ );
 8007c36:	f88d 301c 	strb.w	r3, [sp, #28]
 8007c3a:	e77b      	b.n	8007b34 <API_CheckTimer+0x2c>
        }
        return end;
 8007c3c:	ab04      	add	r3, sp, #16
 8007c3e:	aa08      	add	r2, sp, #32
 8007c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c44:	e883 0003 	stmia.w	r3, {r0, r1}
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
    bool operator==( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ == container_ && r.cur_ == cur_; }
 8007c48:	9a04      	ldr	r2, [sp, #16]
 8007c4a:	4b23      	ldr	r3, [pc, #140]	; (8007cd8 <API_CheckTimer+0x1d0>)
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d105      	bne.n	8007c5c <API_CheckTimer+0x154>
 8007c50:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007c54:	2bff      	cmp	r3, #255	; 0xff
 8007c56:	d003      	beq.n	8007c60 <API_CheckTimer+0x158>
 8007c58:	2500      	movs	r5, #0
 8007c5a:	e002      	b.n	8007c62 <API_CheckTimer+0x15a>
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	e000      	b.n	8007c62 <API_CheckTimer+0x15a>
 8007c60:	2501      	movs	r5, #1
    }

    bool browse( handle_type const& t, desc_type& out ) const noexcept
    {
        auto it = find_( t );
        if ( it == node_.cend() ) {
 8007c62:	bb4d      	cbnz	r5, 8007cb8 <API_CheckTimer+0x1b0>

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::reference fslist_const_iterator<dty_, nty_>::operator*() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return *c->get_arg( cur_ );
 8007c64:	f89d 3014 	ldrb.w	r3, [sp, #20]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007c68:	2bff      	cmp	r3, #255	; 0xff
 8007c6a:	d106      	bne.n	8007c7a <API_CheckTimer+0x172>
 8007c6c:	4b1b      	ldr	r3, [pc, #108]	; (8007cdc <API_CheckTimer+0x1d4>)
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ce0 <API_CheckTimer+0x1d8>)
 8007c70:	f240 11af 	movw	r1, #431	; 0x1af
 8007c74:	481b      	ldr	r0, [pc, #108]	; (8007ce4 <API_CheckTimer+0x1dc>)
 8007c76:	f000 fc51 	bl	800851c <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007c7a:	2bff      	cmp	r3, #255	; 0xff
 8007c7c:	d007      	beq.n	8007c8e <API_CheckTimer+0x186>
 8007c7e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007c82:	6890      	ldr	r0, [r2, #8]
 8007c84:	4401      	add	r1, r0
 8007c86:	7889      	ldrb	r1, [r1, #2]
 8007c88:	29ff      	cmp	r1, #255	; 0xff
 8007c8a:	d000      	beq.n	8007c8e <API_CheckTimer+0x186>
 8007c8c:	2501      	movs	r5, #1
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8007c8e:	b935      	cbnz	r5, 8007c9e <API_CheckTimer+0x196>
 8007c90:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <API_CheckTimer+0x1e0>)
 8007c92:	4a13      	ldr	r2, [pc, #76]	; (8007ce0 <API_CheckTimer+0x1d8>)
 8007c94:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007c98:	4812      	ldr	r0, [pc, #72]	; (8007ce4 <API_CheckTimer+0x1dc>)
 8007c9a:	f000 fc3f 	bl	800851c <__assert_func>
        return varray_ + node;
 8007c9e:	68d6      	ldr	r6, [r2, #12]
 8007ca0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007ca4:	00d3      	lsls	r3, r2, #3
            return false;
        }
        out = *it;
 8007ca6:	af0a      	add	r7, sp, #40	; 0x28
 8007ca8:	441e      	add	r6, r3
 8007caa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007cac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8007cae:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007cb2:	e887 0003 	stmia.w	r7, {r0, r1}
 8007cb6:	e000      	b.n	8007cba <API_CheckTimer+0x1b2>

    bool browse( handle_type const& t, desc_type& out ) const noexcept
    {
        auto it = find_( t );
        if ( it == node_.cend() ) {
            return false;
 8007cb8:	2500      	movs	r5, #0
 8007cba:	b14d      	cbz	r5, 8007cd0 <API_CheckTimer+0x1c8>
        return false;
    }

    if ( usLeft )
 8007cbc:	b144      	cbz	r4, 8007cd0 <API_CheckTimer+0x1c8>
        *usLeft = d.trigger_at_ - API_GetTime_us();
 8007cbe:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8007cc2:	f7ff fde5 	bl	8007890 <API_GetTime_us>
 8007cc6:	1a30      	subs	r0, r6, r0
 8007cc8:	eb67 0101 	sbc.w	r1, r7, r1
 8007ccc:	e9c4 0100 	strd	r0, r1, [r4]
    return true;
}
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	b015      	add	sp, #84	; 0x54
 8007cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20004110 	.word	0x20004110
 8007cdc:	080104d8 	.word	0x080104d8
 8007ce0:	080100e4 	.word	0x080100e4
 8007ce4:	08010484 	.word	0x08010484
 8007ce8:	080104ec 	.word	0x080104ec
 8007cec:	08010508 	.word	0x08010508
 8007cf0:	08010744 	.word	0x08010744

08007cf4 <_ZSt25__throw_bad_function_callv>:

// This code is a dummy function to prevent link errors that occur when using the std :: function class.
namespace std {
void __throw_bad_function_call()
{
 8007cf4:	b508      	push	{r3, lr}
    uassert( false );
 8007cf6:	4b03      	ldr	r3, [pc, #12]	; (8007d04 <_ZSt25__throw_bad_function_callv+0x10>)
 8007cf8:	4a03      	ldr	r2, [pc, #12]	; (8007d08 <_ZSt25__throw_bad_function_callv+0x14>)
 8007cfa:	2192      	movs	r1, #146	; 0x92
 8007cfc:	4803      	ldr	r0, [pc, #12]	; (8007d0c <_ZSt25__throw_bad_function_callv+0x18>)
 8007cfe:	f000 fc0d 	bl	800851c <__assert_func>
 8007d02:	bf00      	nop
 8007d04:	08010538 	.word	0x08010538
 8007d08:	08010448 	.word	0x08010448
 8007d0c:	08010540 	.word	0x08010540

08007d10 <_ZNKSt8functionIFyvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8007d10:	b508      	push	{r3, lr}
      if (_M_manager)
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }
 8007d12:	6883      	ldr	r3, [r0, #8]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8007d14:	b90b      	cbnz	r3, 8007d1a <_ZNKSt8functionIFyvEEclEv+0xa>
	__throw_bad_function_call();
 8007d16:	f7ff ffed 	bl	8007cf4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007d1a:	68c3      	ldr	r3, [r0, #12]
 8007d1c:	4798      	blx	r3
    }
 8007d1e:	bd08      	pop	{r3, pc}

08007d20 <_ZL15TimerUpdateTaskPv>:
    s_tim.remove( { h.data_[0], h.data_[1] } );
    taskEXIT_CRITICAL();
}

_Noreturn void TimerUpdateTask( void* nouse__ )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	; 0x30
    for ( ;; ) {
        ulTaskNotifyTake( pdTRUE, 100 /* For case if lost ... */ );
 8007d24:	2164      	movs	r1, #100	; 0x64
 8007d26:	2001      	movs	r0, #1
 8007d28:	f7fc ffb0 	bl	8004c8c <ulTaskNotifyTake>

        __HAL_TIM_DISABLE_IT( &htim, TIM_FLAG_CC1 );
 8007d2c:	4b8e      	ldr	r3, [pc, #568]	; (8007f68 <_ZL15TimerUpdateTaskPv+0x248>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68d3      	ldr	r3, [r2, #12]
 8007d32:	f023 0302 	bic.w	r3, r3, #2
 8007d36:	60d3      	str	r3, [r2, #12]
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8007d38:	4b8c      	ldr	r3, [pc, #560]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007d3a:	9302      	str	r3, [sp, #8]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007d3c:	789b      	ldrb	r3, [r3, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 8007d3e:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    iterator begin() noexcept
    {
        auto d = cbegin();
        return static_cast<iterator&>( d );
 8007d42:	aa02      	add	r2, sp, #8
 8007d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d48:	e88d 0003 	stmia.w	sp, {r0, r1}
    fslist_const_iterator<dty_, nty_>& operator--() noexcept;
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
 8007d4c:	9a00      	ldr	r2, [sp, #0]
 8007d4e:	4b87      	ldr	r3, [pc, #540]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d105      	bne.n	8007d60 <_ZL15TimerUpdateTaskPv+0x40>
 8007d54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007d58:	2bff      	cmp	r3, #255	; 0xff
 8007d5a:	d003      	beq.n	8007d64 <_ZL15TimerUpdateTaskPv+0x44>
 8007d5c:	2401      	movs	r4, #1
 8007d5e:	e002      	b.n	8007d66 <_ZL15TimerUpdateTaskPv+0x46>
 8007d60:	2401      	movs	r4, #1
 8007d62:	e000      	b.n	8007d66 <_ZL15TimerUpdateTaskPv+0x46>
 8007d64:	2400      	movs	r4, #0
        return true;
    }

    tick_type update() noexcept
    {
        for ( auto it = node_.begin();
 8007d66:	b36c      	cbz	r4, 8007dc4 <_ZL15TimerUpdateTaskPv+0xa4>

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return c->get_arg( cur_ );
 8007d68:	f89d 3004 	ldrb.w	r3, [sp, #4]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007d6c:	2bff      	cmp	r3, #255	; 0xff
 8007d6e:	d106      	bne.n	8007d7e <_ZL15TimerUpdateTaskPv+0x5e>
 8007d70:	4b7f      	ldr	r3, [pc, #508]	; (8007f70 <_ZL15TimerUpdateTaskPv+0x250>)
 8007d72:	4a80      	ldr	r2, [pc, #512]	; (8007f74 <_ZL15TimerUpdateTaskPv+0x254>)
 8007d74:	f240 11af 	movw	r1, #431	; 0x1af
 8007d78:	487f      	ldr	r0, [pc, #508]	; (8007f78 <_ZL15TimerUpdateTaskPv+0x258>)
 8007d7a:	f000 fbcf 	bl	800851c <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007d7e:	2bff      	cmp	r3, #255	; 0xff
 8007d80:	d008      	beq.n	8007d94 <_ZL15TimerUpdateTaskPv+0x74>
 8007d82:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007d86:	6890      	ldr	r0, [r2, #8]
 8007d88:	4401      	add	r1, r0
 8007d8a:	7889      	ldrb	r1, [r1, #2]
 8007d8c:	29ff      	cmp	r1, #255	; 0xff
 8007d8e:	d102      	bne.n	8007d96 <_ZL15TimerUpdateTaskPv+0x76>
 8007d90:	2400      	movs	r4, #0
 8007d92:	e000      	b.n	8007d96 <_ZL15TimerUpdateTaskPv+0x76>
 8007d94:	2400      	movs	r4, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8007d96:	b934      	cbnz	r4, 8007da6 <_ZL15TimerUpdateTaskPv+0x86>
 8007d98:	4b78      	ldr	r3, [pc, #480]	; (8007f7c <_ZL15TimerUpdateTaskPv+0x25c>)
 8007d9a:	4a76      	ldr	r2, [pc, #472]	; (8007f74 <_ZL15TimerUpdateTaskPv+0x254>)
 8007d9c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007da0:	4875      	ldr	r0, [pc, #468]	; (8007f78 <_ZL15TimerUpdateTaskPv+0x258>)
 8007da2:	f000 fbbb 	bl	800851c <__assert_func>
        return varray_ + node;
 8007da6:	68d1      	ldr	r1, [r2, #12]
 8007da8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007dac:	00da      	lsls	r2, r3, #3
 8007dae:	440a      	add	r2, r1
              it != node_.end() && it->trigger_at_ <= tick_();
 8007db0:	e9d2 6702 	ldrd	r6, r7, [r2, #8]
 8007db4:	4872      	ldr	r0, [pc, #456]	; (8007f80 <_ZL15TimerUpdateTaskPv+0x260>)
 8007db6:	f7ff ffab 	bl	8007d10 <_ZNKSt8functionIFyvEEclEv>
        return true;
    }

    tick_type update() noexcept
    {
        for ( auto it = node_.begin();
 8007dba:	42b9      	cmp	r1, r7
 8007dbc:	bf08      	it	eq
 8007dbe:	42b0      	cmpeq	r0, r6
 8007dc0:	d200      	bcs.n	8007dc4 <_ZL15TimerUpdateTaskPv+0xa4>
 8007dc2:	2400      	movs	r4, #0
 8007dc4:	2c00      	cmp	r4, #0
 8007dc6:	f000 8088 	beq.w	8007eda <_ZL15TimerUpdateTaskPv+0x1ba>
}

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
 8007dca:	9900      	ldr	r1, [sp, #0]
    return c->get_arg( cur_ );
 8007dcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007dd0:	2bff      	cmp	r3, #255	; 0xff
 8007dd2:	d106      	bne.n	8007de2 <_ZL15TimerUpdateTaskPv+0xc2>
 8007dd4:	4b66      	ldr	r3, [pc, #408]	; (8007f70 <_ZL15TimerUpdateTaskPv+0x250>)
 8007dd6:	4a67      	ldr	r2, [pc, #412]	; (8007f74 <_ZL15TimerUpdateTaskPv+0x254>)
 8007dd8:	f240 11af 	movw	r1, #431	; 0x1af
 8007ddc:	4866      	ldr	r0, [pc, #408]	; (8007f78 <_ZL15TimerUpdateTaskPv+0x258>)
 8007dde:	f000 fb9d 	bl	800851c <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007de2:	2bff      	cmp	r3, #255	; 0xff
 8007de4:	d008      	beq.n	8007df8 <_ZL15TimerUpdateTaskPv+0xd8>
 8007de6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007dea:	6888      	ldr	r0, [r1, #8]
 8007dec:	4402      	add	r2, r0
 8007dee:	7892      	ldrb	r2, [r2, #2]
 8007df0:	2aff      	cmp	r2, #255	; 0xff
 8007df2:	d102      	bne.n	8007dfa <_ZL15TimerUpdateTaskPv+0xda>
 8007df4:	2400      	movs	r4, #0
 8007df6:	e000      	b.n	8007dfa <_ZL15TimerUpdateTaskPv+0xda>
 8007df8:	2400      	movs	r4, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8007dfa:	b934      	cbnz	r4, 8007e0a <_ZL15TimerUpdateTaskPv+0xea>
 8007dfc:	4b5f      	ldr	r3, [pc, #380]	; (8007f7c <_ZL15TimerUpdateTaskPv+0x25c>)
 8007dfe:	4a5d      	ldr	r2, [pc, #372]	; (8007f74 <_ZL15TimerUpdateTaskPv+0x254>)
 8007e00:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007e04:	485c      	ldr	r0, [pc, #368]	; (8007f78 <_ZL15TimerUpdateTaskPv+0x258>)
 8007e06:	f000 fb89 	bl	800851c <__assert_func>
        return varray_ + node;
 8007e0a:	68c9      	ldr	r1, [r1, #12]
 8007e0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007e10:	00da      	lsls	r2, r3, #3
 8007e12:	188b      	adds	r3, r1, r2
              it != node_.end() && it->trigger_at_ <= tick_();
              it = node_.begin() ) {
            auto cb  = it->cb_;
 8007e14:	695d      	ldr	r5, [r3, #20]
            auto obj = it->obj_;
 8007e16:	6918      	ldr	r0, [r3, #16]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007e18:	4b54      	ldr	r3, [pc, #336]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007e1a:	789a      	ldrb	r2, [r3, #2]
    template <typename ty1_, typename ty2_>
    friend class fslist_const_iterator;

    void release( size_type n )
    {
        uassert( n != NODE_NONE );
 8007e1c:	2aff      	cmp	r2, #255	; 0xff
 8007e1e:	d106      	bne.n	8007e2e <_ZL15TimerUpdateTaskPv+0x10e>
 8007e20:	4b58      	ldr	r3, [pc, #352]	; (8007f84 <_ZL15TimerUpdateTaskPv+0x264>)
 8007e22:	4a59      	ldr	r2, [pc, #356]	; (8007f88 <_ZL15TimerUpdateTaskPv+0x268>)
 8007e24:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8007e28:	4853      	ldr	r0, [pc, #332]	; (8007f78 <_ZL15TimerUpdateTaskPv+0x258>)
 8007e2a:	f000 fb77 	bl	800851c <__assert_func>
        }
    }

    void dealloc_node( size_type i ) noexcept
    {
        auto& n = narray_[i];
 8007e2e:	4b4f      	ldr	r3, [pc, #316]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007e30:	689e      	ldr	r6, [r3, #8]
 8007e32:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8007e36:	19f1      	adds	r1, r6, r7
        uassert( n.cur_ != NODE_NONE );
 8007e38:	788b      	ldrb	r3, [r1, #2]
 8007e3a:	2bff      	cmp	r3, #255	; 0xff
 8007e3c:	d105      	bne.n	8007e4a <_ZL15TimerUpdateTaskPv+0x12a>
 8007e3e:	4b53      	ldr	r3, [pc, #332]	; (8007f8c <_ZL15TimerUpdateTaskPv+0x26c>)
 8007e40:	4a53      	ldr	r2, [pc, #332]	; (8007f90 <_ZL15TimerUpdateTaskPv+0x270>)
 8007e42:	216b      	movs	r1, #107	; 0x6b
 8007e44:	484c      	ldr	r0, [pc, #304]	; (8007f78 <_ZL15TimerUpdateTaskPv+0x258>)
 8007e46:	f000 fb69 	bl	800851c <__assert_func>
        uassert( i >= 0 && i < capacity_ );
 8007e4a:	4b48      	ldr	r3, [pc, #288]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007e4c:	785b      	ldrb	r3, [r3, #1]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d305      	bcc.n	8007e5e <_ZL15TimerUpdateTaskPv+0x13e>
 8007e52:	4b50      	ldr	r3, [pc, #320]	; (8007f94 <_ZL15TimerUpdateTaskPv+0x274>)
 8007e54:	4a4e      	ldr	r2, [pc, #312]	; (8007f90 <_ZL15TimerUpdateTaskPv+0x270>)
 8007e56:	216c      	movs	r1, #108	; 0x6c
 8007e58:	4847      	ldr	r0, [pc, #284]	; (8007f78 <_ZL15TimerUpdateTaskPv+0x258>)
 8007e5a:	f000 fb5f 	bl	800851c <__assert_func>

        if ( n.nxt_ != NODE_NONE ) {
 8007e5e:	5df3      	ldrb	r3, [r6, r7]
 8007e60:	2bff      	cmp	r3, #255	; 0xff
 8007e62:	d005      	beq.n	8007e70 <_ZL15TimerUpdateTaskPv+0x150>
            narray_[n.nxt_].prv_ = n.prv_;
 8007e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007e68:	4433      	add	r3, r6
 8007e6a:	784c      	ldrb	r4, [r1, #1]
 8007e6c:	705c      	strb	r4, [r3, #1]
 8007e6e:	e002      	b.n	8007e76 <_ZL15TimerUpdateTaskPv+0x156>
        }
        else { // It's tail
            tail_ = n.prv_;
 8007e70:	784c      	ldrb	r4, [r1, #1]
 8007e72:	4b3e      	ldr	r3, [pc, #248]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007e74:	70dc      	strb	r4, [r3, #3]
        }

        if ( n.prv_ != NODE_NONE ) {
 8007e76:	784b      	ldrb	r3, [r1, #1]
 8007e78:	2bff      	cmp	r3, #255	; 0xff
 8007e7a:	d008      	beq.n	8007e8e <_ZL15TimerUpdateTaskPv+0x16e>
            narray_[n.prv_].nxt_ = n.nxt_;
 8007e7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007e80:	4c3a      	ldr	r4, [pc, #232]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007e82:	68a4      	ldr	r4, [r4, #8]
 8007e84:	f816 e007 	ldrb.w	lr, [r6, r7]
 8007e88:	f804 e003 	strb.w	lr, [r4, r3]
 8007e8c:	e002      	b.n	8007e94 <_ZL15TimerUpdateTaskPv+0x174>
        }
        else { // It's head
            head_ = n.nxt_;
 8007e8e:	5df4      	ldrb	r4, [r6, r7]
 8007e90:	4b36      	ldr	r3, [pc, #216]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007e92:	709c      	strb	r4, [r3, #2]
        }

        if ( idle_ != NODE_NONE ) {
 8007e94:	4b35      	ldr	r3, [pc, #212]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007e96:	791b      	ldrb	r3, [r3, #4]
 8007e98:	2bff      	cmp	r3, #255	; 0xff
 8007e9a:	d005      	beq.n	8007ea8 <_ZL15TimerUpdateTaskPv+0x188>
            narray_[idle_].prv_ = i;
 8007e9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007ea0:	4c32      	ldr	r4, [pc, #200]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007ea2:	68a4      	ldr	r4, [r4, #8]
 8007ea4:	4423      	add	r3, r4
 8007ea6:	705a      	strb	r2, [r3, #1]
        }
        n.prv_ = NODE_NONE;
 8007ea8:	23ff      	movs	r3, #255	; 0xff
 8007eaa:	704b      	strb	r3, [r1, #1]
        n.cur_ = NODE_NONE;
 8007eac:	708b      	strb	r3, [r1, #2]
        n.nxt_ = idle_;
 8007eae:	4c2f      	ldr	r4, [pc, #188]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007eb0:	7923      	ldrb	r3, [r4, #4]
 8007eb2:	55f3      	strb	r3, [r6, r7]
        idle_  = i;
 8007eb4:	7122      	strb	r2, [r4, #4]
        --size_;
 8007eb6:	7823      	ldrb	r3, [r4, #0]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	7023      	strb	r3, [r4, #0]

            node_.pop_front();
            cb( obj );
 8007ebc:	47a8      	blx	r5
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8007ebe:	9402      	str	r4, [sp, #8]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007ec0:	78a3      	ldrb	r3, [r4, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 8007ec2:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    iterator begin() noexcept
    {
        auto d = cbegin();
        return static_cast<iterator&>( d );
 8007ec6:	ab0a      	add	r3, sp, #40	; 0x28
 8007ec8:	aa02      	add	r2, sp, #8
 8007eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ece:	e883 0003 	stmia.w	r3, {r0, r1}
        return true;
    }

    tick_type update() noexcept
    {
        for ( auto it = node_.begin();
 8007ed2:	9000      	str	r0, [sp, #0]
 8007ed4:	f88d 1004 	strb.w	r1, [sp, #4]
 8007ed8:	e738      	b.n	8007d4c <_ZL15TimerUpdateTaskPv+0x2c>

public:
    size_type max_size() const noexcept { return capacity_; }
    size_type capacity() const noexcept { return capacity_ - size_; }
    size_type size() const noexcept { return size_; }
    bool      empty() const noexcept { return size_ == 0; }
 8007eda:	4b24      	ldr	r3, [pc, #144]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
        }
    }

    tick_type next_trig() const noexcept
    {
        if ( empty() ) {
 8007ede:	b323      	cbz	r3, 8007f2a <_ZL15TimerUpdateTaskPv+0x20a>
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007ee0:	4b22      	ldr	r3, [pc, #136]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007ee2:	789b      	ldrb	r3, [r3, #2]
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007ee4:	2bff      	cmp	r3, #255	; 0xff
 8007ee6:	d008      	beq.n	8007efa <_ZL15TimerUpdateTaskPv+0x1da>
 8007ee8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007eec:	491f      	ldr	r1, [pc, #124]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007eee:	6889      	ldr	r1, [r1, #8]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	7892      	ldrb	r2, [r2, #2]
 8007ef4:	2aff      	cmp	r2, #255	; 0xff
 8007ef6:	d000      	beq.n	8007efa <_ZL15TimerUpdateTaskPv+0x1da>
 8007ef8:	2401      	movs	r4, #1
        return static_cast<iterator&>( d );
    }

    const_reference front() const noexcept
    {
        uassert( super::valid_node( super::head() ) );
 8007efa:	b934      	cbnz	r4, 8007f0a <_ZL15TimerUpdateTaskPv+0x1ea>
 8007efc:	4b26      	ldr	r3, [pc, #152]	; (8007f98 <_ZL15TimerUpdateTaskPv+0x278>)
 8007efe:	4a27      	ldr	r2, [pc, #156]	; (8007f9c <_ZL15TimerUpdateTaskPv+0x27c>)
 8007f00:	f240 1157 	movw	r1, #343	; 0x157
 8007f04:	481c      	ldr	r0, [pc, #112]	; (8007f78 <_ZL15TimerUpdateTaskPv+0x258>)
 8007f06:	f000 fb09 	bl	800851c <__assert_func>
        return varray_[super::head()];
 8007f0a:	4a18      	ldr	r2, [pc, #96]	; (8007f6c <_ZL15TimerUpdateTaskPv+0x24c>)
 8007f0c:	68d4      	ldr	r4, [r2, #12]
 8007f0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007f12:	00d3      	lsls	r3, r2, #3
 8007f14:	ad04      	add	r5, sp, #16
 8007f16:	441c      	add	r4, r3
 8007f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f20:	e885 0003 	stmia.w	r5, {r0, r1}
            return TIMER_INVALID;
        }
        return node_.front().trigger_at_;
 8007f24:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007f28:	e003      	b.n	8007f32 <_ZL15TimerUpdateTaskPv+0x212>
    }

    tick_type next_trig() const noexcept
    {
        if ( empty() ) {
            return TIMER_INVALID;
 8007f2a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f2e:	f04f 35ff 	mov.w	r5, #4294967295
        auto next = s_tim.update();

        if ( next != (usec_t)-1 ) {
 8007f32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007f36:	bf08      	it	eq
 8007f38:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8007f3c:	f43f aef2 	beq.w	8007d24 <_ZL15TimerUpdateTaskPv+0x4>
            int delay = next - API_GetTime_us();
 8007f40:	f7ff fca6 	bl	8007890 <API_GetTime_us>
 8007f44:	1a20      	subs	r0, r4, r0
            int cnt   = htim.Instance->CNT;
 8007f46:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <_ZL15TimerUpdateTaskPv+0x248>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            int arr   = htim.Instance->ARR;
 8007f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

            if ( cnt + delay > arr )
 8007f4e:	4410      	add	r0, r2
 8007f50:	4281      	cmp	r1, r0
 8007f52:	da02      	bge.n	8007f5a <_ZL15TimerUpdateTaskPv+0x23a>
                htim.Instance->CCR1 = ( cnt + delay ) - arr;
 8007f54:	1a40      	subs	r0, r0, r1
 8007f56:	6358      	str	r0, [r3, #52]	; 0x34
 8007f58:	e000      	b.n	8007f5c <_ZL15TimerUpdateTaskPv+0x23c>
            else
                htim.Instance->CCR1 = ( cnt + delay );
 8007f5a:	6358      	str	r0, [r3, #52]	; 0x34

            __HAL_TIM_ENABLE_IT( &htim, TIM_FLAG_CC1 );
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	f042 0202 	orr.w	r2, r2, #2
 8007f62:	60da      	str	r2, [r3, #12]
 8007f64:	e6de      	b.n	8007d24 <_ZL15TimerUpdateTaskPv+0x4>
 8007f66:	bf00      	nop
 8007f68:	20005ba4 	.word	0x20005ba4
 8007f6c:	20004110 	.word	0x20004110
 8007f70:	080104d8 	.word	0x080104d8
 8007f74:	080100e4 	.word	0x080100e4
 8007f78:	08010484 	.word	0x08010484
 8007f7c:	080104ec 	.word	0x080104ec
 8007f80:	20004558 	.word	0x20004558
 8007f84:	08010528 	.word	0x08010528
 8007f88:	08010800 	.word	0x08010800
 8007f8c:	08010470 	.word	0x08010470
 8007f90:	08010bf8 	.word	0x08010bf8
 8007f94:	080104b8 	.word	0x080104b8
 8007f98:	08010558 	.word	0x08010558
 8007f9c:	080102c0 	.word	0x080102c0

08007fa0 <API_SetTimer>:
{
    return s_total_us + GET_TICK();
}

extern "C" timer_handle_t API_SetTimer( usec_t delay, void* obj, void ( *cb )( void* ) )
{
 8007fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa2:	b0a7      	sub	sp, #156	; 0x9c
 8007fa4:	4616      	mov	r6, r2
 8007fa6:	461f      	mov	r7, r3
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }

public:
    size_type max_size() const noexcept { return capacity_; }
 8007fa8:	4ba8      	ldr	r3, [pc, #672]	; (800824c <API_SetTimer+0x2ac>)
 8007faa:	785a      	ldrb	r2, [r3, #1]
    size_type capacity() const noexcept { return capacity_ - size_; }
    size_type size() const noexcept { return size_; }
 8007fac:	781b      	ldrb	r3, [r3, #0]
    uassert( s_tim.capacity() > 0 );
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d105      	bne.n	8007fbe <API_SetTimer+0x1e>
 8007fb2:	4ba7      	ldr	r3, [pc, #668]	; (8008250 <API_SetTimer+0x2b0>)
 8007fb4:	4aa7      	ldr	r2, [pc, #668]	; (8008254 <API_SetTimer+0x2b4>)
 8007fb6:	2150      	movs	r1, #80	; 0x50
 8007fb8:	48a7      	ldr	r0, [pc, #668]	; (8008258 <API_SetTimer+0x2b8>)
 8007fba:	f000 faaf 	bl	800851c <__assert_func>
 8007fbe:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
 8007fc0:	f7fd fbd8 	bl	8005774 <vPortEnterCritical>
    auto r = s_tim.add( std::max( 10ull, delay - 10ull ), obj, cb );
 8007fc4:	220a      	movs	r2, #10
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8007fcc:	f1b6 020a 	subs.w	r2, r6, #10
 8007fd0:	f147 33ff 	adc.w	r3, r7, #4294967295
 8007fd4:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bf08      	it	eq
 8007fdc:	2a0b      	cmpeq	r2, #11
 8007fde:	d301      	bcc.n	8007fe4 <API_SetTimer+0x44>
	return __b;
 8007fe0:	ab20      	add	r3, sp, #128	; 0x80
 8007fe2:	e000      	b.n	8007fe6 <API_SetTimer+0x46>
      return __a;
 8007fe4:	ab1e      	add	r3, sp, #120	; 0x78
 8007fe6:	e9d3 6700 	ldrd	r6, r7, [r3]
      if (_M_manager)
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }
 8007fea:	4b98      	ldr	r3, [pc, #608]	; (800824c <API_SetTimer+0x2ac>)
 8007fec:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
    template <class tick_fnc__>
    void tick_function( tick_fnc__&& v ) noexcept { tick_ = std::forward<tick_fnc__>( v ); }

    handle_type add( tick_type delay, void* obj, timer_cb_t callback ) noexcept
    {
        uassert( tick_ );
 8007ff0:	b92b      	cbnz	r3, 8007ffe <API_SetTimer+0x5e>
 8007ff2:	4b9a      	ldr	r3, [pc, #616]	; (800825c <API_SetTimer+0x2bc>)
 8007ff4:	4a9a      	ldr	r2, [pc, #616]	; (8008260 <API_SetTimer+0x2c0>)
 8007ff6:	212e      	movs	r1, #46	; 0x2e
 8007ff8:	489a      	ldr	r0, [pc, #616]	; (8008264 <API_SetTimer+0x2c4>)
 8007ffa:	f000 fa8f 	bl	800851c <__assert_func>
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }

public:
    size_type max_size() const noexcept { return capacity_; }
 8007ffe:	4b93      	ldr	r3, [pc, #588]	; (800824c <API_SetTimer+0x2ac>)
 8008000:	785a      	ldrb	r2, [r3, #1]
    size_type capacity() const noexcept { return capacity_ - size_; }
    size_type size() const noexcept { return size_; }
 8008002:	781b      	ldrb	r3, [r3, #0]
        uassert( capacity() );
 8008004:	429a      	cmp	r2, r3
 8008006:	d105      	bne.n	8008014 <API_SetTimer+0x74>
 8008008:	4b97      	ldr	r3, [pc, #604]	; (8008268 <API_SetTimer+0x2c8>)
 800800a:	4a95      	ldr	r2, [pc, #596]	; (8008260 <API_SetTimer+0x2c0>)
 800800c:	212f      	movs	r1, #47	; 0x2f
 800800e:	4895      	ldr	r0, [pc, #596]	; (8008264 <API_SetTimer+0x2c4>)
 8008010:	f000 fa84 	bl	800851c <__assert_func>

        desc_type d;
        d.trigger_at_ = delay + tick_();
 8008014:	4c8d      	ldr	r4, [pc, #564]	; (800824c <API_SetTimer+0x2ac>)
 8008016:	f504 6089 	add.w	r0, r4, #1096	; 0x448
 800801a:	f7ff fe79 	bl	8007d10 <_ZNKSt8functionIFyvEEclEv>
 800801e:	1980      	adds	r0, r0, r6
 8008020:	4179      	adcs	r1, r7
 8008022:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
        d.cb_         = callback;
 8008026:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008028:	9319      	str	r3, [sp, #100]	; 0x64
        d.obj_        = obj;
 800802a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800802c:	9318      	str	r3, [sp, #96]	; 0x60
        d.id_         = id_gen_++;
 800802e:	f504 618b 	add.w	r1, r4, #1112	; 0x458
 8008032:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008036:	1c56      	adds	r6, r2, #1
 8008038:	f143 0700 	adc.w	r7, r3, #0
 800803c:	e9c1 6700 	strd	r6, r7, [r1]
 8008040:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8008044:	9412      	str	r4, [sp, #72]	; 0x48
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8008046:	78a3      	ldrb	r3, [r4, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 8008048:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    }

    iterator begin() noexcept
    {
        auto d = cbegin();
        return static_cast<iterator&>( d );
 800804c:	ae24      	add	r6, sp, #144	; 0x90
 800804e:	ab12      	add	r3, sp, #72	; 0x48
 8008050:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008054:	e886 0003 	stmia.w	r6, {r0, r1}

    const_iterator cend() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = NODE_NONE;
 8008058:	22ff      	movs	r2, #255	; 0xff
 800805a:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
        return static_cast<iterator&>( d );
    }
    iterator end() noexcept
    {
        auto d = cend();
        return static_cast<iterator&>( d );
 800805e:	aa22      	add	r2, sp, #136	; 0x88
 8008060:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008064:	e882 0003 	stmia.w	r2, {r0, r1}
 8008068:	ab06      	add	r3, sp, #24
 800806a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800806e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008072:	ac08      	add	r4, sp, #32
 8008074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008078:	e884 0003 	stmia.w	r4, {r0, r1}
 800807c:	aa0c      	add	r2, sp, #48	; 0x30
 800807e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008082:	e882 0003 	stmia.w	r2, {r0, r1}
 8008086:	ab0a      	add	r3, sp, #40	; 0x28
 8008088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800808c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008090:	ac0e      	add	r4, sp, #56	; 0x38
 8008092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008096:	e884 0003 	stmia.w	r4, {r0, r1}
 800809a:	aa10      	add	r2, sp, #64	; 0x40
 800809c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80080a0:	e882 0003 	stmia.w	r2, {r0, r1}
    fslist_const_iterator<dty_, nty_>& operator--() noexcept;
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
 80080a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80080a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080a8:	42a3      	cmp	r3, r4
 80080aa:	d107      	bne.n	80080bc <API_SetTimer+0x11c>
 80080ac:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80080b0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d003      	beq.n	80080c0 <API_SetTimer+0x120>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e002      	b.n	80080c2 <API_SetTimer+0x122>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <API_SetTimer+0x122>
 80080c0:	2300      	movs	r3, #0
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
	      _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d031      	beq.n	800812a <API_SetTimer+0x18a>
 80080c6:	aa12      	add	r2, sp, #72	; 0x48
 80080c8:	a90e      	add	r1, sp, #56	; 0x38
 80080ca:	c903      	ldmia	r1, {r0, r1}
 80080cc:	e882 0003 	stmia.w	r2, {r0, r1}

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::reference fslist_const_iterator<dty_, nty_>::operator*() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return *c->get_arg( cur_ );
 80080d0:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 80080d4:	2aff      	cmp	r2, #255	; 0xff
 80080d6:	d106      	bne.n	80080e6 <API_SetTimer+0x146>
 80080d8:	4b64      	ldr	r3, [pc, #400]	; (800826c <API_SetTimer+0x2cc>)
 80080da:	4a65      	ldr	r2, [pc, #404]	; (8008270 <API_SetTimer+0x2d0>)
 80080dc:	f240 11af 	movw	r1, #431	; 0x1af
 80080e0:	4864      	ldr	r0, [pc, #400]	; (8008274 <API_SetTimer+0x2d4>)
 80080e2:	f000 fa1b 	bl	800851c <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 80080e6:	2aff      	cmp	r2, #255	; 0xff
 80080e8:	d008      	beq.n	80080fc <API_SetTimer+0x15c>
 80080ea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80080ee:	68a0      	ldr	r0, [r4, #8]
 80080f0:	4401      	add	r1, r0
 80080f2:	7889      	ldrb	r1, [r1, #2]
 80080f4:	29ff      	cmp	r1, #255	; 0xff
 80080f6:	d102      	bne.n	80080fe <API_SetTimer+0x15e>
 80080f8:	2300      	movs	r3, #0
 80080fa:	e000      	b.n	80080fe <API_SetTimer+0x15e>
 80080fc:	2300      	movs	r3, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 80080fe:	b933      	cbnz	r3, 800810e <API_SetTimer+0x16e>
 8008100:	4b5d      	ldr	r3, [pc, #372]	; (8008278 <API_SetTimer+0x2d8>)
 8008102:	4a5b      	ldr	r2, [pc, #364]	; (8008270 <API_SetTimer+0x2d0>)
 8008104:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008108:	485a      	ldr	r0, [pc, #360]	; (8008274 <API_SetTimer+0x2d4>)
 800810a:	f000 fa07 	bl	800851c <__assert_func>
        return varray_ + node;
 800810e:	68e0      	ldr	r0, [r4, #12]
 8008110:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008114:	00d1      	lsls	r1, r2, #3
 8008116:	4401      	add	r1, r0

        auto at = std::find_if(
            node_.begin(), node_.end(),
            [&d]( auto& a ) { return d.trigger_at_ < a.trigger_at_; } );
 8008118:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
 800811c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8008120:	42b9      	cmp	r1, r7
 8008122:	bf08      	it	eq
 8008124:	42b0      	cmpeq	r0, r6
 8008126:	d200      	bcs.n	800812a <API_SetTimer+0x18a>
 8008128:	2300      	movs	r3, #0
 800812a:	b19b      	cbz	r3, 8008154 <API_SetTimer+0x1b4>
};

template <typename dty_, typename nty_>
inline fslist_const_iterator<dty_, nty_>& fslist_const_iterator<dty_, nty_>::operator++() noexcept
{
    uassert( container_ && cur_ != NODE_NONE );
 800812c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800812e:	b11a      	cbz	r2, 8008138 <API_SetTimer+0x198>
 8008130:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8008134:	2bff      	cmp	r3, #255	; 0xff
 8008136:	d106      	bne.n	8008146 <API_SetTimer+0x1a6>
 8008138:	4b50      	ldr	r3, [pc, #320]	; (800827c <API_SetTimer+0x2dc>)
 800813a:	4a51      	ldr	r2, [pc, #324]	; (8008280 <API_SetTimer+0x2e0>)
 800813c:	f240 11bb 	movw	r1, #443	; 0x1bb
 8008140:	484c      	ldr	r0, [pc, #304]	; (8008274 <API_SetTimer+0x2d4>)
 8008142:	f000 f9eb 	bl	800851c <__assert_func>
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 8008146:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800814a:	6892      	ldr	r2, [r2, #8]
 800814c:	5cd3      	ldrb	r3, [r2, r3]

template <typename dty_, typename nty_>
inline fslist_const_iterator<dty_, nty_>& fslist_const_iterator<dty_, nty_>::operator++() noexcept
{
    uassert( container_ && cur_ != NODE_NONE );
    cur_ = container_->next( cur_ );
 800814e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8008152:	e7a7      	b.n	80080a4 <API_SetTimer+0x104>
	++__first;
      return __first;
 8008154:	aa0e      	add	r2, sp, #56	; 0x38
 8008156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800815a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800815e:	9002      	str	r0, [sp, #8]
 8008160:	f88d 100c 	strb.w	r1, [sp, #12]
 8008164:	ab04      	add	r3, sp, #16
 8008166:	aa02      	add	r2, sp, #8
 8008168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800816c:	e883 0003 	stmia.w	r3, {r0, r1}
    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }

public:
    size_type max_size() const noexcept { return capacity_; }
    size_type capacity() const noexcept { return capacity_ - size_; }
    size_type size() const noexcept { return size_; }
 8008170:	4b36      	ldr	r3, [pc, #216]	; (800824c <API_SetTimer+0x2ac>)
 8008172:	781a      	ldrb	r2, [r3, #0]
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }

public:
    size_type max_size() const noexcept { return capacity_; }
 8008174:	785b      	ldrb	r3, [r3, #1]
    }

    template <typename... ty__>
    iterator emplace( const_iterator pos, ty__&&... args ) noexcept
    {
        uassert( super::size() < super::max_size() );
 8008176:	429a      	cmp	r2, r3
 8008178:	d306      	bcc.n	8008188 <API_SetTimer+0x1e8>
 800817a:	4b42      	ldr	r3, [pc, #264]	; (8008284 <API_SetTimer+0x2e4>)
 800817c:	4a42      	ldr	r2, [pc, #264]	; (8008288 <API_SetTimer+0x2e8>)
 800817e:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8008182:	483c      	ldr	r0, [pc, #240]	; (8008274 <API_SetTimer+0x2d4>)
 8008184:	f000 f9ca 	bl	800851c <__assert_func>
        narray_[capacity_ - 1].nxt_ = NODE_NONE;
    }

    size_type alloc_node() noexcept
    {
        uassert( size_ < capacity_ );
 8008188:	4b30      	ldr	r3, [pc, #192]	; (800824c <API_SetTimer+0x2ac>)
 800818a:	781a      	ldrb	r2, [r3, #0]
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	429a      	cmp	r2, r3
 8008190:	d305      	bcc.n	800819e <API_SetTimer+0x1fe>
 8008192:	4b3e      	ldr	r3, [pc, #248]	; (800828c <API_SetTimer+0x2ec>)
 8008194:	4a3e      	ldr	r2, [pc, #248]	; (8008290 <API_SetTimer+0x2f0>)
 8008196:	2142      	movs	r1, #66	; 0x42
 8008198:	4836      	ldr	r0, [pc, #216]	; (8008274 <API_SetTimer+0x2d4>)
 800819a:	f000 f9bf 	bl	800851c <__assert_func>
        auto& n = narray_[idle_];
 800819e:	4b2b      	ldr	r3, [pc, #172]	; (800824c <API_SetTimer+0x2ac>)
 80081a0:	689c      	ldr	r4, [r3, #8]
 80081a2:	791a      	ldrb	r2, [r3, #4]
 80081a4:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 80081a8:	1821      	adds	r1, r4, r0
        n.cur_  = idle_;
 80081aa:	708a      	strb	r2, [r1, #2]
        idle_   = n.nxt_;
 80081ac:	5c22      	ldrb	r2, [r4, r0]
 80081ae:	711a      	strb	r2, [r3, #4]
        ++size_;
 80081b0:	781a      	ldrb	r2, [r3, #0]
 80081b2:	3201      	adds	r2, #1
 80081b4:	701a      	strb	r2, [r3, #0]
        return n.cur_;
 80081b6:	788a      	ldrb	r2, [r1, #2]
    template <typename... ty__>
    iterator emplace( const_iterator pos, ty__&&... args ) noexcept
    {
        uassert( super::size() < super::max_size() );
        auto n = super::alloc_node();
        super::insert_node( n, pos.cur_ );
 80081b8:	f89d 1014 	ldrb.w	r1, [sp, #20]
        return n.cur_;
    }

    void insert_node( size_type i, size_type at ) noexcept
    {
        node_type& n = narray_[i];
 80081bc:	6898      	ldr	r0, [r3, #8]
 80081be:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 80081c2:	1984      	adds	r4, r0, r6
        uassert( n.cur_ != NODE_NONE );
 80081c4:	78a3      	ldrb	r3, [r4, #2]
 80081c6:	2bff      	cmp	r3, #255	; 0xff
 80081c8:	d105      	bne.n	80081d6 <API_SetTimer+0x236>
 80081ca:	4b32      	ldr	r3, [pc, #200]	; (8008294 <API_SetTimer+0x2f4>)
 80081cc:	4a32      	ldr	r2, [pc, #200]	; (8008298 <API_SetTimer+0x2f8>)
 80081ce:	214d      	movs	r1, #77	; 0x4d
 80081d0:	4828      	ldr	r0, [pc, #160]	; (8008274 <API_SetTimer+0x2d4>)
 80081d2:	f000 f9a3 	bl	800851c <__assert_func>
        if ( at == NODE_NONE ) {
 80081d6:	29ff      	cmp	r1, #255	; 0xff
 80081d8:	d112      	bne.n	8008200 <API_SetTimer+0x260>
            n.nxt_ = NODE_NONE;
 80081da:	23ff      	movs	r3, #255	; 0xff
 80081dc:	5583      	strb	r3, [r0, r6]
            n.prv_ = tail_;
 80081de:	4b1b      	ldr	r3, [pc, #108]	; (800824c <API_SetTimer+0x2ac>)
 80081e0:	78d9      	ldrb	r1, [r3, #3]
 80081e2:	7061      	strb	r1, [r4, #1]
            if ( tail_ != NODE_NONE ) {
 80081e4:	78db      	ldrb	r3, [r3, #3]
 80081e6:	2bff      	cmp	r3, #255	; 0xff
 80081e8:	d005      	beq.n	80081f6 <API_SetTimer+0x256>
                narray_[tail_].nxt_ = i;
 80081ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80081ee:	4917      	ldr	r1, [pc, #92]	; (800824c <API_SetTimer+0x2ac>)
 80081f0:	6889      	ldr	r1, [r1, #8]
 80081f2:	54ca      	strb	r2, [r1, r3]
 80081f4:	e001      	b.n	80081fa <API_SetTimer+0x25a>
            }
            else { // tail is empty == head is empty
                head_ = i;
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <API_SetTimer+0x2ac>)
 80081f8:	709a      	strb	r2, [r3, #2]
            }
            tail_ = i;
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <API_SetTimer+0x2ac>)
 80081fc:	70da      	strb	r2, [r3, #3]
 80081fe:	e059      	b.n	80082b4 <API_SetTimer+0x314>
        }
        else {
            if ( at == head_ ) {
 8008200:	4b12      	ldr	r3, [pc, #72]	; (800824c <API_SetTimer+0x2ac>)
 8008202:	789b      	ldrb	r3, [r3, #2]
 8008204:	4299      	cmp	r1, r3
 8008206:	d101      	bne.n	800820c <API_SetTimer+0x26c>
                head_ = i;
 8008208:	4b10      	ldr	r3, [pc, #64]	; (800824c <API_SetTimer+0x2ac>)
 800820a:	709a      	strb	r2, [r3, #2]
            }
            node_type& n_at = narray_[at];
 800820c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8008210:	19c3      	adds	r3, r0, r7
            uassert( n_at.cur_ != NODE_NONE );
 8008212:	f893 e002 	ldrb.w	lr, [r3, #2]
 8008216:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800821a:	d105      	bne.n	8008228 <API_SetTimer+0x288>
 800821c:	4b1f      	ldr	r3, [pc, #124]	; (800829c <API_SetTimer+0x2fc>)
 800821e:	4a1e      	ldr	r2, [pc, #120]	; (8008298 <API_SetTimer+0x2f8>)
 8008220:	215e      	movs	r1, #94	; 0x5e
 8008222:	4814      	ldr	r0, [pc, #80]	; (8008274 <API_SetTimer+0x2d4>)
 8008224:	f000 f97a 	bl	800851c <__assert_func>
            n.nxt_ = at;
 8008228:	5581      	strb	r1, [r0, r6]
            n.prv_ = n_at.prv_;
 800822a:	7859      	ldrb	r1, [r3, #1]
 800822c:	7061      	strb	r1, [r4, #1]
            if ( n_at.prv_ != NODE_NONE ) {
 800822e:	785c      	ldrb	r4, [r3, #1]
 8008230:	2cff      	cmp	r4, #255	; 0xff
 8008232:	d03e      	beq.n	80082b2 <API_SetTimer+0x312>
    fslist_node<nty_>& next() { return by_( nxt_ ); }

private:
    fslist_node<nty_>& by_( int absolute )
    {
        uassert( nxt_ != NODE_NONE && prv_ != NODE_NONE );
 8008234:	5dc1      	ldrb	r1, [r0, r7]
 8008236:	29ff      	cmp	r1, #255	; 0xff
 8008238:	d001      	beq.n	800823e <API_SetTimer+0x29e>
 800823a:	2cff      	cmp	r4, #255	; 0xff
 800823c:	d134      	bne.n	80082a8 <API_SetTimer+0x308>
 800823e:	4b18      	ldr	r3, [pc, #96]	; (80082a0 <API_SetTimer+0x300>)
 8008240:	4a18      	ldr	r2, [pc, #96]	; (80082a4 <API_SetTimer+0x304>)
 8008242:	2122      	movs	r1, #34	; 0x22
 8008244:	480b      	ldr	r0, [pc, #44]	; (8008274 <API_SetTimer+0x2d4>)
 8008246:	f000 f969 	bl	800851c <__assert_func>
 800824a:	bf00      	nop
 800824c:	20004110 	.word	0x20004110
 8008250:	0801057c 	.word	0x0801057c
 8008254:	08010cb8 	.word	0x08010cb8
 8008258:	08010540 	.word	0x08010540
 800825c:	08010594 	.word	0x08010594
 8008260:	08010cf4 	.word	0x08010cf4
 8008264:	0801059c 	.word	0x0801059c
 8008268:	080105d0 	.word	0x080105d0
 800826c:	080104d8 	.word	0x080104d8
 8008270:	080100e4 	.word	0x080100e4
 8008274:	08010484 	.word	0x08010484
 8008278:	080104ec 	.word	0x080104ec
 800827c:	08010508 	.word	0x08010508
 8008280:	08010744 	.word	0x08010744
 8008284:	080105dc 	.word	0x080105dc
 8008288:	080109b0 	.word	0x080109b0
 800828c:	08010600 	.word	0x08010600
 8008290:	080108f4 	.word	0x080108f4
 8008294:	08010470 	.word	0x08010470
 8008298:	08010654 	.word	0x08010654
 800829c:	08010614 	.word	0x08010614
 80082a0:	0801062c 	.word	0x0801062c
 80082a4:	080103e4 	.word	0x080103e4
        return *( this + cur_ - absolute );
 80082a8:	7899      	ldrb	r1, [r3, #2]
 80082aa:	1b09      	subs	r1, r1, r4
 80082ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
            node_type& n_at = narray_[at];
            uassert( n_at.cur_ != NODE_NONE );
            n.nxt_ = at;
            n.prv_ = n_at.prv_;
            if ( n_at.prv_ != NODE_NONE ) {
                n_at.prev().nxt_ = i;
 80082b0:	545a      	strb	r2, [r3, r1]
            }
            n_at.prv_ = i;
 80082b2:	705a      	strb	r2, [r3, #1]
    {
        uassert( super::size() < super::max_size() );
        auto n = super::alloc_node();
        super::insert_node( n, pos.cur_ );

        new ( varray_ + n ) value_type( std::forward<ty__>( args )... );
 80082b4:	4b14      	ldr	r3, [pc, #80]	; (8008308 <API_SetTimer+0x368>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80082bc:	00d4      	lsls	r4, r2, #3
 80082be:	191c      	adds	r4, r3, r4
 80082c0:	d006      	beq.n	80082d0 <API_SetTimer+0x330>
 80082c2:	ae14      	add	r6, sp, #80	; 0x50
 80082c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80082c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082c8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80082cc:	e884 0003 	stmia.w	r4, {r0, r1}

        node_.insert( at, d );

        handle_type ret;
        ret.id_   = d.id_;
 80082d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80082d4:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
        ret.time_ = d.trigger_at_;
 80082d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80082dc:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    // Wake update task
    xTaskNotifyGive( sTimerTask );
 80082e0:	2300      	movs	r3, #0
 80082e2:	2202      	movs	r2, #2
 80082e4:	4619      	mov	r1, r3
 80082e6:	4809      	ldr	r0, [pc, #36]	; (800830c <API_SetTimer+0x36c>)
 80082e8:	6800      	ldr	r0, [r0, #0]
 80082ea:	f7fc fd09 	bl	8004d00 <xTaskGenericNotify>
    taskEXIT_CRITICAL();
 80082ee:	f7fd fa63 	bl	80057b8 <vPortExitCritical>
    return { r.id_, r.time_ };
 80082f2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80082f6:	e9c5 2300 	strd	r2, r3, [r5]
 80082fa:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80082fe:	e9c5 2302 	strd	r2, r3, [r5, #8]
}
 8008302:	4628      	mov	r0, r5
 8008304:	b027      	add	sp, #156	; 0x9c
 8008306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008308:	20004110 	.word	0x20004110
 800830c:	20004570 	.word	0x20004570

08008310 <_GLOBAL__sub_I_HW_TIMER_INIT>:
void __throw_bad_function_call()
{
    uassert( false );
    for ( ;; ) { }
}
} // namespace std
 8008310:	b508      	push	{r3, lr}
 8008312:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008316:	2001      	movs	r0, #1
 8008318:	f7ff f986 	bl	8007628 <_Z41__static_initialization_and_destruction_0ii>
 800831c:	bd08      	pop	{r3, pc}
 800831e:	bf00      	nop

08008320 <_ZL9cdc_ioctlPvi>:
#include <uEmbedded/transceiver.h>
#include <uEmbedded/uassert.h>
#include <usbd_cdc_if.h>
static transceiver_result_t cdc_read( void* desc, char* buf, size_t len );
static transceiver_result_t cdc_write( void* desc, char const* buf, size_t len );
static transceiver_result_t cdc_ioctl( void* desc, intptr_t cmd ) { return TRANSCEIVER_OK; }
 8008320:	2000      	movs	r0, #0
 8008322:	4770      	bx	lr

08008324 <_Z41__static_initialization_and_destruction_0ii>:
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
    ring_buffer_write( &s_rw.rdqueue_, Buf, len );
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
}
 8008324:	2801      	cmp	r0, #1
 8008326:	d106      	bne.n	8008336 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8008328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800832c:	4299      	cmp	r1, r3
 800832e:	d102      	bne.n	8008336 <_Z41__static_initialization_and_destruction_0ii+0x12>
    .read  = cdc_read,
    .write = cdc_write,
    .ioctl = cdc_ioctl,
    .close = cdc_close };

static struct usb_rw {
 8008330:	4a01      	ldr	r2, [pc, #4]	; (8008338 <_Z41__static_initialization_and_destruction_0ii+0x14>)
 8008332:	4b02      	ldr	r3, [pc, #8]	; (800833c <_Z41__static_initialization_and_destruction_0ii+0x18>)
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	4770      	bx	lr
 8008338:	08010f64 	.word	0x08010f64
 800833c:	20004dd0 	.word	0x20004dd0

08008340 <_ZL9cdc_closePv>:
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
}

transceiver_result_t cdc_close( void* desc )
{
 8008340:	b510      	push	{r4, lr}
 8008342:	4604      	mov	r4, r0
}

static inline void AppFree( void* ptr )
{
    void vPortFree( void* );
    vPortFree( ptr );
 8008344:	6840      	ldr	r0, [r0, #4]
 8008346:	f7fd f96f 	bl	8005628 <vPortFree>
    auto td = reinterpret_cast<usb_rw*>( desc );
    AppFree( td->rdqueue_.buff );
    td->rdqueue_.buff = nullptr;
 800834a:	2000      	movs	r0, #0
 800834c:	6060      	str	r0, [r4, #4]
    return TRANSCEIVER_OK;
}
 800834e:	bd10      	pop	{r4, pc}

08008350 <_ZL9cdc_writePvPKcj>:
    auto rd = ring_buffer_read( &td->rdqueue_, buf, len );
    return rd;
}

transceiver_result_t cdc_write( void* nouse_, char const* buf, size_t len )
{
 8008350:	b510      	push	{r4, lr}
 8008352:	4608      	mov	r0, r1
 8008354:	4614      	mov	r4, r2
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
 8008356:	b291      	uxth	r1, r2
 8008358:	f7f8 fd80 	bl	8000e5c <CDC_Transmit_FS>
 800835c:	b908      	cbnz	r0, 8008362 <_ZL9cdc_writePvPKcj+0x12>
 800835e:	4620      	mov	r0, r4
 8008360:	bd10      	pop	{r4, pc}
 8008362:	2000      	movs	r0, #0
}
 8008364:	bd10      	pop	{r4, pc}
 8008366:	bf00      	nop

08008368 <_ZL8cdc_readPvPcj>:
    ring_buffer_init( &ret->rdqueue_, s_rw.rdbuf_, sizeof s_rw.rdbuf_ );
    return reinterpret_cast<transceiver_handle_t>( ret );
}

static transceiver_result_t cdc_read( void* desc, char* buf, size_t len )
{
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	460f      	mov	r7, r1
 800836c:	4616      	mov	r6, r2
    auto td = reinterpret_cast<usb_rw*>( desc );
    auto rd = ring_buffer_read( &td->rdqueue_, buf, len );
 800836e:	1d05      	adds	r5, r0, #4

/*! \breif      Do peeking and consuming at once.
    \return     Number of byte actually read. */
static inline size_t ring_buffer_read(ring_buffer_t *s, void *b, size_t len)
{
    size_t sz = ring_buffer_size(s);
 8008370:	4628      	mov	r0, r5
 8008372:	f7fe fef7 	bl	8007164 <ring_buffer_size>
 8008376:	4604      	mov	r4, r0
    if (sz < len)
 8008378:	4286      	cmp	r6, r0
 800837a:	d800      	bhi.n	800837e <_ZL8cdc_readPvPcj+0x16>
 800837c:	4634      	mov	r4, r6
        len = sz;
    ring_buffer_peek(s, b, len);
 800837e:	4622      	mov	r2, r4
 8008380:	4639      	mov	r1, r7
 8008382:	4628      	mov	r0, r5
 8008384:	f7fe fece 	bl	8007124 <ring_buffer_peek>
    ring_buffer_consume(s, len);
 8008388:	4621      	mov	r1, r4
 800838a:	4628      	mov	r0, r5
 800838c:	f7fe fec0 	bl	8007110 <ring_buffer_consume>
    return rd;
}
 8008390:	4620      	mov	r0, r4
 8008392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008394 <OpenUsbHostConnection>:
    ring_buffer                 rdqueue_;
    char                        rdbuf_[USB_READ_BUF_SIZE];
} s_rw;

extern "C" transceiver_handle_t OpenUsbHostConnection()
{
 8008394:	b510      	push	{r4, lr}
    uassert( s_rw.rdqueue_.buff == nullptr );
 8008396:	4b09      	ldr	r3, [pc, #36]	; (80083bc <OpenUsbHostConnection+0x28>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b12b      	cbz	r3, 80083a8 <OpenUsbHostConnection+0x14>
 800839c:	4b08      	ldr	r3, [pc, #32]	; (80083c0 <OpenUsbHostConnection+0x2c>)
 800839e:	4a09      	ldr	r2, [pc, #36]	; (80083c4 <OpenUsbHostConnection+0x30>)
 80083a0:	2121      	movs	r1, #33	; 0x21
 80083a2:	4809      	ldr	r0, [pc, #36]	; (80083c8 <OpenUsbHostConnection+0x34>)
 80083a4:	f000 f8ba 	bl	800851c <__assert_func>
    auto ret = &s_rw;
    ring_buffer_init( &ret->rdqueue_, s_rw.rdbuf_, sizeof s_rw.rdbuf_ );
 80083a8:	4c04      	ldr	r4, [pc, #16]	; (80083bc <OpenUsbHostConnection+0x28>)
 80083aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083ae:	f104 0114 	add.w	r1, r4, #20
 80083b2:	1d20      	adds	r0, r4, #4
 80083b4:	f7fe fe84 	bl	80070c0 <ring_buffer_init>
    return reinterpret_cast<transceiver_handle_t>( ret );
}
 80083b8:	4620      	mov	r0, r4
 80083ba:	bd10      	pop	{r4, pc}
 80083bc:	20004dd0 	.word	0x20004dd0
 80083c0:	08010f2c 	.word	0x08010f2c
 80083c4:	08010f74 	.word	0x08010f74
 80083c8:	08010f4c 	.word	0x08010f4c

080083cc <CdcReceiveHandler>:
    return TRANSCEIVER_OK;
}

// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4605      	mov	r5, r0
    ring_buffer_write( &s_rw.rdqueue_, Buf, len );
 80083d0:	460a      	mov	r2, r1
 80083d2:	4601      	mov	r1, r0
 80083d4:	4805      	ldr	r0, [pc, #20]	; (80083ec <CdcReceiveHandler+0x20>)
 80083d6:	f7fe fe79 	bl	80070cc <ring_buffer_write>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
 80083da:	4c05      	ldr	r4, [pc, #20]	; (80083f0 <CdcReceiveHandler+0x24>)
 80083dc:	4629      	mov	r1, r5
 80083de:	4620      	mov	r0, r4
 80083e0:	f7fe f962 	bl	80066a8 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7fe f97f 	bl	80066e8 <USBD_CDC_ReceivePacket>
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20004dd4 	.word	0x20004dd4
 80083f0:	20005ca4 	.word	0x20005ca4

080083f4 <_GLOBAL__sub_I_OpenUsbHostConnection>:
}
 80083f4:	b508      	push	{r3, lr}
 80083f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80083fa:	2001      	movs	r0, #1
 80083fc:	f7ff ff92 	bl	8008324 <_Z41__static_initialization_and_destruction_0ii>
 8008400:	bd08      	pop	{r3, pc}
 8008402:	bf00      	nop

08008404 <Timer_GetCounterValue>:
extern "C" {
typedef void ( *timer_cb_t )( void* param );
static timer_cb_t s_cb;

void Timer_GetCounterValue( uint32_t* hct, uint32_t* lct )
{
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	4605      	mov	r5, r0
 8008408:	460c      	mov	r4, r1
    auto t = API_GetTime_us();
 800840a:	f7ff fa41 	bl	8007890 <API_GetTime_us>
 800840e:	4606      	mov	r6, r0
 8008410:	460f      	mov	r7, r1
    *hct   = t / (uint32_t)1e6;
 8008412:	4a06      	ldr	r2, [pc, #24]	; (800842c <Timer_GetCounterValue+0x28>)
 8008414:	2300      	movs	r3, #0
 8008416:	f7f7 ff75 	bl	8000304 <__aeabi_uldivmod>
 800841a:	6028      	str	r0, [r5, #0]
    *lct   = t % (uint32_t)1e6;
 800841c:	4a03      	ldr	r2, [pc, #12]	; (800842c <Timer_GetCounterValue+0x28>)
 800841e:	2300      	movs	r3, #0
 8008420:	4630      	mov	r0, r6
 8008422:	4639      	mov	r1, r7
 8008424:	f7f7 ff6e 	bl	8000304 <__aeabi_uldivmod>
 8008428:	6022      	str	r2, [r4, #0]
 800842a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800842c:	000f4240 	.word	0x000f4240

08008430 <Timer_SetCallback>:
}

void Timer_SetCallback( timer_cb_t f )
{
    s_cb = f;
 8008430:	4b01      	ldr	r3, [pc, #4]	; (8008438 <Timer_SetCallback+0x8>)
 8008432:	6018      	str	r0, [r3, #0]
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	20005248 	.word	0x20005248

0800843c <Timer_Stop>:
}

void Timer_Stop( void* param )
{
 800843c:	b510      	push	{r4, lr}
    for ( auto& h : s_h ) {
 800843e:	4c08      	ldr	r4, [pc, #32]	; (8008460 <Timer_Stop+0x24>)
 8008440:	4b08      	ldr	r3, [pc, #32]	; (8008464 <Timer_Stop+0x28>)
 8008442:	429c      	cmp	r4, r3
 8008444:	d00b      	beq.n	800845e <Timer_Stop+0x22>
        if ( h.second == param ) {
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	4283      	cmp	r3, r0
 800844a:	d106      	bne.n	800845a <Timer_Stop+0x1e>
            API_AbortTimer( h.first );
 800844c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008450:	f7ff fa38 	bl	80078c4 <API_AbortTimer>
            h.second = NULL;
 8008454:	2300      	movs	r3, #0
 8008456:	6123      	str	r3, [r4, #16]
            break;
 8008458:	bd10      	pop	{r4, pc}
    s_cb = f;
}

void Timer_Stop( void* param )
{
    for ( auto& h : s_h ) {
 800845a:	3418      	adds	r4, #24
 800845c:	e7f0      	b.n	8008440 <Timer_Stop+0x4>
 800845e:	bd10      	pop	{r4, pc}
 8008460:	200051e8 	.word	0x200051e8
 8008464:	20005248 	.word	0x20005248

08008468 <Timer_SetInterval>:
        }
    }
}

void Timer_SetInterval( uint32_t dt_microseconds, void* param )
{
 8008468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800846a:	b087      	sub	sp, #28
 800846c:	4606      	mov	r6, r0
 800846e:	460d      	mov	r5, r1
    // Try abort
    Timer_Stop( param );
 8008470:	4608      	mov	r0, r1
 8008472:	f7ff ffe3 	bl	800843c <Timer_Stop>

    // Check if timer's running
    for ( auto& h : s_h ) {
 8008476:	4c0f      	ldr	r4, [pc, #60]	; (80084b4 <Timer_SetInterval+0x4c>)
 8008478:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <Timer_SetInterval+0x50>)
 800847a:	429c      	cmp	r4, r3
 800847c:	d018      	beq.n	80084b0 <Timer_SetInterval+0x48>
        if ( API_CheckTimer( h.first, NULL ) == false ) {
 800847e:	2300      	movs	r3, #0
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008486:	f7ff fb3f 	bl	8007b08 <API_CheckTimer>
 800848a:	b978      	cbnz	r0, 80084ac <Timer_SetInterval+0x44>
            h.first  = API_SetTimer( dt_microseconds, param, s_cb );
 800848c:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <Timer_SetInterval+0x54>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	af02      	add	r7, sp, #8
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	9500      	str	r5, [sp, #0]
 8008496:	4632      	mov	r2, r6
 8008498:	2300      	movs	r3, #0
 800849a:	4638      	mov	r0, r7
 800849c:	f7ff fd80 	bl	8007fa0 <API_SetTimer>
 80084a0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80084a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            h.second = param;
 80084a8:	6125      	str	r5, [r4, #16]
            break;
 80084aa:	e001      	b.n	80084b0 <Timer_SetInterval+0x48>
{
    // Try abort
    Timer_Stop( param );

    // Check if timer's running
    for ( auto& h : s_h ) {
 80084ac:	3418      	adds	r4, #24
 80084ae:	e7e3      	b.n	8008478 <Timer_SetInterval+0x10>
            h.first  = API_SetTimer( dt_microseconds, param, s_cb );
            h.second = param;
            break;
        }
    }
}
 80084b0:	b007      	add	sp, #28
 80084b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b4:	200051e8 	.word	0x200051e8
 80084b8:	20005248 	.word	0x20005248
 80084bc:	20005248 	.word	0x20005248

080084c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80084c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80084f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80084c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80084c6:	e003      	b.n	80084d0 <LoopCopyDataInit>

080084c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80084c8:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80084ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80084cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80084ce:	3104      	adds	r1, #4

080084d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80084d0:	480b      	ldr	r0, [pc, #44]	; (8008500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80084d2:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80084d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80084d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80084d8:	d3f6      	bcc.n	80084c8 <CopyDataInit>
  ldr  r2, =_sbss
 80084da:	4a0b      	ldr	r2, [pc, #44]	; (8008508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80084dc:	e002      	b.n	80084e4 <LoopFillZerobss>

080084de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80084de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80084e0:	f842 3b04 	str.w	r3, [r2], #4

080084e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80084e4:	4b09      	ldr	r3, [pc, #36]	; (800850c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80084e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80084e8:	d3f9      	bcc.n	80084de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80084ea:	f7fb fb1f 	bl	8003b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80084ee:	f000 f857 	bl	80085a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80084f2:	f7f8 fa61 	bl	80009b8 <main>
  bx  lr    
 80084f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80084f8:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80084fc:	08012be8 	.word	0x08012be8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008504:	200003b4 	.word	0x200003b4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8008508:	200003b8 	.word	0x200003b8
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800850c:	200066d4 	.word	0x200066d4

08008510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008510:	e7fe      	b.n	8008510 <ADC_IRQHandler>

08008512 <__aeabi_atexit>:
 8008512:	460b      	mov	r3, r1
 8008514:	4601      	mov	r1, r0
 8008516:	4618      	mov	r0, r3
 8008518:	f000 b822 	b.w	8008560 <__cxa_atexit>

0800851c <__assert_func>:
 800851c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800851e:	461c      	mov	r4, r3
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <__assert_func+0x2c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4605      	mov	r5, r0
 8008526:	68d8      	ldr	r0, [r3, #12]
 8008528:	b912      	cbnz	r2, 8008530 <__assert_func+0x14>
 800852a:	4b08      	ldr	r3, [pc, #32]	; (800854c <__assert_func+0x30>)
 800852c:	461a      	mov	r2, r3
 800852e:	e000      	b.n	8008532 <__assert_func+0x16>
 8008530:	4b07      	ldr	r3, [pc, #28]	; (8008550 <__assert_func+0x34>)
 8008532:	9202      	str	r2, [sp, #8]
 8008534:	e88d 000a 	stmia.w	sp, {r1, r3}
 8008538:	4622      	mov	r2, r4
 800853a:	462b      	mov	r3, r5
 800853c:	4905      	ldr	r1, [pc, #20]	; (8008554 <__assert_func+0x38>)
 800853e:	f000 f81d 	bl	800857c <fiprintf>
 8008542:	f000 fe03 	bl	800914c <abort>
 8008546:	bf00      	nop
 8008548:	20000240 	.word	0x20000240
 800854c:	08010fdc 	.word	0x08010fdc
 8008550:	08010fa1 	.word	0x08010fa1
 8008554:	08010fae 	.word	0x08010fae

08008558 <atoi>:
 8008558:	220a      	movs	r2, #10
 800855a:	2100      	movs	r1, #0
 800855c:	f000 bcc2 	b.w	8008ee4 <strtol>

08008560 <__cxa_atexit>:
 8008560:	b510      	push	{r4, lr}
 8008562:	4c05      	ldr	r4, [pc, #20]	; (8008578 <__cxa_atexit+0x18>)
 8008564:	4613      	mov	r3, r2
 8008566:	b12c      	cbz	r4, 8008574 <__cxa_atexit+0x14>
 8008568:	460a      	mov	r2, r1
 800856a:	4601      	mov	r1, r0
 800856c:	2002      	movs	r0, #2
 800856e:	f3af 8000 	nop.w
 8008572:	bd10      	pop	{r4, pc}
 8008574:	4620      	mov	r0, r4
 8008576:	bd10      	pop	{r4, pc}
 8008578:	00000000 	.word	0x00000000

0800857c <fiprintf>:
 800857c:	b40e      	push	{r1, r2, r3}
 800857e:	b503      	push	{r0, r1, lr}
 8008580:	4601      	mov	r1, r0
 8008582:	ab03      	add	r3, sp, #12
 8008584:	4805      	ldr	r0, [pc, #20]	; (800859c <fiprintf+0x20>)
 8008586:	f853 2b04 	ldr.w	r2, [r3], #4
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	f000 f935 	bl	80087fc <_vfiprintf_r>
 8008592:	b002      	add	sp, #8
 8008594:	f85d eb04 	ldr.w	lr, [sp], #4
 8008598:	b003      	add	sp, #12
 800859a:	4770      	bx	lr
 800859c:	20000240 	.word	0x20000240

080085a0 <__libc_init_array>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	4b0e      	ldr	r3, [pc, #56]	; (80085dc <__libc_init_array+0x3c>)
 80085a4:	4c0e      	ldr	r4, [pc, #56]	; (80085e0 <__libc_init_array+0x40>)
 80085a6:	1ae4      	subs	r4, r4, r3
 80085a8:	10a4      	asrs	r4, r4, #2
 80085aa:	2500      	movs	r5, #0
 80085ac:	461e      	mov	r6, r3
 80085ae:	42a5      	cmp	r5, r4
 80085b0:	d004      	beq.n	80085bc <__libc_init_array+0x1c>
 80085b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085b6:	4798      	blx	r3
 80085b8:	3501      	adds	r5, #1
 80085ba:	e7f8      	b.n	80085ae <__libc_init_array+0xe>
 80085bc:	f007 fc7a 	bl	800feb4 <_init>
 80085c0:	4c08      	ldr	r4, [pc, #32]	; (80085e4 <__libc_init_array+0x44>)
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <__libc_init_array+0x48>)
 80085c4:	1ae4      	subs	r4, r4, r3
 80085c6:	10a4      	asrs	r4, r4, #2
 80085c8:	2500      	movs	r5, #0
 80085ca:	461e      	mov	r6, r3
 80085cc:	42a5      	cmp	r5, r4
 80085ce:	d004      	beq.n	80085da <__libc_init_array+0x3a>
 80085d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085d4:	4798      	blx	r3
 80085d6:	3501      	adds	r5, #1
 80085d8:	e7f8      	b.n	80085cc <__libc_init_array+0x2c>
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	08012bd8 	.word	0x08012bd8
 80085e0:	08012bd8 	.word	0x08012bd8
 80085e4:	08012be4 	.word	0x08012be4
 80085e8:	08012bd8 	.word	0x08012bd8

080085ec <malloc>:
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <malloc+0xc>)
 80085ee:	4601      	mov	r1, r0
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	f000 b87b 	b.w	80086ec <_malloc_r>
 80085f6:	bf00      	nop
 80085f8:	20000240 	.word	0x20000240

080085fc <free>:
 80085fc:	4b02      	ldr	r3, [pc, #8]	; (8008608 <free+0xc>)
 80085fe:	4601      	mov	r1, r0
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	f000 b825 	b.w	8008650 <_free_r>
 8008606:	bf00      	nop
 8008608:	20000240 	.word	0x20000240

0800860c <memcmp>:
 800860c:	b510      	push	{r4, lr}
 800860e:	3901      	subs	r1, #1
 8008610:	4402      	add	r2, r0
 8008612:	4290      	cmp	r0, r2
 8008614:	d007      	beq.n	8008626 <memcmp+0x1a>
 8008616:	f810 3b01 	ldrb.w	r3, [r0], #1
 800861a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800861e:	42a3      	cmp	r3, r4
 8008620:	d0f7      	beq.n	8008612 <memcmp+0x6>
 8008622:	1b18      	subs	r0, r3, r4
 8008624:	bd10      	pop	{r4, pc}
 8008626:	2000      	movs	r0, #0
 8008628:	bd10      	pop	{r4, pc}

0800862a <memcpy>:
 800862a:	b510      	push	{r4, lr}
 800862c:	1e43      	subs	r3, r0, #1
 800862e:	440a      	add	r2, r1
 8008630:	4291      	cmp	r1, r2
 8008632:	d004      	beq.n	800863e <memcpy+0x14>
 8008634:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008638:	f803 4f01 	strb.w	r4, [r3, #1]!
 800863c:	e7f8      	b.n	8008630 <memcpy+0x6>
 800863e:	bd10      	pop	{r4, pc}

08008640 <memset>:
 8008640:	4402      	add	r2, r0
 8008642:	4603      	mov	r3, r0
 8008644:	4293      	cmp	r3, r2
 8008646:	d002      	beq.n	800864e <memset+0xe>
 8008648:	f803 1b01 	strb.w	r1, [r3], #1
 800864c:	e7fa      	b.n	8008644 <memset+0x4>
 800864e:	4770      	bx	lr

08008650 <_free_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4605      	mov	r5, r0
 8008654:	2900      	cmp	r1, #0
 8008656:	d046      	beq.n	80086e6 <_free_r+0x96>
 8008658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865c:	1f0c      	subs	r4, r1, #4
 800865e:	2b00      	cmp	r3, #0
 8008660:	bfb8      	it	lt
 8008662:	18e4      	addlt	r4, r4, r3
 8008664:	f000 ff85 	bl	8009572 <__malloc_lock>
 8008668:	4a1f      	ldr	r2, [pc, #124]	; (80086e8 <_free_r+0x98>)
 800866a:	6813      	ldr	r3, [r2, #0]
 800866c:	4611      	mov	r1, r2
 800866e:	b913      	cbnz	r3, 8008676 <_free_r+0x26>
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	6014      	str	r4, [r2, #0]
 8008674:	e032      	b.n	80086dc <_free_r+0x8c>
 8008676:	42a3      	cmp	r3, r4
 8008678:	d90e      	bls.n	8008698 <_free_r+0x48>
 800867a:	6822      	ldr	r2, [r4, #0]
 800867c:	18a0      	adds	r0, r4, r2
 800867e:	4283      	cmp	r3, r0
 8008680:	bf04      	itt	eq
 8008682:	6818      	ldreq	r0, [r3, #0]
 8008684:	685b      	ldreq	r3, [r3, #4]
 8008686:	6063      	str	r3, [r4, #4]
 8008688:	bf04      	itt	eq
 800868a:	1812      	addeq	r2, r2, r0
 800868c:	6022      	streq	r2, [r4, #0]
 800868e:	600c      	str	r4, [r1, #0]
 8008690:	e024      	b.n	80086dc <_free_r+0x8c>
 8008692:	42a2      	cmp	r2, r4
 8008694:	d803      	bhi.n	800869e <_free_r+0x4e>
 8008696:	4613      	mov	r3, r2
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	2a00      	cmp	r2, #0
 800869c:	d1f9      	bne.n	8008692 <_free_r+0x42>
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	1819      	adds	r1, r3, r0
 80086a2:	42a1      	cmp	r1, r4
 80086a4:	d10b      	bne.n	80086be <_free_r+0x6e>
 80086a6:	6821      	ldr	r1, [r4, #0]
 80086a8:	4401      	add	r1, r0
 80086aa:	1858      	adds	r0, r3, r1
 80086ac:	4282      	cmp	r2, r0
 80086ae:	6019      	str	r1, [r3, #0]
 80086b0:	d114      	bne.n	80086dc <_free_r+0x8c>
 80086b2:	6810      	ldr	r0, [r2, #0]
 80086b4:	6852      	ldr	r2, [r2, #4]
 80086b6:	605a      	str	r2, [r3, #4]
 80086b8:	4401      	add	r1, r0
 80086ba:	6019      	str	r1, [r3, #0]
 80086bc:	e00e      	b.n	80086dc <_free_r+0x8c>
 80086be:	d902      	bls.n	80086c6 <_free_r+0x76>
 80086c0:	230c      	movs	r3, #12
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	e00a      	b.n	80086dc <_free_r+0x8c>
 80086c6:	6821      	ldr	r1, [r4, #0]
 80086c8:	1860      	adds	r0, r4, r1
 80086ca:	4282      	cmp	r2, r0
 80086cc:	bf04      	itt	eq
 80086ce:	6810      	ldreq	r0, [r2, #0]
 80086d0:	6852      	ldreq	r2, [r2, #4]
 80086d2:	6062      	str	r2, [r4, #4]
 80086d4:	bf04      	itt	eq
 80086d6:	1809      	addeq	r1, r1, r0
 80086d8:	6021      	streq	r1, [r4, #0]
 80086da:	605c      	str	r4, [r3, #4]
 80086dc:	4628      	mov	r0, r5
 80086de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086e2:	f000 bf47 	b.w	8009574 <__malloc_unlock>
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	20005250 	.word	0x20005250

080086ec <_malloc_r>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	1ccd      	adds	r5, r1, #3
 80086f0:	f025 0503 	bic.w	r5, r5, #3
 80086f4:	3508      	adds	r5, #8
 80086f6:	2d0c      	cmp	r5, #12
 80086f8:	bf38      	it	cc
 80086fa:	250c      	movcc	r5, #12
 80086fc:	2d00      	cmp	r5, #0
 80086fe:	4606      	mov	r6, r0
 8008700:	db01      	blt.n	8008706 <_malloc_r+0x1a>
 8008702:	42a9      	cmp	r1, r5
 8008704:	d902      	bls.n	800870c <_malloc_r+0x20>
 8008706:	230c      	movs	r3, #12
 8008708:	6033      	str	r3, [r6, #0]
 800870a:	e046      	b.n	800879a <_malloc_r+0xae>
 800870c:	f000 ff31 	bl	8009572 <__malloc_lock>
 8008710:	4b23      	ldr	r3, [pc, #140]	; (80087a0 <_malloc_r+0xb4>)
 8008712:	681c      	ldr	r4, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	4621      	mov	r1, r4
 8008718:	b1a1      	cbz	r1, 8008744 <_malloc_r+0x58>
 800871a:	680b      	ldr	r3, [r1, #0]
 800871c:	1b5b      	subs	r3, r3, r5
 800871e:	d40e      	bmi.n	800873e <_malloc_r+0x52>
 8008720:	2b0b      	cmp	r3, #11
 8008722:	d903      	bls.n	800872c <_malloc_r+0x40>
 8008724:	600b      	str	r3, [r1, #0]
 8008726:	18cc      	adds	r4, r1, r3
 8008728:	50cd      	str	r5, [r1, r3]
 800872a:	e01e      	b.n	800876a <_malloc_r+0x7e>
 800872c:	428c      	cmp	r4, r1
 800872e:	bf0d      	iteet	eq
 8008730:	6863      	ldreq	r3, [r4, #4]
 8008732:	684b      	ldrne	r3, [r1, #4]
 8008734:	6063      	strne	r3, [r4, #4]
 8008736:	6013      	streq	r3, [r2, #0]
 8008738:	bf18      	it	ne
 800873a:	460c      	movne	r4, r1
 800873c:	e015      	b.n	800876a <_malloc_r+0x7e>
 800873e:	460c      	mov	r4, r1
 8008740:	6849      	ldr	r1, [r1, #4]
 8008742:	e7e9      	b.n	8008718 <_malloc_r+0x2c>
 8008744:	4c17      	ldr	r4, [pc, #92]	; (80087a4 <_malloc_r+0xb8>)
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	b91b      	cbnz	r3, 8008752 <_malloc_r+0x66>
 800874a:	4630      	mov	r0, r6
 800874c:	f000 fb0e 	bl	8008d6c <_sbrk_r>
 8008750:	6020      	str	r0, [r4, #0]
 8008752:	4629      	mov	r1, r5
 8008754:	4630      	mov	r0, r6
 8008756:	f000 fb09 	bl	8008d6c <_sbrk_r>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d018      	beq.n	8008790 <_malloc_r+0xa4>
 800875e:	1cc4      	adds	r4, r0, #3
 8008760:	f024 0403 	bic.w	r4, r4, #3
 8008764:	42a0      	cmp	r0, r4
 8008766:	d10d      	bne.n	8008784 <_malloc_r+0x98>
 8008768:	6025      	str	r5, [r4, #0]
 800876a:	4630      	mov	r0, r6
 800876c:	f000 ff02 	bl	8009574 <__malloc_unlock>
 8008770:	f104 000b 	add.w	r0, r4, #11
 8008774:	1d23      	adds	r3, r4, #4
 8008776:	f020 0007 	bic.w	r0, r0, #7
 800877a:	1ac3      	subs	r3, r0, r3
 800877c:	d00e      	beq.n	800879c <_malloc_r+0xb0>
 800877e:	425a      	negs	r2, r3
 8008780:	50e2      	str	r2, [r4, r3]
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	1a21      	subs	r1, r4, r0
 8008786:	4630      	mov	r0, r6
 8008788:	f000 faf0 	bl	8008d6c <_sbrk_r>
 800878c:	3001      	adds	r0, #1
 800878e:	d1eb      	bne.n	8008768 <_malloc_r+0x7c>
 8008790:	230c      	movs	r3, #12
 8008792:	6033      	str	r3, [r6, #0]
 8008794:	4630      	mov	r0, r6
 8008796:	f000 feed 	bl	8009574 <__malloc_unlock>
 800879a:	2000      	movs	r0, #0
 800879c:	bd70      	pop	{r4, r5, r6, pc}
 800879e:	bf00      	nop
 80087a0:	20005250 	.word	0x20005250
 80087a4:	2000524c 	.word	0x2000524c

080087a8 <__sfputc_r>:
 80087a8:	6893      	ldr	r3, [r2, #8]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	b410      	push	{r4}
 80087b0:	6093      	str	r3, [r2, #8]
 80087b2:	da09      	bge.n	80087c8 <__sfputc_r+0x20>
 80087b4:	6994      	ldr	r4, [r2, #24]
 80087b6:	42a3      	cmp	r3, r4
 80087b8:	db02      	blt.n	80087c0 <__sfputc_r+0x18>
 80087ba:	b2cb      	uxtb	r3, r1
 80087bc:	2b0a      	cmp	r3, #10
 80087be:	d103      	bne.n	80087c8 <__sfputc_r+0x20>
 80087c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c4:	f000 bc00 	b.w	8008fc8 <__swbuf_r>
 80087c8:	6813      	ldr	r3, [r2, #0]
 80087ca:	1c58      	adds	r0, r3, #1
 80087cc:	6010      	str	r0, [r2, #0]
 80087ce:	7019      	strb	r1, [r3, #0]
 80087d0:	b2c8      	uxtb	r0, r1
 80087d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <__sfputs_r>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	4606      	mov	r6, r0
 80087dc:	460f      	mov	r7, r1
 80087de:	4614      	mov	r4, r2
 80087e0:	18d5      	adds	r5, r2, r3
 80087e2:	42ac      	cmp	r4, r5
 80087e4:	d008      	beq.n	80087f8 <__sfputs_r+0x20>
 80087e6:	463a      	mov	r2, r7
 80087e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff ffdb 	bl	80087a8 <__sfputc_r>
 80087f2:	1c43      	adds	r3, r0, #1
 80087f4:	d1f5      	bne.n	80087e2 <__sfputs_r+0xa>
 80087f6:	e000      	b.n	80087fa <__sfputs_r+0x22>
 80087f8:	2000      	movs	r0, #0
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087fc <_vfiprintf_r>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	b09d      	sub	sp, #116	; 0x74
 8008802:	460c      	mov	r4, r1
 8008804:	4617      	mov	r7, r2
 8008806:	9303      	str	r3, [sp, #12]
 8008808:	4606      	mov	r6, r0
 800880a:	b118      	cbz	r0, 8008814 <_vfiprintf_r+0x18>
 800880c:	6983      	ldr	r3, [r0, #24]
 800880e:	b90b      	cbnz	r3, 8008814 <_vfiprintf_r+0x18>
 8008810:	f000 fd96 	bl	8009340 <__sinit>
 8008814:	4b7f      	ldr	r3, [pc, #508]	; (8008a14 <_vfiprintf_r+0x218>)
 8008816:	429c      	cmp	r4, r3
 8008818:	d101      	bne.n	800881e <_vfiprintf_r+0x22>
 800881a:	6874      	ldr	r4, [r6, #4]
 800881c:	e008      	b.n	8008830 <_vfiprintf_r+0x34>
 800881e:	4b7e      	ldr	r3, [pc, #504]	; (8008a18 <_vfiprintf_r+0x21c>)
 8008820:	429c      	cmp	r4, r3
 8008822:	d101      	bne.n	8008828 <_vfiprintf_r+0x2c>
 8008824:	68b4      	ldr	r4, [r6, #8]
 8008826:	e003      	b.n	8008830 <_vfiprintf_r+0x34>
 8008828:	4b7c      	ldr	r3, [pc, #496]	; (8008a1c <_vfiprintf_r+0x220>)
 800882a:	429c      	cmp	r4, r3
 800882c:	bf08      	it	eq
 800882e:	68f4      	ldreq	r4, [r6, #12]
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	0718      	lsls	r0, r3, #28
 8008834:	d50c      	bpl.n	8008850 <_vfiprintf_r+0x54>
 8008836:	6923      	ldr	r3, [r4, #16]
 8008838:	b153      	cbz	r3, 8008850 <_vfiprintf_r+0x54>
 800883a:	2300      	movs	r3, #0
 800883c:	9309      	str	r3, [sp, #36]	; 0x24
 800883e:	2320      	movs	r3, #32
 8008840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008844:	2330      	movs	r3, #48	; 0x30
 8008846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800884a:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8008a20 <_vfiprintf_r+0x224>
 800884e:	e044      	b.n	80088da <_vfiprintf_r+0xde>
 8008850:	4621      	mov	r1, r4
 8008852:	4630      	mov	r0, r6
 8008854:	f000 fc0c 	bl	8009070 <__swsetup_r>
 8008858:	2800      	cmp	r0, #0
 800885a:	d0ee      	beq.n	800883a <_vfiprintf_r+0x3e>
 800885c:	f04f 30ff 	mov.w	r0, #4294967295
 8008860:	e0d5      	b.n	8008a0e <_vfiprintf_r+0x212>
 8008862:	9a03      	ldr	r2, [sp, #12]
 8008864:	1d11      	adds	r1, r2, #4
 8008866:	6812      	ldr	r2, [r2, #0]
 8008868:	9103      	str	r1, [sp, #12]
 800886a:	2a00      	cmp	r2, #0
 800886c:	f280 808c 	bge.w	8008988 <_vfiprintf_r+0x18c>
 8008870:	4252      	negs	r2, r2
 8008872:	f043 0002 	orr.w	r0, r3, #2
 8008876:	9207      	str	r2, [sp, #28]
 8008878:	9004      	str	r0, [sp, #16]
 800887a:	f898 3000 	ldrb.w	r3, [r8]
 800887e:	2b2e      	cmp	r3, #46	; 0x2e
 8008880:	f000 8084 	beq.w	800898c <_vfiprintf_r+0x190>
 8008884:	2203      	movs	r2, #3
 8008886:	f898 1000 	ldrb.w	r1, [r8]
 800888a:	4865      	ldr	r0, [pc, #404]	; (8008a20 <_vfiprintf_r+0x224>)
 800888c:	f7f7 fcc0 	bl	8000210 <memchr>
 8008890:	b148      	cbz	r0, 80088a6 <_vfiprintf_r+0xaa>
 8008892:	2340      	movs	r3, #64	; 0x40
 8008894:	ebcb 0000 	rsb	r0, fp, r0
 8008898:	fa03 f000 	lsl.w	r0, r3, r0
 800889c:	9b04      	ldr	r3, [sp, #16]
 800889e:	4318      	orrs	r0, r3
 80088a0:	9004      	str	r0, [sp, #16]
 80088a2:	f108 0801 	add.w	r8, r8, #1
 80088a6:	f898 1000 	ldrb.w	r1, [r8]
 80088aa:	485e      	ldr	r0, [pc, #376]	; (8008a24 <_vfiprintf_r+0x228>)
 80088ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088b0:	2206      	movs	r2, #6
 80088b2:	f108 0701 	add.w	r7, r8, #1
 80088b6:	f7f7 fcab 	bl	8000210 <memchr>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	f000 8095 	beq.w	80089ea <_vfiprintf_r+0x1ee>
 80088c0:	4b59      	ldr	r3, [pc, #356]	; (8008a28 <_vfiprintf_r+0x22c>)
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f040 8088 	bne.w	80089d8 <_vfiprintf_r+0x1dc>
 80088c8:	9b03      	ldr	r3, [sp, #12]
 80088ca:	3307      	adds	r3, #7
 80088cc:	f023 0307 	bic.w	r3, r3, #7
 80088d0:	3308      	adds	r3, #8
 80088d2:	9303      	str	r3, [sp, #12]
 80088d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d6:	4453      	add	r3, sl
 80088d8:	9309      	str	r3, [sp, #36]	; 0x24
 80088da:	46b8      	mov	r8, r7
 80088dc:	4645      	mov	r5, r8
 80088de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088e2:	b91b      	cbnz	r3, 80088ec <_vfiprintf_r+0xf0>
 80088e4:	ebb8 0907 	subs.w	r9, r8, r7
 80088e8:	d00f      	beq.n	800890a <_vfiprintf_r+0x10e>
 80088ea:	e003      	b.n	80088f4 <_vfiprintf_r+0xf8>
 80088ec:	2b25      	cmp	r3, #37	; 0x25
 80088ee:	d0f9      	beq.n	80088e4 <_vfiprintf_r+0xe8>
 80088f0:	46a8      	mov	r8, r5
 80088f2:	e7f3      	b.n	80088dc <_vfiprintf_r+0xe0>
 80088f4:	464b      	mov	r3, r9
 80088f6:	463a      	mov	r2, r7
 80088f8:	4621      	mov	r1, r4
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff ff6c 	bl	80087d8 <__sfputs_r>
 8008900:	3001      	adds	r0, #1
 8008902:	d07f      	beq.n	8008a04 <_vfiprintf_r+0x208>
 8008904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008906:	444b      	add	r3, r9
 8008908:	9309      	str	r3, [sp, #36]	; 0x24
 800890a:	f898 3000 	ldrb.w	r3, [r8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d078      	beq.n	8008a04 <_vfiprintf_r+0x208>
 8008912:	2300      	movs	r3, #0
 8008914:	f04f 32ff 	mov.w	r2, #4294967295
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	9307      	str	r3, [sp, #28]
 800891c:	9205      	str	r2, [sp, #20]
 800891e:	9306      	str	r3, [sp, #24]
 8008920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008924:	931a      	str	r3, [sp, #104]	; 0x68
 8008926:	2701      	movs	r7, #1
 8008928:	2205      	movs	r2, #5
 800892a:	7829      	ldrb	r1, [r5, #0]
 800892c:	483f      	ldr	r0, [pc, #252]	; (8008a2c <_vfiprintf_r+0x230>)
 800892e:	f7f7 fc6f 	bl	8000210 <memchr>
 8008932:	f105 0801 	add.w	r8, r5, #1
 8008936:	9b04      	ldr	r3, [sp, #16]
 8008938:	b138      	cbz	r0, 800894a <_vfiprintf_r+0x14e>
 800893a:	4a3c      	ldr	r2, [pc, #240]	; (8008a2c <_vfiprintf_r+0x230>)
 800893c:	1a80      	subs	r0, r0, r2
 800893e:	fa07 f000 	lsl.w	r0, r7, r0
 8008942:	4318      	orrs	r0, r3
 8008944:	9004      	str	r0, [sp, #16]
 8008946:	4645      	mov	r5, r8
 8008948:	e7ee      	b.n	8008928 <_vfiprintf_r+0x12c>
 800894a:	06d9      	lsls	r1, r3, #27
 800894c:	bf44      	itt	mi
 800894e:	2220      	movmi	r2, #32
 8008950:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008954:	071a      	lsls	r2, r3, #28
 8008956:	bf44      	itt	mi
 8008958:	222b      	movmi	r2, #43	; 0x2b
 800895a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800895e:	782a      	ldrb	r2, [r5, #0]
 8008960:	2a2a      	cmp	r2, #42	; 0x2a
 8008962:	f43f af7e 	beq.w	8008862 <_vfiprintf_r+0x66>
 8008966:	9a07      	ldr	r2, [sp, #28]
 8008968:	2100      	movs	r1, #0
 800896a:	200a      	movs	r0, #10
 800896c:	46a8      	mov	r8, r5
 800896e:	3501      	adds	r5, #1
 8008970:	f898 3000 	ldrb.w	r3, [r8]
 8008974:	3b30      	subs	r3, #48	; 0x30
 8008976:	2b09      	cmp	r3, #9
 8008978:	d803      	bhi.n	8008982 <_vfiprintf_r+0x186>
 800897a:	fb00 3202 	mla	r2, r0, r2, r3
 800897e:	2101      	movs	r1, #1
 8008980:	e7f4      	b.n	800896c <_vfiprintf_r+0x170>
 8008982:	2900      	cmp	r1, #0
 8008984:	f43f af79 	beq.w	800887a <_vfiprintf_r+0x7e>
 8008988:	9207      	str	r2, [sp, #28]
 800898a:	e776      	b.n	800887a <_vfiprintf_r+0x7e>
 800898c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008990:	2b2a      	cmp	r3, #42	; 0x2a
 8008992:	d10b      	bne.n	80089ac <_vfiprintf_r+0x1b0>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	1d1a      	adds	r2, r3, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	9203      	str	r2, [sp, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfb8      	it	lt
 80089a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80089a4:	f108 0802 	add.w	r8, r8, #2
 80089a8:	9305      	str	r3, [sp, #20]
 80089aa:	e76b      	b.n	8008884 <_vfiprintf_r+0x88>
 80089ac:	2300      	movs	r3, #0
 80089ae:	9305      	str	r3, [sp, #20]
 80089b0:	f108 0001 	add.w	r0, r8, #1
 80089b4:	4619      	mov	r1, r3
 80089b6:	250a      	movs	r5, #10
 80089b8:	4680      	mov	r8, r0
 80089ba:	3001      	adds	r0, #1
 80089bc:	f898 2000 	ldrb.w	r2, [r8]
 80089c0:	3a30      	subs	r2, #48	; 0x30
 80089c2:	2a09      	cmp	r2, #9
 80089c4:	d803      	bhi.n	80089ce <_vfiprintf_r+0x1d2>
 80089c6:	fb05 2101 	mla	r1, r5, r1, r2
 80089ca:	2301      	movs	r3, #1
 80089cc:	e7f4      	b.n	80089b8 <_vfiprintf_r+0x1bc>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f43f af58 	beq.w	8008884 <_vfiprintf_r+0x88>
 80089d4:	9105      	str	r1, [sp, #20]
 80089d6:	e755      	b.n	8008884 <_vfiprintf_r+0x88>
 80089d8:	ab03      	add	r3, sp, #12
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	4622      	mov	r2, r4
 80089de:	4b14      	ldr	r3, [pc, #80]	; (8008a30 <_vfiprintf_r+0x234>)
 80089e0:	a904      	add	r1, sp, #16
 80089e2:	4630      	mov	r0, r6
 80089e4:	f3af 8000 	nop.w
 80089e8:	e007      	b.n	80089fa <_vfiprintf_r+0x1fe>
 80089ea:	ab03      	add	r3, sp, #12
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4622      	mov	r2, r4
 80089f0:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <_vfiprintf_r+0x234>)
 80089f2:	a904      	add	r1, sp, #16
 80089f4:	4630      	mov	r0, r6
 80089f6:	f000 f893 	bl	8008b20 <_printf_i>
 80089fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089fe:	4682      	mov	sl, r0
 8008a00:	f47f af68 	bne.w	80088d4 <_vfiprintf_r+0xd8>
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	065b      	lsls	r3, r3, #25
 8008a08:	f53f af28 	bmi.w	800885c <_vfiprintf_r+0x60>
 8008a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0e:	b01d      	add	sp, #116	; 0x74
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	08011018 	.word	0x08011018
 8008a18:	08011038 	.word	0x08011038
 8008a1c:	08011058 	.word	0x08011058
 8008a20:	08010fea 	.word	0x08010fea
 8008a24:	08010fee 	.word	0x08010fee
 8008a28:	00000000 	.word	0x00000000
 8008a2c:	08010fe4 	.word	0x08010fe4
 8008a30:	080087d9 	.word	0x080087d9

08008a34 <_printf_common>:
 8008a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a38:	4691      	mov	r9, r2
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	690a      	ldr	r2, [r1, #16]
 8008a3e:	688b      	ldr	r3, [r1, #8]
 8008a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	bfb8      	it	lt
 8008a48:	4613      	movlt	r3, r2
 8008a4a:	f8c9 3000 	str.w	r3, [r9]
 8008a4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a52:	4606      	mov	r6, r0
 8008a54:	460c      	mov	r4, r1
 8008a56:	b112      	cbz	r2, 8008a5e <_printf_common+0x2a>
 8008a58:	3301      	adds	r3, #1
 8008a5a:	f8c9 3000 	str.w	r3, [r9]
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	0699      	lsls	r1, r3, #26
 8008a62:	bf42      	ittt	mi
 8008a64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a68:	3302      	addmi	r3, #2
 8008a6a:	f8c9 3000 	strmi.w	r3, [r9]
 8008a6e:	6825      	ldr	r5, [r4, #0]
 8008a70:	f015 0506 	ands.w	r5, r5, #6
 8008a74:	d110      	bne.n	8008a98 <_printf_common+0x64>
 8008a76:	f104 0a19 	add.w	sl, r4, #25
 8008a7a:	e007      	b.n	8008a8c <_printf_common+0x58>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	4652      	mov	r2, sl
 8008a80:	4639      	mov	r1, r7
 8008a82:	4630      	mov	r0, r6
 8008a84:	47c0      	blx	r8
 8008a86:	3001      	adds	r0, #1
 8008a88:	d01a      	beq.n	8008ac0 <_printf_common+0x8c>
 8008a8a:	3501      	adds	r5, #1
 8008a8c:	68e3      	ldr	r3, [r4, #12]
 8008a8e:	f8d9 2000 	ldr.w	r2, [r9]
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	429d      	cmp	r5, r3
 8008a96:	dbf1      	blt.n	8008a7c <_printf_common+0x48>
 8008a98:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a9c:	6822      	ldr	r2, [r4, #0]
 8008a9e:	3300      	adds	r3, #0
 8008aa0:	bf18      	it	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	0692      	lsls	r2, r2, #26
 8008aa6:	d50f      	bpl.n	8008ac8 <_printf_common+0x94>
 8008aa8:	18e1      	adds	r1, r4, r3
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	2030      	movs	r0, #48	; 0x30
 8008aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ab2:	4422      	add	r2, r4
 8008ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008abc:	3302      	adds	r3, #2
 8008abe:	e003      	b.n	8008ac8 <_printf_common+0x94>
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008acc:	4639      	mov	r1, r7
 8008ace:	4630      	mov	r0, r6
 8008ad0:	47c0      	blx	r8
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d0f4      	beq.n	8008ac0 <_printf_common+0x8c>
 8008ad6:	6822      	ldr	r2, [r4, #0]
 8008ad8:	f8d9 5000 	ldr.w	r5, [r9]
 8008adc:	68e3      	ldr	r3, [r4, #12]
 8008ade:	f002 0206 	and.w	r2, r2, #6
 8008ae2:	2a04      	cmp	r2, #4
 8008ae4:	bf08      	it	eq
 8008ae6:	1b5d      	subeq	r5, r3, r5
 8008ae8:	6922      	ldr	r2, [r4, #16]
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	bf0c      	ite	eq
 8008aee:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008af2:	2500      	movne	r5, #0
 8008af4:	4293      	cmp	r3, r2
 8008af6:	bfc4      	itt	gt
 8008af8:	1a9b      	subgt	r3, r3, r2
 8008afa:	18ed      	addgt	r5, r5, r3
 8008afc:	f04f 0900 	mov.w	r9, #0
 8008b00:	341a      	adds	r4, #26
 8008b02:	454d      	cmp	r5, r9
 8008b04:	d009      	beq.n	8008b1a <_printf_common+0xe6>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4622      	mov	r2, r4
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	47c0      	blx	r8
 8008b10:	3001      	adds	r0, #1
 8008b12:	d0d5      	beq.n	8008ac0 <_printf_common+0x8c>
 8008b14:	f109 0901 	add.w	r9, r9, #1
 8008b18:	e7f3      	b.n	8008b02 <_printf_common+0xce>
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008b20 <_printf_i>:
 8008b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b24:	4617      	mov	r7, r2
 8008b26:	7e0a      	ldrb	r2, [r1, #24]
 8008b28:	b085      	sub	sp, #20
 8008b2a:	2a6e      	cmp	r2, #110	; 0x6e
 8008b2c:	4698      	mov	r8, r3
 8008b2e:	4606      	mov	r6, r0
 8008b30:	460c      	mov	r4, r1
 8008b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b34:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008b38:	f000 80ae 	beq.w	8008c98 <_printf_i+0x178>
 8008b3c:	d811      	bhi.n	8008b62 <_printf_i+0x42>
 8008b3e:	2a63      	cmp	r2, #99	; 0x63
 8008b40:	d022      	beq.n	8008b88 <_printf_i+0x68>
 8008b42:	d809      	bhi.n	8008b58 <_printf_i+0x38>
 8008b44:	2a00      	cmp	r2, #0
 8008b46:	f000 80bb 	beq.w	8008cc0 <_printf_i+0x1a0>
 8008b4a:	2a58      	cmp	r2, #88	; 0x58
 8008b4c:	f040 80ca 	bne.w	8008ce4 <_printf_i+0x1c4>
 8008b50:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008b54:	4983      	ldr	r1, [pc, #524]	; (8008d64 <_printf_i+0x244>)
 8008b56:	e055      	b.n	8008c04 <_printf_i+0xe4>
 8008b58:	2a64      	cmp	r2, #100	; 0x64
 8008b5a:	d01e      	beq.n	8008b9a <_printf_i+0x7a>
 8008b5c:	2a69      	cmp	r2, #105	; 0x69
 8008b5e:	d01c      	beq.n	8008b9a <_printf_i+0x7a>
 8008b60:	e0c0      	b.n	8008ce4 <_printf_i+0x1c4>
 8008b62:	2a73      	cmp	r2, #115	; 0x73
 8008b64:	f000 80b0 	beq.w	8008cc8 <_printf_i+0x1a8>
 8008b68:	d809      	bhi.n	8008b7e <_printf_i+0x5e>
 8008b6a:	2a6f      	cmp	r2, #111	; 0x6f
 8008b6c:	d02e      	beq.n	8008bcc <_printf_i+0xac>
 8008b6e:	2a70      	cmp	r2, #112	; 0x70
 8008b70:	f040 80b8 	bne.w	8008ce4 <_printf_i+0x1c4>
 8008b74:	680a      	ldr	r2, [r1, #0]
 8008b76:	f042 0220 	orr.w	r2, r2, #32
 8008b7a:	600a      	str	r2, [r1, #0]
 8008b7c:	e03e      	b.n	8008bfc <_printf_i+0xdc>
 8008b7e:	2a75      	cmp	r2, #117	; 0x75
 8008b80:	d024      	beq.n	8008bcc <_printf_i+0xac>
 8008b82:	2a78      	cmp	r2, #120	; 0x78
 8008b84:	d03a      	beq.n	8008bfc <_printf_i+0xdc>
 8008b86:	e0ad      	b.n	8008ce4 <_printf_i+0x1c4>
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8008b8e:	1d11      	adds	r1, r2, #4
 8008b90:	6019      	str	r1, [r3, #0]
 8008b92:	6813      	ldr	r3, [r2, #0]
 8008b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b98:	e0a8      	b.n	8008cec <_printf_i+0x1cc>
 8008b9a:	6821      	ldr	r1, [r4, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008ba2:	d002      	beq.n	8008baa <_printf_i+0x8a>
 8008ba4:	1d11      	adds	r1, r2, #4
 8008ba6:	6019      	str	r1, [r3, #0]
 8008ba8:	e008      	b.n	8008bbc <_printf_i+0x9c>
 8008baa:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008bae:	f102 0104 	add.w	r1, r2, #4
 8008bb2:	6019      	str	r1, [r3, #0]
 8008bb4:	d002      	beq.n	8008bbc <_printf_i+0x9c>
 8008bb6:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008bba:	e000      	b.n	8008bbe <_printf_i+0x9e>
 8008bbc:	6813      	ldr	r3, [r2, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	da3c      	bge.n	8008c3c <_printf_i+0x11c>
 8008bc2:	222d      	movs	r2, #45	; 0x2d
 8008bc4:	425b      	negs	r3, r3
 8008bc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008bca:	e037      	b.n	8008c3c <_printf_i+0x11c>
 8008bcc:	6821      	ldr	r1, [r4, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008bd4:	d002      	beq.n	8008bdc <_printf_i+0xbc>
 8008bd6:	1d11      	adds	r1, r2, #4
 8008bd8:	6019      	str	r1, [r3, #0]
 8008bda:	e007      	b.n	8008bec <_printf_i+0xcc>
 8008bdc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008be0:	f102 0104 	add.w	r1, r2, #4
 8008be4:	6019      	str	r1, [r3, #0]
 8008be6:	d001      	beq.n	8008bec <_printf_i+0xcc>
 8008be8:	8813      	ldrh	r3, [r2, #0]
 8008bea:	e000      	b.n	8008bee <_printf_i+0xce>
 8008bec:	6813      	ldr	r3, [r2, #0]
 8008bee:	7e22      	ldrb	r2, [r4, #24]
 8008bf0:	495c      	ldr	r1, [pc, #368]	; (8008d64 <_printf_i+0x244>)
 8008bf2:	2a6f      	cmp	r2, #111	; 0x6f
 8008bf4:	bf14      	ite	ne
 8008bf6:	220a      	movne	r2, #10
 8008bf8:	2208      	moveq	r2, #8
 8008bfa:	e01b      	b.n	8008c34 <_printf_i+0x114>
 8008bfc:	2278      	movs	r2, #120	; 0x78
 8008bfe:	495a      	ldr	r1, [pc, #360]	; (8008d68 <_printf_i+0x248>)
 8008c00:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008c04:	6822      	ldr	r2, [r4, #0]
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008c0c:	f100 0504 	add.w	r5, r0, #4
 8008c10:	601d      	str	r5, [r3, #0]
 8008c12:	d103      	bne.n	8008c1c <_printf_i+0xfc>
 8008c14:	0655      	lsls	r5, r2, #25
 8008c16:	d501      	bpl.n	8008c1c <_printf_i+0xfc>
 8008c18:	8803      	ldrh	r3, [r0, #0]
 8008c1a:	e000      	b.n	8008c1e <_printf_i+0xfe>
 8008c1c:	6803      	ldr	r3, [r0, #0]
 8008c1e:	07d0      	lsls	r0, r2, #31
 8008c20:	bf44      	itt	mi
 8008c22:	f042 0220 	orrmi.w	r2, r2, #32
 8008c26:	6022      	strmi	r2, [r4, #0]
 8008c28:	b91b      	cbnz	r3, 8008c32 <_printf_i+0x112>
 8008c2a:	6822      	ldr	r2, [r4, #0]
 8008c2c:	f022 0220 	bic.w	r2, r2, #32
 8008c30:	6022      	str	r2, [r4, #0]
 8008c32:	2210      	movs	r2, #16
 8008c34:	2000      	movs	r0, #0
 8008c36:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008c3a:	e001      	b.n	8008c40 <_printf_i+0x120>
 8008c3c:	4949      	ldr	r1, [pc, #292]	; (8008d64 <_printf_i+0x244>)
 8008c3e:	220a      	movs	r2, #10
 8008c40:	6865      	ldr	r5, [r4, #4]
 8008c42:	60a5      	str	r5, [r4, #8]
 8008c44:	2d00      	cmp	r5, #0
 8008c46:	db08      	blt.n	8008c5a <_printf_i+0x13a>
 8008c48:	6820      	ldr	r0, [r4, #0]
 8008c4a:	f020 0004 	bic.w	r0, r0, #4
 8008c4e:	6020      	str	r0, [r4, #0]
 8008c50:	b92b      	cbnz	r3, 8008c5e <_printf_i+0x13e>
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	d17d      	bne.n	8008d52 <_printf_i+0x232>
 8008c56:	4675      	mov	r5, lr
 8008c58:	e00c      	b.n	8008c74 <_printf_i+0x154>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d079      	beq.n	8008d52 <_printf_i+0x232>
 8008c5e:	4675      	mov	r5, lr
 8008c60:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c64:	fb02 3310 	mls	r3, r2, r0, r3
 8008c68:	5ccb      	ldrb	r3, [r1, r3]
 8008c6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1f5      	bne.n	8008c60 <_printf_i+0x140>
 8008c74:	2a08      	cmp	r2, #8
 8008c76:	d10b      	bne.n	8008c90 <_printf_i+0x170>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	07da      	lsls	r2, r3, #31
 8008c7c:	d508      	bpl.n	8008c90 <_printf_i+0x170>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	6862      	ldr	r2, [r4, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	bfde      	ittt	le
 8008c86:	2330      	movle	r3, #48	; 0x30
 8008c88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c90:	ebc5 030e 	rsb	r3, r5, lr
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	e02e      	b.n	8008cf6 <_printf_i+0x1d6>
 8008c98:	6808      	ldr	r0, [r1, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	6949      	ldr	r1, [r1, #20]
 8008c9e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008ca2:	d003      	beq.n	8008cac <_printf_i+0x18c>
 8008ca4:	1d10      	adds	r0, r2, #4
 8008ca6:	6018      	str	r0, [r3, #0]
 8008ca8:	6813      	ldr	r3, [r2, #0]
 8008caa:	e008      	b.n	8008cbe <_printf_i+0x19e>
 8008cac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cb0:	f102 0004 	add.w	r0, r2, #4
 8008cb4:	6018      	str	r0, [r3, #0]
 8008cb6:	6813      	ldr	r3, [r2, #0]
 8008cb8:	d001      	beq.n	8008cbe <_printf_i+0x19e>
 8008cba:	8019      	strh	r1, [r3, #0]
 8008cbc:	e000      	b.n	8008cc0 <_printf_i+0x1a0>
 8008cbe:	6019      	str	r1, [r3, #0]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	4675      	mov	r5, lr
 8008cc6:	e016      	b.n	8008cf6 <_printf_i+0x1d6>
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	1d11      	adds	r1, r2, #4
 8008ccc:	6019      	str	r1, [r3, #0]
 8008cce:	6815      	ldr	r5, [r2, #0]
 8008cd0:	6862      	ldr	r2, [r4, #4]
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f7f7 fa9b 	bl	8000210 <memchr>
 8008cda:	b108      	cbz	r0, 8008ce0 <_printf_i+0x1c0>
 8008cdc:	1b40      	subs	r0, r0, r5
 8008cde:	6060      	str	r0, [r4, #4]
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	e004      	b.n	8008cee <_printf_i+0x1ce>
 8008ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008cec:	2301      	movs	r3, #1
 8008cee:	6123      	str	r3, [r4, #16]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf6:	f8cd 8000 	str.w	r8, [sp]
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	aa03      	add	r2, sp, #12
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4630      	mov	r0, r6
 8008d02:	f7ff fe97 	bl	8008a34 <_printf_common>
 8008d06:	3001      	adds	r0, #1
 8008d08:	d102      	bne.n	8008d10 <_printf_i+0x1f0>
 8008d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0e:	e026      	b.n	8008d5e <_printf_i+0x23e>
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	462a      	mov	r2, r5
 8008d14:	4639      	mov	r1, r7
 8008d16:	4630      	mov	r0, r6
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d0f5      	beq.n	8008d0a <_printf_i+0x1ea>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	079b      	lsls	r3, r3, #30
 8008d22:	d510      	bpl.n	8008d46 <_printf_i+0x226>
 8008d24:	2500      	movs	r5, #0
 8008d26:	f104 0919 	add.w	r9, r4, #25
 8008d2a:	e007      	b.n	8008d3c <_printf_i+0x21c>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	464a      	mov	r2, r9
 8008d30:	4639      	mov	r1, r7
 8008d32:	4630      	mov	r0, r6
 8008d34:	47c0      	blx	r8
 8008d36:	3001      	adds	r0, #1
 8008d38:	d0e7      	beq.n	8008d0a <_printf_i+0x1ea>
 8008d3a:	3501      	adds	r5, #1
 8008d3c:	68e3      	ldr	r3, [r4, #12]
 8008d3e:	9a03      	ldr	r2, [sp, #12]
 8008d40:	1a9b      	subs	r3, r3, r2
 8008d42:	429d      	cmp	r5, r3
 8008d44:	dbf2      	blt.n	8008d2c <_printf_i+0x20c>
 8008d46:	68e0      	ldr	r0, [r4, #12]
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	4298      	cmp	r0, r3
 8008d4c:	bfb8      	it	lt
 8008d4e:	4618      	movlt	r0, r3
 8008d50:	e005      	b.n	8008d5e <_printf_i+0x23e>
 8008d52:	780b      	ldrb	r3, [r1, #0]
 8008d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d5c:	e78a      	b.n	8008c74 <_printf_i+0x154>
 8008d5e:	b005      	add	sp, #20
 8008d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d64:	08010ff5 	.word	0x08010ff5
 8008d68:	08011006 	.word	0x08011006

08008d6c <_sbrk_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4c06      	ldr	r4, [pc, #24]	; (8008d88 <_sbrk_r+0x1c>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4605      	mov	r5, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	f000 feb0 	bl	8009adc <_sbrk>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_sbrk_r+0x1a>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_sbrk_r+0x1a>
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	200066d0 	.word	0x200066d0

08008d8c <siprintf>:
 8008d8c:	b40e      	push	{r1, r2, r3}
 8008d8e:	b500      	push	{lr}
 8008d90:	b09c      	sub	sp, #112	; 0x70
 8008d92:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008d96:	ab1d      	add	r3, sp, #116	; 0x74
 8008d98:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008d9c:	9002      	str	r0, [sp, #8]
 8008d9e:	9006      	str	r0, [sp, #24]
 8008da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008da4:	480a      	ldr	r0, [pc, #40]	; (8008dd0 <siprintf+0x44>)
 8008da6:	9104      	str	r1, [sp, #16]
 8008da8:	9107      	str	r1, [sp, #28]
 8008daa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008db6:	6800      	ldr	r0, [r0, #0]
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	a902      	add	r1, sp, #8
 8008dbc:	f000 fc5a 	bl	8009674 <_svfiprintf_r>
 8008dc0:	9b02      	ldr	r3, [sp, #8]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	b01c      	add	sp, #112	; 0x70
 8008dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dcc:	b003      	add	sp, #12
 8008dce:	4770      	bx	lr
 8008dd0:	20000240 	.word	0x20000240

08008dd4 <_strtol_l.isra.0>:
 8008dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	4680      	mov	r8, r0
 8008dda:	4689      	mov	r9, r1
 8008ddc:	4692      	mov	sl, r2
 8008dde:	461e      	mov	r6, r3
 8008de0:	460f      	mov	r7, r1
 8008de2:	463d      	mov	r5, r7
 8008de4:	9808      	ldr	r0, [sp, #32]
 8008de6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dea:	f000 fb33 	bl	8009454 <__locale_ctype_ptr_l>
 8008dee:	4420      	add	r0, r4
 8008df0:	7842      	ldrb	r2, [r0, #1]
 8008df2:	f002 0208 	and.w	r2, r2, #8
 8008df6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8008dfa:	b10a      	cbz	r2, 8008e00 <_strtol_l.isra.0+0x2c>
 8008dfc:	462f      	mov	r7, r5
 8008dfe:	e7f0      	b.n	8008de2 <_strtol_l.isra.0+0xe>
 8008e00:	2c2d      	cmp	r4, #45	; 0x2d
 8008e02:	d103      	bne.n	8008e0c <_strtol_l.isra.0+0x38>
 8008e04:	1cbd      	adds	r5, r7, #2
 8008e06:	787c      	ldrb	r4, [r7, #1]
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e003      	b.n	8008e14 <_strtol_l.isra.0+0x40>
 8008e0c:	2c2b      	cmp	r4, #43	; 0x2b
 8008e0e:	bf04      	itt	eq
 8008e10:	787c      	ldrbeq	r4, [r7, #1]
 8008e12:	1cbd      	addeq	r5, r7, #2
 8008e14:	b116      	cbz	r6, 8008e1c <_strtol_l.isra.0+0x48>
 8008e16:	2e10      	cmp	r6, #16
 8008e18:	d10a      	bne.n	8008e30 <_strtol_l.isra.0+0x5c>
 8008e1a:	e05e      	b.n	8008eda <_strtol_l.isra.0+0x106>
 8008e1c:	2c30      	cmp	r4, #48	; 0x30
 8008e1e:	d15a      	bne.n	8008ed6 <_strtol_l.isra.0+0x102>
 8008e20:	782a      	ldrb	r2, [r5, #0]
 8008e22:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008e26:	2a58      	cmp	r2, #88	; 0x58
 8008e28:	d150      	bne.n	8008ecc <_strtol_l.isra.0+0xf8>
 8008e2a:	786c      	ldrb	r4, [r5, #1]
 8008e2c:	2610      	movs	r6, #16
 8008e2e:	3502      	adds	r5, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bf14      	ite	ne
 8008e34:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
 8008e38:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
 8008e3c:	fbb2 fef6 	udiv	lr, r2, r6
 8008e40:	fb06 211e 	mls	r1, r6, lr, r2
 8008e44:	2200      	movs	r2, #0
 8008e46:	4610      	mov	r0, r2
 8008e48:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008e4c:	2f09      	cmp	r7, #9
 8008e4e:	d801      	bhi.n	8008e54 <_strtol_l.isra.0+0x80>
 8008e50:	463c      	mov	r4, r7
 8008e52:	e00a      	b.n	8008e6a <_strtol_l.isra.0+0x96>
 8008e54:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008e58:	2f19      	cmp	r7, #25
 8008e5a:	d801      	bhi.n	8008e60 <_strtol_l.isra.0+0x8c>
 8008e5c:	3c37      	subs	r4, #55	; 0x37
 8008e5e:	e004      	b.n	8008e6a <_strtol_l.isra.0+0x96>
 8008e60:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008e64:	2f19      	cmp	r7, #25
 8008e66:	d813      	bhi.n	8008e90 <_strtol_l.isra.0+0xbc>
 8008e68:	3c57      	subs	r4, #87	; 0x57
 8008e6a:	42a6      	cmp	r6, r4
 8008e6c:	dd10      	ble.n	8008e90 <_strtol_l.isra.0+0xbc>
 8008e6e:	1c57      	adds	r7, r2, #1
 8008e70:	d00b      	beq.n	8008e8a <_strtol_l.isra.0+0xb6>
 8008e72:	4586      	cmp	lr, r0
 8008e74:	d307      	bcc.n	8008e86 <_strtol_l.isra.0+0xb2>
 8008e76:	d101      	bne.n	8008e7c <_strtol_l.isra.0+0xa8>
 8008e78:	42a1      	cmp	r1, r4
 8008e7a:	db03      	blt.n	8008e84 <_strtol_l.isra.0+0xb0>
 8008e7c:	fb00 4006 	mla	r0, r0, r6, r4
 8008e80:	2201      	movs	r2, #1
 8008e82:	e002      	b.n	8008e8a <_strtol_l.isra.0+0xb6>
 8008e84:	4670      	mov	r0, lr
 8008e86:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e8e:	e7db      	b.n	8008e48 <_strtol_l.isra.0+0x74>
 8008e90:	1c51      	adds	r1, r2, #1
 8008e92:	d10e      	bne.n	8008eb2 <_strtol_l.isra.0+0xde>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f04f 0322 	mov.w	r3, #34	; 0x22
 8008e9a:	bf14      	ite	ne
 8008e9c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8008ea0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008ea4:	f8c8 3000 	str.w	r3, [r8]
 8008ea8:	f1ba 0f00 	cmp.w	sl, #0
 8008eac:	d107      	bne.n	8008ebe <_strtol_l.isra.0+0xea>
 8008eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb2:	b103      	cbz	r3, 8008eb6 <_strtol_l.isra.0+0xe2>
 8008eb4:	4240      	negs	r0, r0
 8008eb6:	f1ba 0f00 	cmp.w	sl, #0
 8008eba:	d011      	beq.n	8008ee0 <_strtol_l.isra.0+0x10c>
 8008ebc:	b10a      	cbz	r2, 8008ec2 <_strtol_l.isra.0+0xee>
 8008ebe:	3d01      	subs	r5, #1
 8008ec0:	e000      	b.n	8008ec4 <_strtol_l.isra.0+0xf0>
 8008ec2:	464d      	mov	r5, r9
 8008ec4:	f8ca 5000 	str.w	r5, [sl]
 8008ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ecc:	2430      	movs	r4, #48	; 0x30
 8008ece:	2e00      	cmp	r6, #0
 8008ed0:	d1ae      	bne.n	8008e30 <_strtol_l.isra.0+0x5c>
 8008ed2:	2608      	movs	r6, #8
 8008ed4:	e7ac      	b.n	8008e30 <_strtol_l.isra.0+0x5c>
 8008ed6:	260a      	movs	r6, #10
 8008ed8:	e7aa      	b.n	8008e30 <_strtol_l.isra.0+0x5c>
 8008eda:	2c30      	cmp	r4, #48	; 0x30
 8008edc:	d0a0      	beq.n	8008e20 <_strtol_l.isra.0+0x4c>
 8008ede:	e7a7      	b.n	8008e30 <_strtol_l.isra.0+0x5c>
 8008ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008ee4 <strtol>:
 8008ee4:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <strtol+0x24>)
 8008ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ee8:	681c      	ldr	r4, [r3, #0]
 8008eea:	4d08      	ldr	r5, [pc, #32]	; (8008f0c <strtol+0x28>)
 8008eec:	6a23      	ldr	r3, [r4, #32]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bf08      	it	eq
 8008ef2:	462b      	moveq	r3, r5
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	460a      	mov	r2, r1
 8008efa:	4601      	mov	r1, r0
 8008efc:	4620      	mov	r0, r4
 8008efe:	f7ff ff69 	bl	8008dd4 <_strtol_l.isra.0>
 8008f02:	b003      	add	sp, #12
 8008f04:	bd30      	pop	{r4, r5, pc}
 8008f06:	bf00      	nop
 8008f08:	20000240 	.word	0x20000240
 8008f0c:	20000244 	.word	0x20000244

08008f10 <_vsniprintf_r>:
 8008f10:	b530      	push	{r4, r5, lr}
 8008f12:	1e14      	subs	r4, r2, #0
 8008f14:	4605      	mov	r5, r0
 8008f16:	b09b      	sub	sp, #108	; 0x6c
 8008f18:	4618      	mov	r0, r3
 8008f1a:	da04      	bge.n	8008f26 <_vsniprintf_r+0x16>
 8008f1c:	238b      	movs	r3, #139	; 0x8b
 8008f1e:	602b      	str	r3, [r5, #0]
 8008f20:	f04f 30ff 	mov.w	r0, #4294967295
 8008f24:	e01d      	b.n	8008f62 <_vsniprintf_r+0x52>
 8008f26:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008f2e:	bf14      	ite	ne
 8008f30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f34:	4623      	moveq	r3, r4
 8008f36:	9302      	str	r3, [sp, #8]
 8008f38:	9305      	str	r3, [sp, #20]
 8008f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f3e:	9100      	str	r1, [sp, #0]
 8008f40:	9104      	str	r1, [sp, #16]
 8008f42:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008f46:	4602      	mov	r2, r0
 8008f48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f4a:	4669      	mov	r1, sp
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f000 fb91 	bl	8009674 <_svfiprintf_r>
 8008f52:	1c43      	adds	r3, r0, #1
 8008f54:	bfbc      	itt	lt
 8008f56:	238b      	movlt	r3, #139	; 0x8b
 8008f58:	602b      	strlt	r3, [r5, #0]
 8008f5a:	b114      	cbz	r4, 8008f62 <_vsniprintf_r+0x52>
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	b01b      	add	sp, #108	; 0x6c
 8008f64:	bd30      	pop	{r4, r5, pc}
	...

08008f68 <vsniprintf>:
 8008f68:	b507      	push	{r0, r1, r2, lr}
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	460a      	mov	r2, r1
 8008f70:	4601      	mov	r1, r0
 8008f72:	4803      	ldr	r0, [pc, #12]	; (8008f80 <vsniprintf+0x18>)
 8008f74:	6800      	ldr	r0, [r0, #0]
 8008f76:	f7ff ffcb 	bl	8008f10 <_vsniprintf_r>
 8008f7a:	b003      	add	sp, #12
 8008f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f80:	20000240 	.word	0x20000240

08008f84 <_vsiprintf_r>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	b09a      	sub	sp, #104	; 0x68
 8008f88:	f44f 7402 	mov.w	r4, #520	; 0x208
 8008f8c:	9100      	str	r1, [sp, #0]
 8008f8e:	9104      	str	r1, [sp, #16]
 8008f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f94:	9102      	str	r1, [sp, #8]
 8008f96:	9105      	str	r1, [sp, #20]
 8008f98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008f9c:	f8ad 100e 	strh.w	r1, [sp, #14]
 8008fa0:	4669      	mov	r1, sp
 8008fa2:	f8ad 400c 	strh.w	r4, [sp, #12]
 8008fa6:	f000 fb65 	bl	8009674 <_svfiprintf_r>
 8008faa:	9b00      	ldr	r3, [sp, #0]
 8008fac:	2200      	movs	r2, #0
 8008fae:	701a      	strb	r2, [r3, #0]
 8008fb0:	b01a      	add	sp, #104	; 0x68
 8008fb2:	bd10      	pop	{r4, pc}

08008fb4 <vsiprintf>:
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	460a      	mov	r2, r1
 8008fb8:	4601      	mov	r1, r0
 8008fba:	4802      	ldr	r0, [pc, #8]	; (8008fc4 <vsiprintf+0x10>)
 8008fbc:	6800      	ldr	r0, [r0, #0]
 8008fbe:	f7ff bfe1 	b.w	8008f84 <_vsiprintf_r>
 8008fc2:	bf00      	nop
 8008fc4:	20000240 	.word	0x20000240

08008fc8 <__swbuf_r>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	460f      	mov	r7, r1
 8008fcc:	4614      	mov	r4, r2
 8008fce:	4605      	mov	r5, r0
 8008fd0:	b118      	cbz	r0, 8008fda <__swbuf_r+0x12>
 8008fd2:	6983      	ldr	r3, [r0, #24]
 8008fd4:	b90b      	cbnz	r3, 8008fda <__swbuf_r+0x12>
 8008fd6:	f000 f9b3 	bl	8009340 <__sinit>
 8008fda:	4b22      	ldr	r3, [pc, #136]	; (8009064 <__swbuf_r+0x9c>)
 8008fdc:	429c      	cmp	r4, r3
 8008fde:	d101      	bne.n	8008fe4 <__swbuf_r+0x1c>
 8008fe0:	686c      	ldr	r4, [r5, #4]
 8008fe2:	e008      	b.n	8008ff6 <__swbuf_r+0x2e>
 8008fe4:	4b20      	ldr	r3, [pc, #128]	; (8009068 <__swbuf_r+0xa0>)
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d101      	bne.n	8008fee <__swbuf_r+0x26>
 8008fea:	68ac      	ldr	r4, [r5, #8]
 8008fec:	e003      	b.n	8008ff6 <__swbuf_r+0x2e>
 8008fee:	4b1f      	ldr	r3, [pc, #124]	; (800906c <__swbuf_r+0xa4>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	bf08      	it	eq
 8008ff4:	68ec      	ldreq	r4, [r5, #12]
 8008ff6:	69a3      	ldr	r3, [r4, #24]
 8008ff8:	60a3      	str	r3, [r4, #8]
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	071a      	lsls	r2, r3, #28
 8008ffe:	d509      	bpl.n	8009014 <__swbuf_r+0x4c>
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	b13b      	cbz	r3, 8009014 <__swbuf_r+0x4c>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	6920      	ldr	r0, [r4, #16]
 8009008:	1a18      	subs	r0, r3, r0
 800900a:	6963      	ldr	r3, [r4, #20]
 800900c:	4298      	cmp	r0, r3
 800900e:	b2fe      	uxtb	r6, r7
 8009010:	db0f      	blt.n	8009032 <__swbuf_r+0x6a>
 8009012:	e008      	b.n	8009026 <__swbuf_r+0x5e>
 8009014:	4621      	mov	r1, r4
 8009016:	4628      	mov	r0, r5
 8009018:	f000 f82a 	bl	8009070 <__swsetup_r>
 800901c:	2800      	cmp	r0, #0
 800901e:	d0f1      	beq.n	8009004 <__swbuf_r+0x3c>
 8009020:	f04f 36ff 	mov.w	r6, #4294967295
 8009024:	e01b      	b.n	800905e <__swbuf_r+0x96>
 8009026:	4621      	mov	r1, r4
 8009028:	4628      	mov	r0, r5
 800902a:	f000 f91f 	bl	800926c <_fflush_r>
 800902e:	2800      	cmp	r0, #0
 8009030:	d1f6      	bne.n	8009020 <__swbuf_r+0x58>
 8009032:	68a3      	ldr	r3, [r4, #8]
 8009034:	3b01      	subs	r3, #1
 8009036:	60a3      	str	r3, [r4, #8]
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	6022      	str	r2, [r4, #0]
 800903e:	701f      	strb	r7, [r3, #0]
 8009040:	6963      	ldr	r3, [r4, #20]
 8009042:	3001      	adds	r0, #1
 8009044:	4298      	cmp	r0, r3
 8009046:	d004      	beq.n	8009052 <__swbuf_r+0x8a>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	07db      	lsls	r3, r3, #31
 800904c:	d507      	bpl.n	800905e <__swbuf_r+0x96>
 800904e:	2e0a      	cmp	r6, #10
 8009050:	d105      	bne.n	800905e <__swbuf_r+0x96>
 8009052:	4621      	mov	r1, r4
 8009054:	4628      	mov	r0, r5
 8009056:	f000 f909 	bl	800926c <_fflush_r>
 800905a:	2800      	cmp	r0, #0
 800905c:	d1e0      	bne.n	8009020 <__swbuf_r+0x58>
 800905e:	4630      	mov	r0, r6
 8009060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009062:	bf00      	nop
 8009064:	08011018 	.word	0x08011018
 8009068:	08011038 	.word	0x08011038
 800906c:	08011058 	.word	0x08011058

08009070 <__swsetup_r>:
 8009070:	4b32      	ldr	r3, [pc, #200]	; (800913c <__swsetup_r+0xcc>)
 8009072:	b570      	push	{r4, r5, r6, lr}
 8009074:	681d      	ldr	r5, [r3, #0]
 8009076:	4606      	mov	r6, r0
 8009078:	460c      	mov	r4, r1
 800907a:	b125      	cbz	r5, 8009086 <__swsetup_r+0x16>
 800907c:	69ab      	ldr	r3, [r5, #24]
 800907e:	b913      	cbnz	r3, 8009086 <__swsetup_r+0x16>
 8009080:	4628      	mov	r0, r5
 8009082:	f000 f95d 	bl	8009340 <__sinit>
 8009086:	4b2e      	ldr	r3, [pc, #184]	; (8009140 <__swsetup_r+0xd0>)
 8009088:	429c      	cmp	r4, r3
 800908a:	d101      	bne.n	8009090 <__swsetup_r+0x20>
 800908c:	686c      	ldr	r4, [r5, #4]
 800908e:	e008      	b.n	80090a2 <__swsetup_r+0x32>
 8009090:	4b2c      	ldr	r3, [pc, #176]	; (8009144 <__swsetup_r+0xd4>)
 8009092:	429c      	cmp	r4, r3
 8009094:	d101      	bne.n	800909a <__swsetup_r+0x2a>
 8009096:	68ac      	ldr	r4, [r5, #8]
 8009098:	e003      	b.n	80090a2 <__swsetup_r+0x32>
 800909a:	4b2b      	ldr	r3, [pc, #172]	; (8009148 <__swsetup_r+0xd8>)
 800909c:	429c      	cmp	r4, r3
 800909e:	bf08      	it	eq
 80090a0:	68ec      	ldreq	r4, [r5, #12]
 80090a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	0715      	lsls	r5, r2, #28
 80090aa:	d41d      	bmi.n	80090e8 <__swsetup_r+0x78>
 80090ac:	06d0      	lsls	r0, r2, #27
 80090ae:	d402      	bmi.n	80090b6 <__swsetup_r+0x46>
 80090b0:	2209      	movs	r2, #9
 80090b2:	6032      	str	r2, [r6, #0]
 80090b4:	e03a      	b.n	800912c <__swsetup_r+0xbc>
 80090b6:	0751      	lsls	r1, r2, #29
 80090b8:	d512      	bpl.n	80090e0 <__swsetup_r+0x70>
 80090ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090bc:	b141      	cbz	r1, 80090d0 <__swsetup_r+0x60>
 80090be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090c2:	4299      	cmp	r1, r3
 80090c4:	d002      	beq.n	80090cc <__swsetup_r+0x5c>
 80090c6:	4630      	mov	r0, r6
 80090c8:	f7ff fac2 	bl	8008650 <_free_r>
 80090cc:	2300      	movs	r3, #0
 80090ce:	6363      	str	r3, [r4, #52]	; 0x34
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	2300      	movs	r3, #0
 80090da:	6063      	str	r3, [r4, #4]
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	6023      	str	r3, [r4, #0]
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	f043 0308 	orr.w	r3, r3, #8
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	b94b      	cbnz	r3, 8009100 <__swsetup_r+0x90>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f6:	d003      	beq.n	8009100 <__swsetup_r+0x90>
 80090f8:	4621      	mov	r1, r4
 80090fa:	4630      	mov	r0, r6
 80090fc:	f000 f9d0 	bl	80094a0 <__smakebuf_r>
 8009100:	89a2      	ldrh	r2, [r4, #12]
 8009102:	f012 0301 	ands.w	r3, r2, #1
 8009106:	d005      	beq.n	8009114 <__swsetup_r+0xa4>
 8009108:	2300      	movs	r3, #0
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	6963      	ldr	r3, [r4, #20]
 800910e:	425b      	negs	r3, r3
 8009110:	61a3      	str	r3, [r4, #24]
 8009112:	e003      	b.n	800911c <__swsetup_r+0xac>
 8009114:	0792      	lsls	r2, r2, #30
 8009116:	bf58      	it	pl
 8009118:	6963      	ldrpl	r3, [r4, #20]
 800911a:	60a3      	str	r3, [r4, #8]
 800911c:	6923      	ldr	r3, [r4, #16]
 800911e:	b95b      	cbnz	r3, 8009138 <__swsetup_r+0xc8>
 8009120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009124:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8009128:	b280      	uxth	r0, r0
 800912a:	b130      	cbz	r0, 800913a <__swsetup_r+0xca>
 800912c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	f04f 30ff 	mov.w	r0, #4294967295
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	2000      	movs	r0, #0
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	20000240 	.word	0x20000240
 8009140:	08011018 	.word	0x08011018
 8009144:	08011038 	.word	0x08011038
 8009148:	08011058 	.word	0x08011058

0800914c <abort>:
 800914c:	b508      	push	{r3, lr}
 800914e:	2006      	movs	r0, #6
 8009150:	f000 fbae 	bl	80098b0 <raise>
 8009154:	2001      	movs	r0, #1
 8009156:	f000 fcd7 	bl	8009b08 <_exit>
	...

0800915c <__sflush_r>:
 800915c:	898a      	ldrh	r2, [r1, #12]
 800915e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009162:	4605      	mov	r5, r0
 8009164:	0710      	lsls	r0, r2, #28
 8009166:	460c      	mov	r4, r1
 8009168:	d459      	bmi.n	800921e <__sflush_r+0xc2>
 800916a:	684b      	ldr	r3, [r1, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	dc02      	bgt.n	8009176 <__sflush_r+0x1a>
 8009170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009172:	2b00      	cmp	r3, #0
 8009174:	dd17      	ble.n	80091a6 <__sflush_r+0x4a>
 8009176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009178:	b1ae      	cbz	r6, 80091a6 <__sflush_r+0x4a>
 800917a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800917e:	2300      	movs	r3, #0
 8009180:	b292      	uxth	r2, r2
 8009182:	682f      	ldr	r7, [r5, #0]
 8009184:	602b      	str	r3, [r5, #0]
 8009186:	b10a      	cbz	r2, 800918c <__sflush_r+0x30>
 8009188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800918a:	e015      	b.n	80091b8 <__sflush_r+0x5c>
 800918c:	6a21      	ldr	r1, [r4, #32]
 800918e:	2301      	movs	r3, #1
 8009190:	4628      	mov	r0, r5
 8009192:	47b0      	blx	r6
 8009194:	1c41      	adds	r1, r0, #1
 8009196:	d10f      	bne.n	80091b8 <__sflush_r+0x5c>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b16b      	cbz	r3, 80091b8 <__sflush_r+0x5c>
 800919c:	2b1d      	cmp	r3, #29
 800919e:	d001      	beq.n	80091a4 <__sflush_r+0x48>
 80091a0:	2b16      	cmp	r3, #22
 80091a2:	d103      	bne.n	80091ac <__sflush_r+0x50>
 80091a4:	602f      	str	r7, [r5, #0]
 80091a6:	2000      	movs	r0, #0
 80091a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	075a      	lsls	r2, r3, #29
 80091bc:	d505      	bpl.n	80091ca <__sflush_r+0x6e>
 80091be:	6863      	ldr	r3, [r4, #4]
 80091c0:	1ac0      	subs	r0, r0, r3
 80091c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091c4:	b10b      	cbz	r3, 80091ca <__sflush_r+0x6e>
 80091c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091c8:	1ac0      	subs	r0, r0, r3
 80091ca:	2300      	movs	r3, #0
 80091cc:	4602      	mov	r2, r0
 80091ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091d0:	6a21      	ldr	r1, [r4, #32]
 80091d2:	4628      	mov	r0, r5
 80091d4:	47b0      	blx	r6
 80091d6:	1c43      	adds	r3, r0, #1
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	d106      	bne.n	80091ea <__sflush_r+0x8e>
 80091dc:	6829      	ldr	r1, [r5, #0]
 80091de:	291d      	cmp	r1, #29
 80091e0:	d83a      	bhi.n	8009258 <__sflush_r+0xfc>
 80091e2:	4a21      	ldr	r2, [pc, #132]	; (8009268 <__sflush_r+0x10c>)
 80091e4:	40ca      	lsrs	r2, r1
 80091e6:	07d6      	lsls	r6, r2, #31
 80091e8:	d536      	bpl.n	8009258 <__sflush_r+0xfc>
 80091ea:	2200      	movs	r2, #0
 80091ec:	6062      	str	r2, [r4, #4]
 80091ee:	04d9      	lsls	r1, r3, #19
 80091f0:	6922      	ldr	r2, [r4, #16]
 80091f2:	6022      	str	r2, [r4, #0]
 80091f4:	d504      	bpl.n	8009200 <__sflush_r+0xa4>
 80091f6:	1c42      	adds	r2, r0, #1
 80091f8:	d101      	bne.n	80091fe <__sflush_r+0xa2>
 80091fa:	682b      	ldr	r3, [r5, #0]
 80091fc:	b903      	cbnz	r3, 8009200 <__sflush_r+0xa4>
 80091fe:	6560      	str	r0, [r4, #84]	; 0x54
 8009200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009202:	602f      	str	r7, [r5, #0]
 8009204:	2900      	cmp	r1, #0
 8009206:	d0ce      	beq.n	80091a6 <__sflush_r+0x4a>
 8009208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800920c:	4299      	cmp	r1, r3
 800920e:	d002      	beq.n	8009216 <__sflush_r+0xba>
 8009210:	4628      	mov	r0, r5
 8009212:	f7ff fa1d 	bl	8008650 <_free_r>
 8009216:	2000      	movs	r0, #0
 8009218:	6360      	str	r0, [r4, #52]	; 0x34
 800921a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800921e:	690f      	ldr	r7, [r1, #16]
 8009220:	2f00      	cmp	r7, #0
 8009222:	d0c0      	beq.n	80091a6 <__sflush_r+0x4a>
 8009224:	0793      	lsls	r3, r2, #30
 8009226:	680e      	ldr	r6, [r1, #0]
 8009228:	bf08      	it	eq
 800922a:	694b      	ldreq	r3, [r1, #20]
 800922c:	600f      	str	r7, [r1, #0]
 800922e:	bf18      	it	ne
 8009230:	2300      	movne	r3, #0
 8009232:	ebc7 0806 	rsb	r8, r7, r6
 8009236:	608b      	str	r3, [r1, #8]
 8009238:	e002      	b.n	8009240 <__sflush_r+0xe4>
 800923a:	4407      	add	r7, r0
 800923c:	ebc0 0808 	rsb	r8, r0, r8
 8009240:	f1b8 0f00 	cmp.w	r8, #0
 8009244:	ddaf      	ble.n	80091a6 <__sflush_r+0x4a>
 8009246:	4643      	mov	r3, r8
 8009248:	463a      	mov	r2, r7
 800924a:	6a21      	ldr	r1, [r4, #32]
 800924c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800924e:	4628      	mov	r0, r5
 8009250:	47b0      	blx	r6
 8009252:	2800      	cmp	r0, #0
 8009254:	dcf1      	bgt.n	800923a <__sflush_r+0xde>
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	f04f 30ff 	mov.w	r0, #4294967295
 8009262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009266:	bf00      	nop
 8009268:	20400001 	.word	0x20400001

0800926c <_fflush_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	690b      	ldr	r3, [r1, #16]
 8009270:	4605      	mov	r5, r0
 8009272:	460c      	mov	r4, r1
 8009274:	b1db      	cbz	r3, 80092ae <_fflush_r+0x42>
 8009276:	b118      	cbz	r0, 8009280 <_fflush_r+0x14>
 8009278:	6983      	ldr	r3, [r0, #24]
 800927a:	b90b      	cbnz	r3, 8009280 <_fflush_r+0x14>
 800927c:	f000 f860 	bl	8009340 <__sinit>
 8009280:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <_fflush_r+0x48>)
 8009282:	429c      	cmp	r4, r3
 8009284:	d101      	bne.n	800928a <_fflush_r+0x1e>
 8009286:	686c      	ldr	r4, [r5, #4]
 8009288:	e008      	b.n	800929c <_fflush_r+0x30>
 800928a:	4b0b      	ldr	r3, [pc, #44]	; (80092b8 <_fflush_r+0x4c>)
 800928c:	429c      	cmp	r4, r3
 800928e:	d101      	bne.n	8009294 <_fflush_r+0x28>
 8009290:	68ac      	ldr	r4, [r5, #8]
 8009292:	e003      	b.n	800929c <_fflush_r+0x30>
 8009294:	4b09      	ldr	r3, [pc, #36]	; (80092bc <_fflush_r+0x50>)
 8009296:	429c      	cmp	r4, r3
 8009298:	bf08      	it	eq
 800929a:	68ec      	ldreq	r4, [r5, #12]
 800929c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a0:	b12b      	cbz	r3, 80092ae <_fflush_r+0x42>
 80092a2:	4621      	mov	r1, r4
 80092a4:	4628      	mov	r0, r5
 80092a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092aa:	f7ff bf57 	b.w	800915c <__sflush_r>
 80092ae:	2000      	movs	r0, #0
 80092b0:	bd38      	pop	{r3, r4, r5, pc}
 80092b2:	bf00      	nop
 80092b4:	08011018 	.word	0x08011018
 80092b8:	08011038 	.word	0x08011038
 80092bc:	08011058 	.word	0x08011058

080092c0 <_cleanup_r>:
 80092c0:	4901      	ldr	r1, [pc, #4]	; (80092c8 <_cleanup_r+0x8>)
 80092c2:	f000 b8a9 	b.w	8009418 <_fwalk_reent>
 80092c6:	bf00      	nop
 80092c8:	0800926d 	.word	0x0800926d

080092cc <std.isra.0>:
 80092cc:	2300      	movs	r3, #0
 80092ce:	b510      	push	{r4, lr}
 80092d0:	4604      	mov	r4, r0
 80092d2:	6003      	str	r3, [r0, #0]
 80092d4:	6043      	str	r3, [r0, #4]
 80092d6:	6083      	str	r3, [r0, #8]
 80092d8:	8181      	strh	r1, [r0, #12]
 80092da:	6643      	str	r3, [r0, #100]	; 0x64
 80092dc:	81c2      	strh	r2, [r0, #14]
 80092de:	6103      	str	r3, [r0, #16]
 80092e0:	6143      	str	r3, [r0, #20]
 80092e2:	6183      	str	r3, [r0, #24]
 80092e4:	4619      	mov	r1, r3
 80092e6:	2208      	movs	r2, #8
 80092e8:	305c      	adds	r0, #92	; 0x5c
 80092ea:	f7ff f9a9 	bl	8008640 <memset>
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std.isra.0+0x38>)
 80092f0:	6263      	str	r3, [r4, #36]	; 0x24
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <std.isra.0+0x3c>)
 80092f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <std.isra.0+0x40>)
 80092f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092fa:	4b05      	ldr	r3, [pc, #20]	; (8009310 <std.isra.0+0x44>)
 80092fc:	6224      	str	r4, [r4, #32]
 80092fe:	6323      	str	r3, [r4, #48]	; 0x30
 8009300:	bd10      	pop	{r4, pc}
 8009302:	bf00      	nop
 8009304:	080098e9 	.word	0x080098e9
 8009308:	0800990b 	.word	0x0800990b
 800930c:	08009943 	.word	0x08009943
 8009310:	08009967 	.word	0x08009967

08009314 <__sfmoreglue>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	2368      	movs	r3, #104	; 0x68
 8009318:	1e4d      	subs	r5, r1, #1
 800931a:	435d      	muls	r5, r3
 800931c:	460e      	mov	r6, r1
 800931e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009322:	f7ff f9e3 	bl	80086ec <_malloc_r>
 8009326:	4604      	mov	r4, r0
 8009328:	b140      	cbz	r0, 800933c <__sfmoreglue+0x28>
 800932a:	2100      	movs	r1, #0
 800932c:	e880 0042 	stmia.w	r0, {r1, r6}
 8009330:	300c      	adds	r0, #12
 8009332:	60a0      	str	r0, [r4, #8]
 8009334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009338:	f7ff f982 	bl	8008640 <memset>
 800933c:	4620      	mov	r0, r4
 800933e:	bd70      	pop	{r4, r5, r6, pc}

08009340 <__sinit>:
 8009340:	6983      	ldr	r3, [r0, #24]
 8009342:	b510      	push	{r4, lr}
 8009344:	4604      	mov	r4, r0
 8009346:	bb33      	cbnz	r3, 8009396 <__sinit+0x56>
 8009348:	6483      	str	r3, [r0, #72]	; 0x48
 800934a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800934c:	6503      	str	r3, [r0, #80]	; 0x50
 800934e:	4b12      	ldr	r3, [pc, #72]	; (8009398 <__sinit+0x58>)
 8009350:	4a12      	ldr	r2, [pc, #72]	; (800939c <__sinit+0x5c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6282      	str	r2, [r0, #40]	; 0x28
 8009356:	4298      	cmp	r0, r3
 8009358:	bf04      	itt	eq
 800935a:	2301      	moveq	r3, #1
 800935c:	6183      	streq	r3, [r0, #24]
 800935e:	f000 f81f 	bl	80093a0 <__sfp>
 8009362:	6060      	str	r0, [r4, #4]
 8009364:	4620      	mov	r0, r4
 8009366:	f000 f81b 	bl	80093a0 <__sfp>
 800936a:	60a0      	str	r0, [r4, #8]
 800936c:	4620      	mov	r0, r4
 800936e:	f000 f817 	bl	80093a0 <__sfp>
 8009372:	2200      	movs	r2, #0
 8009374:	60e0      	str	r0, [r4, #12]
 8009376:	2104      	movs	r1, #4
 8009378:	6860      	ldr	r0, [r4, #4]
 800937a:	f7ff ffa7 	bl	80092cc <std.isra.0>
 800937e:	2201      	movs	r2, #1
 8009380:	2109      	movs	r1, #9
 8009382:	68a0      	ldr	r0, [r4, #8]
 8009384:	f7ff ffa2 	bl	80092cc <std.isra.0>
 8009388:	2202      	movs	r2, #2
 800938a:	2112      	movs	r1, #18
 800938c:	68e0      	ldr	r0, [r4, #12]
 800938e:	f7ff ff9d 	bl	80092cc <std.isra.0>
 8009392:	2301      	movs	r3, #1
 8009394:	61a3      	str	r3, [r4, #24]
 8009396:	bd10      	pop	{r4, pc}
 8009398:	08010fe0 	.word	0x08010fe0
 800939c:	080092c1 	.word	0x080092c1

080093a0 <__sfp>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <__sfp+0x74>)
 80093a4:	681e      	ldr	r6, [r3, #0]
 80093a6:	69b3      	ldr	r3, [r6, #24]
 80093a8:	4607      	mov	r7, r0
 80093aa:	b913      	cbnz	r3, 80093b2 <__sfp+0x12>
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff ffc7 	bl	8009340 <__sinit>
 80093b2:	3648      	adds	r6, #72	; 0x48
 80093b4:	68b4      	ldr	r4, [r6, #8]
 80093b6:	6873      	ldr	r3, [r6, #4]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	d404      	bmi.n	80093c6 <__sfp+0x26>
 80093bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093c0:	b17d      	cbz	r5, 80093e2 <__sfp+0x42>
 80093c2:	3468      	adds	r4, #104	; 0x68
 80093c4:	e7f8      	b.n	80093b8 <__sfp+0x18>
 80093c6:	6833      	ldr	r3, [r6, #0]
 80093c8:	b10b      	cbz	r3, 80093ce <__sfp+0x2e>
 80093ca:	6836      	ldr	r6, [r6, #0]
 80093cc:	e7f2      	b.n	80093b4 <__sfp+0x14>
 80093ce:	2104      	movs	r1, #4
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7ff ff9f 	bl	8009314 <__sfmoreglue>
 80093d6:	6030      	str	r0, [r6, #0]
 80093d8:	2800      	cmp	r0, #0
 80093da:	d1f6      	bne.n	80093ca <__sfp+0x2a>
 80093dc:	230c      	movs	r3, #12
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093e6:	81e3      	strh	r3, [r4, #14]
 80093e8:	2301      	movs	r3, #1
 80093ea:	81a3      	strh	r3, [r4, #12]
 80093ec:	6665      	str	r5, [r4, #100]	; 0x64
 80093ee:	6025      	str	r5, [r4, #0]
 80093f0:	60a5      	str	r5, [r4, #8]
 80093f2:	6065      	str	r5, [r4, #4]
 80093f4:	6125      	str	r5, [r4, #16]
 80093f6:	6165      	str	r5, [r4, #20]
 80093f8:	61a5      	str	r5, [r4, #24]
 80093fa:	2208      	movs	r2, #8
 80093fc:	4629      	mov	r1, r5
 80093fe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009402:	f7ff f91d 	bl	8008640 <memset>
 8009406:	6365      	str	r5, [r4, #52]	; 0x34
 8009408:	63a5      	str	r5, [r4, #56]	; 0x38
 800940a:	64a5      	str	r5, [r4, #72]	; 0x48
 800940c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800940e:	4620      	mov	r0, r4
 8009410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009412:	bf00      	nop
 8009414:	08010fe0 	.word	0x08010fe0

08009418 <_fwalk_reent>:
 8009418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800941c:	4680      	mov	r8, r0
 800941e:	4689      	mov	r9, r1
 8009420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009424:	2600      	movs	r6, #0
 8009426:	b194      	cbz	r4, 800944e <_fwalk_reent+0x36>
 8009428:	68a5      	ldr	r5, [r4, #8]
 800942a:	6867      	ldr	r7, [r4, #4]
 800942c:	3f01      	subs	r7, #1
 800942e:	d40c      	bmi.n	800944a <_fwalk_reent+0x32>
 8009430:	89ab      	ldrh	r3, [r5, #12]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d907      	bls.n	8009446 <_fwalk_reent+0x2e>
 8009436:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800943a:	3301      	adds	r3, #1
 800943c:	d003      	beq.n	8009446 <_fwalk_reent+0x2e>
 800943e:	4629      	mov	r1, r5
 8009440:	4640      	mov	r0, r8
 8009442:	47c8      	blx	r9
 8009444:	4306      	orrs	r6, r0
 8009446:	3568      	adds	r5, #104	; 0x68
 8009448:	e7f0      	b.n	800942c <_fwalk_reent+0x14>
 800944a:	6824      	ldr	r4, [r4, #0]
 800944c:	e7eb      	b.n	8009426 <_fwalk_reent+0xe>
 800944e:	4630      	mov	r0, r6
 8009450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009454 <__locale_ctype_ptr_l>:
 8009454:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009458:	4770      	bx	lr

0800945a <__swhatbuf_r>:
 800945a:	b570      	push	{r4, r5, r6, lr}
 800945c:	460e      	mov	r6, r1
 800945e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009462:	2900      	cmp	r1, #0
 8009464:	b090      	sub	sp, #64	; 0x40
 8009466:	4614      	mov	r4, r2
 8009468:	461d      	mov	r5, r3
 800946a:	da06      	bge.n	800947a <__swhatbuf_r+0x20>
 800946c:	2300      	movs	r3, #0
 800946e:	602b      	str	r3, [r5, #0]
 8009470:	89b3      	ldrh	r3, [r6, #12]
 8009472:	061a      	lsls	r2, r3, #24
 8009474:	d50e      	bpl.n	8009494 <__swhatbuf_r+0x3a>
 8009476:	2340      	movs	r3, #64	; 0x40
 8009478:	e00e      	b.n	8009498 <__swhatbuf_r+0x3e>
 800947a:	aa01      	add	r2, sp, #4
 800947c:	f000 faa6 	bl	80099cc <_fstat_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	dbf3      	blt.n	800946c <__swhatbuf_r+0x12>
 8009484:	9a02      	ldr	r2, [sp, #8]
 8009486:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800948a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800948e:	425a      	negs	r2, r3
 8009490:	415a      	adcs	r2, r3
 8009492:	602a      	str	r2, [r5, #0]
 8009494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009498:	2000      	movs	r0, #0
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	b010      	add	sp, #64	; 0x40
 800949e:	bd70      	pop	{r4, r5, r6, pc}

080094a0 <__smakebuf_r>:
 80094a0:	898b      	ldrh	r3, [r1, #12]
 80094a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094a4:	079e      	lsls	r6, r3, #30
 80094a6:	4605      	mov	r5, r0
 80094a8:	460c      	mov	r4, r1
 80094aa:	d410      	bmi.n	80094ce <__smakebuf_r+0x2e>
 80094ac:	ab01      	add	r3, sp, #4
 80094ae:	466a      	mov	r2, sp
 80094b0:	f7ff ffd3 	bl	800945a <__swhatbuf_r>
 80094b4:	9900      	ldr	r1, [sp, #0]
 80094b6:	4606      	mov	r6, r0
 80094b8:	4628      	mov	r0, r5
 80094ba:	f7ff f917 	bl	80086ec <_malloc_r>
 80094be:	b968      	cbnz	r0, 80094dc <__smakebuf_r+0x3c>
 80094c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c4:	059a      	lsls	r2, r3, #22
 80094c6:	d422      	bmi.n	800950e <__smakebuf_r+0x6e>
 80094c8:	f043 0302 	orr.w	r3, r3, #2
 80094cc:	81a3      	strh	r3, [r4, #12]
 80094ce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094d2:	6023      	str	r3, [r4, #0]
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	2301      	movs	r3, #1
 80094d8:	6163      	str	r3, [r4, #20]
 80094da:	e018      	b.n	800950e <__smakebuf_r+0x6e>
 80094dc:	4b0d      	ldr	r3, [pc, #52]	; (8009514 <__smakebuf_r+0x74>)
 80094de:	62ab      	str	r3, [r5, #40]	; 0x28
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	6020      	str	r0, [r4, #0]
 80094e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094e8:	81a3      	strh	r3, [r4, #12]
 80094ea:	9b00      	ldr	r3, [sp, #0]
 80094ec:	6163      	str	r3, [r4, #20]
 80094ee:	9b01      	ldr	r3, [sp, #4]
 80094f0:	6120      	str	r0, [r4, #16]
 80094f2:	b14b      	cbz	r3, 8009508 <__smakebuf_r+0x68>
 80094f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094f8:	4628      	mov	r0, r5
 80094fa:	f000 fa79 	bl	80099f0 <_isatty_r>
 80094fe:	b118      	cbz	r0, 8009508 <__smakebuf_r+0x68>
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	f043 0301 	orr.w	r3, r3, #1
 8009506:	81a3      	strh	r3, [r4, #12]
 8009508:	89a0      	ldrh	r0, [r4, #12]
 800950a:	4330      	orrs	r0, r6
 800950c:	81a0      	strh	r0, [r4, #12]
 800950e:	b002      	add	sp, #8
 8009510:	bd70      	pop	{r4, r5, r6, pc}
 8009512:	bf00      	nop
 8009514:	080092c1 	.word	0x080092c1

08009518 <__ascii_mbtowc>:
 8009518:	b082      	sub	sp, #8
 800951a:	b901      	cbnz	r1, 800951e <__ascii_mbtowc+0x6>
 800951c:	a901      	add	r1, sp, #4
 800951e:	b13a      	cbz	r2, 8009530 <__ascii_mbtowc+0x18>
 8009520:	b143      	cbz	r3, 8009534 <__ascii_mbtowc+0x1c>
 8009522:	7813      	ldrb	r3, [r2, #0]
 8009524:	600b      	str	r3, [r1, #0]
 8009526:	7812      	ldrb	r2, [r2, #0]
 8009528:	1c10      	adds	r0, r2, #0
 800952a:	bf18      	it	ne
 800952c:	2001      	movne	r0, #1
 800952e:	e003      	b.n	8009538 <__ascii_mbtowc+0x20>
 8009530:	4610      	mov	r0, r2
 8009532:	e001      	b.n	8009538 <__ascii_mbtowc+0x20>
 8009534:	f06f 0001 	mvn.w	r0, #1
 8009538:	b002      	add	sp, #8
 800953a:	4770      	bx	lr

0800953c <memmove>:
 800953c:	4288      	cmp	r0, r1
 800953e:	b510      	push	{r4, lr}
 8009540:	eb01 0302 	add.w	r3, r1, r2
 8009544:	d801      	bhi.n	800954a <memmove+0xe>
 8009546:	1e42      	subs	r2, r0, #1
 8009548:	e00b      	b.n	8009562 <memmove+0x26>
 800954a:	4298      	cmp	r0, r3
 800954c:	d2fb      	bcs.n	8009546 <memmove+0xa>
 800954e:	1881      	adds	r1, r0, r2
 8009550:	1ad2      	subs	r2, r2, r3
 8009552:	42d3      	cmn	r3, r2
 8009554:	d004      	beq.n	8009560 <memmove+0x24>
 8009556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800955a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800955e:	e7f8      	b.n	8009552 <memmove+0x16>
 8009560:	bd10      	pop	{r4, pc}
 8009562:	4299      	cmp	r1, r3
 8009564:	d004      	beq.n	8009570 <memmove+0x34>
 8009566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800956a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800956e:	e7f8      	b.n	8009562 <memmove+0x26>
 8009570:	bd10      	pop	{r4, pc}

08009572 <__malloc_lock>:
 8009572:	4770      	bx	lr

08009574 <__malloc_unlock>:
 8009574:	4770      	bx	lr

08009576 <_realloc_r>:
 8009576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009578:	4607      	mov	r7, r0
 800957a:	4615      	mov	r5, r2
 800957c:	460e      	mov	r6, r1
 800957e:	b921      	cbnz	r1, 800958a <_realloc_r+0x14>
 8009580:	4611      	mov	r1, r2
 8009582:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009586:	f7ff b8b1 	b.w	80086ec <_malloc_r>
 800958a:	b91a      	cbnz	r2, 8009594 <_realloc_r+0x1e>
 800958c:	f7ff f860 	bl	8008650 <_free_r>
 8009590:	4628      	mov	r0, r5
 8009592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009594:	f000 fa4e 	bl	8009a34 <_malloc_usable_size_r>
 8009598:	4285      	cmp	r5, r0
 800959a:	d90e      	bls.n	80095ba <_realloc_r+0x44>
 800959c:	4629      	mov	r1, r5
 800959e:	4638      	mov	r0, r7
 80095a0:	f7ff f8a4 	bl	80086ec <_malloc_r>
 80095a4:	4604      	mov	r4, r0
 80095a6:	b150      	cbz	r0, 80095be <_realloc_r+0x48>
 80095a8:	4631      	mov	r1, r6
 80095aa:	462a      	mov	r2, r5
 80095ac:	f7ff f83d 	bl	800862a <memcpy>
 80095b0:	4631      	mov	r1, r6
 80095b2:	4638      	mov	r0, r7
 80095b4:	f7ff f84c 	bl	8008650 <_free_r>
 80095b8:	e001      	b.n	80095be <_realloc_r+0x48>
 80095ba:	4630      	mov	r0, r6
 80095bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095be:	4620      	mov	r0, r4
 80095c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095c2 <__ssputs_r>:
 80095c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c6:	688e      	ldr	r6, [r1, #8]
 80095c8:	429e      	cmp	r6, r3
 80095ca:	4682      	mov	sl, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	4691      	mov	r9, r2
 80095d0:	4698      	mov	r8, r3
 80095d2:	d83e      	bhi.n	8009652 <__ssputs_r+0x90>
 80095d4:	898a      	ldrh	r2, [r1, #12]
 80095d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095da:	d03a      	beq.n	8009652 <__ssputs_r+0x90>
 80095dc:	6825      	ldr	r5, [r4, #0]
 80095de:	6909      	ldr	r1, [r1, #16]
 80095e0:	1a6f      	subs	r7, r5, r1
 80095e2:	6965      	ldr	r5, [r4, #20]
 80095e4:	2302      	movs	r3, #2
 80095e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095ea:	fb95 f5f3 	sdiv	r5, r5, r3
 80095ee:	1c7b      	adds	r3, r7, #1
 80095f0:	4443      	add	r3, r8
 80095f2:	429d      	cmp	r5, r3
 80095f4:	bf38      	it	cc
 80095f6:	461d      	movcc	r5, r3
 80095f8:	0553      	lsls	r3, r2, #21
 80095fa:	d50f      	bpl.n	800961c <__ssputs_r+0x5a>
 80095fc:	4629      	mov	r1, r5
 80095fe:	f7ff f875 	bl	80086ec <_malloc_r>
 8009602:	4606      	mov	r6, r0
 8009604:	b198      	cbz	r0, 800962e <__ssputs_r+0x6c>
 8009606:	463a      	mov	r2, r7
 8009608:	6921      	ldr	r1, [r4, #16]
 800960a:	f7ff f80e 	bl	800862a <memcpy>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	e013      	b.n	8009644 <__ssputs_r+0x82>
 800961c:	462a      	mov	r2, r5
 800961e:	f7ff ffaa 	bl	8009576 <_realloc_r>
 8009622:	4606      	mov	r6, r0
 8009624:	b970      	cbnz	r0, 8009644 <__ssputs_r+0x82>
 8009626:	6921      	ldr	r1, [r4, #16]
 8009628:	4650      	mov	r0, sl
 800962a:	f7ff f811 	bl	8008650 <_free_r>
 800962e:	230c      	movs	r3, #12
 8009630:	f8ca 3000 	str.w	r3, [sl]
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009644:	6126      	str	r6, [r4, #16]
 8009646:	6165      	str	r5, [r4, #20]
 8009648:	443e      	add	r6, r7
 800964a:	1bed      	subs	r5, r5, r7
 800964c:	6026      	str	r6, [r4, #0]
 800964e:	60a5      	str	r5, [r4, #8]
 8009650:	4646      	mov	r6, r8
 8009652:	4546      	cmp	r6, r8
 8009654:	bf28      	it	cs
 8009656:	4646      	movcs	r6, r8
 8009658:	4632      	mov	r2, r6
 800965a:	4649      	mov	r1, r9
 800965c:	6820      	ldr	r0, [r4, #0]
 800965e:	f7ff ff6d 	bl	800953c <memmove>
 8009662:	68a3      	ldr	r3, [r4, #8]
 8009664:	1b9b      	subs	r3, r3, r6
 8009666:	60a3      	str	r3, [r4, #8]
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	441e      	add	r6, r3
 800966c:	6026      	str	r6, [r4, #0]
 800966e:	2000      	movs	r0, #0
 8009670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009674 <_svfiprintf_r>:
 8009674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	b09d      	sub	sp, #116	; 0x74
 800967a:	4680      	mov	r8, r0
 800967c:	9303      	str	r3, [sp, #12]
 800967e:	898b      	ldrh	r3, [r1, #12]
 8009680:	061c      	lsls	r4, r3, #24
 8009682:	460d      	mov	r5, r1
 8009684:	4616      	mov	r6, r2
 8009686:	d50d      	bpl.n	80096a4 <_svfiprintf_r+0x30>
 8009688:	690b      	ldr	r3, [r1, #16]
 800968a:	b95b      	cbnz	r3, 80096a4 <_svfiprintf_r+0x30>
 800968c:	2140      	movs	r1, #64	; 0x40
 800968e:	f7ff f82d 	bl	80086ec <_malloc_r>
 8009692:	6028      	str	r0, [r5, #0]
 8009694:	6128      	str	r0, [r5, #16]
 8009696:	b918      	cbnz	r0, 80096a0 <_svfiprintf_r+0x2c>
 8009698:	230c      	movs	r3, #12
 800969a:	f8c8 3000 	str.w	r3, [r8]
 800969e:	e0cd      	b.n	800983c <_svfiprintf_r+0x1c8>
 80096a0:	2340      	movs	r3, #64	; 0x40
 80096a2:	616b      	str	r3, [r5, #20]
 80096a4:	2300      	movs	r3, #0
 80096a6:	9309      	str	r3, [sp, #36]	; 0x24
 80096a8:	2320      	movs	r3, #32
 80096aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096ae:	f8df b19c 	ldr.w	fp, [pc, #412]	; 800984c <_svfiprintf_r+0x1d8>
 80096b2:	2330      	movs	r3, #48	; 0x30
 80096b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096b8:	4637      	mov	r7, r6
 80096ba:	463c      	mov	r4, r7
 80096bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096c0:	b91b      	cbnz	r3, 80096ca <_svfiprintf_r+0x56>
 80096c2:	ebb7 0906 	subs.w	r9, r7, r6
 80096c6:	d010      	beq.n	80096ea <_svfiprintf_r+0x76>
 80096c8:	e003      	b.n	80096d2 <_svfiprintf_r+0x5e>
 80096ca:	2b25      	cmp	r3, #37	; 0x25
 80096cc:	d0f9      	beq.n	80096c2 <_svfiprintf_r+0x4e>
 80096ce:	4627      	mov	r7, r4
 80096d0:	e7f3      	b.n	80096ba <_svfiprintf_r+0x46>
 80096d2:	464b      	mov	r3, r9
 80096d4:	4632      	mov	r2, r6
 80096d6:	4629      	mov	r1, r5
 80096d8:	4640      	mov	r0, r8
 80096da:	f7ff ff72 	bl	80095c2 <__ssputs_r>
 80096de:	3001      	adds	r0, #1
 80096e0:	f000 80a7 	beq.w	8009832 <_svfiprintf_r+0x1be>
 80096e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e6:	444b      	add	r3, r9
 80096e8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ea:	783b      	ldrb	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80a0 	beq.w	8009832 <_svfiprintf_r+0x1be>
 80096f2:	2300      	movs	r3, #0
 80096f4:	f04f 32ff 	mov.w	r2, #4294967295
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	9307      	str	r3, [sp, #28]
 80096fc:	9205      	str	r2, [sp, #20]
 80096fe:	9306      	str	r3, [sp, #24]
 8009700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009704:	931a      	str	r3, [sp, #104]	; 0x68
 8009706:	2601      	movs	r6, #1
 8009708:	2205      	movs	r2, #5
 800970a:	7821      	ldrb	r1, [r4, #0]
 800970c:	484e      	ldr	r0, [pc, #312]	; (8009848 <_svfiprintf_r+0x1d4>)
 800970e:	f7f6 fd7f 	bl	8000210 <memchr>
 8009712:	1c67      	adds	r7, r4, #1
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	b138      	cbz	r0, 8009728 <_svfiprintf_r+0xb4>
 8009718:	4a4b      	ldr	r2, [pc, #300]	; (8009848 <_svfiprintf_r+0x1d4>)
 800971a:	1a80      	subs	r0, r0, r2
 800971c:	fa06 f000 	lsl.w	r0, r6, r0
 8009720:	4318      	orrs	r0, r3
 8009722:	9004      	str	r0, [sp, #16]
 8009724:	463c      	mov	r4, r7
 8009726:	e7ef      	b.n	8009708 <_svfiprintf_r+0x94>
 8009728:	06d9      	lsls	r1, r3, #27
 800972a:	bf44      	itt	mi
 800972c:	2220      	movmi	r2, #32
 800972e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009732:	071a      	lsls	r2, r3, #28
 8009734:	bf44      	itt	mi
 8009736:	222b      	movmi	r2, #43	; 0x2b
 8009738:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800973c:	7822      	ldrb	r2, [r4, #0]
 800973e:	2a2a      	cmp	r2, #42	; 0x2a
 8009740:	d003      	beq.n	800974a <_svfiprintf_r+0xd6>
 8009742:	9a07      	ldr	r2, [sp, #28]
 8009744:	2100      	movs	r1, #0
 8009746:	200a      	movs	r0, #10
 8009748:	e00b      	b.n	8009762 <_svfiprintf_r+0xee>
 800974a:	9a03      	ldr	r2, [sp, #12]
 800974c:	1d11      	adds	r1, r2, #4
 800974e:	6812      	ldr	r2, [r2, #0]
 8009750:	9103      	str	r1, [sp, #12]
 8009752:	2a00      	cmp	r2, #0
 8009754:	da10      	bge.n	8009778 <_svfiprintf_r+0x104>
 8009756:	4252      	negs	r2, r2
 8009758:	f043 0002 	orr.w	r0, r3, #2
 800975c:	9207      	str	r2, [sp, #28]
 800975e:	9004      	str	r0, [sp, #16]
 8009760:	e00b      	b.n	800977a <_svfiprintf_r+0x106>
 8009762:	4627      	mov	r7, r4
 8009764:	3401      	adds	r4, #1
 8009766:	783b      	ldrb	r3, [r7, #0]
 8009768:	3b30      	subs	r3, #48	; 0x30
 800976a:	2b09      	cmp	r3, #9
 800976c:	d803      	bhi.n	8009776 <_svfiprintf_r+0x102>
 800976e:	fb00 3202 	mla	r2, r0, r2, r3
 8009772:	2101      	movs	r1, #1
 8009774:	e7f5      	b.n	8009762 <_svfiprintf_r+0xee>
 8009776:	b101      	cbz	r1, 800977a <_svfiprintf_r+0x106>
 8009778:	9207      	str	r2, [sp, #28]
 800977a:	783b      	ldrb	r3, [r7, #0]
 800977c:	2b2e      	cmp	r3, #46	; 0x2e
 800977e:	d11e      	bne.n	80097be <_svfiprintf_r+0x14a>
 8009780:	787b      	ldrb	r3, [r7, #1]
 8009782:	2b2a      	cmp	r3, #42	; 0x2a
 8009784:	d10a      	bne.n	800979c <_svfiprintf_r+0x128>
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	1d1a      	adds	r2, r3, #4
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	9203      	str	r2, [sp, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	bfb8      	it	lt
 8009792:	f04f 33ff 	movlt.w	r3, #4294967295
 8009796:	3702      	adds	r7, #2
 8009798:	9305      	str	r3, [sp, #20]
 800979a:	e010      	b.n	80097be <_svfiprintf_r+0x14a>
 800979c:	2300      	movs	r3, #0
 800979e:	9305      	str	r3, [sp, #20]
 80097a0:	1c78      	adds	r0, r7, #1
 80097a2:	4619      	mov	r1, r3
 80097a4:	240a      	movs	r4, #10
 80097a6:	4607      	mov	r7, r0
 80097a8:	3001      	adds	r0, #1
 80097aa:	783a      	ldrb	r2, [r7, #0]
 80097ac:	3a30      	subs	r2, #48	; 0x30
 80097ae:	2a09      	cmp	r2, #9
 80097b0:	d803      	bhi.n	80097ba <_svfiprintf_r+0x146>
 80097b2:	fb04 2101 	mla	r1, r4, r1, r2
 80097b6:	2301      	movs	r3, #1
 80097b8:	e7f5      	b.n	80097a6 <_svfiprintf_r+0x132>
 80097ba:	b103      	cbz	r3, 80097be <_svfiprintf_r+0x14a>
 80097bc:	9105      	str	r1, [sp, #20]
 80097be:	2203      	movs	r2, #3
 80097c0:	7839      	ldrb	r1, [r7, #0]
 80097c2:	4822      	ldr	r0, [pc, #136]	; (800984c <_svfiprintf_r+0x1d8>)
 80097c4:	f7f6 fd24 	bl	8000210 <memchr>
 80097c8:	b140      	cbz	r0, 80097dc <_svfiprintf_r+0x168>
 80097ca:	2340      	movs	r3, #64	; 0x40
 80097cc:	ebcb 0000 	rsb	r0, fp, r0
 80097d0:	fa03 f000 	lsl.w	r0, r3, r0
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	4318      	orrs	r0, r3
 80097d8:	9004      	str	r0, [sp, #16]
 80097da:	3701      	adds	r7, #1
 80097dc:	7839      	ldrb	r1, [r7, #0]
 80097de:	481c      	ldr	r0, [pc, #112]	; (8009850 <_svfiprintf_r+0x1dc>)
 80097e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097e4:	2206      	movs	r2, #6
 80097e6:	1c7e      	adds	r6, r7, #1
 80097e8:	f7f6 fd12 	bl	8000210 <memchr>
 80097ec:	b188      	cbz	r0, 8009812 <_svfiprintf_r+0x19e>
 80097ee:	4b19      	ldr	r3, [pc, #100]	; (8009854 <_svfiprintf_r+0x1e0>)
 80097f0:	b933      	cbnz	r3, 8009800 <_svfiprintf_r+0x18c>
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	3307      	adds	r3, #7
 80097f6:	f023 0307 	bic.w	r3, r3, #7
 80097fa:	3308      	adds	r3, #8
 80097fc:	9303      	str	r3, [sp, #12]
 80097fe:	e014      	b.n	800982a <_svfiprintf_r+0x1b6>
 8009800:	ab03      	add	r3, sp, #12
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	462a      	mov	r2, r5
 8009806:	4b14      	ldr	r3, [pc, #80]	; (8009858 <_svfiprintf_r+0x1e4>)
 8009808:	a904      	add	r1, sp, #16
 800980a:	4640      	mov	r0, r8
 800980c:	f3af 8000 	nop.w
 8009810:	e007      	b.n	8009822 <_svfiprintf_r+0x1ae>
 8009812:	ab03      	add	r3, sp, #12
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	462a      	mov	r2, r5
 8009818:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <_svfiprintf_r+0x1e4>)
 800981a:	a904      	add	r1, sp, #16
 800981c:	4640      	mov	r0, r8
 800981e:	f7ff f97f 	bl	8008b20 <_printf_i>
 8009822:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009826:	4682      	mov	sl, r0
 8009828:	d003      	beq.n	8009832 <_svfiprintf_r+0x1be>
 800982a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982c:	4453      	add	r3, sl
 800982e:	9309      	str	r3, [sp, #36]	; 0x24
 8009830:	e742      	b.n	80096b8 <_svfiprintf_r+0x44>
 8009832:	89ab      	ldrh	r3, [r5, #12]
 8009834:	065b      	lsls	r3, r3, #25
 8009836:	d401      	bmi.n	800983c <_svfiprintf_r+0x1c8>
 8009838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800983a:	e001      	b.n	8009840 <_svfiprintf_r+0x1cc>
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	b01d      	add	sp, #116	; 0x74
 8009842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009846:	bf00      	nop
 8009848:	08010fe4 	.word	0x08010fe4
 800984c:	08010fea 	.word	0x08010fea
 8009850:	08010fee 	.word	0x08010fee
 8009854:	00000000 	.word	0x00000000
 8009858:	080095c3 	.word	0x080095c3

0800985c <_raise_r>:
 800985c:	291f      	cmp	r1, #31
 800985e:	b538      	push	{r3, r4, r5, lr}
 8009860:	4604      	mov	r4, r0
 8009862:	460d      	mov	r5, r1
 8009864:	d904      	bls.n	8009870 <_raise_r+0x14>
 8009866:	2316      	movs	r3, #22
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	f04f 30ff 	mov.w	r0, #4294967295
 800986e:	bd38      	pop	{r3, r4, r5, pc}
 8009870:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009872:	b112      	cbz	r2, 800987a <_raise_r+0x1e>
 8009874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009878:	b94b      	cbnz	r3, 800988e <_raise_r+0x32>
 800987a:	4620      	mov	r0, r4
 800987c:	f000 f832 	bl	80098e4 <_getpid_r>
 8009880:	462a      	mov	r2, r5
 8009882:	4601      	mov	r1, r0
 8009884:	4620      	mov	r0, r4
 8009886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800988a:	f000 b819 	b.w	80098c0 <_kill_r>
 800988e:	2b01      	cmp	r3, #1
 8009890:	d00c      	beq.n	80098ac <_raise_r+0x50>
 8009892:	1c59      	adds	r1, r3, #1
 8009894:	d103      	bne.n	800989e <_raise_r+0x42>
 8009896:	2316      	movs	r3, #22
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	2001      	movs	r0, #1
 800989c:	bd38      	pop	{r3, r4, r5, pc}
 800989e:	2400      	movs	r4, #0
 80098a0:	4628      	mov	r0, r5
 80098a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098a6:	4798      	blx	r3
 80098a8:	4620      	mov	r0, r4
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	2000      	movs	r0, #0
 80098ae:	bd38      	pop	{r3, r4, r5, pc}

080098b0 <raise>:
 80098b0:	4b02      	ldr	r3, [pc, #8]	; (80098bc <raise+0xc>)
 80098b2:	4601      	mov	r1, r0
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	f7ff bfd1 	b.w	800985c <_raise_r>
 80098ba:	bf00      	nop
 80098bc:	20000240 	.word	0x20000240

080098c0 <_kill_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4c07      	ldr	r4, [pc, #28]	; (80098e0 <_kill_r+0x20>)
 80098c4:	2300      	movs	r3, #0
 80098c6:	4605      	mov	r5, r0
 80098c8:	4608      	mov	r0, r1
 80098ca:	4611      	mov	r1, r2
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	f000 f8ed 	bl	8009aac <_kill>
 80098d2:	1c43      	adds	r3, r0, #1
 80098d4:	d102      	bne.n	80098dc <_kill_r+0x1c>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	b103      	cbz	r3, 80098dc <_kill_r+0x1c>
 80098da:	602b      	str	r3, [r5, #0]
 80098dc:	bd38      	pop	{r3, r4, r5, pc}
 80098de:	bf00      	nop
 80098e0:	200066d0 	.word	0x200066d0

080098e4 <_getpid_r>:
 80098e4:	f000 b8d2 	b.w	8009a8c <_getpid>

080098e8 <__sread>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	460c      	mov	r4, r1
 80098ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f0:	f000 f8aa 	bl	8009a48 <_read_r>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	bfab      	itete	ge
 80098f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098fa:	89a3      	ldrhlt	r3, [r4, #12]
 80098fc:	181b      	addge	r3, r3, r0
 80098fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009902:	bfac      	ite	ge
 8009904:	6563      	strge	r3, [r4, #84]	; 0x54
 8009906:	81a3      	strhlt	r3, [r4, #12]
 8009908:	bd10      	pop	{r4, pc}

0800990a <__swrite>:
 800990a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990e:	461f      	mov	r7, r3
 8009910:	898b      	ldrh	r3, [r1, #12]
 8009912:	05db      	lsls	r3, r3, #23
 8009914:	4605      	mov	r5, r0
 8009916:	460c      	mov	r4, r1
 8009918:	4616      	mov	r6, r2
 800991a:	d505      	bpl.n	8009928 <__swrite+0x1e>
 800991c:	2302      	movs	r3, #2
 800991e:	2200      	movs	r2, #0
 8009920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009924:	f000 f874 	bl	8009a10 <_lseek_r>
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800992e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009932:	81a3      	strh	r3, [r4, #12]
 8009934:	4632      	mov	r2, r6
 8009936:	463b      	mov	r3, r7
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993e:	f000 b823 	b.w	8009988 <_write_r>

08009942 <__sseek>:
 8009942:	b510      	push	{r4, lr}
 8009944:	460c      	mov	r4, r1
 8009946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994a:	f000 f861 	bl	8009a10 <_lseek_r>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	bf15      	itete	ne
 8009954:	6560      	strne	r0, [r4, #84]	; 0x54
 8009956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800995a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800995e:	81a3      	strheq	r3, [r4, #12]
 8009960:	bf18      	it	ne
 8009962:	81a3      	strhne	r3, [r4, #12]
 8009964:	bd10      	pop	{r4, pc}

08009966 <__sclose>:
 8009966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996a:	f000 b81f 	b.w	80099ac <_close_r>

0800996e <__ascii_wctomb>:
 800996e:	b149      	cbz	r1, 8009984 <__ascii_wctomb+0x16>
 8009970:	2aff      	cmp	r2, #255	; 0xff
 8009972:	bf85      	ittet	hi
 8009974:	238a      	movhi	r3, #138	; 0x8a
 8009976:	6003      	strhi	r3, [r0, #0]
 8009978:	700a      	strbls	r2, [r1, #0]
 800997a:	f04f 30ff 	movhi.w	r0, #4294967295
 800997e:	bf98      	it	ls
 8009980:	2001      	movls	r0, #1
 8009982:	4770      	bx	lr
 8009984:	4608      	mov	r0, r1
 8009986:	4770      	bx	lr

08009988 <_write_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4c07      	ldr	r4, [pc, #28]	; (80099a8 <_write_r+0x20>)
 800998c:	4605      	mov	r5, r0
 800998e:	4608      	mov	r0, r1
 8009990:	4611      	mov	r1, r2
 8009992:	2200      	movs	r2, #0
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	f000 f8ae 	bl	8009af8 <_write>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_write_r+0x1e>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_write_r+0x1e>
 80099a4:	602b      	str	r3, [r5, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	200066d0 	.word	0x200066d0

080099ac <_close_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4c06      	ldr	r4, [pc, #24]	; (80099c8 <_close_r+0x1c>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	4605      	mov	r5, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	f000 f858 	bl	8009a6c <_close>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_close_r+0x1a>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_close_r+0x1a>
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	200066d0 	.word	0x200066d0

080099cc <_fstat_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4c07      	ldr	r4, [pc, #28]	; (80099ec <_fstat_r+0x20>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4605      	mov	r5, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	4611      	mov	r1, r2
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	f000 f84f 	bl	8009a7c <_fstat>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	d102      	bne.n	80099e8 <_fstat_r+0x1c>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	b103      	cbz	r3, 80099e8 <_fstat_r+0x1c>
 80099e6:	602b      	str	r3, [r5, #0]
 80099e8:	bd38      	pop	{r3, r4, r5, pc}
 80099ea:	bf00      	nop
 80099ec:	200066d0 	.word	0x200066d0

080099f0 <_isatty_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4c06      	ldr	r4, [pc, #24]	; (8009a0c <_isatty_r+0x1c>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4605      	mov	r5, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	f000 f84e 	bl	8009a9c <_isatty>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_isatty_r+0x1a>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_isatty_r+0x1a>
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	200066d0 	.word	0x200066d0

08009a10 <_lseek_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4c07      	ldr	r4, [pc, #28]	; (8009a30 <_lseek_r+0x20>)
 8009a14:	4605      	mov	r5, r0
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	6022      	str	r2, [r4, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f000 f84c 	bl	8009abc <_lseek>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_lseek_r+0x1e>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_lseek_r+0x1e>
 8009a2c:	602b      	str	r3, [r5, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	200066d0 	.word	0x200066d0

08009a34 <_malloc_usable_size_r>:
 8009a34:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	bfbe      	ittt	lt
 8009a3c:	1809      	addlt	r1, r1, r0
 8009a3e:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8009a42:	18c0      	addlt	r0, r0, r3
 8009a44:	3804      	subs	r0, #4
 8009a46:	4770      	bx	lr

08009a48 <_read_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4c07      	ldr	r4, [pc, #28]	; (8009a68 <_read_r+0x20>)
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	4608      	mov	r0, r1
 8009a50:	4611      	mov	r1, r2
 8009a52:	2200      	movs	r2, #0
 8009a54:	6022      	str	r2, [r4, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	f000 f838 	bl	8009acc <_read>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	d102      	bne.n	8009a66 <_read_r+0x1e>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	b103      	cbz	r3, 8009a66 <_read_r+0x1e>
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	200066d0 	.word	0x200066d0

08009a6c <_close>:
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <_close+0xc>)
 8009a6e:	2258      	movs	r2, #88	; 0x58
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	f04f 30ff 	mov.w	r0, #4294967295
 8009a76:	4770      	bx	lr
 8009a78:	200066d0 	.word	0x200066d0

08009a7c <_fstat>:
 8009a7c:	4b02      	ldr	r3, [pc, #8]	; (8009a88 <_fstat+0xc>)
 8009a7e:	2258      	movs	r2, #88	; 0x58
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	f04f 30ff 	mov.w	r0, #4294967295
 8009a86:	4770      	bx	lr
 8009a88:	200066d0 	.word	0x200066d0

08009a8c <_getpid>:
 8009a8c:	4b02      	ldr	r3, [pc, #8]	; (8009a98 <_getpid+0xc>)
 8009a8e:	2258      	movs	r2, #88	; 0x58
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	f04f 30ff 	mov.w	r0, #4294967295
 8009a96:	4770      	bx	lr
 8009a98:	200066d0 	.word	0x200066d0

08009a9c <_isatty>:
 8009a9c:	4b02      	ldr	r3, [pc, #8]	; (8009aa8 <_isatty+0xc>)
 8009a9e:	2258      	movs	r2, #88	; 0x58
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	200066d0 	.word	0x200066d0

08009aac <_kill>:
 8009aac:	4b02      	ldr	r3, [pc, #8]	; (8009ab8 <_kill+0xc>)
 8009aae:	2258      	movs	r2, #88	; 0x58
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	4770      	bx	lr
 8009ab8:	200066d0 	.word	0x200066d0

08009abc <_lseek>:
 8009abc:	4b02      	ldr	r3, [pc, #8]	; (8009ac8 <_lseek+0xc>)
 8009abe:	2258      	movs	r2, #88	; 0x58
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac6:	4770      	bx	lr
 8009ac8:	200066d0 	.word	0x200066d0

08009acc <_read>:
 8009acc:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <_read+0xc>)
 8009ace:	2258      	movs	r2, #88	; 0x58
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad6:	4770      	bx	lr
 8009ad8:	200066d0 	.word	0x200066d0

08009adc <_sbrk>:
 8009adc:	4a04      	ldr	r2, [pc, #16]	; (8009af0 <_sbrk+0x14>)
 8009ade:	4905      	ldr	r1, [pc, #20]	; (8009af4 <_sbrk+0x18>)
 8009ae0:	6813      	ldr	r3, [r2, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bf08      	it	eq
 8009ae6:	460b      	moveq	r3, r1
 8009ae8:	4418      	add	r0, r3
 8009aea:	6010      	str	r0, [r2, #0]
 8009aec:	4618      	mov	r0, r3
 8009aee:	4770      	bx	lr
 8009af0:	20005254 	.word	0x20005254
 8009af4:	200066d8 	.word	0x200066d8

08009af8 <_write>:
 8009af8:	4b02      	ldr	r3, [pc, #8]	; (8009b04 <_write+0xc>)
 8009afa:	2258      	movs	r2, #88	; 0x58
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	f04f 30ff 	mov.w	r0, #4294967295
 8009b02:	4770      	bx	lr
 8009b04:	200066d0 	.word	0x200066d0

08009b08 <_exit>:
 8009b08:	e7fe      	b.n	8009b08 <_exit>
 8009b0a:	bf00      	nop

08009b0c <Argus_Cleanup>:
 8009b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b0e:	46c6      	mov	lr, r8
 8009b10:	b500      	push	{lr}
 8009b12:	0005      	movs	r5, r0
 8009b14:	b082      	sub	sp, #8
 8009b16:	000c      	movs	r4, r1
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	db2e      	blt.n	8009b7a <Argus_Cleanup+0x6e>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4a36      	ldr	r2, [pc, #216]	; (8009bf8 <Argus_Cleanup+0xec>)
 8009b20:	588f      	ldr	r7, [r1, r2]
 8009b22:	508b      	str	r3, [r1, r2]
 8009b24:	b672      	cpsid	i
 8009b26:	4e35      	ldr	r6, [pc, #212]	; (8009bfc <Argus_Cleanup+0xf0>)
 8009b28:	6833      	ldr	r3, [r6, #0]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	6033      	str	r3, [r6, #0]
 8009b2e:	790b      	ldrb	r3, [r1, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10f      	bne.n	8009b54 <Argus_Cleanup+0x48>
 8009b34:	6833      	ldr	r3, [r6, #0]
 8009b36:	1e5a      	subs	r2, r3, #1
 8009b38:	6032      	str	r2, [r6, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d000      	beq.n	8009b40 <Argus_Cleanup+0x34>
 8009b3e:	b662      	cpsie	i
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d03f      	beq.n	8009bc6 <Argus_Cleanup+0xba>
 8009b46:	0039      	movs	r1, r7
 8009b48:	0028      	movs	r0, r5
 8009b4a:	4798      	blx	r3
 8009b4c:	b002      	add	sp, #8
 8009b4e:	bc04      	pop	{r2}
 8009b50:	4690      	mov	r8, r2
 8009b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b54:	588b      	ldr	r3, [r1, r2]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d037      	beq.n	8009bca <Argus_Cleanup+0xbe>
 8009b5a:	46e8      	mov	r8, sp
 8009b5c:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
 8009b5e:	4642      	mov	r2, r8
 8009b60:	469c      	mov	ip, r3
 8009b62:	000b      	movs	r3, r1
 8009b64:	3308      	adds	r3, #8
 8009b66:	cb03      	ldmia	r3!, {r0, r1}
 8009b68:	c203      	stmia	r2!, {r0, r1}
 8009b6a:	4663      	mov	r3, ip
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d0e1      	beq.n	8009b34 <Argus_Cleanup+0x28>
 8009b70:	4661      	mov	r1, ip
 8009b72:	4640      	mov	r0, r8
 8009b74:	f000 fa8a 	bl	800a08c <Time_CheckTimeoutMSec>
 8009b78:	e7dc      	b.n	8009b34 <Argus_Cleanup+0x28>
 8009b7a:	0001      	movs	r1, r0
 8009b7c:	4820      	ldr	r0, [pc, #128]	; (8009c00 <Argus_Cleanup+0xf4>)
 8009b7e:	f7fd fa79 	bl	8007074 <print>
 8009b82:	4a1d      	ldr	r2, [pc, #116]	; (8009bf8 <Argus_Cleanup+0xec>)
 8009b84:	58a3      	ldr	r3, [r4, r2]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d016      	beq.n	8009bb8 <Argus_Cleanup+0xac>
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	6019      	str	r1, [r3, #0]
 8009b8e:	50a1      	str	r1, [r4, r2]
 8009b90:	2390      	movs	r3, #144	; 0x90
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	18e0      	adds	r0, r4, r3
 8009b96:	f000 fc75 	bl	800a484 <Argus_Measurement_Abort>
 8009b9a:	1e06      	subs	r6, r0, #0
 8009b9c:	d106      	bne.n	8009bac <Argus_Cleanup+0xa0>
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d010      	beq.n	8009bc6 <Argus_Cleanup+0xba>
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	0028      	movs	r0, r5
 8009ba8:	4798      	blx	r3
 8009baa:	e7cf      	b.n	8009b4c <Argus_Cleanup+0x40>
 8009bac:	0001      	movs	r1, r0
 8009bae:	4815      	ldr	r0, [pc, #84]	; (8009c04 <Argus_Cleanup+0xf8>)
 8009bb0:	f7fd fa60 	bl	8007074 <print>
 8009bb4:	0035      	movs	r5, r6
 8009bb6:	e7f2      	b.n	8009b9e <Argus_Cleanup+0x92>
 8009bb8:	2293      	movs	r2, #147	; 0x93
 8009bba:	00d2      	lsls	r2, r2, #3
 8009bbc:	50a3      	str	r3, [r4, r2]
 8009bbe:	32c9      	adds	r2, #201	; 0xc9
 8009bc0:	32ff      	adds	r2, #255	; 0xff
 8009bc2:	50a3      	str	r3, [r4, r2]
 8009bc4:	e7e4      	b.n	8009b90 <Argus_Cleanup+0x84>
 8009bc6:	0028      	movs	r0, r5
 8009bc8:	e7c0      	b.n	8009b4c <Argus_Cleanup+0x40>
 8009bca:	0008      	movs	r0, r1
 8009bcc:	3014      	adds	r0, #20
 8009bce:	f000 fdfb 	bl	800a7c8 <Argus_Cfg_GetStatus>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d005      	beq.n	8009be2 <Argus_Cleanup+0xd6>
 8009bd6:	2867      	cmp	r0, #103	; 0x67
 8009bd8:	d1ac      	bne.n	8009b34 <Argus_Cleanup+0x28>
 8009bda:	0020      	movs	r0, r4
 8009bdc:	f000 f814 	bl	8009c08 <Argus_Start.part.2>
 8009be0:	e7ae      	b.n	8009b40 <Argus_Cleanup+0x34>
 8009be2:	2390      	movs	r3, #144	; 0x90
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	18e0      	adds	r0, r4, r3
 8009be8:	f000 fc5e 	bl	800a4a8 <Argus_Measurement_GetStatus>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d1f2      	bne.n	8009bd6 <Argus_Cleanup+0xca>
 8009bf0:	6820      	ldr	r0, [r4, #0]
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d0f1      	beq.n	8009bda <Argus_Cleanup+0xce>
 8009bf6:	e7ee      	b.n	8009bd6 <Argus_Cleanup+0xca>
 8009bf8:	00000828 	.word	0x00000828
 8009bfc:	20005258 	.word	0x20005258
 8009c00:	08011184 	.word	0x08011184
 8009c04:	080111b8 	.word	0x080111b8

08009c08 <Argus_Start.part.2>:
 8009c08:	2393      	movs	r3, #147	; 0x93
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	58c2      	ldr	r2, [r0, r3]
 8009c0e:	b570      	push	{r4, r5, r6, lr}
 8009c10:	0004      	movs	r4, r0
 8009c12:	2a00      	cmp	r2, #0
 8009c14:	d03b      	beq.n	8009c8e <Argus_Start.part.2+0x86>
 8009c16:	33c9      	adds	r3, #201	; 0xc9
 8009c18:	33ff      	adds	r3, #255	; 0xff
 8009c1a:	58c2      	ldr	r2, [r0, r3]
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	d036      	beq.n	8009c8e <Argus_Start.part.2+0x86>
 8009c20:	4b1d      	ldr	r3, [pc, #116]	; (8009c98 <Argus_Start.part.2+0x90>)
 8009c22:	58c3      	ldr	r3, [r0, r3]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d020      	beq.n	8009c6a <Argus_Start.part.2+0x62>
 8009c28:	2202      	movs	r2, #2
 8009c2a:	0020      	movs	r0, r4
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	3008      	adds	r0, #8
 8009c32:	7123      	strb	r3, [r4, #4]
 8009c34:	f000 f99c 	bl	8009f70 <Time_GetNow>
 8009c38:	4a18      	ldr	r2, [pc, #96]	; (8009c9c <Argus_Start.part.2+0x94>)
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	1e59      	subs	r1, r3, #1
 8009c3e:	6011      	str	r1, [r2, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d000      	beq.n	8009c46 <Argus_Start.part.2+0x3e>
 8009c44:	b662      	cpsie	i
 8009c46:	0025      	movs	r5, r4
 8009c48:	3514      	adds	r5, #20
 8009c4a:	0028      	movs	r0, r5
 8009c4c:	f000 fdc8 	bl	800a7e0 <Argus_Cfg_GetConfigurationPtr>
 8009c50:	0021      	movs	r1, r4
 8009c52:	6880      	ldr	r0, [r0, #8]
 8009c54:	f7fe fc08 	bl	8008468 <Timer_SetInterval>
 8009c58:	0028      	movs	r0, r5
 8009c5a:	0022      	movs	r2, r4
 8009c5c:	4910      	ldr	r1, [pc, #64]	; (8009ca0 <Argus_Start.part.2+0x98>)
 8009c5e:	f000 fdc1 	bl	800a7e4 <Argus_Cfg_Update>
 8009c62:	1e05      	subs	r5, r0, #0
 8009c64:	db0a      	blt.n	8009c7c <Argus_Start.part.2+0x74>
 8009c66:	0028      	movs	r0, r5
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
 8009c6a:	4a0c      	ldr	r2, [pc, #48]	; (8009c9c <Argus_Start.part.2+0x94>)
 8009c6c:	2568      	movs	r5, #104	; 0x68
 8009c6e:	6813      	ldr	r3, [r2, #0]
 8009c70:	1e59      	subs	r1, r3, #1
 8009c72:	6011      	str	r1, [r2, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0f6      	beq.n	8009c66 <Argus_Start.part.2+0x5e>
 8009c78:	b662      	cpsie	i
 8009c7a:	e7f4      	b.n	8009c66 <Argus_Start.part.2+0x5e>
 8009c7c:	0001      	movs	r1, r0
 8009c7e:	4809      	ldr	r0, [pc, #36]	; (8009ca4 <Argus_Start.part.2+0x9c>)
 8009c80:	f7fd f9f8 	bl	8007074 <print>
 8009c84:	0021      	movs	r1, r4
 8009c86:	0028      	movs	r0, r5
 8009c88:	f7ff ff40 	bl	8009b0c <Argus_Cleanup>
 8009c8c:	e7eb      	b.n	8009c66 <Argus_Start.part.2+0x5e>
 8009c8e:	4a02      	ldr	r2, [pc, #8]	; (8009c98 <Argus_Start.part.2+0x90>)
 8009c90:	18e3      	adds	r3, r4, r3
 8009c92:	50a3      	str	r3, [r4, r2]
 8009c94:	e7c6      	b.n	8009c24 <Argus_Start.part.2+0x1c>
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	00000828 	.word	0x00000828
 8009c9c:	20005258 	.word	0x20005258
 8009ca0:	08009df5 	.word	0x08009df5
 8009ca4:	08011364 	.word	0x08011364

08009ca8 <TimerCallback>:
 8009ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009caa:	6803      	ldr	r3, [r0, #0]
 8009cac:	b083      	sub	sp, #12
 8009cae:	0004      	movs	r4, r0
 8009cb0:	2b67      	cmp	r3, #103	; 0x67
 8009cb2:	d003      	beq.n	8009cbc <TimerCallback+0x14>
 8009cb4:	f7fe fbc2 	bl	800843c <Timer_Stop>
 8009cb8:	b003      	add	sp, #12
 8009cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cbc:	3b66      	subs	r3, #102	; 0x66
 8009cbe:	7103      	strb	r3, [r0, #4]
 8009cc0:	b672      	cpsid	i
 8009cc2:	4d48      	ldr	r5, [pc, #288]	; (8009de4 <TimerCallback+0x13c>)
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	7903      	ldrb	r3, [r0, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <TimerCallback+0x36>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	1e5a      	subs	r2, r3, #1
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0ee      	beq.n	8009cb8 <TimerCallback+0x10>
 8009cda:	b662      	cpsie	i
 8009cdc:	e7ec      	b.n	8009cb8 <TimerCallback+0x10>
 8009cde:	4b42      	ldr	r3, [pc, #264]	; (8009de8 <TimerCallback+0x140>)
 8009ce0:	58c3      	ldr	r3, [r0, r3]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d012      	beq.n	8009d0c <TimerCallback+0x64>
 8009ce6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8009ce8:	4668      	mov	r0, sp
 8009cea:	0023      	movs	r3, r4
 8009cec:	0002      	movs	r2, r0
 8009cee:	3308      	adds	r3, #8
 8009cf0:	cbc0      	ldmia	r3!, {r6, r7}
 8009cf2:	c2c0      	stmia	r2!, {r6, r7}
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	d0eb      	beq.n	8009cd0 <TimerCallback+0x28>
 8009cf8:	f000 f9c8 	bl	800a08c <Time_CheckTimeoutMSec>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	1e5a      	subs	r2, r3, #1
 8009d00:	602a      	str	r2, [r5, #0]
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d157      	bne.n	8009db6 <TimerCallback+0x10e>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e7      	bne.n	8009cda <TimerCallback+0x32>
 8009d0a:	e7d5      	b.n	8009cb8 <TimerCallback+0x10>
 8009d0c:	3014      	adds	r0, #20
 8009d0e:	f000 fd5b 	bl	800a7c8 <Argus_Cfg_GetStatus>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d053      	beq.n	8009dbe <TimerCallback+0x116>
 8009d16:	2867      	cmp	r0, #103	; 0x67
 8009d18:	d15c      	bne.n	8009dd4 <TimerCallback+0x12c>
 8009d1a:	0020      	movs	r0, r4
 8009d1c:	f7ff ff74 	bl	8009c08 <Argus_Start.part.2>
 8009d20:	1d83      	adds	r3, r0, #6
 8009d22:	d1c9      	bne.n	8009cb8 <TimerCallback+0x10>
 8009d24:	6926      	ldr	r6, [r4, #16]
 8009d26:	b672      	cpsid	i
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	602b      	str	r3, [r5, #0]
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	2b67      	cmp	r3, #103	; 0x67
 8009d32:	d029      	beq.n	8009d88 <TimerCallback+0xe0>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	1e5a      	subs	r2, r3, #1
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d000      	beq.n	8009d40 <TimerCallback+0x98>
 8009d3e:	b662      	cpsie	i
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	2500      	movs	r5, #0
 8009d44:	2102      	movs	r1, #2
 8009d46:	6125      	str	r5, [r4, #16]
 8009d48:	4249      	negs	r1, r1
 8009d4a:	4828      	ldr	r0, [pc, #160]	; (8009dec <TimerCallback+0x144>)
 8009d4c:	f7fd f992 	bl	8007074 <print>
 8009d50:	4a25      	ldr	r2, [pc, #148]	; (8009de8 <TimerCallback+0x140>)
 8009d52:	58a3      	ldr	r3, [r4, r2]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d027      	beq.n	8009da8 <TimerCallback+0x100>
 8009d58:	601d      	str	r5, [r3, #0]
 8009d5a:	50a5      	str	r5, [r4, r2]
 8009d5c:	2390      	movs	r3, #144	; 0x90
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	18e0      	adds	r0, r4, r3
 8009d62:	f000 fb8f 	bl	800a484 <Argus_Measurement_Abort>
 8009d66:	1e05      	subs	r5, r0, #0
 8009d68:	d119      	bne.n	8009d9e <TimerCallback+0xf6>
 8009d6a:	2502      	movs	r5, #2
 8009d6c:	426d      	negs	r5, r5
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <TimerCallback+0xd2>
 8009d74:	2100      	movs	r1, #0
 8009d76:	0028      	movs	r0, r5
 8009d78:	4798      	blx	r3
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	d09c      	beq.n	8009cb8 <TimerCallback+0x10>
 8009d7e:	2006      	movs	r0, #6
 8009d80:	2100      	movs	r1, #0
 8009d82:	4240      	negs	r0, r0
 8009d84:	47b0      	blx	r6
 8009d86:	e797      	b.n	8009cb8 <TimerCallback+0x10>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	1e5a      	subs	r2, r3, #1
 8009d90:	602a      	str	r2, [r5, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d000      	beq.n	8009d98 <TimerCallback+0xf0>
 8009d96:	b662      	cpsie	i
 8009d98:	2300      	movs	r3, #0
 8009d9a:	7123      	strb	r3, [r4, #4]
 8009d9c:	e7d1      	b.n	8009d42 <TimerCallback+0x9a>
 8009d9e:	0001      	movs	r1, r0
 8009da0:	4813      	ldr	r0, [pc, #76]	; (8009df0 <TimerCallback+0x148>)
 8009da2:	f7fd f967 	bl	8007074 <print>
 8009da6:	e7e2      	b.n	8009d6e <TimerCallback+0xc6>
 8009da8:	2293      	movs	r2, #147	; 0x93
 8009daa:	00d2      	lsls	r2, r2, #3
 8009dac:	50a3      	str	r3, [r4, r2]
 8009dae:	32c9      	adds	r2, #201	; 0xc9
 8009db0:	32ff      	adds	r2, #255	; 0xff
 8009db2:	50a3      	str	r3, [r4, r2]
 8009db4:	e7d2      	b.n	8009d5c <TimerCallback+0xb4>
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0b4      	beq.n	8009d24 <TimerCallback+0x7c>
 8009dba:	b662      	cpsie	i
 8009dbc:	e7b2      	b.n	8009d24 <TimerCallback+0x7c>
 8009dbe:	2390      	movs	r3, #144	; 0x90
 8009dc0:	00db      	lsls	r3, r3, #3
 8009dc2:	18e0      	adds	r0, r4, r3
 8009dc4:	f000 fb70 	bl	800a4a8 <Argus_Measurement_GetStatus>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1a4      	bne.n	8009d16 <TimerCallback+0x6e>
 8009dcc:	6820      	ldr	r0, [r4, #0]
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d0a3      	beq.n	8009d1a <TimerCallback+0x72>
 8009dd2:	e7a0      	b.n	8009d16 <TimerCallback+0x6e>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	1e5a      	subs	r2, r3, #1
 8009dd8:	602a      	str	r2, [r5, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d0a0      	beq.n	8009d20 <TimerCallback+0x78>
 8009dde:	b662      	cpsie	i
 8009de0:	e79e      	b.n	8009d20 <TimerCallback+0x78>
 8009de2:	46c0      	nop			; (mov r8, r8)
 8009de4:	20005258 	.word	0x20005258
 8009de8:	00000828 	.word	0x00000828
 8009dec:	08011184 	.word	0x08011184
 8009df0:	080111b8 	.word	0x080111b8

08009df4 <OnConfigurationUpdatedCallback>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	0004      	movs	r4, r0
 8009df8:	000d      	movs	r5, r1
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d003      	beq.n	8009e06 <OnConfigurationUpdatedCallback+0x12>
 8009dfe:	2c00      	cmp	r4, #0
 8009e00:	db0c      	blt.n	8009e1c <OnConfigurationUpdatedCallback+0x28>
 8009e02:	0020      	movs	r0, r4
 8009e04:	bd70      	pop	{r4, r5, r6, pc}
 8009e06:	2090      	movs	r0, #144	; 0x90
 8009e08:	4b19      	ldr	r3, [pc, #100]	; (8009e70 <OnConfigurationUpdatedCallback+0x7c>)
 8009e0a:	00c0      	lsls	r0, r0, #3
 8009e0c:	58c9      	ldr	r1, [r1, r3]
 8009e0e:	4a19      	ldr	r2, [pc, #100]	; (8009e74 <OnConfigurationUpdatedCallback+0x80>)
 8009e10:	002b      	movs	r3, r5
 8009e12:	1828      	adds	r0, r5, r0
 8009e14:	f000 fb5a 	bl	800a4cc <Argus_Measurement_Start>
 8009e18:	1e04      	subs	r4, r0, #0
 8009e1a:	daf2      	bge.n	8009e02 <OnConfigurationUpdatedCallback+0xe>
 8009e1c:	0021      	movs	r1, r4
 8009e1e:	4816      	ldr	r0, [pc, #88]	; (8009e78 <OnConfigurationUpdatedCallback+0x84>)
 8009e20:	f7fd f928 	bl	8007074 <print>
 8009e24:	0021      	movs	r1, r4
 8009e26:	4815      	ldr	r0, [pc, #84]	; (8009e7c <OnConfigurationUpdatedCallback+0x88>)
 8009e28:	f7fd f924 	bl	8007074 <print>
 8009e2c:	4a10      	ldr	r2, [pc, #64]	; (8009e70 <OnConfigurationUpdatedCallback+0x7c>)
 8009e2e:	58ab      	ldr	r3, [r5, r2]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d011      	beq.n	8009e58 <OnConfigurationUpdatedCallback+0x64>
 8009e34:	2100      	movs	r1, #0
 8009e36:	6019      	str	r1, [r3, #0]
 8009e38:	50a9      	str	r1, [r5, r2]
 8009e3a:	2390      	movs	r3, #144	; 0x90
 8009e3c:	00db      	lsls	r3, r3, #3
 8009e3e:	18e8      	adds	r0, r5, r3
 8009e40:	f000 fb20 	bl	800a484 <Argus_Measurement_Abort>
 8009e44:	1e06      	subs	r6, r0, #0
 8009e46:	d10e      	bne.n	8009e66 <OnConfigurationUpdatedCallback+0x72>
 8009e48:	0026      	movs	r6, r4
 8009e4a:	692b      	ldr	r3, [r5, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d0d8      	beq.n	8009e02 <OnConfigurationUpdatedCallback+0xe>
 8009e50:	2100      	movs	r1, #0
 8009e52:	0030      	movs	r0, r6
 8009e54:	4798      	blx	r3
 8009e56:	e7d4      	b.n	8009e02 <OnConfigurationUpdatedCallback+0xe>
 8009e58:	2293      	movs	r2, #147	; 0x93
 8009e5a:	00d2      	lsls	r2, r2, #3
 8009e5c:	50ab      	str	r3, [r5, r2]
 8009e5e:	32c9      	adds	r2, #201	; 0xc9
 8009e60:	32ff      	adds	r2, #255	; 0xff
 8009e62:	50ab      	str	r3, [r5, r2]
 8009e64:	e7e9      	b.n	8009e3a <OnConfigurationUpdatedCallback+0x46>
 8009e66:	0001      	movs	r1, r0
 8009e68:	4805      	ldr	r0, [pc, #20]	; (8009e80 <OnConfigurationUpdatedCallback+0x8c>)
 8009e6a:	f7fd f903 	bl	8007074 <print>
 8009e6e:	e7ec      	b.n	8009e4a <OnConfigurationUpdatedCallback+0x56>
 8009e70:	00000828 	.word	0x00000828
 8009e74:	08009b0d 	.word	0x08009b0d
 8009e78:	080113c0 	.word	0x080113c0
 8009e7c:	08011184 	.word	0x08011184
 8009e80:	080111b8 	.word	0x080111b8

08009e84 <Argus_Init>:
 8009e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e86:	46ce      	mov	lr, r9
 8009e88:	4647      	mov	r7, r8
 8009e8a:	0004      	movs	r4, r0
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	4826      	ldr	r0, [pc, #152]	; (8009f28 <Argus_Init+0xa4>)
 8009e90:	4689      	mov	r9, r1
 8009e92:	f7fe facd 	bl	8008430 <Timer_SetCallback>
 8009e96:	4a25      	ldr	r2, [pc, #148]	; (8009f2c <Argus_Init+0xa8>)
 8009e98:	2100      	movs	r1, #0
 8009e9a:	0020      	movs	r0, r4
 8009e9c:	f7fe fbd0 	bl	8008640 <memset>
 8009ea0:	2293      	movs	r2, #147	; 0x93
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	00d2      	lsls	r2, r2, #3
 8009ea6:	50a3      	str	r3, [r4, r2]
 8009ea8:	32c9      	adds	r2, #201	; 0xc9
 8009eaa:	32ff      	adds	r2, #255	; 0xff
 8009eac:	50a3      	str	r3, [r4, r2]
 8009eae:	2390      	movs	r3, #144	; 0x90
 8009eb0:	0026      	movs	r6, r4
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	18e7      	adds	r7, r4, r3
 8009eb6:	3614      	adds	r6, #20
 8009eb8:	0031      	movs	r1, r6
 8009eba:	0038      	movs	r0, r7
 8009ebc:	f000 fada 	bl	800a474 <Argus_Measurement_Init>
 8009ec0:	1e05      	subs	r5, r0, #0
 8009ec2:	db22      	blt.n	8009f0a <Argus_Init+0x86>
 8009ec4:	23af      	movs	r3, #175	; 0xaf
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4698      	mov	r8, r3
 8009eca:	4b19      	ldr	r3, [pc, #100]	; (8009f30 <Argus_Init+0xac>)
 8009ecc:	44a0      	add	r8, r4
 8009ece:	18e0      	adds	r0, r4, r3
 8009ed0:	4641      	mov	r1, r8
 8009ed2:	f000 fb47 	bl	800a564 <Argus_Eval_Init>
 8009ed6:	1e05      	subs	r5, r0, #0
 8009ed8:	db12      	blt.n	8009f00 <Argus_Init+0x7c>
 8009eda:	0031      	movs	r1, r6
 8009edc:	4640      	mov	r0, r8
 8009ede:	f003 fd2f 	bl	800d940 <Argus_Cal_Init>
 8009ee2:	1e05      	subs	r5, r0, #0
 8009ee4:	db16      	blt.n	8009f14 <Argus_Init+0x90>
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	4642      	mov	r2, r8
 8009eea:	0039      	movs	r1, r7
 8009eec:	0030      	movs	r0, r6
 8009eee:	f000 fc2b 	bl	800a748 <Argus_Cfg_Init>
 8009ef2:	1e05      	subs	r5, r0, #0
 8009ef4:	db13      	blt.n	8009f1e <Argus_Init+0x9a>
 8009ef6:	0028      	movs	r0, r5
 8009ef8:	bc0c      	pop	{r2, r3}
 8009efa:	4690      	mov	r8, r2
 8009efc:	4699      	mov	r9, r3
 8009efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f00:	0001      	movs	r1, r0
 8009f02:	480c      	ldr	r0, [pc, #48]	; (8009f34 <Argus_Init+0xb0>)
 8009f04:	f7fd f8b6 	bl	8007074 <print>
 8009f08:	e7f5      	b.n	8009ef6 <Argus_Init+0x72>
 8009f0a:	0001      	movs	r1, r0
 8009f0c:	480a      	ldr	r0, [pc, #40]	; (8009f38 <Argus_Init+0xb4>)
 8009f0e:	f7fd f8b1 	bl	8007074 <print>
 8009f12:	e7f0      	b.n	8009ef6 <Argus_Init+0x72>
 8009f14:	0001      	movs	r1, r0
 8009f16:	4809      	ldr	r0, [pc, #36]	; (8009f3c <Argus_Init+0xb8>)
 8009f18:	f7fd f8ac 	bl	8007074 <print>
 8009f1c:	e7eb      	b.n	8009ef6 <Argus_Init+0x72>
 8009f1e:	0001      	movs	r1, r0
 8009f20:	4807      	ldr	r0, [pc, #28]	; (8009f40 <Argus_Init+0xbc>)
 8009f22:	f7fd f8a7 	bl	8007074 <print>
 8009f26:	e7e6      	b.n	8009ef6 <Argus_Init+0x72>
 8009f28:	08009ca9 	.word	0x08009ca9
 8009f2c:	0000082c 	.word	0x0000082c
 8009f30:	00000494 	.word	0x00000494
 8009f34:	08011260 	.word	0x08011260
 8009f38:	0801120c 	.word	0x0801120c
 8009f3c:	080112b8 	.word	0x080112b8
 8009f40:	0801130c 	.word	0x0801130c

08009f44 <Argus_Malloc>:
 8009f44:	b510      	push	{r4, lr}
 8009f46:	f7fe fb51 	bl	80085ec <malloc>
 8009f4a:	bd10      	pop	{r4, pc}

08009f4c <Argus_CreateHandle>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	; (8009f6c <Argus_CreateHandle+0x20>)
 8009f50:	0028      	movs	r0, r5
 8009f52:	f7ff fff7 	bl	8009f44 <Argus_Malloc>
 8009f56:	002a      	movs	r2, r5
 8009f58:	2100      	movs	r1, #0
 8009f5a:	0004      	movs	r4, r0
 8009f5c:	f7fe fb70 	bl	8008640 <memset>
 8009f60:	2307      	movs	r3, #7
 8009f62:	425b      	negs	r3, r3
 8009f64:	0020      	movs	r0, r4
 8009f66:	6163      	str	r3, [r4, #20]
 8009f68:	bd70      	pop	{r4, r5, r6, pc}
 8009f6a:	46c0      	nop			; (mov r8, r8)
 8009f6c:	0000082c 	.word	0x0000082c

08009f70 <Time_GetNow>:
 8009f70:	b510      	push	{r4, lr}
 8009f72:	1d01      	adds	r1, r0, #4
 8009f74:	f7fe fa46 	bl	8008404 <Timer_GetCounterValue>
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	46c0      	nop			; (mov r8, r8)

08009f7c <Time_DelayUSec>:
 8009f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7e:	46c6      	mov	lr, r8
 8009f80:	0004      	movs	r4, r0
 8009f82:	b500      	push	{lr}
 8009f84:	b086      	sub	sp, #24
 8009f86:	a903      	add	r1, sp, #12
 8009f88:	a802      	add	r0, sp, #8
 8009f8a:	f7fe fa3b 	bl	8008404 <Timer_GetCounterValue>
 8009f8e:	493c      	ldr	r1, [pc, #240]	; (800a080 <Time_DelayUSec+0x104>)
 8009f90:	0020      	movs	r0, r4
 8009f92:	f7f6 f98d 	bl	80002b0 <__aeabi_uidiv>
 8009f96:	493a      	ldr	r1, [pc, #232]	; (800a080 <Time_DelayUSec+0x104>)
 8009f98:	0005      	movs	r5, r0
 8009f9a:	0020      	movs	r0, r4
 8009f9c:	f7f6 f992 	bl	80002c4 <__aeabi_uidivmod>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	000c      	movs	r4, r1
 8009fa4:	4698      	mov	r8, r3
 8009fa6:	2d00      	cmp	r5, #0
 8009fa8:	d13f      	bne.n	800a02a <Time_DelayUSec+0xae>
 8009faa:	2c00      	cmp	r4, #0
 8009fac:	d026      	beq.n	8009ffc <Time_DelayUSec+0x80>
 8009fae:	a905      	add	r1, sp, #20
 8009fb0:	a804      	add	r0, sp, #16
 8009fb2:	f7fe fa27 	bl	8008404 <Timer_GetCounterValue>
 8009fb6:	9903      	ldr	r1, [sp, #12]
 8009fb8:	4a32      	ldr	r2, [pc, #200]	; (800a084 <Time_DelayUSec+0x108>)
 8009fba:	1867      	adds	r7, r4, r1
 8009fbc:	9b02      	ldr	r3, [sp, #8]
 8009fbe:	4297      	cmp	r7, r2
 8009fc0:	d943      	bls.n	800a04a <Time_DelayUSec+0xce>
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	4a30      	ldr	r2, [pc, #192]	; (800a088 <Time_DelayUSec+0x10c>)
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	4694      	mov	ip, r2
 8009fca:	4298      	cmp	r0, r3
 8009fcc:	4192      	sbcs	r2, r2
 8009fce:	4467      	add	r7, ip
 8009fd0:	4252      	negs	r2, r2
 8009fd2:	4283      	cmp	r3, r0
 8009fd4:	d039      	beq.n	800a04a <Time_DelayUSec+0xce>
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	d014      	beq.n	800a004 <Time_DelayUSec+0x88>
 8009fda:	9a04      	ldr	r2, [sp, #16]
 8009fdc:	4694      	mov	ip, r2
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d039      	beq.n	800a056 <Time_DelayUSec+0xda>
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	419b      	sbcs	r3, r3
 8009fe6:	425b      	negs	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d107      	bne.n	8009ffc <Time_DelayUSec+0x80>
 8009fec:	4584      	cmp	ip, r0
 8009fee:	d040      	beq.n	800a072 <Time_DelayUSec+0xf6>
 8009ff0:	4560      	cmp	r0, ip
 8009ff2:	419b      	sbcs	r3, r3
 8009ff4:	425b      	negs	r3, r3
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	4053      	eors	r3, r2
 8009ffa:	d0d4      	beq.n	8009fa6 <Time_DelayUSec+0x2a>
 8009ffc:	b006      	add	sp, #24
 8009ffe:	bc04      	pop	{r2}
 800a000:	4690      	mov	r8, r2
 800a002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a004:	9e04      	ldr	r6, [sp, #16]
 800a006:	46b4      	mov	ip, r6
 800a008:	429e      	cmp	r6, r3
 800a00a:	d02c      	beq.n	800a066 <Time_DelayUSec+0xea>
 800a00c:	42b3      	cmp	r3, r6
 800a00e:	4192      	sbcs	r2, r2
 800a010:	4252      	negs	r2, r2
 800a012:	2a00      	cmp	r2, #0
 800a014:	d0c7      	beq.n	8009fa6 <Time_DelayUSec+0x2a>
 800a016:	4584      	cmp	ip, r0
 800a018:	d1ea      	bne.n	8009ff0 <Time_DelayUSec+0x74>
 800a01a:	9b05      	ldr	r3, [sp, #20]
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	4643      	mov	r3, r8
 800a020:	9a01      	ldr	r2, [sp, #4]
 800a022:	428a      	cmp	r2, r1
 800a024:	415b      	adcs	r3, r3
 800a026:	b2db      	uxtb	r3, r3
 800a028:	e7e5      	b.n	8009ff6 <Time_DelayUSec+0x7a>
 800a02a:	a905      	add	r1, sp, #20
 800a02c:	a804      	add	r0, sp, #16
 800a02e:	f7fe f9e9 	bl	8008404 <Timer_GetCounterValue>
 800a032:	9903      	ldr	r1, [sp, #12]
 800a034:	9802      	ldr	r0, [sp, #8]
 800a036:	4a13      	ldr	r2, [pc, #76]	; (800a084 <Time_DelayUSec+0x108>)
 800a038:	1867      	adds	r7, r4, r1
 800a03a:	182b      	adds	r3, r5, r0
 800a03c:	4297      	cmp	r7, r2
 800a03e:	d8c1      	bhi.n	8009fc4 <Time_DelayUSec+0x48>
 800a040:	4298      	cmp	r0, r3
 800a042:	4192      	sbcs	r2, r2
 800a044:	4252      	negs	r2, r2
 800a046:	4283      	cmp	r3, r0
 800a048:	d1c5      	bne.n	8009fd6 <Time_DelayUSec+0x5a>
 800a04a:	4642      	mov	r2, r8
 800a04c:	428f      	cmp	r7, r1
 800a04e:	4152      	adcs	r2, r2
 800a050:	0018      	movs	r0, r3
 800a052:	b2d2      	uxtb	r2, r2
 800a054:	e7bf      	b.n	8009fd6 <Time_DelayUSec+0x5a>
 800a056:	9b05      	ldr	r3, [sp, #20]
 800a058:	9301      	str	r3, [sp, #4]
 800a05a:	4643      	mov	r3, r8
 800a05c:	9e01      	ldr	r6, [sp, #4]
 800a05e:	42be      	cmp	r6, r7
 800a060:	415b      	adcs	r3, r3
 800a062:	b2db      	uxtb	r3, r3
 800a064:	e7c0      	b.n	8009fe8 <Time_DelayUSec+0x6c>
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	42bb      	cmp	r3, r7
 800a06a:	4152      	adcs	r2, r2
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	b2d2      	uxtb	r2, r2
 800a070:	e7cf      	b.n	800a012 <Time_DelayUSec+0x96>
 800a072:	9a05      	ldr	r2, [sp, #20]
 800a074:	428a      	cmp	r2, r1
 800a076:	415b      	adcs	r3, r3
 800a078:	9201      	str	r2, [sp, #4]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	e7bb      	b.n	8009ff6 <Time_DelayUSec+0x7a>
 800a07e:	46c0      	nop			; (mov r8, r8)
 800a080:	000f4240 	.word	0x000f4240
 800a084:	000f423f 	.word	0x000f423f
 800a088:	fff0bdc0 	.word	0xfff0bdc0

0800a08c <Time_CheckTimeoutMSec>:
 800a08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a08e:	000c      	movs	r4, r1
 800a090:	21fa      	movs	r1, #250	; 0xfa
 800a092:	b083      	sub	sp, #12
 800a094:	0089      	lsls	r1, r1, #2
 800a096:	0006      	movs	r6, r0
 800a098:	0020      	movs	r0, r4
 800a09a:	f7f6 f909 	bl	80002b0 <__aeabi_uidiv>
 800a09e:	21fa      	movs	r1, #250	; 0xfa
 800a0a0:	0007      	movs	r7, r0
 800a0a2:	0089      	lsls	r1, r1, #2
 800a0a4:	0020      	movs	r0, r4
 800a0a6:	f7f6 f90d 	bl	80002c4 <__aeabi_uidivmod>
 800a0aa:	014c      	lsls	r4, r1, #5
 800a0ac:	1a64      	subs	r4, r4, r1
 800a0ae:	00a4      	lsls	r4, r4, #2
 800a0b0:	1864      	adds	r4, r4, r1
 800a0b2:	00e4      	lsls	r4, r4, #3
 800a0b4:	2f00      	cmp	r7, #0
 800a0b6:	d135      	bne.n	800a124 <Time_CheckTimeoutMSec+0x98>
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	2c00      	cmp	r4, #0
 800a0bc:	d020      	beq.n	800a100 <Time_CheckTimeoutMSec+0x74>
 800a0be:	466d      	mov	r5, sp
 800a0c0:	a901      	add	r1, sp, #4
 800a0c2:	0028      	movs	r0, r5
 800a0c4:	f7fe f99e 	bl	8008404 <Timer_GetCounterValue>
 800a0c8:	6837      	ldr	r7, [r6, #0]
 800a0ca:	6876      	ldr	r6, [r6, #4]
 800a0cc:	4b2e      	ldr	r3, [pc, #184]	; (800a188 <Time_CheckTimeoutMSec+0xfc>)
 800a0ce:	19a1      	adds	r1, r4, r6
 800a0d0:	4299      	cmp	r1, r3
 800a0d2:	d83d      	bhi.n	800a150 <Time_CheckTimeoutMSec+0xc4>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	42b1      	cmp	r1, r6
 800a0d8:	415b      	adcs	r3, r3
 800a0da:	003a      	movs	r2, r7
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d010      	beq.n	800a104 <Time_CheckTimeoutMSec+0x78>
 800a0e2:	9b00      	ldr	r3, [sp, #0]
 800a0e4:	429f      	cmp	r7, r3
 800a0e6:	d03e      	beq.n	800a166 <Time_CheckTimeoutMSec+0xda>
 800a0e8:	429f      	cmp	r7, r3
 800a0ea:	4180      	sbcs	r0, r0
 800a0ec:	4240      	negs	r0, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d106      	bne.n	800a100 <Time_CheckTimeoutMSec+0x74>
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d043      	beq.n	800a17e <Time_CheckTimeoutMSec+0xf2>
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	4180      	sbcs	r0, r0
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	4240      	negs	r0, r0
 800a0fe:	4058      	eors	r0, r3
 800a100:	b003      	add	sp, #12
 800a102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a104:	9c00      	ldr	r4, [sp, #0]
 800a106:	42a7      	cmp	r7, r4
 800a108:	d028      	beq.n	800a15c <Time_CheckTimeoutMSec+0xd0>
 800a10a:	42a7      	cmp	r7, r4
 800a10c:	4180      	sbcs	r0, r0
 800a10e:	4240      	negs	r0, r0
 800a110:	2800      	cmp	r0, #0
 800a112:	d0f5      	beq.n	800a100 <Time_CheckTimeoutMSec+0x74>
 800a114:	4294      	cmp	r4, r2
 800a116:	d02c      	beq.n	800a172 <Time_CheckTimeoutMSec+0xe6>
 800a118:	42a2      	cmp	r2, r4
 800a11a:	4180      	sbcs	r0, r0
 800a11c:	4240      	negs	r0, r0
 800a11e:	2301      	movs	r3, #1
 800a120:	4058      	eors	r0, r3
 800a122:	e7ed      	b.n	800a100 <Time_CheckTimeoutMSec+0x74>
 800a124:	466d      	mov	r5, sp
 800a126:	a901      	add	r1, sp, #4
 800a128:	0028      	movs	r0, r5
 800a12a:	f7fe f96b 	bl	8008404 <Timer_GetCounterValue>
 800a12e:	6832      	ldr	r2, [r6, #0]
 800a130:	6876      	ldr	r6, [r6, #4]
 800a132:	4b15      	ldr	r3, [pc, #84]	; (800a188 <Time_CheckTimeoutMSec+0xfc>)
 800a134:	19a1      	adds	r1, r4, r6
 800a136:	18bf      	adds	r7, r7, r2
 800a138:	4299      	cmp	r1, r3
 800a13a:	d903      	bls.n	800a144 <Time_CheckTimeoutMSec+0xb8>
 800a13c:	4b13      	ldr	r3, [pc, #76]	; (800a18c <Time_CheckTimeoutMSec+0x100>)
 800a13e:	3701      	adds	r7, #1
 800a140:	469c      	mov	ip, r3
 800a142:	4461      	add	r1, ip
 800a144:	42ba      	cmp	r2, r7
 800a146:	419b      	sbcs	r3, r3
 800a148:	425b      	negs	r3, r3
 800a14a:	4297      	cmp	r7, r2
 800a14c:	d1c7      	bne.n	800a0de <Time_CheckTimeoutMSec+0x52>
 800a14e:	e7c1      	b.n	800a0d4 <Time_CheckTimeoutMSec+0x48>
 800a150:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <Time_CheckTimeoutMSec+0x100>)
 800a152:	003a      	movs	r2, r7
 800a154:	469c      	mov	ip, r3
 800a156:	3701      	adds	r7, #1
 800a158:	4461      	add	r1, ip
 800a15a:	e7f3      	b.n	800a144 <Time_CheckTimeoutMSec+0xb8>
 800a15c:	6868      	ldr	r0, [r5, #4]
 800a15e:	4288      	cmp	r0, r1
 800a160:	415b      	adcs	r3, r3
 800a162:	b2d8      	uxtb	r0, r3
 800a164:	e7d4      	b.n	800a110 <Time_CheckTimeoutMSec+0x84>
 800a166:	2000      	movs	r0, #0
 800a168:	686c      	ldr	r4, [r5, #4]
 800a16a:	428c      	cmp	r4, r1
 800a16c:	4140      	adcs	r0, r0
 800a16e:	b2c0      	uxtb	r0, r0
 800a170:	e7bd      	b.n	800a0ee <Time_CheckTimeoutMSec+0x62>
 800a172:	2000      	movs	r0, #0
 800a174:	686b      	ldr	r3, [r5, #4]
 800a176:	42b3      	cmp	r3, r6
 800a178:	4140      	adcs	r0, r0
 800a17a:	b2c0      	uxtb	r0, r0
 800a17c:	e7cf      	b.n	800a11e <Time_CheckTimeoutMSec+0x92>
 800a17e:	686b      	ldr	r3, [r5, #4]
 800a180:	42b3      	cmp	r3, r6
 800a182:	4140      	adcs	r0, r0
 800a184:	b2c0      	uxtb	r0, r0
 800a186:	e7ca      	b.n	800a11e <Time_CheckTimeoutMSec+0x92>
 800a188:	000f423f 	.word	0x000f423f
 800a18c:	fff0bdc0 	.word	0xfff0bdc0

0800a190 <MeasurementFinish>:
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	0005      	movs	r5, r0
 800a194:	000c      	movs	r4, r1
 800a196:	2800      	cmp	r0, #0
 800a198:	db0a      	blt.n	800a1b0 <MeasurementFinish+0x20>
 800a19a:	2300      	movs	r3, #0
 800a19c:	68e2      	ldr	r2, [r4, #12]
 800a19e:	6921      	ldr	r1, [r4, #16]
 800a1a0:	60e3      	str	r3, [r4, #12]
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	2a00      	cmp	r2, #0
 800a1a8:	d014      	beq.n	800a1d4 <MeasurementFinish+0x44>
 800a1aa:	0028      	movs	r0, r5
 800a1ac:	4790      	blx	r2
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	0001      	movs	r1, r0
 800a1b2:	480a      	ldr	r0, [pc, #40]	; (800a1dc <MeasurementFinish+0x4c>)
 800a1b4:	f7fc ff5e 	bl	8007074 <print>
 800a1b8:	6860      	ldr	r0, [r4, #4]
 800a1ba:	68a3      	ldr	r3, [r4, #8]
 800a1bc:	30a9      	adds	r0, #169	; 0xa9
 800a1be:	601d      	str	r5, [r3, #0]
 800a1c0:	30ff      	adds	r0, #255	; 0xff
 800a1c2:	f002 fd81 	bl	800ccc8 <Argus_Dev_Abort>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d0e7      	beq.n	800a19a <MeasurementFinish+0xa>
 800a1ca:	0001      	movs	r1, r0
 800a1cc:	4804      	ldr	r0, [pc, #16]	; (800a1e0 <MeasurementFinish+0x50>)
 800a1ce:	f7fc ff51 	bl	8007074 <print>
 800a1d2:	e7e2      	b.n	800a19a <MeasurementFinish+0xa>
 800a1d4:	68a3      	ldr	r3, [r4, #8]
 800a1d6:	0028      	movs	r0, r5
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	e7e8      	b.n	800a1ae <MeasurementFinish+0x1e>
 800a1dc:	08011404 	.word	0x08011404
 800a1e0:	08011444 	.word	0x08011444

0800a1e4 <MeasurementStartPowerSaving>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	0004      	movs	r4, r0
 800a1e8:	000d      	movs	r5, r1
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d003      	beq.n	800a1f6 <MeasurementStartPowerSaving+0x12>
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	db0a      	blt.n	800a208 <MeasurementStartPowerSaving+0x24>
 800a1f2:	0020      	movs	r0, r4
 800a1f4:	bd70      	pop	{r4, r5, r6, pc}
 800a1f6:	6848      	ldr	r0, [r1, #4]
 800a1f8:	000a      	movs	r2, r1
 800a1fa:	30a9      	adds	r0, #169	; 0xa9
 800a1fc:	30ff      	adds	r0, #255	; 0xff
 800a1fe:	4915      	ldr	r1, [pc, #84]	; (800a254 <MeasurementStartPowerSaving+0x70>)
 800a200:	f003 f908 	bl	800d414 <Argus_Dev_StartPowerSaving>
 800a204:	1e04      	subs	r4, r0, #0
 800a206:	daf4      	bge.n	800a1f2 <MeasurementStartPowerSaving+0xe>
 800a208:	0021      	movs	r1, r4
 800a20a:	4813      	ldr	r0, [pc, #76]	; (800a258 <MeasurementStartPowerSaving+0x74>)
 800a20c:	f7fc ff32 	bl	8007074 <print>
 800a210:	0021      	movs	r1, r4
 800a212:	4812      	ldr	r0, [pc, #72]	; (800a25c <MeasurementStartPowerSaving+0x78>)
 800a214:	f7fc ff2e 	bl	8007074 <print>
 800a218:	6868      	ldr	r0, [r5, #4]
 800a21a:	68ab      	ldr	r3, [r5, #8]
 800a21c:	30a9      	adds	r0, #169	; 0xa9
 800a21e:	601c      	str	r4, [r3, #0]
 800a220:	30ff      	adds	r0, #255	; 0xff
 800a222:	f002 fd51 	bl	800ccc8 <Argus_Dev_Abort>
 800a226:	2800      	cmp	r0, #0
 800a228:	d10b      	bne.n	800a242 <MeasurementStartPowerSaving+0x5e>
 800a22a:	2300      	movs	r3, #0
 800a22c:	68ea      	ldr	r2, [r5, #12]
 800a22e:	6929      	ldr	r1, [r5, #16]
 800a230:	60eb      	str	r3, [r5, #12]
 800a232:	612b      	str	r3, [r5, #16]
 800a234:	602b      	str	r3, [r5, #0]
 800a236:	2a00      	cmp	r2, #0
 800a238:	d008      	beq.n	800a24c <MeasurementStartPowerSaving+0x68>
 800a23a:	0020      	movs	r0, r4
 800a23c:	4790      	blx	r2
 800a23e:	0004      	movs	r4, r0
 800a240:	e7d7      	b.n	800a1f2 <MeasurementStartPowerSaving+0xe>
 800a242:	0001      	movs	r1, r0
 800a244:	4806      	ldr	r0, [pc, #24]	; (800a260 <MeasurementStartPowerSaving+0x7c>)
 800a246:	f7fc ff15 	bl	8007074 <print>
 800a24a:	e7ee      	b.n	800a22a <MeasurementStartPowerSaving+0x46>
 800a24c:	68ab      	ldr	r3, [r5, #8]
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	e7cf      	b.n	800a1f2 <MeasurementStartPowerSaving+0xe>
 800a252:	46c0      	nop			; (mov r8, r8)
 800a254:	0800a191 	.word	0x0800a191
 800a258:	080114ec 	.word	0x080114ec
 800a25c:	08011404 	.word	0x08011404
 800a260:	08011444 	.word	0x08011444

0800a264 <MeasurementStartAuxChannels>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	0004      	movs	r4, r0
 800a268:	000d      	movs	r5, r1
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d003      	beq.n	800a276 <MeasurementStartAuxChannels+0x12>
 800a26e:	2c00      	cmp	r4, #0
 800a270:	db0a      	blt.n	800a288 <MeasurementStartAuxChannels+0x24>
 800a272:	0020      	movs	r0, r4
 800a274:	bd70      	pop	{r4, r5, r6, pc}
 800a276:	6848      	ldr	r0, [r1, #4]
 800a278:	000a      	movs	r2, r1
 800a27a:	30a9      	adds	r0, #169	; 0xa9
 800a27c:	30ff      	adds	r0, #255	; 0xff
 800a27e:	4915      	ldr	r1, [pc, #84]	; (800a2d4 <MeasurementStartAuxChannels+0x70>)
 800a280:	f003 f85e 	bl	800d340 <Argus_Dev_StartAuxMeasurement>
 800a284:	1e04      	subs	r4, r0, #0
 800a286:	daf4      	bge.n	800a272 <MeasurementStartAuxChannels+0xe>
 800a288:	0021      	movs	r1, r4
 800a28a:	4813      	ldr	r0, [pc, #76]	; (800a2d8 <MeasurementStartAuxChannels+0x74>)
 800a28c:	f7fc fef2 	bl	8007074 <print>
 800a290:	0021      	movs	r1, r4
 800a292:	4812      	ldr	r0, [pc, #72]	; (800a2dc <MeasurementStartAuxChannels+0x78>)
 800a294:	f7fc feee 	bl	8007074 <print>
 800a298:	6868      	ldr	r0, [r5, #4]
 800a29a:	68ab      	ldr	r3, [r5, #8]
 800a29c:	30a9      	adds	r0, #169	; 0xa9
 800a29e:	601c      	str	r4, [r3, #0]
 800a2a0:	30ff      	adds	r0, #255	; 0xff
 800a2a2:	f002 fd11 	bl	800ccc8 <Argus_Dev_Abort>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d10b      	bne.n	800a2c2 <MeasurementStartAuxChannels+0x5e>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	68ea      	ldr	r2, [r5, #12]
 800a2ae:	6929      	ldr	r1, [r5, #16]
 800a2b0:	60eb      	str	r3, [r5, #12]
 800a2b2:	612b      	str	r3, [r5, #16]
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	d008      	beq.n	800a2cc <MeasurementStartAuxChannels+0x68>
 800a2ba:	0020      	movs	r0, r4
 800a2bc:	4790      	blx	r2
 800a2be:	0004      	movs	r4, r0
 800a2c0:	e7d7      	b.n	800a272 <MeasurementStartAuxChannels+0xe>
 800a2c2:	0001      	movs	r1, r0
 800a2c4:	4806      	ldr	r0, [pc, #24]	; (800a2e0 <MeasurementStartAuxChannels+0x7c>)
 800a2c6:	f7fc fed5 	bl	8007074 <print>
 800a2ca:	e7ee      	b.n	800a2aa <MeasurementStartAuxChannels+0x46>
 800a2cc:	68ab      	ldr	r3, [r5, #8]
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	e7cf      	b.n	800a272 <MeasurementStartAuxChannels+0xe>
 800a2d2:	46c0      	nop			; (mov r8, r8)
 800a2d4:	0800a3cd 	.word	0x0800a3cd
 800a2d8:	080114bc 	.word	0x080114bc
 800a2dc:	08011404 	.word	0x08011404
 800a2e0:	08011444 	.word	0x08011444

0800a2e4 <MeasurementReadData>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	0004      	movs	r4, r0
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	000d      	movs	r5, r1
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d004      	beq.n	800a2fa <MeasurementReadData+0x16>
 800a2f0:	2c00      	cmp	r4, #0
 800a2f2:	db37      	blt.n	800a364 <MeasurementReadData+0x80>
 800a2f4:	0020      	movs	r0, r4
 800a2f6:	b002      	add	sp, #8
 800a2f8:	bd70      	pop	{r4, r5, r6, pc}
 800a2fa:	6889      	ldr	r1, [r1, #8]
 800a2fc:	4e2c      	ldr	r6, [pc, #176]	; (800a3b0 <MeasurementReadData+0xcc>)
 800a2fe:	68ca      	ldr	r2, [r1, #12]
 800a300:	4c2c      	ldr	r4, [pc, #176]	; (800a3b4 <MeasurementReadData+0xd0>)
 800a302:	0850      	lsrs	r0, r2, #1
 800a304:	4030      	ands	r0, r6
 800a306:	1a12      	subs	r2, r2, r0
 800a308:	0010      	movs	r0, r2
 800a30a:	690b      	ldr	r3, [r1, #16]
 800a30c:	0892      	lsrs	r2, r2, #2
 800a30e:	4022      	ands	r2, r4
 800a310:	4020      	ands	r0, r4
 800a312:	1880      	adds	r0, r0, r2
 800a314:	085a      	lsrs	r2, r3, #1
 800a316:	4032      	ands	r2, r6
 800a318:	1a9b      	subs	r3, r3, r2
 800a31a:	001a      	movs	r2, r3
 800a31c:	089b      	lsrs	r3, r3, #2
 800a31e:	4022      	ands	r2, r4
 800a320:	4023      	ands	r3, r4
 800a322:	18d3      	adds	r3, r2, r3
 800a324:	091a      	lsrs	r2, r3, #4
 800a326:	4e24      	ldr	r6, [pc, #144]	; (800a3b8 <MeasurementReadData+0xd4>)
 800a328:	18d2      	adds	r2, r2, r3
 800a32a:	4032      	ands	r2, r6
 800a32c:	0014      	movs	r4, r2
 800a32e:	0212      	lsls	r2, r2, #8
 800a330:	1912      	adds	r2, r2, r4
 800a332:	0413      	lsls	r3, r2, #16
 800a334:	18d2      	adds	r2, r2, r3
 800a336:	0903      	lsrs	r3, r0, #4
 800a338:	181b      	adds	r3, r3, r0
 800a33a:	401e      	ands	r6, r3
 800a33c:	0233      	lsls	r3, r6, #8
 800a33e:	199b      	adds	r3, r3, r6
 800a340:	0418      	lsls	r0, r3, #16
 800a342:	181b      	adds	r3, r3, r0
 800a344:	0e1b      	lsrs	r3, r3, #24
 800a346:	0e12      	lsrs	r2, r2, #24
 800a348:	18d2      	adds	r2, r2, r3
 800a34a:	2323      	movs	r3, #35	; 0x23
 800a34c:	6868      	ldr	r0, [r5, #4]
 800a34e:	5ccb      	ldrb	r3, [r1, r3]
 800a350:	30a9      	adds	r0, #169	; 0xa9
 800a352:	435a      	muls	r2, r3
 800a354:	3128      	adds	r1, #40	; 0x28
 800a356:	30ff      	adds	r0, #255	; 0xff
 800a358:	9500      	str	r5, [sp, #0]
 800a35a:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <MeasurementReadData+0xd8>)
 800a35c:	f002 fcba 	bl	800ccd4 <Argus_Dev_ReadData>
 800a360:	1e04      	subs	r4, r0, #0
 800a362:	dac7      	bge.n	800a2f4 <MeasurementReadData+0x10>
 800a364:	0021      	movs	r1, r4
 800a366:	4816      	ldr	r0, [pc, #88]	; (800a3c0 <MeasurementReadData+0xdc>)
 800a368:	f7fc fe84 	bl	8007074 <print>
 800a36c:	0021      	movs	r1, r4
 800a36e:	4815      	ldr	r0, [pc, #84]	; (800a3c4 <MeasurementReadData+0xe0>)
 800a370:	f7fc fe80 	bl	8007074 <print>
 800a374:	6868      	ldr	r0, [r5, #4]
 800a376:	68ab      	ldr	r3, [r5, #8]
 800a378:	30a9      	adds	r0, #169	; 0xa9
 800a37a:	601c      	str	r4, [r3, #0]
 800a37c:	30ff      	adds	r0, #255	; 0xff
 800a37e:	f002 fca3 	bl	800ccc8 <Argus_Dev_Abort>
 800a382:	2800      	cmp	r0, #0
 800a384:	d10b      	bne.n	800a39e <MeasurementReadData+0xba>
 800a386:	2300      	movs	r3, #0
 800a388:	68ea      	ldr	r2, [r5, #12]
 800a38a:	6929      	ldr	r1, [r5, #16]
 800a38c:	60eb      	str	r3, [r5, #12]
 800a38e:	612b      	str	r3, [r5, #16]
 800a390:	602b      	str	r3, [r5, #0]
 800a392:	2a00      	cmp	r2, #0
 800a394:	d008      	beq.n	800a3a8 <MeasurementReadData+0xc4>
 800a396:	0020      	movs	r0, r4
 800a398:	4790      	blx	r2
 800a39a:	0004      	movs	r4, r0
 800a39c:	e7aa      	b.n	800a2f4 <MeasurementReadData+0x10>
 800a39e:	0001      	movs	r1, r0
 800a3a0:	4809      	ldr	r0, [pc, #36]	; (800a3c8 <MeasurementReadData+0xe4>)
 800a3a2:	f7fc fe67 	bl	8007074 <print>
 800a3a6:	e7ee      	b.n	800a386 <MeasurementReadData+0xa2>
 800a3a8:	68ab      	ldr	r3, [r5, #8]
 800a3aa:	601a      	str	r2, [r3, #0]
 800a3ac:	e7a2      	b.n	800a2f4 <MeasurementReadData+0x10>
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	55555555 	.word	0x55555555
 800a3b4:	33333333 	.word	0x33333333
 800a3b8:	0f0f0f0f 	.word	0x0f0f0f0f
 800a3bc:	0800a265 	.word	0x0800a265
 800a3c0:	08011484 	.word	0x08011484
 800a3c4:	08011404 	.word	0x08011404
 800a3c8:	08011444 	.word	0x08011444

0800a3cc <MeasurementReadAuxChannels>:
 800a3cc:	b530      	push	{r4, r5, lr}
 800a3ce:	0004      	movs	r4, r0
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	000d      	movs	r5, r1
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d10e      	bne.n	800a3f6 <MeasurementReadAuxChannels+0x2a>
 800a3d8:	6889      	ldr	r1, [r1, #8]
 800a3da:	6868      	ldr	r0, [r5, #4]
 800a3dc:	8a8b      	ldrh	r3, [r1, #20]
 800a3de:	30a9      	adds	r0, #169	; 0xa9
 800a3e0:	30ff      	adds	r0, #255	; 0xff
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00c      	beq.n	800a400 <MeasurementReadAuxChannels+0x34>
 800a3e6:	31b6      	adds	r1, #182	; 0xb6
 800a3e8:	31ff      	adds	r1, #255	; 0xff
 800a3ea:	9500      	str	r5, [sp, #0]
 800a3ec:	4b1b      	ldr	r3, [pc, #108]	; (800a45c <MeasurementReadAuxChannels+0x90>)
 800a3ee:	2205      	movs	r2, #5
 800a3f0:	f002 fc70 	bl	800ccd4 <Argus_Dev_ReadData>
 800a3f4:	0004      	movs	r4, r0
 800a3f6:	2c00      	cmp	r4, #0
 800a3f8:	db25      	blt.n	800a446 <MeasurementReadAuxChannels+0x7a>
 800a3fa:	0020      	movs	r0, r4
 800a3fc:	b003      	add	sp, #12
 800a3fe:	bd30      	pop	{r4, r5, pc}
 800a400:	002a      	movs	r2, r5
 800a402:	4917      	ldr	r1, [pc, #92]	; (800a460 <MeasurementReadAuxChannels+0x94>)
 800a404:	f003 f806 	bl	800d414 <Argus_Dev_StartPowerSaving>
 800a408:	1e04      	subs	r4, r0, #0
 800a40a:	daf6      	bge.n	800a3fa <MeasurementReadAuxChannels+0x2e>
 800a40c:	0001      	movs	r1, r0
 800a40e:	4815      	ldr	r0, [pc, #84]	; (800a464 <MeasurementReadAuxChannels+0x98>)
 800a410:	f7fc fe30 	bl	8007074 <print>
 800a414:	0021      	movs	r1, r4
 800a416:	4814      	ldr	r0, [pc, #80]	; (800a468 <MeasurementReadAuxChannels+0x9c>)
 800a418:	f7fc fe2c 	bl	8007074 <print>
 800a41c:	6868      	ldr	r0, [r5, #4]
 800a41e:	68ab      	ldr	r3, [r5, #8]
 800a420:	30a9      	adds	r0, #169	; 0xa9
 800a422:	601c      	str	r4, [r3, #0]
 800a424:	30ff      	adds	r0, #255	; 0xff
 800a426:	f002 fc4f 	bl	800ccc8 <Argus_Dev_Abort>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d111      	bne.n	800a452 <MeasurementReadAuxChannels+0x86>
 800a42e:	2300      	movs	r3, #0
 800a430:	68ea      	ldr	r2, [r5, #12]
 800a432:	6929      	ldr	r1, [r5, #16]
 800a434:	60eb      	str	r3, [r5, #12]
 800a436:	612b      	str	r3, [r5, #16]
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	2a00      	cmp	r2, #0
 800a43c:	d006      	beq.n	800a44c <MeasurementReadAuxChannels+0x80>
 800a43e:	0020      	movs	r0, r4
 800a440:	4790      	blx	r2
 800a442:	0004      	movs	r4, r0
 800a444:	e7d9      	b.n	800a3fa <MeasurementReadAuxChannels+0x2e>
 800a446:	0021      	movs	r1, r4
 800a448:	4808      	ldr	r0, [pc, #32]	; (800a46c <MeasurementReadAuxChannels+0xa0>)
 800a44a:	e7e1      	b.n	800a410 <MeasurementReadAuxChannels+0x44>
 800a44c:	68ab      	ldr	r3, [r5, #8]
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	e7d3      	b.n	800a3fa <MeasurementReadAuxChannels+0x2e>
 800a452:	0001      	movs	r1, r0
 800a454:	4806      	ldr	r0, [pc, #24]	; (800a470 <MeasurementReadAuxChannels+0xa4>)
 800a456:	f7fc fe0d 	bl	8007074 <print>
 800a45a:	e7e8      	b.n	800a42e <MeasurementReadAuxChannels+0x62>
 800a45c:	0800a1e5 	.word	0x0800a1e5
 800a460:	0800a191 	.word	0x0800a191
 800a464:	080114ec 	.word	0x080114ec
 800a468:	08011404 	.word	0x08011404
 800a46c:	08011484 	.word	0x08011484
 800a470:	08011444 	.word	0x08011444

0800a474 <Argus_Measurement_Init>:
 800a474:	2300      	movs	r3, #0
 800a476:	6041      	str	r1, [r0, #4]
 800a478:	6003      	str	r3, [r0, #0]
 800a47a:	60c3      	str	r3, [r0, #12]
 800a47c:	6103      	str	r3, [r0, #16]
 800a47e:	2000      	movs	r0, #0
 800a480:	4770      	bx	lr
 800a482:	46c0      	nop			; (mov r8, r8)

0800a484 <Argus_Measurement_Abort>:
 800a484:	b510      	push	{r4, lr}
 800a486:	0004      	movs	r4, r0
 800a488:	6800      	ldr	r0, [r0, #0]
 800a48a:	2802      	cmp	r0, #2
 800a48c:	d000      	beq.n	800a490 <Argus_Measurement_Abort+0xc>
 800a48e:	bd10      	pop	{r4, pc}
 800a490:	6860      	ldr	r0, [r4, #4]
 800a492:	30a9      	adds	r0, #169	; 0xa9
 800a494:	30ff      	adds	r0, #255	; 0xff
 800a496:	f002 fc17 	bl	800ccc8 <Argus_Dev_Abort>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1f7      	bne.n	800a48e <Argus_Measurement_Abort+0xa>
 800a49e:	60e0      	str	r0, [r4, #12]
 800a4a0:	6120      	str	r0, [r4, #16]
 800a4a2:	6020      	str	r0, [r4, #0]
 800a4a4:	e7f3      	b.n	800a48e <Argus_Measurement_Abort+0xa>
 800a4a6:	46c0      	nop			; (mov r8, r8)

0800a4a8 <Argus_Measurement_GetStatus>:
 800a4a8:	6803      	ldr	r3, [r0, #0]
 800a4aa:	b510      	push	{r4, lr}
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d107      	bne.n	800a4c0 <Argus_Measurement_GetStatus+0x18>
 800a4b0:	6840      	ldr	r0, [r0, #4]
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d006      	beq.n	800a4c4 <Argus_Measurement_GetStatus+0x1c>
 800a4b6:	30a9      	adds	r0, #169	; 0xa9
 800a4b8:	30ff      	adds	r0, #255	; 0xff
 800a4ba:	f002 fbfb 	bl	800ccb4 <Argus_Dev_GetStatus>
 800a4be:	bd10      	pop	{r4, pc}
 800a4c0:	6800      	ldr	r0, [r0, #0]
 800a4c2:	e7fc      	b.n	800a4be <Argus_Measurement_GetStatus+0x16>
 800a4c4:	2007      	movs	r0, #7
 800a4c6:	4240      	negs	r0, r0
 800a4c8:	e7f9      	b.n	800a4be <Argus_Measurement_GetStatus+0x16>
 800a4ca:	46c0      	nop			; (mov r8, r8)

0800a4cc <Argus_Measurement_Start>:
 800a4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ce:	46c6      	mov	lr, r8
 800a4d0:	0004      	movs	r4, r0
 800a4d2:	b500      	push	{lr}
 800a4d4:	000e      	movs	r6, r1
 800a4d6:	4690      	mov	r8, r2
 800a4d8:	001f      	movs	r7, r3
 800a4da:	b672      	cpsid	i
 800a4dc:	4d1f      	ldr	r5, [pc, #124]	; (800a55c <Argus_Measurement_Start+0x90>)
 800a4de:	682b      	ldr	r3, [r5, #0]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	6803      	ldr	r3, [r0, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d02b      	beq.n	800a542 <Argus_Measurement_Start+0x76>
 800a4ea:	6800      	ldr	r0, [r0, #0]
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d121      	bne.n	800a534 <Argus_Measurement_Start+0x68>
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	6023      	str	r3, [r4, #0]
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	1e5a      	subs	r2, r3, #1
 800a4f8:	602a      	str	r2, [r5, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d000      	beq.n	800a500 <Argus_Measurement_Start+0x34>
 800a4fe:	b662      	cpsie	i
 800a500:	4643      	mov	r3, r8
 800a502:	1d30      	adds	r0, r6, #4
 800a504:	60e3      	str	r3, [r4, #12]
 800a506:	60a6      	str	r6, [r4, #8]
 800a508:	6127      	str	r7, [r4, #16]
 800a50a:	f7ff fd31 	bl	8009f70 <Time_GetNow>
 800a50e:	0031      	movs	r1, r6
 800a510:	6860      	ldr	r0, [r4, #4]
 800a512:	310c      	adds	r1, #12
 800a514:	f000 f9ac 	bl	800a870 <Argus_Cfg_GetFrameConfig>
 800a518:	6860      	ldr	r0, [r4, #4]
 800a51a:	0022      	movs	r2, r4
 800a51c:	30a9      	adds	r0, #169	; 0xa9
 800a51e:	30ff      	adds	r0, #255	; 0xff
 800a520:	490f      	ldr	r1, [pc, #60]	; (800a560 <Argus_Measurement_Start+0x94>)
 800a522:	f002 fbe1 	bl	800cce8 <Argus_Dev_StartIntegration>
 800a526:	2800      	cmp	r0, #0
 800a528:	db13      	blt.n	800a552 <Argus_Measurement_Start+0x86>
 800a52a:	bc04      	pop	{r2}
 800a52c:	4690      	mov	r8, r2
 800a52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a530:	2007      	movs	r0, #7
 800a532:	4240      	negs	r0, r0
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	1e5a      	subs	r2, r3, #1
 800a538:	602a      	str	r2, [r5, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0f5      	beq.n	800a52a <Argus_Measurement_Start+0x5e>
 800a53e:	b662      	cpsie	i
 800a540:	e7f3      	b.n	800a52a <Argus_Measurement_Start+0x5e>
 800a542:	6840      	ldr	r0, [r0, #4]
 800a544:	2800      	cmp	r0, #0
 800a546:	d0f3      	beq.n	800a530 <Argus_Measurement_Start+0x64>
 800a548:	30a9      	adds	r0, #169	; 0xa9
 800a54a:	30ff      	adds	r0, #255	; 0xff
 800a54c:	f002 fbb2 	bl	800ccb4 <Argus_Dev_GetStatus>
 800a550:	e7cc      	b.n	800a4ec <Argus_Measurement_Start+0x20>
 800a552:	2300      	movs	r3, #0
 800a554:	60e3      	str	r3, [r4, #12]
 800a556:	6123      	str	r3, [r4, #16]
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	e7e6      	b.n	800a52a <Argus_Measurement_Start+0x5e>
 800a55c:	2000525c 	.word	0x2000525c
 800a560:	0800a2e5 	.word	0x0800a2e5

0800a564 <Argus_Eval_Init>:
 800a564:	6001      	str	r1, [r0, #0]
 800a566:	2000      	movs	r0, #0
 800a568:	4770      	bx	lr
 800a56a:	46c0      	nop			; (mov r8, r8)

0800a56c <OnInitCfgApplied>:
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d001      	beq.n	800a574 <OnInitCfgApplied+0x8>
 800a570:	6008      	str	r0, [r1, #0]
 800a572:	4770      	bx	lr
 800a574:	2303      	movs	r3, #3
 800a576:	600b      	str	r3, [r1, #0]
 800a578:	e7fb      	b.n	800a572 <OnInitCfgApplied+0x6>
 800a57a:	46c0      	nop			; (mov r8, r8)

0800a57c <OnConfigurationUpdated2>:
 800a57c:	2300      	movs	r3, #0
 800a57e:	b510      	push	{r4, lr}
 800a580:	600b      	str	r3, [r1, #0]
 800a582:	33a1      	adds	r3, #161	; 0xa1
 800a584:	33ff      	adds	r3, #255	; 0xff
 800a586:	58cb      	ldr	r3, [r1, r3]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <OnConfigurationUpdated2+0x18>
 800a58c:	22d2      	movs	r2, #210	; 0xd2
 800a58e:	0052      	lsls	r2, r2, #1
 800a590:	5889      	ldr	r1, [r1, r2]
 800a592:	4798      	blx	r3
 800a594:	bd10      	pop	{r4, pc}
 800a596:	46c0      	nop			; (mov r8, r8)

0800a598 <OnConfigurationUpdated>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d00b      	beq.n	800a5b6 <OnConfigurationUpdated+0x1e>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	600b      	str	r3, [r1, #0]
 800a5a2:	33a1      	adds	r3, #161	; 0xa1
 800a5a4:	33ff      	adds	r3, #255	; 0xff
 800a5a6:	58cb      	ldr	r3, [r1, r3]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d003      	beq.n	800a5b4 <OnConfigurationUpdated+0x1c>
 800a5ac:	22d2      	movs	r2, #210	; 0xd2
 800a5ae:	0052      	lsls	r2, r2, #1
 800a5b0:	5889      	ldr	r1, [r1, r2]
 800a5b2:	4798      	blx	r3
 800a5b4:	bd10      	pop	{r4, pc}
 800a5b6:	0008      	movs	r0, r1
 800a5b8:	30a9      	adds	r0, #169	; 0xa9
 800a5ba:	000a      	movs	r2, r1
 800a5bc:	30ff      	adds	r0, #255	; 0xff
 800a5be:	4902      	ldr	r1, [pc, #8]	; (800a5c8 <OnConfigurationUpdated+0x30>)
 800a5c0:	f002 ff28 	bl	800d414 <Argus_Dev_StartPowerSaving>
 800a5c4:	e7f6      	b.n	800a5b4 <OnConfigurationUpdated+0x1c>
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	0800a57d 	.word	0x0800a57d

0800a5cc <ApplyInitCfg>:
 800a5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ce:	b0e9      	sub	sp, #420	; 0x1a4
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	2208      	movs	r2, #8
 800a5d4:	0005      	movs	r5, r0
 800a5d6:	4668      	mov	r0, sp
 800a5d8:	f7fe f832 	bl	8008640 <memset>
 800a5dc:	a802      	add	r0, sp, #8
 800a5de:	f000 f9c1 	bl	800a964 <Argus_GetDefaultConfiguration>
 800a5e2:	466b      	mov	r3, sp
 800a5e4:	7b19      	ldrb	r1, [r3, #12]
 800a5e6:	1e4b      	subs	r3, r1, #1
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d900      	bls.n	800a5ee <ApplyInitCfg+0x22>
 800a5ec:	e08d      	b.n	800a70a <ApplyInitCfg+0x13e>
 800a5ee:	9904      	ldr	r1, [sp, #16]
 800a5f0:	29f9      	cmp	r1, #249	; 0xf9
 800a5f2:	d800      	bhi.n	800a5f6 <ApplyInitCfg+0x2a>
 800a5f4:	e096      	b.n	800a724 <ApplyInitCfg+0x158>
 800a5f6:	466b      	mov	r3, sp
 800a5f8:	8a9b      	ldrh	r3, [r3, #20]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d100      	bne.n	800a600 <ApplyInitCfg+0x34>
 800a5fe:	e08a      	b.n	800a716 <ApplyInitCfg+0x14a>
 800a600:	a810      	add	r0, sp, #64	; 0x40
 800a602:	f002 fb7b 	bl	800ccfc <Argus_Dev_CheckCfg>
 800a606:	1e04      	subs	r4, r0, #0
 800a608:	db70      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a60a:	a910      	add	r1, sp, #64	; 0x40
 800a60c:	a806      	add	r0, sp, #24
 800a60e:	f000 fbe1 	bl	800add4 <Argus_Cfg_CheckDCACfg>
 800a612:	1e04      	subs	r4, r0, #0
 800a614:	db6a      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a616:	a80d      	add	r0, sp, #52	; 0x34
 800a618:	f002 ffba 	bl	800d590 <Argus_Pba_CheckCfg>
 800a61c:	1e04      	subs	r4, r0, #0
 800a61e:	db65      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a620:	a841      	add	r0, sp, #260	; 0x104
 800a622:	f002 fb6b 	bl	800ccfc <Argus_Dev_CheckCfg>
 800a626:	1e04      	subs	r4, r0, #0
 800a628:	db60      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a62a:	a941      	add	r1, sp, #260	; 0x104
 800a62c:	a837      	add	r0, sp, #220	; 0xdc
 800a62e:	f000 fbd1 	bl	800add4 <Argus_Cfg_CheckDCACfg>
 800a632:	1e04      	subs	r4, r0, #0
 800a634:	db5a      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a636:	a83e      	add	r0, sp, #248	; 0xf8
 800a638:	f002 ffaa 	bl	800d590 <Argus_Pba_CheckCfg>
 800a63c:	1e04      	subs	r4, r0, #0
 800a63e:	db55      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a640:	22cc      	movs	r2, #204	; 0xcc
 800a642:	0028      	movs	r0, r5
 800a644:	a902      	add	r1, sp, #8
 800a646:	0052      	lsls	r2, r2, #1
 800a648:	3008      	adds	r0, #8
 800a64a:	f7fd ffee 	bl	800862a <memcpy>
 800a64e:	7b29      	ldrb	r1, [r5, #12]
 800a650:	1e4b      	subs	r3, r1, #1
 800a652:	2b01      	cmp	r3, #1
 800a654:	d853      	bhi.n	800a6fe <ApplyInitCfg+0x132>
 800a656:	26c4      	movs	r6, #196	; 0xc4
 800a658:	435e      	muls	r6, r3
 800a65a:	002f      	movs	r7, r5
 800a65c:	0031      	movs	r1, r6
 800a65e:	002a      	movs	r2, r5
 800a660:	37a9      	adds	r7, #169	; 0xa9
 800a662:	37ff      	adds	r7, #255	; 0xff
 800a664:	3140      	adds	r1, #64	; 0x40
 800a666:	1869      	adds	r1, r5, r1
 800a668:	320c      	adds	r2, #12
 800a66a:	0038      	movs	r0, r7
 800a66c:	f002 fcb0 	bl	800cfd0 <Argus_Dev_PrepareCfg>
 800a670:	1e04      	subs	r4, r0, #0
 800a672:	db3b      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a674:	0038      	movs	r0, r7
 800a676:	f000 fb3d 	bl	800acf4 <Argus_Cfg_SetLaserSafetyLimit>
 800a67a:	1e04      	subs	r4, r0, #0
 800a67c:	db36      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a67e:	0031      	movs	r1, r6
 800a680:	3118      	adds	r1, #24
 800a682:	1869      	adds	r1, r5, r1
 800a684:	0038      	movs	r0, r7
 800a686:	f000 fe45 	bl	800b314 <Argus_Cfg_PrepareDCACfg>
 800a68a:	1e04      	subs	r4, r0, #0
 800a68c:	db2e      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a68e:	0031      	movs	r1, r6
 800a690:	23a7      	movs	r3, #167	; 0xa7
 800a692:	3134      	adds	r1, #52	; 0x34
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	1869      	adds	r1, r5, r1
 800a698:	18e8      	adds	r0, r5, r3
 800a69a:	f002 ffa3 	bl	800d5e4 <Argus_Pba_PrepareCfg>
 800a69e:	1e04      	subs	r4, r0, #0
 800a6a0:	db24      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a6a2:	23a4      	movs	r3, #164	; 0xa4
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	58e8      	ldr	r0, [r5, r3]
 800a6a8:	f003 fa02 	bl	800dab0 <Argus_Cal_Update>
 800a6ac:	1e04      	subs	r4, r0, #0
 800a6ae:	db1d      	blt.n	800a6ec <ApplyInitCfg+0x120>
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	4668      	mov	r0, sp
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	f7ff fc5b 	bl	8009f70 <Time_GetNow>
 800a6ba:	002a      	movs	r2, r5
 800a6bc:	491c      	ldr	r1, [pc, #112]	; (800a730 <ApplyInitCfg+0x164>)
 800a6be:	0038      	movs	r0, r7
 800a6c0:	f002 fda2 	bl	800d208 <Argus_Dev_UpdateCfg>
 800a6c4:	1e04      	subs	r4, r0, #0
 800a6c6:	da02      	bge.n	800a6ce <ApplyInitCfg+0x102>
 800a6c8:	e010      	b.n	800a6ec <ApplyInitCfg+0x120>
 800a6ca:	2c02      	cmp	r4, #2
 800a6cc:	d111      	bne.n	800a6f2 <ApplyInitCfg+0x126>
 800a6ce:	21fa      	movs	r1, #250	; 0xfa
 800a6d0:	4668      	mov	r0, sp
 800a6d2:	0049      	lsls	r1, r1, #1
 800a6d4:	682c      	ldr	r4, [r5, #0]
 800a6d6:	f7ff fcd9 	bl	800a08c <Time_CheckTimeoutMSec>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d0f5      	beq.n	800a6ca <ApplyInitCfg+0xfe>
 800a6de:	21fa      	movs	r1, #250	; 0xfa
 800a6e0:	4814      	ldr	r0, [pc, #80]	; (800a734 <ApplyInitCfg+0x168>)
 800a6e2:	0049      	lsls	r1, r1, #1
 800a6e4:	2406      	movs	r4, #6
 800a6e6:	f7fc fcc5 	bl	8007074 <print>
 800a6ea:	4264      	negs	r4, r4
 800a6ec:	0020      	movs	r0, r4
 800a6ee:	b069      	add	sp, #420	; 0x1a4
 800a6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f2:	1ee3      	subs	r3, r4, #3
 800a6f4:	1e5a      	subs	r2, r3, #1
 800a6f6:	4193      	sbcs	r3, r2
 800a6f8:	425b      	negs	r3, r3
 800a6fa:	401c      	ands	r4, r3
 800a6fc:	e7f6      	b.n	800a6ec <ApplyInitCfg+0x120>
 800a6fe:	2469      	movs	r4, #105	; 0x69
 800a700:	480d      	ldr	r0, [pc, #52]	; (800a738 <ApplyInitCfg+0x16c>)
 800a702:	f7fc fcb7 	bl	8007074 <print>
 800a706:	4264      	negs	r4, r4
 800a708:	e7f0      	b.n	800a6ec <ApplyInitCfg+0x120>
 800a70a:	2469      	movs	r4, #105	; 0x69
 800a70c:	480b      	ldr	r0, [pc, #44]	; (800a73c <ApplyInitCfg+0x170>)
 800a70e:	f7fc fcb1 	bl	8007074 <print>
 800a712:	4264      	negs	r4, r4
 800a714:	e7ea      	b.n	800a6ec <ApplyInitCfg+0x120>
 800a716:	2466      	movs	r4, #102	; 0x66
 800a718:	2100      	movs	r1, #0
 800a71a:	4809      	ldr	r0, [pc, #36]	; (800a740 <ApplyInitCfg+0x174>)
 800a71c:	f7fc fcaa 	bl	8007074 <print>
 800a720:	4264      	negs	r4, r4
 800a722:	e7e3      	b.n	800a6ec <ApplyInitCfg+0x120>
 800a724:	2466      	movs	r4, #102	; 0x66
 800a726:	4807      	ldr	r0, [pc, #28]	; (800a744 <ApplyInitCfg+0x178>)
 800a728:	f7fc fca4 	bl	8007074 <print>
 800a72c:	4264      	negs	r4, r4
 800a72e:	e7dd      	b.n	800a6ec <ApplyInitCfg+0x120>
 800a730:	0800a56d 	.word	0x0800a56d
 800a734:	0801160c 	.word	0x0801160c
 800a738:	080115c4 	.word	0x080115c4
 800a73c:	08011518 	.word	0x08011518
 800a740:	0801158c 	.word	0x0801158c
 800a744:	08011550 	.word	0x08011550

0800a748 <Argus_Cfg_Init>:
 800a748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74a:	0016      	movs	r6, r2
 800a74c:	22aa      	movs	r2, #170	; 0xaa
 800a74e:	000d      	movs	r5, r1
 800a750:	b085      	sub	sp, #20
 800a752:	0092      	lsls	r2, r2, #2
 800a754:	2100      	movs	r1, #0
 800a756:	0004      	movs	r4, r0
 800a758:	001f      	movs	r7, r3
 800a75a:	f7fd ff71 	bl	8008640 <memset>
 800a75e:	2303      	movs	r3, #3
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	23a9      	movs	r3, #169	; 0xa9
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	50e5      	str	r5, [r4, r3]
 800a768:	0025      	movs	r5, r4
 800a76a:	35a9      	adds	r5, #169	; 0xa9
 800a76c:	35ff      	adds	r5, #255	; 0xff
 800a76e:	003a      	movs	r2, r7
 800a770:	0031      	movs	r1, r6
 800a772:	0028      	movs	r0, r5
 800a774:	f002 f86e 	bl	800c854 <Argus_Dev_Init>
 800a778:	2800      	cmp	r0, #0
 800a77a:	db20      	blt.n	800a7be <Argus_Cfg_Init+0x76>
 800a77c:	23a7      	movs	r3, #167	; 0xa7
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	18e0      	adds	r0, r4, r3
 800a782:	f002 fec7 	bl	800d514 <Argus_Pba_Init>
 800a786:	2800      	cmp	r0, #0
 800a788:	db19      	blt.n	800a7be <Argus_Cfg_Init+0x76>
 800a78a:	0020      	movs	r0, r4
 800a78c:	f7ff ff1e 	bl	800a5cc <ApplyInitCfg>
 800a790:	2800      	cmp	r0, #0
 800a792:	db14      	blt.n	800a7be <Argus_Cfg_Init+0x76>
 800a794:	4669      	mov	r1, sp
 800a796:	0028      	movs	r0, r5
 800a798:	f001 ff34 	bl	800c604 <Argus_Dev_ReadEEPROM>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	db0e      	blt.n	800a7be <Argus_Cfg_Init+0x76>
 800a7a0:	4669      	mov	r1, sp
 800a7a2:	0028      	movs	r0, r5
 800a7a4:	f001 fef2 	bl	800c58c <Argus_Dev_SetEEPROMData>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	db08      	blt.n	800a7be <Argus_Cfg_Init+0x76>
 800a7ac:	4669      	mov	r1, sp
 800a7ae:	0030      	movs	r0, r6
 800a7b0:	f003 fa80 	bl	800dcb4 <Argus_Cal_SetEEPROMData>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	db02      	blt.n	800a7be <Argus_Cfg_Init+0x76>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	6023      	str	r3, [r4, #0]
 800a7bc:	e002      	b.n	800a7c4 <Argus_Cfg_Init+0x7c>
 800a7be:	2307      	movs	r3, #7
 800a7c0:	425b      	negs	r3, r3
 800a7c2:	6023      	str	r3, [r4, #0]
 800a7c4:	b005      	add	sp, #20
 800a7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7c8 <Argus_Cfg_GetStatus>:
 800a7c8:	6803      	ldr	r3, [r0, #0]
 800a7ca:	b510      	push	{r4, lr}
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <Argus_Cfg_GetStatus+0xc>
 800a7d0:	6800      	ldr	r0, [r0, #0]
 800a7d2:	bd10      	pop	{r4, pc}
 800a7d4:	30a9      	adds	r0, #169	; 0xa9
 800a7d6:	30ff      	adds	r0, #255	; 0xff
 800a7d8:	f002 fa6c 	bl	800ccb4 <Argus_Dev_GetStatus>
 800a7dc:	e7f9      	b.n	800a7d2 <Argus_Cfg_GetStatus+0xa>
 800a7de:	46c0      	nop			; (mov r8, r8)

0800a7e0 <Argus_Cfg_GetConfigurationPtr>:
 800a7e0:	3008      	adds	r0, #8
 800a7e2:	4770      	bx	lr

0800a7e4 <Argus_Cfg_Update>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	0005      	movs	r5, r0
 800a7e8:	000f      	movs	r7, r1
 800a7ea:	0016      	movs	r6, r2
 800a7ec:	b672      	cpsid	i
 800a7ee:	4c1e      	ldr	r4, [pc, #120]	; (800a868 <Argus_Cfg_Update+0x84>)
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	6803      	ldr	r3, [r0, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d02f      	beq.n	800a85c <Argus_Cfg_Update+0x78>
 800a7fc:	6800      	ldr	r0, [r0, #0]
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d006      	beq.n	800a810 <Argus_Cfg_Update+0x2c>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	1e5a      	subs	r2, r3, #1
 800a806:	6022      	str	r2, [r4, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d000      	beq.n	800a80e <Argus_Cfg_Update+0x2a>
 800a80c:	b662      	cpsie	i
 800a80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a810:	23a9      	movs	r3, #169	; 0xa9
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	58e8      	ldr	r0, [r5, r3]
 800a816:	f7ff fe47 	bl	800a4a8 <Argus_Measurement_GetStatus>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d1f1      	bne.n	800a802 <Argus_Cfg_Update+0x1e>
 800a81e:	2302      	movs	r3, #2
 800a820:	602b      	str	r3, [r5, #0]
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	1e5a      	subs	r2, r3, #1
 800a826:	6022      	str	r2, [r4, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d000      	beq.n	800a82e <Argus_Cfg_Update+0x4a>
 800a82c:	b662      	cpsie	i
 800a82e:	24d0      	movs	r4, #208	; 0xd0
 800a830:	0064      	lsls	r4, r4, #1
 800a832:	512f      	str	r7, [r5, r4]
 800a834:	0028      	movs	r0, r5
 800a836:	27d2      	movs	r7, #210	; 0xd2
 800a838:	30a9      	adds	r0, #169	; 0xa9
 800a83a:	007f      	lsls	r7, r7, #1
 800a83c:	51ee      	str	r6, [r5, r7]
 800a83e:	002a      	movs	r2, r5
 800a840:	490a      	ldr	r1, [pc, #40]	; (800a86c <Argus_Cfg_Update+0x88>)
 800a842:	30ff      	adds	r0, #255	; 0xff
 800a844:	f002 fce0 	bl	800d208 <Argus_Dev_UpdateCfg>
 800a848:	2800      	cmp	r0, #0
 800a84a:	dae0      	bge.n	800a80e <Argus_Cfg_Update+0x2a>
 800a84c:	2300      	movs	r3, #0
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	592b      	ldr	r3, [r5, r4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0db      	beq.n	800a80e <Argus_Cfg_Update+0x2a>
 800a856:	59e9      	ldr	r1, [r5, r7]
 800a858:	4798      	blx	r3
 800a85a:	e7d8      	b.n	800a80e <Argus_Cfg_Update+0x2a>
 800a85c:	30a9      	adds	r0, #169	; 0xa9
 800a85e:	30ff      	adds	r0, #255	; 0xff
 800a860:	f002 fa28 	bl	800ccb4 <Argus_Dev_GetStatus>
 800a864:	e7cb      	b.n	800a7fe <Argus_Cfg_Update+0x1a>
 800a866:	46c0      	nop			; (mov r8, r8)
 800a868:	20005260 	.word	0x20005260
 800a86c:	0800a599 	.word	0x0800a599

0800a870 <Argus_Cfg_GetFrameConfig>:
 800a870:	b570      	push	{r4, r5, r6, lr}
 800a872:	000c      	movs	r4, r1
 800a874:	4b31      	ldr	r3, [pc, #196]	; (800a93c <Argus_Cfg_GetFrameConfig+0xcc>)
 800a876:	0006      	movs	r6, r0
 800a878:	18c3      	adds	r3, r0, r3
 800a87a:	7819      	ldrb	r1, [r3, #0]
 800a87c:	4b30      	ldr	r3, [pc, #192]	; (800a940 <Argus_Cfg_GetFrameConfig+0xd0>)
 800a87e:	06ca      	lsls	r2, r1, #27
 800a880:	0f12      	lsrs	r2, r2, #28
 800a882:	3201      	adds	r2, #1
 800a884:	75e2      	strb	r2, [r4, #23]
 800a886:	18c3      	adds	r3, r0, r3
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	36a9      	adds	r6, #169	; 0xa9
 800a88c:	021b      	lsls	r3, r3, #8
 800a88e:	430b      	orrs	r3, r1
 800a890:	045b      	lsls	r3, r3, #17
 800a892:	0d9b      	lsrs	r3, r3, #22
 800a894:	3301      	adds	r3, #1
 800a896:	8263      	strh	r3, [r4, #18]
 800a898:	4b2a      	ldr	r3, [pc, #168]	; (800a944 <Argus_Cfg_GetFrameConfig+0xd4>)
 800a89a:	36ff      	adds	r6, #255	; 0xff
 800a89c:	18c3      	adds	r3, r0, r3
 800a89e:	781a      	ldrb	r2, [r3, #0]
 800a8a0:	4b29      	ldr	r3, [pc, #164]	; (800a948 <Argus_Cfg_GetFrameConfig+0xd8>)
 800a8a2:	0412      	lsls	r2, r2, #16
 800a8a4:	18c3      	adds	r3, r0, r3
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	0005      	movs	r5, r0
 800a8aa:	021b      	lsls	r3, r3, #8
 800a8ac:	431a      	orrs	r2, r3
 800a8ae:	4b27      	ldr	r3, [pc, #156]	; (800a94c <Argus_Cfg_GetFrameConfig+0xdc>)
 800a8b0:	18c3      	adds	r3, r0, r3
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	431a      	orrs	r2, r3
 800a8b6:	4b26      	ldr	r3, [pc, #152]	; (800a950 <Argus_Cfg_GetFrameConfig+0xe0>)
 800a8b8:	18c3      	adds	r3, r0, r3
 800a8ba:	7819      	ldrb	r1, [r3, #0]
 800a8bc:	4b25      	ldr	r3, [pc, #148]	; (800a954 <Argus_Cfg_GetFrameConfig+0xe4>)
 800a8be:	0209      	lsls	r1, r1, #8
 800a8c0:	18c3      	adds	r3, r0, r3
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	430b      	orrs	r3, r1
 800a8c6:	0411      	lsls	r1, r2, #16
 800a8c8:	430b      	orrs	r3, r1
 800a8ca:	6023      	str	r3, [r4, #0]
 800a8cc:	4922      	ldr	r1, [pc, #136]	; (800a958 <Argus_Cfg_GetFrameConfig+0xe8>)
 800a8ce:	4b23      	ldr	r3, [pc, #140]	; (800a95c <Argus_Cfg_GetFrameConfig+0xec>)
 800a8d0:	1841      	adds	r1, r0, r1
 800a8d2:	18c3      	adds	r3, r0, r3
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	7809      	ldrb	r1, [r1, #0]
 800a8d8:	041b      	lsls	r3, r3, #16
 800a8da:	0209      	lsls	r1, r1, #8
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	4920      	ldr	r1, [pc, #128]	; (800a960 <Argus_Cfg_GetFrameConfig+0xf0>)
 800a8e0:	0c12      	lsrs	r2, r2, #16
 800a8e2:	1841      	adds	r1, r0, r1
 800a8e4:	7809      	ldrb	r1, [r1, #0]
 800a8e6:	430b      	orrs	r3, r1
 800a8e8:	021b      	lsls	r3, r3, #8
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	2290      	movs	r2, #144	; 0x90
 800a8ee:	6063      	str	r3, [r4, #4]
 800a8f0:	68f3      	ldr	r3, [r6, #12]
 800a8f2:	5c99      	ldrb	r1, [r3, r2]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	2900      	cmp	r1, #0
 800a8f8:	d001      	beq.n	800a8fe <Argus_Cfg_GetFrameConfig+0x8e>
 800a8fa:	3294      	adds	r2, #148	; 0x94
 800a8fc:	5a9a      	ldrh	r2, [r3, r2]
 800a8fe:	8122      	strh	r2, [r4, #8]
 800a900:	79da      	ldrb	r2, [r3, #7]
 800a902:	0030      	movs	r0, r6
 800a904:	7622      	strb	r2, [r4, #24]
 800a906:	2279      	movs	r2, #121	; 0x79
 800a908:	5c9b      	ldrb	r3, [r3, r2]
 800a90a:	7663      	strb	r3, [r4, #25]
 800a90c:	238d      	movs	r3, #141	; 0x8d
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	18eb      	adds	r3, r5, r3
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60e3      	str	r3, [r4, #12]
 800a916:	f000 ff81 	bl	800b81c <Argus_Cfg_GetIntDepth>
 800a91a:	8220      	strh	r0, [r4, #16]
 800a91c:	0030      	movs	r0, r6
 800a91e:	f000 ff81 	bl	800b824 <Argus_Cfg_GetOptPower>
 800a922:	82a0      	strh	r0, [r4, #20]
 800a924:	0030      	movs	r0, r6
 800a926:	f000 ff8b 	bl	800b840 <Argus_Cfg_GetPxGain>
 800a92a:	75a0      	strb	r0, [r4, #22]
 800a92c:	0030      	movs	r0, r6
 800a92e:	f000 ff8d 	bl	800b84c <Argus_Cfg_GetDCAState>
 800a932:	76e0      	strb	r0, [r4, #27]
 800a934:	7b2b      	ldrb	r3, [r5, #12]
 800a936:	76a3      	strb	r3, [r4, #26]
 800a938:	bd70      	pop	{r4, r5, r6, pc}
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	0000021b 	.word	0x0000021b
 800a940:	0000021a 	.word	0x0000021a
 800a944:	00000221 	.word	0x00000221
 800a948:	00000222 	.word	0x00000222
 800a94c:	00000223 	.word	0x00000223
 800a950:	00000225 	.word	0x00000225
 800a954:	00000226 	.word	0x00000226
 800a958:	0000021e 	.word	0x0000021e
 800a95c:	0000021d 	.word	0x0000021d
 800a960:	0000021f 	.word	0x0000021f

0800a964 <Argus_GetDefaultConfiguration>:
 800a964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a966:	46de      	mov	lr, fp
 800a968:	4657      	mov	r7, sl
 800a96a:	464e      	mov	r6, r9
 800a96c:	4645      	mov	r5, r8
 800a96e:	22cc      	movs	r2, #204	; 0xcc
 800a970:	4681      	mov	r9, r0
 800a972:	b5e0      	push	{r5, r6, r7, lr}
 800a974:	0052      	lsls	r2, r2, #1
 800a976:	b083      	sub	sp, #12
 800a978:	2100      	movs	r1, #0
 800a97a:	f7fd fe61 	bl	8008640 <memset>
 800a97e:	464a      	mov	r2, r9
 800a980:	4baa      	ldr	r3, [pc, #680]	; (800ac2c <Argus_GetDefaultConfiguration+0x2c8>)
 800a982:	464d      	mov	r5, r9
 800a984:	6093      	str	r3, [r2, #8]
 800a986:	23fa      	movs	r3, #250	; 0xfa
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	8193      	strh	r3, [r2, #12]
 800a98c:	2301      	movs	r3, #1
 800a98e:	7113      	strb	r3, [r2, #4]
 800a990:	33ac      	adds	r3, #172	; 0xac
 800a992:	444b      	add	r3, r9
 800a994:	469b      	mov	fp, r3
 800a996:	23cc      	movs	r3, #204	; 0xcc
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	444b      	add	r3, r9
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	2304      	movs	r3, #4
 800a9a0:	464c      	mov	r4, r9
 800a9a2:	465f      	mov	r7, fp
 800a9a4:	469a      	mov	sl, r3
 800a9a6:	46cb      	mov	fp, r9
 800a9a8:	3510      	adds	r5, #16
 800a9aa:	3430      	adds	r4, #48	; 0x30
 800a9ac:	0028      	movs	r0, r5
 800a9ae:	2271      	movs	r2, #113	; 0x71
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	3030      	adds	r0, #48	; 0x30
 800a9b4:	f7fd fe44 	bl	8008640 <memset>
 800a9b8:	2320      	movs	r3, #32
 800a9ba:	2600      	movs	r6, #0
 800a9bc:	7623      	strb	r3, [r4, #24]
 800a9be:	0028      	movs	r0, r5
 800a9c0:	2364      	movs	r3, #100	; 0x64
 800a9c2:	75a6      	strb	r6, [r4, #22]
 800a9c4:	75e3      	strb	r3, [r4, #23]
 800a9c6:	7566      	strb	r6, [r4, #21]
 800a9c8:	7526      	strb	r6, [r4, #20]
 800a9ca:	74e6      	strb	r6, [r4, #19]
 800a9cc:	74a6      	strb	r6, [r4, #18]
 800a9ce:	7466      	strb	r6, [r4, #17]
 800a9d0:	2210      	movs	r2, #16
 800a9d2:	21f0      	movs	r1, #240	; 0xf0
 800a9d4:	303a      	adds	r0, #58	; 0x3a
 800a9d6:	f7fd fe33 	bl	8008640 <memset>
 800a9da:	23ff      	movs	r3, #255	; 0xff
 800a9dc:	0028      	movs	r0, r5
 800a9de:	76a3      	strb	r3, [r4, #26]
 800a9e0:	2210      	movs	r2, #16
 800a9e2:	210f      	movs	r1, #15
 800a9e4:	304b      	adds	r0, #75	; 0x4b
 800a9e6:	4699      	mov	r9, r3
 800a9e8:	f7fd fe2a 	bl	8008640 <memset>
 800a9ec:	0028      	movs	r0, r5
 800a9ee:	2210      	movs	r2, #16
 800a9f0:	21f0      	movs	r1, #240	; 0xf0
 800a9f2:	305b      	adds	r0, #91	; 0x5b
 800a9f4:	f7fd fe24 	bl	8008640 <memset>
 800a9f8:	0022      	movs	r2, r4
 800a9fa:	4651      	mov	r1, sl
 800a9fc:	324c      	adds	r2, #76	; 0x4c
 800a9fe:	7051      	strb	r1, [r2, #1]
 800aa00:	7091      	strb	r1, [r2, #2]
 800aa02:	230f      	movs	r3, #15
 800aa04:	21fe      	movs	r1, #254	; 0xfe
 800aa06:	7013      	strb	r3, [r2, #0]
 800aa08:	7111      	strb	r1, [r2, #4]
 800aa0a:	7193      	strb	r3, [r2, #6]
 800aa0c:	39ad      	subs	r1, #173	; 0xad
 800aa0e:	0023      	movs	r3, r4
 800aa10:	7151      	strb	r1, [r2, #5]
 800aa12:	2282      	movs	r2, #130	; 0x82
 800aa14:	3353      	adds	r3, #83	; 0x53
 800aa16:	709a      	strb	r2, [r3, #2]
 800aa18:	3a7c      	subs	r2, #124	; 0x7c
 800aa1a:	711a      	strb	r2, [r3, #4]
 800aa1c:	0022      	movs	r2, r4
 800aa1e:	211e      	movs	r1, #30
 800aa20:	701e      	strb	r6, [r3, #0]
 800aa22:	70de      	strb	r6, [r3, #3]
 800aa24:	3259      	adds	r2, #89	; 0x59
 800aa26:	7813      	ldrb	r3, [r2, #0]
 800aa28:	207f      	movs	r0, #127	; 0x7f
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	438b      	bics	r3, r1
 800aa30:	7013      	strb	r3, [r2, #0]
 800aa32:	0023      	movs	r3, r4
 800aa34:	2259      	movs	r2, #89	; 0x59
 800aa36:	335a      	adds	r3, #90	; 0x5a
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	3a47      	subs	r2, #71	; 0x47
 800aa3c:	709a      	strb	r2, [r3, #2]
 800aa3e:	2287      	movs	r2, #135	; 0x87
 800aa40:	4688      	mov	r8, r1
 800aa42:	7119      	strb	r1, [r3, #4]
 800aa44:	4649      	mov	r1, r9
 800aa46:	715a      	strb	r2, [r3, #5]
 800aa48:	3a7f      	subs	r2, #127	; 0x7f
 800aa4a:	71da      	strb	r2, [r3, #7]
 800aa4c:	3288      	adds	r2, #136	; 0x88
 800aa4e:	721a      	strb	r2, [r3, #8]
 800aa50:	3a6f      	subs	r2, #111	; 0x6f
 800aa52:	725a      	strb	r2, [r3, #9]
 800aa54:	329e      	adds	r2, #158	; 0x9e
 800aa56:	72da      	strb	r2, [r3, #11]
 800aa58:	322b      	adds	r2, #43	; 0x2b
 800aa5a:	7319      	strb	r1, [r3, #12]
 800aa5c:	7358      	strb	r0, [r3, #13]
 800aa5e:	739a      	strb	r2, [r3, #14]
 800aa60:	3310      	adds	r3, #16
 800aa62:	001a      	movs	r2, r3
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	3840      	subs	r0, #64	; 0x40
 800aa68:	4383      	bics	r3, r0
 800aa6a:	7013      	strb	r3, [r2, #0]
 800aa6c:	0023      	movs	r3, r4
 800aa6e:	2203      	movs	r2, #3
 800aa70:	211f      	movs	r1, #31
 800aa72:	336b      	adds	r3, #107	; 0x6b
 800aa74:	380c      	subs	r0, #12
 800aa76:	701e      	strb	r6, [r3, #0]
 800aa78:	7058      	strb	r0, [r3, #1]
 800aa7a:	70da      	strb	r2, [r3, #3]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	0018      	movs	r0, r3
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	400b      	ands	r3, r1
 800aa84:	3901      	subs	r1, #1
 800aa86:	438b      	bics	r3, r1
 800aa88:	2106      	movs	r1, #6
 800aa8a:	468c      	mov	ip, r1
 800aa8c:	4661      	mov	r1, ip
 800aa8e:	430b      	orrs	r3, r1
 800aa90:	7003      	strb	r3, [r0, #0]
 800aa92:	0023      	movs	r3, r4
 800aa94:	4641      	mov	r1, r8
 800aa96:	3371      	adds	r3, #113	; 0x71
 800aa98:	701e      	strb	r6, [r3, #0]
 800aa9a:	705e      	strb	r6, [r3, #1]
 800aa9c:	709e      	strb	r6, [r3, #2]
 800aa9e:	7119      	strb	r1, [r3, #4]
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	7159      	strb	r1, [r3, #5]
 800aaa4:	7199      	strb	r1, [r3, #6]
 800aaa6:	7219      	strb	r1, [r3, #8]
 800aaa8:	7259      	strb	r1, [r3, #9]
 800aaaa:	4651      	mov	r1, sl
 800aaac:	7299      	strb	r1, [r3, #10]
 800aaae:	783b      	ldrb	r3, [r7, #0]
 800aab0:	707e      	strb	r6, [r7, #1]
 800aab2:	4393      	bics	r3, r2
 800aab4:	703b      	strb	r3, [r7, #0]
 800aab6:	2302      	movs	r3, #2
 800aab8:	713b      	strb	r3, [r7, #4]
 800aaba:	234d      	movs	r3, #77	; 0x4d
 800aabc:	70fe      	strb	r6, [r7, #3]
 800aabe:	73e3      	strb	r3, [r4, #15]
 800aac0:	3b45      	subs	r3, #69	; 0x45
 800aac2:	73a3      	strb	r3, [r4, #14]
 800aac4:	7323      	strb	r3, [r4, #12]
 800aac6:	23fd      	movs	r3, #253	; 0xfd
 800aac8:	7363      	strb	r3, [r4, #13]
 800aaca:	4b59      	ldr	r3, [pc, #356]	; (800ac30 <Argus_GetDefaultConfiguration+0x2cc>)
 800aacc:	4957      	ldr	r1, [pc, #348]	; (800ac2c <Argus_GetDefaultConfiguration+0x2c8>)
 800aace:	60a3      	str	r3, [r4, #8]
 800aad0:	1dfb      	adds	r3, r7, #7
 800aad2:	6019      	str	r1, [r3, #0]
 800aad4:	0039      	movs	r1, r7
 800aad6:	3121      	adds	r1, #33	; 0x21
 800aad8:	000b      	movs	r3, r1
 800aada:	4956      	ldr	r1, [pc, #344]	; (800ac34 <Argus_GetDefaultConfiguration+0x2d0>)
 800aadc:	2010      	movs	r0, #16
 800aade:	8019      	strh	r1, [r3, #0]
 800aae0:	0039      	movs	r1, r7
 800aae2:	3123      	adds	r1, #35	; 0x23
 800aae4:	000b      	movs	r3, r1
 800aae6:	21fa      	movs	r1, #250	; 0xfa
 800aae8:	0049      	lsls	r1, r1, #1
 800aaea:	8019      	strh	r1, [r3, #0]
 800aaec:	4641      	mov	r1, r8
 800aaee:	72f9      	strb	r1, [r7, #11]
 800aaf0:	0039      	movs	r1, r7
 800aaf2:	3113      	adds	r1, #19
 800aaf4:	000b      	movs	r3, r1
 800aaf6:	4950      	ldr	r1, [pc, #320]	; (800ac38 <Argus_GetDefaultConfiguration+0x2d4>)
 800aaf8:	733e      	strb	r6, [r7, #12]
 800aafa:	737e      	strb	r6, [r7, #13]
 800aafc:	6019      	str	r1, [r3, #0]
 800aafe:	0039      	movs	r1, r7
 800ab00:	310f      	adds	r1, #15
 800ab02:	000b      	movs	r3, r1
 800ab04:	219a      	movs	r1, #154	; 0x9a
 800ab06:	03c9      	lsls	r1, r1, #15
 800ab08:	6019      	str	r1, [r3, #0]
 800ab0a:	0039      	movs	r1, r7
 800ab0c:	3117      	adds	r1, #23
 800ab0e:	000b      	movs	r3, r1
 800ab10:	21c8      	movs	r1, #200	; 0xc8
 800ab12:	0089      	lsls	r1, r1, #2
 800ab14:	8019      	strh	r1, [r3, #0]
 800ab16:	4689      	mov	r9, r1
 800ab18:	4641      	mov	r1, r8
 800ab1a:	76f9      	strb	r1, [r7, #27]
 800ab1c:	7739      	strb	r1, [r7, #28]
 800ab1e:	0039      	movs	r1, r7
 800ab20:	2307      	movs	r3, #7
 800ab22:	311f      	adds	r1, #31
 800ab24:	777b      	strb	r3, [r7, #29]
 800ab26:	000b      	movs	r3, r1
 800ab28:	2110      	movs	r1, #16
 800ab2a:	8019      	strh	r1, [r3, #0]
 800ab2c:	4641      	mov	r1, r8
 800ab2e:	2310      	movs	r3, #16
 800ab30:	7029      	strb	r1, [r5, #0]
 800ab32:	7069      	strb	r1, [r5, #1]
 800ab34:	70aa      	strb	r2, [r5, #2]
 800ab36:	70eb      	strb	r3, [r5, #3]
 800ab38:	23e1      	movs	r3, #225	; 0xe1
 800ab3a:	019b      	lsls	r3, r3, #6
 800ab3c:	80ab      	strh	r3, [r5, #4]
 800ab3e:	4b3f      	ldr	r3, [pc, #252]	; (800ac3c <Argus_GetDefaultConfiguration+0x2d8>)
 800ab40:	4651      	mov	r1, sl
 800ab42:	812b      	strh	r3, [r5, #8]
 800ab44:	2396      	movs	r3, #150	; 0x96
 800ab46:	015b      	lsls	r3, r3, #5
 800ab48:	80eb      	strh	r3, [r5, #6]
 800ab4a:	2340      	movs	r3, #64	; 0x40
 800ab4c:	81ab      	strh	r3, [r5, #12]
 800ab4e:	33c0      	adds	r3, #192	; 0xc0
 800ab50:	822b      	strh	r3, [r5, #16]
 800ab52:	72ae      	strb	r6, [r5, #10]
 800ab54:	81e9      	strh	r1, [r5, #14]
 800ab56:	3209      	adds	r2, #9
 800ab58:	4939      	ldr	r1, [pc, #228]	; (800ac40 <Argus_GetDefaultConfiguration+0x2dc>)
 800ab5a:	f004 fe3f 	bl	800f7dc <fp_mulu>
 800ab5e:	220c      	movs	r2, #12
 800ab60:	8268      	strh	r0, [r5, #18]
 800ab62:	4937      	ldr	r1, [pc, #220]	; (800ac40 <Argus_GetDefaultConfiguration+0x2dc>)
 800ab64:	2004      	movs	r0, #4
 800ab66:	f004 fe39 	bl	800f7dc <fp_mulu>
 800ab6a:	231a      	movs	r3, #26
 800ab6c:	4641      	mov	r1, r8
 800ab6e:	2221      	movs	r2, #33	; 0x21
 800ab70:	76eb      	strb	r3, [r5, #27]
 800ab72:	3b18      	subs	r3, #24
 800ab74:	82a8      	strh	r0, [r5, #20]
 800ab76:	75ee      	strb	r6, [r5, #23]
 800ab78:	766e      	strb	r6, [r5, #25]
 800ab7a:	75a9      	strb	r1, [r5, #22]
 800ab7c:	7629      	strb	r1, [r5, #24]
 800ab7e:	76a9      	strb	r1, [r5, #26]
 800ab80:	772a      	strb	r2, [r5, #28]
 800ab82:	776b      	strb	r3, [r5, #29]
 800ab84:	6026      	str	r6, [r4, #0]
 800ab86:	464e      	mov	r6, r9
 800ab88:	2033      	movs	r0, #51	; 0x33
 800ab8a:	80e6      	strh	r6, [r4, #6]
 800ab8c:	9e01      	ldr	r6, [sp, #4]
 800ab8e:	35c4      	adds	r5, #196	; 0xc4
 800ab90:	7120      	strb	r0, [r4, #4]
 800ab92:	37c4      	adds	r7, #196	; 0xc4
 800ab94:	34c4      	adds	r4, #196	; 0xc4
 800ab96:	42b5      	cmp	r5, r6
 800ab98:	d000      	beq.n	800ab9c <Argus_GetDefaultConfiguration+0x238>
 800ab9a:	e707      	b.n	800a9ac <Argus_GetDefaultConfiguration+0x48>
 800ab9c:	225a      	movs	r2, #90	; 0x5a
 800ab9e:	465c      	mov	r4, fp
 800aba0:	213f      	movs	r1, #63	; 0x3f
 800aba2:	32ff      	adds	r2, #255	; 0xff
 800aba4:	5ca3      	ldrb	r3, [r4, r2]
 800aba6:	304c      	adds	r0, #76	; 0x4c
 800aba8:	400b      	ands	r3, r1
 800abaa:	2140      	movs	r1, #64	; 0x40
 800abac:	430b      	orrs	r3, r1
 800abae:	54a3      	strb	r3, [r4, r2]
 800abb0:	224a      	movs	r2, #74	; 0x4a
 800abb2:	2308      	movs	r3, #8
 800abb4:	32ff      	adds	r2, #255	; 0xff
 800abb6:	5ca1      	ldrb	r1, [r4, r2]
 800abb8:	425b      	negs	r3, r3
 800abba:	430b      	orrs	r3, r1
 800abbc:	2103      	movs	r1, #3
 800abbe:	54a3      	strb	r3, [r4, r2]
 800abc0:	3219      	adds	r2, #25
 800abc2:	5ca3      	ldrb	r3, [r4, r2]
 800abc4:	4383      	bics	r3, r0
 800abc6:	430b      	orrs	r3, r1
 800abc8:	54a3      	strb	r3, [r4, r2]
 800abca:	2264      	movs	r2, #100	; 0x64
 800abcc:	211f      	movs	r1, #31
 800abce:	32ff      	adds	r2, #255	; 0xff
 800abd0:	5ca3      	ldrb	r3, [r4, r2]
 800abd2:	201f      	movs	r0, #31
 800abd4:	400b      	ands	r3, r1
 800abd6:	2160      	movs	r1, #96	; 0x60
 800abd8:	430b      	orrs	r3, r1
 800abda:	54a3      	strb	r3, [r4, r2]
 800abdc:	2254      	movs	r2, #84	; 0x54
 800abde:	2118      	movs	r1, #24
 800abe0:	32ff      	adds	r2, #255	; 0xff
 800abe2:	5ca3      	ldrb	r3, [r4, r2]
 800abe4:	438b      	bics	r3, r1
 800abe6:	2108      	movs	r1, #8
 800abe8:	430b      	orrs	r3, r1
 800abea:	54a3      	strb	r3, [r4, r2]
 800abec:	3a48      	subs	r2, #72	; 0x48
 800abee:	3aff      	subs	r2, #255	; 0xff
 800abf0:	4913      	ldr	r1, [pc, #76]	; (800ac40 <Argus_GetDefaultConfiguration+0x2dc>)
 800abf2:	f004 fdf3 	bl	800f7dc <fp_mulu>
 800abf6:	23e6      	movs	r3, #230	; 0xe6
 800abf8:	224d      	movs	r2, #77	; 0x4d
 800abfa:	52e0      	strh	r0, [r4, r3]
 800abfc:	3309      	adds	r3, #9
 800abfe:	54e2      	strb	r2, [r4, r3]
 800ac00:	22c2      	movs	r2, #194	; 0xc2
 800ac02:	0052      	lsls	r2, r2, #1
 800ac04:	58a3      	ldr	r3, [r4, r2]
 800ac06:	085b      	lsrs	r3, r3, #1
 800ac08:	50a3      	str	r3, [r4, r2]
 800ac0a:	23c0      	movs	r3, #192	; 0xc0
 800ac0c:	22cc      	movs	r2, #204	; 0xcc
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	0392      	lsls	r2, r2, #14
 800ac12:	50e2      	str	r2, [r4, r3]
 800ac14:	2296      	movs	r2, #150	; 0x96
 800ac16:	3308      	adds	r3, #8
 800ac18:	0092      	lsls	r2, r2, #2
 800ac1a:	52e2      	strh	r2, [r4, r3]
 800ac1c:	b003      	add	sp, #12
 800ac1e:	bc3c      	pop	{r2, r3, r4, r5}
 800ac20:	4690      	mov	r8, r2
 800ac22:	4699      	mov	r9, r3
 800ac24:	46a2      	mov	sl, r4
 800ac26:	46ab      	mov	fp, r5
 800ac28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac2a:	46c0      	nop			; (mov r8, r8)
 800ac2c:	00002710 	.word	0x00002710
 800ac30:	016e3600 	.word	0x016e3600
 800ac34:	ffffdac0 	.word	0xffffdac0
 800ac38:	0002999a 	.word	0x0002999a
 800ac3c:	ffff9600 	.word	0xffff9600
 800ac40:	0001c28f 	.word	0x0001c28f

0800ac44 <SetPattern.constprop.2>:
 800ac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac46:	0007      	movs	r7, r0
 800ac48:	1e14      	subs	r4, r2, #0
 800ac4a:	dd2f      	ble.n	800acac <SetPattern.constprop.2+0x68>
 800ac4c:	2580      	movs	r5, #128	; 0x80
 800ac4e:	426d      	negs	r5, r5
 800ac50:	1aad      	subs	r5, r5, r2
 800ac52:	b2ed      	uxtb	r5, r5
 800ac54:	002e      	movs	r6, r5
 800ac56:	19a6      	adds	r6, r4, r6
 800ac58:	2210      	movs	r2, #16
 800ac5a:	2e00      	cmp	r6, #0
 800ac5c:	dd2c      	ble.n	800acb8 <SetPattern.constprop.2+0x74>
 800ac5e:	0038      	movs	r0, r7
 800ac60:	f7fd fce3 	bl	800862a <memcpy>
 800ac64:	2c00      	cmp	r4, #0
 800ac66:	dc2c      	bgt.n	800acc2 <SetPattern.constprop.2+0x7e>
 800ac68:	2210      	movs	r2, #16
 800ac6a:	1df0      	adds	r0, r6, #7
 800ac6c:	10c0      	asrs	r0, r0, #3
 800ac6e:	1a12      	subs	r2, r2, r0
 800ac70:	21ff      	movs	r1, #255	; 0xff
 800ac72:	1838      	adds	r0, r7, r0
 800ac74:	f7fd fce4 	bl	8008640 <memset>
 800ac78:	2307      	movs	r3, #7
 800ac7a:	b2e2      	uxtb	r2, r4
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	d008      	beq.n	800ac92 <SetPattern.constprop.2+0x4e>
 800ac80:	21ff      	movs	r1, #255	; 0xff
 800ac82:	40d9      	lsrs	r1, r3
 800ac84:	43cb      	mvns	r3, r1
 800ac86:	10e4      	asrs	r4, r4, #3
 800ac88:	b2e4      	uxtb	r4, r4
 800ac8a:	193c      	adds	r4, r7, r4
 800ac8c:	7821      	ldrb	r1, [r4, #0]
 800ac8e:	430b      	orrs	r3, r1
 800ac90:	7023      	strb	r3, [r4, #0]
 800ac92:	2307      	movs	r3, #7
 800ac94:	18ad      	adds	r5, r5, r2
 800ac96:	422b      	tst	r3, r5
 800ac98:	d007      	beq.n	800acaa <SetPattern.constprop.2+0x66>
 800ac9a:	10f2      	asrs	r2, r6, #3
 800ac9c:	401e      	ands	r6, r3
 800ac9e:	33f8      	adds	r3, #248	; 0xf8
 800aca0:	40f3      	lsrs	r3, r6
 800aca2:	18bf      	adds	r7, r7, r2
 800aca4:	783a      	ldrb	r2, [r7, #0]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	703b      	strb	r3, [r7, #0]
 800acaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acac:	2680      	movs	r6, #128	; 0x80
 800acae:	19a6      	adds	r6, r4, r6
 800acb0:	2580      	movs	r5, #128	; 0x80
 800acb2:	2210      	movs	r2, #16
 800acb4:	2e00      	cmp	r6, #0
 800acb6:	dcd2      	bgt.n	800ac5e <SetPattern.constprop.2+0x1a>
 800acb8:	21ff      	movs	r1, #255	; 0xff
 800acba:	0038      	movs	r0, r7
 800acbc:	f7fd fcc0 	bl	8008640 <memset>
 800acc0:	e7f3      	b.n	800acaa <SetPattern.constprop.2+0x66>
 800acc2:	10e2      	asrs	r2, r4, #3
 800acc4:	21ff      	movs	r1, #255	; 0xff
 800acc6:	0038      	movs	r0, r7
 800acc8:	f7fd fcba 	bl	8008640 <memset>
 800accc:	e7cc      	b.n	800ac68 <SetPattern.constprop.2+0x24>
 800acce:	46c0      	nop			; (mov r8, r8)

0800acd0 <Argus_Cfg_InitDCA>:
 800acd0:	b510      	push	{r4, lr}
 800acd2:	1e04      	subs	r4, r0, #0
 800acd4:	d009      	beq.n	800acea <Argus_Cfg_InitDCA+0x1a>
 800acd6:	222c      	movs	r2, #44	; 0x2c
 800acd8:	30bc      	adds	r0, #188	; 0xbc
 800acda:	2100      	movs	r1, #0
 800acdc:	f7fd fcb0 	bl	8008640 <memset>
 800ace0:	23d8      	movs	r3, #216	; 0xd8
 800ace2:	2000      	movs	r0, #0
 800ace4:	4a02      	ldr	r2, [pc, #8]	; (800acf0 <Argus_Cfg_InitDCA+0x20>)
 800ace6:	50e2      	str	r2, [r4, r3]
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	2005      	movs	r0, #5
 800acec:	4240      	negs	r0, r0
 800acee:	e7fb      	b.n	800ace8 <Argus_Cfg_InitDCA+0x18>
 800acf0:	2821190d 	.word	0x2821190d

0800acf4 <Argus_Cfg_SetLaserSafetyLimit>:
 800acf4:	68c2      	ldr	r2, [r0, #12]
 800acf6:	4b25      	ldr	r3, [pc, #148]	; (800ad8c <Argus_Cfg_SetLaserSafetyLimit+0x98>)
 800acf8:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 800acfa:	b570      	push	{r4, r5, r6, lr}
 800acfc:	0004      	movs	r4, r0
 800acfe:	4299      	cmp	r1, r3
 800ad00:	d83d      	bhi.n	800ad7e <Argus_Cfg_SetLaserSafetyLimit+0x8a>
 800ad02:	2345      	movs	r3, #69	; 0x45
 800ad04:	5cd0      	ldrb	r0, [r2, r3]
 800ad06:	3301      	adds	r3, #1
 800ad08:	5cd3      	ldrb	r3, [r2, r3]
 800ad0a:	0200      	lsls	r0, r0, #8
 800ad0c:	4303      	orrs	r3, r0
 800ad0e:	204d      	movs	r0, #77	; 0x4d
 800ad10:	5c10      	ldrb	r0, [r2, r0]
 800ad12:	059b      	lsls	r3, r3, #22
 800ad14:	08c0      	lsrs	r0, r0, #3
 800ad16:	0d9b      	lsrs	r3, r3, #22
 800ad18:	4343      	muls	r3, r0
 800ad1a:	2066      	movs	r0, #102	; 0x66
 800ad1c:	5c15      	ldrb	r5, [r2, r0]
 800ad1e:	3001      	adds	r0, #1
 800ad20:	5c10      	ldrb	r0, [r2, r0]
 800ad22:	022d      	lsls	r5, r5, #8
 800ad24:	4328      	orrs	r0, r5
 800ad26:	0440      	lsls	r0, r0, #17
 800ad28:	0d80      	lsrs	r0, r0, #22
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	4358      	muls	r0, r3
 800ad2e:	23fa      	movs	r3, #250	; 0xfa
 800ad30:	041b      	lsls	r3, r3, #16
 800ad32:	4298      	cmp	r0, r3
 800ad34:	d81d      	bhi.n	800ad72 <Argus_Cfg_SetLaserSafetyLimit+0x7e>
 800ad36:	f004 faed 	bl	800f314 <fp_div16>
 800ad3a:	23e8      	movs	r3, #232	; 0xe8
 800ad3c:	0005      	movs	r5, r0
 800ad3e:	58e0      	ldr	r0, [r4, r3]
 800ad40:	f002 feb4 	bl	800daac <Argus_Cal_GetCalibrationPtr>
 800ad44:	2303      	movs	r3, #3
 800ad46:	3051      	adds	r0, #81	; 0x51
 800ad48:	30ff      	adds	r0, #255	; 0xff
 800ad4a:	56c3      	ldrsb	r3, [r0, r3]
 800ad4c:	4910      	ldr	r1, [pc, #64]	; (800ad90 <Argus_Cfg_SetLaserSafetyLimit+0x9c>)
 800ad4e:	2210      	movs	r2, #16
 800ad50:	4359      	muls	r1, r3
 800ad52:	2380      	movs	r3, #128	; 0x80
 800ad54:	025b      	lsls	r3, r3, #9
 800ad56:	469c      	mov	ip, r3
 800ad58:	0028      	movs	r0, r5
 800ad5a:	4461      	add	r1, ip
 800ad5c:	f004 fd3e 	bl	800f7dc <fp_mulu>
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	2210      	movs	r2, #16
 800ad64:	6859      	ldr	r1, [r3, #4]
 800ad66:	f004 fd39 	bl	800f7dc <fp_mulu>
 800ad6a:	23ec      	movs	r3, #236	; 0xec
 800ad6c:	50e0      	str	r0, [r4, r3]
 800ad6e:	2000      	movs	r0, #0
 800ad70:	bd70      	pop	{r4, r5, r6, pc}
 800ad72:	4808      	ldr	r0, [pc, #32]	; (800ad94 <Argus_Cfg_SetLaserSafetyLimit+0xa0>)
 800ad74:	f7fc f97e 	bl	8007074 <print>
 800ad78:	2066      	movs	r0, #102	; 0x66
 800ad7a:	4240      	negs	r0, r0
 800ad7c:	e7f8      	b.n	800ad70 <Argus_Cfg_SetLaserSafetyLimit+0x7c>
 800ad7e:	4806      	ldr	r0, [pc, #24]	; (800ad98 <Argus_Cfg_SetLaserSafetyLimit+0xa4>)
 800ad80:	f7fc f978 	bl	8007074 <print>
 800ad84:	2066      	movs	r0, #102	; 0x66
 800ad86:	4240      	negs	r0, r0
 800ad88:	e7f2      	b.n	800ad70 <Argus_Cfg_SetLaserSafetyLimit+0x7c>
 800ad8a:	46c0      	nop			; (mov r8, r8)
 800ad8c:	000fffff 	.word	0x000fffff
 800ad90:	00000666 	.word	0x00000666
 800ad94:	08011d68 	.word	0x08011d68
 800ad98:	08011d20 	.word	0x08011d20

0800ad9c <Argus_Cfg_SetGainStages>:
 800ad9c:	23c1      	movs	r3, #193	; 0xc1
 800ad9e:	b510      	push	{r4, lr}
 800ada0:	5cc2      	ldrb	r2, [r0, r3]
 800ada2:	1883      	adds	r3, r0, r2
 800ada4:	33d8      	adds	r3, #216	; 0xd8
 800ada6:	781c      	ldrb	r4, [r3, #0]
 800ada8:	5c8b      	ldrb	r3, [r1, r2]
 800adaa:	429c      	cmp	r4, r3
 800adac:	d002      	beq.n	800adb4 <Argus_Cfg_SetGainStages+0x18>
 800adae:	23bc      	movs	r3, #188	; 0xbc
 800adb0:	2201      	movs	r2, #1
 800adb2:	54c2      	strb	r2, [r0, r3]
 800adb4:	2204      	movs	r2, #4
 800adb6:	30d8      	adds	r0, #216	; 0xd8
 800adb8:	f7fd fc37 	bl	800862a <memcpy>
 800adbc:	2000      	movs	r0, #0
 800adbe:	bd10      	pop	{r4, pc}

0800adc0 <Argus_Cfg_GetPowerStages>:
 800adc0:	000b      	movs	r3, r1
 800adc2:	0001      	movs	r1, r0
 800adc4:	b510      	push	{r4, lr}
 800adc6:	31d4      	adds	r1, #212	; 0xd4
 800adc8:	2204      	movs	r2, #4
 800adca:	0018      	movs	r0, r3
 800adcc:	f7fd fc2d 	bl	800862a <memcpy>
 800add0:	2000      	movs	r0, #0
 800add2:	bd10      	pop	{r4, pc}

0800add4 <Argus_Cfg_CheckDCACfg>:
 800add4:	2200      	movs	r2, #0
 800add6:	5682      	ldrsb	r2, [r0, r2]
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	1c53      	adds	r3, r2, #1
 800addc:	b2db      	uxtb	r3, r3
 800adde:	0004      	movs	r4, r0
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	d900      	bls.n	800ade6 <Argus_Cfg_CheckDCACfg+0x12>
 800ade4:	e0a3      	b.n	800af2e <Argus_Cfg_CheckDCACfg+0x15a>
 800ade6:	7988      	ldrb	r0, [r1, #6]
 800ade8:	790a      	ldrb	r2, [r1, #4]
 800adea:	1e83      	subs	r3, r0, #2
 800adec:	2b7e      	cmp	r3, #126	; 0x7e
 800adee:	d900      	bls.n	800adf2 <Argus_Cfg_CheckDCACfg+0x1e>
 800adf0:	e0a4      	b.n	800af3c <Argus_Cfg_CheckDCACfg+0x168>
 800adf2:	7e63      	ldrb	r3, [r4, #25]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <Argus_Cfg_CheckDCACfg+0x2a>
 800adf8:	0743      	lsls	r3, r0, #29
 800adfa:	d000      	beq.n	800adfe <Argus_Cfg_CheckDCACfg+0x2a>
 800adfc:	e0a5      	b.n	800af4a <Argus_Cfg_CheckDCACfg+0x176>
 800adfe:	2180      	movs	r1, #128	; 0x80
 800ae00:	1a89      	subs	r1, r1, r2
 800ae02:	0289      	lsls	r1, r1, #10
 800ae04:	f004 fa86 	bl	800f314 <fp_div16>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	56e3      	ldrsb	r3, [r4, r3]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d020      	beq.n	800ae52 <Argus_Cfg_CheckDCACfg+0x7e>
 800ae10:	3301      	adds	r3, #1
 800ae12:	d11c      	bne.n	800ae4e <Argus_Cfg_CheckDCACfg+0x7a>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	4a6c      	ldr	r2, [pc, #432]	; (800afc8 <Argus_Cfg_CheckDCACfg+0x1f4>)
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d900      	bls.n	800ae22 <Argus_Cfg_CheckDCACfg+0x4e>
 800ae20:	e07f      	b.n	800af22 <Argus_Cfg_CheckDCACfg+0x14e>
 800ae22:	8a65      	ldrh	r5, [r4, #18]
 800ae24:	2d00      	cmp	r5, #0
 800ae26:	d100      	bne.n	800ae2a <Argus_Cfg_CheckDCACfg+0x56>
 800ae28:	e06f      	b.n	800af0a <Argus_Cfg_CheckDCACfg+0x136>
 800ae2a:	220c      	movs	r2, #12
 800ae2c:	4967      	ldr	r1, [pc, #412]	; (800afcc <Argus_Cfg_CheckDCACfg+0x1f8>)
 800ae2e:	2020      	movs	r0, #32
 800ae30:	f004 fcd4 	bl	800f7dc <fp_mulu>
 800ae34:	b280      	uxth	r0, r0
 800ae36:	4285      	cmp	r5, r0
 800ae38:	d900      	bls.n	800ae3c <Argus_Cfg_CheckDCACfg+0x68>
 800ae3a:	e066      	b.n	800af0a <Argus_Cfg_CheckDCACfg+0x136>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	56e3      	ldrsb	r3, [r4, r3]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d042      	beq.n	800aeca <Argus_Cfg_CheckDCACfg+0xf6>
 800ae44:	3301      	adds	r3, #1
 800ae46:	d102      	bne.n	800ae4e <Argus_Cfg_CheckDCACfg+0x7a>
 800ae48:	7e23      	ldrb	r3, [r4, #24]
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d850      	bhi.n	800aef0 <Argus_Cfg_CheckDCACfg+0x11c>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
 800ae52:	7863      	ldrb	r3, [r4, #1]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d05e      	beq.n	800af16 <Argus_Cfg_CheckDCACfg+0x142>
 800ae58:	78a2      	ldrb	r2, [r4, #2]
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d85b      	bhi.n	800af16 <Argus_Cfg_CheckDCACfg+0x142>
 800ae5e:	78e3      	ldrb	r3, [r4, #3]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d858      	bhi.n	800af16 <Argus_Cfg_CheckDCACfg+0x142>
 800ae64:	2b21      	cmp	r3, #33	; 0x21
 800ae66:	d856      	bhi.n	800af16 <Argus_Cfg_CheckDCACfg+0x142>
 800ae68:	88e3      	ldrh	r3, [r4, #6]
 800ae6a:	2b3f      	cmp	r3, #63	; 0x3f
 800ae6c:	d973      	bls.n	800af56 <Argus_Cfg_CheckDCACfg+0x182>
 800ae6e:	8921      	ldrh	r1, [r4, #8]
 800ae70:	428b      	cmp	r3, r1
 800ae72:	d900      	bls.n	800ae76 <Argus_Cfg_CheckDCACfg+0xa2>
 800ae74:	e081      	b.n	800af7a <Argus_Cfg_CheckDCACfg+0x1a6>
 800ae76:	88a2      	ldrh	r2, [r4, #4]
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	d003      	beq.n	800ae84 <Argus_Cfg_CheckDCACfg+0xb0>
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d83e      	bhi.n	800aefe <Argus_Cfg_CheckDCACfg+0x12a>
 800ae80:	4291      	cmp	r1, r2
 800ae82:	d33c      	bcc.n	800aefe <Argus_Cfg_CheckDCACfg+0x12a>
 800ae84:	89e3      	ldrh	r3, [r4, #14]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d06b      	beq.n	800af62 <Argus_Cfg_CheckDCACfg+0x18e>
 800ae8a:	8a22      	ldrh	r2, [r4, #16]
 800ae8c:	4950      	ldr	r1, [pc, #320]	; (800afd0 <Argus_Cfg_CheckDCACfg+0x1fc>)
 800ae8e:	428a      	cmp	r2, r1
 800ae90:	d86d      	bhi.n	800af6e <Argus_Cfg_CheckDCACfg+0x19a>
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d900      	bls.n	800ae98 <Argus_Cfg_CheckDCACfg+0xc4>
 800ae96:	e07c      	b.n	800af92 <Argus_Cfg_CheckDCACfg+0x1be>
 800ae98:	89a1      	ldrh	r1, [r4, #12]
 800ae9a:	428b      	cmp	r3, r1
 800ae9c:	d841      	bhi.n	800af22 <Argus_Cfg_CheckDCACfg+0x14e>
 800ae9e:	428a      	cmp	r2, r1
 800aea0:	d33f      	bcc.n	800af22 <Argus_Cfg_CheckDCACfg+0x14e>
 800aea2:	8aa3      	ldrh	r3, [r4, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d06e      	beq.n	800af86 <Argus_Cfg_CheckDCACfg+0x1b2>
 800aea8:	8a65      	ldrh	r5, [r4, #18]
 800aeaa:	42ab      	cmp	r3, r5
 800aeac:	d82d      	bhi.n	800af0a <Argus_Cfg_CheckDCACfg+0x136>
 800aeae:	220c      	movs	r2, #12
 800aeb0:	4946      	ldr	r1, [pc, #280]	; (800afcc <Argus_Cfg_CheckDCACfg+0x1f8>)
 800aeb2:	2020      	movs	r0, #32
 800aeb4:	f004 fc92 	bl	800f7dc <fp_mulu>
 800aeb8:	b280      	uxth	r0, r0
 800aeba:	4285      	cmp	r5, r0
 800aebc:	d825      	bhi.n	800af0a <Argus_Cfg_CheckDCACfg+0x136>
 800aebe:	2300      	movs	r3, #0
 800aec0:	56e3      	ldrsb	r3, [r4, r3]
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	d0ad      	beq.n	800ae22 <Argus_Cfg_CheckDCACfg+0x4e>
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d1c1      	bne.n	800ae4e <Argus_Cfg_CheckDCACfg+0x7a>
 800aeca:	7de1      	ldrb	r1, [r4, #23]
 800aecc:	2903      	cmp	r1, #3
 800aece:	d86d      	bhi.n	800afac <Argus_Cfg_CheckDCACfg+0x1d8>
 800aed0:	7da2      	ldrb	r2, [r4, #22]
 800aed2:	2a03      	cmp	r2, #3
 800aed4:	d870      	bhi.n	800afb8 <Argus_Cfg_CheckDCACfg+0x1e4>
 800aed6:	7e23      	ldrb	r3, [r4, #24]
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	d860      	bhi.n	800af9e <Argus_Cfg_CheckDCACfg+0x1ca>
 800aedc:	429a      	cmp	r2, r3
 800aede:	d801      	bhi.n	800aee4 <Argus_Cfg_CheckDCACfg+0x110>
 800aee0:	4291      	cmp	r1, r2
 800aee2:	d9b4      	bls.n	800ae4e <Argus_Cfg_CheckDCACfg+0x7a>
 800aee4:	483b      	ldr	r0, [pc, #236]	; (800afd4 <Argus_Cfg_CheckDCACfg+0x200>)
 800aee6:	f7fc f8c5 	bl	8007074 <print>
 800aeea:	2066      	movs	r0, #102	; 0x66
 800aeec:	4240      	negs	r0, r0
 800aeee:	e7af      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800aef0:	7da1      	ldrb	r1, [r4, #22]
 800aef2:	4839      	ldr	r0, [pc, #228]	; (800afd8 <Argus_Cfg_CheckDCACfg+0x204>)
 800aef4:	f7fc f8be 	bl	8007074 <print>
 800aef8:	2066      	movs	r0, #102	; 0x66
 800aefa:	4240      	negs	r0, r0
 800aefc:	e7a8      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800aefe:	4837      	ldr	r0, [pc, #220]	; (800afdc <Argus_Cfg_CheckDCACfg+0x208>)
 800af00:	f7fc f8b8 	bl	8007074 <print>
 800af04:	2066      	movs	r0, #102	; 0x66
 800af06:	4240      	negs	r0, r0
 800af08:	e7a2      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af0a:	4835      	ldr	r0, [pc, #212]	; (800afe0 <Argus_Cfg_CheckDCACfg+0x20c>)
 800af0c:	f7fc f8b2 	bl	8007074 <print>
 800af10:	2066      	movs	r0, #102	; 0x66
 800af12:	4240      	negs	r0, r0
 800af14:	e79c      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af16:	4833      	ldr	r0, [pc, #204]	; (800afe4 <Argus_Cfg_CheckDCACfg+0x210>)
 800af18:	f7fc f8ac 	bl	8007074 <print>
 800af1c:	2066      	movs	r0, #102	; 0x66
 800af1e:	4240      	negs	r0, r0
 800af20:	e796      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af22:	4831      	ldr	r0, [pc, #196]	; (800afe8 <Argus_Cfg_CheckDCACfg+0x214>)
 800af24:	f7fc f8a6 	bl	8007074 <print>
 800af28:	2066      	movs	r0, #102	; 0x66
 800af2a:	4240      	negs	r0, r0
 800af2c:	e790      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af2e:	0011      	movs	r1, r2
 800af30:	482e      	ldr	r0, [pc, #184]	; (800afec <Argus_Cfg_CheckDCACfg+0x218>)
 800af32:	f7fc f89f 	bl	8007074 <print>
 800af36:	2066      	movs	r0, #102	; 0x66
 800af38:	4240      	negs	r0, r0
 800af3a:	e789      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af3c:	0001      	movs	r1, r0
 800af3e:	482c      	ldr	r0, [pc, #176]	; (800aff0 <Argus_Cfg_CheckDCACfg+0x21c>)
 800af40:	f7fc f898 	bl	8007074 <print>
 800af44:	2066      	movs	r0, #102	; 0x66
 800af46:	4240      	negs	r0, r0
 800af48:	e782      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af4a:	482a      	ldr	r0, [pc, #168]	; (800aff4 <Argus_Cfg_CheckDCACfg+0x220>)
 800af4c:	f7fc f892 	bl	8007074 <print>
 800af50:	2066      	movs	r0, #102	; 0x66
 800af52:	4240      	negs	r0, r0
 800af54:	e77c      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af56:	4828      	ldr	r0, [pc, #160]	; (800aff8 <Argus_Cfg_CheckDCACfg+0x224>)
 800af58:	f7fc f88c 	bl	8007074 <print>
 800af5c:	2066      	movs	r0, #102	; 0x66
 800af5e:	4240      	negs	r0, r0
 800af60:	e776      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af62:	4826      	ldr	r0, [pc, #152]	; (800affc <Argus_Cfg_CheckDCACfg+0x228>)
 800af64:	f7fc f886 	bl	8007074 <print>
 800af68:	2066      	movs	r0, #102	; 0x66
 800af6a:	4240      	negs	r0, r0
 800af6c:	e770      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af6e:	4824      	ldr	r0, [pc, #144]	; (800b000 <Argus_Cfg_CheckDCACfg+0x22c>)
 800af70:	f7fc f880 	bl	8007074 <print>
 800af74:	2066      	movs	r0, #102	; 0x66
 800af76:	4240      	negs	r0, r0
 800af78:	e76a      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af7a:	4822      	ldr	r0, [pc, #136]	; (800b004 <Argus_Cfg_CheckDCACfg+0x230>)
 800af7c:	f7fc f87a 	bl	8007074 <print>
 800af80:	2066      	movs	r0, #102	; 0x66
 800af82:	4240      	negs	r0, r0
 800af84:	e764      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af86:	4820      	ldr	r0, [pc, #128]	; (800b008 <Argus_Cfg_CheckDCACfg+0x234>)
 800af88:	f7fc f874 	bl	8007074 <print>
 800af8c:	2066      	movs	r0, #102	; 0x66
 800af8e:	4240      	negs	r0, r0
 800af90:	e75e      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af92:	481e      	ldr	r0, [pc, #120]	; (800b00c <Argus_Cfg_CheckDCACfg+0x238>)
 800af94:	f7fc f86e 	bl	8007074 <print>
 800af98:	2066      	movs	r0, #102	; 0x66
 800af9a:	4240      	negs	r0, r0
 800af9c:	e758      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800af9e:	0019      	movs	r1, r3
 800afa0:	481b      	ldr	r0, [pc, #108]	; (800b010 <Argus_Cfg_CheckDCACfg+0x23c>)
 800afa2:	f7fc f867 	bl	8007074 <print>
 800afa6:	2066      	movs	r0, #102	; 0x66
 800afa8:	4240      	negs	r0, r0
 800afaa:	e751      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800afac:	4819      	ldr	r0, [pc, #100]	; (800b014 <Argus_Cfg_CheckDCACfg+0x240>)
 800afae:	f7fc f861 	bl	8007074 <print>
 800afb2:	2066      	movs	r0, #102	; 0x66
 800afb4:	4240      	negs	r0, r0
 800afb6:	e74b      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800afb8:	0011      	movs	r1, r2
 800afba:	4817      	ldr	r0, [pc, #92]	; (800b018 <Argus_Cfg_CheckDCACfg+0x244>)
 800afbc:	f7fc f85a 	bl	8007074 <print>
 800afc0:	2066      	movs	r0, #102	; 0x66
 800afc2:	4240      	negs	r0, r0
 800afc4:	e744      	b.n	800ae50 <Argus_Cfg_CheckDCACfg+0x7c>
 800afc6:	46c0      	nop			; (mov r8, r8)
 800afc8:	0000ffbf 	.word	0x0000ffbf
 800afcc:	0001c28f 	.word	0x0001c28f
 800afd0:	0000ffc0 	.word	0x0000ffc0
 800afd4:	08011c1c 	.word	0x08011c1c
 800afd8:	08011c7c 	.word	0x08011c7c
 800afdc:	080118e8 	.word	0x080118e8
 800afe0:	08011ae0 	.word	0x08011ae0
 800afe4:	080117c0 	.word	0x080117c0
 800afe8:	08011a34 	.word	0x08011a34
 800afec:	08011660 	.word	0x08011660
 800aff0:	08011694 	.word	0x08011694
 800aff4:	080116e4 	.word	0x080116e4
 800aff8:	08011850 	.word	0x08011850
 800affc:	08011958 	.word	0x08011958
 800b000:	08011994 	.word	0x08011994
 800b004:	08011888 	.word	0x08011888
 800b008:	08011aa0 	.word	0x08011aa0
 800b00c:	080119d0 	.word	0x080119d0
 800b010:	08011bdc 	.word	0x08011bdc
 800b014:	08011b5c 	.word	0x08011b5c
 800b018:	08011b9c 	.word	0x08011b9c

0800b01c <Argus_Cfg_ResetDCA>:
 800b01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b01e:	4645      	mov	r5, r8
 800b020:	4657      	mov	r7, sl
 800b022:	464e      	mov	r6, r9
 800b024:	46de      	mov	lr, fp
 800b026:	0004      	movs	r4, r0
 800b028:	2303      	movs	r3, #3
 800b02a:	b5e0      	push	{r5, r6, r7, lr}
 800b02c:	34bc      	adds	r4, #188	; 0xbc
 800b02e:	6a27      	ldr	r7, [r4, #32]
 800b030:	7323      	strb	r3, [r4, #12]
 800b032:	8a3b      	ldrh	r3, [r7, #16]
 800b034:	b083      	sub	sp, #12
 800b036:	8163      	strh	r3, [r4, #10]
 800b038:	4698      	mov	r8, r3
 800b03a:	7dbb      	ldrb	r3, [r7, #22]
 800b03c:	0005      	movs	r5, r0
 800b03e:	7363      	strb	r3, [r4, #13]
 800b040:	23ec      	movs	r3, #236	; 0xec
 800b042:	58c6      	ldr	r6, [r0, r3]
 800b044:	2e00      	cmp	r6, #0
 800b046:	d035      	beq.n	800b0b4 <Argus_Cfg_ResetDCA+0x98>
 800b048:	7ee3      	ldrb	r3, [r4, #27]
 800b04a:	4699      	mov	r9, r3
 800b04c:	4643      	mov	r3, r8
 800b04e:	099b      	lsrs	r3, r3, #6
 800b050:	469a      	mov	sl, r3
 800b052:	d000      	beq.n	800b056 <Argus_Cfg_ResetDCA+0x3a>
 800b054:	e0ed      	b.n	800b232 <Argus_Cfg_ResetDCA+0x216>
 800b056:	464b      	mov	r3, r9
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d100      	bne.n	800b05e <Argus_Cfg_ResetDCA+0x42>
 800b05c:	e10e      	b.n	800b27c <Argus_Cfg_ResetDCA+0x260>
 800b05e:	2301      	movs	r3, #1
 800b060:	4649      	mov	r1, r9
 800b062:	0030      	movs	r0, r6
 800b064:	469b      	mov	fp, r3
 800b066:	f7f5 f923 	bl	80002b0 <__aeabi_uidiv>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d000      	beq.n	800b070 <Argus_Cfg_ResetDCA+0x54>
 800b06e:	e118      	b.n	800b2a2 <Argus_Cfg_ResetDCA+0x286>
 800b070:	4649      	mov	r1, r9
 800b072:	0030      	movs	r0, r6
 800b074:	f7f5 f91c 	bl	80002b0 <__aeabi_uidiv>
 800b078:	2240      	movs	r2, #64	; 0x40
 800b07a:	2301      	movs	r3, #1
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d000      	beq.n	800b082 <Argus_Cfg_ResetDCA+0x66>
 800b080:	e13b      	b.n	800b2fa <Argus_Cfg_ResetDCA+0x2de>
 800b082:	4590      	cmp	r8, r2
 800b084:	d900      	bls.n	800b088 <Argus_Cfg_ResetDCA+0x6c>
 800b086:	8162      	strh	r2, [r4, #10]
 800b088:	89e2      	ldrh	r2, [r4, #14]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d900      	bls.n	800b090 <Argus_Cfg_ResetDCA+0x74>
 800b08e:	81e3      	strh	r3, [r4, #14]
 800b090:	2102      	movs	r1, #2
 800b092:	45b1      	cmp	r9, r6
 800b094:	d801      	bhi.n	800b09a <Argus_Cfg_ResetDCA+0x7e>
 800b096:	e00b      	b.n	800b0b0 <Argus_Cfg_ResetDCA+0x94>
 800b098:	0011      	movs	r1, r2
 800b09a:	186b      	adds	r3, r5, r1
 800b09c:	33d4      	adds	r3, #212	; 0xd4
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	1e4a      	subs	r2, r1, #1
 800b0a2:	b2d2      	uxtb	r2, r2
 800b0a4:	42b3      	cmp	r3, r6
 800b0a6:	d8f7      	bhi.n	800b098 <Argus_Cfg_ResetDCA+0x7c>
 800b0a8:	7321      	strb	r1, [r4, #12]
 800b0aa:	2902      	cmp	r1, #2
 800b0ac:	d800      	bhi.n	800b0b0 <Argus_Cfg_ResetDCA+0x94>
 800b0ae:	e116      	b.n	800b2de <Argus_Cfg_ResetDCA+0x2c2>
 800b0b0:	8963      	ldrh	r3, [r4, #10]
 800b0b2:	4698      	mov	r8, r3
 800b0b4:	8ae2      	ldrh	r2, [r4, #22]
 800b0b6:	4542      	cmp	r2, r8
 800b0b8:	d900      	bls.n	800b0bc <Argus_Cfg_ResetDCA+0xa0>
 800b0ba:	e0b6      	b.n	800b22a <Argus_Cfg_ResetDCA+0x20e>
 800b0bc:	20ff      	movs	r0, #255	; 0xff
 800b0be:	2351      	movs	r3, #81	; 0x51
 800b0c0:	7120      	strb	r0, [r4, #4]
 800b0c2:	5ce9      	ldrb	r1, [r5, r3]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	5ceb      	ldrb	r3, [r5, r3]
 800b0c8:	0209      	lsls	r1, r1, #8
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	019b      	lsls	r3, r3, #6
 800b0ce:	8063      	strh	r3, [r4, #2]
 800b0d0:	2372      	movs	r3, #114	; 0x72
 800b0d2:	7160      	strb	r0, [r4, #5]
 800b0d4:	5ce9      	ldrb	r1, [r5, r3]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	5ceb      	ldrb	r3, [r5, r3]
 800b0da:	0209      	lsls	r1, r1, #8
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	045b      	lsls	r3, r3, #17
 800b0e0:	0d9b      	lsrs	r3, r3, #22
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	8123      	strh	r3, [r4, #8]
 800b0e6:	2103      	movs	r1, #3
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	7321      	strb	r1, [r4, #12]
 800b0ec:	71a3      	strb	r3, [r4, #6]
 800b0ee:	89be      	ldrh	r6, [r7, #12]
 800b0f0:	7423      	strb	r3, [r4, #16]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	8166      	strh	r6, [r4, #10]
 800b0f6:	56fb      	ldrsb	r3, [r7, r3]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	dd03      	ble.n	800b104 <Argus_Cfg_ResetDCA+0xe8>
 800b0fc:	4296      	cmp	r6, r2
 800b0fe:	d901      	bls.n	800b104 <Argus_Cfg_ResetDCA+0xe8>
 800b100:	0016      	movs	r6, r2
 800b102:	8162      	strh	r2, [r4, #10]
 800b104:	228c      	movs	r2, #140	; 0x8c
 800b106:	692b      	ldr	r3, [r5, #16]
 800b108:	09b6      	lsrs	r6, r6, #6
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	b2b6      	uxth	r6, r6
 800b10e:	469b      	mov	fp, r3
 800b110:	68eb      	ldr	r3, [r5, #12]
 800b112:	5a9a      	ldrh	r2, [r3, r2]
 800b114:	4691      	mov	r9, r2
 800b116:	2e00      	cmp	r6, #0
 800b118:	d04b      	beq.n	800b1b2 <Argus_Cfg_ResetDCA+0x196>
 800b11a:	45cb      	cmp	fp, r9
 800b11c:	d84c      	bhi.n	800b1b8 <Argus_Cfg_ResetDCA+0x19c>
 800b11e:	2301      	movs	r3, #1
 800b120:	2201      	movs	r2, #1
 800b122:	4699      	mov	r9, r3
 800b124:	23ca      	movs	r3, #202	; 0xca
 800b126:	52ea      	strh	r2, [r5, r3]
 800b128:	3322      	adds	r3, #34	; 0x22
 800b12a:	58ef      	ldr	r7, [r5, r3]
 800b12c:	2f00      	cmp	r7, #0
 800b12e:	d035      	beq.n	800b19c <Argus_Cfg_ResetDCA+0x180>
 800b130:	7b26      	ldrb	r6, [r4, #12]
 800b132:	19ab      	adds	r3, r5, r6
 800b134:	33d4      	adds	r3, #212	; 0xd4
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	469a      	mov	sl, r3
 800b13a:	8963      	ldrh	r3, [r4, #10]
 800b13c:	469b      	mov	fp, r3
 800b13e:	099b      	lsrs	r3, r3, #6
 800b140:	4698      	mov	r8, r3
 800b142:	d000      	beq.n	800b146 <Argus_Cfg_ResetDCA+0x12a>
 800b144:	e083      	b.n	800b24e <Argus_Cfg_ResetDCA+0x232>
 800b146:	4653      	mov	r3, sl
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d100      	bne.n	800b14e <Argus_Cfg_ResetDCA+0x132>
 800b14c:	e0ad      	b.n	800b2aa <Argus_Cfg_ResetDCA+0x28e>
 800b14e:	2301      	movs	r3, #1
 800b150:	4651      	mov	r1, sl
 800b152:	0038      	movs	r0, r7
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	f7f5 f8ab 	bl	80002b0 <__aeabi_uidiv>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d000      	beq.n	800b160 <Argus_Cfg_ResetDCA+0x144>
 800b15e:	e0b9      	b.n	800b2d4 <Argus_Cfg_ResetDCA+0x2b8>
 800b160:	4651      	mov	r1, sl
 800b162:	0038      	movs	r0, r7
 800b164:	f7f5 f8a4 	bl	80002b0 <__aeabi_uidiv>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d000      	beq.n	800b16e <Argus_Cfg_ResetDCA+0x152>
 800b16c:	e0bd      	b.n	800b2ea <Argus_Cfg_ResetDCA+0x2ce>
 800b16e:	0039      	movs	r1, r7
 800b170:	2340      	movs	r3, #64	; 0x40
 800b172:	2701      	movs	r7, #1
 800b174:	455b      	cmp	r3, fp
 800b176:	d200      	bcs.n	800b17a <Argus_Cfg_ResetDCA+0x15e>
 800b178:	e079      	b.n	800b26e <Argus_Cfg_ResetDCA+0x252>
 800b17a:	45b9      	cmp	r9, r7
 800b17c:	d900      	bls.n	800b180 <Argus_Cfg_ResetDCA+0x164>
 800b17e:	81e7      	strh	r7, [r4, #14]
 800b180:	458a      	cmp	sl, r1
 800b182:	d90b      	bls.n	800b19c <Argus_Cfg_ResetDCA+0x180>
 800b184:	3e01      	subs	r6, #1
 800b186:	b2f6      	uxtb	r6, r6
 800b188:	e000      	b.n	800b18c <Argus_Cfg_ResetDCA+0x170>
 800b18a:	0016      	movs	r6, r2
 800b18c:	19ab      	adds	r3, r5, r6
 800b18e:	33d4      	adds	r3, #212	; 0xd4
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	1e72      	subs	r2, r6, #1
 800b194:	b2d2      	uxtb	r2, r2
 800b196:	428b      	cmp	r3, r1
 800b198:	d8f7      	bhi.n	800b18a <Argus_Cfg_ResetDCA+0x16e>
 800b19a:	7326      	strb	r6, [r4, #12]
 800b19c:	23bc      	movs	r3, #188	; 0xbc
 800b19e:	2201      	movs	r2, #1
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	54ea      	strb	r2, [r5, r3]
 800b1a4:	b003      	add	sp, #12
 800b1a6:	bc3c      	pop	{r2, r3, r4, r5}
 800b1a8:	4690      	mov	r8, r2
 800b1aa:	4699      	mov	r9, r3
 800b1ac:	46a2      	mov	sl, r4
 800b1ae:	46ab      	mov	fp, r5
 800b1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b2:	3601      	adds	r6, #1
 800b1b4:	45cb      	cmp	fp, r9
 800b1b6:	d9b2      	bls.n	800b11e <Argus_Cfg_ResetDCA+0x102>
 800b1b8:	2288      	movs	r2, #136	; 0x88
 800b1ba:	589a      	ldr	r2, [r3, r2]
 800b1bc:	2180      	movs	r1, #128	; 0x80
 800b1be:	4690      	mov	r8, r2
 800b1c0:	2284      	movs	r2, #132	; 0x84
 800b1c2:	589a      	ldr	r2, [r3, r2]
 800b1c4:	0049      	lsls	r1, r1, #1
 800b1c6:	9201      	str	r2, [sp, #4]
 800b1c8:	2267      	movs	r2, #103	; 0x67
 800b1ca:	5c9b      	ldrb	r3, [r3, r2]
 800b1cc:	4658      	mov	r0, fp
 800b1ce:	469a      	mov	sl, r3
 800b1d0:	7efb      	ldrb	r3, [r7, #27]
 800b1d2:	3a5f      	subs	r2, #95	; 0x5f
 800b1d4:	1ac9      	subs	r1, r1, r3
 800b1d6:	b289      	uxth	r1, r1
 800b1d8:	f004 fb00 	bl	800f7dc <fp_mulu>
 800b1dc:	465a      	mov	r2, fp
 800b1de:	4649      	mov	r1, r9
 800b1e0:	0003      	movs	r3, r0
 800b1e2:	1a50      	subs	r0, r2, r1
 800b1e4:	4298      	cmp	r0, r3
 800b1e6:	d844      	bhi.n	800b272 <Argus_Cfg_ResetDCA+0x256>
 800b1e8:	4653      	mov	r3, sl
 800b1ea:	06d9      	lsls	r1, r3, #27
 800b1ec:	4643      	mov	r3, r8
 800b1ee:	4373      	muls	r3, r6
 800b1f0:	001e      	movs	r6, r3
 800b1f2:	9b01      	ldr	r3, [sp, #4]
 800b1f4:	0f09      	lsrs	r1, r1, #28
 800b1f6:	469c      	mov	ip, r3
 800b1f8:	3101      	adds	r1, #1
 800b1fa:	4466      	add	r6, ip
 800b1fc:	434e      	muls	r6, r1
 800b1fe:	4b43      	ldr	r3, [pc, #268]	; (800b30c <Argus_Cfg_ResetDCA+0x2f0>)
 800b200:	429e      	cmp	r6, r3
 800b202:	d838      	bhi.n	800b276 <Argus_Cfg_ResetDCA+0x25a>
 800b204:	2380      	movs	r3, #128	; 0x80
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	469c      	mov	ip, r3
 800b20a:	4466      	add	r6, ip
 800b20c:	0c31      	lsrs	r1, r6, #16
 800b20e:	f7f5 f84f 	bl	80002b0 <__aeabi_uidiv>
 800b212:	2800      	cmp	r0, #0
 800b214:	d100      	bne.n	800b218 <Argus_Cfg_ResetDCA+0x1fc>
 800b216:	e782      	b.n	800b11e <Argus_Cfg_ResetDCA+0x102>
 800b218:	2380      	movs	r3, #128	; 0x80
 800b21a:	4681      	mov	r9, r0
 800b21c:	00db      	lsls	r3, r3, #3
 800b21e:	4298      	cmp	r0, r3
 800b220:	d900      	bls.n	800b224 <Argus_Cfg_ResetDCA+0x208>
 800b222:	4699      	mov	r9, r3
 800b224:	464b      	mov	r3, r9
 800b226:	b29a      	uxth	r2, r3
 800b228:	e77c      	b.n	800b124 <Argus_Cfg_ResetDCA+0x108>
 800b22a:	4643      	mov	r3, r8
 800b22c:	4642      	mov	r2, r8
 800b22e:	82e3      	strh	r3, [r4, #22]
 800b230:	e744      	b.n	800b0bc <Argus_Cfg_ResetDCA+0xa0>
 800b232:	469b      	mov	fp, r3
 800b234:	464b      	mov	r3, r9
 800b236:	2b00      	cmp	r3, #0
 800b238:	d12b      	bne.n	800b292 <Argus_Cfg_ResetDCA+0x276>
 800b23a:	4651      	mov	r1, sl
 800b23c:	0030      	movs	r0, r6
 800b23e:	f7f5 f837 	bl	80002b0 <__aeabi_uidiv>
 800b242:	2800      	cmp	r0, #0
 800b244:	d155      	bne.n	800b2f2 <Argus_Cfg_ResetDCA+0x2d6>
 800b246:	01b2      	lsls	r2, r6, #6
 800b248:	2301      	movs	r3, #1
 800b24a:	2601      	movs	r6, #1
 800b24c:	e719      	b.n	800b082 <Argus_Cfg_ResetDCA+0x66>
 800b24e:	4652      	mov	r2, sl
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	2a00      	cmp	r2, #0
 800b254:	d136      	bne.n	800b2c4 <Argus_Cfg_ResetDCA+0x2a8>
 800b256:	0019      	movs	r1, r3
 800b258:	0038      	movs	r0, r7
 800b25a:	f7f5 f829 	bl	80002b0 <__aeabi_uidiv>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d14e      	bne.n	800b300 <Argus_Cfg_ResetDCA+0x2e4>
 800b262:	01bb      	lsls	r3, r7, #6
 800b264:	2101      	movs	r1, #1
 800b266:	2701      	movs	r7, #1
 800b268:	455b      	cmp	r3, fp
 800b26a:	d300      	bcc.n	800b26e <Argus_Cfg_ResetDCA+0x252>
 800b26c:	e785      	b.n	800b17a <Argus_Cfg_ResetDCA+0x15e>
 800b26e:	8163      	strh	r3, [r4, #10]
 800b270:	e783      	b.n	800b17a <Argus_Cfg_ResetDCA+0x15e>
 800b272:	0018      	movs	r0, r3
 800b274:	e7b8      	b.n	800b1e8 <Argus_Cfg_ResetDCA+0x1cc>
 800b276:	2180      	movs	r1, #128	; 0x80
 800b278:	0249      	lsls	r1, r1, #9
 800b27a:	e7c8      	b.n	800b20e <Argus_Cfg_ResetDCA+0x1f2>
 800b27c:	0030      	movs	r0, r6
 800b27e:	2240      	movs	r2, #64	; 0x40
 800b280:	2601      	movs	r6, #1
 800b282:	2180      	movs	r1, #128	; 0x80
 800b284:	0003      	movs	r3, r0
 800b286:	00c9      	lsls	r1, r1, #3
 800b288:	4288      	cmp	r0, r1
 800b28a:	d800      	bhi.n	800b28e <Argus_Cfg_ResetDCA+0x272>
 800b28c:	e6f9      	b.n	800b082 <Argus_Cfg_ResetDCA+0x66>
 800b28e:	000b      	movs	r3, r1
 800b290:	e6f7      	b.n	800b082 <Argus_Cfg_ResetDCA+0x66>
 800b292:	4651      	mov	r1, sl
 800b294:	0030      	movs	r0, r6
 800b296:	4359      	muls	r1, r3
 800b298:	f7f5 f80a 	bl	80002b0 <__aeabi_uidiv>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d100      	bne.n	800b2a2 <Argus_Cfg_ResetDCA+0x286>
 800b2a0:	e6e6      	b.n	800b070 <Argus_Cfg_ResetDCA+0x54>
 800b2a2:	465b      	mov	r3, fp
 800b2a4:	464e      	mov	r6, r9
 800b2a6:	019a      	lsls	r2, r3, #6
 800b2a8:	e7eb      	b.n	800b282 <Argus_Cfg_ResetDCA+0x266>
 800b2aa:	2340      	movs	r3, #64	; 0x40
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	2280      	movs	r2, #128	; 0x80
 800b2b0:	00d2      	lsls	r2, r2, #3
 800b2b2:	4297      	cmp	r7, r2
 800b2b4:	d800      	bhi.n	800b2b8 <Argus_Cfg_ResetDCA+0x29c>
 800b2b6:	e75d      	b.n	800b174 <Argus_Cfg_ResetDCA+0x158>
 800b2b8:	0017      	movs	r7, r2
 800b2ba:	455b      	cmp	r3, fp
 800b2bc:	d300      	bcc.n	800b2c0 <Argus_Cfg_ResetDCA+0x2a4>
 800b2be:	e75f      	b.n	800b180 <Argus_Cfg_ResetDCA+0x164>
 800b2c0:	8163      	strh	r3, [r4, #10]
 800b2c2:	e75a      	b.n	800b17a <Argus_Cfg_ResetDCA+0x15e>
 800b2c4:	0019      	movs	r1, r3
 800b2c6:	0038      	movs	r0, r7
 800b2c8:	4351      	muls	r1, r2
 800b2ca:	f7f4 fff1 	bl	80002b0 <__aeabi_uidiv>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d100      	bne.n	800b2d4 <Argus_Cfg_ResetDCA+0x2b8>
 800b2d2:	e745      	b.n	800b160 <Argus_Cfg_ResetDCA+0x144>
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	0007      	movs	r7, r0
 800b2d8:	019b      	lsls	r3, r3, #6
 800b2da:	4651      	mov	r1, sl
 800b2dc:	e7e7      	b.n	800b2ae <Argus_Cfg_ResetDCA+0x292>
 800b2de:	480c      	ldr	r0, [pc, #48]	; (800b310 <Argus_Cfg_ResetDCA+0x2f4>)
 800b2e0:	f7fb fec8 	bl	8007074 <print>
 800b2e4:	2066      	movs	r0, #102	; 0x66
 800b2e6:	4240      	negs	r0, r0
 800b2e8:	e75c      	b.n	800b1a4 <Argus_Cfg_ResetDCA+0x188>
 800b2ea:	0183      	lsls	r3, r0, #6
 800b2ec:	4651      	mov	r1, sl
 800b2ee:	2701      	movs	r7, #1
 800b2f0:	e740      	b.n	800b174 <Argus_Cfg_ResetDCA+0x158>
 800b2f2:	4653      	mov	r3, sl
 800b2f4:	2601      	movs	r6, #1
 800b2f6:	019a      	lsls	r2, r3, #6
 800b2f8:	e7c3      	b.n	800b282 <Argus_Cfg_ResetDCA+0x266>
 800b2fa:	0182      	lsls	r2, r0, #6
 800b2fc:	464e      	mov	r6, r9
 800b2fe:	e6c0      	b.n	800b082 <Argus_Cfg_ResetDCA+0x66>
 800b300:	4643      	mov	r3, r8
 800b302:	0007      	movs	r7, r0
 800b304:	019b      	lsls	r3, r3, #6
 800b306:	2101      	movs	r1, #1
 800b308:	e7d1      	b.n	800b2ae <Argus_Cfg_ResetDCA+0x292>
 800b30a:	46c0      	nop			; (mov r8, r8)
 800b30c:	ffff7fff 	.word	0xffff7fff
 800b310:	08011cb8 	.word	0x08011cb8

0800b314 <Argus_Cfg_PrepareDCACfg>:
 800b314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b316:	46c6      	mov	lr, r8
 800b318:	b500      	push	{lr}
 800b31a:	0007      	movs	r7, r0
 800b31c:	b082      	sub	sp, #8
 800b31e:	000c      	movs	r4, r1
 800b320:	2800      	cmp	r0, #0
 800b322:	d100      	bne.n	800b326 <Argus_Cfg_PrepareDCACfg+0x12>
 800b324:	e0d2      	b.n	800b4cc <Argus_Cfg_PrepareDCACfg+0x1b8>
 800b326:	2900      	cmp	r1, #0
 800b328:	d100      	bne.n	800b32c <Argus_Cfg_PrepareDCACfg+0x18>
 800b32a:	e0cf      	b.n	800b4cc <Argus_Cfg_PrepareDCACfg+0x1b8>
 800b32c:	0006      	movs	r6, r0
 800b32e:	2580      	movs	r5, #128	; 0x80
 800b330:	68c3      	ldr	r3, [r0, #12]
 800b332:	36bc      	adds	r6, #188	; 0xbc
 800b334:	6231      	str	r1, [r6, #32]
 800b336:	7919      	ldrb	r1, [r3, #4]
 800b338:	799b      	ldrb	r3, [r3, #6]
 800b33a:	1a6d      	subs	r5, r5, r1
 800b33c:	0028      	movs	r0, r5
 800b33e:	0019      	movs	r1, r3
 800b340:	4698      	mov	r8, r3
 800b342:	f7f4 ffc7 	bl	80002d4 <__aeabi_idiv>
 800b346:	02a9      	lsls	r1, r5, #10
 800b348:	7530      	strb	r0, [r6, #20]
 800b34a:	4640      	mov	r0, r8
 800b34c:	f003 ffe2 	bl	800f314 <fp_div16>
 800b350:	8270      	strh	r0, [r6, #18]
 800b352:	89e2      	ldrh	r2, [r4, #14]
 800b354:	233f      	movs	r3, #63	; 0x3f
 800b356:	0011      	movs	r1, r2
 800b358:	4399      	bics	r1, r3
 800b35a:	d100      	bne.n	800b35e <Argus_Cfg_PrepareDCACfg+0x4a>
 800b35c:	e090      	b.n	800b480 <Argus_Cfg_PrepareDCACfg+0x16c>
 800b35e:	8a22      	ldrh	r2, [r4, #16]
 800b360:	233f      	movs	r3, #63	; 0x3f
 800b362:	81e1      	strh	r1, [r4, #14]
 800b364:	0011      	movs	r1, r2
 800b366:	4399      	bics	r1, r3
 800b368:	1e0b      	subs	r3, r1, #0
 800b36a:	d100      	bne.n	800b36e <Argus_Cfg_PrepareDCACfg+0x5a>
 800b36c:	e097      	b.n	800b49e <Argus_Cfg_PrepareDCACfg+0x18a>
 800b36e:	8223      	strh	r3, [r4, #16]
 800b370:	89a2      	ldrh	r2, [r4, #12]
 800b372:	233f      	movs	r3, #63	; 0x3f
 800b374:	0011      	movs	r1, r2
 800b376:	4399      	bics	r1, r3
 800b378:	1e0b      	subs	r3, r1, #0
 800b37a:	d100      	bne.n	800b37e <Argus_Cfg_PrepareDCACfg+0x6a>
 800b37c:	e077      	b.n	800b46e <Argus_Cfg_PrepareDCACfg+0x15a>
 800b37e:	81a3      	strh	r3, [r4, #12]
 800b380:	8a23      	ldrh	r3, [r4, #16]
 800b382:	4954      	ldr	r1, [pc, #336]	; (800b4d4 <Argus_Cfg_PrepareDCACfg+0x1c0>)
 800b384:	82f3      	strh	r3, [r6, #22]
 800b386:	8aa0      	ldrh	r0, [r4, #20]
 800b388:	f003 ffc4 	bl	800f314 <fp_div16>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	da64      	bge.n	800b45a <Argus_Cfg_PrepareDCACfg+0x146>
 800b390:	2308      	movs	r3, #8
 800b392:	1a18      	subs	r0, r3, r0
 800b394:	0900      	lsrs	r0, r0, #4
 800b396:	4240      	negs	r0, r0
 800b398:	ad01      	add	r5, sp, #4
 800b39a:	7028      	strb	r0, [r5, #0]
 800b39c:	8a60      	ldrh	r0, [r4, #18]
 800b39e:	494d      	ldr	r1, [pc, #308]	; (800b4d4 <Argus_Cfg_PrepareDCACfg+0x1c0>)
 800b3a0:	f003 ffb8 	bl	800f314 <fp_div16>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	da50      	bge.n	800b44a <Argus_Cfg_PrepareDCACfg+0x136>
 800b3a8:	2308      	movs	r3, #8
 800b3aa:	1a18      	subs	r0, r3, r0
 800b3ac:	0900      	lsrs	r0, r0, #4
 800b3ae:	4240      	negs	r0, r0
 800b3b0:	b2c0      	uxtb	r0, r0
 800b3b2:	70e8      	strb	r0, [r5, #3]
 800b3b4:	782b      	ldrb	r3, [r5, #0]
 800b3b6:	281f      	cmp	r0, #31
 800b3b8:	d852      	bhi.n	800b460 <Argus_Cfg_PrepareDCACfg+0x14c>
 800b3ba:	2b1f      	cmp	r3, #31
 800b3bc:	d800      	bhi.n	800b3c0 <Argus_Cfg_PrepareDCACfg+0xac>
 800b3be:	e077      	b.n	800b4b0 <Argus_Cfg_PrepareDCACfg+0x19c>
 800b3c0:	231f      	movs	r3, #31
 800b3c2:	702b      	strb	r3, [r5, #0]
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d102      	bne.n	800b3ce <Argus_Cfg_PrepareDCACfg+0xba>
 800b3c8:	3b1e      	subs	r3, #30
 800b3ca:	70eb      	strb	r3, [r5, #3]
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	220c      	movs	r2, #12
 800b3d0:	4940      	ldr	r1, [pc, #256]	; (800b4d4 <Argus_Cfg_PrepareDCACfg+0x1c0>)
 800b3d2:	f004 fa03 	bl	800f7dc <fp_mulu>
 800b3d6:	493f      	ldr	r1, [pc, #252]	; (800b4d4 <Argus_Cfg_PrepareDCACfg+0x1c0>)
 800b3d8:	8260      	strh	r0, [r4, #18]
 800b3da:	220c      	movs	r2, #12
 800b3dc:	7828      	ldrb	r0, [r5, #0]
 800b3de:	f004 f9fd 	bl	800f7dc <fp_mulu>
 800b3e2:	82a0      	strh	r0, [r4, #20]
 800b3e4:	7829      	ldrb	r1, [r5, #0]
 800b3e6:	7e33      	ldrb	r3, [r6, #24]
 800b3e8:	78e8      	ldrb	r0, [r5, #3]
 800b3ea:	428b      	cmp	r3, r1
 800b3ec:	d102      	bne.n	800b3f4 <Argus_Cfg_PrepareDCACfg+0xe0>
 800b3ee:	7ef3      	ldrb	r3, [r6, #27]
 800b3f0:	4283      	cmp	r3, r0
 800b3f2:	d023      	beq.n	800b43c <Argus_Cfg_PrepareDCACfg+0x128>
 800b3f4:	0409      	lsls	r1, r1, #16
 800b3f6:	0400      	lsls	r0, r0, #16
 800b3f8:	f003 ff8c 	bl	800f314 <fp_div16>
 800b3fc:	f004 f8da 	bl	800f5b4 <fp_log16>
 800b400:	21c0      	movs	r1, #192	; 0xc0
 800b402:	0289      	lsls	r1, r1, #10
 800b404:	f003 ff86 	bl	800f314 <fp_div16>
 800b408:	782e      	ldrb	r6, [r5, #0]
 800b40a:	0004      	movs	r4, r0
 800b40c:	f004 f874 	bl	800f4f8 <fp_exp16>
 800b410:	2210      	movs	r2, #16
 800b412:	0001      	movs	r1, r0
 800b414:	0030      	movs	r0, r6
 800b416:	f004 f9e1 	bl	800f7dc <fp_mulu>
 800b41a:	7068      	strb	r0, [r5, #1]
 800b41c:	0060      	lsls	r0, r4, #1
 800b41e:	782e      	ldrb	r6, [r5, #0]
 800b420:	f004 f86a 	bl	800f4f8 <fp_exp16>
 800b424:	2210      	movs	r2, #16
 800b426:	0001      	movs	r1, r0
 800b428:	0030      	movs	r0, r6
 800b42a:	f004 f9d7 	bl	800f7dc <fp_mulu>
 800b42e:	70a8      	strb	r0, [r5, #2]
 800b430:	0038      	movs	r0, r7
 800b432:	2204      	movs	r2, #4
 800b434:	0029      	movs	r1, r5
 800b436:	30d4      	adds	r0, #212	; 0xd4
 800b438:	f7fd f8f7 	bl	800862a <memcpy>
 800b43c:	0038      	movs	r0, r7
 800b43e:	f7ff fded 	bl	800b01c <Argus_Cfg_ResetDCA>
 800b442:	b002      	add	sp, #8
 800b444:	bc04      	pop	{r2}
 800b446:	4690      	mov	r8, r2
 800b448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b44a:	3008      	adds	r0, #8
 800b44c:	0900      	lsrs	r0, r0, #4
 800b44e:	b2c0      	uxtb	r0, r0
 800b450:	70e8      	strb	r0, [r5, #3]
 800b452:	782b      	ldrb	r3, [r5, #0]
 800b454:	281f      	cmp	r0, #31
 800b456:	d9b0      	bls.n	800b3ba <Argus_Cfg_PrepareDCACfg+0xa6>
 800b458:	e002      	b.n	800b460 <Argus_Cfg_PrepareDCACfg+0x14c>
 800b45a:	3008      	adds	r0, #8
 800b45c:	0900      	lsrs	r0, r0, #4
 800b45e:	e79b      	b.n	800b398 <Argus_Cfg_PrepareDCACfg+0x84>
 800b460:	221f      	movs	r2, #31
 800b462:	70ea      	strb	r2, [r5, #3]
 800b464:	2b1f      	cmp	r3, #31
 800b466:	d92f      	bls.n	800b4c8 <Argus_Cfg_PrepareDCACfg+0x1b4>
 800b468:	702a      	strb	r2, [r5, #0]
 800b46a:	201f      	movs	r0, #31
 800b46c:	e7af      	b.n	800b3ce <Argus_Cfg_PrepareDCACfg+0xba>
 800b46e:	7d30      	ldrb	r0, [r6, #20]
 800b470:	0281      	lsls	r1, r0, #10
 800b472:	4350      	muls	r0, r2
 800b474:	3020      	adds	r0, #32
 800b476:	0980      	lsrs	r0, r0, #6
 800b478:	f003 ff4c 	bl	800f314 <fp_div16>
 800b47c:	81a0      	strh	r0, [r4, #12]
 800b47e:	e77f      	b.n	800b380 <Argus_Cfg_PrepareDCACfg+0x6c>
 800b480:	7d30      	ldrb	r0, [r6, #20]
 800b482:	0281      	lsls	r1, r0, #10
 800b484:	4350      	muls	r0, r2
 800b486:	3020      	adds	r0, #32
 800b488:	0980      	lsrs	r0, r0, #6
 800b48a:	f003 ff43 	bl	800f314 <fp_div16>
 800b48e:	8a22      	ldrh	r2, [r4, #16]
 800b490:	233f      	movs	r3, #63	; 0x3f
 800b492:	0011      	movs	r1, r2
 800b494:	4399      	bics	r1, r3
 800b496:	81e0      	strh	r0, [r4, #14]
 800b498:	1e0b      	subs	r3, r1, #0
 800b49a:	d000      	beq.n	800b49e <Argus_Cfg_PrepareDCACfg+0x18a>
 800b49c:	e767      	b.n	800b36e <Argus_Cfg_PrepareDCACfg+0x5a>
 800b49e:	7d30      	ldrb	r0, [r6, #20]
 800b4a0:	0281      	lsls	r1, r0, #10
 800b4a2:	4350      	muls	r0, r2
 800b4a4:	3020      	adds	r0, #32
 800b4a6:	0980      	lsrs	r0, r0, #6
 800b4a8:	f003 ff34 	bl	800f314 <fp_div16>
 800b4ac:	8220      	strh	r0, [r4, #16]
 800b4ae:	e75f      	b.n	800b370 <Argus_Cfg_PrepareDCACfg+0x5c>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d102      	bne.n	800b4ba <Argus_Cfg_PrepareDCACfg+0x1a6>
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	70ea      	strb	r2, [r5, #3]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d000      	beq.n	800b4c0 <Argus_Cfg_PrepareDCACfg+0x1ac>
 800b4be:	e786      	b.n	800b3ce <Argus_Cfg_PrepareDCACfg+0xba>
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	702b      	strb	r3, [r5, #0]
 800b4c4:	78e8      	ldrb	r0, [r5, #3]
 800b4c6:	e782      	b.n	800b3ce <Argus_Cfg_PrepareDCACfg+0xba>
 800b4c8:	201f      	movs	r0, #31
 800b4ca:	e7f6      	b.n	800b4ba <Argus_Cfg_PrepareDCACfg+0x1a6>
 800b4cc:	2005      	movs	r0, #5
 800b4ce:	4240      	negs	r0, r0
 800b4d0:	e7b7      	b.n	800b442 <Argus_Cfg_PrepareDCACfg+0x12e>
 800b4d2:	46c0      	nop			; (mov r8, r8)
 800b4d4:	0001c28f 	.word	0x0001c28f

0800b4d8 <Argus_Cfg_ApplyDCA>:
 800b4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4da:	464e      	mov	r6, r9
 800b4dc:	4645      	mov	r5, r8
 800b4de:	46de      	mov	lr, fp
 800b4e0:	4657      	mov	r7, sl
 800b4e2:	b5e0      	push	{r5, r6, r7, lr}
 800b4e4:	0005      	movs	r5, r0
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	35bc      	adds	r5, #188	; 0xbc
 800b4ea:	6a2e      	ldr	r6, [r5, #32]
 800b4ec:	0004      	movs	r4, r0
 800b4ee:	56f3      	ldrsb	r3, [r6, r3]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d100      	bne.n	800b4f6 <Argus_Cfg_ApplyDCA+0x1e>
 800b4f4:	e147      	b.n	800b786 <Argus_Cfg_ApplyDCA+0x2ae>
 800b4f6:	23bc      	movs	r3, #188	; 0xbc
 800b4f8:	5cc3      	ldrb	r3, [r0, r3]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d100      	bne.n	800b500 <Argus_Cfg_ApplyDCA+0x28>
 800b4fe:	e142      	b.n	800b786 <Argus_Cfg_ApplyDCA+0x2ae>
 800b500:	277e      	movs	r7, #126	; 0x7e
 800b502:	68c3      	ldr	r3, [r0, #12]
 800b504:	4699      	mov	r9, r3
 800b506:	886b      	ldrh	r3, [r5, #2]
 800b508:	005a      	lsls	r2, r3, #1
 800b50a:	403a      	ands	r2, r7
 800b50c:	4690      	mov	r8, r2
 800b50e:	4641      	mov	r1, r8
 800b510:	896a      	ldrh	r2, [r5, #10]
 800b512:	099b      	lsrs	r3, r3, #6
 800b514:	0050      	lsls	r0, r2, #1
 800b516:	4007      	ands	r7, r0
 800b518:	0992      	lsrs	r2, r2, #6
 800b51a:	2900      	cmp	r1, #0
 800b51c:	d10d      	bne.n	800b53a <Argus_Cfg_ApplyDCA+0x62>
 800b51e:	2f00      	cmp	r7, #0
 800b520:	d000      	beq.n	800b524 <Argus_Cfg_ApplyDCA+0x4c>
 800b522:	e137      	b.n	800b794 <Argus_Cfg_ApplyDCA+0x2bc>
 800b524:	2b00      	cmp	r3, #0
 800b526:	d000      	beq.n	800b52a <Argus_Cfg_ApplyDCA+0x52>
 800b528:	e151      	b.n	800b7ce <Argus_Cfg_ApplyDCA+0x2f6>
 800b52a:	2a00      	cmp	r2, #0
 800b52c:	d06f      	beq.n	800b60e <Argus_Cfg_ApplyDCA+0x136>
 800b52e:	3380      	adds	r3, #128	; 0x80
 800b530:	4698      	mov	r8, r3
 800b532:	3780      	adds	r7, #128	; 0x80
 800b534:	3b7f      	subs	r3, #127	; 0x7f
 800b536:	0011      	movs	r1, r2
 800b538:	e00a      	b.n	800b550 <Argus_Cfg_ApplyDCA+0x78>
 800b53a:	2f00      	cmp	r7, #0
 800b53c:	d000      	beq.n	800b540 <Argus_Cfg_ApplyDCA+0x68>
 800b53e:	e12b      	b.n	800b798 <Argus_Cfg_ApplyDCA+0x2c0>
 800b540:	2b00      	cmp	r3, #0
 800b542:	d100      	bne.n	800b546 <Argus_Cfg_ApplyDCA+0x6e>
 800b544:	e147      	b.n	800b7d6 <Argus_Cfg_ApplyDCA+0x2fe>
 800b546:	2780      	movs	r7, #128	; 0x80
 800b548:	2a00      	cmp	r2, #0
 800b54a:	d1f4      	bne.n	800b536 <Argus_Cfg_ApplyDCA+0x5e>
 800b54c:	2101      	movs	r1, #1
 800b54e:	2201      	movs	r2, #1
 800b550:	428b      	cmp	r3, r1
 800b552:	d010      	beq.n	800b576 <Argus_Cfg_ApplyDCA+0x9e>
 800b554:	2351      	movs	r3, #81	; 0x51
 800b556:	469b      	mov	fp, r3
 800b558:	5ce3      	ldrb	r3, [r4, r3]
 800b55a:	0a09      	lsrs	r1, r1, #8
 800b55c:	469a      	mov	sl, r3
 800b55e:	2303      	movs	r3, #3
 800b560:	4650      	mov	r0, sl
 800b562:	4398      	bics	r0, r3
 800b564:	465b      	mov	r3, fp
 800b566:	4301      	orrs	r1, r0
 800b568:	54e1      	strb	r1, [r4, r3]
 800b56a:	3301      	adds	r3, #1
 800b56c:	54e2      	strb	r2, [r4, r3]
 800b56e:	2108      	movs	r1, #8
 800b570:	0020      	movs	r0, r4
 800b572:	f001 ffc5 	bl	800d500 <Argus_Dev_InvalidateRegister>
 800b576:	45b8      	cmp	r8, r7
 800b578:	d049      	beq.n	800b60e <Argus_Cfg_ApplyDCA+0x136>
 800b57a:	2f80      	cmp	r7, #128	; 0x80
 800b57c:	d100      	bne.n	800b580 <Argus_Cfg_ApplyDCA+0xa8>
 800b57e:	e114      	b.n	800b7aa <Argus_Cfg_ApplyDCA+0x2d2>
 800b580:	464b      	mov	r3, r9
 800b582:	2080      	movs	r0, #128	; 0x80
 800b584:	791b      	ldrb	r3, [r3, #4]
 800b586:	8a69      	ldrh	r1, [r5, #18]
 800b588:	1ac0      	subs	r0, r0, r3
 800b58a:	4378      	muls	r0, r7
 800b58c:	0609      	lsls	r1, r1, #24
 800b58e:	0400      	lsls	r0, r0, #16
 800b590:	f003 fec0 	bl	800f314 <fp_div16>
 800b594:	2800      	cmp	r0, #0
 800b596:	da00      	bge.n	800b59a <Argus_Cfg_ApplyDCA+0xc2>
 800b598:	e139      	b.n	800b80e <Argus_Cfg_ApplyDCA+0x336>
 800b59a:	2380      	movs	r3, #128	; 0x80
 800b59c:	021b      	lsls	r3, r3, #8
 800b59e:	469c      	mov	ip, r3
 800b5a0:	4460      	add	r0, ip
 800b5a2:	0c07      	lsrs	r7, r0, #16
 800b5a4:	464b      	mov	r3, r9
 800b5a6:	799b      	ldrb	r3, [r3, #6]
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	437b      	muls	r3, r7
 800b5ac:	469a      	mov	sl, r3
 800b5ae:	2380      	movs	r3, #128	; 0x80
 800b5b0:	4652      	mov	r2, sl
 800b5b2:	0020      	movs	r0, r4
 800b5b4:	4698      	mov	r8, r3
 800b5b6:	1a9b      	subs	r3, r3, r2
 800b5b8:	b25a      	sxtb	r2, r3
 800b5ba:	3112      	adds	r1, #18
 800b5bc:	301e      	adds	r0, #30
 800b5be:	469b      	mov	fp, r3
 800b5c0:	f7ff fb40 	bl	800ac44 <SetPattern.constprop.2>
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	791a      	ldrb	r2, [r3, #4]
 800b5c8:	465b      	mov	r3, fp
 800b5ca:	1a9a      	subs	r2, r3, r2
 800b5cc:	464b      	mov	r3, r9
 800b5ce:	795b      	ldrb	r3, [r3, #5]
 800b5d0:	b25b      	sxtb	r3, r3
 800b5d2:	189a      	adds	r2, r3, r2
 800b5d4:	7eb3      	ldrb	r3, [r6, #26]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d002      	beq.n	800b5e0 <Argus_Cfg_ApplyDCA+0x108>
 800b5da:	2f01      	cmp	r7, #1
 800b5dc:	d100      	bne.n	800b5e0 <Argus_Cfg_ApplyDCA+0x108>
 800b5de:	e100      	b.n	800b7e2 <Argus_Cfg_ApplyDCA+0x30a>
 800b5e0:	4649      	mov	r1, r9
 800b5e2:	0020      	movs	r0, r4
 800b5e4:	b256      	sxtb	r6, r2
 800b5e6:	0032      	movs	r2, r6
 800b5e8:	3123      	adds	r1, #35	; 0x23
 800b5ea:	302f      	adds	r0, #47	; 0x2f
 800b5ec:	f7ff fb2a 	bl	800ac44 <SetPattern.constprop.2>
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	0020      	movs	r0, r4
 800b5f4:	0032      	movs	r2, r6
 800b5f6:	3133      	adds	r1, #51	; 0x33
 800b5f8:	303f      	adds	r0, #63	; 0x3f
 800b5fa:	f7ff fb23 	bl	800ac44 <SetPattern.constprop.2>
 800b5fe:	2104      	movs	r1, #4
 800b600:	0020      	movs	r0, r4
 800b602:	f001 ff7d 	bl	800d500 <Argus_Dev_InvalidateRegister>
 800b606:	2106      	movs	r1, #6
 800b608:	0020      	movs	r0, r4
 800b60a:	f001 ff79 	bl	800d500 <Argus_Dev_InvalidateRegister>
 800b60e:	2159      	movs	r1, #89	; 0x59
 800b610:	7b2b      	ldrb	r3, [r5, #12]
 800b612:	5c60      	ldrb	r0, [r4, r1]
 800b614:	18eb      	adds	r3, r5, r3
 800b616:	7e1b      	ldrb	r3, [r3, #24]
 800b618:	08c2      	lsrs	r2, r0, #3
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d008      	beq.n	800b630 <Argus_Cfg_ApplyDCA+0x158>
 800b61e:	2207      	movs	r2, #7
 800b620:	00db      	lsls	r3, r3, #3
 800b622:	4002      	ands	r2, r0
 800b624:	4313      	orrs	r3, r2
 800b626:	5463      	strb	r3, [r4, r1]
 800b628:	0020      	movs	r0, r4
 800b62a:	394d      	subs	r1, #77	; 0x4d
 800b62c:	f001 ff68 	bl	800d500 <Argus_Dev_InvalidateRegister>
 800b630:	7b6a      	ldrb	r2, [r5, #13]
 800b632:	2156      	movs	r1, #86	; 0x56
 800b634:	18aa      	adds	r2, r5, r2
 800b636:	7f10      	ldrb	r0, [r2, #28]
 800b638:	223f      	movs	r2, #63	; 0x3f
 800b63a:	0016      	movs	r6, r2
 800b63c:	5c63      	ldrb	r3, [r4, r1]
 800b63e:	401e      	ands	r6, r3
 800b640:	42b0      	cmp	r0, r6
 800b642:	d007      	beq.n	800b654 <Argus_Cfg_ApplyDCA+0x17c>
 800b644:	4393      	bics	r3, r2
 800b646:	4002      	ands	r2, r0
 800b648:	4313      	orrs	r3, r2
 800b64a:	5463      	strb	r3, [r4, r1]
 800b64c:	0020      	movs	r0, r4
 800b64e:	394c      	subs	r1, #76	; 0x4c
 800b650:	f001 ff56 	bl	800d500 <Argus_Dev_InvalidateRegister>
 800b654:	89eb      	ldrh	r3, [r5, #14]
 800b656:	892a      	ldrh	r2, [r5, #8]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d013      	beq.n	800b684 <Argus_Cfg_ApplyDCA+0x1ac>
 800b65c:	2072      	movs	r0, #114	; 0x72
 800b65e:	267f      	movs	r6, #127	; 0x7f
 800b660:	3b01      	subs	r3, #1
 800b662:	5c21      	ldrb	r1, [r4, r0]
 800b664:	015b      	lsls	r3, r3, #5
 800b666:	0a1a      	lsrs	r2, r3, #8
 800b668:	43b1      	bics	r1, r6
 800b66a:	4032      	ands	r2, r6
 800b66c:	430a      	orrs	r2, r1
 800b66e:	2173      	movs	r1, #115	; 0x73
 800b670:	5422      	strb	r2, [r4, r0]
 800b672:	221f      	movs	r2, #31
 800b674:	5c60      	ldrb	r0, [r4, r1]
 800b676:	4002      	ands	r2, r0
 800b678:	4313      	orrs	r3, r2
 800b67a:	5463      	strb	r3, [r4, r1]
 800b67c:	0020      	movs	r0, r4
 800b67e:	3957      	subs	r1, #87	; 0x57
 800b680:	f001 ff3e 	bl	800d500 <Argus_Dev_InvalidateRegister>
 800b684:	7c2b      	ldrb	r3, [r5, #16]
 800b686:	79aa      	ldrb	r2, [r5, #6]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d070      	beq.n	800b76e <Argus_Cfg_ApplyDCA+0x296>
 800b68c:	1e5a      	subs	r2, r3, #1
 800b68e:	4193      	sbcs	r3, r2
 800b690:	2202      	movs	r2, #2
 800b692:	425b      	negs	r3, r3
 800b694:	4013      	ands	r3, r2
 800b696:	464a      	mov	r2, r9
 800b698:	7992      	ldrb	r2, [r2, #6]
 800b69a:	3b01      	subs	r3, #1
 800b69c:	08d2      	lsrs	r2, r2, #3
 800b69e:	4353      	muls	r3, r2
 800b6a0:	220f      	movs	r2, #15
 800b6a2:	7f20      	ldrb	r0, [r4, #28]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	18c1      	adds	r1, r0, r3
 800b6a8:	4011      	ands	r1, r2
 800b6aa:	4390      	bics	r0, r2
 800b6ac:	4301      	orrs	r1, r0
 800b6ae:	b248      	sxtb	r0, r1
 800b6b0:	0909      	lsrs	r1, r1, #4
 800b6b2:	1859      	adds	r1, r3, r1
 800b6b4:	4010      	ands	r0, r2
 800b6b6:	0109      	lsls	r1, r1, #4
 800b6b8:	4301      	orrs	r1, r0
 800b6ba:	7ee0      	ldrb	r0, [r4, #27]
 800b6bc:	7721      	strb	r1, [r4, #28]
 800b6be:	1819      	adds	r1, r3, r0
 800b6c0:	4011      	ands	r1, r2
 800b6c2:	4390      	bics	r0, r2
 800b6c4:	4301      	orrs	r1, r0
 800b6c6:	b248      	sxtb	r0, r1
 800b6c8:	0909      	lsrs	r1, r1, #4
 800b6ca:	1859      	adds	r1, r3, r1
 800b6cc:	4010      	ands	r0, r2
 800b6ce:	0109      	lsls	r1, r1, #4
 800b6d0:	4301      	orrs	r1, r0
 800b6d2:	7ea0      	ldrb	r0, [r4, #26]
 800b6d4:	76e1      	strb	r1, [r4, #27]
 800b6d6:	1819      	adds	r1, r3, r0
 800b6d8:	4011      	ands	r1, r2
 800b6da:	4390      	bics	r0, r2
 800b6dc:	4301      	orrs	r1, r0
 800b6de:	b248      	sxtb	r0, r1
 800b6e0:	0909      	lsrs	r1, r1, #4
 800b6e2:	1859      	adds	r1, r3, r1
 800b6e4:	4010      	ands	r0, r2
 800b6e6:	0109      	lsls	r1, r1, #4
 800b6e8:	4301      	orrs	r1, r0
 800b6ea:	7e60      	ldrb	r0, [r4, #25]
 800b6ec:	76a1      	strb	r1, [r4, #26]
 800b6ee:	1819      	adds	r1, r3, r0
 800b6f0:	4011      	ands	r1, r2
 800b6f2:	4390      	bics	r0, r2
 800b6f4:	4301      	orrs	r1, r0
 800b6f6:	b248      	sxtb	r0, r1
 800b6f8:	0909      	lsrs	r1, r1, #4
 800b6fa:	1859      	adds	r1, r3, r1
 800b6fc:	4010      	ands	r0, r2
 800b6fe:	0109      	lsls	r1, r1, #4
 800b700:	4301      	orrs	r1, r0
 800b702:	7e20      	ldrb	r0, [r4, #24]
 800b704:	7661      	strb	r1, [r4, #25]
 800b706:	1819      	adds	r1, r3, r0
 800b708:	4011      	ands	r1, r2
 800b70a:	4390      	bics	r0, r2
 800b70c:	4301      	orrs	r1, r0
 800b70e:	b248      	sxtb	r0, r1
 800b710:	0909      	lsrs	r1, r1, #4
 800b712:	1859      	adds	r1, r3, r1
 800b714:	4010      	ands	r0, r2
 800b716:	0109      	lsls	r1, r1, #4
 800b718:	4301      	orrs	r1, r0
 800b71a:	7de0      	ldrb	r0, [r4, #23]
 800b71c:	7621      	strb	r1, [r4, #24]
 800b71e:	1819      	adds	r1, r3, r0
 800b720:	4011      	ands	r1, r2
 800b722:	4390      	bics	r0, r2
 800b724:	4301      	orrs	r1, r0
 800b726:	b248      	sxtb	r0, r1
 800b728:	0909      	lsrs	r1, r1, #4
 800b72a:	1859      	adds	r1, r3, r1
 800b72c:	4010      	ands	r0, r2
 800b72e:	0109      	lsls	r1, r1, #4
 800b730:	4301      	orrs	r1, r0
 800b732:	7da0      	ldrb	r0, [r4, #22]
 800b734:	75e1      	strb	r1, [r4, #23]
 800b736:	1819      	adds	r1, r3, r0
 800b738:	4011      	ands	r1, r2
 800b73a:	4390      	bics	r0, r2
 800b73c:	4301      	orrs	r1, r0
 800b73e:	b248      	sxtb	r0, r1
 800b740:	0909      	lsrs	r1, r1, #4
 800b742:	1859      	adds	r1, r3, r1
 800b744:	4010      	ands	r0, r2
 800b746:	0109      	lsls	r1, r1, #4
 800b748:	4301      	orrs	r1, r0
 800b74a:	7d60      	ldrb	r0, [r4, #21]
 800b74c:	75a1      	strb	r1, [r4, #22]
 800b74e:	1819      	adds	r1, r3, r0
 800b750:	4011      	ands	r1, r2
 800b752:	4390      	bics	r0, r2
 800b754:	4301      	orrs	r1, r0
 800b756:	b248      	sxtb	r0, r1
 800b758:	0909      	lsrs	r1, r1, #4
 800b75a:	185b      	adds	r3, r3, r1
 800b75c:	011b      	lsls	r3, r3, #4
 800b75e:	4002      	ands	r2, r0
 800b760:	431a      	orrs	r2, r3
 800b762:	7562      	strb	r2, [r4, #21]
 800b764:	2102      	movs	r1, #2
 800b766:	0020      	movs	r0, r4
 800b768:	f001 feca 	bl	800d500 <Argus_Dev_InvalidateRegister>
 800b76c:	7c2b      	ldrb	r3, [r5, #16]
 800b76e:	896a      	ldrh	r2, [r5, #10]
 800b770:	71ab      	strb	r3, [r5, #6]
 800b772:	806a      	strh	r2, [r5, #2]
 800b774:	7b2a      	ldrb	r2, [r5, #12]
 800b776:	23bc      	movs	r3, #188	; 0xbc
 800b778:	712a      	strb	r2, [r5, #4]
 800b77a:	7b6a      	ldrb	r2, [r5, #13]
 800b77c:	716a      	strb	r2, [r5, #5]
 800b77e:	89ea      	ldrh	r2, [r5, #14]
 800b780:	812a      	strh	r2, [r5, #8]
 800b782:	2200      	movs	r2, #0
 800b784:	54e2      	strb	r2, [r4, r3]
 800b786:	2000      	movs	r0, #0
 800b788:	bc3c      	pop	{r2, r3, r4, r5}
 800b78a:	4690      	mov	r8, r2
 800b78c:	4699      	mov	r9, r3
 800b78e:	46a2      	mov	sl, r4
 800b790:	46ab      	mov	fp, r5
 800b792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b794:	2180      	movs	r1, #128	; 0x80
 800b796:	4688      	mov	r8, r1
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d000      	beq.n	800b79e <Argus_Cfg_ApplyDCA+0x2c6>
 800b79c:	e6d4      	b.n	800b548 <Argus_Cfg_ApplyDCA+0x70>
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	d112      	bne.n	800b7c8 <Argus_Cfg_ApplyDCA+0x2f0>
 800b7a2:	4547      	cmp	r7, r8
 800b7a4:	d000      	beq.n	800b7a8 <Argus_Cfg_ApplyDCA+0x2d0>
 800b7a6:	e6eb      	b.n	800b580 <Argus_Cfg_ApplyDCA+0xa8>
 800b7a8:	e731      	b.n	800b60e <Argus_Cfg_ApplyDCA+0x136>
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	0020      	movs	r0, r4
 800b7ae:	2211      	movs	r2, #17
 800b7b0:	3111      	adds	r1, #17
 800b7b2:	301d      	adds	r0, #29
 800b7b4:	f7fc ff39 	bl	800862a <memcpy>
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	0020      	movs	r0, r4
 800b7bc:	2221      	movs	r2, #33	; 0x21
 800b7be:	3122      	adds	r1, #34	; 0x22
 800b7c0:	302e      	adds	r0, #46	; 0x2e
 800b7c2:	f7fc ff32 	bl	800862a <memcpy>
 800b7c6:	e71a      	b.n	800b5fe <Argus_Cfg_ApplyDCA+0x126>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	0011      	movs	r1, r2
 800b7cc:	e6c0      	b.n	800b550 <Argus_Cfg_ApplyDCA+0x78>
 800b7ce:	2180      	movs	r1, #128	; 0x80
 800b7d0:	2780      	movs	r7, #128	; 0x80
 800b7d2:	4688      	mov	r8, r1
 800b7d4:	e6b8      	b.n	800b548 <Argus_Cfg_ApplyDCA+0x70>
 800b7d6:	2a00      	cmp	r2, #0
 800b7d8:	d0e7      	beq.n	800b7aa <Argus_Cfg_ApplyDCA+0x2d2>
 800b7da:	3780      	adds	r7, #128	; 0x80
 800b7dc:	3301      	adds	r3, #1
 800b7de:	0011      	movs	r1, r2
 800b7e0:	e6b6      	b.n	800b550 <Argus_Cfg_ApplyDCA+0x78>
 800b7e2:	464b      	mov	r3, r9
 800b7e4:	7999      	ldrb	r1, [r3, #6]
 800b7e6:	4643      	mov	r3, r8
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	1a9b      	subs	r3, r3, r2
 800b7ec:	1a1b      	subs	r3, r3, r0
 800b7ee:	4299      	cmp	r1, r3
 800b7f0:	dd00      	ble.n	800b7f4 <Argus_Cfg_ApplyDCA+0x31c>
 800b7f2:	e6f5      	b.n	800b5e0 <Argus_Cfg_ApplyDCA+0x108>
 800b7f4:	4643      	mov	r3, r8
 800b7f6:	1850      	adds	r0, r2, r1
 800b7f8:	4652      	mov	r2, sl
 800b7fa:	1a1b      	subs	r3, r3, r0
 800b7fc:	1a9b      	subs	r3, r3, r2
 800b7fe:	e000      	b.n	800b802 <Argus_Cfg_ApplyDCA+0x32a>
 800b800:	1840      	adds	r0, r0, r1
 800b802:	1a5b      	subs	r3, r3, r1
 800b804:	18ce      	adds	r6, r1, r3
 800b806:	0002      	movs	r2, r0
 800b808:	42b1      	cmp	r1, r6
 800b80a:	ddf9      	ble.n	800b800 <Argus_Cfg_ApplyDCA+0x328>
 800b80c:	e6e8      	b.n	800b5e0 <Argus_Cfg_ApplyDCA+0x108>
 800b80e:	2780      	movs	r7, #128	; 0x80
 800b810:	023f      	lsls	r7, r7, #8
 800b812:	1a38      	subs	r0, r7, r0
 800b814:	0c00      	lsrs	r0, r0, #16
 800b816:	4247      	negs	r7, r0
 800b818:	e6c4      	b.n	800b5a4 <Argus_Cfg_ApplyDCA+0xcc>
 800b81a:	46c0      	nop			; (mov r8, r8)

0800b81c <Argus_Cfg_GetIntDepth>:
 800b81c:	23be      	movs	r3, #190	; 0xbe
 800b81e:	5ac0      	ldrh	r0, [r0, r3]
 800b820:	4770      	bx	lr
 800b822:	46c0      	nop			; (mov r8, r8)

0800b824 <Argus_Cfg_GetOptPower>:
 800b824:	23c0      	movs	r3, #192	; 0xc0
 800b826:	b510      	push	{r4, lr}
 800b828:	5cc3      	ldrb	r3, [r0, r3]
 800b82a:	220c      	movs	r2, #12
 800b82c:	18c0      	adds	r0, r0, r3
 800b82e:	30d4      	adds	r0, #212	; 0xd4
 800b830:	7800      	ldrb	r0, [r0, #0]
 800b832:	4902      	ldr	r1, [pc, #8]	; (800b83c <Argus_Cfg_GetOptPower+0x18>)
 800b834:	f003 ffd2 	bl	800f7dc <fp_mulu>
 800b838:	b280      	uxth	r0, r0
 800b83a:	bd10      	pop	{r4, pc}
 800b83c:	0001c28f 	.word	0x0001c28f

0800b840 <Argus_Cfg_GetPxGain>:
 800b840:	23c1      	movs	r3, #193	; 0xc1
 800b842:	5cc3      	ldrb	r3, [r0, r3]
 800b844:	18c0      	adds	r0, r0, r3
 800b846:	30d8      	adds	r0, #216	; 0xd8
 800b848:	7800      	ldrb	r0, [r0, #0]
 800b84a:	4770      	bx	lr

0800b84c <Argus_Cfg_GetDCAState>:
 800b84c:	23c1      	movs	r3, #193	; 0xc1
 800b84e:	22c2      	movs	r2, #194	; 0xc2
 800b850:	5cc3      	ldrb	r3, [r0, r3]
 800b852:	5c82      	ldrb	r2, [r0, r2]
 800b854:	019b      	lsls	r3, r3, #6
 800b856:	4313      	orrs	r3, r2
 800b858:	22c0      	movs	r2, #192	; 0xc0
 800b85a:	5c82      	ldrb	r2, [r0, r2]
 800b85c:	2030      	movs	r0, #48	; 0x30
 800b85e:	0112      	lsls	r2, r2, #4
 800b860:	b2db      	uxtb	r3, r3
 800b862:	4010      	ands	r0, r2
 800b864:	4318      	orrs	r0, r3
 800b866:	4770      	bx	lr

0800b868 <FinishAuxMeasurement>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	0004      	movs	r4, r0
 800b86c:	000d      	movs	r5, r1
 800b86e:	2800      	cmp	r0, #0
 800b870:	db08      	blt.n	800b884 <FinishAuxMeasurement+0x1c>
 800b872:	23a4      	movs	r3, #164	; 0xa4
 800b874:	58eb      	ldr	r3, [r5, r3]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00b      	beq.n	800b892 <FinishAuxMeasurement+0x2a>
 800b87a:	22a8      	movs	r2, #168	; 0xa8
 800b87c:	0020      	movs	r0, r4
 800b87e:	58a9      	ldr	r1, [r5, r2]
 800b880:	4798      	blx	r3
 800b882:	bd70      	pop	{r4, r5, r6, pc}
 800b884:	4804      	ldr	r0, [pc, #16]	; (800b898 <FinishAuxMeasurement+0x30>)
 800b886:	f7fb fbf5 	bl	8007074 <print>
 800b88a:	2388      	movs	r3, #136	; 0x88
 800b88c:	4a03      	ldr	r2, [pc, #12]	; (800b89c <FinishAuxMeasurement+0x34>)
 800b88e:	50ea      	str	r2, [r5, r3]
 800b890:	e7ef      	b.n	800b872 <FinishAuxMeasurement+0xa>
 800b892:	0020      	movs	r0, r4
 800b894:	e7f5      	b.n	800b882 <FinishAuxMeasurement+0x1a>
 800b896:	46c0      	nop			; (mov r8, r8)
 800b898:	08012738 	.word	0x08012738
 800b89c:	0033dfff 	.word	0x0033dfff

0800b8a0 <PowerSave2>:
 800b8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8a2:	46c6      	mov	lr, r8
 800b8a4:	b500      	push	{lr}
 800b8a6:	0005      	movs	r5, r0
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	000c      	movs	r4, r1
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	db35      	blt.n	800b91c <PowerSave2+0x7c>
 800b8b0:	2381      	movs	r3, #129	; 0x81
 800b8b2:	68ca      	ldr	r2, [r1, #12]
 800b8b4:	5cd3      	ldrb	r3, [r2, r3]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d026      	beq.n	800b908 <PowerSave2+0x68>
 800b8ba:	0025      	movs	r5, r4
 800b8bc:	359d      	adds	r5, #157	; 0x9d
 800b8be:	2204      	movs	r2, #4
 800b8c0:	3158      	adds	r1, #88	; 0x58
 800b8c2:	0028      	movs	r0, r5
 800b8c4:	f7fc feb1 	bl	800862a <memcpy>
 800b8c8:	239e      	movs	r3, #158	; 0x9e
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2688      	movs	r6, #136	; 0x88
 800b8ce:	52e2      	strh	r2, [r4, r3]
 800b8d0:	32a0      	adds	r2, #160	; 0xa0
 800b8d2:	5ca1      	ldrb	r1, [r4, r2]
 800b8d4:	3b8f      	subs	r3, #143	; 0x8f
 800b8d6:	400b      	ands	r3, r1
 800b8d8:	54a3      	strb	r3, [r4, r2]
 800b8da:	59a3      	ldr	r3, [r4, r6]
 800b8dc:	3a60      	subs	r2, #96	; 0x60
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	51a3      	str	r3, [r4, r6]
 800b8e2:	23a8      	movs	r3, #168	; 0xa8
 800b8e4:	27a4      	movs	r7, #164	; 0xa4
 800b8e6:	0020      	movs	r0, r4
 800b8e8:	4698      	mov	r8, r3
 800b8ea:	58e3      	ldr	r3, [r4, r3]
 800b8ec:	0029      	movs	r1, r5
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	59e3      	ldr	r3, [r4, r7]
 800b8f4:	30ac      	adds	r0, #172	; 0xac
 800b8f6:	f002 fe05 	bl	800e504 <ADS_W_LaserSetup>
 800b8fa:	1e05      	subs	r5, r0, #0
 800b8fc:	db19      	blt.n	800b932 <PowerSave2+0x92>
 800b8fe:	0028      	movs	r0, r5
 800b900:	b002      	add	sp, #8
 800b902:	bc04      	pop	{r2}
 800b904:	4690      	mov	r8, r2
 800b906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b908:	23a4      	movs	r3, #164	; 0xa4
 800b90a:	58cb      	ldr	r3, [r1, r3]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d0f6      	beq.n	800b8fe <PowerSave2+0x5e>
 800b910:	22a8      	movs	r2, #168	; 0xa8
 800b912:	0028      	movs	r0, r5
 800b914:	58a1      	ldr	r1, [r4, r2]
 800b916:	4798      	blx	r3
 800b918:	0005      	movs	r5, r0
 800b91a:	e7f0      	b.n	800b8fe <PowerSave2+0x5e>
 800b91c:	480c      	ldr	r0, [pc, #48]	; (800b950 <PowerSave2+0xb0>)
 800b91e:	f7fb fba9 	bl	8007074 <print>
 800b922:	2388      	movs	r3, #136	; 0x88
 800b924:	4a0b      	ldr	r2, [pc, #44]	; (800b954 <PowerSave2+0xb4>)
 800b926:	50e2      	str	r2, [r4, r3]
 800b928:	331c      	adds	r3, #28
 800b92a:	58e3      	ldr	r3, [r4, r3]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1ef      	bne.n	800b910 <PowerSave2+0x70>
 800b930:	e7e5      	b.n	800b8fe <PowerSave2+0x5e>
 800b932:	4807      	ldr	r0, [pc, #28]	; (800b950 <PowerSave2+0xb0>)
 800b934:	f7fb fb9e 	bl	8007074 <print>
 800b938:	4b06      	ldr	r3, [pc, #24]	; (800b954 <PowerSave2+0xb4>)
 800b93a:	51a3      	str	r3, [r4, r6]
 800b93c:	59e3      	ldr	r3, [r4, r7]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d0dd      	beq.n	800b8fe <PowerSave2+0x5e>
 800b942:	4642      	mov	r2, r8
 800b944:	0028      	movs	r0, r5
 800b946:	58a1      	ldr	r1, [r4, r2]
 800b948:	4798      	blx	r3
 800b94a:	0005      	movs	r5, r0
 800b94c:	e7d7      	b.n	800b8fe <PowerSave2+0x5e>
 800b94e:	46c0      	nop			; (mov r8, r8)
 800b950:	080127a0 	.word	0x080127a0
 800b954:	0033dfff 	.word	0x0033dfff

0800b958 <AuxMeasurement5>:
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	0005      	movs	r5, r0
 800b95c:	b082      	sub	sp, #8
 800b95e:	000c      	movs	r4, r1
 800b960:	2800      	cmp	r0, #0
 800b962:	db18      	blt.n	800b996 <AuxMeasurement5+0x3e>
 800b964:	0025      	movs	r5, r4
 800b966:	2688      	movs	r6, #136	; 0x88
 800b968:	359d      	adds	r5, #157	; 0x9d
 800b96a:	2204      	movs	r2, #4
 800b96c:	2100      	movs	r1, #0
 800b96e:	0028      	movs	r0, r5
 800b970:	f7fc fe66 	bl	8008640 <memset>
 800b974:	2210      	movs	r2, #16
 800b976:	0020      	movs	r0, r4
 800b978:	59a3      	ldr	r3, [r4, r6]
 800b97a:	0029      	movs	r1, r5
 800b97c:	4313      	orrs	r3, r2
 800b97e:	51a3      	str	r3, [r4, r6]
 800b980:	9400      	str	r4, [sp, #0]
 800b982:	4b12      	ldr	r3, [pc, #72]	; (800b9cc <AuxMeasurement5+0x74>)
 800b984:	2200      	movs	r2, #0
 800b986:	30ac      	adds	r0, #172	; 0xac
 800b988:	f002 fcf4 	bl	800e374 <ADS_W_SequenceCounter>
 800b98c:	1e05      	subs	r5, r0, #0
 800b98e:	db12      	blt.n	800b9b6 <AuxMeasurement5+0x5e>
 800b990:	0028      	movs	r0, r5
 800b992:	b002      	add	sp, #8
 800b994:	bd70      	pop	{r4, r5, r6, pc}
 800b996:	480e      	ldr	r0, [pc, #56]	; (800b9d0 <AuxMeasurement5+0x78>)
 800b998:	f7fb fb6c 	bl	8007074 <print>
 800b99c:	2388      	movs	r3, #136	; 0x88
 800b99e:	4a0d      	ldr	r2, [pc, #52]	; (800b9d4 <AuxMeasurement5+0x7c>)
 800b9a0:	50e2      	str	r2, [r4, r3]
 800b9a2:	331c      	adds	r3, #28
 800b9a4:	58e3      	ldr	r3, [r4, r3]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0f2      	beq.n	800b990 <AuxMeasurement5+0x38>
 800b9aa:	22a8      	movs	r2, #168	; 0xa8
 800b9ac:	0028      	movs	r0, r5
 800b9ae:	58a1      	ldr	r1, [r4, r2]
 800b9b0:	4798      	blx	r3
 800b9b2:	0005      	movs	r5, r0
 800b9b4:	e7ec      	b.n	800b990 <AuxMeasurement5+0x38>
 800b9b6:	4806      	ldr	r0, [pc, #24]	; (800b9d0 <AuxMeasurement5+0x78>)
 800b9b8:	f7fb fb5c 	bl	8007074 <print>
 800b9bc:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <AuxMeasurement5+0x7c>)
 800b9be:	51a3      	str	r3, [r4, r6]
 800b9c0:	23a4      	movs	r3, #164	; 0xa4
 800b9c2:	58e3      	ldr	r3, [r4, r3]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1f0      	bne.n	800b9aa <AuxMeasurement5+0x52>
 800b9c8:	e7e2      	b.n	800b990 <AuxMeasurement5+0x38>
 800b9ca:	46c0      	nop			; (mov r8, r8)
 800b9cc:	0800b9d9 	.word	0x0800b9d9
 800b9d0:	08012738 	.word	0x08012738
 800b9d4:	0033dfff 	.word	0x0033dfff

0800b9d8 <AuxMeasurement6>:
 800b9d8:	b570      	push	{r4, r5, r6, lr}
 800b9da:	0005      	movs	r5, r0
 800b9dc:	b082      	sub	sp, #8
 800b9de:	000c      	movs	r4, r1
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	db2c      	blt.n	800ba3e <AuxMeasurement6+0x66>
 800b9e4:	0025      	movs	r5, r4
 800b9e6:	359d      	adds	r5, #157	; 0x9d
 800b9e8:	2203      	movs	r2, #3
 800b9ea:	3171      	adds	r1, #113	; 0x71
 800b9ec:	0028      	movs	r0, r5
 800b9ee:	f7fc fe1c 	bl	800862a <memcpy>
 800b9f2:	2394      	movs	r3, #148	; 0x94
 800b9f4:	219f      	movs	r1, #159	; 0x9f
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	68e2      	ldr	r2, [r4, #12]
 800b9fa:	2688      	movs	r6, #136	; 0x88
 800b9fc:	5ad3      	ldrh	r3, [r2, r3]
 800b9fe:	5c62      	ldrb	r2, [r4, r1]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	4002      	ands	r2, r0
 800ba04:	015b      	lsls	r3, r3, #5
 800ba06:	431a      	orrs	r2, r3
 800ba08:	5462      	strb	r2, [r4, r1]
 800ba0a:	2280      	movs	r2, #128	; 0x80
 800ba0c:	045b      	lsls	r3, r3, #17
 800ba0e:	4252      	negs	r2, r2
 800ba10:	0e5b      	lsrs	r3, r3, #25
 800ba12:	4313      	orrs	r3, r2
 800ba14:	321f      	adds	r2, #31
 800ba16:	32ff      	adds	r2, #255	; 0xff
 800ba18:	54a3      	strb	r3, [r4, r2]
 800ba1a:	2380      	movs	r3, #128	; 0x80
 800ba1c:	0020      	movs	r0, r4
 800ba1e:	59a2      	ldr	r2, [r4, r6]
 800ba20:	01db      	lsls	r3, r3, #7
 800ba22:	4313      	orrs	r3, r2
 800ba24:	51a3      	str	r3, [r4, r6]
 800ba26:	0029      	movs	r1, r5
 800ba28:	9400      	str	r4, [sp, #0]
 800ba2a:	4b12      	ldr	r3, [pc, #72]	; (800ba74 <AuxMeasurement6+0x9c>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	30ac      	adds	r0, #172	; 0xac
 800ba30:	f003 f824 	bl	800ea7c <ADS_W_EMEControl>
 800ba34:	1e05      	subs	r5, r0, #0
 800ba36:	db12      	blt.n	800ba5e <AuxMeasurement6+0x86>
 800ba38:	0028      	movs	r0, r5
 800ba3a:	b002      	add	sp, #8
 800ba3c:	bd70      	pop	{r4, r5, r6, pc}
 800ba3e:	480e      	ldr	r0, [pc, #56]	; (800ba78 <AuxMeasurement6+0xa0>)
 800ba40:	f7fb fb18 	bl	8007074 <print>
 800ba44:	2388      	movs	r3, #136	; 0x88
 800ba46:	4a0d      	ldr	r2, [pc, #52]	; (800ba7c <AuxMeasurement6+0xa4>)
 800ba48:	50e2      	str	r2, [r4, r3]
 800ba4a:	331c      	adds	r3, #28
 800ba4c:	58e3      	ldr	r3, [r4, r3]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0f2      	beq.n	800ba38 <AuxMeasurement6+0x60>
 800ba52:	22a8      	movs	r2, #168	; 0xa8
 800ba54:	0028      	movs	r0, r5
 800ba56:	58a1      	ldr	r1, [r4, r2]
 800ba58:	4798      	blx	r3
 800ba5a:	0005      	movs	r5, r0
 800ba5c:	e7ec      	b.n	800ba38 <AuxMeasurement6+0x60>
 800ba5e:	4806      	ldr	r0, [pc, #24]	; (800ba78 <AuxMeasurement6+0xa0>)
 800ba60:	f7fb fb08 	bl	8007074 <print>
 800ba64:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <AuxMeasurement6+0xa4>)
 800ba66:	51a3      	str	r3, [r4, r6]
 800ba68:	23a4      	movs	r3, #164	; 0xa4
 800ba6a:	58e3      	ldr	r3, [r4, r3]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1f0      	bne.n	800ba52 <AuxMeasurement6+0x7a>
 800ba70:	e7e2      	b.n	800ba38 <AuxMeasurement6+0x60>
 800ba72:	46c0      	nop			; (mov r8, r8)
 800ba74:	0800b869 	.word	0x0800b869
 800ba78:	08012738 	.word	0x08012738
 800ba7c:	0033dfff 	.word	0x0033dfff

0800ba80 <DisableClock2>:
 800ba80:	b530      	push	{r4, r5, lr}
 800ba82:	0005      	movs	r5, r0
 800ba84:	b083      	sub	sp, #12
 800ba86:	000c      	movs	r4, r1
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	db12      	blt.n	800bab2 <DisableClock2+0x32>
 800ba8c:	229e      	movs	r2, #158	; 0x9e
 800ba8e:	5c8b      	ldrb	r3, [r1, r2]
 800ba90:	2111      	movs	r1, #17
 800ba92:	0020      	movs	r0, r4
 800ba94:	438b      	bics	r3, r1
 800ba96:	0021      	movs	r1, r4
 800ba98:	54a3      	strb	r3, [r4, r2]
 800ba9a:	9400      	str	r4, [sp, #0]
 800ba9c:	4b0d      	ldr	r3, [pc, #52]	; (800bad4 <DisableClock2+0x54>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	319d      	adds	r1, #157	; 0x9d
 800baa2:	30ac      	adds	r0, #172	; 0xac
 800baa4:	f002 fdf6 	bl	800e694 <ADS_W_BlockEnable>
 800baa8:	1e05      	subs	r5, r0, #0
 800baaa:	db02      	blt.n	800bab2 <DisableClock2+0x32>
 800baac:	0028      	movs	r0, r5
 800baae:	b003      	add	sp, #12
 800bab0:	bd30      	pop	{r4, r5, pc}
 800bab2:	4809      	ldr	r0, [pc, #36]	; (800bad8 <DisableClock2+0x58>)
 800bab4:	f7fb fade 	bl	8007074 <print>
 800bab8:	2388      	movs	r3, #136	; 0x88
 800baba:	4a08      	ldr	r2, [pc, #32]	; (800badc <DisableClock2+0x5c>)
 800babc:	50e2      	str	r2, [r4, r3]
 800babe:	331c      	adds	r3, #28
 800bac0:	58e3      	ldr	r3, [r4, r3]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0f2      	beq.n	800baac <DisableClock2+0x2c>
 800bac6:	22a8      	movs	r2, #168	; 0xa8
 800bac8:	0028      	movs	r0, r5
 800baca:	58a1      	ldr	r1, [r4, r2]
 800bacc:	4798      	blx	r3
 800bace:	0005      	movs	r5, r0
 800bad0:	e7ec      	b.n	800baac <DisableClock2+0x2c>
 800bad2:	46c0      	nop			; (mov r8, r8)
 800bad4:	0800c2a5 	.word	0x0800c2a5
 800bad8:	08012704 	.word	0x08012704
 800badc:	0033dfff 	.word	0x0033dfff

0800bae0 <WriteBlockEnable2>:
 800bae0:	b530      	push	{r4, r5, lr}
 800bae2:	0005      	movs	r5, r0
 800bae4:	b083      	sub	sp, #12
 800bae6:	000c      	movs	r4, r1
 800bae8:	2800      	cmp	r0, #0
 800baea:	db1d      	blt.n	800bb28 <WriteBlockEnable2+0x48>
 800baec:	239e      	movs	r3, #158	; 0x9e
 800baee:	5cca      	ldrb	r2, [r1, r3]
 800baf0:	2300      	movs	r3, #0
 800baf2:	06d1      	lsls	r1, r2, #27
 800baf4:	d413      	bmi.n	800bb1e <WriteBlockEnable2+0x3e>
 800baf6:	22f0      	movs	r2, #240	; 0xf0
 800baf8:	54a3      	strb	r3, [r4, r2]
 800bafa:	2360      	movs	r3, #96	; 0x60
 800bafc:	0021      	movs	r1, r4
 800bafe:	0020      	movs	r0, r4
 800bb00:	5ce2      	ldrb	r2, [r4, r3]
 800bb02:	333e      	adds	r3, #62	; 0x3e
 800bb04:	54e2      	strb	r2, [r4, r3]
 800bb06:	9400      	str	r4, [sp, #0]
 800bb08:	4b0f      	ldr	r3, [pc, #60]	; (800bb48 <WriteBlockEnable2+0x68>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	319d      	adds	r1, #157	; 0x9d
 800bb0e:	30ac      	adds	r0, #172	; 0xac
 800bb10:	f003 fb38 	bl	800f184 <ADS_WR_BlockEnable>
 800bb14:	1e05      	subs	r5, r0, #0
 800bb16:	db07      	blt.n	800bb28 <WriteBlockEnable2+0x48>
 800bb18:	0028      	movs	r0, r5
 800bb1a:	b003      	add	sp, #12
 800bb1c:	bd30      	pop	{r4, r5, pc}
 800bb1e:	2301      	movs	r3, #1
 800bb20:	405a      	eors	r2, r3
 800bb22:	2301      	movs	r3, #1
 800bb24:	4013      	ands	r3, r2
 800bb26:	e7e6      	b.n	800baf6 <WriteBlockEnable2+0x16>
 800bb28:	4808      	ldr	r0, [pc, #32]	; (800bb4c <WriteBlockEnable2+0x6c>)
 800bb2a:	f7fb faa3 	bl	8007074 <print>
 800bb2e:	2388      	movs	r3, #136	; 0x88
 800bb30:	4a07      	ldr	r2, [pc, #28]	; (800bb50 <WriteBlockEnable2+0x70>)
 800bb32:	50e2      	str	r2, [r4, r3]
 800bb34:	331c      	adds	r3, #28
 800bb36:	58e3      	ldr	r3, [r4, r3]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d0ed      	beq.n	800bb18 <WriteBlockEnable2+0x38>
 800bb3c:	22a8      	movs	r2, #168	; 0xa8
 800bb3e:	0028      	movs	r0, r5
 800bb40:	58a1      	ldr	r1, [r4, r2]
 800bb42:	4798      	blx	r3
 800bb44:	0005      	movs	r5, r0
 800bb46:	e7e7      	b.n	800bb18 <WriteBlockEnable2+0x38>
 800bb48:	0800c3a1 	.word	0x0800c3a1
 800bb4c:	08012704 	.word	0x08012704
 800bb50:	0033dfff 	.word	0x0033dfff

0800bb54 <AuxMeasurement4>:
 800bb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb56:	0005      	movs	r5, r0
 800bb58:	b083      	sub	sp, #12
 800bb5a:	000c      	movs	r4, r1
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	db4a      	blt.n	800bbf6 <AuxMeasurement4+0xa2>
 800bb60:	2788      	movs	r7, #136	; 0x88
 800bb62:	000d      	movs	r5, r1
 800bb64:	000e      	movs	r6, r1
 800bb66:	59cb      	ldr	r3, [r1, r7]
 800bb68:	359d      	adds	r5, #157	; 0x9d
 800bb6a:	36ac      	adds	r6, #172	; 0xac
 800bb6c:	039b      	lsls	r3, r3, #14
 800bb6e:	d406      	bmi.n	800bb7e <AuxMeasurement4+0x2a>
 800bb70:	237d      	movs	r3, #125	; 0x7d
 800bb72:	5cca      	ldrb	r2, [r1, r3]
 800bb74:	3301      	adds	r3, #1
 800bb76:	5ccb      	ldrb	r3, [r1, r3]
 800bb78:	0212      	lsls	r2, r2, #8
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	d01a      	beq.n	800bbb4 <AuxMeasurement4+0x60>
 800bb7e:	0021      	movs	r1, r4
 800bb80:	2204      	movs	r2, #4
 800bb82:	317c      	adds	r1, #124	; 0x7c
 800bb84:	0028      	movs	r0, r5
 800bb86:	f7fc fd50 	bl	800862a <memcpy>
 800bb8a:	239e      	movs	r3, #158	; 0x9e
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2788      	movs	r7, #136	; 0x88
 800bb90:	52e2      	strh	r2, [r4, r3]
 800bb92:	2380      	movs	r3, #128	; 0x80
 800bb94:	59e2      	ldr	r2, [r4, r7]
 800bb96:	029b      	lsls	r3, r3, #10
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	51e3      	str	r3, [r4, r7]
 800bb9c:	0029      	movs	r1, r5
 800bb9e:	9400      	str	r4, [sp, #0]
 800bba0:	4b1a      	ldr	r3, [pc, #104]	; (800bc0c <AuxMeasurement4+0xb8>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	0030      	movs	r0, r6
 800bba6:	f003 f895 	bl	800ecd4 <ADS_W_EMEChannelSelect3>
 800bbaa:	1e05      	subs	r5, r0, #0
 800bbac:	db14      	blt.n	800bbd8 <AuxMeasurement4+0x84>
 800bbae:	0028      	movs	r0, r5
 800bbb0:	b003      	add	sp, #12
 800bbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb4:	2204      	movs	r2, #4
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	0028      	movs	r0, r5
 800bbba:	f7fc fd41 	bl	8008640 <memset>
 800bbbe:	2210      	movs	r2, #16
 800bbc0:	59e3      	ldr	r3, [r4, r7]
 800bbc2:	0029      	movs	r1, r5
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	51e3      	str	r3, [r4, r7]
 800bbc8:	9400      	str	r4, [sp, #0]
 800bbca:	4b11      	ldr	r3, [pc, #68]	; (800bc10 <AuxMeasurement4+0xbc>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	0030      	movs	r0, r6
 800bbd0:	f002 fbd0 	bl	800e374 <ADS_W_SequenceCounter>
 800bbd4:	1e05      	subs	r5, r0, #0
 800bbd6:	daea      	bge.n	800bbae <AuxMeasurement4+0x5a>
 800bbd8:	480e      	ldr	r0, [pc, #56]	; (800bc14 <AuxMeasurement4+0xc0>)
 800bbda:	f7fb fa4b 	bl	8007074 <print>
 800bbde:	4b0e      	ldr	r3, [pc, #56]	; (800bc18 <AuxMeasurement4+0xc4>)
 800bbe0:	51e3      	str	r3, [r4, r7]
 800bbe2:	23a4      	movs	r3, #164	; 0xa4
 800bbe4:	58e3      	ldr	r3, [r4, r3]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0e1      	beq.n	800bbae <AuxMeasurement4+0x5a>
 800bbea:	22a8      	movs	r2, #168	; 0xa8
 800bbec:	0028      	movs	r0, r5
 800bbee:	58a1      	ldr	r1, [r4, r2]
 800bbf0:	4798      	blx	r3
 800bbf2:	0005      	movs	r5, r0
 800bbf4:	e7db      	b.n	800bbae <AuxMeasurement4+0x5a>
 800bbf6:	4807      	ldr	r0, [pc, #28]	; (800bc14 <AuxMeasurement4+0xc0>)
 800bbf8:	f7fb fa3c 	bl	8007074 <print>
 800bbfc:	2388      	movs	r3, #136	; 0x88
 800bbfe:	4a06      	ldr	r2, [pc, #24]	; (800bc18 <AuxMeasurement4+0xc4>)
 800bc00:	50e2      	str	r2, [r4, r3]
 800bc02:	331c      	adds	r3, #28
 800bc04:	58e3      	ldr	r3, [r4, r3]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1ef      	bne.n	800bbea <AuxMeasurement4+0x96>
 800bc0a:	e7d0      	b.n	800bbae <AuxMeasurement4+0x5a>
 800bc0c:	0800b959 	.word	0x0800b959
 800bc10:	0800b9d9 	.word	0x0800b9d9
 800bc14:	08012738 	.word	0x08012738
 800bc18:	0033dfff 	.word	0x0033dfff

0800bc1c <AuxMeasurement3>:
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	0005      	movs	r5, r0
 800bc20:	b082      	sub	sp, #8
 800bc22:	000c      	movs	r4, r1
 800bc24:	2800      	cmp	r0, #0
 800bc26:	db36      	blt.n	800bc96 <AuxMeasurement3+0x7a>
 800bc28:	2388      	movs	r3, #136	; 0x88
 800bc2a:	58cb      	ldr	r3, [r1, r3]
 800bc2c:	03db      	lsls	r3, r3, #15
 800bc2e:	d40d      	bmi.n	800bc4c <AuxMeasurement3+0x30>
 800bc30:	2379      	movs	r3, #121	; 0x79
 800bc32:	227a      	movs	r2, #122	; 0x7a
 800bc34:	5ccb      	ldrb	r3, [r1, r3]
 800bc36:	5c8a      	ldrb	r2, [r1, r2]
 800bc38:	041b      	lsls	r3, r3, #16
 800bc3a:	0212      	lsls	r2, r2, #8
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	227b      	movs	r2, #123	; 0x7b
 800bc40:	5c8a      	ldrb	r2, [r1, r2]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	22e6      	movs	r2, #230	; 0xe6
 800bc46:	0412      	lsls	r2, r2, #16
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d020      	beq.n	800bc8e <AuxMeasurement3+0x72>
 800bc4c:	0025      	movs	r5, r4
 800bc4e:	0021      	movs	r1, r4
 800bc50:	359d      	adds	r5, #157	; 0x9d
 800bc52:	2204      	movs	r2, #4
 800bc54:	3178      	adds	r1, #120	; 0x78
 800bc56:	0028      	movs	r0, r5
 800bc58:	f7fc fce7 	bl	800862a <memcpy>
 800bc5c:	239e      	movs	r3, #158	; 0x9e
 800bc5e:	22e6      	movs	r2, #230	; 0xe6
 800bc60:	52e2      	strh	r2, [r4, r3]
 800bc62:	2200      	movs	r2, #0
 800bc64:	3302      	adds	r3, #2
 800bc66:	2688      	movs	r6, #136	; 0x88
 800bc68:	54e2      	strb	r2, [r4, r3]
 800bc6a:	2380      	movs	r3, #128	; 0x80
 800bc6c:	0020      	movs	r0, r4
 800bc6e:	59a2      	ldr	r2, [r4, r6]
 800bc70:	025b      	lsls	r3, r3, #9
 800bc72:	4313      	orrs	r3, r2
 800bc74:	51a3      	str	r3, [r4, r6]
 800bc76:	0029      	movs	r1, r5
 800bc78:	9400      	str	r4, [sp, #0]
 800bc7a:	4b14      	ldr	r3, [pc, #80]	; (800bccc <AuxMeasurement3+0xb0>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	30ac      	adds	r0, #172	; 0xac
 800bc80:	f002 ffc4 	bl	800ec0c <ADS_W_EMEChannelSelect2>
 800bc84:	1e05      	subs	r5, r0, #0
 800bc86:	db16      	blt.n	800bcb6 <AuxMeasurement3+0x9a>
 800bc88:	0028      	movs	r0, r5
 800bc8a:	b002      	add	sp, #8
 800bc8c:	bd70      	pop	{r4, r5, r6, pc}
 800bc8e:	f7ff ff61 	bl	800bb54 <AuxMeasurement4>
 800bc92:	0005      	movs	r5, r0
 800bc94:	e7f8      	b.n	800bc88 <AuxMeasurement3+0x6c>
 800bc96:	480e      	ldr	r0, [pc, #56]	; (800bcd0 <AuxMeasurement3+0xb4>)
 800bc98:	f7fb f9ec 	bl	8007074 <print>
 800bc9c:	2388      	movs	r3, #136	; 0x88
 800bc9e:	4a0d      	ldr	r2, [pc, #52]	; (800bcd4 <AuxMeasurement3+0xb8>)
 800bca0:	50e2      	str	r2, [r4, r3]
 800bca2:	331c      	adds	r3, #28
 800bca4:	58e3      	ldr	r3, [r4, r3]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d0ee      	beq.n	800bc88 <AuxMeasurement3+0x6c>
 800bcaa:	22a8      	movs	r2, #168	; 0xa8
 800bcac:	0028      	movs	r0, r5
 800bcae:	58a1      	ldr	r1, [r4, r2]
 800bcb0:	4798      	blx	r3
 800bcb2:	0005      	movs	r5, r0
 800bcb4:	e7e8      	b.n	800bc88 <AuxMeasurement3+0x6c>
 800bcb6:	4806      	ldr	r0, [pc, #24]	; (800bcd0 <AuxMeasurement3+0xb4>)
 800bcb8:	f7fb f9dc 	bl	8007074 <print>
 800bcbc:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <AuxMeasurement3+0xb8>)
 800bcbe:	51a3      	str	r3, [r4, r6]
 800bcc0:	23a4      	movs	r3, #164	; 0xa4
 800bcc2:	58e3      	ldr	r3, [r4, r3]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1f0      	bne.n	800bcaa <AuxMeasurement3+0x8e>
 800bcc8:	e7de      	b.n	800bc88 <AuxMeasurement3+0x6c>
 800bcca:	46c0      	nop			; (mov r8, r8)
 800bccc:	0800bb55 	.word	0x0800bb55
 800bcd0:	08012738 	.word	0x08012738
 800bcd4:	0033dfff 	.word	0x0033dfff

0800bcd8 <AuxMeasurement2>:
 800bcd8:	b570      	push	{r4, r5, r6, lr}
 800bcda:	0005      	movs	r5, r0
 800bcdc:	b082      	sub	sp, #8
 800bcde:	000c      	movs	r4, r1
 800bce0:	2800      	cmp	r0, #0
 800bce2:	da00      	bge.n	800bce6 <AuxMeasurement2+0xe>
 800bce4:	e06c      	b.n	800bdc0 <AuxMeasurement2+0xe8>
 800bce6:	2188      	movs	r1, #136	; 0x88
 800bce8:	5863      	ldr	r3, [r4, r1]
 800bcea:	041b      	lsls	r3, r3, #16
 800bcec:	d40a      	bmi.n	800bd04 <AuxMeasurement2+0x2c>
 800bcee:	2375      	movs	r3, #117	; 0x75
 800bcf0:	2276      	movs	r2, #118	; 0x76
 800bcf2:	5ce3      	ldrb	r3, [r4, r3]
 800bcf4:	5ca2      	ldrb	r2, [r4, r2]
 800bcf6:	041b      	lsls	r3, r3, #16
 800bcf8:	0212      	lsls	r2, r2, #8
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	2277      	movs	r2, #119	; 0x77
 800bcfe:	5ca2      	ldrb	r2, [r4, r2]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	d01f      	beq.n	800bd44 <AuxMeasurement2+0x6c>
 800bd04:	0025      	movs	r5, r4
 800bd06:	0021      	movs	r1, r4
 800bd08:	359d      	adds	r5, #157	; 0x9d
 800bd0a:	2204      	movs	r2, #4
 800bd0c:	3174      	adds	r1, #116	; 0x74
 800bd0e:	0028      	movs	r0, r5
 800bd10:	f7fc fc8b 	bl	800862a <memcpy>
 800bd14:	2200      	movs	r2, #0
 800bd16:	239e      	movs	r3, #158	; 0x9e
 800bd18:	2688      	movs	r6, #136	; 0x88
 800bd1a:	52e2      	strh	r2, [r4, r3]
 800bd1c:	3302      	adds	r3, #2
 800bd1e:	54e2      	strb	r2, [r4, r3]
 800bd20:	2380      	movs	r3, #128	; 0x80
 800bd22:	0020      	movs	r0, r4
 800bd24:	59a2      	ldr	r2, [r4, r6]
 800bd26:	021b      	lsls	r3, r3, #8
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	51a3      	str	r3, [r4, r6]
 800bd2c:	0029      	movs	r1, r5
 800bd2e:	9400      	str	r4, [sp, #0]
 800bd30:	4b2b      	ldr	r3, [pc, #172]	; (800bde0 <AuxMeasurement2+0x108>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	30ac      	adds	r0, #172	; 0xac
 800bd36:	f002 ff05 	bl	800eb44 <ADS_W_EMEChannelSelect1>
 800bd3a:	1e05      	subs	r5, r0, #0
 800bd3c:	db31      	blt.n	800bda2 <AuxMeasurement2+0xca>
 800bd3e:	0028      	movs	r0, r5
 800bd40:	b002      	add	sp, #8
 800bd42:	bd70      	pop	{r4, r5, r6, pc}
 800bd44:	5863      	ldr	r3, [r4, r1]
 800bd46:	03db      	lsls	r3, r3, #15
 800bd48:	d40d      	bmi.n	800bd66 <AuxMeasurement2+0x8e>
 800bd4a:	2379      	movs	r3, #121	; 0x79
 800bd4c:	227a      	movs	r2, #122	; 0x7a
 800bd4e:	5ce3      	ldrb	r3, [r4, r3]
 800bd50:	5ca2      	ldrb	r2, [r4, r2]
 800bd52:	041b      	lsls	r3, r3, #16
 800bd54:	0212      	lsls	r2, r2, #8
 800bd56:	4313      	orrs	r3, r2
 800bd58:	227b      	movs	r2, #123	; 0x7b
 800bd5a:	5ca2      	ldrb	r2, [r4, r2]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	22e6      	movs	r2, #230	; 0xe6
 800bd60:	0412      	lsls	r2, r2, #16
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d037      	beq.n	800bdd6 <AuxMeasurement2+0xfe>
 800bd66:	0025      	movs	r5, r4
 800bd68:	0021      	movs	r1, r4
 800bd6a:	359d      	adds	r5, #157	; 0x9d
 800bd6c:	2204      	movs	r2, #4
 800bd6e:	3178      	adds	r1, #120	; 0x78
 800bd70:	0028      	movs	r0, r5
 800bd72:	f7fc fc5a 	bl	800862a <memcpy>
 800bd76:	239e      	movs	r3, #158	; 0x9e
 800bd78:	22e6      	movs	r2, #230	; 0xe6
 800bd7a:	52e2      	strh	r2, [r4, r3]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	3302      	adds	r3, #2
 800bd80:	2688      	movs	r6, #136	; 0x88
 800bd82:	54e2      	strb	r2, [r4, r3]
 800bd84:	2380      	movs	r3, #128	; 0x80
 800bd86:	0020      	movs	r0, r4
 800bd88:	59a2      	ldr	r2, [r4, r6]
 800bd8a:	025b      	lsls	r3, r3, #9
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	51a3      	str	r3, [r4, r6]
 800bd90:	0029      	movs	r1, r5
 800bd92:	9400      	str	r4, [sp, #0]
 800bd94:	4b13      	ldr	r3, [pc, #76]	; (800bde4 <AuxMeasurement2+0x10c>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	30ac      	adds	r0, #172	; 0xac
 800bd9a:	f002 ff37 	bl	800ec0c <ADS_W_EMEChannelSelect2>
 800bd9e:	1e05      	subs	r5, r0, #0
 800bda0:	dacd      	bge.n	800bd3e <AuxMeasurement2+0x66>
 800bda2:	4811      	ldr	r0, [pc, #68]	; (800bde8 <AuxMeasurement2+0x110>)
 800bda4:	f7fb f966 	bl	8007074 <print>
 800bda8:	4b10      	ldr	r3, [pc, #64]	; (800bdec <AuxMeasurement2+0x114>)
 800bdaa:	51a3      	str	r3, [r4, r6]
 800bdac:	23a4      	movs	r3, #164	; 0xa4
 800bdae:	58e3      	ldr	r3, [r4, r3]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d0c4      	beq.n	800bd3e <AuxMeasurement2+0x66>
 800bdb4:	22a8      	movs	r2, #168	; 0xa8
 800bdb6:	0028      	movs	r0, r5
 800bdb8:	58a1      	ldr	r1, [r4, r2]
 800bdba:	4798      	blx	r3
 800bdbc:	0005      	movs	r5, r0
 800bdbe:	e7be      	b.n	800bd3e <AuxMeasurement2+0x66>
 800bdc0:	4809      	ldr	r0, [pc, #36]	; (800bde8 <AuxMeasurement2+0x110>)
 800bdc2:	f7fb f957 	bl	8007074 <print>
 800bdc6:	2388      	movs	r3, #136	; 0x88
 800bdc8:	4a08      	ldr	r2, [pc, #32]	; (800bdec <AuxMeasurement2+0x114>)
 800bdca:	50e2      	str	r2, [r4, r3]
 800bdcc:	331c      	adds	r3, #28
 800bdce:	58e3      	ldr	r3, [r4, r3]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1ef      	bne.n	800bdb4 <AuxMeasurement2+0xdc>
 800bdd4:	e7b3      	b.n	800bd3e <AuxMeasurement2+0x66>
 800bdd6:	0021      	movs	r1, r4
 800bdd8:	f7ff febc 	bl	800bb54 <AuxMeasurement4>
 800bddc:	0005      	movs	r5, r0
 800bdde:	e7ae      	b.n	800bd3e <AuxMeasurement2+0x66>
 800bde0:	0800bc1d 	.word	0x0800bc1d
 800bde4:	0800bb55 	.word	0x0800bb55
 800bde8:	08012738 	.word	0x08012738
 800bdec:	0033dfff 	.word	0x0033dfff

0800bdf0 <WriteRegisterConfiguration>:
 800bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdf2:	0005      	movs	r5, r0
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	000c      	movs	r4, r1
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	db45      	blt.n	800be88 <WriteRegisterConfiguration+0x98>
 800bdfc:	2688      	movs	r6, #136	; 0x88
 800bdfe:	2702      	movs	r7, #2
 800be00:	598b      	ldr	r3, [r1, r6]
 800be02:	421f      	tst	r7, r3
 800be04:	d134      	bne.n	800be70 <WriteRegisterConfiguration+0x80>
 800be06:	2704      	movs	r7, #4
 800be08:	598b      	ldr	r3, [r1, r6]
 800be0a:	421f      	tst	r7, r3
 800be0c:	d160      	bne.n	800bed0 <WriteRegisterConfiguration+0xe0>
 800be0e:	2708      	movs	r7, #8
 800be10:	598b      	ldr	r3, [r1, r6]
 800be12:	421f      	tst	r7, r3
 800be14:	d000      	beq.n	800be18 <WriteRegisterConfiguration+0x28>
 800be16:	e071      	b.n	800befc <WriteRegisterConfiguration+0x10c>
 800be18:	2710      	movs	r7, #16
 800be1a:	598b      	ldr	r3, [r1, r6]
 800be1c:	421f      	tst	r7, r3
 800be1e:	d162      	bne.n	800bee6 <WriteRegisterConfiguration+0xf6>
 800be20:	2720      	movs	r7, #32
 800be22:	598b      	ldr	r3, [r1, r6]
 800be24:	421f      	tst	r7, r3
 800be26:	d000      	beq.n	800be2a <WriteRegisterConfiguration+0x3a>
 800be28:	e073      	b.n	800bf12 <WriteRegisterConfiguration+0x122>
 800be2a:	598b      	ldr	r3, [r1, r6]
 800be2c:	065b      	lsls	r3, r3, #25
 800be2e:	d53d      	bpl.n	800beac <WriteRegisterConfiguration+0xbc>
 800be30:	2281      	movs	r2, #129	; 0x81
 800be32:	68cb      	ldr	r3, [r1, #12]
 800be34:	5c9a      	ldrb	r2, [r3, r2]
 800be36:	2a00      	cmp	r2, #0
 800be38:	d009      	beq.n	800be4e <WriteRegisterConfiguration+0x5e>
 800be3a:	2282      	movs	r2, #130	; 0x82
 800be3c:	215a      	movs	r1, #90	; 0x5a
 800be3e:	203e      	movs	r0, #62	; 0x3e
 800be40:	5c9b      	ldrb	r3, [r3, r2]
 800be42:	5c62      	ldrb	r2, [r4, r1]
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	4003      	ands	r3, r0
 800be48:	4382      	bics	r2, r0
 800be4a:	4313      	orrs	r3, r2
 800be4c:	5463      	strb	r3, [r4, r1]
 800be4e:	0021      	movs	r1, r4
 800be50:	0020      	movs	r0, r4
 800be52:	9400      	str	r4, [sp, #0]
 800be54:	4b7e      	ldr	r3, [pc, #504]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800be56:	2200      	movs	r2, #0
 800be58:	3158      	adds	r1, #88	; 0x58
 800be5a:	30ac      	adds	r0, #172	; 0xac
 800be5c:	f002 fb52 	bl	800e504 <ADS_W_LaserSetup>
 800be60:	1e05      	subs	r5, r0, #0
 800be62:	d10f      	bne.n	800be84 <WriteRegisterConfiguration+0x94>
 800be64:	2288      	movs	r2, #136	; 0x88
 800be66:	2140      	movs	r1, #64	; 0x40
 800be68:	58a3      	ldr	r3, [r4, r2]
 800be6a:	438b      	bics	r3, r1
 800be6c:	50a3      	str	r3, [r4, r2]
 800be6e:	e01a      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800be70:	0020      	movs	r0, r4
 800be72:	9100      	str	r1, [sp, #0]
 800be74:	4b76      	ldr	r3, [pc, #472]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800be76:	2200      	movs	r2, #0
 800be78:	3114      	adds	r1, #20
 800be7a:	30ac      	adds	r0, #172	; 0xac
 800be7c:	f002 f94e 	bl	800e11c <ADS_W_PhaseDelay>
 800be80:	1e05      	subs	r5, r0, #0
 800be82:	d021      	beq.n	800bec8 <WriteRegisterConfiguration+0xd8>
 800be84:	2d00      	cmp	r5, #0
 800be86:	da0e      	bge.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800be88:	4872      	ldr	r0, [pc, #456]	; (800c054 <WriteRegisterConfiguration+0x264>)
 800be8a:	f7fb f8f3 	bl	8007074 <print>
 800be8e:	2388      	movs	r3, #136	; 0x88
 800be90:	4a71      	ldr	r2, [pc, #452]	; (800c058 <WriteRegisterConfiguration+0x268>)
 800be92:	50e2      	str	r2, [r4, r3]
 800be94:	331c      	adds	r3, #28
 800be96:	58e3      	ldr	r3, [r4, r3]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d004      	beq.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800be9c:	22a8      	movs	r2, #168	; 0xa8
 800be9e:	0028      	movs	r0, r5
 800bea0:	58a1      	ldr	r1, [r4, r2]
 800bea2:	4798      	blx	r3
 800bea4:	0005      	movs	r5, r0
 800bea6:	0028      	movs	r0, r5
 800bea8:	b003      	add	sp, #12
 800beaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beac:	2780      	movs	r7, #128	; 0x80
 800beae:	598b      	ldr	r3, [r1, r6]
 800beb0:	421f      	tst	r7, r3
 800beb2:	d039      	beq.n	800bf28 <WriteRegisterConfiguration+0x138>
 800beb4:	0020      	movs	r0, r4
 800beb6:	9100      	str	r1, [sp, #0]
 800beb8:	4b65      	ldr	r3, [pc, #404]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800beba:	2200      	movs	r2, #0
 800bebc:	315c      	adds	r1, #92	; 0x5c
 800bebe:	30ac      	adds	r0, #172	; 0xac
 800bec0:	f002 fb84 	bl	800e5cc <ADS_W_PixelSetup>
 800bec4:	1e05      	subs	r5, r0, #0
 800bec6:	d1dd      	bne.n	800be84 <WriteRegisterConfiguration+0x94>
 800bec8:	59a3      	ldr	r3, [r4, r6]
 800beca:	43bb      	bics	r3, r7
 800becc:	51a3      	str	r3, [r4, r6]
 800bece:	e7ea      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800bed0:	0020      	movs	r0, r4
 800bed2:	9100      	str	r1, [sp, #0]
 800bed4:	4b5e      	ldr	r3, [pc, #376]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	311d      	adds	r1, #29
 800beda:	30ac      	adds	r0, #172	; 0xac
 800bedc:	f002 f982 	bl	800e1e4 <ADS_W_LaserPattern>
 800bee0:	1e05      	subs	r5, r0, #0
 800bee2:	d1cf      	bne.n	800be84 <WriteRegisterConfiguration+0x94>
 800bee4:	e7f0      	b.n	800bec8 <WriteRegisterConfiguration+0xd8>
 800bee6:	0020      	movs	r0, r4
 800bee8:	9100      	str	r1, [sp, #0]
 800beea:	4b59      	ldr	r3, [pc, #356]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800beec:	2200      	movs	r2, #0
 800beee:	314f      	adds	r1, #79	; 0x4f
 800bef0:	30ac      	adds	r0, #172	; 0xac
 800bef2:	f002 fa3f 	bl	800e374 <ADS_W_SequenceCounter>
 800bef6:	1e05      	subs	r5, r0, #0
 800bef8:	d1c4      	bne.n	800be84 <WriteRegisterConfiguration+0x94>
 800befa:	e7e5      	b.n	800bec8 <WriteRegisterConfiguration+0xd8>
 800befc:	0020      	movs	r0, r4
 800befe:	9100      	str	r1, [sp, #0]
 800bf00:	4b53      	ldr	r3, [pc, #332]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	312e      	adds	r1, #46	; 0x2e
 800bf06:	30ac      	adds	r0, #172	; 0xac
 800bf08:	f002 f9d0 	bl	800e2ac <ADS_W_CorrelationPattern>
 800bf0c:	1e05      	subs	r5, r0, #0
 800bf0e:	d1b9      	bne.n	800be84 <WriteRegisterConfiguration+0x94>
 800bf10:	e7da      	b.n	800bec8 <WriteRegisterConfiguration+0xd8>
 800bf12:	0020      	movs	r0, r4
 800bf14:	9100      	str	r1, [sp, #0]
 800bf16:	4b4e      	ldr	r3, [pc, #312]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	3153      	adds	r1, #83	; 0x53
 800bf1c:	30ac      	adds	r0, #172	; 0xac
 800bf1e:	f002 fa8d 	bl	800e43c <ADS_W_AnalogSetup>
 800bf22:	1e05      	subs	r5, r0, #0
 800bf24:	d1ae      	bne.n	800be84 <WriteRegisterConfiguration+0x94>
 800bf26:	e7cf      	b.n	800bec8 <WriteRegisterConfiguration+0xd8>
 800bf28:	598b      	ldr	r3, [r1, r6]
 800bf2a:	059b      	lsls	r3, r3, #22
 800bf2c:	d422      	bmi.n	800bf74 <WriteRegisterConfiguration+0x184>
 800bf2e:	598b      	ldr	r3, [r1, r6]
 800bf30:	045b      	lsls	r3, r3, #17
 800bf32:	d430      	bmi.n	800bf96 <WriteRegisterConfiguration+0x1a6>
 800bf34:	2688      	movs	r6, #136	; 0x88
 800bf36:	598b      	ldr	r3, [r1, r6]
 800bf38:	041b      	lsls	r3, r3, #16
 800bf3a:	d43d      	bmi.n	800bfb8 <WriteRegisterConfiguration+0x1c8>
 800bf3c:	598b      	ldr	r3, [r1, r6]
 800bf3e:	03db      	lsls	r3, r3, #15
 800bf40:	d44a      	bmi.n	800bfd8 <WriteRegisterConfiguration+0x1e8>
 800bf42:	598b      	ldr	r3, [r1, r6]
 800bf44:	039b      	lsls	r3, r3, #14
 800bf46:	d457      	bmi.n	800bff8 <WriteRegisterConfiguration+0x208>
 800bf48:	598b      	ldr	r3, [r1, r6]
 800bf4a:	02db      	lsls	r3, r3, #11
 800bf4c:	d464      	bmi.n	800c018 <WriteRegisterConfiguration+0x228>
 800bf4e:	598b      	ldr	r3, [r1, r6]
 800bf50:	029b      	lsls	r3, r3, #10
 800bf52:	d571      	bpl.n	800c038 <WriteRegisterConfiguration+0x248>
 800bf54:	0020      	movs	r0, r4
 800bf56:	9100      	str	r1, [sp, #0]
 800bf58:	4b3d      	ldr	r3, [pc, #244]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	3183      	adds	r1, #131	; 0x83
 800bf5e:	30ac      	adds	r0, #172	; 0xac
 800bf60:	f002 ff80 	bl	800ee64 <ADS_W_DigitalTest>
 800bf64:	1e05      	subs	r5, r0, #0
 800bf66:	d000      	beq.n	800bf6a <WriteRegisterConfiguration+0x17a>
 800bf68:	e78c      	b.n	800be84 <WriteRegisterConfiguration+0x94>
 800bf6a:	59a3      	ldr	r3, [r4, r6]
 800bf6c:	4a3b      	ldr	r2, [pc, #236]	; (800c05c <WriteRegisterConfiguration+0x26c>)
 800bf6e:	4013      	ands	r3, r2
 800bf70:	51a3      	str	r3, [r4, r6]
 800bf72:	e798      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800bf74:	0020      	movs	r0, r4
 800bf76:	9100      	str	r1, [sp, #0]
 800bf78:	4b35      	ldr	r3, [pc, #212]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	3161      	adds	r1, #97	; 0x61
 800bf7e:	30ac      	adds	r0, #172	; 0xac
 800bf80:	f002 fbec 	bl	800e75c <ADS_W_DeviceConfig>
 800bf84:	1e05      	subs	r5, r0, #0
 800bf86:	d000      	beq.n	800bf8a <WriteRegisterConfiguration+0x19a>
 800bf88:	e77c      	b.n	800be84 <WriteRegisterConfiguration+0x94>
 800bf8a:	2288      	movs	r2, #136	; 0x88
 800bf8c:	4934      	ldr	r1, [pc, #208]	; (800c060 <WriteRegisterConfiguration+0x270>)
 800bf8e:	58a3      	ldr	r3, [r4, r2]
 800bf90:	400b      	ands	r3, r1
 800bf92:	50a3      	str	r3, [r4, r2]
 800bf94:	e787      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800bf96:	0020      	movs	r0, r4
 800bf98:	9100      	str	r1, [sp, #0]
 800bf9a:	4b2d      	ldr	r3, [pc, #180]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	3171      	adds	r1, #113	; 0x71
 800bfa0:	30ac      	adds	r0, #172	; 0xac
 800bfa2:	f002 fd6b 	bl	800ea7c <ADS_W_EMEControl>
 800bfa6:	1e05      	subs	r5, r0, #0
 800bfa8:	d000      	beq.n	800bfac <WriteRegisterConfiguration+0x1bc>
 800bfaa:	e76b      	b.n	800be84 <WriteRegisterConfiguration+0x94>
 800bfac:	2288      	movs	r2, #136	; 0x88
 800bfae:	492d      	ldr	r1, [pc, #180]	; (800c064 <WriteRegisterConfiguration+0x274>)
 800bfb0:	58a3      	ldr	r3, [r4, r2]
 800bfb2:	400b      	ands	r3, r1
 800bfb4:	50a3      	str	r3, [r4, r2]
 800bfb6:	e776      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800bfb8:	0020      	movs	r0, r4
 800bfba:	9100      	str	r1, [sp, #0]
 800bfbc:	4b24      	ldr	r3, [pc, #144]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	3174      	adds	r1, #116	; 0x74
 800bfc2:	30ac      	adds	r0, #172	; 0xac
 800bfc4:	f002 fdbe 	bl	800eb44 <ADS_W_EMEChannelSelect1>
 800bfc8:	1e05      	subs	r5, r0, #0
 800bfca:	d000      	beq.n	800bfce <WriteRegisterConfiguration+0x1de>
 800bfcc:	e75a      	b.n	800be84 <WriteRegisterConfiguration+0x94>
 800bfce:	59a3      	ldr	r3, [r4, r6]
 800bfd0:	4a25      	ldr	r2, [pc, #148]	; (800c068 <WriteRegisterConfiguration+0x278>)
 800bfd2:	4013      	ands	r3, r2
 800bfd4:	51a3      	str	r3, [r4, r6]
 800bfd6:	e766      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800bfd8:	0020      	movs	r0, r4
 800bfda:	9100      	str	r1, [sp, #0]
 800bfdc:	4b1c      	ldr	r3, [pc, #112]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	3178      	adds	r1, #120	; 0x78
 800bfe2:	30ac      	adds	r0, #172	; 0xac
 800bfe4:	f002 fe12 	bl	800ec0c <ADS_W_EMEChannelSelect2>
 800bfe8:	1e05      	subs	r5, r0, #0
 800bfea:	d000      	beq.n	800bfee <WriteRegisterConfiguration+0x1fe>
 800bfec:	e74a      	b.n	800be84 <WriteRegisterConfiguration+0x94>
 800bfee:	59a3      	ldr	r3, [r4, r6]
 800bff0:	4a1e      	ldr	r2, [pc, #120]	; (800c06c <WriteRegisterConfiguration+0x27c>)
 800bff2:	4013      	ands	r3, r2
 800bff4:	51a3      	str	r3, [r4, r6]
 800bff6:	e756      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800bff8:	0020      	movs	r0, r4
 800bffa:	9100      	str	r1, [sp, #0]
 800bffc:	4b14      	ldr	r3, [pc, #80]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800bffe:	2200      	movs	r2, #0
 800c000:	317c      	adds	r1, #124	; 0x7c
 800c002:	30ac      	adds	r0, #172	; 0xac
 800c004:	f002 fe66 	bl	800ecd4 <ADS_W_EMEChannelSelect3>
 800c008:	1e05      	subs	r5, r0, #0
 800c00a:	d000      	beq.n	800c00e <WriteRegisterConfiguration+0x21e>
 800c00c:	e73a      	b.n	800be84 <WriteRegisterConfiguration+0x94>
 800c00e:	59a3      	ldr	r3, [r4, r6]
 800c010:	4a17      	ldr	r2, [pc, #92]	; (800c070 <WriteRegisterConfiguration+0x280>)
 800c012:	4013      	ands	r3, r2
 800c014:	51a3      	str	r3, [r4, r6]
 800c016:	e746      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800c018:	0020      	movs	r0, r4
 800c01a:	9100      	str	r1, [sp, #0]
 800c01c:	4b0c      	ldr	r3, [pc, #48]	; (800c050 <WriteRegisterConfiguration+0x260>)
 800c01e:	2200      	movs	r2, #0
 800c020:	3180      	adds	r1, #128	; 0x80
 800c022:	30ac      	adds	r0, #172	; 0xac
 800c024:	f002 feba 	bl	800ed9c <ADS_W_AnalogTest>
 800c028:	1e05      	subs	r5, r0, #0
 800c02a:	d000      	beq.n	800c02e <WriteRegisterConfiguration+0x23e>
 800c02c:	e72a      	b.n	800be84 <WriteRegisterConfiguration+0x94>
 800c02e:	59a3      	ldr	r3, [r4, r6]
 800c030:	4a10      	ldr	r2, [pc, #64]	; (800c074 <WriteRegisterConfiguration+0x284>)
 800c032:	4013      	ands	r3, r2
 800c034:	51a3      	str	r3, [r4, r6]
 800c036:	e736      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800c038:	0020      	movs	r0, r4
 800c03a:	2205      	movs	r2, #5
 800c03c:	3153      	adds	r1, #83	; 0x53
 800c03e:	3098      	adds	r0, #152	; 0x98
 800c040:	f7fc faf3 	bl	800862a <memcpy>
 800c044:	23a4      	movs	r3, #164	; 0xa4
 800c046:	58e3      	ldr	r3, [r4, r3]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d000      	beq.n	800c04e <WriteRegisterConfiguration+0x25e>
 800c04c:	e726      	b.n	800be9c <WriteRegisterConfiguration+0xac>
 800c04e:	e72a      	b.n	800bea6 <WriteRegisterConfiguration+0xb6>
 800c050:	0800bdf1 	.word	0x0800bdf1
 800c054:	08012704 	.word	0x08012704
 800c058:	0033dfff 	.word	0x0033dfff
 800c05c:	ffdfffff 	.word	0xffdfffff
 800c060:	fffffdff 	.word	0xfffffdff
 800c064:	ffffbfff 	.word	0xffffbfff
 800c068:	ffff7fff 	.word	0xffff7fff
 800c06c:	fffeffff 	.word	0xfffeffff
 800c070:	fffdffff 	.word	0xfffdffff
 800c074:	ffefffff 	.word	0xffefffff

0800c078 <RampChargePump>:
 800c078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c07a:	46ce      	mov	lr, r9
 800c07c:	4647      	mov	r7, r8
 800c07e:	b580      	push	{r7, lr}
 800c080:	0005      	movs	r5, r0
 800c082:	b083      	sub	sp, #12
 800c084:	000c      	movs	r4, r1
 800c086:	2800      	cmp	r0, #0
 800c088:	db61      	blt.n	800c14e <RampChargePump+0xd6>
 800c08a:	2388      	movs	r3, #136	; 0x88
 800c08c:	58cf      	ldr	r7, [r1, r3]
 800c08e:	58cb      	ldr	r3, [r1, r3]
 800c090:	069b      	lsls	r3, r3, #26
 800c092:	d527      	bpl.n	800c0e4 <RampChargePump+0x6c>
 800c094:	239a      	movs	r3, #154	; 0x9a
 800c096:	5ce0      	ldrb	r0, [r4, r3]
 800c098:	3301      	adds	r3, #1
 800c09a:	5ce2      	ldrb	r2, [r4, r3]
 800c09c:	3b8c      	subs	r3, #140	; 0x8c
 800c09e:	4698      	mov	r8, r3
 800c0a0:	0206      	lsls	r6, r0, #8
 800c0a2:	4316      	orrs	r6, r2
 800c0a4:	09b6      	lsrs	r6, r6, #6
 800c0a6:	401e      	ands	r6, r3
 800c0a8:	46b1      	mov	r9, r6
 800c0aa:	4646      	mov	r6, r8
 800c0ac:	3330      	adds	r3, #48	; 0x30
 800c0ae:	469c      	mov	ip, r3
 800c0b0:	401a      	ands	r2, r3
 800c0b2:	3317      	adds	r3, #23
 800c0b4:	5ce1      	ldrb	r1, [r4, r3]
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	5ce3      	ldrb	r3, [r4, r3]
 800c0ba:	021b      	lsls	r3, r3, #8
 800c0bc:	430b      	orrs	r3, r1
 800c0be:	099b      	lsrs	r3, r3, #6
 800c0c0:	4033      	ands	r3, r6
 800c0c2:	2f00      	cmp	r7, #0
 800c0c4:	db1b      	blt.n	800c0fe <RampChargePump+0x86>
 800c0c6:	4667      	mov	r7, ip
 800c0c8:	400f      	ands	r7, r1
 800c0ca:	4297      	cmp	r7, r2
 800c0cc:	d023      	beq.n	800c116 <RampChargePump+0x9e>
 800c0ce:	4599      	cmp	r9, r3
 800c0d0:	d04d      	beq.n	800c16e <RampChargePump+0xf6>
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	2900      	cmp	r1, #0
 800c0d6:	d023      	beq.n	800c120 <RampChargePump+0xa8>
 800c0d8:	2a00      	cmp	r2, #0
 800c0da:	d160      	bne.n	800c19e <RampChargePump+0x126>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	2600      	movs	r6, #0
 800c0e0:	2500      	movs	r5, #0
 800c0e2:	e021      	b.n	800c128 <RampChargePump+0xb0>
 800c0e4:	2f00      	cmp	r7, #0
 800c0e6:	dbd5      	blt.n	800c094 <RampChargePump+0x1c>
 800c0e8:	0028      	movs	r0, r5
 800c0ea:	0021      	movs	r1, r4
 800c0ec:	f7ff fe80 	bl	800bdf0 <WriteRegisterConfiguration>
 800c0f0:	0005      	movs	r5, r0
 800c0f2:	0028      	movs	r0, r5
 800c0f4:	b003      	add	sp, #12
 800c0f6:	bc0c      	pop	{r2, r3}
 800c0f8:	4690      	mov	r8, r2
 800c0fa:	4699      	mov	r9, r3
 800c0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0fe:	2788      	movs	r7, #136	; 0x88
 800c100:	2620      	movs	r6, #32
 800c102:	59e1      	ldr	r1, [r4, r7]
 800c104:	4331      	orrs	r1, r6
 800c106:	51e1      	str	r1, [r4, r7]
 800c108:	59e1      	ldr	r1, [r4, r7]
 800c10a:	0049      	lsls	r1, r1, #1
 800c10c:	0849      	lsrs	r1, r1, #1
 800c10e:	51e1      	str	r1, [r4, r7]
 800c110:	2700      	movs	r7, #0
 800c112:	4297      	cmp	r7, r2
 800c114:	d1db      	bne.n	800c0ce <RampChargePump+0x56>
 800c116:	4599      	cmp	r9, r3
 800c118:	d0e6      	beq.n	800c0e8 <RampChargePump+0x70>
 800c11a:	4649      	mov	r1, r9
 800c11c:	2900      	cmp	r1, #0
 800c11e:	d1db      	bne.n	800c0d8 <RampChargePump+0x60>
 800c120:	019b      	lsls	r3, r3, #6
 800c122:	0a1d      	lsrs	r5, r3, #8
 800c124:	b25e      	sxtb	r6, r3
 800c126:	b253      	sxtb	r3, r2
 800c128:	2203      	movs	r2, #3
 800c12a:	4390      	bics	r0, r2
 800c12c:	4328      	orrs	r0, r5
 800c12e:	3297      	adds	r2, #151	; 0x97
 800c130:	54a0      	strb	r0, [r4, r2]
 800c132:	0021      	movs	r1, r4
 800c134:	0020      	movs	r0, r4
 800c136:	4333      	orrs	r3, r6
 800c138:	3201      	adds	r2, #1
 800c13a:	54a3      	strb	r3, [r4, r2]
 800c13c:	9400      	str	r4, [sp, #0]
 800c13e:	4b23      	ldr	r3, [pc, #140]	; (800c1cc <RampChargePump+0x154>)
 800c140:	2200      	movs	r2, #0
 800c142:	3198      	adds	r1, #152	; 0x98
 800c144:	30ac      	adds	r0, #172	; 0xac
 800c146:	f002 f979 	bl	800e43c <ADS_W_AnalogSetup>
 800c14a:	1e05      	subs	r5, r0, #0
 800c14c:	dad1      	bge.n	800c0f2 <RampChargePump+0x7a>
 800c14e:	4820      	ldr	r0, [pc, #128]	; (800c1d0 <RampChargePump+0x158>)
 800c150:	f7fa ff90 	bl	8007074 <print>
 800c154:	2388      	movs	r3, #136	; 0x88
 800c156:	4a1f      	ldr	r2, [pc, #124]	; (800c1d4 <RampChargePump+0x15c>)
 800c158:	50e2      	str	r2, [r4, r3]
 800c15a:	331c      	adds	r3, #28
 800c15c:	58e3      	ldr	r3, [r4, r3]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d0c7      	beq.n	800c0f2 <RampChargePump+0x7a>
 800c162:	22a8      	movs	r2, #168	; 0xa8
 800c164:	0028      	movs	r0, r5
 800c166:	58a1      	ldr	r1, [r4, r2]
 800c168:	4798      	blx	r3
 800c16a:	0005      	movs	r5, r0
 800c16c:	e7c1      	b.n	800c0f2 <RampChargePump+0x7a>
 800c16e:	42ba      	cmp	r2, r7
 800c170:	db1a      	blt.n	800c1a8 <RampChargePump+0x130>
 800c172:	2300      	movs	r3, #0
 800c174:	2f00      	cmp	r7, #0
 800c176:	d00d      	beq.n	800c194 <RampChargePump+0x11c>
 800c178:	1e55      	subs	r5, r2, #1
 800c17a:	2a0a      	cmp	r2, #10
 800c17c:	dd06      	ble.n	800c18c <RampChargePump+0x114>
 800c17e:	2501      	movs	r5, #1
 800c180:	2a0b      	cmp	r2, #11
 800c182:	d003      	beq.n	800c18c <RampChargePump+0x114>
 800c184:	1f55      	subs	r5, r2, #5
 800c186:	2d0a      	cmp	r5, #10
 800c188:	da00      	bge.n	800c18c <RampChargePump+0x114>
 800c18a:	250a      	movs	r5, #10
 800c18c:	42af      	cmp	r7, r5
 800c18e:	db13      	blt.n	800c1b8 <RampChargePump+0x140>
 800c190:	233f      	movs	r3, #63	; 0x3f
 800c192:	403b      	ands	r3, r7
 800c194:	464a      	mov	r2, r9
 800c196:	0196      	lsls	r6, r2, #6
 800c198:	0a35      	lsrs	r5, r6, #8
 800c19a:	b276      	sxtb	r6, r6
 800c19c:	e7c4      	b.n	800c128 <RampChargePump+0xb0>
 800c19e:	018e      	lsls	r6, r1, #6
 800c1a0:	0a35      	lsrs	r5, r6, #8
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	b276      	sxtb	r6, r6
 800c1a6:	e7bf      	b.n	800c128 <RampChargePump+0xb0>
 800c1a8:	1d55      	adds	r5, r2, #5
 800c1aa:	2a09      	cmp	r2, #9
 800c1ac:	dc02      	bgt.n	800c1b4 <RampChargePump+0x13c>
 800c1ae:	1c55      	adds	r5, r2, #1
 800c1b0:	42af      	cmp	r7, r5
 800c1b2:	dc03      	bgt.n	800c1bc <RampChargePump+0x144>
 800c1b4:	42af      	cmp	r7, r5
 800c1b6:	ddeb      	ble.n	800c190 <RampChargePump+0x118>
 800c1b8:	002f      	movs	r7, r5
 800c1ba:	e7e9      	b.n	800c190 <RampChargePump+0x118>
 800c1bc:	2398      	movs	r3, #152	; 0x98
 800c1be:	68e2      	ldr	r2, [r4, #12]
 800c1c0:	5ad0      	ldrh	r0, [r2, r3]
 800c1c2:	f7fd fedb 	bl	8009f7c <Time_DelayUSec>
 800c1c6:	239a      	movs	r3, #154	; 0x9a
 800c1c8:	5ce0      	ldrb	r0, [r4, r3]
 800c1ca:	e7f3      	b.n	800c1b4 <RampChargePump+0x13c>
 800c1cc:	0800c079 	.word	0x0800c079
 800c1d0:	08012704 	.word	0x08012704
 800c1d4:	0033dfff 	.word	0x0033dfff

0800c1d8 <PollClockLocked>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	0004      	movs	r4, r0
 800c1dc:	b082      	sub	sp, #8
 800c1de:	000d      	movs	r5, r1
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	db21      	blt.n	800c228 <PollClockLocked+0x50>
 800c1e4:	2196      	movs	r1, #150	; 0x96
 800c1e6:	0028      	movs	r0, r5
 800c1e8:	0049      	lsls	r1, r1, #1
 800c1ea:	3090      	adds	r0, #144	; 0x90
 800c1ec:	f7fd ff4e 	bl	800a08c <Time_CheckTimeoutMSec>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d134      	bne.n	800c25e <PollClockLocked+0x86>
 800c1f4:	4e25      	ldr	r6, [pc, #148]	; (800c28c <PollClockLocked+0xb4>)
 800c1f6:	78b3      	ldrb	r3, [r6, #2]
 800c1f8:	065a      	lsls	r2, r3, #25
 800c1fa:	d427      	bmi.n	800c24c <PollClockLocked+0x74>
 800c1fc:	0029      	movs	r1, r5
 800c1fe:	2203      	movs	r2, #3
 800c200:	3161      	adds	r1, #97	; 0x61
 800c202:	0030      	movs	r0, r6
 800c204:	f7fc fa11 	bl	800862a <memcpy>
 800c208:	0028      	movs	r0, r5
 800c20a:	9500      	str	r5, [sp, #0]
 800c20c:	4b20      	ldr	r3, [pc, #128]	; (800c290 <PollClockLocked+0xb8>)
 800c20e:	2200      	movs	r2, #0
 800c210:	0031      	movs	r1, r6
 800c212:	30ac      	adds	r0, #172	; 0xac
 800c214:	f003 f81a 	bl	800f24c <ADS_WR_DeviceConfig>
 800c218:	1e04      	subs	r4, r0, #0
 800c21a:	d030      	beq.n	800c27e <PollClockLocked+0xa6>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	da12      	bge.n	800c246 <PollClockLocked+0x6e>
 800c220:	2240      	movs	r2, #64	; 0x40
 800c222:	78b3      	ldrb	r3, [r6, #2]
 800c224:	4393      	bics	r3, r2
 800c226:	70b3      	strb	r3, [r6, #2]
 800c228:	481a      	ldr	r0, [pc, #104]	; (800c294 <PollClockLocked+0xbc>)
 800c22a:	f7fa ff23 	bl	8007074 <print>
 800c22e:	2388      	movs	r3, #136	; 0x88
 800c230:	4a19      	ldr	r2, [pc, #100]	; (800c298 <PollClockLocked+0xc0>)
 800c232:	50ea      	str	r2, [r5, r3]
 800c234:	331c      	adds	r3, #28
 800c236:	58eb      	ldr	r3, [r5, r3]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d004      	beq.n	800c246 <PollClockLocked+0x6e>
 800c23c:	22a8      	movs	r2, #168	; 0xa8
 800c23e:	0020      	movs	r0, r4
 800c240:	58a9      	ldr	r1, [r5, r2]
 800c242:	4798      	blx	r3
 800c244:	0004      	movs	r4, r0
 800c246:	0020      	movs	r0, r4
 800c248:	b002      	add	sp, #8
 800c24a:	bd70      	pop	{r4, r5, r6, pc}
 800c24c:	2240      	movs	r2, #64	; 0x40
 800c24e:	0020      	movs	r0, r4
 800c250:	4393      	bics	r3, r2
 800c252:	0029      	movs	r1, r5
 800c254:	70b3      	strb	r3, [r6, #2]
 800c256:	f7ff ff0f 	bl	800c078 <RampChargePump>
 800c25a:	0004      	movs	r4, r0
 800c25c:	e7f3      	b.n	800c246 <PollClockLocked+0x6e>
 800c25e:	2196      	movs	r1, #150	; 0x96
 800c260:	480e      	ldr	r0, [pc, #56]	; (800c29c <PollClockLocked+0xc4>)
 800c262:	0049      	lsls	r1, r1, #1
 800c264:	f7fa ff06 	bl	8007074 <print>
 800c268:	2140      	movs	r1, #64	; 0x40
 800c26a:	4a08      	ldr	r2, [pc, #32]	; (800c28c <PollClockLocked+0xb4>)
 800c26c:	0020      	movs	r0, r4
 800c26e:	7893      	ldrb	r3, [r2, #2]
 800c270:	438b      	bics	r3, r1
 800c272:	0029      	movs	r1, r5
 800c274:	7093      	strb	r3, [r2, #2]
 800c276:	f7ff feff 	bl	800c078 <RampChargePump>
 800c27a:	0004      	movs	r4, r0
 800c27c:	e7e3      	b.n	800c246 <PollClockLocked+0x6e>
 800c27e:	2288      	movs	r2, #136	; 0x88
 800c280:	4907      	ldr	r1, [pc, #28]	; (800c2a0 <PollClockLocked+0xc8>)
 800c282:	58ab      	ldr	r3, [r5, r2]
 800c284:	400b      	ands	r3, r1
 800c286:	50ab      	str	r3, [r5, r2]
 800c288:	e7dd      	b.n	800c246 <PollClockLocked+0x6e>
 800c28a:	46c0      	nop			; (mov r8, r8)
 800c28c:	20005264 	.word	0x20005264
 800c290:	0800c1d9 	.word	0x0800c1d9
 800c294:	08012704 	.word	0x08012704
 800c298:	0033dfff 	.word	0x0033dfff
 800c29c:	0801276c 	.word	0x0801276c
 800c2a0:	fffffdff 	.word	0xfffffdff

0800c2a4 <WriteClockConfiguration>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	0005      	movs	r5, r0
 800c2a8:	b082      	sub	sp, #8
 800c2aa:	000c      	movs	r4, r1
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	db24      	blt.n	800c2fa <WriteClockConfiguration+0x56>
 800c2b0:	2688      	movs	r6, #136	; 0x88
 800c2b2:	598b      	ldr	r3, [r1, r6]
 800c2b4:	055b      	lsls	r3, r3, #21
 800c2b6:	d414      	bmi.n	800c2e2 <WriteClockConfiguration+0x3e>
 800c2b8:	598b      	ldr	r3, [r1, r6]
 800c2ba:	051b      	lsls	r3, r3, #20
 800c2bc:	d42f      	bmi.n	800c31e <WriteClockConfiguration+0x7a>
 800c2be:	598b      	ldr	r3, [r1, r6]
 800c2c0:	04db      	lsls	r3, r3, #19
 800c2c2:	d53b      	bpl.n	800c33c <WriteClockConfiguration+0x98>
 800c2c4:	0020      	movs	r0, r4
 800c2c6:	9100      	str	r1, [sp, #0]
 800c2c8:	4b2e      	ldr	r3, [pc, #184]	; (800c384 <WriteClockConfiguration+0xe0>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	316d      	adds	r1, #109	; 0x6d
 800c2ce:	30ac      	adds	r0, #172	; 0xac
 800c2d0:	f002 fb70 	bl	800e9b4 <ADS_W_ClockSetup3>
 800c2d4:	1e05      	subs	r5, r0, #0
 800c2d6:	d10e      	bne.n	800c2f6 <WriteClockConfiguration+0x52>
 800c2d8:	59a3      	ldr	r3, [r4, r6]
 800c2da:	4a2b      	ldr	r2, [pc, #172]	; (800c388 <WriteClockConfiguration+0xe4>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	51a3      	str	r3, [r4, r6]
 800c2e0:	e01a      	b.n	800c318 <WriteClockConfiguration+0x74>
 800c2e2:	0020      	movs	r0, r4
 800c2e4:	9100      	str	r1, [sp, #0]
 800c2e6:	4b27      	ldr	r3, [pc, #156]	; (800c384 <WriteClockConfiguration+0xe0>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	3164      	adds	r1, #100	; 0x64
 800c2ec:	30ac      	adds	r0, #172	; 0xac
 800c2ee:	f002 fa99 	bl	800e824 <ADS_W_ClockSetup1>
 800c2f2:	1e05      	subs	r5, r0, #0
 800c2f4:	d03d      	beq.n	800c372 <WriteClockConfiguration+0xce>
 800c2f6:	2d00      	cmp	r5, #0
 800c2f8:	da0e      	bge.n	800c318 <WriteClockConfiguration+0x74>
 800c2fa:	4824      	ldr	r0, [pc, #144]	; (800c38c <WriteClockConfiguration+0xe8>)
 800c2fc:	f7fa feba 	bl	8007074 <print>
 800c300:	2388      	movs	r3, #136	; 0x88
 800c302:	4a23      	ldr	r2, [pc, #140]	; (800c390 <WriteClockConfiguration+0xec>)
 800c304:	50e2      	str	r2, [r4, r3]
 800c306:	331c      	adds	r3, #28
 800c308:	58e3      	ldr	r3, [r4, r3]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d004      	beq.n	800c318 <WriteClockConfiguration+0x74>
 800c30e:	22a8      	movs	r2, #168	; 0xa8
 800c310:	0028      	movs	r0, r5
 800c312:	58a1      	ldr	r1, [r4, r2]
 800c314:	4798      	blx	r3
 800c316:	0005      	movs	r5, r0
 800c318:	0028      	movs	r0, r5
 800c31a:	b002      	add	sp, #8
 800c31c:	bd70      	pop	{r4, r5, r6, pc}
 800c31e:	0020      	movs	r0, r4
 800c320:	9100      	str	r1, [sp, #0]
 800c322:	4b18      	ldr	r3, [pc, #96]	; (800c384 <WriteClockConfiguration+0xe0>)
 800c324:	2200      	movs	r2, #0
 800c326:	3168      	adds	r1, #104	; 0x68
 800c328:	30ac      	adds	r0, #172	; 0xac
 800c32a:	f002 fadf 	bl	800e8ec <ADS_W_ClockSetup2>
 800c32e:	1e05      	subs	r5, r0, #0
 800c330:	d1e1      	bne.n	800c2f6 <WriteClockConfiguration+0x52>
 800c332:	59a3      	ldr	r3, [r4, r6]
 800c334:	4a17      	ldr	r2, [pc, #92]	; (800c394 <WriteClockConfiguration+0xf0>)
 800c336:	4013      	ands	r3, r2
 800c338:	51a3      	str	r3, [r4, r6]
 800c33a:	e7ed      	b.n	800c318 <WriteClockConfiguration+0x74>
 800c33c:	598b      	ldr	r3, [r1, r6]
 800c33e:	05db      	lsls	r3, r3, #23
 800c340:	d51c      	bpl.n	800c37c <WriteClockConfiguration+0xd8>
 800c342:	2360      	movs	r3, #96	; 0x60
 800c344:	0020      	movs	r0, r4
 800c346:	5cca      	ldrb	r2, [r1, r3]
 800c348:	333e      	adds	r3, #62	; 0x3e
 800c34a:	54ca      	strb	r2, [r1, r3]
 800c34c:	30ac      	adds	r0, #172	; 0xac
 800c34e:	9100      	str	r1, [sp, #0]
 800c350:	4b11      	ldr	r3, [pc, #68]	; (800c398 <WriteClockConfiguration+0xf4>)
 800c352:	2200      	movs	r2, #0
 800c354:	319d      	adds	r1, #157	; 0x9d
 800c356:	f002 ff15 	bl	800f184 <ADS_WR_BlockEnable>
 800c35a:	1e05      	subs	r5, r0, #0
 800c35c:	dadc      	bge.n	800c318 <WriteClockConfiguration+0x74>
 800c35e:	480b      	ldr	r0, [pc, #44]	; (800c38c <WriteClockConfiguration+0xe8>)
 800c360:	f7fa fe88 	bl	8007074 <print>
 800c364:	4b0a      	ldr	r3, [pc, #40]	; (800c390 <WriteClockConfiguration+0xec>)
 800c366:	51a3      	str	r3, [r4, r6]
 800c368:	23a4      	movs	r3, #164	; 0xa4
 800c36a:	58e3      	ldr	r3, [r4, r3]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1ce      	bne.n	800c30e <WriteClockConfiguration+0x6a>
 800c370:	e7d2      	b.n	800c318 <WriteClockConfiguration+0x74>
 800c372:	59a3      	ldr	r3, [r4, r6]
 800c374:	4a09      	ldr	r2, [pc, #36]	; (800c39c <WriteClockConfiguration+0xf8>)
 800c376:	4013      	ands	r3, r2
 800c378:	51a3      	str	r3, [r4, r6]
 800c37a:	e7cd      	b.n	800c318 <WriteClockConfiguration+0x74>
 800c37c:	f7ff fe7c 	bl	800c078 <RampChargePump>
 800c380:	0005      	movs	r5, r0
 800c382:	e7c9      	b.n	800c318 <WriteClockConfiguration+0x74>
 800c384:	0800c2a5 	.word	0x0800c2a5
 800c388:	ffffefff 	.word	0xffffefff
 800c38c:	08012704 	.word	0x08012704
 800c390:	0033dfff 	.word	0x0033dfff
 800c394:	fffff7ff 	.word	0xfffff7ff
 800c398:	0800bae1 	.word	0x0800bae1
 800c39c:	fffffbff 	.word	0xfffffbff

0800c3a0 <VerifyBlockEnable>:
 800c3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a2:	46ce      	mov	lr, r9
 800c3a4:	4647      	mov	r7, r8
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	0005      	movs	r5, r0
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	000c      	movs	r4, r1
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	da00      	bge.n	800c3b4 <VerifyBlockEnable+0x14>
 800c3b2:	e08d      	b.n	800c4d0 <VerifyBlockEnable+0x130>
 800c3b4:	239e      	movs	r3, #158	; 0x9e
 800c3b6:	5cca      	ldrb	r2, [r1, r3]
 800c3b8:	3b3e      	subs	r3, #62	; 0x3e
 800c3ba:	5cc9      	ldrb	r1, [r1, r3]
 800c3bc:	3b5f      	subs	r3, #95	; 0x5f
 800c3be:	4213      	tst	r3, r2
 800c3c0:	d122      	bne.n	800c408 <VerifyBlockEnable+0x68>
 800c3c2:	1a53      	subs	r3, r2, r1
 800c3c4:	4258      	negs	r0, r3
 800c3c6:	4143      	adcs	r3, r0
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d027      	beq.n	800c41e <VerifyBlockEnable+0x7e>
 800c3ce:	2288      	movs	r2, #136	; 0x88
 800c3d0:	4869      	ldr	r0, [pc, #420]	; (800c578 <VerifyBlockEnable+0x1d8>)
 800c3d2:	58a3      	ldr	r3, [r4, r2]
 800c3d4:	4003      	ands	r3, r0
 800c3d6:	50a3      	str	r3, [r4, r2]
 800c3d8:	2301      	movs	r3, #1
 800c3da:	06ca      	lsls	r2, r1, #27
 800c3dc:	d532      	bpl.n	800c444 <VerifyBlockEnable+0xa4>
 800c3de:	420b      	tst	r3, r1
 800c3e0:	d130      	bne.n	800c444 <VerifyBlockEnable+0xa4>
 800c3e2:	23f0      	movs	r3, #240	; 0xf0
 800c3e4:	5ce3      	ldrb	r3, [r4, r3]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d12c      	bne.n	800c444 <VerifyBlockEnable+0xa4>
 800c3ea:	0020      	movs	r0, r4
 800c3ec:	3090      	adds	r0, #144	; 0x90
 800c3ee:	f7fd fdbf 	bl	8009f70 <Time_GetNow>
 800c3f2:	2263      	movs	r2, #99	; 0x63
 800c3f4:	2140      	movs	r1, #64	; 0x40
 800c3f6:	5ca3      	ldrb	r3, [r4, r2]
 800c3f8:	0028      	movs	r0, r5
 800c3fa:	438b      	bics	r3, r1
 800c3fc:	54a3      	strb	r3, [r4, r2]
 800c3fe:	0021      	movs	r1, r4
 800c400:	f7ff feea 	bl	800c1d8 <PollClockLocked>
 800c404:	0005      	movs	r5, r0
 800c406:	e017      	b.n	800c438 <VerifyBlockEnable+0x98>
 800c408:	420b      	tst	r3, r1
 800c40a:	d0da      	beq.n	800c3c2 <VerifyBlockEnable+0x22>
 800c40c:	0013      	movs	r3, r2
 800c40e:	2010      	movs	r0, #16
 800c410:	404b      	eors	r3, r1
 800c412:	4383      	bics	r3, r0
 800c414:	4258      	negs	r0, r3
 800c416:	4143      	adcs	r3, r0
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1d7      	bne.n	800c3ce <VerifyBlockEnable+0x2e>
 800c41e:	4857      	ldr	r0, [pc, #348]	; (800c57c <VerifyBlockEnable+0x1dc>)
 800c420:	f7fa fe28 	bl	8007074 <print>
 800c424:	2288      	movs	r2, #136	; 0x88
 800c426:	4954      	ldr	r1, [pc, #336]	; (800c578 <VerifyBlockEnable+0x1d8>)
 800c428:	58a3      	ldr	r3, [r4, r2]
 800c42a:	0028      	movs	r0, r5
 800c42c:	400b      	ands	r3, r1
 800c42e:	50a3      	str	r3, [r4, r2]
 800c430:	0021      	movs	r1, r4
 800c432:	f7ff fe21 	bl	800c078 <RampChargePump>
 800c436:	0005      	movs	r5, r0
 800c438:	0028      	movs	r0, r5
 800c43a:	b003      	add	sp, #12
 800c43c:	bc0c      	pop	{r2, r3}
 800c43e:	4690      	mov	r8, r2
 800c440:	4699      	mov	r9, r3
 800c442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c444:	2388      	movs	r3, #136	; 0x88
 800c446:	58e7      	ldr	r7, [r4, r3]
 800c448:	58e3      	ldr	r3, [r4, r3]
 800c44a:	069b      	lsls	r3, r3, #26
 800c44c:	d407      	bmi.n	800c45e <VerifyBlockEnable+0xbe>
 800c44e:	2f00      	cmp	r7, #0
 800c450:	db05      	blt.n	800c45e <VerifyBlockEnable+0xbe>
 800c452:	0028      	movs	r0, r5
 800c454:	0021      	movs	r1, r4
 800c456:	f7ff fccb 	bl	800bdf0 <WriteRegisterConfiguration>
 800c45a:	0005      	movs	r5, r0
 800c45c:	e7ec      	b.n	800c438 <VerifyBlockEnable+0x98>
 800c45e:	239a      	movs	r3, #154	; 0x9a
 800c460:	5ce0      	ldrb	r0, [r4, r3]
 800c462:	3301      	adds	r3, #1
 800c464:	5ce2      	ldrb	r2, [r4, r3]
 800c466:	3b8c      	subs	r3, #140	; 0x8c
 800c468:	4698      	mov	r8, r3
 800c46a:	0206      	lsls	r6, r0, #8
 800c46c:	4316      	orrs	r6, r2
 800c46e:	09b6      	lsrs	r6, r6, #6
 800c470:	401e      	ands	r6, r3
 800c472:	46b1      	mov	r9, r6
 800c474:	4646      	mov	r6, r8
 800c476:	3330      	adds	r3, #48	; 0x30
 800c478:	469c      	mov	ip, r3
 800c47a:	401a      	ands	r2, r3
 800c47c:	3317      	adds	r3, #23
 800c47e:	5ce1      	ldrb	r1, [r4, r3]
 800c480:	3b01      	subs	r3, #1
 800c482:	5ce3      	ldrb	r3, [r4, r3]
 800c484:	021b      	lsls	r3, r3, #8
 800c486:	430b      	orrs	r3, r1
 800c488:	099b      	lsrs	r3, r3, #6
 800c48a:	4033      	ands	r3, r6
 800c48c:	2f00      	cmp	r7, #0
 800c48e:	db2f      	blt.n	800c4f0 <VerifyBlockEnable+0x150>
 800c490:	4667      	mov	r7, ip
 800c492:	400f      	ands	r7, r1
 800c494:	42ba      	cmp	r2, r7
 800c496:	d036      	beq.n	800c506 <VerifyBlockEnable+0x166>
 800c498:	4599      	cmp	r9, r3
 800c49a:	d03d      	beq.n	800c518 <VerifyBlockEnable+0x178>
 800c49c:	4649      	mov	r1, r9
 800c49e:	2900      	cmp	r1, #0
 800c4a0:	d134      	bne.n	800c50c <VerifyBlockEnable+0x16c>
 800c4a2:	019b      	lsls	r3, r3, #6
 800c4a4:	0a1d      	lsrs	r5, r3, #8
 800c4a6:	b25e      	sxtb	r6, r3
 800c4a8:	b253      	sxtb	r3, r2
 800c4aa:	2203      	movs	r2, #3
 800c4ac:	4390      	bics	r0, r2
 800c4ae:	4328      	orrs	r0, r5
 800c4b0:	3297      	adds	r2, #151	; 0x97
 800c4b2:	54a0      	strb	r0, [r4, r2]
 800c4b4:	0021      	movs	r1, r4
 800c4b6:	0020      	movs	r0, r4
 800c4b8:	4333      	orrs	r3, r6
 800c4ba:	3201      	adds	r2, #1
 800c4bc:	54a3      	strb	r3, [r4, r2]
 800c4be:	9400      	str	r4, [sp, #0]
 800c4c0:	4b2f      	ldr	r3, [pc, #188]	; (800c580 <VerifyBlockEnable+0x1e0>)
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	3198      	adds	r1, #152	; 0x98
 800c4c6:	30ac      	adds	r0, #172	; 0xac
 800c4c8:	f001 ffb8 	bl	800e43c <ADS_W_AnalogSetup>
 800c4cc:	1e05      	subs	r5, r0, #0
 800c4ce:	dab3      	bge.n	800c438 <VerifyBlockEnable+0x98>
 800c4d0:	482c      	ldr	r0, [pc, #176]	; (800c584 <VerifyBlockEnable+0x1e4>)
 800c4d2:	f7fa fdcf 	bl	8007074 <print>
 800c4d6:	2388      	movs	r3, #136	; 0x88
 800c4d8:	4a2b      	ldr	r2, [pc, #172]	; (800c588 <VerifyBlockEnable+0x1e8>)
 800c4da:	50e2      	str	r2, [r4, r3]
 800c4dc:	331c      	adds	r3, #28
 800c4de:	58e3      	ldr	r3, [r4, r3]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d0a9      	beq.n	800c438 <VerifyBlockEnable+0x98>
 800c4e4:	22a8      	movs	r2, #168	; 0xa8
 800c4e6:	0028      	movs	r0, r5
 800c4e8:	58a1      	ldr	r1, [r4, r2]
 800c4ea:	4798      	blx	r3
 800c4ec:	0005      	movs	r5, r0
 800c4ee:	e7a3      	b.n	800c438 <VerifyBlockEnable+0x98>
 800c4f0:	2788      	movs	r7, #136	; 0x88
 800c4f2:	2620      	movs	r6, #32
 800c4f4:	59e1      	ldr	r1, [r4, r7]
 800c4f6:	4331      	orrs	r1, r6
 800c4f8:	51e1      	str	r1, [r4, r7]
 800c4fa:	59e1      	ldr	r1, [r4, r7]
 800c4fc:	0049      	lsls	r1, r1, #1
 800c4fe:	0849      	lsrs	r1, r1, #1
 800c500:	51e1      	str	r1, [r4, r7]
 800c502:	2700      	movs	r7, #0
 800c504:	e7c6      	b.n	800c494 <VerifyBlockEnable+0xf4>
 800c506:	4599      	cmp	r9, r3
 800c508:	d1c8      	bne.n	800c49c <VerifyBlockEnable+0xfc>
 800c50a:	e7a2      	b.n	800c452 <VerifyBlockEnable+0xb2>
 800c50c:	2a00      	cmp	r2, #0
 800c50e:	d115      	bne.n	800c53c <VerifyBlockEnable+0x19c>
 800c510:	2300      	movs	r3, #0
 800c512:	2600      	movs	r6, #0
 800c514:	2500      	movs	r5, #0
 800c516:	e7c8      	b.n	800c4aa <VerifyBlockEnable+0x10a>
 800c518:	42ba      	cmp	r2, r7
 800c51a:	da14      	bge.n	800c546 <VerifyBlockEnable+0x1a6>
 800c51c:	1d55      	adds	r5, r2, #5
 800c51e:	2a09      	cmp	r2, #9
 800c520:	dc02      	bgt.n	800c528 <VerifyBlockEnable+0x188>
 800c522:	1c55      	adds	r5, r2, #1
 800c524:	42af      	cmp	r7, r5
 800c526:	dc1f      	bgt.n	800c568 <VerifyBlockEnable+0x1c8>
 800c528:	42af      	cmp	r7, r5
 800c52a:	dd00      	ble.n	800c52e <VerifyBlockEnable+0x18e>
 800c52c:	002f      	movs	r7, r5
 800c52e:	233f      	movs	r3, #63	; 0x3f
 800c530:	403b      	ands	r3, r7
 800c532:	464a      	mov	r2, r9
 800c534:	0196      	lsls	r6, r2, #6
 800c536:	0a35      	lsrs	r5, r6, #8
 800c538:	b276      	sxtb	r6, r6
 800c53a:	e7b6      	b.n	800c4aa <VerifyBlockEnable+0x10a>
 800c53c:	018e      	lsls	r6, r1, #6
 800c53e:	0a35      	lsrs	r5, r6, #8
 800c540:	2300      	movs	r3, #0
 800c542:	b276      	sxtb	r6, r6
 800c544:	e7b1      	b.n	800c4aa <VerifyBlockEnable+0x10a>
 800c546:	2300      	movs	r3, #0
 800c548:	2f00      	cmp	r7, #0
 800c54a:	d0f2      	beq.n	800c532 <VerifyBlockEnable+0x192>
 800c54c:	1e53      	subs	r3, r2, #1
 800c54e:	2a0a      	cmp	r2, #10
 800c550:	dd06      	ble.n	800c560 <VerifyBlockEnable+0x1c0>
 800c552:	2301      	movs	r3, #1
 800c554:	2a0b      	cmp	r2, #11
 800c556:	d003      	beq.n	800c560 <VerifyBlockEnable+0x1c0>
 800c558:	1f53      	subs	r3, r2, #5
 800c55a:	2b0a      	cmp	r3, #10
 800c55c:	da00      	bge.n	800c560 <VerifyBlockEnable+0x1c0>
 800c55e:	230a      	movs	r3, #10
 800c560:	429f      	cmp	r7, r3
 800c562:	dae4      	bge.n	800c52e <VerifyBlockEnable+0x18e>
 800c564:	001f      	movs	r7, r3
 800c566:	e7e2      	b.n	800c52e <VerifyBlockEnable+0x18e>
 800c568:	2398      	movs	r3, #152	; 0x98
 800c56a:	68e2      	ldr	r2, [r4, #12]
 800c56c:	5ad0      	ldrh	r0, [r2, r3]
 800c56e:	f7fd fd05 	bl	8009f7c <Time_DelayUSec>
 800c572:	239a      	movs	r3, #154	; 0x9a
 800c574:	5ce0      	ldrb	r0, [r4, r3]
 800c576:	e7d7      	b.n	800c528 <VerifyBlockEnable+0x188>
 800c578:	fffffeff 	.word	0xfffffeff
 800c57c:	080127d4 	.word	0x080127d4
 800c580:	0800c079 	.word	0x0800c079
 800c584:	08012704 	.word	0x08012704
 800c588:	0033dfff 	.word	0x0033dfff

0800c58c <Argus_Dev_SetEEPROMData>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	7b4b      	ldrb	r3, [r1, #13]
 800c590:	7b0d      	ldrb	r5, [r1, #12]
 800c592:	021b      	lsls	r3, r3, #8
 800c594:	042e      	lsls	r6, r5, #16
 800c596:	4333      	orrs	r3, r6
 800c598:	7b8e      	ldrb	r6, [r1, #14]
 800c59a:	7acc      	ldrb	r4, [r1, #11]
 800c59c:	4333      	orrs	r3, r6
 800c59e:	7bce      	ldrb	r6, [r1, #15]
 800c5a0:	02db      	lsls	r3, r3, #11
 800c5a2:	09f6      	lsrs	r6, r6, #7
 800c5a4:	0576      	lsls	r6, r6, #21
 800c5a6:	0adb      	lsrs	r3, r3, #11
 800c5a8:	4333      	orrs	r3, r6
 800c5aa:	4e15      	ldr	r6, [pc, #84]	; (800c600 <Argus_Dev_SetEEPROMData+0x74>)
 800c5ac:	0222      	lsls	r2, r4, #8
 800c5ae:	46b4      	mov	ip, r6
 800c5b0:	26e3      	movs	r6, #227	; 0xe3
 800c5b2:	432a      	orrs	r2, r5
 800c5b4:	4463      	add	r3, ip
 800c5b6:	0952      	lsrs	r2, r2, #5
 800c5b8:	0076      	lsls	r6, r6, #1
 800c5ba:	42b3      	cmp	r3, r6
 800c5bc:	d80c      	bhi.n	800c5d8 <Argus_Dev_SetEEPROMData+0x4c>
 800c5be:	0693      	lsls	r3, r2, #26
 800c5c0:	d10a      	bne.n	800c5d8 <Argus_Dev_SetEEPROMData+0x4c>
 800c5c2:	221f      	movs	r2, #31
 800c5c4:	2307      	movs	r3, #7
 800c5c6:	402a      	ands	r2, r5
 800c5c8:	2520      	movs	r5, #32
 800c5ca:	439c      	bics	r4, r3
 800c5cc:	432a      	orrs	r2, r5
 800c5ce:	72cc      	strb	r4, [r1, #11]
 800c5d0:	0224      	lsls	r4, r4, #8
 800c5d2:	730a      	strb	r2, [r1, #12]
 800c5d4:	4322      	orrs	r2, r4
 800c5d6:	0952      	lsrs	r2, r2, #5
 800c5d8:	233f      	movs	r3, #63	; 0x3f
 800c5da:	401a      	ands	r2, r3
 800c5dc:	7002      	strb	r2, [r0, #0]
 800c5de:	7b0b      	ldrb	r3, [r1, #12]
 800c5e0:	7b4a      	ldrb	r2, [r1, #13]
 800c5e2:	041b      	lsls	r3, r3, #16
 800c5e4:	0212      	lsls	r2, r2, #8
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	7b8a      	ldrb	r2, [r1, #14]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	7bca      	ldrb	r2, [r1, #15]
 800c5ee:	02db      	lsls	r3, r3, #11
 800c5f0:	09d2      	lsrs	r2, r2, #7
 800c5f2:	0552      	lsls	r2, r2, #21
 800c5f4:	0adb      	lsrs	r3, r3, #11
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	6083      	str	r3, [r0, #8]
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	bd70      	pop	{r4, r5, r6, pc}
 800c5fe:	46c0      	nop			; (mov r8, r8)
 800c600:	fffffcfd 	.word	0xfffffcfd

0800c604 <Argus_Dev_ReadEEPROM>:
 800c604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c606:	46ce      	mov	lr, r9
 800c608:	4647      	mov	r7, r8
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b087      	sub	sp, #28
 800c60e:	0007      	movs	r7, r0
 800c610:	ae03      	add	r6, sp, #12
 800c612:	2208      	movs	r2, #8
 800c614:	4689      	mov	r9, r1
 800c616:	a804      	add	r0, sp, #16
 800c618:	2100      	movs	r1, #0
 800c61a:	f7fc f811 	bl	8008640 <memset>
 800c61e:	2203      	movs	r2, #3
 800c620:	2100      	movs	r1, #0
 800c622:	0030      	movs	r0, r6
 800c624:	f7fc f80c 	bl	8008640 <memset>
 800c628:	2361      	movs	r3, #97	; 0x61
 800c62a:	4698      	mov	r8, r3
 800c62c:	44b8      	add	r8, r7
 800c62e:	2203      	movs	r2, #3
 800c630:	4641      	mov	r1, r8
 800c632:	0030      	movs	r0, r6
 800c634:	f7fb fff9 	bl	800862a <memcpy>
 800c638:	2240      	movs	r2, #64	; 0x40
 800c63a:	78b3      	ldrb	r3, [r6, #2]
 800c63c:	a804      	add	r0, sp, #16
 800c63e:	4313      	orrs	r3, r2
 800c640:	2288      	movs	r2, #136	; 0x88
 800c642:	70b3      	strb	r3, [r6, #2]
 800c644:	2380      	movs	r3, #128	; 0x80
 800c646:	58b9      	ldr	r1, [r7, r2]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	430b      	orrs	r3, r1
 800c64c:	50bb      	str	r3, [r7, r2]
 800c64e:	003d      	movs	r5, r7
 800c650:	f7fd fc8e 	bl	8009f70 <Time_GetNow>
 800c654:	2300      	movs	r3, #0
 800c656:	35ac      	adds	r5, #172	; 0xac
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	2200      	movs	r2, #0
 800c65c:	0031      	movs	r1, r6
 800c65e:	0028      	movs	r0, r5
 800c660:	f002 f87c 	bl	800e75c <ADS_W_DeviceConfig>
 800c664:	1e04      	subs	r4, r0, #0
 800c666:	da02      	bge.n	800c66e <Argus_Dev_ReadEEPROM+0x6a>
 800c668:	e011      	b.n	800c68e <Argus_Dev_ReadEEPROM+0x8a>
 800c66a:	2c02      	cmp	r4, #2
 800c66c:	d115      	bne.n	800c69a <Argus_Dev_ReadEEPROM+0x96>
 800c66e:	0028      	movs	r0, r5
 800c670:	f001 fc20 	bl	800deb4 <ADS_GetStatus>
 800c674:	2164      	movs	r1, #100	; 0x64
 800c676:	0004      	movs	r4, r0
 800c678:	a804      	add	r0, sp, #16
 800c67a:	f7fd fd07 	bl	800a08c <Time_CheckTimeoutMSec>
 800c67e:	2800      	cmp	r0, #0
 800c680:	d0f3      	beq.n	800c66a <Argus_Dev_ReadEEPROM+0x66>
 800c682:	2164      	movs	r1, #100	; 0x64
 800c684:	4824      	ldr	r0, [pc, #144]	; (800c718 <Argus_Dev_ReadEEPROM+0x114>)
 800c686:	2406      	movs	r4, #6
 800c688:	f7fa fcf4 	bl	8007074 <print>
 800c68c:	4264      	negs	r4, r4
 800c68e:	0020      	movs	r0, r4
 800c690:	b007      	add	sp, #28
 800c692:	bc0c      	pop	{r2, r3}
 800c694:	4690      	mov	r8, r2
 800c696:	4699      	mov	r9, r3
 800c698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c69a:	2c00      	cmp	r4, #0
 800c69c:	dbf7      	blt.n	800c68e <Argus_Dev_ReadEEPROM+0x8a>
 800c69e:	4649      	mov	r1, r9
 800c6a0:	0028      	movs	r0, r5
 800c6a2:	f001 fce1 	bl	800e068 <ADS_ReadEEPROM>
 800c6a6:	0004      	movs	r4, r0
 800c6a8:	286d      	cmp	r0, #109	; 0x6d
 800c6aa:	d030      	beq.n	800c70e <Argus_Dev_ReadEEPROM+0x10a>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	dbee      	blt.n	800c68e <Argus_Dev_ReadEEPROM+0x8a>
 800c6b0:	2203      	movs	r2, #3
 800c6b2:	4641      	mov	r1, r8
 800c6b4:	0030      	movs	r0, r6
 800c6b6:	f7fb ffb8 	bl	800862a <memcpy>
 800c6ba:	2240      	movs	r2, #64	; 0x40
 800c6bc:	78b3      	ldrb	r3, [r6, #2]
 800c6be:	a804      	add	r0, sp, #16
 800c6c0:	4393      	bics	r3, r2
 800c6c2:	70b3      	strb	r3, [r6, #2]
 800c6c4:	2380      	movs	r3, #128	; 0x80
 800c6c6:	3248      	adds	r2, #72	; 0x48
 800c6c8:	58b9      	ldr	r1, [r7, r2]
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	430b      	orrs	r3, r1
 800c6ce:	50bb      	str	r3, [r7, r2]
 800c6d0:	f7fd fc4e 	bl	8009f70 <Time_GetNow>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	0031      	movs	r1, r6
 800c6dc:	0028      	movs	r0, r5
 800c6de:	f002 f83d 	bl	800e75c <ADS_W_DeviceConfig>
 800c6e2:	1e04      	subs	r4, r0, #0
 800c6e4:	da02      	bge.n	800c6ec <Argus_Dev_ReadEEPROM+0xe8>
 800c6e6:	e7d2      	b.n	800c68e <Argus_Dev_ReadEEPROM+0x8a>
 800c6e8:	2c02      	cmp	r4, #2
 800c6ea:	d1d0      	bne.n	800c68e <Argus_Dev_ReadEEPROM+0x8a>
 800c6ec:	0028      	movs	r0, r5
 800c6ee:	f001 fbe1 	bl	800deb4 <ADS_GetStatus>
 800c6f2:	2164      	movs	r1, #100	; 0x64
 800c6f4:	0004      	movs	r4, r0
 800c6f6:	a804      	add	r0, sp, #16
 800c6f8:	f7fd fcc8 	bl	800a08c <Time_CheckTimeoutMSec>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d0f3      	beq.n	800c6e8 <Argus_Dev_ReadEEPROM+0xe4>
 800c700:	2406      	movs	r4, #6
 800c702:	2164      	movs	r1, #100	; 0x64
 800c704:	4805      	ldr	r0, [pc, #20]	; (800c71c <Argus_Dev_ReadEEPROM+0x118>)
 800c706:	f7fa fcb5 	bl	8007074 <print>
 800c70a:	4264      	negs	r4, r4
 800c70c:	e7bf      	b.n	800c68e <Argus_Dev_ReadEEPROM+0x8a>
 800c70e:	4804      	ldr	r0, [pc, #16]	; (800c720 <Argus_Dev_ReadEEPROM+0x11c>)
 800c710:	f7fa fcb0 	bl	8007074 <print>
 800c714:	e7cc      	b.n	800c6b0 <Argus_Dev_ReadEEPROM+0xac>
 800c716:	46c0      	nop			; (mov r8, r8)
 800c718:	08012594 	.word	0x08012594
 800c71c:	08012650 	.word	0x08012650
 800c720:	080125c8 	.word	0x080125c8

0800c724 <Argus_Dev_TestConnection>:
 800c724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c726:	46c6      	mov	lr, r8
 800c728:	0007      	movs	r7, r0
 800c72a:	b500      	push	{lr}
 800c72c:	b086      	sub	sp, #24
 800c72e:	2203      	movs	r2, #3
 800c730:	2100      	movs	r1, #0
 800c732:	a803      	add	r0, sp, #12
 800c734:	f7fb ff84 	bl	8008640 <memset>
 800c738:	2208      	movs	r2, #8
 800c73a:	2100      	movs	r1, #0
 800c73c:	a804      	add	r0, sp, #16
 800c73e:	f7fb ff7f 	bl	8008640 <memset>
 800c742:	0039      	movs	r1, r7
 800c744:	2203      	movs	r2, #3
 800c746:	315c      	adds	r1, #92	; 0x5c
 800c748:	a803      	add	r0, sp, #12
 800c74a:	f7fb ff6e 	bl	800862a <memcpy>
 800c74e:	003e      	movs	r6, r7
 800c750:	a804      	add	r0, sp, #16
 800c752:	f7fd fc0d 	bl	8009f70 <Time_GetNow>
 800c756:	2300      	movs	r3, #0
 800c758:	36ac      	adds	r6, #172	; 0xac
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	2200      	movs	r2, #0
 800c75e:	a903      	add	r1, sp, #12
 800c760:	0030      	movs	r0, r6
 800c762:	f002 fcab 	bl	800f0bc <ADS_WR_PixelSetup>
 800c766:	1e04      	subs	r4, r0, #0
 800c768:	da02      	bge.n	800c770 <Argus_Dev_TestConnection+0x4c>
 800c76a:	e011      	b.n	800c790 <Argus_Dev_TestConnection+0x6c>
 800c76c:	2c02      	cmp	r4, #2
 800c76e:	d114      	bne.n	800c79a <Argus_Dev_TestConnection+0x76>
 800c770:	0030      	movs	r0, r6
 800c772:	f001 fb9f 	bl	800deb4 <ADS_GetStatus>
 800c776:	210a      	movs	r1, #10
 800c778:	0004      	movs	r4, r0
 800c77a:	a804      	add	r0, sp, #16
 800c77c:	f7fd fc86 	bl	800a08c <Time_CheckTimeoutMSec>
 800c780:	1e05      	subs	r5, r0, #0
 800c782:	d0f3      	beq.n	800c76c <Argus_Dev_TestConnection+0x48>
 800c784:	210a      	movs	r1, #10
 800c786:	4830      	ldr	r0, [pc, #192]	; (800c848 <Argus_Dev_TestConnection+0x124>)
 800c788:	2406      	movs	r4, #6
 800c78a:	f7fa fc73 	bl	8007074 <print>
 800c78e:	4264      	negs	r4, r4
 800c790:	0020      	movs	r0, r4
 800c792:	b006      	add	sp, #24
 800c794:	bc04      	pop	{r2}
 800c796:	4690      	mov	r8, r2
 800c798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c79a:	2c00      	cmp	r4, #0
 800c79c:	dbf8      	blt.n	800c790 <Argus_Dev_TestConnection+0x6c>
 800c79e:	215d      	movs	r1, #93	; 0x5d
 800c7a0:	466a      	mov	r2, sp
 800c7a2:	201f      	movs	r0, #31
 800c7a4:	5c7b      	ldrb	r3, [r7, r1]
 800c7a6:	7b52      	ldrb	r2, [r2, #13]
 800c7a8:	4003      	ands	r3, r0
 800c7aa:	4382      	bics	r2, r0
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	547b      	strb	r3, [r7, r1]
 800c7b0:	235d      	movs	r3, #93	; 0x5d
 800c7b2:	4698      	mov	r8, r3
 800c7b4:	3b50      	subs	r3, #80	; 0x50
 800c7b6:	44b8      	add	r8, r7
 800c7b8:	446b      	add	r3, sp
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	4641      	mov	r1, r8
 800c7be:	0018      	movs	r0, r3
 800c7c0:	f7fb ff24 	bl	800860c <memcmp>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	d0e3      	beq.n	800c790 <Argus_Dev_TestConnection+0x6c>
 800c7c8:	9500      	str	r5, [sp, #0]
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	a903      	add	r1, sp, #12
 800c7d0:	0030      	movs	r0, r6
 800c7d2:	f002 fc73 	bl	800f0bc <ADS_WR_PixelSetup>
 800c7d6:	1e04      	subs	r4, r0, #0
 800c7d8:	da02      	bge.n	800c7e0 <Argus_Dev_TestConnection+0xbc>
 800c7da:	e7d9      	b.n	800c790 <Argus_Dev_TestConnection+0x6c>
 800c7dc:	2c02      	cmp	r4, #2
 800c7de:	d10a      	bne.n	800c7f6 <Argus_Dev_TestConnection+0xd2>
 800c7e0:	0030      	movs	r0, r6
 800c7e2:	f001 fb67 	bl	800deb4 <ADS_GetStatus>
 800c7e6:	210a      	movs	r1, #10
 800c7e8:	0004      	movs	r4, r0
 800c7ea:	a804      	add	r0, sp, #16
 800c7ec:	f7fd fc4e 	bl	800a08c <Time_CheckTimeoutMSec>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d0f3      	beq.n	800c7dc <Argus_Dev_TestConnection+0xb8>
 800c7f4:	e7c6      	b.n	800c784 <Argus_Dev_TestConnection+0x60>
 800c7f6:	2c00      	cmp	r4, #0
 800c7f8:	dbca      	blt.n	800c790 <Argus_Dev_TestConnection+0x6c>
 800c7fa:	215d      	movs	r1, #93	; 0x5d
 800c7fc:	466b      	mov	r3, sp
 800c7fe:	7b5a      	ldrb	r2, [r3, #13]
 800c800:	5c7b      	ldrb	r3, [r7, r1]
 800c802:	301f      	adds	r0, #31
 800c804:	4003      	ands	r3, r0
 800c806:	0955      	lsrs	r5, r2, #5
 800c808:	4382      	bics	r2, r0
 800c80a:	4313      	orrs	r3, r2
 800c80c:	547b      	strb	r3, [r7, r1]
 800c80e:	230d      	movs	r3, #13
 800c810:	446b      	add	r3, sp
 800c812:	2202      	movs	r2, #2
 800c814:	4641      	mov	r1, r8
 800c816:	0018      	movs	r0, r3
 800c818:	f7fb fef8 	bl	800860c <memcmp>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d10c      	bne.n	800c83a <Argus_Dev_TestConnection+0x116>
 800c820:	2d00      	cmp	r5, #0
 800c822:	d004      	beq.n	800c82e <Argus_Dev_TestConnection+0x10a>
 800c824:	2d01      	cmp	r5, #1
 800c826:	d106      	bne.n	800c836 <Argus_Dev_TestConnection+0x112>
 800c828:	4b08      	ldr	r3, [pc, #32]	; (800c84c <Argus_Dev_TestConnection+0x128>)
 800c82a:	607b      	str	r3, [r7, #4]
 800c82c:	e7b0      	b.n	800c790 <Argus_Dev_TestConnection+0x6c>
 800c82e:	2380      	movs	r3, #128	; 0x80
 800c830:	045b      	lsls	r3, r3, #17
 800c832:	607b      	str	r3, [r7, #4]
 800c834:	e7ac      	b.n	800c790 <Argus_Dev_TestConnection+0x6c>
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	e7aa      	b.n	800c790 <Argus_Dev_TestConnection+0x6c>
 800c83a:	2465      	movs	r4, #101	; 0x65
 800c83c:	4804      	ldr	r0, [pc, #16]	; (800c850 <Argus_Dev_TestConnection+0x12c>)
 800c83e:	f7fa fc19 	bl	8007074 <print>
 800c842:	4264      	negs	r4, r4
 800c844:	e7a4      	b.n	800c790 <Argus_Dev_TestConnection+0x6c>
 800c846:	46c0      	nop			; (mov r8, r8)
 800c848:	08012688 	.word	0x08012688
 800c84c:	01010000 	.word	0x01010000
 800c850:	080126cc 	.word	0x080126cc

0800c854 <Argus_Dev_Init>:
 800c854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c856:	46c6      	mov	lr, r8
 800c858:	b500      	push	{lr}
 800c85a:	0006      	movs	r6, r0
 800c85c:	b08a      	sub	sp, #40	; 0x28
 800c85e:	000c      	movs	r4, r1
 800c860:	0017      	movs	r7, r2
 800c862:	2800      	cmp	r0, #0
 800c864:	d100      	bne.n	800c868 <Argus_Dev_Init+0x14>
 800c866:	e0e0      	b.n	800ca2a <Argus_Dev_Init+0x1d6>
 800c868:	2900      	cmp	r1, #0
 800c86a:	d100      	bne.n	800c86e <Argus_Dev_Init+0x1a>
 800c86c:	e0dd      	b.n	800ca2a <Argus_Dev_Init+0x1d6>
 800c86e:	22f4      	movs	r2, #244	; 0xf4
 800c870:	2100      	movs	r1, #0
 800c872:	0035      	movs	r5, r6
 800c874:	f7fb fee4 	bl	8008640 <memset>
 800c878:	23e8      	movs	r3, #232	; 0xe8
 800c87a:	35ac      	adds	r5, #172	; 0xac
 800c87c:	50f4      	str	r4, [r6, r3]
 800c87e:	0039      	movs	r1, r7
 800c880:	0028      	movs	r0, r5
 800c882:	f001 fad7 	bl	800de34 <ADS_Init>
 800c886:	1e04      	subs	r4, r0, #0
 800c888:	db38      	blt.n	800c8fc <Argus_Dev_Init+0xa8>
 800c88a:	0030      	movs	r0, r6
 800c88c:	f7fe fa20 	bl	800acd0 <Argus_Cfg_InitDCA>
 800c890:	1e04      	subs	r4, r0, #0
 800c892:	db33      	blt.n	800c8fc <Argus_Dev_Init+0xa8>
 800c894:	2388      	movs	r3, #136	; 0x88
 800c896:	4abf      	ldr	r2, [pc, #764]	; (800cb94 <Argus_Dev_Init+0x340>)
 800c898:	2100      	movs	r1, #0
 800c89a:	50f2      	str	r2, [r6, r3]
 800c89c:	a803      	add	r0, sp, #12
 800c89e:	2208      	movs	r2, #8
 800c8a0:	f7fb fece 	bl	8008640 <memset>
 800c8a4:	a803      	add	r0, sp, #12
 800c8a6:	f7fd fb63 	bl	8009f70 <Time_GetNow>
 800c8aa:	4bbb      	ldr	r3, [pc, #748]	; (800cb98 <Argus_Dev_Init+0x344>)
 800c8ac:	2124      	movs	r1, #36	; 0x24
 800c8ae:	9305      	str	r3, [sp, #20]
 800c8b0:	4bba      	ldr	r3, [pc, #744]	; (800cb9c <Argus_Dev_Init+0x348>)
 800c8b2:	466a      	mov	r2, sp
 800c8b4:	9306      	str	r3, [sp, #24]
 800c8b6:	4bba      	ldr	r3, [pc, #744]	; (800cba0 <Argus_Dev_Init+0x34c>)
 800c8b8:	1852      	adds	r2, r2, r1
 800c8ba:	9307      	str	r3, [sp, #28]
 800c8bc:	4bb9      	ldr	r3, [pc, #740]	; (800cba4 <Argus_Dev_Init+0x350>)
 800c8be:	a905      	add	r1, sp, #20
 800c8c0:	9308      	str	r3, [sp, #32]
 800c8c2:	2310      	movs	r3, #16
 800c8c4:	7013      	strb	r3, [r2, #0]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	0028      	movs	r0, r5
 800c8ce:	f001 fc89 	bl	800e1e4 <ADS_W_LaserPattern>
 800c8d2:	1e04      	subs	r4, r0, #0
 800c8d4:	da02      	bge.n	800c8dc <Argus_Dev_Init+0x88>
 800c8d6:	e011      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800c8d8:	2c02      	cmp	r4, #2
 800c8da:	d114      	bne.n	800c906 <Argus_Dev_Init+0xb2>
 800c8dc:	0028      	movs	r0, r5
 800c8de:	f001 fae9 	bl	800deb4 <ADS_GetStatus>
 800c8e2:	2164      	movs	r1, #100	; 0x64
 800c8e4:	0004      	movs	r4, r0
 800c8e6:	a803      	add	r0, sp, #12
 800c8e8:	f7fd fbd0 	bl	800a08c <Time_CheckTimeoutMSec>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d0f3      	beq.n	800c8d8 <Argus_Dev_Init+0x84>
 800c8f0:	2164      	movs	r1, #100	; 0x64
 800c8f2:	48ad      	ldr	r0, [pc, #692]	; (800cba8 <Argus_Dev_Init+0x354>)
 800c8f4:	2406      	movs	r4, #6
 800c8f6:	f7fa fbbd 	bl	8007074 <print>
 800c8fa:	4264      	negs	r4, r4
 800c8fc:	0020      	movs	r0, r4
 800c8fe:	b00a      	add	sp, #40	; 0x28
 800c900:	bc04      	pop	{r2}
 800c902:	4690      	mov	r8, r2
 800c904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c906:	2c00      	cmp	r4, #0
 800c908:	dbf8      	blt.n	800c8fc <Argus_Dev_Init+0xa8>
 800c90a:	2224      	movs	r2, #36	; 0x24
 800c90c:	466b      	mov	r3, sp
 800c90e:	189b      	adds	r3, r3, r2
 800c910:	9005      	str	r0, [sp, #20]
 800c912:	9006      	str	r0, [sp, #24]
 800c914:	9007      	str	r0, [sp, #28]
 800c916:	9008      	str	r0, [sp, #32]
 800c918:	2200      	movs	r2, #0
 800c91a:	7018      	strb	r0, [r3, #0]
 800c91c:	a905      	add	r1, sp, #20
 800c91e:	9000      	str	r0, [sp, #0]
 800c920:	2300      	movs	r3, #0
 800c922:	0028      	movs	r0, r5
 800c924:	f002 fb02 	bl	800ef2c <ADS_WR_LaserPattern>
 800c928:	1e04      	subs	r4, r0, #0
 800c92a:	da02      	bge.n	800c932 <Argus_Dev_Init+0xde>
 800c92c:	e7e6      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800c92e:	2c02      	cmp	r4, #2
 800c930:	d10a      	bne.n	800c948 <Argus_Dev_Init+0xf4>
 800c932:	0028      	movs	r0, r5
 800c934:	f001 fabe 	bl	800deb4 <ADS_GetStatus>
 800c938:	2164      	movs	r1, #100	; 0x64
 800c93a:	0004      	movs	r4, r0
 800c93c:	a803      	add	r0, sp, #12
 800c93e:	f7fd fba5 	bl	800a08c <Time_CheckTimeoutMSec>
 800c942:	2800      	cmp	r0, #0
 800c944:	d0f3      	beq.n	800c92e <Argus_Dev_Init+0xda>
 800c946:	e7d3      	b.n	800c8f0 <Argus_Dev_Init+0x9c>
 800c948:	2c00      	cmp	r4, #0
 800c94a:	dbd7      	blt.n	800c8fc <Argus_Dev_Init+0xa8>
 800c94c:	466b      	mov	r3, sp
 800c94e:	7d5b      	ldrb	r3, [r3, #21]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d164      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c954:	466b      	mov	r3, sp
 800c956:	7d9b      	ldrb	r3, [r3, #22]
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d160      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c95c:	466b      	mov	r3, sp
 800c95e:	7ddb      	ldrb	r3, [r3, #23]
 800c960:	2b03      	cmp	r3, #3
 800c962:	d15c      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c964:	466b      	mov	r3, sp
 800c966:	7e1b      	ldrb	r3, [r3, #24]
 800c968:	2b04      	cmp	r3, #4
 800c96a:	d158      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c96c:	466b      	mov	r3, sp
 800c96e:	7e5b      	ldrb	r3, [r3, #25]
 800c970:	2b05      	cmp	r3, #5
 800c972:	d154      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c974:	466b      	mov	r3, sp
 800c976:	7e9b      	ldrb	r3, [r3, #26]
 800c978:	2b06      	cmp	r3, #6
 800c97a:	d150      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c97c:	466b      	mov	r3, sp
 800c97e:	7edb      	ldrb	r3, [r3, #27]
 800c980:	2b07      	cmp	r3, #7
 800c982:	d14c      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c984:	466b      	mov	r3, sp
 800c986:	7f1b      	ldrb	r3, [r3, #28]
 800c988:	2b08      	cmp	r3, #8
 800c98a:	d148      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c98c:	466b      	mov	r3, sp
 800c98e:	7f5b      	ldrb	r3, [r3, #29]
 800c990:	2b09      	cmp	r3, #9
 800c992:	d144      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c994:	466b      	mov	r3, sp
 800c996:	7f9b      	ldrb	r3, [r3, #30]
 800c998:	2b0a      	cmp	r3, #10
 800c99a:	d140      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c99c:	466b      	mov	r3, sp
 800c99e:	7fdb      	ldrb	r3, [r3, #31]
 800c9a0:	2b0b      	cmp	r3, #11
 800c9a2:	d13c      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c9a4:	466b      	mov	r3, sp
 800c9a6:	2220      	movs	r2, #32
 800c9a8:	189b      	adds	r3, r3, r2
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	2b0c      	cmp	r3, #12
 800c9ae:	d136      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c9b0:	466b      	mov	r3, sp
 800c9b2:	3201      	adds	r2, #1
 800c9b4:	189b      	adds	r3, r3, r2
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b0d      	cmp	r3, #13
 800c9ba:	d130      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c9bc:	466b      	mov	r3, sp
 800c9be:	3201      	adds	r2, #1
 800c9c0:	189b      	adds	r3, r3, r2
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	2b0e      	cmp	r3, #14
 800c9c6:	d12a      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c9c8:	466b      	mov	r3, sp
 800c9ca:	3201      	adds	r2, #1
 800c9cc:	189b      	adds	r3, r3, r2
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	2b0f      	cmp	r3, #15
 800c9d2:	d124      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c9d4:	466b      	mov	r3, sp
 800c9d6:	3201      	adds	r2, #1
 800c9d8:	189b      	adds	r3, r3, r2
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b10      	cmp	r3, #16
 800c9de:	d11e      	bne.n	800ca1e <Argus_Dev_Init+0x1ca>
 800c9e0:	2124      	movs	r1, #36	; 0x24
 800c9e2:	466a      	mov	r2, sp
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	1852      	adds	r2, r2, r1
 800c9e8:	9305      	str	r3, [sp, #20]
 800c9ea:	9306      	str	r3, [sp, #24]
 800c9ec:	9307      	str	r3, [sp, #28]
 800c9ee:	9308      	str	r3, [sp, #32]
 800c9f0:	a905      	add	r1, sp, #20
 800c9f2:	7013      	strb	r3, [r2, #0]
 800c9f4:	0028      	movs	r0, r5
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f002 fa97 	bl	800ef2c <ADS_WR_LaserPattern>
 800c9fe:	1e04      	subs	r4, r0, #0
 800ca00:	da02      	bge.n	800ca08 <Argus_Dev_Init+0x1b4>
 800ca02:	e77b      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800ca04:	2c02      	cmp	r4, #2
 800ca06:	d113      	bne.n	800ca30 <Argus_Dev_Init+0x1dc>
 800ca08:	0028      	movs	r0, r5
 800ca0a:	f001 fa53 	bl	800deb4 <ADS_GetStatus>
 800ca0e:	2164      	movs	r1, #100	; 0x64
 800ca10:	0004      	movs	r4, r0
 800ca12:	a803      	add	r0, sp, #12
 800ca14:	f7fd fb3a 	bl	800a08c <Time_CheckTimeoutMSec>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d0f3      	beq.n	800ca04 <Argus_Dev_Init+0x1b0>
 800ca1c:	e768      	b.n	800c8f0 <Argus_Dev_Init+0x9c>
 800ca1e:	2465      	movs	r4, #101	; 0x65
 800ca20:	4862      	ldr	r0, [pc, #392]	; (800cbac <Argus_Dev_Init+0x358>)
 800ca22:	f7fa fb27 	bl	8007074 <print>
 800ca26:	4264      	negs	r4, r4
 800ca28:	e768      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800ca2a:	2405      	movs	r4, #5
 800ca2c:	4264      	negs	r4, r4
 800ca2e:	e765      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800ca30:	2c00      	cmp	r4, #0
 800ca32:	da00      	bge.n	800ca36 <Argus_Dev_Init+0x1e2>
 800ca34:	e762      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800ca36:	466b      	mov	r3, sp
 800ca38:	7d5b      	ldrb	r3, [r3, #21]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d000      	beq.n	800ca40 <Argus_Dev_Init+0x1ec>
 800ca3e:	e10e      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca40:	466b      	mov	r3, sp
 800ca42:	7d9b      	ldrb	r3, [r3, #22]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d000      	beq.n	800ca4a <Argus_Dev_Init+0x1f6>
 800ca48:	e109      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca4a:	466b      	mov	r3, sp
 800ca4c:	7ddb      	ldrb	r3, [r3, #23]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d000      	beq.n	800ca54 <Argus_Dev_Init+0x200>
 800ca52:	e104      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca54:	466b      	mov	r3, sp
 800ca56:	7e1b      	ldrb	r3, [r3, #24]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d000      	beq.n	800ca5e <Argus_Dev_Init+0x20a>
 800ca5c:	e0ff      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca5e:	466b      	mov	r3, sp
 800ca60:	7e5b      	ldrb	r3, [r3, #25]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d000      	beq.n	800ca68 <Argus_Dev_Init+0x214>
 800ca66:	e0fa      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca68:	466b      	mov	r3, sp
 800ca6a:	7e9b      	ldrb	r3, [r3, #26]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d000      	beq.n	800ca72 <Argus_Dev_Init+0x21e>
 800ca70:	e0f5      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca72:	466b      	mov	r3, sp
 800ca74:	7edb      	ldrb	r3, [r3, #27]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d000      	beq.n	800ca7c <Argus_Dev_Init+0x228>
 800ca7a:	e0f0      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca7c:	466b      	mov	r3, sp
 800ca7e:	7f1b      	ldrb	r3, [r3, #28]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d000      	beq.n	800ca86 <Argus_Dev_Init+0x232>
 800ca84:	e0eb      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca86:	466b      	mov	r3, sp
 800ca88:	7f5b      	ldrb	r3, [r3, #29]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d000      	beq.n	800ca90 <Argus_Dev_Init+0x23c>
 800ca8e:	e0e6      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca90:	466b      	mov	r3, sp
 800ca92:	7f9b      	ldrb	r3, [r3, #30]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d000      	beq.n	800ca9a <Argus_Dev_Init+0x246>
 800ca98:	e0e1      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800ca9a:	466b      	mov	r3, sp
 800ca9c:	7fdb      	ldrb	r3, [r3, #31]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d000      	beq.n	800caa4 <Argus_Dev_Init+0x250>
 800caa2:	e0dc      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800caa4:	466b      	mov	r3, sp
 800caa6:	2220      	movs	r2, #32
 800caa8:	189b      	adds	r3, r3, r2
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d000      	beq.n	800cab2 <Argus_Dev_Init+0x25e>
 800cab0:	e0d5      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800cab2:	466b      	mov	r3, sp
 800cab4:	3201      	adds	r2, #1
 800cab6:	189b      	adds	r3, r3, r2
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d000      	beq.n	800cac0 <Argus_Dev_Init+0x26c>
 800cabe:	e0ce      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800cac0:	466b      	mov	r3, sp
 800cac2:	3201      	adds	r2, #1
 800cac4:	189b      	adds	r3, r3, r2
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d000      	beq.n	800cace <Argus_Dev_Init+0x27a>
 800cacc:	e0c7      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800cace:	466b      	mov	r3, sp
 800cad0:	3201      	adds	r2, #1
 800cad2:	189b      	adds	r3, r3, r2
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d000      	beq.n	800cadc <Argus_Dev_Init+0x288>
 800cada:	e0c0      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800cadc:	466b      	mov	r3, sp
 800cade:	3201      	adds	r2, #1
 800cae0:	189b      	adds	r3, r3, r2
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d000      	beq.n	800caea <Argus_Dev_Init+0x296>
 800cae8:	e0b9      	b.n	800cc5e <Argus_Dev_Init+0x40a>
 800caea:	0030      	movs	r0, r6
 800caec:	f7ff fe1a 	bl	800c724 <Argus_Dev_TestConnection>
 800caf0:	1e04      	subs	r4, r0, #0
 800caf2:	da00      	bge.n	800caf6 <Argus_Dev_Init+0x2a2>
 800caf4:	e702      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800caf6:	2205      	movs	r2, #5
 800caf8:	2100      	movs	r1, #0
 800cafa:	a803      	add	r0, sp, #12
 800cafc:	f7fb fda0 	bl	8008640 <memset>
 800cb00:	2208      	movs	r2, #8
 800cb02:	2100      	movs	r1, #0
 800cb04:	a805      	add	r0, sp, #20
 800cb06:	f7fb fd9b 	bl	8008640 <memset>
 800cb0a:	a805      	add	r0, sp, #20
 800cb0c:	f7fd fa30 	bl	8009f70 <Time_GetNow>
 800cb10:	466b      	mov	r3, sp
 800cb12:	2203      	movs	r2, #3
 800cb14:	7b9b      	ldrb	r3, [r3, #14]
 800cb16:	a903      	add	r1, sp, #12
 800cb18:	4393      	bics	r3, r2
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	466a      	mov	r2, sp
 800cb20:	7393      	strb	r3, [r2, #14]
 800cb22:	2307      	movs	r3, #7
 800cb24:	73d3      	strb	r3, [r2, #15]
 800cb26:	2300      	movs	r3, #0
 800cb28:	2200      	movs	r2, #0
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	0028      	movs	r0, r5
 800cb2e:	f002 fa61 	bl	800eff4 <ADS_WR_AnalogSetup>
 800cb32:	1e04      	subs	r4, r0, #0
 800cb34:	da02      	bge.n	800cb3c <Argus_Dev_Init+0x2e8>
 800cb36:	e6e1      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cb38:	2c02      	cmp	r4, #2
 800cb3a:	d10a      	bne.n	800cb52 <Argus_Dev_Init+0x2fe>
 800cb3c:	0028      	movs	r0, r5
 800cb3e:	f001 f9b9 	bl	800deb4 <ADS_GetStatus>
 800cb42:	2164      	movs	r1, #100	; 0x64
 800cb44:	0004      	movs	r4, r0
 800cb46:	a805      	add	r0, sp, #20
 800cb48:	f7fd faa0 	bl	800a08c <Time_CheckTimeoutMSec>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d0f3      	beq.n	800cb38 <Argus_Dev_Init+0x2e4>
 800cb50:	e6ce      	b.n	800c8f0 <Argus_Dev_Init+0x9c>
 800cb52:	2c00      	cmp	r4, #0
 800cb54:	da00      	bge.n	800cb58 <Argus_Dev_Init+0x304>
 800cb56:	e6d1      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cb58:	466b      	mov	r3, sp
 800cb5a:	2203      	movs	r2, #3
 800cb5c:	7b9b      	ldrb	r3, [r3, #14]
 800cb5e:	a903      	add	r1, sp, #12
 800cb60:	4393      	bics	r3, r2
 800cb62:	466a      	mov	r2, sp
 800cb64:	7393      	strb	r3, [r2, #14]
 800cb66:	73d0      	strb	r0, [r2, #15]
 800cb68:	2300      	movs	r3, #0
 800cb6a:	9000      	str	r0, [sp, #0]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	0028      	movs	r0, r5
 800cb70:	f002 fa40 	bl	800eff4 <ADS_WR_AnalogSetup>
 800cb74:	1e04      	subs	r4, r0, #0
 800cb76:	da02      	bge.n	800cb7e <Argus_Dev_Init+0x32a>
 800cb78:	e6c0      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cb7a:	2c02      	cmp	r4, #2
 800cb7c:	d118      	bne.n	800cbb0 <Argus_Dev_Init+0x35c>
 800cb7e:	0028      	movs	r0, r5
 800cb80:	f001 f998 	bl	800deb4 <ADS_GetStatus>
 800cb84:	2164      	movs	r1, #100	; 0x64
 800cb86:	0004      	movs	r4, r0
 800cb88:	a805      	add	r0, sp, #20
 800cb8a:	f7fd fa7f 	bl	800a08c <Time_CheckTimeoutMSec>
 800cb8e:	1e07      	subs	r7, r0, #0
 800cb90:	d0f3      	beq.n	800cb7a <Argus_Dev_Init+0x326>
 800cb92:	e6ad      	b.n	800c8f0 <Argus_Dev_Init+0x9c>
 800cb94:	0033dfff 	.word	0x0033dfff
 800cb98:	03020100 	.word	0x03020100
 800cb9c:	07060504 	.word	0x07060504
 800cba0:	0b0a0908 	.word	0x0b0a0908
 800cba4:	0f0e0d0c 	.word	0x0f0e0d0c
 800cba8:	0801160c 	.word	0x0801160c
 800cbac:	080123d0 	.word	0x080123d0
 800cbb0:	2c00      	cmp	r4, #0
 800cbb2:	da00      	bge.n	800cbb6 <Argus_Dev_Init+0x362>
 800cbb4:	e6a2      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cbb6:	2208      	movs	r2, #8
 800cbb8:	2100      	movs	r1, #0
 800cbba:	a805      	add	r0, sp, #20
 800cbbc:	f7fb fd40 	bl	8008640 <memset>
 800cbc0:	a805      	add	r0, sp, #20
 800cbc2:	f7fd f9d5 	bl	8009f70 <Time_GetNow>
 800cbc6:	239e      	movs	r3, #158	; 0x9e
 800cbc8:	22cf      	movs	r2, #207	; 0xcf
 800cbca:	54f2      	strb	r2, [r6, r3]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	4698      	mov	r8, r3
 800cbd0:	44b0      	add	r8, r6
 800cbd2:	9700      	str	r7, [sp, #0]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	4641      	mov	r1, r8
 800cbda:	0028      	movs	r0, r5
 800cbdc:	f002 fad2 	bl	800f184 <ADS_WR_BlockEnable>
 800cbe0:	1e04      	subs	r4, r0, #0
 800cbe2:	da02      	bge.n	800cbea <Argus_Dev_Init+0x396>
 800cbe4:	e68a      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cbe6:	2c02      	cmp	r4, #2
 800cbe8:	d10a      	bne.n	800cc00 <Argus_Dev_Init+0x3ac>
 800cbea:	0028      	movs	r0, r5
 800cbec:	f001 f962 	bl	800deb4 <ADS_GetStatus>
 800cbf0:	2164      	movs	r1, #100	; 0x64
 800cbf2:	0004      	movs	r4, r0
 800cbf4:	a805      	add	r0, sp, #20
 800cbf6:	f7fd fa49 	bl	800a08c <Time_CheckTimeoutMSec>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d0f3      	beq.n	800cbe6 <Argus_Dev_Init+0x392>
 800cbfe:	e677      	b.n	800c8f0 <Argus_Dev_Init+0x9c>
 800cc00:	2c00      	cmp	r4, #0
 800cc02:	da00      	bge.n	800cc06 <Argus_Dev_Init+0x3b2>
 800cc04:	e67a      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cc06:	239e      	movs	r3, #158	; 0x9e
 800cc08:	5cf3      	ldrb	r3, [r6, r3]
 800cc0a:	07da      	lsls	r2, r3, #31
 800cc0c:	d522      	bpl.n	800cc54 <Argus_Dev_Init+0x400>
 800cc0e:	2210      	movs	r2, #16
 800cc10:	4393      	bics	r3, r2
 800cc12:	3bcf      	subs	r3, #207	; 0xcf
 800cc14:	1e5a      	subs	r2, r3, #1
 800cc16:	4193      	sbcs	r3, r2
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d100      	bne.n	800cc20 <Argus_Dev_Init+0x3cc>
 800cc1e:	e66d      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cc20:	239e      	movs	r3, #158	; 0x9e
 800cc22:	22cf      	movs	r2, #207	; 0xcf
 800cc24:	54f2      	strb	r2, [r6, r3]
 800cc26:	2300      	movs	r3, #0
 800cc28:	2200      	movs	r2, #0
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	4641      	mov	r1, r8
 800cc2e:	0028      	movs	r0, r5
 800cc30:	f002 faa8 	bl	800f184 <ADS_WR_BlockEnable>
 800cc34:	1e04      	subs	r4, r0, #0
 800cc36:	da02      	bge.n	800cc3e <Argus_Dev_Init+0x3ea>
 800cc38:	e660      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cc3a:	2c02      	cmp	r4, #2
 800cc3c:	d115      	bne.n	800cc6a <Argus_Dev_Init+0x416>
 800cc3e:	0028      	movs	r0, r5
 800cc40:	f001 f938 	bl	800deb4 <ADS_GetStatus>
 800cc44:	2164      	movs	r1, #100	; 0x64
 800cc46:	0004      	movs	r4, r0
 800cc48:	a805      	add	r0, sp, #20
 800cc4a:	f7fd fa1f 	bl	800a08c <Time_CheckTimeoutMSec>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d0f3      	beq.n	800cc3a <Argus_Dev_Init+0x3e6>
 800cc52:	e64d      	b.n	800c8f0 <Argus_Dev_Init+0x9c>
 800cc54:	3bcf      	subs	r3, #207	; 0xcf
 800cc56:	1e5a      	subs	r2, r3, #1
 800cc58:	4193      	sbcs	r3, r2
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	e7dd      	b.n	800cc1a <Argus_Dev_Init+0x3c6>
 800cc5e:	2465      	movs	r4, #101	; 0x65
 800cc60:	4811      	ldr	r0, [pc, #68]	; (800cca8 <Argus_Dev_Init+0x454>)
 800cc62:	f7fa fa07 	bl	8007074 <print>
 800cc66:	4264      	negs	r4, r4
 800cc68:	e648      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cc6a:	2c00      	cmp	r4, #0
 800cc6c:	da00      	bge.n	800cc70 <Argus_Dev_Init+0x41c>
 800cc6e:	e645      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cc70:	239e      	movs	r3, #158	; 0x9e
 800cc72:	5cf3      	ldrb	r3, [r6, r3]
 800cc74:	07da      	lsls	r2, r3, #31
 800cc76:	d50b      	bpl.n	800cc90 <Argus_Dev_Init+0x43c>
 800cc78:	2210      	movs	r2, #16
 800cc7a:	4393      	bics	r3, r2
 800cc7c:	3bcf      	subs	r3, #207	; 0xcf
 800cc7e:	1e5a      	subs	r2, r3, #1
 800cc80:	4193      	sbcs	r3, r2
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d108      	bne.n	800cc9a <Argus_Dev_Init+0x446>
 800cc88:	4808      	ldr	r0, [pc, #32]	; (800ccac <Argus_Dev_Init+0x458>)
 800cc8a:	f7fa f9f3 	bl	8007074 <print>
 800cc8e:	e635      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cc90:	3bcf      	subs	r3, #207	; 0xcf
 800cc92:	1e5a      	subs	r2, r3, #1
 800cc94:	4193      	sbcs	r3, r2
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	e7f4      	b.n	800cc84 <Argus_Dev_Init+0x430>
 800cc9a:	2465      	movs	r4, #101	; 0x65
 800cc9c:	4804      	ldr	r0, [pc, #16]	; (800ccb0 <Argus_Dev_Init+0x45c>)
 800cc9e:	f7fa f9e9 	bl	8007074 <print>
 800cca2:	4264      	negs	r4, r4
 800cca4:	e62a      	b.n	800c8fc <Argus_Dev_Init+0xa8>
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	0801244c 	.word	0x0801244c
 800ccac:	08012520 	.word	0x08012520
 800ccb0:	080124d0 	.word	0x080124d0

0800ccb4 <Argus_Dev_GetStatus>:
 800ccb4:	30ac      	adds	r0, #172	; 0xac
 800ccb6:	b510      	push	{r4, lr}
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d002      	beq.n	800ccc2 <Argus_Dev_GetStatus+0xe>
 800ccbc:	f001 f8fa 	bl	800deb4 <ADS_GetStatus>
 800ccc0:	bd10      	pop	{r4, pc}
 800ccc2:	2007      	movs	r0, #7
 800ccc4:	4240      	negs	r0, r0
 800ccc6:	e7fb      	b.n	800ccc0 <Argus_Dev_GetStatus+0xc>

0800ccc8 <Argus_Dev_Abort>:
 800ccc8:	b510      	push	{r4, lr}
 800ccca:	30ac      	adds	r0, #172	; 0xac
 800cccc:	f001 f8c6 	bl	800de5c <ADS_Abort>
 800ccd0:	bd10      	pop	{r4, pc}
 800ccd2:	46c0      	nop			; (mov r8, r8)

0800ccd4 <Argus_Dev_ReadData>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	9c04      	ldr	r4, [sp, #16]
 800ccda:	30ac      	adds	r0, #172	; 0xac
 800ccdc:	9400      	str	r4, [sp, #0]
 800ccde:	f001 f95d 	bl	800df9c <ADS_ReadData>
 800cce2:	b002      	add	sp, #8
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	46c0      	nop			; (mov r8, r8)

0800cce8 <Argus_Dev_StartIntegration>:
 800cce8:	23a4      	movs	r3, #164	; 0xa4
 800ccea:	b510      	push	{r4, lr}
 800ccec:	50c1      	str	r1, [r0, r3]
 800ccee:	3304      	adds	r3, #4
 800ccf0:	50c2      	str	r2, [r0, r3]
 800ccf2:	30ac      	adds	r0, #172	; 0xac
 800ccf4:	f001 f8ee 	bl	800ded4 <ADS_Start>
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	46c0      	nop			; (mov r8, r8)

0800ccfc <Argus_Dev_CheckCfg>:
 800ccfc:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800ccfe:	0003      	movs	r3, r0
 800cd00:	0008      	movs	r0, r1
 800cd02:	4a7f      	ldr	r2, [pc, #508]	; (800cf00 <Argus_Dev_CheckCfg+0x204>)
 800cd04:	38fa      	subs	r0, #250	; 0xfa
 800cd06:	b570      	push	{r4, r5, r6, lr}
 800cd08:	4290      	cmp	r0, r2
 800cd0a:	d900      	bls.n	800cd0e <Argus_Dev_CheckCfg+0x12>
 800cd0c:	e0ad      	b.n	800ce6a <Argus_Dev_CheckCfg+0x16e>
 800cd0e:	7999      	ldrb	r1, [r3, #6]
 800cd10:	1e8a      	subs	r2, r1, #2
 800cd12:	2a7e      	cmp	r2, #126	; 0x7e
 800cd14:	d900      	bls.n	800cd18 <Argus_Dev_CheckCfg+0x1c>
 800cd16:	e0ae      	b.n	800ce76 <Argus_Dev_CheckCfg+0x17a>
 800cd18:	7919      	ldrb	r1, [r3, #4]
 800cd1a:	2980      	cmp	r1, #128	; 0x80
 800cd1c:	d900      	bls.n	800cd20 <Argus_Dev_CheckCfg+0x24>
 800cd1e:	e0b2      	b.n	800ce86 <Argus_Dev_CheckCfg+0x18a>
 800cd20:	4a78      	ldr	r2, [pc, #480]	; (800cf04 <Argus_Dev_CheckCfg+0x208>)
 800cd22:	6819      	ldr	r1, [r3, #0]
 800cd24:	1888      	adds	r0, r1, r2
 800cd26:	4a78      	ldr	r2, [pc, #480]	; (800cf08 <Argus_Dev_CheckCfg+0x20c>)
 800cd28:	4290      	cmp	r0, r2
 800cd2a:	d900      	bls.n	800cd2e <Argus_Dev_CheckCfg+0x32>
 800cd2c:	e0b3      	b.n	800ce96 <Argus_Dev_CheckCfg+0x19a>
 800cd2e:	2257      	movs	r2, #87	; 0x57
 800cd30:	5c9a      	ldrb	r2, [r3, r2]
 800cd32:	0652      	lsls	r2, r2, #25
 800cd34:	d500      	bpl.n	800cd38 <Argus_Dev_CheckCfg+0x3c>
 800cd36:	e0b6      	b.n	800cea6 <Argus_Dev_CheckCfg+0x1aa>
 800cd38:	2266      	movs	r2, #102	; 0x66
 800cd3a:	5c9a      	ldrb	r2, [r3, r2]
 800cd3c:	2a7f      	cmp	r2, #127	; 0x7f
 800cd3e:	d900      	bls.n	800cd42 <Argus_Dev_CheckCfg+0x46>
 800cd40:	e0d1      	b.n	800cee6 <Argus_Dev_CheckCfg+0x1ea>
 800cd42:	2271      	movs	r2, #113	; 0x71
 800cd44:	5c99      	ldrb	r1, [r3, r2]
 800cd46:	3201      	adds	r2, #1
 800cd48:	5c9a      	ldrb	r2, [r3, r2]
 800cd4a:	0209      	lsls	r1, r1, #8
 800cd4c:	4311      	orrs	r1, r2
 800cd4e:	4e6f      	ldr	r6, [pc, #444]	; (800cf0c <Argus_Dev_CheckCfg+0x210>)
 800cd50:	084a      	lsrs	r2, r1, #1
 800cd52:	4032      	ands	r2, r6
 800cd54:	1a8a      	subs	r2, r1, r2
 800cd56:	0014      	movs	r4, r2
 800cd58:	4d6d      	ldr	r5, [pc, #436]	; (800cf10 <Argus_Dev_CheckCfg+0x214>)
 800cd5a:	0892      	lsrs	r2, r2, #2
 800cd5c:	402a      	ands	r2, r5
 800cd5e:	402c      	ands	r4, r5
 800cd60:	18a4      	adds	r4, r4, r2
 800cd62:	226d      	movs	r2, #109	; 0x6d
 800cd64:	5c99      	ldrb	r1, [r3, r2]
 800cd66:	3201      	adds	r2, #1
 800cd68:	5c98      	ldrb	r0, [r3, r2]
 800cd6a:	0409      	lsls	r1, r1, #16
 800cd6c:	0200      	lsls	r0, r0, #8
 800cd6e:	3201      	adds	r2, #1
 800cd70:	4301      	orrs	r1, r0
 800cd72:	5c98      	ldrb	r0, [r3, r2]
 800cd74:	3a06      	subs	r2, #6
 800cd76:	4308      	orrs	r0, r1
 800cd78:	0841      	lsrs	r1, r0, #1
 800cd7a:	4031      	ands	r1, r6
 800cd7c:	1a41      	subs	r1, r0, r1
 800cd7e:	0008      	movs	r0, r1
 800cd80:	0889      	lsrs	r1, r1, #2
 800cd82:	4029      	ands	r1, r5
 800cd84:	4028      	ands	r0, r5
 800cd86:	1840      	adds	r0, r0, r1
 800cd88:	5c99      	ldrb	r1, [r3, r2]
 800cd8a:	3201      	adds	r2, #1
 800cd8c:	5c9a      	ldrb	r2, [r3, r2]
 800cd8e:	0409      	lsls	r1, r1, #16
 800cd90:	0212      	lsls	r2, r2, #8
 800cd92:	4311      	orrs	r1, r2
 800cd94:	226b      	movs	r2, #107	; 0x6b
 800cd96:	5c9a      	ldrb	r2, [r3, r2]
 800cd98:	4311      	orrs	r1, r2
 800cd9a:	084a      	lsrs	r2, r1, #1
 800cd9c:	4032      	ands	r2, r6
 800cd9e:	1a8a      	subs	r2, r1, r2
 800cda0:	0011      	movs	r1, r2
 800cda2:	0892      	lsrs	r2, r2, #2
 800cda4:	402a      	ands	r2, r5
 800cda6:	4029      	ands	r1, r5
 800cda8:	1889      	adds	r1, r1, r2
 800cdaa:	4d5a      	ldr	r5, [pc, #360]	; (800cf14 <Argus_Dev_CheckCfg+0x218>)
 800cdac:	090a      	lsrs	r2, r1, #4
 800cdae:	1851      	adds	r1, r2, r1
 800cdb0:	4029      	ands	r1, r5
 800cdb2:	020a      	lsls	r2, r1, #8
 800cdb4:	1852      	adds	r2, r2, r1
 800cdb6:	0411      	lsls	r1, r2, #16
 800cdb8:	1852      	adds	r2, r2, r1
 800cdba:	0901      	lsrs	r1, r0, #4
 800cdbc:	1809      	adds	r1, r1, r0
 800cdbe:	4029      	ands	r1, r5
 800cdc0:	0208      	lsls	r0, r1, #8
 800cdc2:	1840      	adds	r0, r0, r1
 800cdc4:	0401      	lsls	r1, r0, #16
 800cdc6:	1840      	adds	r0, r0, r1
 800cdc8:	0921      	lsrs	r1, r4, #4
 800cdca:	190c      	adds	r4, r1, r4
 800cdcc:	4025      	ands	r5, r4
 800cdce:	022c      	lsls	r4, r5, #8
 800cdd0:	1964      	adds	r4, r4, r5
 800cdd2:	0421      	lsls	r1, r4, #16
 800cdd4:	1864      	adds	r4, r4, r1
 800cdd6:	2167      	movs	r1, #103	; 0x67
 800cdd8:	5c59      	ldrb	r1, [r3, r1]
 800cdda:	0e12      	lsrs	r2, r2, #24
 800cddc:	0e00      	lsrs	r0, r0, #24
 800cdde:	06c9      	lsls	r1, r1, #27
 800cde0:	1812      	adds	r2, r2, r0
 800cde2:	0e24      	lsrs	r4, r4, #24
 800cde4:	0f09      	lsrs	r1, r1, #28
 800cde6:	1912      	adds	r2, r2, r4
 800cde8:	3101      	adds	r1, #1
 800cdea:	434a      	muls	r2, r1
 800cdec:	2a84      	cmp	r2, #132	; 0x84
 800cdee:	d860      	bhi.n	800ceb2 <Argus_Dev_CheckCfg+0x1b6>
 800cdf0:	2288      	movs	r2, #136	; 0x88
 800cdf2:	5899      	ldr	r1, [r3, r2]
 800cdf4:	2963      	cmp	r1, #99	; 0x63
 800cdf6:	d962      	bls.n	800cebe <Argus_Dev_CheckCfg+0x1c2>
 800cdf8:	2284      	movs	r2, #132	; 0x84
 800cdfa:	589a      	ldr	r2, [r3, r2]
 800cdfc:	2a00      	cmp	r2, #0
 800cdfe:	d064      	beq.n	800ceca <Argus_Dev_CheckCfg+0x1ce>
 800ce00:	228c      	movs	r2, #140	; 0x8c
 800ce02:	5a9a      	ldrh	r2, [r3, r2]
 800ce04:	2a00      	cmp	r2, #0
 800ce06:	d067      	beq.n	800ced8 <Argus_Dev_CheckCfg+0x1dc>
 800ce08:	2281      	movs	r2, #129	; 0x81
 800ce0a:	5c9a      	ldrb	r2, [r3, r2]
 800ce0c:	2a00      	cmp	r2, #0
 800ce0e:	d009      	beq.n	800ce24 <Argus_Dev_CheckCfg+0x128>
 800ce10:	224f      	movs	r2, #79	; 0x4f
 800ce12:	5c99      	ldrb	r1, [r3, r2]
 800ce14:	3a49      	subs	r2, #73	; 0x49
 800ce16:	400a      	ands	r2, r1
 800ce18:	2a06      	cmp	r2, #6
 800ce1a:	d120      	bne.n	800ce5e <Argus_Dev_CheckCfg+0x162>
 800ce1c:	2282      	movs	r2, #130	; 0x82
 800ce1e:	5c99      	ldrb	r1, [r3, r2]
 800ce20:	094a      	lsrs	r2, r1, #5
 800ce22:	d116      	bne.n	800ce52 <Argus_Dev_CheckCfg+0x156>
 800ce24:	2290      	movs	r2, #144	; 0x90
 800ce26:	5c9a      	ldrb	r2, [r3, r2]
 800ce28:	2000      	movs	r0, #0
 800ce2a:	2a00      	cmp	r2, #0
 800ce2c:	d00a      	beq.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ce2e:	2292      	movs	r2, #146	; 0x92
 800ce30:	5c99      	ldrb	r1, [r3, r2]
 800ce32:	2907      	cmp	r1, #7
 800ce34:	d85d      	bhi.n	800cef2 <Argus_Dev_CheckCfg+0x1f6>
 800ce36:	2294      	movs	r2, #148	; 0x94
 800ce38:	5a99      	ldrh	r1, [r3, r2]
 800ce3a:	4a37      	ldr	r2, [pc, #220]	; (800cf18 <Argus_Dev_CheckCfg+0x21c>)
 800ce3c:	1e4b      	subs	r3, r1, #1
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d800      	bhi.n	800ce46 <Argus_Dev_CheckCfg+0x14a>
 800ce44:	bd70      	pop	{r4, r5, r6, pc}
 800ce46:	4835      	ldr	r0, [pc, #212]	; (800cf1c <Argus_Dev_CheckCfg+0x220>)
 800ce48:	f7fa f914 	bl	8007074 <print>
 800ce4c:	2066      	movs	r0, #102	; 0x66
 800ce4e:	4240      	negs	r0, r0
 800ce50:	e7f8      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ce52:	4833      	ldr	r0, [pc, #204]	; (800cf20 <Argus_Dev_CheckCfg+0x224>)
 800ce54:	f7fa f90e 	bl	8007074 <print>
 800ce58:	2066      	movs	r0, #102	; 0x66
 800ce5a:	4240      	negs	r0, r0
 800ce5c:	e7f2      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ce5e:	4831      	ldr	r0, [pc, #196]	; (800cf24 <Argus_Dev_CheckCfg+0x228>)
 800ce60:	f7fa f908 	bl	8007074 <print>
 800ce64:	2066      	movs	r0, #102	; 0x66
 800ce66:	4240      	negs	r0, r0
 800ce68:	e7ec      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ce6a:	482f      	ldr	r0, [pc, #188]	; (800cf28 <Argus_Dev_CheckCfg+0x22c>)
 800ce6c:	f7fa f902 	bl	8007074 <print>
 800ce70:	2066      	movs	r0, #102	; 0x66
 800ce72:	4240      	negs	r0, r0
 800ce74:	e7e6      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ce76:	2380      	movs	r3, #128	; 0x80
 800ce78:	2202      	movs	r2, #2
 800ce7a:	482c      	ldr	r0, [pc, #176]	; (800cf2c <Argus_Dev_CheckCfg+0x230>)
 800ce7c:	f7fa f8fa 	bl	8007074 <print>
 800ce80:	2066      	movs	r0, #102	; 0x66
 800ce82:	4240      	negs	r0, r0
 800ce84:	e7de      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ce86:	2380      	movs	r3, #128	; 0x80
 800ce88:	2200      	movs	r2, #0
 800ce8a:	4829      	ldr	r0, [pc, #164]	; (800cf30 <Argus_Dev_CheckCfg+0x234>)
 800ce8c:	f7fa f8f2 	bl	8007074 <print>
 800ce90:	2066      	movs	r0, #102	; 0x66
 800ce92:	4240      	negs	r0, r0
 800ce94:	e7d6      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ce96:	4b27      	ldr	r3, [pc, #156]	; (800cf34 <Argus_Dev_CheckCfg+0x238>)
 800ce98:	4a27      	ldr	r2, [pc, #156]	; (800cf38 <Argus_Dev_CheckCfg+0x23c>)
 800ce9a:	4828      	ldr	r0, [pc, #160]	; (800cf3c <Argus_Dev_CheckCfg+0x240>)
 800ce9c:	f7fa f8ea 	bl	8007074 <print>
 800cea0:	2066      	movs	r0, #102	; 0x66
 800cea2:	4240      	negs	r0, r0
 800cea4:	e7ce      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800cea6:	4826      	ldr	r0, [pc, #152]	; (800cf40 <Argus_Dev_CheckCfg+0x244>)
 800cea8:	f7fa f8e4 	bl	8007074 <print>
 800ceac:	2066      	movs	r0, #102	; 0x66
 800ceae:	4240      	negs	r0, r0
 800ceb0:	e7c8      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ceb2:	4824      	ldr	r0, [pc, #144]	; (800cf44 <Argus_Dev_CheckCfg+0x248>)
 800ceb4:	f7fa f8de 	bl	8007074 <print>
 800ceb8:	2066      	movs	r0, #102	; 0x66
 800ceba:	4240      	negs	r0, r0
 800cebc:	e7c2      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800cebe:	4822      	ldr	r0, [pc, #136]	; (800cf48 <Argus_Dev_CheckCfg+0x24c>)
 800cec0:	f7fa f8d8 	bl	8007074 <print>
 800cec4:	2066      	movs	r0, #102	; 0x66
 800cec6:	4240      	negs	r0, r0
 800cec8:	e7bc      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ceca:	2100      	movs	r1, #0
 800cecc:	481f      	ldr	r0, [pc, #124]	; (800cf4c <Argus_Dev_CheckCfg+0x250>)
 800cece:	f7fa f8d1 	bl	8007074 <print>
 800ced2:	2066      	movs	r0, #102	; 0x66
 800ced4:	4240      	negs	r0, r0
 800ced6:	e7b5      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800ced8:	2100      	movs	r1, #0
 800ceda:	481d      	ldr	r0, [pc, #116]	; (800cf50 <Argus_Dev_CheckCfg+0x254>)
 800cedc:	f7fa f8ca 	bl	8007074 <print>
 800cee0:	2066      	movs	r0, #102	; 0x66
 800cee2:	4240      	negs	r0, r0
 800cee4:	e7ae      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800cee6:	481b      	ldr	r0, [pc, #108]	; (800cf54 <Argus_Dev_CheckCfg+0x258>)
 800cee8:	f7fa f8c4 	bl	8007074 <print>
 800ceec:	2066      	movs	r0, #102	; 0x66
 800ceee:	4240      	negs	r0, r0
 800cef0:	e7a8      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800cef2:	4819      	ldr	r0, [pc, #100]	; (800cf58 <Argus_Dev_CheckCfg+0x25c>)
 800cef4:	f7fa f8be 	bl	8007074 <print>
 800cef8:	2066      	movs	r0, #102	; 0x66
 800cefa:	4240      	negs	r0, r0
 800cefc:	e7a2      	b.n	800ce44 <Argus_Dev_CheckCfg+0x148>
 800cefe:	46c0      	nop			; (mov r8, r8)
 800cf00:	000f4146 	.word	0x000f4146
 800cf04:	feced300 	.word	0xfeced300
 800cf08:	00989680 	.word	0x00989680
 800cf0c:	55555555 	.word	0x55555555
 800cf10:	33333333 	.word	0x33333333
 800cf14:	0f0f0f0f 	.word	0x0f0f0f0f
 800cf18:	000003fd 	.word	0x000003fd
 800cf1c:	08012364 	.word	0x08012364
 800cf20:	080122a4 	.word	0x080122a4
 800cf24:	080121f0 	.word	0x080121f0
 800cf28:	08011dd8 	.word	0x08011dd8
 800cf2c:	08011e24 	.word	0x08011e24
 800cf30:	08011e7c 	.word	0x08011e7c
 800cf34:	01c9c380 	.word	0x01c9c380
 800cf38:	01312d00 	.word	0x01312d00
 800cf3c:	08011ed4 	.word	0x08011ed4
 800cf40:	08011f30 	.word	0x08011f30
 800cf44:	080120b4 	.word	0x080120b4
 800cf48:	080120ec 	.word	0x080120ec
 800cf4c:	08012140 	.word	0x08012140
 800cf50:	08012194 	.word	0x08012194
 800cf54:	08012004 	.word	0x08012004
 800cf58:	08012300 	.word	0x08012300

0800cf5c <Argus_Dev_ApplyEEPROMCalibration>:
 800cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5e:	2359      	movs	r3, #89	; 0x59
 800cf60:	68c4      	ldr	r4, [r0, #12]
 800cf62:	7849      	ldrb	r1, [r1, #1]
 800cf64:	5ce2      	ldrb	r2, [r4, r3]
 800cf66:	3301      	adds	r3, #1
 800cf68:	5ce3      	ldrb	r3, [r4, r3]
 800cf6a:	0212      	lsls	r2, r2, #8
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	2466      	movs	r4, #102	; 0x66
 800cf70:	2265      	movs	r2, #101	; 0x65
 800cf72:	051b      	lsls	r3, r3, #20
 800cf74:	0e9b      	lsrs	r3, r3, #26
 800cf76:	b249      	sxtb	r1, r1
 800cf78:	5c82      	ldrb	r2, [r0, r2]
 800cf7a:	5d05      	ldrb	r5, [r0, r4]
 800cf7c:	18cb      	adds	r3, r1, r3
 800cf7e:	d424      	bmi.n	800cfca <Argus_Dev_ApplyEEPROMCalibration+0x6e>
 800cf80:	2b3f      	cmp	r3, #63	; 0x3f
 800cf82:	dd00      	ble.n	800cf86 <Argus_Dev_ApplyEEPROMCalibration+0x2a>
 800cf84:	233f      	movs	r3, #63	; 0x3f
 800cf86:	240f      	movs	r4, #15
 800cf88:	0017      	movs	r7, r2
 800cf8a:	43a7      	bics	r7, r4
 800cf8c:	2465      	movs	r4, #101	; 0x65
 800cf8e:	019e      	lsls	r6, r3, #6
 800cf90:	0a31      	lsrs	r1, r6, #8
 800cf92:	4339      	orrs	r1, r7
 800cf94:	5501      	strb	r1, [r0, r4]
 800cf96:	213f      	movs	r1, #63	; 0x3f
 800cf98:	000c      	movs	r4, r1
 800cf9a:	402c      	ands	r4, r5
 800cf9c:	4334      	orrs	r4, r6
 800cf9e:	2666      	movs	r6, #102	; 0x66
 800cfa0:	0212      	lsls	r2, r2, #8
 800cfa2:	432a      	orrs	r2, r5
 800cfa4:	0992      	lsrs	r2, r2, #6
 800cfa6:	5584      	strb	r4, [r0, r6]
 800cfa8:	400a      	ands	r2, r1
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d005      	beq.n	800cfba <Argus_Dev_ApplyEEPROMCalibration+0x5e>
 800cfae:	2288      	movs	r2, #136	; 0x88
 800cfb0:	2380      	movs	r3, #128	; 0x80
 800cfb2:	5881      	ldr	r1, [r0, r2]
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	430b      	orrs	r3, r1
 800cfb8:	5083      	str	r3, [r0, r2]
 800cfba:	2288      	movs	r2, #136	; 0x88
 800cfbc:	2101      	movs	r1, #1
 800cfbe:	5883      	ldr	r3, [r0, r2]
 800cfc0:	430b      	orrs	r3, r1
 800cfc2:	5083      	str	r3, [r0, r2]
 800cfc4:	f7fd fe96 	bl	800acf4 <Argus_Cfg_SetLaserSafetyLimit>
 800cfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e7db      	b.n	800cf86 <Argus_Dev_ApplyEEPROMCalibration+0x2a>
 800cfce:	46c0      	nop			; (mov r8, r8)

0800cfd0 <Argus_Dev_PrepareCfg>:
 800cfd0:	b570      	push	{r4, r5, r6, lr}
 800cfd2:	23ec      	movs	r3, #236	; 0xec
 800cfd4:	000d      	movs	r5, r1
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	2688      	movs	r6, #136	; 0x88
 800cfda:	50c1      	str	r1, [r0, r3]
 800cfdc:	6102      	str	r2, [r0, #16]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	5983      	ldr	r3, [r0, r6]
 800cfe2:	60c5      	str	r5, [r0, #12]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	0001      	movs	r1, r0
 800cfe8:	0004      	movs	r4, r0
 800cfea:	5183      	str	r3, [r0, r6]
 800cfec:	0028      	movs	r0, r5
 800cfee:	3115      	adds	r1, #21
 800cff0:	3009      	adds	r0, #9
 800cff2:	3207      	adds	r2, #7
 800cff4:	f7fb fb0a 	bl	800860c <memcmp>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d003      	beq.n	800d004 <Argus_Dev_PrepareCfg+0x34>
 800cffc:	2202      	movs	r2, #2
 800cffe:	59a3      	ldr	r3, [r4, r6]
 800d000:	4313      	orrs	r3, r2
 800d002:	51a3      	str	r3, [r4, r6]
 800d004:	0021      	movs	r1, r4
 800d006:	0028      	movs	r0, r5
 800d008:	2210      	movs	r2, #16
 800d00a:	311e      	adds	r1, #30
 800d00c:	3012      	adds	r0, #18
 800d00e:	f7fb fafd 	bl	800860c <memcmp>
 800d012:	2800      	cmp	r0, #0
 800d014:	d004      	beq.n	800d020 <Argus_Dev_PrepareCfg+0x50>
 800d016:	2288      	movs	r2, #136	; 0x88
 800d018:	2104      	movs	r1, #4
 800d01a:	58a3      	ldr	r3, [r4, r2]
 800d01c:	430b      	orrs	r3, r1
 800d01e:	50a3      	str	r3, [r4, r2]
 800d020:	0021      	movs	r1, r4
 800d022:	0028      	movs	r0, r5
 800d024:	2220      	movs	r2, #32
 800d026:	312f      	adds	r1, #47	; 0x2f
 800d028:	3023      	adds	r0, #35	; 0x23
 800d02a:	f7fb faef 	bl	800860c <memcmp>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d004      	beq.n	800d03c <Argus_Dev_PrepareCfg+0x6c>
 800d032:	2288      	movs	r2, #136	; 0x88
 800d034:	2108      	movs	r1, #8
 800d036:	58a3      	ldr	r3, [r4, r2]
 800d038:	430b      	orrs	r3, r1
 800d03a:	50a3      	str	r3, [r4, r2]
 800d03c:	0021      	movs	r1, r4
 800d03e:	0028      	movs	r0, r5
 800d040:	2203      	movs	r2, #3
 800d042:	3150      	adds	r1, #80	; 0x50
 800d044:	3044      	adds	r0, #68	; 0x44
 800d046:	f7fb fae1 	bl	800860c <memcmp>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d004      	beq.n	800d058 <Argus_Dev_PrepareCfg+0x88>
 800d04e:	2288      	movs	r2, #136	; 0x88
 800d050:	2110      	movs	r1, #16
 800d052:	58a3      	ldr	r3, [r4, r2]
 800d054:	430b      	orrs	r3, r1
 800d056:	50a3      	str	r3, [r4, r2]
 800d058:	0021      	movs	r1, r4
 800d05a:	0028      	movs	r0, r5
 800d05c:	2204      	movs	r2, #4
 800d05e:	3154      	adds	r1, #84	; 0x54
 800d060:	3048      	adds	r0, #72	; 0x48
 800d062:	f7fb fad3 	bl	800860c <memcmp>
 800d066:	2800      	cmp	r0, #0
 800d068:	d004      	beq.n	800d074 <Argus_Dev_PrepareCfg+0xa4>
 800d06a:	2288      	movs	r2, #136	; 0x88
 800d06c:	2120      	movs	r1, #32
 800d06e:	58a3      	ldr	r3, [r4, r2]
 800d070:	430b      	orrs	r3, r1
 800d072:	50a3      	str	r3, [r4, r2]
 800d074:	0021      	movs	r1, r4
 800d076:	0028      	movs	r0, r5
 800d078:	2203      	movs	r2, #3
 800d07a:	3159      	adds	r1, #89	; 0x59
 800d07c:	304d      	adds	r0, #77	; 0x4d
 800d07e:	f7fb fac5 	bl	800860c <memcmp>
 800d082:	2800      	cmp	r0, #0
 800d084:	d004      	beq.n	800d090 <Argus_Dev_PrepareCfg+0xc0>
 800d086:	2288      	movs	r2, #136	; 0x88
 800d088:	2140      	movs	r1, #64	; 0x40
 800d08a:	58a3      	ldr	r3, [r4, r2]
 800d08c:	430b      	orrs	r3, r1
 800d08e:	50a3      	str	r3, [r4, r2]
 800d090:	0021      	movs	r1, r4
 800d092:	0028      	movs	r0, r5
 800d094:	2202      	movs	r2, #2
 800d096:	315d      	adds	r1, #93	; 0x5d
 800d098:	3051      	adds	r0, #81	; 0x51
 800d09a:	f7fb fab7 	bl	800860c <memcmp>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d004      	beq.n	800d0ac <Argus_Dev_PrepareCfg+0xdc>
 800d0a2:	2288      	movs	r2, #136	; 0x88
 800d0a4:	2180      	movs	r1, #128	; 0x80
 800d0a6:	58a3      	ldr	r3, [r4, r2]
 800d0a8:	430b      	orrs	r3, r1
 800d0aa:	50a3      	str	r3, [r4, r2]
 800d0ac:	0021      	movs	r1, r4
 800d0ae:	0028      	movs	r0, r5
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	3160      	adds	r1, #96	; 0x60
 800d0b4:	3054      	adds	r0, #84	; 0x54
 800d0b6:	f7fb faa9 	bl	800860c <memcmp>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d005      	beq.n	800d0ca <Argus_Dev_PrepareCfg+0xfa>
 800d0be:	2288      	movs	r2, #136	; 0x88
 800d0c0:	2380      	movs	r3, #128	; 0x80
 800d0c2:	58a1      	ldr	r1, [r4, r2]
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	430b      	orrs	r3, r1
 800d0c8:	50a3      	str	r3, [r4, r2]
 800d0ca:	0021      	movs	r1, r4
 800d0cc:	0028      	movs	r0, r5
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	3162      	adds	r1, #98	; 0x62
 800d0d2:	3056      	adds	r0, #86	; 0x56
 800d0d4:	f7fb fa9a 	bl	800860c <memcmp>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	d005      	beq.n	800d0e8 <Argus_Dev_PrepareCfg+0x118>
 800d0dc:	2288      	movs	r2, #136	; 0x88
 800d0de:	2380      	movs	r3, #128	; 0x80
 800d0e0:	58a1      	ldr	r1, [r4, r2]
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	430b      	orrs	r3, r1
 800d0e6:	50a3      	str	r3, [r4, r2]
 800d0e8:	0021      	movs	r1, r4
 800d0ea:	0028      	movs	r0, r5
 800d0ec:	2203      	movs	r2, #3
 800d0ee:	3165      	adds	r1, #101	; 0x65
 800d0f0:	3059      	adds	r0, #89	; 0x59
 800d0f2:	f7fb fa8b 	bl	800860c <memcmp>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d005      	beq.n	800d106 <Argus_Dev_PrepareCfg+0x136>
 800d0fa:	2288      	movs	r2, #136	; 0x88
 800d0fc:	2380      	movs	r3, #128	; 0x80
 800d0fe:	58a1      	ldr	r1, [r4, r2]
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	430b      	orrs	r3, r1
 800d104:	50a3      	str	r3, [r4, r2]
 800d106:	0021      	movs	r1, r4
 800d108:	0028      	movs	r0, r5
 800d10a:	2204      	movs	r2, #4
 800d10c:	3169      	adds	r1, #105	; 0x69
 800d10e:	305d      	adds	r0, #93	; 0x5d
 800d110:	f7fb fa7c 	bl	800860c <memcmp>
 800d114:	2800      	cmp	r0, #0
 800d116:	d005      	beq.n	800d124 <Argus_Dev_PrepareCfg+0x154>
 800d118:	2288      	movs	r2, #136	; 0x88
 800d11a:	2380      	movs	r3, #128	; 0x80
 800d11c:	58a1      	ldr	r1, [r4, r2]
 800d11e:	011b      	lsls	r3, r3, #4
 800d120:	430b      	orrs	r3, r1
 800d122:	50a3      	str	r3, [r4, r2]
 800d124:	0021      	movs	r1, r4
 800d126:	0028      	movs	r0, r5
 800d128:	2203      	movs	r2, #3
 800d12a:	316e      	adds	r1, #110	; 0x6e
 800d12c:	3062      	adds	r0, #98	; 0x62
 800d12e:	f7fb fa6d 	bl	800860c <memcmp>
 800d132:	2800      	cmp	r0, #0
 800d134:	d005      	beq.n	800d142 <Argus_Dev_PrepareCfg+0x172>
 800d136:	2288      	movs	r2, #136	; 0x88
 800d138:	2380      	movs	r3, #128	; 0x80
 800d13a:	58a1      	ldr	r1, [r4, r2]
 800d13c:	015b      	lsls	r3, r3, #5
 800d13e:	430b      	orrs	r3, r1
 800d140:	50a3      	str	r3, [r4, r2]
 800d142:	0021      	movs	r1, r4
 800d144:	0028      	movs	r0, r5
 800d146:	2202      	movs	r2, #2
 800d148:	3172      	adds	r1, #114	; 0x72
 800d14a:	3066      	adds	r0, #102	; 0x66
 800d14c:	f7fb fa5e 	bl	800860c <memcmp>
 800d150:	2800      	cmp	r0, #0
 800d152:	d005      	beq.n	800d160 <Argus_Dev_PrepareCfg+0x190>
 800d154:	2288      	movs	r2, #136	; 0x88
 800d156:	2380      	movs	r3, #128	; 0x80
 800d158:	58a1      	ldr	r1, [r4, r2]
 800d15a:	01db      	lsls	r3, r3, #7
 800d15c:	430b      	orrs	r3, r1
 800d15e:	50a3      	str	r3, [r4, r2]
 800d160:	0021      	movs	r1, r4
 800d162:	0028      	movs	r0, r5
 800d164:	2203      	movs	r2, #3
 800d166:	3175      	adds	r1, #117	; 0x75
 800d168:	3069      	adds	r0, #105	; 0x69
 800d16a:	f7fb fa4f 	bl	800860c <memcmp>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d005      	beq.n	800d17e <Argus_Dev_PrepareCfg+0x1ae>
 800d172:	2288      	movs	r2, #136	; 0x88
 800d174:	2380      	movs	r3, #128	; 0x80
 800d176:	58a1      	ldr	r1, [r4, r2]
 800d178:	021b      	lsls	r3, r3, #8
 800d17a:	430b      	orrs	r3, r1
 800d17c:	50a3      	str	r3, [r4, r2]
 800d17e:	0021      	movs	r1, r4
 800d180:	0028      	movs	r0, r5
 800d182:	2203      	movs	r2, #3
 800d184:	3179      	adds	r1, #121	; 0x79
 800d186:	306d      	adds	r0, #109	; 0x6d
 800d188:	f7fb fa40 	bl	800860c <memcmp>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d005      	beq.n	800d19c <Argus_Dev_PrepareCfg+0x1cc>
 800d190:	2288      	movs	r2, #136	; 0x88
 800d192:	2380      	movs	r3, #128	; 0x80
 800d194:	58a1      	ldr	r1, [r4, r2]
 800d196:	025b      	lsls	r3, r3, #9
 800d198:	430b      	orrs	r3, r1
 800d19a:	50a3      	str	r3, [r4, r2]
 800d19c:	0021      	movs	r1, r4
 800d19e:	0028      	movs	r0, r5
 800d1a0:	2203      	movs	r2, #3
 800d1a2:	317d      	adds	r1, #125	; 0x7d
 800d1a4:	3071      	adds	r0, #113	; 0x71
 800d1a6:	f7fb fa31 	bl	800860c <memcmp>
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d005      	beq.n	800d1ba <Argus_Dev_PrepareCfg+0x1ea>
 800d1ae:	2288      	movs	r2, #136	; 0x88
 800d1b0:	2380      	movs	r3, #128	; 0x80
 800d1b2:	58a1      	ldr	r1, [r4, r2]
 800d1b4:	029b      	lsls	r3, r3, #10
 800d1b6:	430b      	orrs	r3, r1
 800d1b8:	50a3      	str	r3, [r4, r2]
 800d1ba:	0021      	movs	r1, r4
 800d1bc:	0028      	movs	r0, r5
 800d1be:	2202      	movs	r2, #2
 800d1c0:	3181      	adds	r1, #129	; 0x81
 800d1c2:	3075      	adds	r0, #117	; 0x75
 800d1c4:	f7fb fa22 	bl	800860c <memcmp>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d005      	beq.n	800d1d8 <Argus_Dev_PrepareCfg+0x208>
 800d1cc:	2288      	movs	r2, #136	; 0x88
 800d1ce:	2380      	movs	r3, #128	; 0x80
 800d1d0:	58a1      	ldr	r1, [r4, r2]
 800d1d2:	035b      	lsls	r3, r3, #13
 800d1d4:	430b      	orrs	r3, r1
 800d1d6:	50a3      	str	r3, [r4, r2]
 800d1d8:	0028      	movs	r0, r5
 800d1da:	0021      	movs	r1, r4
 800d1dc:	3078      	adds	r0, #120	; 0x78
 800d1de:	2201      	movs	r2, #1
 800d1e0:	3184      	adds	r1, #132	; 0x84
 800d1e2:	f7fb fa13 	bl	800860c <memcmp>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d005      	beq.n	800d1f6 <Argus_Dev_PrepareCfg+0x226>
 800d1ea:	2288      	movs	r2, #136	; 0x88
 800d1ec:	2380      	movs	r3, #128	; 0x80
 800d1ee:	58a1      	ldr	r1, [r4, r2]
 800d1f0:	039b      	lsls	r3, r3, #14
 800d1f2:	430b      	orrs	r3, r1
 800d1f4:	50a3      	str	r3, [r4, r2]
 800d1f6:	0020      	movs	r0, r4
 800d1f8:	68e1      	ldr	r1, [r4, #12]
 800d1fa:	2271      	movs	r2, #113	; 0x71
 800d1fc:	3108      	adds	r1, #8
 800d1fe:	3014      	adds	r0, #20
 800d200:	f7fb fa13 	bl	800862a <memcpy>
 800d204:	2000      	movs	r0, #0
 800d206:	bd70      	pop	{r4, r5, r6, pc}

0800d208 <Argus_Dev_UpdateCfg>:
 800d208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d20a:	46ce      	mov	lr, r9
 800d20c:	4647      	mov	r7, r8
 800d20e:	23a4      	movs	r3, #164	; 0xa4
 800d210:	b580      	push	{r7, lr}
 800d212:	50c1      	str	r1, [r0, r3]
 800d214:	3304      	adds	r3, #4
 800d216:	b083      	sub	sp, #12
 800d218:	50c2      	str	r2, [r0, r3]
 800d21a:	0004      	movs	r4, r0
 800d21c:	f7fe f95c 	bl	800b4d8 <Argus_Cfg_ApplyDCA>
 800d220:	1e05      	subs	r5, r0, #0
 800d222:	d103      	bne.n	800d22c <Argus_Dev_UpdateCfg+0x24>
 800d224:	2688      	movs	r6, #136	; 0x88
 800d226:	59a3      	ldr	r3, [r4, r6]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10e      	bne.n	800d24a <Argus_Dev_UpdateCfg+0x42>
 800d22c:	23a4      	movs	r3, #164	; 0xa4
 800d22e:	58e3      	ldr	r3, [r4, r3]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d004      	beq.n	800d23e <Argus_Dev_UpdateCfg+0x36>
 800d234:	22a8      	movs	r2, #168	; 0xa8
 800d236:	0028      	movs	r0, r5
 800d238:	58a1      	ldr	r1, [r4, r2]
 800d23a:	4798      	blx	r3
 800d23c:	0005      	movs	r5, r0
 800d23e:	0028      	movs	r0, r5
 800d240:	b003      	add	sp, #12
 800d242:	bc0c      	pop	{r2, r3}
 800d244:	4690      	mov	r8, r2
 800d246:	4699      	mov	r9, r3
 800d248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d24a:	59a3      	ldr	r3, [r4, r6]
 800d24c:	3501      	adds	r5, #1
 800d24e:	421d      	tst	r5, r3
 800d250:	d12a      	bne.n	800d2a8 <Argus_Dev_UpdateCfg+0xa0>
 800d252:	2688      	movs	r6, #136	; 0x88
 800d254:	59a3      	ldr	r3, [r4, r6]
 800d256:	055b      	lsls	r3, r3, #21
 800d258:	d405      	bmi.n	800d266 <Argus_Dev_UpdateCfg+0x5e>
 800d25a:	59a3      	ldr	r3, [r4, r6]
 800d25c:	051b      	lsls	r3, r3, #20
 800d25e:	d402      	bmi.n	800d266 <Argus_Dev_UpdateCfg+0x5e>
 800d260:	59a3      	ldr	r3, [r4, r6]
 800d262:	04db      	lsls	r3, r3, #19
 800d264:	d548      	bpl.n	800d2f8 <Argus_Dev_UpdateCfg+0xf0>
 800d266:	2360      	movs	r3, #96	; 0x60
 800d268:	2201      	movs	r2, #1
 800d26a:	5ce3      	ldrb	r3, [r4, r3]
 800d26c:	2688      	movs	r6, #136	; 0x88
 800d26e:	4393      	bics	r3, r2
 800d270:	329d      	adds	r2, #157	; 0x9d
 800d272:	54a3      	strb	r3, [r4, r2]
 800d274:	2380      	movs	r3, #128	; 0x80
 800d276:	0021      	movs	r1, r4
 800d278:	0020      	movs	r0, r4
 800d27a:	59a2      	ldr	r2, [r4, r6]
 800d27c:	005b      	lsls	r3, r3, #1
 800d27e:	4313      	orrs	r3, r2
 800d280:	51a3      	str	r3, [r4, r6]
 800d282:	9400      	str	r4, [sp, #0]
 800d284:	4b29      	ldr	r3, [pc, #164]	; (800d32c <Argus_Dev_UpdateCfg+0x124>)
 800d286:	2200      	movs	r2, #0
 800d288:	319d      	adds	r1, #157	; 0x9d
 800d28a:	30ac      	adds	r0, #172	; 0xac
 800d28c:	f001 fa02 	bl	800e694 <ADS_W_BlockEnable>
 800d290:	1e05      	subs	r5, r0, #0
 800d292:	dad4      	bge.n	800d23e <Argus_Dev_UpdateCfg+0x36>
 800d294:	4826      	ldr	r0, [pc, #152]	; (800d330 <Argus_Dev_UpdateCfg+0x128>)
 800d296:	f7f9 feed 	bl	8007074 <print>
 800d29a:	4b26      	ldr	r3, [pc, #152]	; (800d334 <Argus_Dev_UpdateCfg+0x12c>)
 800d29c:	51a3      	str	r3, [r4, r6]
 800d29e:	23a4      	movs	r3, #164	; 0xa4
 800d2a0:	58e3      	ldr	r3, [r4, r3]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1c6      	bne.n	800d234 <Argus_Dev_UpdateCfg+0x2c>
 800d2a6:	e7ca      	b.n	800d23e <Argus_Dev_UpdateCfg+0x36>
 800d2a8:	23e8      	movs	r3, #232	; 0xe8
 800d2aa:	58e0      	ldr	r0, [r4, r3]
 800d2ac:	f000 fbfe 	bl	800daac <Argus_Cal_GetCalibrationPtr>
 800d2b0:	68e3      	ldr	r3, [r4, #12]
 800d2b2:	2102      	movs	r1, #2
 800d2b4:	4698      	mov	r8, r3
 800d2b6:	235d      	movs	r3, #93	; 0x5d
 800d2b8:	4642      	mov	r2, r8
 800d2ba:	3051      	adds	r0, #81	; 0x51
 800d2bc:	5cd7      	ldrb	r7, [r2, r3]
 800d2be:	6813      	ldr	r3, [r2, #0]
 800d2c0:	30ff      	adds	r0, #255	; 0xff
 800d2c2:	5641      	ldrsb	r1, [r0, r1]
 800d2c4:	220a      	movs	r2, #10
 800d2c6:	0018      	movs	r0, r3
 800d2c8:	4699      	mov	r9, r3
 800d2ca:	f002 fa47 	bl	800f75c <fp_muls>
 800d2ce:	4643      	mov	r3, r8
 800d2d0:	7999      	ldrb	r1, [r3, #6]
 800d2d2:	2304      	movs	r3, #4
 800d2d4:	09bf      	lsrs	r7, r7, #6
 800d2d6:	1bdb      	subs	r3, r3, r7
 800d2d8:	4448      	add	r0, r9
 800d2da:	4098      	lsls	r0, r3
 800d2dc:	0409      	lsls	r1, r1, #16
 800d2de:	f002 f819 	bl	800f314 <fp_div16>
 800d2e2:	0041      	lsls	r1, r0, #1
 800d2e4:	4814      	ldr	r0, [pc, #80]	; (800d338 <Argus_Dev_UpdateCfg+0x130>)
 800d2e6:	f002 f815 	bl	800f314 <fp_div16>
 800d2ea:	238c      	movs	r3, #140	; 0x8c
 800d2ec:	00c0      	lsls	r0, r0, #3
 800d2ee:	50e0      	str	r0, [r4, r3]
 800d2f0:	59a3      	ldr	r3, [r4, r6]
 800d2f2:	43ab      	bics	r3, r5
 800d2f4:	51a3      	str	r3, [r4, r6]
 800d2f6:	e7ac      	b.n	800d252 <Argus_Dev_UpdateCfg+0x4a>
 800d2f8:	59a3      	ldr	r3, [r4, r6]
 800d2fa:	05db      	lsls	r3, r3, #23
 800d2fc:	d510      	bpl.n	800d320 <Argus_Dev_UpdateCfg+0x118>
 800d2fe:	2360      	movs	r3, #96	; 0x60
 800d300:	0021      	movs	r1, r4
 800d302:	0020      	movs	r0, r4
 800d304:	5ce2      	ldrb	r2, [r4, r3]
 800d306:	333e      	adds	r3, #62	; 0x3e
 800d308:	54e2      	strb	r2, [r4, r3]
 800d30a:	9400      	str	r4, [sp, #0]
 800d30c:	4b0b      	ldr	r3, [pc, #44]	; (800d33c <Argus_Dev_UpdateCfg+0x134>)
 800d30e:	2200      	movs	r2, #0
 800d310:	319d      	adds	r1, #157	; 0x9d
 800d312:	30ac      	adds	r0, #172	; 0xac
 800d314:	f001 ff36 	bl	800f184 <ADS_WR_BlockEnable>
 800d318:	1e05      	subs	r5, r0, #0
 800d31a:	db00      	blt.n	800d31e <Argus_Dev_UpdateCfg+0x116>
 800d31c:	e78f      	b.n	800d23e <Argus_Dev_UpdateCfg+0x36>
 800d31e:	e7b9      	b.n	800d294 <Argus_Dev_UpdateCfg+0x8c>
 800d320:	0021      	movs	r1, r4
 800d322:	2000      	movs	r0, #0
 800d324:	f7fe fea8 	bl	800c078 <RampChargePump>
 800d328:	0005      	movs	r5, r0
 800d32a:	e788      	b.n	800d23e <Argus_Dev_UpdateCfg+0x36>
 800d32c:	0800ba81 	.word	0x0800ba81
 800d330:	08012704 	.word	0x08012704
 800d334:	0033dfff 	.word	0x0033dfff
 800d338:	4779e128 	.word	0x4779e128
 800d33c:	0800bae1 	.word	0x0800bae1

0800d340 <Argus_Dev_StartAuxMeasurement>:
 800d340:	000b      	movs	r3, r1
 800d342:	21a4      	movs	r1, #164	; 0xa4
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	5043      	str	r3, [r0, r1]
 800d348:	3104      	adds	r1, #4
 800d34a:	5042      	str	r2, [r0, r1]
 800d34c:	0004      	movs	r4, r0
 800d34e:	68c1      	ldr	r1, [r0, #12]
 800d350:	2090      	movs	r0, #144	; 0x90
 800d352:	5c08      	ldrb	r0, [r1, r0]
 800d354:	b082      	sub	sp, #8
 800d356:	2800      	cmp	r0, #0
 800d358:	d031      	beq.n	800d3be <Argus_Dev_StartAuxMeasurement+0x7e>
 800d35a:	2388      	movs	r3, #136	; 0x88
 800d35c:	58e3      	ldr	r3, [r4, r3]
 800d35e:	075b      	lsls	r3, r3, #29
 800d360:	d404      	bmi.n	800d36c <Argus_Dev_StartAuxMeasurement+0x2c>
 800d362:	2354      	movs	r3, #84	; 0x54
 800d364:	5ce3      	ldrb	r3, [r4, r3]
 800d366:	09da      	lsrs	r2, r3, #7
 800d368:	2a01      	cmp	r2, #1
 800d36a:	d02f      	beq.n	800d3cc <Argus_Dev_StartAuxMeasurement+0x8c>
 800d36c:	0025      	movs	r5, r4
 800d36e:	0021      	movs	r1, r4
 800d370:	359d      	adds	r5, #157	; 0x9d
 800d372:	2205      	movs	r2, #5
 800d374:	3153      	adds	r1, #83	; 0x53
 800d376:	0028      	movs	r0, r5
 800d378:	f7fb f957 	bl	800862a <memcpy>
 800d37c:	209e      	movs	r0, #158	; 0x9e
 800d37e:	2392      	movs	r3, #146	; 0x92
 800d380:	2170      	movs	r1, #112	; 0x70
 800d382:	68e2      	ldr	r2, [r4, #12]
 800d384:	2688      	movs	r6, #136	; 0x88
 800d386:	5cd3      	ldrb	r3, [r2, r3]
 800d388:	5c22      	ldrb	r2, [r4, r0]
 800d38a:	011b      	lsls	r3, r3, #4
 800d38c:	438a      	bics	r2, r1
 800d38e:	400b      	ands	r3, r1
 800d390:	0011      	movs	r1, r2
 800d392:	2280      	movs	r2, #128	; 0x80
 800d394:	4252      	negs	r2, r2
 800d396:	430a      	orrs	r2, r1
 800d398:	4313      	orrs	r3, r2
 800d39a:	2220      	movs	r2, #32
 800d39c:	5423      	strb	r3, [r4, r0]
 800d39e:	0020      	movs	r0, r4
 800d3a0:	59a3      	ldr	r3, [r4, r6]
 800d3a2:	0029      	movs	r1, r5
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	51a3      	str	r3, [r4, r6]
 800d3a8:	9400      	str	r4, [sp, #0]
 800d3aa:	4b17      	ldr	r3, [pc, #92]	; (800d408 <Argus_Dev_StartAuxMeasurement+0xc8>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	30ac      	adds	r0, #172	; 0xac
 800d3b0:	f001 f844 	bl	800e43c <ADS_W_AnalogSetup>
 800d3b4:	1e05      	subs	r5, r0, #0
 800d3b6:	db15      	blt.n	800d3e4 <Argus_Dev_StartAuxMeasurement+0xa4>
 800d3b8:	0028      	movs	r0, r5
 800d3ba:	b002      	add	sp, #8
 800d3bc:	bd70      	pop	{r4, r5, r6, pc}
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d01f      	beq.n	800d402 <Argus_Dev_StartAuxMeasurement+0xc2>
 800d3c2:	0011      	movs	r1, r2
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	4798      	blx	r3
 800d3c8:	0005      	movs	r5, r0
 800d3ca:	e7f5      	b.n	800d3b8 <Argus_Dev_StartAuxMeasurement+0x78>
 800d3cc:	3291      	adds	r2, #145	; 0x91
 800d3ce:	5c8a      	ldrb	r2, [r1, r2]
 800d3d0:	065b      	lsls	r3, r3, #25
 800d3d2:	0f5b      	lsrs	r3, r3, #29
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d1c9      	bne.n	800d36c <Argus_Dev_StartAuxMeasurement+0x2c>
 800d3d8:	0021      	movs	r1, r4
 800d3da:	2000      	movs	r0, #0
 800d3dc:	f7fe fc7c 	bl	800bcd8 <AuxMeasurement2>
 800d3e0:	0005      	movs	r5, r0
 800d3e2:	e7e9      	b.n	800d3b8 <Argus_Dev_StartAuxMeasurement+0x78>
 800d3e4:	4809      	ldr	r0, [pc, #36]	; (800d40c <Argus_Dev_StartAuxMeasurement+0xcc>)
 800d3e6:	f7f9 fe45 	bl	8007074 <print>
 800d3ea:	4b09      	ldr	r3, [pc, #36]	; (800d410 <Argus_Dev_StartAuxMeasurement+0xd0>)
 800d3ec:	51a3      	str	r3, [r4, r6]
 800d3ee:	23a4      	movs	r3, #164	; 0xa4
 800d3f0:	58e3      	ldr	r3, [r4, r3]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d0e0      	beq.n	800d3b8 <Argus_Dev_StartAuxMeasurement+0x78>
 800d3f6:	22a8      	movs	r2, #168	; 0xa8
 800d3f8:	0028      	movs	r0, r5
 800d3fa:	58a1      	ldr	r1, [r4, r2]
 800d3fc:	4798      	blx	r3
 800d3fe:	0005      	movs	r5, r0
 800d400:	e7da      	b.n	800d3b8 <Argus_Dev_StartAuxMeasurement+0x78>
 800d402:	2500      	movs	r5, #0
 800d404:	e7d8      	b.n	800d3b8 <Argus_Dev_StartAuxMeasurement+0x78>
 800d406:	46c0      	nop			; (mov r8, r8)
 800d408:	0800bcd9 	.word	0x0800bcd9
 800d40c:	08012738 	.word	0x08012738
 800d410:	0033dfff 	.word	0x0033dfff

0800d414 <Argus_Dev_StartPowerSaving>:
 800d414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d416:	0004      	movs	r4, r0
 800d418:	26a4      	movs	r6, #164	; 0xa4
 800d41a:	46c6      	mov	lr, r8
 800d41c:	27a8      	movs	r7, #168	; 0xa8
 800d41e:	51a1      	str	r1, [r4, r6]
 800d420:	000d      	movs	r5, r1
 800d422:	2180      	movs	r1, #128	; 0x80
 800d424:	b500      	push	{lr}
 800d426:	68c3      	ldr	r3, [r0, #12]
 800d428:	51c2      	str	r2, [r0, r7]
 800d42a:	5c59      	ldrb	r1, [r3, r1]
 800d42c:	b082      	sub	sp, #8
 800d42e:	4688      	mov	r8, r1
 800d430:	2900      	cmp	r1, #0
 800d432:	d022      	beq.n	800d47a <Argus_Dev_StartPowerSaving+0x66>
 800d434:	0005      	movs	r5, r0
 800d436:	0001      	movs	r1, r0
 800d438:	359d      	adds	r5, #157	; 0x9d
 800d43a:	2202      	movs	r2, #2
 800d43c:	315f      	adds	r1, #95	; 0x5f
 800d43e:	0028      	movs	r0, r5
 800d440:	f7fb f8f3 	bl	800862a <memcpy>
 800d444:	229e      	movs	r2, #158	; 0x9e
 800d446:	2373      	movs	r3, #115	; 0x73
 800d448:	5ca1      	ldrb	r1, [r4, r2]
 800d44a:	0020      	movs	r0, r4
 800d44c:	400b      	ands	r3, r1
 800d44e:	54a3      	strb	r3, [r4, r2]
 800d450:	2388      	movs	r3, #136	; 0x88
 800d452:	4698      	mov	r8, r3
 800d454:	58e2      	ldr	r2, [r4, r3]
 800d456:	3378      	adds	r3, #120	; 0x78
 800d458:	4313      	orrs	r3, r2
 800d45a:	4642      	mov	r2, r8
 800d45c:	0029      	movs	r1, r5
 800d45e:	50a3      	str	r3, [r4, r2]
 800d460:	9400      	str	r4, [sp, #0]
 800d462:	4b24      	ldr	r3, [pc, #144]	; (800d4f4 <Argus_Dev_StartPowerSaving+0xe0>)
 800d464:	2200      	movs	r2, #0
 800d466:	30ac      	adds	r0, #172	; 0xac
 800d468:	f001 f914 	bl	800e694 <ADS_W_BlockEnable>
 800d46c:	1e05      	subs	r5, r0, #0
 800d46e:	db2a      	blt.n	800d4c6 <Argus_Dev_StartPowerSaving+0xb2>
 800d470:	0028      	movs	r0, r5
 800d472:	b002      	add	sp, #8
 800d474:	bc04      	pop	{r2}
 800d476:	4690      	mov	r8, r2
 800d478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d47a:	2181      	movs	r1, #129	; 0x81
 800d47c:	5c5b      	ldrb	r3, [r3, r1]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d02f      	beq.n	800d4e2 <Argus_Dev_StartPowerSaving+0xce>
 800d482:	0005      	movs	r5, r0
 800d484:	0001      	movs	r1, r0
 800d486:	359d      	adds	r5, #157	; 0x9d
 800d488:	2204      	movs	r2, #4
 800d48a:	3158      	adds	r1, #88	; 0x58
 800d48c:	0028      	movs	r0, r5
 800d48e:	f7fb f8cc 	bl	800862a <memcpy>
 800d492:	4642      	mov	r2, r8
 800d494:	239e      	movs	r3, #158	; 0x9e
 800d496:	52e2      	strh	r2, [r4, r3]
 800d498:	22a0      	movs	r2, #160	; 0xa0
 800d49a:	5ca1      	ldrb	r1, [r4, r2]
 800d49c:	3b8f      	subs	r3, #143	; 0x8f
 800d49e:	400b      	ands	r3, r1
 800d4a0:	54a3      	strb	r3, [r4, r2]
 800d4a2:	2388      	movs	r3, #136	; 0x88
 800d4a4:	4698      	mov	r8, r3
 800d4a6:	58e3      	ldr	r3, [r4, r3]
 800d4a8:	3a60      	subs	r2, #96	; 0x60
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	4642      	mov	r2, r8
 800d4ae:	0020      	movs	r0, r4
 800d4b0:	50a3      	str	r3, [r4, r2]
 800d4b2:	59e3      	ldr	r3, [r4, r7]
 800d4b4:	0029      	movs	r1, r5
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	59a3      	ldr	r3, [r4, r6]
 800d4bc:	30ac      	adds	r0, #172	; 0xac
 800d4be:	f001 f821 	bl	800e504 <ADS_W_LaserSetup>
 800d4c2:	1e05      	subs	r5, r0, #0
 800d4c4:	dad4      	bge.n	800d470 <Argus_Dev_StartPowerSaving+0x5c>
 800d4c6:	480c      	ldr	r0, [pc, #48]	; (800d4f8 <Argus_Dev_StartPowerSaving+0xe4>)
 800d4c8:	f7f9 fdd4 	bl	8007074 <print>
 800d4cc:	4642      	mov	r2, r8
 800d4ce:	4b0b      	ldr	r3, [pc, #44]	; (800d4fc <Argus_Dev_StartPowerSaving+0xe8>)
 800d4d0:	50a3      	str	r3, [r4, r2]
 800d4d2:	59a3      	ldr	r3, [r4, r6]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d0cb      	beq.n	800d470 <Argus_Dev_StartPowerSaving+0x5c>
 800d4d8:	0028      	movs	r0, r5
 800d4da:	59e1      	ldr	r1, [r4, r7]
 800d4dc:	4798      	blx	r3
 800d4de:	0005      	movs	r5, r0
 800d4e0:	e7c6      	b.n	800d470 <Argus_Dev_StartPowerSaving+0x5c>
 800d4e2:	2d00      	cmp	r5, #0
 800d4e4:	d004      	beq.n	800d4f0 <Argus_Dev_StartPowerSaving+0xdc>
 800d4e6:	0011      	movs	r1, r2
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	47a8      	blx	r5
 800d4ec:	0005      	movs	r5, r0
 800d4ee:	e7bf      	b.n	800d470 <Argus_Dev_StartPowerSaving+0x5c>
 800d4f0:	2500      	movs	r5, #0
 800d4f2:	e7bd      	b.n	800d470 <Argus_Dev_StartPowerSaving+0x5c>
 800d4f4:	0800b8a1 	.word	0x0800b8a1
 800d4f8:	080127a0 	.word	0x080127a0
 800d4fc:	0033dfff 	.word	0x0033dfff

0800d500 <Argus_Dev_InvalidateRegister>:
 800d500:	2301      	movs	r3, #1
 800d502:	2288      	movs	r2, #136	; 0x88
 800d504:	0849      	lsrs	r1, r1, #1
 800d506:	408b      	lsls	r3, r1
 800d508:	b510      	push	{r4, lr}
 800d50a:	5884      	ldr	r4, [r0, r2]
 800d50c:	4323      	orrs	r3, r4
 800d50e:	5083      	str	r3, [r0, r2]
 800d510:	bd10      	pop	{r4, pc}
 800d512:	46c0      	nop			; (mov r8, r8)

0800d514 <Argus_Pba_Init>:
 800d514:	b510      	push	{r4, lr}
 800d516:	1e04      	subs	r4, r0, #0
 800d518:	d007      	beq.n	800d52a <Argus_Pba_Init+0x16>
 800d51a:	2208      	movs	r2, #8
 800d51c:	2100      	movs	r1, #0
 800d51e:	f7fb f88f 	bl	8008640 <memset>
 800d522:	2000      	movs	r0, #0
 800d524:	4b02      	ldr	r3, [pc, #8]	; (800d530 <Argus_Pba_Init+0x1c>)
 800d526:	8023      	strh	r3, [r4, #0]
 800d528:	bd10      	pop	{r4, pc}
 800d52a:	2005      	movs	r0, #5
 800d52c:	4240      	negs	r0, r0
 800d52e:	e7fb      	b.n	800d528 <Argus_Pba_Init+0x14>
 800d530:	00000205 	.word	0x00000205

0800d534 <Argus_Pba_ApplyEEPROMCalibration>:
 800d534:	798b      	ldrb	r3, [r1, #6]
 800d536:	2b07      	cmp	r3, #7
 800d538:	d81d      	bhi.n	800d576 <Argus_Pba_ApplyEEPROMCalibration+0x42>
 800d53a:	4a10      	ldr	r2, [pc, #64]	; (800d57c <Argus_Pba_ApplyEEPROMCalibration+0x48>)
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	58d3      	ldr	r3, [r2, r3]
 800d540:	469f      	mov	pc, r3
 800d542:	2381      	movs	r3, #129	; 0x81
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	8003      	strh	r3, [r0, #0]
 800d548:	2000      	movs	r0, #0
 800d54a:	4770      	bx	lr
 800d54c:	2306      	movs	r3, #6
 800d54e:	33ff      	adds	r3, #255	; 0xff
 800d550:	8003      	strh	r3, [r0, #0]
 800d552:	e7f9      	b.n	800d548 <Argus_Pba_ApplyEEPROMCalibration+0x14>
 800d554:	4b0a      	ldr	r3, [pc, #40]	; (800d580 <Argus_Pba_ApplyEEPROMCalibration+0x4c>)
 800d556:	8003      	strh	r3, [r0, #0]
 800d558:	e7f6      	b.n	800d548 <Argus_Pba_ApplyEEPROMCalibration+0x14>
 800d55a:	2383      	movs	r3, #131	; 0x83
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	8003      	strh	r3, [r0, #0]
 800d560:	e7f2      	b.n	800d548 <Argus_Pba_ApplyEEPROMCalibration+0x14>
 800d562:	4b08      	ldr	r3, [pc, #32]	; (800d584 <Argus_Pba_ApplyEEPROMCalibration+0x50>)
 800d564:	8003      	strh	r3, [r0, #0]
 800d566:	e7ef      	b.n	800d548 <Argus_Pba_ApplyEEPROMCalibration+0x14>
 800d568:	4b07      	ldr	r3, [pc, #28]	; (800d588 <Argus_Pba_ApplyEEPROMCalibration+0x54>)
 800d56a:	8003      	strh	r3, [r0, #0]
 800d56c:	e7ec      	b.n	800d548 <Argus_Pba_ApplyEEPROMCalibration+0x14>
 800d56e:	2382      	movs	r3, #130	; 0x82
 800d570:	005b      	lsls	r3, r3, #1
 800d572:	8003      	strh	r3, [r0, #0]
 800d574:	e7e8      	b.n	800d548 <Argus_Pba_ApplyEEPROMCalibration+0x14>
 800d576:	4b05      	ldr	r3, [pc, #20]	; (800d58c <Argus_Pba_ApplyEEPROMCalibration+0x58>)
 800d578:	8003      	strh	r3, [r0, #0]
 800d57a:	e7e5      	b.n	800d548 <Argus_Pba_ApplyEEPROMCalibration+0x14>
 800d57c:	08012824 	.word	0x08012824
 800d580:	00000305 	.word	0x00000305
 800d584:	00000206 	.word	0x00000206
 800d588:	00000306 	.word	0x00000306
 800d58c:	00000205 	.word	0x00000205

0800d590 <Argus_Pba_CheckCfg>:
 800d590:	7803      	ldrb	r3, [r0, #0]
 800d592:	0002      	movs	r2, r0
 800d594:	b510      	push	{r4, lr}
 800d596:	2000      	movs	r0, #0
 800d598:	07d9      	lsls	r1, r3, #31
 800d59a:	d509      	bpl.n	800d5b0 <Argus_Pba_CheckCfg+0x20>
 800d59c:	2121      	movs	r1, #33	; 0x21
 800d59e:	438b      	bics	r3, r1
 800d5a0:	d10d      	bne.n	800d5be <Argus_Pba_CheckCfg+0x2e>
 800d5a2:	7851      	ldrb	r1, [r2, #1]
 800d5a4:	1e4b      	subs	r3, r1, #1
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d803      	bhi.n	800d5b2 <Argus_Pba_CheckCfg+0x22>
 800d5aa:	6853      	ldr	r3, [r2, #4]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	d00c      	beq.n	800d5ca <Argus_Pba_CheckCfg+0x3a>
 800d5b0:	bd10      	pop	{r4, pc}
 800d5b2:	4809      	ldr	r0, [pc, #36]	; (800d5d8 <Argus_Pba_CheckCfg+0x48>)
 800d5b4:	f7f9 fd5e 	bl	8007074 <print>
 800d5b8:	2066      	movs	r0, #102	; 0x66
 800d5ba:	4240      	negs	r0, r0
 800d5bc:	e7f8      	b.n	800d5b0 <Argus_Pba_CheckCfg+0x20>
 800d5be:	4807      	ldr	r0, [pc, #28]	; (800d5dc <Argus_Pba_CheckCfg+0x4c>)
 800d5c0:	f7f9 fd58 	bl	8007074 <print>
 800d5c4:	2066      	movs	r0, #102	; 0x66
 800d5c6:	4240      	negs	r0, r0
 800d5c8:	e7f2      	b.n	800d5b0 <Argus_Pba_CheckCfg+0x20>
 800d5ca:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <Argus_Pba_CheckCfg+0x50>)
 800d5cc:	f7f9 fd52 	bl	8007074 <print>
 800d5d0:	2066      	movs	r0, #102	; 0x66
 800d5d2:	4240      	negs	r0, r0
 800d5d4:	e7ec      	b.n	800d5b0 <Argus_Pba_CheckCfg+0x20>
 800d5d6:	46c0      	nop			; (mov r8, r8)
 800d5d8:	08012884 	.word	0x08012884
 800d5dc:	08012844 	.word	0x08012844
 800d5e0:	080128c8 	.word	0x080128c8

0800d5e4 <Argus_Pba_PrepareCfg>:
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d004      	beq.n	800d5f2 <Argus_Pba_PrepareCfg+0xe>
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	d002      	beq.n	800d5f2 <Argus_Pba_PrepareCfg+0xe>
 800d5ec:	6041      	str	r1, [r0, #4]
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	4770      	bx	lr
 800d5f2:	2005      	movs	r0, #5
 800d5f4:	4240      	negs	r0, r0
 800d5f6:	e7fb      	b.n	800d5f0 <Argus_Pba_PrepareCfg+0xc>

0800d5f8 <PrepareEEPROMCalibration.part.3>:
 800d5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5fa:	4645      	mov	r5, r8
 800d5fc:	46de      	mov	lr, fp
 800d5fe:	4657      	mov	r7, sl
 800d600:	464e      	mov	r6, r9
 800d602:	234d      	movs	r3, #77	; 0x4d
 800d604:	2210      	movs	r2, #16
 800d606:	b5e0      	push	{r5, r6, r7, lr}
 800d608:	5cc5      	ldrb	r5, [r0, r3]
 800d60a:	08eb      	lsrs	r3, r5, #3
 800d60c:	421a      	tst	r2, r3
 800d60e:	d001      	beq.n	800d614 <PrepareEEPROMCalibration.part.3+0x1c>
 800d610:	32d0      	adds	r2, #208	; 0xd0
 800d612:	4313      	orrs	r3, r2
 800d614:	22b2      	movs	r2, #178	; 0xb2
 800d616:	32ff      	adds	r2, #255	; 0xff
 800d618:	5483      	strb	r3, [r0, r2]
 800d61a:	234e      	movs	r3, #78	; 0x4e
 800d61c:	3aaa      	subs	r2, #170	; 0xaa
 800d61e:	3aff      	subs	r2, #255	; 0xff
 800d620:	0011      	movs	r1, r2
 800d622:	5cc3      	ldrb	r3, [r0, r3]
 800d624:	022d      	lsls	r5, r5, #8
 800d626:	431d      	orrs	r5, r3
 800d628:	09ed      	lsrs	r5, r5, #7
 800d62a:	4029      	ands	r1, r5
 800d62c:	4693      	mov	fp, r2
 800d62e:	424a      	negs	r2, r1
 800d630:	4151      	adcs	r1, r2
 800d632:	424a      	negs	r2, r1
 800d634:	21ef      	movs	r1, #239	; 0xef
 800d636:	270f      	movs	r7, #15
 800d638:	438a      	bics	r2, r1
 800d63a:	403d      	ands	r5, r7
 800d63c:	32f0      	adds	r2, #240	; 0xf0
 800d63e:	468c      	mov	ip, r1
 800d640:	432a      	orrs	r2, r5
 800d642:	31c3      	adds	r1, #195	; 0xc3
 800d644:	5442      	strb	r2, [r0, r1]
 800d646:	089a      	lsrs	r2, r3, #2
 800d648:	4690      	mov	r8, r2
 800d64a:	2210      	movs	r2, #16
 800d64c:	4645      	mov	r5, r8
 800d64e:	4015      	ands	r5, r2
 800d650:	4269      	negs	r1, r5
 800d652:	414d      	adcs	r5, r1
 800d654:	26df      	movs	r6, #223	; 0xdf
 800d656:	4269      	negs	r1, r5
 800d658:	4644      	mov	r4, r8
 800d65a:	251f      	movs	r5, #31
 800d65c:	43b1      	bics	r1, r6
 800d65e:	402c      	ands	r4, r5
 800d660:	31e0      	adds	r1, #224	; 0xe0
 800d662:	4321      	orrs	r1, r4
 800d664:	24b4      	movs	r4, #180	; 0xb4
 800d666:	34ff      	adds	r4, #255	; 0xff
 800d668:	5501      	strb	r1, [r0, r4]
 800d66a:	214f      	movs	r1, #79	; 0x4f
 800d66c:	5c41      	ldrb	r1, [r0, r1]
 800d66e:	021b      	lsls	r3, r3, #8
 800d670:	4688      	mov	r8, r1
 800d672:	430b      	orrs	r3, r1
 800d674:	2180      	movs	r1, #128	; 0x80
 800d676:	085b      	lsrs	r3, r3, #1
 800d678:	0049      	lsls	r1, r1, #1
 800d67a:	4019      	ands	r1, r3
 800d67c:	424c      	negs	r4, r1
 800d67e:	414c      	adcs	r4, r1
 800d680:	4261      	negs	r1, r4
 800d682:	4c44      	ldr	r4, [pc, #272]	; (800d794 <PrepareEEPROMCalibration.part.3+0x19c>)
 800d684:	05db      	lsls	r3, r3, #23
 800d686:	4021      	ands	r1, r4
 800d688:	24fe      	movs	r4, #254	; 0xfe
 800d68a:	0224      	lsls	r4, r4, #8
 800d68c:	46a1      	mov	r9, r4
 800d68e:	0ddb      	lsrs	r3, r3, #23
 800d690:	4449      	add	r1, r9
 800d692:	4319      	orrs	r1, r3
 800d694:	23da      	movs	r3, #218	; 0xda
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	52c1      	strh	r1, [r0, r3]
 800d69a:	3b65      	subs	r3, #101	; 0x65
 800d69c:	3bff      	subs	r3, #255	; 0xff
 800d69e:	5cc1      	ldrb	r1, [r0, r3]
 800d6a0:	4643      	mov	r3, r8
 800d6a2:	2407      	movs	r4, #7
 800d6a4:	021b      	lsls	r3, r3, #8
 800d6a6:	430b      	orrs	r3, r1
 800d6a8:	099b      	lsrs	r3, r3, #6
 800d6aa:	46a1      	mov	r9, r4
 800d6ac:	4023      	ands	r3, r4
 800d6ae:	34b0      	adds	r4, #176	; 0xb0
 800d6b0:	34ff      	adds	r4, #255	; 0xff
 800d6b2:	5503      	strb	r3, [r0, r4]
 800d6b4:	020b      	lsls	r3, r1, #8
 800d6b6:	2151      	movs	r1, #81	; 0x51
 800d6b8:	5c41      	ldrb	r1, [r0, r1]
 800d6ba:	4319      	orrs	r1, r3
 800d6bc:	23b8      	movs	r3, #184	; 0xb8
 800d6be:	0989      	lsrs	r1, r1, #6
 800d6c0:	33ff      	adds	r3, #255	; 0xff
 800d6c2:	54c1      	strb	r1, [r0, r3]
 800d6c4:	3b66      	subs	r3, #102	; 0x66
 800d6c6:	3bff      	subs	r3, #255	; 0xff
 800d6c8:	5cc3      	ldrb	r3, [r0, r3]
 800d6ca:	4698      	mov	r8, r3
 800d6cc:	091b      	lsrs	r3, r3, #4
 800d6ce:	469a      	mov	sl, r3
 800d6d0:	2304      	movs	r3, #4
 800d6d2:	4651      	mov	r1, sl
 800d6d4:	400b      	ands	r3, r1
 800d6d6:	4259      	negs	r1, r3
 800d6d8:	4159      	adcs	r1, r3
 800d6da:	424b      	negs	r3, r1
 800d6dc:	21f7      	movs	r1, #247	; 0xf7
 800d6de:	4654      	mov	r4, sl
 800d6e0:	438b      	bics	r3, r1
 800d6e2:	4649      	mov	r1, r9
 800d6e4:	33f8      	adds	r3, #248	; 0xf8
 800d6e6:	4021      	ands	r1, r4
 800d6e8:	430b      	orrs	r3, r1
 800d6ea:	21dc      	movs	r1, #220	; 0xdc
 800d6ec:	0049      	lsls	r1, r1, #1
 800d6ee:	5443      	strb	r3, [r0, r1]
 800d6f0:	2353      	movs	r3, #83	; 0x53
 800d6f2:	4641      	mov	r1, r8
 800d6f4:	5cc3      	ldrb	r3, [r0, r3]
 800d6f6:	0209      	lsls	r1, r1, #8
 800d6f8:	4319      	orrs	r1, r3
 800d6fa:	09c9      	lsrs	r1, r1, #7
 800d6fc:	4688      	mov	r8, r1
 800d6fe:	4011      	ands	r1, r2
 800d700:	424c      	negs	r4, r1
 800d702:	414c      	adcs	r4, r1
 800d704:	4261      	negs	r1, r4
 800d706:	4644      	mov	r4, r8
 800d708:	43b1      	bics	r1, r6
 800d70a:	402c      	ands	r4, r5
 800d70c:	31e0      	adds	r1, #224	; 0xe0
 800d70e:	4321      	orrs	r1, r4
 800d710:	24ba      	movs	r4, #186	; 0xba
 800d712:	34ff      	adds	r4, #255	; 0xff
 800d714:	5501      	strb	r1, [r0, r4]
 800d716:	465c      	mov	r4, fp
 800d718:	08d9      	lsrs	r1, r3, #3
 800d71a:	400c      	ands	r4, r1
 800d71c:	4688      	mov	r8, r1
 800d71e:	4261      	negs	r1, r4
 800d720:	414c      	adcs	r4, r1
 800d722:	4261      	negs	r1, r4
 800d724:	4664      	mov	r4, ip
 800d726:	43a1      	bics	r1, r4
 800d728:	4644      	mov	r4, r8
 800d72a:	4027      	ands	r7, r4
 800d72c:	24dd      	movs	r4, #221	; 0xdd
 800d72e:	31f0      	adds	r1, #240	; 0xf0
 800d730:	4339      	orrs	r1, r7
 800d732:	0064      	lsls	r4, r4, #1
 800d734:	5501      	strb	r1, [r0, r4]
 800d736:	2154      	movs	r1, #84	; 0x54
 800d738:	24bc      	movs	r4, #188	; 0xbc
 800d73a:	5c41      	ldrb	r1, [r0, r1]
 800d73c:	021b      	lsls	r3, r3, #8
 800d73e:	430b      	orrs	r3, r1
 800d740:	08db      	lsrs	r3, r3, #3
 800d742:	34ff      	adds	r4, #255	; 0xff
 800d744:	5503      	strb	r3, [r0, r4]
 800d746:	2355      	movs	r3, #85	; 0x55
 800d748:	5cc4      	ldrb	r4, [r0, r3]
 800d74a:	0209      	lsls	r1, r1, #8
 800d74c:	4321      	orrs	r1, r4
 800d74e:	0989      	lsrs	r1, r1, #6
 800d750:	400a      	ands	r2, r1
 800d752:	4253      	negs	r3, r2
 800d754:	415a      	adcs	r2, r3
 800d756:	4253      	negs	r3, r2
 800d758:	22de      	movs	r2, #222	; 0xde
 800d75a:	43b3      	bics	r3, r6
 800d75c:	400d      	ands	r5, r1
 800d75e:	33e0      	adds	r3, #224	; 0xe0
 800d760:	432b      	orrs	r3, r5
 800d762:	0052      	lsls	r2, r2, #1
 800d764:	5483      	strb	r3, [r0, r2]
 800d766:	3a67      	subs	r2, #103	; 0x67
 800d768:	3aff      	subs	r2, #255	; 0xff
 800d76a:	0223      	lsls	r3, r4, #8
 800d76c:	5c84      	ldrb	r4, [r0, r2]
 800d76e:	3229      	adds	r2, #41	; 0x29
 800d770:	431c      	orrs	r4, r3
 800d772:	09e4      	lsrs	r4, r4, #7
 800d774:	b2e4      	uxtb	r4, r4
 800d776:	0063      	lsls	r3, r4, #1
 800d778:	4393      	bics	r3, r2
 800d77a:	4014      	ands	r4, r2
 800d77c:	431c      	orrs	r4, r3
 800d77e:	23be      	movs	r3, #190	; 0xbe
 800d780:	33ff      	adds	r3, #255	; 0xff
 800d782:	54c4      	strb	r4, [r0, r3]
 800d784:	2000      	movs	r0, #0
 800d786:	bc3c      	pop	{r2, r3, r4, r5}
 800d788:	4690      	mov	r8, r2
 800d78a:	4699      	mov	r9, r3
 800d78c:	46a2      	mov	sl, r4
 800d78e:	46ab      	mov	fp, r5
 800d790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d792:	46c0      	nop			; (mov r8, r8)
 800d794:	ffff0200 	.word	0xffff0200

0800d798 <EvaluateAPDVoltage>:
 800d798:	23d8      	movs	r3, #216	; 0xd8
 800d79a:	005b      	lsls	r3, r3, #1
 800d79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d79e:	4647      	mov	r7, r8
 800d7a0:	4698      	mov	r8, r3
 800d7a2:	46ce      	mov	lr, r9
 800d7a4:	4480      	add	r8, r0
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	4643      	mov	r3, r8
 800d7aa:	0007      	movs	r7, r0
 800d7ac:	7a5b      	ldrb	r3, [r3, #9]
 800d7ae:	3760      	adds	r7, #96	; 0x60
 800d7b0:	78b9      	ldrb	r1, [r7, #2]
 800d7b2:	b25b      	sxtb	r3, r3
 800d7b4:	18c9      	adds	r1, r1, r3
 800d7b6:	4643      	mov	r3, r8
 800d7b8:	7a1b      	ldrb	r3, [r3, #8]
 800d7ba:	787a      	ldrb	r2, [r7, #1]
 800d7bc:	b25b      	sxtb	r3, r3
 800d7be:	0004      	movs	r4, r0
 800d7c0:	18d2      	adds	r2, r2, r3
 800d7c2:	234a      	movs	r3, #74	; 0x4a
 800d7c4:	5ee3      	ldrsh	r3, [r4, r3]
 800d7c6:	485d      	ldr	r0, [pc, #372]	; (800d93c <EvaluateAPDVoltage+0x1a4>)
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	4283      	cmp	r3, r0
 800d7cc:	d100      	bne.n	800d7d0 <EvaluateAPDVoltage+0x38>
 800d7ce:	e0ac      	b.n	800d92a <EvaluateAPDVoltage+0x192>
 800d7d0:	250c      	movs	r5, #12
 800d7d2:	5f78      	ldrsh	r0, [r7, r5]
 800d7d4:	1a18      	subs	r0, r3, r0
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
 800d7d8:	4343      	muls	r3, r0
 800d7da:	2080      	movs	r0, #128	; 0x80
 800d7dc:	00c0      	lsls	r0, r0, #3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	da00      	bge.n	800d7e4 <EvaluateAPDVoltage+0x4c>
 800d7e2:	e08c      	b.n	800d8fe <EvaluateAPDVoltage+0x166>
 800d7e4:	4684      	mov	ip, r0
 800d7e6:	4463      	add	r3, ip
 800d7e8:	0adb      	lsrs	r3, r3, #11
 800d7ea:	18cb      	adds	r3, r1, r3
 800d7ec:	2bff      	cmp	r3, #255	; 0xff
 800d7ee:	dd00      	ble.n	800d7f2 <EvaluateAPDVoltage+0x5a>
 800d7f0:	e08c      	b.n	800d90c <EvaluateAPDVoltage+0x174>
 800d7f2:	0011      	movs	r1, r2
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	da00      	bge.n	800d7fa <EvaluateAPDVoltage+0x62>
 800d7f8:	e09d      	b.n	800d936 <EvaluateAPDVoltage+0x19e>
 800d7fa:	2348      	movs	r3, #72	; 0x48
 800d7fc:	5ce3      	ldrb	r3, [r4, r3]
 800d7fe:	b2ce      	uxtb	r6, r1
 800d800:	42b3      	cmp	r3, r6
 800d802:	d100      	bne.n	800d806 <EvaluateAPDVoltage+0x6e>
 800d804:	e089      	b.n	800d91a <EvaluateAPDVoltage+0x182>
 800d806:	ad01      	add	r5, sp, #4
 800d808:	702a      	strb	r2, [r5, #0]
 800d80a:	1a52      	subs	r2, r2, r1
 800d80c:	2180      	movs	r1, #128	; 0x80
 800d80e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d810:	70ee      	strb	r6, [r5, #3]
 800d812:	4353      	muls	r3, r2
 800d814:	0209      	lsls	r1, r1, #8
 800d816:	2b00      	cmp	r3, #0
 800d818:	da00      	bge.n	800d81c <EvaluateAPDVoltage+0x84>
 800d81a:	e088      	b.n	800d92e <EvaluateAPDVoltage+0x196>
 800d81c:	468c      	mov	ip, r1
 800d81e:	4463      	add	r3, ip
 800d820:	0c1b      	lsrs	r3, r3, #16
 800d822:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d824:	18f3      	adds	r3, r6, r3
 800d826:	434a      	muls	r2, r1
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	706b      	strb	r3, [r5, #1]
 800d82c:	2a00      	cmp	r2, #0
 800d82e:	db00      	blt.n	800d832 <EvaluateAPDVoltage+0x9a>
 800d830:	e075      	b.n	800d91e <EvaluateAPDVoltage+0x186>
 800d832:	2180      	movs	r1, #128	; 0x80
 800d834:	0209      	lsls	r1, r1, #8
 800d836:	1a8a      	subs	r2, r1, r2
 800d838:	0c12      	lsrs	r2, r2, #16
 800d83a:	4252      	negs	r2, r2
 800d83c:	18b2      	adds	r2, r6, r2
 800d83e:	b2d2      	uxtb	r2, r2
 800d840:	70aa      	strb	r2, [r5, #2]
 800d842:	2e3f      	cmp	r6, #63	; 0x3f
 800d844:	d901      	bls.n	800d84a <EvaluateAPDVoltage+0xb2>
 800d846:	213f      	movs	r1, #63	; 0x3f
 800d848:	70e9      	strb	r1, [r5, #3]
 800d84a:	2a3f      	cmp	r2, #63	; 0x3f
 800d84c:	d901      	bls.n	800d852 <EvaluateAPDVoltage+0xba>
 800d84e:	223f      	movs	r2, #63	; 0x3f
 800d850:	70aa      	strb	r2, [r5, #2]
 800d852:	2b3f      	cmp	r3, #63	; 0x3f
 800d854:	d901      	bls.n	800d85a <EvaluateAPDVoltage+0xc2>
 800d856:	233f      	movs	r3, #63	; 0x3f
 800d858:	706b      	strb	r3, [r5, #1]
 800d85a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d85c:	200b      	movs	r0, #11
 800d85e:	4699      	mov	r9, r3
 800d860:	4643      	mov	r3, r8
 800d862:	21fa      	movs	r1, #250	; 0xfa
 800d864:	5618      	ldrsb	r0, [r3, r0]
 800d866:	0489      	lsls	r1, r1, #18
 800d868:	0580      	lsls	r0, r0, #22
 800d86a:	f001 fd53 	bl	800f314 <fp_div16>
 800d86e:	4643      	mov	r3, r8
 800d870:	7b1b      	ldrb	r3, [r3, #12]
 800d872:	793f      	ldrb	r7, [r7, #4]
 800d874:	4481      	add	r9, r0
 800d876:	b25b      	sxtb	r3, r3
 800d878:	18ff      	adds	r7, r7, r3
 800d87a:	464b      	mov	r3, r9
 800d87c:	7868      	ldrb	r0, [r5, #1]
 800d87e:	6023      	str	r3, [r4, #0]
 800d880:	782b      	ldrb	r3, [r5, #0]
 800d882:	03bf      	lsls	r7, r7, #14
 800d884:	1ac0      	subs	r0, r0, r3
 800d886:	0039      	movs	r1, r7
 800d888:	0400      	lsls	r0, r0, #16
 800d88a:	f001 fd43 	bl	800f314 <fp_div16>
 800d88e:	4240      	negs	r0, r0
 800d890:	f001 fe32 	bl	800f4f8 <fp_exp16>
 800d894:	2210      	movs	r2, #16
 800d896:	0001      	movs	r1, r0
 800d898:	4648      	mov	r0, r9
 800d89a:	f001 ff5f 	bl	800f75c <fp_muls>
 800d89e:	782b      	ldrb	r3, [r5, #0]
 800d8a0:	6060      	str	r0, [r4, #4]
 800d8a2:	78a8      	ldrb	r0, [r5, #2]
 800d8a4:	0039      	movs	r1, r7
 800d8a6:	1ac0      	subs	r0, r0, r3
 800d8a8:	0400      	lsls	r0, r0, #16
 800d8aa:	f001 fd33 	bl	800f314 <fp_div16>
 800d8ae:	4240      	negs	r0, r0
 800d8b0:	f001 fe22 	bl	800f4f8 <fp_exp16>
 800d8b4:	2210      	movs	r2, #16
 800d8b6:	0001      	movs	r1, r0
 800d8b8:	4648      	mov	r0, r9
 800d8ba:	f001 ff4f 	bl	800f75c <fp_muls>
 800d8be:	782b      	ldrb	r3, [r5, #0]
 800d8c0:	60a0      	str	r0, [r4, #8]
 800d8c2:	78e8      	ldrb	r0, [r5, #3]
 800d8c4:	0039      	movs	r1, r7
 800d8c6:	1ac0      	subs	r0, r0, r3
 800d8c8:	0400      	lsls	r0, r0, #16
 800d8ca:	f001 fd23 	bl	800f314 <fp_div16>
 800d8ce:	4240      	negs	r0, r0
 800d8d0:	f001 fe12 	bl	800f4f8 <fp_exp16>
 800d8d4:	2210      	movs	r2, #16
 800d8d6:	0001      	movs	r1, r0
 800d8d8:	4648      	mov	r0, r9
 800d8da:	f001 ff3f 	bl	800f75c <fp_muls>
 800d8de:	2348      	movs	r3, #72	; 0x48
 800d8e0:	60e0      	str	r0, [r4, #12]
 800d8e2:	54e6      	strb	r6, [r4, r3]
 800d8e4:	3379      	adds	r3, #121	; 0x79
 800d8e6:	33ff      	adds	r3, #255	; 0xff
 800d8e8:	58e0      	ldr	r0, [r4, r3]
 800d8ea:	0029      	movs	r1, r5
 800d8ec:	30a9      	adds	r0, #169	; 0xa9
 800d8ee:	30ff      	adds	r0, #255	; 0xff
 800d8f0:	f7fd fa54 	bl	800ad9c <Argus_Cfg_SetGainStages>
 800d8f4:	b003      	add	sp, #12
 800d8f6:	bc0c      	pop	{r2, r3}
 800d8f8:	4690      	mov	r8, r2
 800d8fa:	4699      	mov	r9, r3
 800d8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8fe:	1ac3      	subs	r3, r0, r3
 800d900:	0adb      	lsrs	r3, r3, #11
 800d902:	425b      	negs	r3, r3
 800d904:	18cb      	adds	r3, r1, r3
 800d906:	2bff      	cmp	r3, #255	; 0xff
 800d908:	dc00      	bgt.n	800d90c <EvaluateAPDVoltage+0x174>
 800d90a:	e772      	b.n	800d7f2 <EvaluateAPDVoltage+0x5a>
 800d90c:	2348      	movs	r3, #72	; 0x48
 800d90e:	26ff      	movs	r6, #255	; 0xff
 800d910:	5ce3      	ldrb	r3, [r4, r3]
 800d912:	21ff      	movs	r1, #255	; 0xff
 800d914:	42b3      	cmp	r3, r6
 800d916:	d000      	beq.n	800d91a <EvaluateAPDVoltage+0x182>
 800d918:	e775      	b.n	800d806 <EvaluateAPDVoltage+0x6e>
 800d91a:	2000      	movs	r0, #0
 800d91c:	e7ea      	b.n	800d8f4 <EvaluateAPDVoltage+0x15c>
 800d91e:	2180      	movs	r1, #128	; 0x80
 800d920:	0209      	lsls	r1, r1, #8
 800d922:	468c      	mov	ip, r1
 800d924:	4462      	add	r2, ip
 800d926:	0c12      	lsrs	r2, r2, #16
 800d928:	e788      	b.n	800d83c <EvaluateAPDVoltage+0xa4>
 800d92a:	b2ce      	uxtb	r6, r1
 800d92c:	e76b      	b.n	800d806 <EvaluateAPDVoltage+0x6e>
 800d92e:	1acb      	subs	r3, r1, r3
 800d930:	0c1b      	lsrs	r3, r3, #16
 800d932:	425b      	negs	r3, r3
 800d934:	e775      	b.n	800d822 <EvaluateAPDVoltage+0x8a>
 800d936:	0019      	movs	r1, r3
 800d938:	e75f      	b.n	800d7fa <EvaluateAPDVoltage+0x62>
 800d93a:	46c0      	nop			; (mov r8, r8)
 800d93c:	00007fff 	.word	0x00007fff

0800d940 <Argus_Cal_Init>:
 800d940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d942:	46ce      	mov	lr, r9
 800d944:	4647      	mov	r7, r8
 800d946:	22e2      	movs	r2, #226	; 0xe2
 800d948:	b580      	push	{r7, lr}
 800d94a:	000c      	movs	r4, r1
 800d94c:	b0d9      	sub	sp, #356	; 0x164
 800d94e:	0052      	lsls	r2, r2, #1
 800d950:	2100      	movs	r1, #0
 800d952:	0005      	movs	r5, r0
 800d954:	f7fa fe74 	bl	8008640 <memset>
 800d958:	23e0      	movs	r3, #224	; 0xe0
 800d95a:	005b      	lsls	r3, r3, #1
 800d95c:	50ec      	str	r4, [r5, r3]
 800d95e:	4a4c      	ldr	r2, [pc, #304]	; (800da90 <Argus_Cal_Init+0x150>)
 800d960:	3b77      	subs	r3, #119	; 0x77
 800d962:	3bff      	subs	r3, #255	; 0xff
 800d964:	52ea      	strh	r2, [r5, r3]
 800d966:	22b0      	movs	r2, #176	; 0xb0
 800d968:	2100      	movs	r1, #0
 800d96a:	0052      	lsls	r2, r2, #1
 800d96c:	4668      	mov	r0, sp
 800d96e:	f7fa fe67 	bl	8008640 <memset>
 800d972:	4668      	mov	r0, sp
 800d974:	f000 f9c6 	bl	800dd04 <Argus_GetDefaultCalibration>
 800d978:	466b      	mov	r3, sp
 800d97a:	789b      	ldrb	r3, [r3, #2]
 800d97c:	2b3f      	cmp	r3, #63	; 0x3f
 800d97e:	d86d      	bhi.n	800da5c <Argus_Cal_Init+0x11c>
 800d980:	466a      	mov	r2, sp
 800d982:	7851      	ldrb	r1, [r2, #1]
 800d984:	428b      	cmp	r3, r1
 800d986:	d800      	bhi.n	800d98a <Argus_Cal_Init+0x4a>
 800d988:	e075      	b.n	800da76 <Argus_Cal_Init+0x136>
 800d98a:	78d3      	ldrb	r3, [r2, #3]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d06c      	beq.n	800da6a <Argus_Cal_Init+0x12a>
 800d990:	7913      	ldrb	r3, [r2, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d100      	bne.n	800d998 <Argus_Cal_Init+0x58>
 800d996:	e074      	b.n	800da82 <Argus_Cal_Init+0x142>
 800d998:	22b0      	movs	r2, #176	; 0xb0
 800d99a:	0028      	movs	r0, r5
 800d99c:	24d8      	movs	r4, #216	; 0xd8
 800d99e:	0052      	lsls	r2, r2, #1
 800d9a0:	4669      	mov	r1, sp
 800d9a2:	3060      	adds	r0, #96	; 0x60
 800d9a4:	0064      	lsls	r4, r4, #1
 800d9a6:	f7fa fe40 	bl	800862a <memcpy>
 800d9aa:	5d2b      	ldrb	r3, [r5, r4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d13e      	bne.n	800da2e <Argus_Cal_Init+0xee>
 800d9b0:	466b      	mov	r3, sp
 800d9b2:	7e1b      	ldrb	r3, [r3, #24]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10e      	bne.n	800d9d6 <Argus_Cal_Init+0x96>
 800d9b8:	4b36      	ldr	r3, [pc, #216]	; (800da94 <Argus_Cal_Init+0x154>)
 800d9ba:	622b      	str	r3, [r5, #32]
 800d9bc:	626b      	str	r3, [r5, #36]	; 0x24
 800d9be:	62ab      	str	r3, [r5, #40]	; 0x28
 800d9c0:	62eb      	str	r3, [r5, #44]	; 0x2c
 800d9c2:	632b      	str	r3, [r5, #48]	; 0x30
 800d9c4:	636b      	str	r3, [r5, #52]	; 0x34
 800d9c6:	63ab      	str	r3, [r5, #56]	; 0x38
 800d9c8:	63eb      	str	r3, [r5, #60]	; 0x3c
 800d9ca:	2000      	movs	r0, #0
 800d9cc:	b059      	add	sp, #356	; 0x164
 800d9ce:	bc0c      	pop	{r2, r3}
 800d9d0:	4690      	mov	r8, r2
 800d9d2:	4699      	mov	r9, r3
 800d9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9d6:	466b      	mov	r3, sp
 800d9d8:	7e58      	ldrb	r0, [r3, #25]
 800d9da:	002c      	movs	r4, r5
 800d9dc:	0280      	lsls	r0, r0, #10
 800d9de:	f001 fde9 	bl	800f5b4 <fp_log16>
 800d9e2:	2180      	movs	r1, #128	; 0x80
 800d9e4:	0349      	lsls	r1, r1, #13
 800d9e6:	f001 fc95 	bl	800f314 <fp_div16>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	2600      	movs	r6, #0
 800d9f0:	4699      	mov	r9, r3
 800d9f2:	4f29      	ldr	r7, [pc, #164]	; (800da98 <Argus_Cal_Init+0x158>)
 800d9f4:	3420      	adds	r4, #32
 800d9f6:	3540      	adds	r5, #64	; 0x40
 800d9f8:	0030      	movs	r0, r6
 800d9fa:	f001 fd7d 	bl	800f4f8 <fp_exp16>
 800d9fe:	42b8      	cmp	r0, r7
 800da00:	d80e      	bhi.n	800da20 <Argus_Cal_Init+0xe0>
 800da02:	2380      	movs	r3, #128	; 0x80
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	469c      	mov	ip, r3
 800da08:	4460      	add	r0, ip
 800da0a:	0a80      	lsrs	r0, r0, #10
 800da0c:	7020      	strb	r0, [r4, #0]
 800da0e:	3401      	adds	r4, #1
 800da10:	4446      	add	r6, r8
 800da12:	42a5      	cmp	r5, r4
 800da14:	d0d9      	beq.n	800d9ca <Argus_Cal_Init+0x8a>
 800da16:	0030      	movs	r0, r6
 800da18:	f001 fd6e 	bl	800f4f8 <fp_exp16>
 800da1c:	42b8      	cmp	r0, r7
 800da1e:	d9f0      	bls.n	800da02 <Argus_Cal_Init+0xc2>
 800da20:	464b      	mov	r3, r9
 800da22:	7023      	strb	r3, [r4, #0]
 800da24:	3401      	adds	r4, #1
 800da26:	4446      	add	r6, r8
 800da28:	42ac      	cmp	r4, r5
 800da2a:	d1e5      	bne.n	800d9f8 <Argus_Cal_Init+0xb8>
 800da2c:	e7cd      	b.n	800d9ca <Argus_Cal_Init+0x8a>
 800da2e:	220e      	movs	r2, #14
 800da30:	2100      	movs	r1, #0
 800da32:	1928      	adds	r0, r5, r4
 800da34:	f7fa fe04 	bl	8008640 <memset>
 800da38:	2301      	movs	r3, #1
 800da3a:	552b      	strb	r3, [r5, r4]
 800da3c:	3357      	adds	r3, #87	; 0x57
 800da3e:	5cea      	ldrb	r2, [r5, r3]
 800da40:	3301      	adds	r3, #1
 800da42:	5ceb      	ldrb	r3, [r5, r3]
 800da44:	0212      	lsls	r2, r2, #8
 800da46:	4313      	orrs	r3, r2
 800da48:	055b      	lsls	r3, r3, #21
 800da4a:	0e9b      	lsrs	r3, r3, #26
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d1af      	bne.n	800d9b0 <Argus_Cal_Init+0x70>
 800da50:	0028      	movs	r0, r5
 800da52:	f7ff fdd1 	bl	800d5f8 <PrepareEEPROMCalibration.part.3>
 800da56:	2800      	cmp	r0, #0
 800da58:	daaa      	bge.n	800d9b0 <Argus_Cal_Init+0x70>
 800da5a:	e7b7      	b.n	800d9cc <Argus_Cal_Init+0x8c>
 800da5c:	0019      	movs	r1, r3
 800da5e:	480f      	ldr	r0, [pc, #60]	; (800da9c <Argus_Cal_Init+0x15c>)
 800da60:	f7f9 fb08 	bl	8007074 <print>
 800da64:	2066      	movs	r0, #102	; 0x66
 800da66:	4240      	negs	r0, r0
 800da68:	e7b0      	b.n	800d9cc <Argus_Cal_Init+0x8c>
 800da6a:	480d      	ldr	r0, [pc, #52]	; (800daa0 <Argus_Cal_Init+0x160>)
 800da6c:	f7f9 fb02 	bl	8007074 <print>
 800da70:	2066      	movs	r0, #102	; 0x66
 800da72:	4240      	negs	r0, r0
 800da74:	e7aa      	b.n	800d9cc <Argus_Cal_Init+0x8c>
 800da76:	480b      	ldr	r0, [pc, #44]	; (800daa4 <Argus_Cal_Init+0x164>)
 800da78:	f7f9 fafc 	bl	8007074 <print>
 800da7c:	2066      	movs	r0, #102	; 0x66
 800da7e:	4240      	negs	r0, r0
 800da80:	e7a4      	b.n	800d9cc <Argus_Cal_Init+0x8c>
 800da82:	4809      	ldr	r0, [pc, #36]	; (800daa8 <Argus_Cal_Init+0x168>)
 800da84:	f7f9 faf6 	bl	8007074 <print>
 800da88:	2066      	movs	r0, #102	; 0x66
 800da8a:	4240      	negs	r0, r0
 800da8c:	e79e      	b.n	800d9cc <Argus_Cal_Init+0x8c>
 800da8e:	46c0      	nop			; (mov r8, r8)
 800da90:	00007fff 	.word	0x00007fff
 800da94:	40404040 	.word	0x40404040
 800da98:	fffffdff 	.word	0xfffffdff
 800da9c:	0801290c 	.word	0x0801290c
 800daa0:	080129b0 	.word	0x080129b0
 800daa4:	0801295c 	.word	0x0801295c
 800daa8:	080129e4 	.word	0x080129e4

0800daac <Argus_Cal_GetCalibrationPtr>:
 800daac:	3060      	adds	r0, #96	; 0x60
 800daae:	4770      	bx	lr

0800dab0 <Argus_Cal_Update>:
 800dab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dab2:	46de      	mov	lr, fp
 800dab4:	4657      	mov	r7, sl
 800dab6:	464e      	mov	r6, r9
 800dab8:	4645      	mov	r5, r8
 800daba:	b5e0      	push	{r5, r6, r7, lr}
 800dabc:	0007      	movs	r7, r0
 800dabe:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800dac0:	0004      	movs	r4, r0
 800dac2:	200d      	movs	r0, #13
 800dac4:	21fa      	movs	r1, #250	; 0xfa
 800dac6:	37b1      	adds	r7, #177	; 0xb1
 800dac8:	37ff      	adds	r7, #255	; 0xff
 800daca:	5638      	ldrsb	r0, [r7, r0]
 800dacc:	b085      	sub	sp, #20
 800dace:	0489      	lsls	r1, r1, #18
 800dad0:	0580      	lsls	r0, r0, #22
 800dad2:	4698      	mov	r8, r3
 800dad4:	f001 fc1e 	bl	800f314 <fp_div16>
 800dad8:	23e0      	movs	r3, #224	; 0xe0
 800dada:	005b      	lsls	r3, r3, #1
 800dadc:	4682      	mov	sl, r0
 800dade:	58e0      	ldr	r0, [r4, r3]
 800dae0:	ad03      	add	r5, sp, #12
 800dae2:	30a9      	adds	r0, #169	; 0xa9
 800dae4:	30ff      	adds	r0, #255	; 0xff
 800dae6:	0029      	movs	r1, r5
 800dae8:	4699      	mov	r9, r3
 800daea:	f7fd f969 	bl	800adc0 <Argus_Cfg_GetPowerStages>
 800daee:	1e06      	subs	r6, r0, #0
 800daf0:	da00      	bge.n	800daf4 <Argus_Cal_Update+0x44>
 800daf2:	e09c      	b.n	800dc2e <Argus_Cal_Update+0x17e>
 800daf4:	786b      	ldrb	r3, [r5, #1]
 800daf6:	7828      	ldrb	r0, [r5, #0]
 800daf8:	4646      	mov	r6, r8
 800dafa:	1ac0      	subs	r0, r0, r3
 800dafc:	4b67      	ldr	r3, [pc, #412]	; (800dc9c <Argus_Cal_Update+0x1ec>)
 800dafe:	4456      	add	r6, sl
 800db00:	4358      	muls	r0, r3
 800db02:	4698      	mov	r8, r3
 800db04:	f001 fcf8 	bl	800f4f8 <fp_exp16>
 800db08:	78ab      	ldrb	r3, [r5, #2]
 800db0a:	4683      	mov	fp, r0
 800db0c:	7828      	ldrb	r0, [r5, #0]
 800db0e:	1ac0      	subs	r0, r0, r3
 800db10:	4643      	mov	r3, r8
 800db12:	4358      	muls	r0, r3
 800db14:	f001 fcf0 	bl	800f4f8 <fp_exp16>
 800db18:	78eb      	ldrb	r3, [r5, #3]
 800db1a:	4682      	mov	sl, r0
 800db1c:	7828      	ldrb	r0, [r5, #0]
 800db1e:	1ac0      	subs	r0, r0, r3
 800db20:	4643      	mov	r3, r8
 800db22:	4358      	muls	r0, r3
 800db24:	f001 fce8 	bl	800f4f8 <fp_exp16>
 800db28:	4643      	mov	r3, r8
 800db2a:	9001      	str	r0, [sp, #4]
 800db2c:	7828      	ldrb	r0, [r5, #0]
 800db2e:	381f      	subs	r0, #31
 800db30:	4358      	muls	r0, r3
 800db32:	f001 fce1 	bl	800f4f8 <fp_exp16>
 800db36:	2180      	movs	r1, #128	; 0x80
 800db38:	0249      	lsls	r1, r1, #9
 800db3a:	0005      	movs	r5, r0
 800db3c:	1a09      	subs	r1, r1, r0
 800db3e:	2210      	movs	r2, #16
 800db40:	0030      	movs	r0, r6
 800db42:	f001 fe0b 	bl	800f75c <fp_muls>
 800db46:	465b      	mov	r3, fp
 800db48:	6120      	str	r0, [r4, #16]
 800db4a:	1b59      	subs	r1, r3, r5
 800db4c:	2210      	movs	r2, #16
 800db4e:	0030      	movs	r0, r6
 800db50:	f001 fe04 	bl	800f75c <fp_muls>
 800db54:	4653      	mov	r3, sl
 800db56:	6160      	str	r0, [r4, #20]
 800db58:	1b59      	subs	r1, r3, r5
 800db5a:	2210      	movs	r2, #16
 800db5c:	0030      	movs	r0, r6
 800db5e:	f001 fdfd 	bl	800f75c <fp_muls>
 800db62:	9b01      	ldr	r3, [sp, #4]
 800db64:	2210      	movs	r2, #16
 800db66:	1b59      	subs	r1, r3, r5
 800db68:	61a0      	str	r0, [r4, #24]
 800db6a:	0030      	movs	r0, r6
 800db6c:	f001 fdf6 	bl	800f75c <fp_muls>
 800db70:	0025      	movs	r5, r4
 800db72:	61e0      	str	r0, [r4, #28]
 800db74:	200a      	movs	r0, #10
 800db76:	3560      	adds	r5, #96	; 0x60
 800db78:	78eb      	ldrb	r3, [r5, #3]
 800db7a:	5638      	ldrsb	r0, [r7, r0]
 800db7c:	039b      	lsls	r3, r3, #14
 800db7e:	03c0      	lsls	r0, r0, #15
 800db80:	18c0      	adds	r0, r0, r3
 800db82:	f001 fd17 	bl	800f5b4 <fp_log16>
 800db86:	21c0      	movs	r1, #192	; 0xc0
 800db88:	0289      	lsls	r1, r1, #10
 800db8a:	f001 fbc3 	bl	800f314 <fp_div16>
 800db8e:	f001 fcb3 	bl	800f4f8 <fp_exp16>
 800db92:	0006      	movs	r6, r0
 800db94:	0001      	movs	r1, r0
 800db96:	20c8      	movs	r0, #200	; 0xc8
 800db98:	03c0      	lsls	r0, r0, #15
 800db9a:	f001 fbbb 	bl	800f314 <fp_div16>
 800db9e:	0031      	movs	r1, r6
 800dba0:	4680      	mov	r8, r0
 800dba2:	f001 fbb7 	bl	800f314 <fp_div16>
 800dba6:	0031      	movs	r1, r6
 800dba8:	4682      	mov	sl, r0
 800dbaa:	f001 fbb3 	bl	800f314 <fp_div16>
 800dbae:	4b3c      	ldr	r3, [pc, #240]	; (800dca0 <Argus_Cal_Update+0x1f0>)
 800dbb0:	469c      	mov	ip, r3
 800dbb2:	4460      	add	r0, ip
 800dbb4:	f001 fcfe 	bl	800f5b4 <fp_log16>
 800dbb8:	0006      	movs	r6, r0
 800dbba:	4839      	ldr	r0, [pc, #228]	; (800dca0 <Argus_Cal_Update+0x1f0>)
 800dbbc:	4450      	add	r0, sl
 800dbbe:	f001 fcf9 	bl	800f5b4 <fp_log16>
 800dbc2:	4682      	mov	sl, r0
 800dbc4:	4836      	ldr	r0, [pc, #216]	; (800dca0 <Argus_Cal_Update+0x1f0>)
 800dbc6:	4440      	add	r0, r8
 800dbc8:	f001 fcf4 	bl	800f5b4 <fp_log16>
 800dbcc:	4680      	mov	r8, r0
 800dbce:	20b4      	movs	r0, #180	; 0xb4
 800dbd0:	03c0      	lsls	r0, r0, #15
 800dbd2:	f001 fcef 	bl	800f5b4 <fp_log16>
 800dbd6:	4653      	mov	r3, sl
 800dbd8:	4683      	mov	fp, r0
 800dbda:	1a36      	subs	r6, r6, r0
 800dbdc:	0031      	movs	r1, r6
 800dbde:	1a18      	subs	r0, r3, r0
 800dbe0:	f001 fb98 	bl	800f314 <fp_div16>
 800dbe4:	4643      	mov	r3, r8
 800dbe6:	465a      	mov	r2, fp
 800dbe8:	6420      	str	r0, [r4, #64]	; 0x40
 800dbea:	0031      	movs	r1, r6
 800dbec:	1a98      	subs	r0, r3, r2
 800dbee:	f001 fb91 	bl	800f314 <fp_div16>
 800dbf2:	6460      	str	r0, [r4, #68]	; 0x44
 800dbf4:	7a7b      	ldrb	r3, [r7, #9]
 800dbf6:	78a9      	ldrb	r1, [r5, #2]
 800dbf8:	7a3a      	ldrb	r2, [r7, #8]
 800dbfa:	18c9      	adds	r1, r1, r3
 800dbfc:	786b      	ldrb	r3, [r5, #1]
 800dbfe:	b2c9      	uxtb	r1, r1
 800dc00:	189b      	adds	r3, r3, r2
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	428b      	cmp	r3, r1
 800dc06:	d83f      	bhi.n	800dc88 <Argus_Cal_Update+0x1d8>
 800dc08:	293f      	cmp	r1, #63	; 0x3f
 800dc0a:	d833      	bhi.n	800dc74 <Argus_Cal_Update+0x1c4>
 800dc0c:	0020      	movs	r0, r4
 800dc0e:	f7ff fdc3 	bl	800d798 <EvaluateAPDVoltage>
 800dc12:	1e06      	subs	r6, r0, #0
 800dc14:	d10b      	bne.n	800dc2e <Argus_Cal_Update+0x17e>
 800dc16:	22a7      	movs	r2, #167	; 0xa7
 800dc18:	464b      	mov	r3, r9
 800dc1a:	0092      	lsls	r2, r2, #2
 800dc1c:	4694      	mov	ip, r2
 800dc1e:	58e3      	ldr	r3, [r4, r3]
 800dc20:	0039      	movs	r1, r7
 800dc22:	4463      	add	r3, ip
 800dc24:	0018      	movs	r0, r3
 800dc26:	f7ff fc85 	bl	800d534 <Argus_Pba_ApplyEEPROMCalibration>
 800dc2a:	1e06      	subs	r6, r0, #0
 800dc2c:	d007      	beq.n	800dc3e <Argus_Cal_Update+0x18e>
 800dc2e:	0030      	movs	r0, r6
 800dc30:	b005      	add	sp, #20
 800dc32:	bc3c      	pop	{r2, r3, r4, r5}
 800dc34:	4690      	mov	r8, r2
 800dc36:	4699      	mov	r9, r3
 800dc38:	46a2      	mov	sl, r4
 800dc3a:	46ab      	mov	fp, r5
 800dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc3e:	464b      	mov	r3, r9
 800dc40:	58e0      	ldr	r0, [r4, r3]
 800dc42:	0039      	movs	r1, r7
 800dc44:	30a9      	adds	r0, #169	; 0xa9
 800dc46:	30ff      	adds	r0, #255	; 0xff
 800dc48:	f7ff f988 	bl	800cf5c <Argus_Dev_ApplyEEPROMCalibration>
 800dc4c:	1e06      	subs	r6, r0, #0
 800dc4e:	d1ee      	bne.n	800dc2e <Argus_Cal_Update+0x17e>
 800dc50:	464b      	mov	r3, r9
 800dc52:	58e0      	ldr	r0, [r4, r3]
 800dc54:	f7fc fdc4 	bl	800a7e0 <Argus_Cfg_GetConfigurationPtr>
 800dc58:	4b12      	ldr	r3, [pc, #72]	; (800dca4 <Argus_Cal_Update+0x1f4>)
 800dc5a:	6880      	ldr	r0, [r0, #8]
 800dc5c:	4298      	cmp	r0, r3
 800dc5e:	d80f      	bhi.n	800dc80 <Argus_Cal_Update+0x1d0>
 800dc60:	4911      	ldr	r1, [pc, #68]	; (800dca8 <Argus_Cal_Update+0x1f8>)
 800dc62:	f7f2 fb25 	bl	80002b0 <__aeabi_uidiv>
 800dc66:	b2c3      	uxtb	r3, r0
 800dc68:	2801      	cmp	r0, #1
 800dc6a:	d813      	bhi.n	800dc94 <Argus_Cal_Update+0x1e4>
 800dc6c:	234c      	movs	r3, #76	; 0x4c
 800dc6e:	2203      	movs	r2, #3
 800dc70:	54e2      	strb	r2, [r4, r3]
 800dc72:	e7dc      	b.n	800dc2e <Argus_Cal_Update+0x17e>
 800dc74:	2666      	movs	r6, #102	; 0x66
 800dc76:	480d      	ldr	r0, [pc, #52]	; (800dcac <Argus_Cal_Update+0x1fc>)
 800dc78:	f7f9 f9fc 	bl	8007074 <print>
 800dc7c:	4276      	negs	r6, r6
 800dc7e:	e7d6      	b.n	800dc2e <Argus_Cal_Update+0x17e>
 800dc80:	234c      	movs	r3, #76	; 0x4c
 800dc82:	2280      	movs	r2, #128	; 0x80
 800dc84:	54e2      	strb	r2, [r4, r3]
 800dc86:	e7d2      	b.n	800dc2e <Argus_Cal_Update+0x17e>
 800dc88:	2666      	movs	r6, #102	; 0x66
 800dc8a:	4809      	ldr	r0, [pc, #36]	; (800dcb0 <Argus_Cal_Update+0x200>)
 800dc8c:	f7f9 f9f2 	bl	8007074 <print>
 800dc90:	4276      	negs	r6, r6
 800dc92:	e7cc      	b.n	800dc2e <Argus_Cal_Update+0x17e>
 800dc94:	224c      	movs	r2, #76	; 0x4c
 800dc96:	54a3      	strb	r3, [r4, r2]
 800dc98:	e7c9      	b.n	800dc2e <Argus_Cal_Update+0x17e>
 800dc9a:	46c0      	nop			; (mov r8, r8)
 800dc9c:	00002666 	.word	0x00002666
 800dca0:	fff60000 	.word	0xfff60000
 800dca4:	000a2c2a 	.word	0x000a2c2a
 800dca8:	00001458 	.word	0x00001458
 800dcac:	08012a54 	.word	0x08012a54
 800dcb0:	08012a24 	.word	0x08012a24

0800dcb4 <Argus_Cal_SetEEPROMData>:
 800dcb4:	b570      	push	{r4, r5, r6, lr}
 800dcb6:	25d8      	movs	r5, #216	; 0xd8
 800dcb8:	0004      	movs	r4, r0
 800dcba:	2210      	movs	r2, #16
 800dcbc:	304d      	adds	r0, #77	; 0x4d
 800dcbe:	006d      	lsls	r5, r5, #1
 800dcc0:	f7fa fcb3 	bl	800862a <memcpy>
 800dcc4:	5d63      	ldrb	r3, [r4, r5]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d103      	bne.n	800dcd2 <Argus_Cal_SetEEPROMData+0x1e>
 800dcca:	0020      	movs	r0, r4
 800dccc:	f7ff fef0 	bl	800dab0 <Argus_Cal_Update>
 800dcd0:	bd70      	pop	{r4, r5, r6, pc}
 800dcd2:	220e      	movs	r2, #14
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	1960      	adds	r0, r4, r5
 800dcd8:	f7fa fcb2 	bl	8008640 <memset>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	5563      	strb	r3, [r4, r5]
 800dce0:	3357      	adds	r3, #87	; 0x57
 800dce2:	5ce2      	ldrb	r2, [r4, r3]
 800dce4:	3301      	adds	r3, #1
 800dce6:	5ce3      	ldrb	r3, [r4, r3]
 800dce8:	0212      	lsls	r2, r2, #8
 800dcea:	4313      	orrs	r3, r2
 800dcec:	055b      	lsls	r3, r3, #21
 800dcee:	0e9b      	lsrs	r3, r3, #26
 800dcf0:	d0eb      	beq.n	800dcca <Argus_Cal_SetEEPROMData+0x16>
 800dcf2:	206e      	movs	r0, #110	; 0x6e
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d1eb      	bne.n	800dcd0 <Argus_Cal_SetEEPROMData+0x1c>
 800dcf8:	0020      	movs	r0, r4
 800dcfa:	f7ff fc7d 	bl	800d5f8 <PrepareEEPROMCalibration.part.3>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d1e6      	bne.n	800dcd0 <Argus_Cal_SetEEPROMData+0x1c>
 800dd02:	e7e2      	b.n	800dcca <Argus_Cal_SetEEPROMData+0x16>

0800dd04 <Argus_GetDefaultCalibration>:
 800dd04:	22b0      	movs	r2, #176	; 0xb0
 800dd06:	b570      	push	{r4, r5, r6, lr}
 800dd08:	0052      	lsls	r2, r2, #1
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	0004      	movs	r4, r0
 800dd0e:	f7fa fc97 	bl	8008640 <memset>
 800dd12:	2301      	movs	r3, #1
 800dd14:	2220      	movs	r2, #32
 800dd16:	2580      	movs	r5, #128	; 0x80
 800dd18:	54a3      	strb	r3, [r4, r2]
 800dd1a:	0022      	movs	r2, r4
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	4e18      	ldr	r6, [pc, #96]	; (800dd80 <Argus_GetDefaultCalibration+0x7c>)
 800dd20:	4818      	ldr	r0, [pc, #96]	; (800dd84 <Argus_GetDefaultCalibration+0x80>)
 800dd22:	062d      	lsls	r5, r5, #24
 800dd24:	3220      	adds	r2, #32
 800dd26:	6266      	str	r6, [r4, #36]	; 0x24
 800dd28:	62a5      	str	r5, [r4, #40]	; 0x28
 800dd2a:	6321      	str	r1, [r4, #48]	; 0x30
 800dd2c:	85a0      	strh	r0, [r4, #44]	; 0x2c
 800dd2e:	7511      	strb	r1, [r2, #20]
 800dd30:	22b8      	movs	r2, #184	; 0xb8
 800dd32:	54a3      	strb	r3, [r4, r2]
 800dd34:	0022      	movs	r2, r4
 800dd36:	32b8      	adds	r2, #184	; 0xb8
 800dd38:	6056      	str	r6, [r2, #4]
 800dd3a:	26c0      	movs	r6, #192	; 0xc0
 800dd3c:	51a5      	str	r5, [r4, r6]
 800dd3e:	6111      	str	r1, [r2, #16]
 800dd40:	7511      	strb	r1, [r2, #20]
 800dd42:	8190      	strh	r0, [r2, #12]
 800dd44:	22a8      	movs	r2, #168	; 0xa8
 800dd46:	0052      	lsls	r2, r2, #1
 800dd48:	54a3      	strb	r3, [r4, r2]
 800dd4a:	3adf      	subs	r2, #223	; 0xdf
 800dd4c:	7662      	strb	r2, [r4, #25]
 800dd4e:	3a59      	subs	r2, #89	; 0x59
 800dd50:	70e2      	strb	r2, [r4, #3]
 800dd52:	7122      	strb	r2, [r4, #4]
 800dd54:	3279      	adds	r2, #121	; 0x79
 800dd56:	32ff      	adds	r2, #255	; 0xff
 800dd58:	3128      	adds	r1, #40	; 0x28
 800dd5a:	81a2      	strh	r2, [r4, #12]
 800dd5c:	3a67      	subs	r2, #103	; 0x67
 800dd5e:	70a1      	strb	r1, [r4, #2]
 800dd60:	3aff      	subs	r2, #255	; 0xff
 800dd62:	391b      	subs	r1, #27
 800dd64:	7623      	strb	r3, [r4, #24]
 800dd66:	7023      	strb	r3, [r4, #0]
 800dd68:	7061      	strb	r1, [r4, #1]
 800dd6a:	73a2      	strb	r2, [r4, #14]
 800dd6c:	4906      	ldr	r1, [pc, #24]	; (800dd88 <Argus_GetDefaultCalibration+0x84>)
 800dd6e:	7423      	strb	r3, [r4, #16]
 800dd70:	4a06      	ldr	r2, [pc, #24]	; (800dd8c <Argus_GetDefaultCalibration+0x88>)
 800dd72:	76a3      	strb	r3, [r4, #26]
 800dd74:	4b06      	ldr	r3, [pc, #24]	; (800dd90 <Argus_GetDefaultCalibration+0x8c>)
 800dd76:	60a1      	str	r1, [r4, #8]
 800dd78:	6162      	str	r2, [r4, #20]
 800dd7a:	61e3      	str	r3, [r4, #28]
 800dd7c:	bd70      	pop	{r4, r5, r6, pc}
 800dd7e:	46c0      	nop			; (mov r8, r8)
 800dd80:	00233333 	.word	0x00233333
 800dd84:	ffff8000 	.word	0xffff8000
 800dd88:	00066666 	.word	0x00066666
 800dd8c:	00070a3d 	.word	0x00070a3d
 800dd90:	60009560 	.word	0x60009560

0800dd94 <ADS_IRQ_Callback>:
 800dd94:	b510      	push	{r4, lr}
 800dd96:	b672      	cpsid	i
 800dd98:	4b0e      	ldr	r3, [pc, #56]	; (800ddd4 <ADS_IRQ_Callback+0x40>)
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	3201      	adds	r2, #1
 800dd9e:	601a      	str	r2, [r3, #0]
 800dda0:	6802      	ldr	r2, [r0, #0]
 800dda2:	2a67      	cmp	r2, #103	; 0x67
 800dda4:	d006      	beq.n	800ddb4 <ADS_IRQ_Callback+0x20>
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	1e51      	subs	r1, r2, #1
 800ddaa:	6019      	str	r1, [r3, #0]
 800ddac:	2a00      	cmp	r2, #0
 800ddae:	d000      	beq.n	800ddb2 <ADS_IRQ_Callback+0x1e>
 800ddb0:	b662      	cpsie	i
 800ddb2:	bd10      	pop	{r4, pc}
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	6882      	ldr	r2, [r0, #8]
 800ddb8:	6001      	str	r1, [r0, #0]
 800ddba:	2a00      	cmp	r2, #0
 800ddbc:	d0f3      	beq.n	800dda6 <ADS_IRQ_Callback+0x12>
 800ddbe:	6081      	str	r1, [r0, #8]
 800ddc0:	6819      	ldr	r1, [r3, #0]
 800ddc2:	1e4c      	subs	r4, r1, #1
 800ddc4:	601c      	str	r4, [r3, #0]
 800ddc6:	2900      	cmp	r1, #0
 800ddc8:	d000      	beq.n	800ddcc <ADS_IRQ_Callback+0x38>
 800ddca:	b662      	cpsie	i
 800ddcc:	68c1      	ldr	r1, [r0, #12]
 800ddce:	2000      	movs	r0, #0
 800ddd0:	4790      	blx	r2
 800ddd2:	e7ee      	b.n	800ddb2 <ADS_IRQ_Callback+0x1e>
 800ddd4:	20005268 	.word	0x20005268

0800ddd8 <ADS_SPI_Callback>:
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	b672      	cpsid	i
 800dddc:	4b14      	ldr	r3, [pc, #80]	; (800de30 <ADS_SPI_Callback+0x58>)
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	3201      	adds	r2, #1
 800dde2:	601a      	str	r2, [r3, #0]
 800dde4:	680a      	ldr	r2, [r1, #0]
 800dde6:	2a02      	cmp	r2, #2
 800dde8:	d011      	beq.n	800de0e <ADS_SPI_Callback+0x36>
 800ddea:	680a      	ldr	r2, [r1, #0]
 800ddec:	2a64      	cmp	r2, #100	; 0x64
 800ddee:	d006      	beq.n	800ddfe <ADS_SPI_Callback+0x26>
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	1e51      	subs	r1, r2, #1
 800ddf4:	6019      	str	r1, [r3, #0]
 800ddf6:	2a00      	cmp	r2, #0
 800ddf8:	d000      	beq.n	800ddfc <ADS_SPI_Callback+0x24>
 800ddfa:	b662      	cpsie	i
 800ddfc:	bd10      	pop	{r4, pc}
 800ddfe:	3203      	adds	r2, #3
 800de00:	600a      	str	r2, [r1, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	1e51      	subs	r1, r2, #1
 800de06:	6019      	str	r1, [r3, #0]
 800de08:	2a00      	cmp	r2, #0
 800de0a:	d1f6      	bne.n	800ddfa <ADS_SPI_Callback+0x22>
 800de0c:	e7f6      	b.n	800ddfc <ADS_SPI_Callback+0x24>
 800de0e:	2400      	movs	r4, #0
 800de10:	688a      	ldr	r2, [r1, #8]
 800de12:	600c      	str	r4, [r1, #0]
 800de14:	2a00      	cmp	r2, #0
 800de16:	d0eb      	beq.n	800ddf0 <ADS_SPI_Callback+0x18>
 800de18:	6818      	ldr	r0, [r3, #0]
 800de1a:	608c      	str	r4, [r1, #8]
 800de1c:	1e44      	subs	r4, r0, #1
 800de1e:	601c      	str	r4, [r3, #0]
 800de20:	2800      	cmp	r0, #0
 800de22:	d000      	beq.n	800de26 <ADS_SPI_Callback+0x4e>
 800de24:	b662      	cpsie	i
 800de26:	68c9      	ldr	r1, [r1, #12]
 800de28:	2000      	movs	r0, #0
 800de2a:	4790      	blx	r2
 800de2c:	e7e6      	b.n	800ddfc <ADS_SPI_Callback+0x24>
 800de2e:	46c0      	nop			; (mov r8, r8)
 800de30:	20005268 	.word	0x20005268

0800de34 <ADS_Init>:
 800de34:	b510      	push	{r4, lr}
 800de36:	0004      	movs	r4, r0
 800de38:	0008      	movs	r0, r1
 800de3a:	6061      	str	r1, [r4, #4]
 800de3c:	0022      	movs	r2, r4
 800de3e:	4906      	ldr	r1, [pc, #24]	; (800de58 <ADS_Init+0x24>)
 800de40:	f7f9 f906 	bl	8007050 <S2PI_SetIrqCallback>
 800de44:	2800      	cmp	r0, #0
 800de46:	d102      	bne.n	800de4e <ADS_Init+0x1a>
 800de48:	6020      	str	r0, [r4, #0]
 800de4a:	6820      	ldr	r0, [r4, #0]
 800de4c:	bd10      	pop	{r4, pc}
 800de4e:	2307      	movs	r3, #7
 800de50:	425b      	negs	r3, r3
 800de52:	6023      	str	r3, [r4, #0]
 800de54:	e7fa      	b.n	800de4c <ADS_Init+0x18>
 800de56:	46c0      	nop			; (mov r8, r8)
 800de58:	0800dd95 	.word	0x0800dd95

0800de5c <ADS_Abort>:
 800de5c:	2302      	movs	r3, #2
 800de5e:	425b      	negs	r3, r3
 800de60:	b570      	push	{r4, r5, r6, lr}
 800de62:	6003      	str	r3, [r0, #0]
 800de64:	0004      	movs	r4, r0
 800de66:	f7f9 f8bd 	bl	8006fe4 <S2PI_Abort>
 800de6a:	1e05      	subs	r5, r0, #0
 800de6c:	db14      	blt.n	800de98 <ADS_Abort+0x3c>
 800de6e:	6860      	ldr	r0, [r4, #4]
 800de70:	f7f9 f8ba 	bl	8006fe8 <S2PI_CycleCsPin>
 800de74:	1e05      	subs	r5, r0, #0
 800de76:	db06      	blt.n	800de86 <ADS_Abort+0x2a>
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	3302      	adds	r3, #2
 800de7c:	d101      	bne.n	800de82 <ADS_Abort+0x26>
 800de7e:	2300      	movs	r3, #0
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	6820      	ldr	r0, [r4, #0]
 800de84:	bd70      	pop	{r4, r5, r6, pc}
 800de86:	6821      	ldr	r1, [r4, #0]
 800de88:	4808      	ldr	r0, [pc, #32]	; (800deac <ADS_Abort+0x50>)
 800de8a:	f7f9 f8f3 	bl	8007074 <print>
 800de8e:	6823      	ldr	r3, [r4, #0]
 800de90:	3302      	adds	r3, #2
 800de92:	d1f1      	bne.n	800de78 <ADS_Abort+0x1c>
 800de94:	6025      	str	r5, [r4, #0]
 800de96:	e7ef      	b.n	800de78 <ADS_Abort+0x1c>
 800de98:	6821      	ldr	r1, [r4, #0]
 800de9a:	4805      	ldr	r0, [pc, #20]	; (800deb0 <ADS_Abort+0x54>)
 800de9c:	f7f9 f8ea 	bl	8007074 <print>
 800dea0:	6823      	ldr	r3, [r4, #0]
 800dea2:	3302      	adds	r3, #2
 800dea4:	d1e3      	bne.n	800de6e <ADS_Abort+0x12>
 800dea6:	6025      	str	r5, [r4, #0]
 800dea8:	e7e1      	b.n	800de6e <ADS_Abort+0x12>
 800deaa:	46c0      	nop			; (mov r8, r8)
 800deac:	08012ac8 	.word	0x08012ac8
 800deb0:	08012a8c 	.word	0x08012a8c

0800deb4 <ADS_GetStatus>:
 800deb4:	6843      	ldr	r3, [r0, #4]
 800deb6:	b510      	push	{r4, lr}
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d007      	beq.n	800decc <ADS_GetStatus+0x18>
 800debc:	6803      	ldr	r3, [r0, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <ADS_GetStatus+0x12>
 800dec2:	6800      	ldr	r0, [r0, #0]
 800dec4:	bd10      	pop	{r4, pc}
 800dec6:	f7f8 fff3 	bl	8006eb0 <S2PI_GetStatus>
 800deca:	e7fb      	b.n	800dec4 <ADS_GetStatus+0x10>
 800decc:	2065      	movs	r0, #101	; 0x65
 800dece:	4240      	negs	r0, r0
 800ded0:	e7f8      	b.n	800dec4 <ADS_GetStatus+0x10>
 800ded2:	46c0      	nop			; (mov r8, r8)

0800ded4 <ADS_Start>:
 800ded4:	2326      	movs	r3, #38	; 0x26
 800ded6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ded8:	4e2c      	ldr	r6, [pc, #176]	; (800df8c <ADS_Start+0xb8>)
 800deda:	b083      	sub	sp, #12
 800dedc:	7033      	strb	r3, [r6, #0]
 800dede:	7873      	ldrb	r3, [r6, #1]
 800dee0:	0005      	movs	r5, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <ADS_Start+0x16>
 800dee6:	3301      	adds	r3, #1
 800dee8:	7073      	strb	r3, [r6, #1]
 800deea:	b672      	cpsid	i
 800deec:	4c28      	ldr	r4, [pc, #160]	; (800df90 <ADS_Start+0xbc>)
 800deee:	6823      	ldr	r3, [r4, #0]
 800def0:	3301      	adds	r3, #1
 800def2:	6023      	str	r3, [r4, #0]
 800def4:	682b      	ldr	r3, [r5, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d009      	beq.n	800df0e <ADS_Start+0x3a>
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	1e5a      	subs	r2, r3, #1
 800defe:	6022      	str	r2, [r4, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d000      	beq.n	800df06 <ADS_Start+0x32>
 800df04:	b662      	cpsie	i
 800df06:	682f      	ldr	r7, [r5, #0]
 800df08:	0038      	movs	r0, r7
 800df0a:	b003      	add	sp, #12
 800df0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df0e:	2364      	movs	r3, #100	; 0x64
 800df10:	602b      	str	r3, [r5, #0]
 800df12:	6823      	ldr	r3, [r4, #0]
 800df14:	1e58      	subs	r0, r3, #1
 800df16:	6020      	str	r0, [r4, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d000      	beq.n	800df1e <ADS_Start+0x4a>
 800df1c:	b662      	cpsie	i
 800df1e:	4b1d      	ldr	r3, [pc, #116]	; (800df94 <ADS_Start+0xc0>)
 800df20:	60a9      	str	r1, [r5, #8]
 800df22:	60ea      	str	r2, [r5, #12]
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	9501      	str	r5, [sp, #4]
 800df28:	2302      	movs	r3, #2
 800df2a:	2200      	movs	r2, #0
 800df2c:	0031      	movs	r1, r6
 800df2e:	6868      	ldr	r0, [r5, #4]
 800df30:	f7f8 ffd2 	bl	8006ed8 <S2PI_TransferFrame>
 800df34:	1e07      	subs	r7, r0, #0
 800df36:	dae7      	bge.n	800df08 <ADS_Start+0x34>
 800df38:	0002      	movs	r2, r0
 800df3a:	7831      	ldrb	r1, [r6, #0]
 800df3c:	4816      	ldr	r0, [pc, #88]	; (800df98 <ADS_Start+0xc4>)
 800df3e:	f7f9 f899 	bl	8007074 <print>
 800df42:	b672      	cpsid	i
 800df44:	6823      	ldr	r3, [r4, #0]
 800df46:	3301      	adds	r3, #1
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	682b      	ldr	r3, [r5, #0]
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d00b      	beq.n	800df68 <ADS_Start+0x94>
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	2b64      	cmp	r3, #100	; 0x64
 800df54:	d101      	bne.n	800df5a <ADS_Start+0x86>
 800df56:	3303      	adds	r3, #3
 800df58:	602b      	str	r3, [r5, #0]
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	1e5a      	subs	r2, r3, #1
 800df5e:	6022      	str	r2, [r4, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d0d1      	beq.n	800df08 <ADS_Start+0x34>
 800df64:	b662      	cpsie	i
 800df66:	e7cf      	b.n	800df08 <ADS_Start+0x34>
 800df68:	2200      	movs	r2, #0
 800df6a:	68ab      	ldr	r3, [r5, #8]
 800df6c:	602a      	str	r2, [r5, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d0f3      	beq.n	800df5a <ADS_Start+0x86>
 800df72:	60aa      	str	r2, [r5, #8]
 800df74:	6822      	ldr	r2, [r4, #0]
 800df76:	1e51      	subs	r1, r2, #1
 800df78:	6021      	str	r1, [r4, #0]
 800df7a:	2a00      	cmp	r2, #0
 800df7c:	d000      	beq.n	800df80 <ADS_Start+0xac>
 800df7e:	b662      	cpsie	i
 800df80:	68e9      	ldr	r1, [r5, #12]
 800df82:	2000      	movs	r0, #0
 800df84:	4798      	blx	r3
 800df86:	0007      	movs	r7, r0
 800df88:	e7be      	b.n	800df08 <ADS_Start+0x34>
 800df8a:	46c0      	nop			; (mov r8, r8)
 800df8c:	200003b0 	.word	0x200003b0
 800df90:	20005268 	.word	0x20005268
 800df94:	0800ddd9 	.word	0x0800ddd9
 800df98:	08012b84 	.word	0x08012b84

0800df9c <ADS_ReadData>:
 800df9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df9e:	000e      	movs	r6, r1
 800dfa0:	1e51      	subs	r1, r2, #1
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	0005      	movs	r5, r0
 800dfa6:	2983      	cmp	r1, #131	; 0x83
 800dfa8:	d855      	bhi.n	800e056 <ADS_ReadData+0xba>
 800dfaa:	2124      	movs	r1, #36	; 0x24
 800dfac:	7031      	strb	r1, [r6, #0]
 800dfae:	b672      	cpsid	i
 800dfb0:	4c2a      	ldr	r4, [pc, #168]	; (800e05c <ADS_ReadData+0xc0>)
 800dfb2:	6821      	ldr	r1, [r4, #0]
 800dfb4:	3101      	adds	r1, #1
 800dfb6:	6021      	str	r1, [r4, #0]
 800dfb8:	6801      	ldr	r1, [r0, #0]
 800dfba:	2900      	cmp	r1, #0
 800dfbc:	d11a      	bne.n	800dff4 <ADS_ReadData+0x58>
 800dfbe:	2102      	movs	r1, #2
 800dfc0:	6001      	str	r1, [r0, #0]
 800dfc2:	6821      	ldr	r1, [r4, #0]
 800dfc4:	1e48      	subs	r0, r1, #1
 800dfc6:	6020      	str	r0, [r4, #0]
 800dfc8:	2900      	cmp	r1, #0
 800dfca:	d000      	beq.n	800dfce <ADS_ReadData+0x32>
 800dfcc:	b662      	cpsie	i
 800dfce:	60ab      	str	r3, [r5, #8]
 800dfd0:	9b08      	ldr	r3, [sp, #32]
 800dfd2:	9501      	str	r5, [sp, #4]
 800dfd4:	60eb      	str	r3, [r5, #12]
 800dfd6:	0053      	lsls	r3, r2, #1
 800dfd8:	189b      	adds	r3, r3, r2
 800dfda:	4a21      	ldr	r2, [pc, #132]	; (800e060 <ADS_ReadData+0xc4>)
 800dfdc:	3301      	adds	r3, #1
 800dfde:	9200      	str	r2, [sp, #0]
 800dfe0:	0031      	movs	r1, r6
 800dfe2:	0032      	movs	r2, r6
 800dfe4:	6868      	ldr	r0, [r5, #4]
 800dfe6:	f7f8 ff77 	bl	8006ed8 <S2PI_TransferFrame>
 800dfea:	1e07      	subs	r7, r0, #0
 800dfec:	db0a      	blt.n	800e004 <ADS_ReadData+0x68>
 800dfee:	0038      	movs	r0, r7
 800dff0:	b003      	add	sp, #12
 800dff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff4:	6823      	ldr	r3, [r4, #0]
 800dff6:	1e5a      	subs	r2, r3, #1
 800dff8:	6022      	str	r2, [r4, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d000      	beq.n	800e000 <ADS_ReadData+0x64>
 800dffe:	b662      	cpsie	i
 800e000:	682f      	ldr	r7, [r5, #0]
 800e002:	e7f4      	b.n	800dfee <ADS_ReadData+0x52>
 800e004:	0002      	movs	r2, r0
 800e006:	7831      	ldrb	r1, [r6, #0]
 800e008:	4816      	ldr	r0, [pc, #88]	; (800e064 <ADS_ReadData+0xc8>)
 800e00a:	f7f9 f833 	bl	8007074 <print>
 800e00e:	b672      	cpsid	i
 800e010:	6823      	ldr	r3, [r4, #0]
 800e012:	3301      	adds	r3, #1
 800e014:	6023      	str	r3, [r4, #0]
 800e016:	682b      	ldr	r3, [r5, #0]
 800e018:	2b02      	cmp	r3, #2
 800e01a:	d00b      	beq.n	800e034 <ADS_ReadData+0x98>
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	2b64      	cmp	r3, #100	; 0x64
 800e020:	d101      	bne.n	800e026 <ADS_ReadData+0x8a>
 800e022:	3303      	adds	r3, #3
 800e024:	602b      	str	r3, [r5, #0]
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	1e5a      	subs	r2, r3, #1
 800e02a:	6022      	str	r2, [r4, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d0de      	beq.n	800dfee <ADS_ReadData+0x52>
 800e030:	b662      	cpsie	i
 800e032:	e7dc      	b.n	800dfee <ADS_ReadData+0x52>
 800e034:	2200      	movs	r2, #0
 800e036:	68ab      	ldr	r3, [r5, #8]
 800e038:	602a      	str	r2, [r5, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d0f3      	beq.n	800e026 <ADS_ReadData+0x8a>
 800e03e:	60aa      	str	r2, [r5, #8]
 800e040:	6822      	ldr	r2, [r4, #0]
 800e042:	1e51      	subs	r1, r2, #1
 800e044:	6021      	str	r1, [r4, #0]
 800e046:	2a00      	cmp	r2, #0
 800e048:	d000      	beq.n	800e04c <ADS_ReadData+0xb0>
 800e04a:	b662      	cpsie	i
 800e04c:	68e9      	ldr	r1, [r5, #12]
 800e04e:	2000      	movs	r0, #0
 800e050:	4798      	blx	r3
 800e052:	0007      	movs	r7, r0
 800e054:	e7cb      	b.n	800dfee <ADS_ReadData+0x52>
 800e056:	2705      	movs	r7, #5
 800e058:	427f      	negs	r7, r7
 800e05a:	e7c8      	b.n	800dfee <ADS_ReadData+0x52>
 800e05c:	20005268 	.word	0x20005268
 800e060:	0800ddd9 	.word	0x0800ddd9
 800e064:	08012b84 	.word	0x08012b84

0800e068 <ADS_ReadEEPROM>:
 800e068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e06a:	0006      	movs	r6, r0
 800e06c:	b085      	sub	sp, #20
 800e06e:	000f      	movs	r7, r1
 800e070:	b672      	cpsid	i
 800e072:	4b27      	ldr	r3, [pc, #156]	; (800e110 <ADS_ReadEEPROM+0xa8>)
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	3201      	adds	r2, #1
 800e078:	601a      	str	r2, [r3, #0]
 800e07a:	6802      	ldr	r2, [r0, #0]
 800e07c:	2a00      	cmp	r2, #0
 800e07e:	d009      	beq.n	800e094 <ADS_ReadEEPROM+0x2c>
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	1e51      	subs	r1, r2, #1
 800e084:	6019      	str	r1, [r3, #0]
 800e086:	2a00      	cmp	r2, #0
 800e088:	d000      	beq.n	800e08c <ADS_ReadEEPROM+0x24>
 800e08a:	b662      	cpsie	i
 800e08c:	6835      	ldr	r5, [r6, #0]
 800e08e:	0028      	movs	r0, r5
 800e090:	b005      	add	sp, #20
 800e092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e094:	2202      	movs	r2, #2
 800e096:	6002      	str	r2, [r0, #0]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	1e51      	subs	r1, r2, #1
 800e09c:	6019      	str	r1, [r3, #0]
 800e09e:	2a00      	cmp	r2, #0
 800e0a0:	d123      	bne.n	800e0ea <ADS_ReadEEPROM+0x82>
 800e0a2:	2210      	movs	r2, #16
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	4668      	mov	r0, sp
 800e0a8:	f7fa faca 	bl	8008640 <memset>
 800e0ac:	2400      	movs	r4, #0
 800e0ae:	e002      	b.n	800e0b6 <ADS_ReadEEPROM+0x4e>
 800e0b0:	3401      	adds	r4, #1
 800e0b2:	2c10      	cmp	r4, #16
 800e0b4:	d01b      	beq.n	800e0ee <ADS_ReadEEPROM+0x86>
 800e0b6:	0022      	movs	r2, r4
 800e0b8:	b2e1      	uxtb	r1, r4
 800e0ba:	446a      	add	r2, sp
 800e0bc:	6870      	ldr	r0, [r6, #4]
 800e0be:	f001 fe71 	bl	800fda4 <EEPROM_Read>
 800e0c2:	1e05      	subs	r5, r0, #0
 800e0c4:	d0f4      	beq.n	800e0b0 <ADS_ReadEEPROM+0x48>
 800e0c6:	0001      	movs	r1, r0
 800e0c8:	4812      	ldr	r0, [pc, #72]	; (800e114 <ADS_ReadEEPROM+0xac>)
 800e0ca:	f7f8 ffd3 	bl	8007074 <print>
 800e0ce:	0039      	movs	r1, r7
 800e0d0:	4668      	mov	r0, sp
 800e0d2:	f001 fbb1 	bl	800f838 <hamming_decode>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d115      	bne.n	800e106 <ADS_ReadEEPROM+0x9e>
 800e0da:	466b      	mov	r3, sp
 800e0dc:	227f      	movs	r2, #127	; 0x7f
 800e0de:	7bdb      	ldrb	r3, [r3, #15]
 800e0e0:	4393      	bics	r3, r2
 800e0e2:	73fb      	strb	r3, [r7, #15]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	6033      	str	r3, [r6, #0]
 800e0e8:	e7d1      	b.n	800e08e <ADS_ReadEEPROM+0x26>
 800e0ea:	b662      	cpsie	i
 800e0ec:	e7d9      	b.n	800e0a2 <ADS_ReadEEPROM+0x3a>
 800e0ee:	0039      	movs	r1, r7
 800e0f0:	4668      	mov	r0, sp
 800e0f2:	f001 fba1 	bl	800f838 <hamming_decode>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d0ef      	beq.n	800e0da <ADS_ReadEEPROM+0x72>
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	4806      	ldr	r0, [pc, #24]	; (800e118 <ADS_ReadEEPROM+0xb0>)
 800e0fe:	f7f8 ffb9 	bl	8007074 <print>
 800e102:	256d      	movs	r5, #109	; 0x6d
 800e104:	e7e9      	b.n	800e0da <ADS_ReadEEPROM+0x72>
 800e106:	0029      	movs	r1, r5
 800e108:	4803      	ldr	r0, [pc, #12]	; (800e118 <ADS_ReadEEPROM+0xb0>)
 800e10a:	f7f8 ffb3 	bl	8007074 <print>
 800e10e:	e7e4      	b.n	800e0da <ADS_ReadEEPROM+0x72>
 800e110:	20005268 	.word	0x20005268
 800e114:	08012b10 	.word	0x08012b10
 800e118:	08012b58 	.word	0x08012b58

0800e11c <ADS_W_PhaseDelay>:
 800e11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e11e:	000f      	movs	r7, r1
 800e120:	2102      	movs	r1, #2
 800e122:	4311      	orrs	r1, r2
 800e124:	b083      	sub	sp, #12
 800e126:	0005      	movs	r5, r0
 800e128:	7039      	strb	r1, [r7, #0]
 800e12a:	b672      	cpsid	i
 800e12c:	4c2a      	ldr	r4, [pc, #168]	; (800e1d8 <ADS_W_PhaseDelay+0xbc>)
 800e12e:	6821      	ldr	r1, [r4, #0]
 800e130:	3101      	adds	r1, #1
 800e132:	6021      	str	r1, [r4, #0]
 800e134:	6801      	ldr	r1, [r0, #0]
 800e136:	2900      	cmp	r1, #0
 800e138:	d009      	beq.n	800e14e <ADS_W_PhaseDelay+0x32>
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	1e5a      	subs	r2, r3, #1
 800e13e:	6022      	str	r2, [r4, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d000      	beq.n	800e146 <ADS_W_PhaseDelay+0x2a>
 800e144:	b662      	cpsie	i
 800e146:	682e      	ldr	r6, [r5, #0]
 800e148:	0030      	movs	r0, r6
 800e14a:	b003      	add	sp, #12
 800e14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e14e:	2a00      	cmp	r2, #0
 800e150:	d12d      	bne.n	800e1ae <ADS_W_PhaseDelay+0x92>
 800e152:	2202      	movs	r2, #2
 800e154:	6002      	str	r2, [r0, #0]
 800e156:	6822      	ldr	r2, [r4, #0]
 800e158:	1e51      	subs	r1, r2, #1
 800e15a:	6021      	str	r1, [r4, #0]
 800e15c:	2a00      	cmp	r2, #0
 800e15e:	d000      	beq.n	800e162 <ADS_W_PhaseDelay+0x46>
 800e160:	b662      	cpsie	i
 800e162:	60ab      	str	r3, [r5, #8]
 800e164:	9b08      	ldr	r3, [sp, #32]
 800e166:	9501      	str	r5, [sp, #4]
 800e168:	60eb      	str	r3, [r5, #12]
 800e16a:	4b1c      	ldr	r3, [pc, #112]	; (800e1dc <ADS_W_PhaseDelay+0xc0>)
 800e16c:	2200      	movs	r2, #0
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	0039      	movs	r1, r7
 800e172:	2309      	movs	r3, #9
 800e174:	6868      	ldr	r0, [r5, #4]
 800e176:	f7f8 feaf 	bl	8006ed8 <S2PI_TransferFrame>
 800e17a:	1e06      	subs	r6, r0, #0
 800e17c:	dae4      	bge.n	800e148 <ADS_W_PhaseDelay+0x2c>
 800e17e:	0002      	movs	r2, r0
 800e180:	7839      	ldrb	r1, [r7, #0]
 800e182:	4817      	ldr	r0, [pc, #92]	; (800e1e0 <ADS_W_PhaseDelay+0xc4>)
 800e184:	f7f8 ff76 	bl	8007074 <print>
 800e188:	b672      	cpsid	i
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	3301      	adds	r3, #1
 800e18e:	6023      	str	r3, [r4, #0]
 800e190:	682b      	ldr	r3, [r5, #0]
 800e192:	2b02      	cmp	r3, #2
 800e194:	d00e      	beq.n	800e1b4 <ADS_W_PhaseDelay+0x98>
 800e196:	682b      	ldr	r3, [r5, #0]
 800e198:	2b64      	cmp	r3, #100	; 0x64
 800e19a:	d101      	bne.n	800e1a0 <ADS_W_PhaseDelay+0x84>
 800e19c:	3303      	adds	r3, #3
 800e19e:	602b      	str	r3, [r5, #0]
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	1e5a      	subs	r2, r3, #1
 800e1a4:	6022      	str	r2, [r4, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d0ce      	beq.n	800e148 <ADS_W_PhaseDelay+0x2c>
 800e1aa:	b662      	cpsie	i
 800e1ac:	e7cc      	b.n	800e148 <ADS_W_PhaseDelay+0x2c>
 800e1ae:	2264      	movs	r2, #100	; 0x64
 800e1b0:	6002      	str	r2, [r0, #0]
 800e1b2:	e7d0      	b.n	800e156 <ADS_W_PhaseDelay+0x3a>
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	68ab      	ldr	r3, [r5, #8]
 800e1b8:	602a      	str	r2, [r5, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d0f0      	beq.n	800e1a0 <ADS_W_PhaseDelay+0x84>
 800e1be:	60aa      	str	r2, [r5, #8]
 800e1c0:	6822      	ldr	r2, [r4, #0]
 800e1c2:	1e51      	subs	r1, r2, #1
 800e1c4:	6021      	str	r1, [r4, #0]
 800e1c6:	2a00      	cmp	r2, #0
 800e1c8:	d000      	beq.n	800e1cc <ADS_W_PhaseDelay+0xb0>
 800e1ca:	b662      	cpsie	i
 800e1cc:	68e9      	ldr	r1, [r5, #12]
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	4798      	blx	r3
 800e1d2:	0006      	movs	r6, r0
 800e1d4:	e7b8      	b.n	800e148 <ADS_W_PhaseDelay+0x2c>
 800e1d6:	46c0      	nop			; (mov r8, r8)
 800e1d8:	20005268 	.word	0x20005268
 800e1dc:	0800ddd9 	.word	0x0800ddd9
 800e1e0:	08012b84 	.word	0x08012b84

0800e1e4 <ADS_W_LaserPattern>:
 800e1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1e6:	000f      	movs	r7, r1
 800e1e8:	2104      	movs	r1, #4
 800e1ea:	4311      	orrs	r1, r2
 800e1ec:	b083      	sub	sp, #12
 800e1ee:	0005      	movs	r5, r0
 800e1f0:	7039      	strb	r1, [r7, #0]
 800e1f2:	b672      	cpsid	i
 800e1f4:	4c2a      	ldr	r4, [pc, #168]	; (800e2a0 <ADS_W_LaserPattern+0xbc>)
 800e1f6:	6821      	ldr	r1, [r4, #0]
 800e1f8:	3101      	adds	r1, #1
 800e1fa:	6021      	str	r1, [r4, #0]
 800e1fc:	6801      	ldr	r1, [r0, #0]
 800e1fe:	2900      	cmp	r1, #0
 800e200:	d009      	beq.n	800e216 <ADS_W_LaserPattern+0x32>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	1e5a      	subs	r2, r3, #1
 800e206:	6022      	str	r2, [r4, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d000      	beq.n	800e20e <ADS_W_LaserPattern+0x2a>
 800e20c:	b662      	cpsie	i
 800e20e:	682e      	ldr	r6, [r5, #0]
 800e210:	0030      	movs	r0, r6
 800e212:	b003      	add	sp, #12
 800e214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e216:	2a00      	cmp	r2, #0
 800e218:	d12d      	bne.n	800e276 <ADS_W_LaserPattern+0x92>
 800e21a:	2202      	movs	r2, #2
 800e21c:	6002      	str	r2, [r0, #0]
 800e21e:	6822      	ldr	r2, [r4, #0]
 800e220:	1e51      	subs	r1, r2, #1
 800e222:	6021      	str	r1, [r4, #0]
 800e224:	2a00      	cmp	r2, #0
 800e226:	d000      	beq.n	800e22a <ADS_W_LaserPattern+0x46>
 800e228:	b662      	cpsie	i
 800e22a:	60ab      	str	r3, [r5, #8]
 800e22c:	9b08      	ldr	r3, [sp, #32]
 800e22e:	9501      	str	r5, [sp, #4]
 800e230:	60eb      	str	r3, [r5, #12]
 800e232:	4b1c      	ldr	r3, [pc, #112]	; (800e2a4 <ADS_W_LaserPattern+0xc0>)
 800e234:	2200      	movs	r2, #0
 800e236:	9300      	str	r3, [sp, #0]
 800e238:	0039      	movs	r1, r7
 800e23a:	2311      	movs	r3, #17
 800e23c:	6868      	ldr	r0, [r5, #4]
 800e23e:	f7f8 fe4b 	bl	8006ed8 <S2PI_TransferFrame>
 800e242:	1e06      	subs	r6, r0, #0
 800e244:	dae4      	bge.n	800e210 <ADS_W_LaserPattern+0x2c>
 800e246:	0002      	movs	r2, r0
 800e248:	7839      	ldrb	r1, [r7, #0]
 800e24a:	4817      	ldr	r0, [pc, #92]	; (800e2a8 <ADS_W_LaserPattern+0xc4>)
 800e24c:	f7f8 ff12 	bl	8007074 <print>
 800e250:	b672      	cpsid	i
 800e252:	6823      	ldr	r3, [r4, #0]
 800e254:	3301      	adds	r3, #1
 800e256:	6023      	str	r3, [r4, #0]
 800e258:	682b      	ldr	r3, [r5, #0]
 800e25a:	2b02      	cmp	r3, #2
 800e25c:	d00e      	beq.n	800e27c <ADS_W_LaserPattern+0x98>
 800e25e:	682b      	ldr	r3, [r5, #0]
 800e260:	2b64      	cmp	r3, #100	; 0x64
 800e262:	d101      	bne.n	800e268 <ADS_W_LaserPattern+0x84>
 800e264:	3303      	adds	r3, #3
 800e266:	602b      	str	r3, [r5, #0]
 800e268:	6823      	ldr	r3, [r4, #0]
 800e26a:	1e5a      	subs	r2, r3, #1
 800e26c:	6022      	str	r2, [r4, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d0ce      	beq.n	800e210 <ADS_W_LaserPattern+0x2c>
 800e272:	b662      	cpsie	i
 800e274:	e7cc      	b.n	800e210 <ADS_W_LaserPattern+0x2c>
 800e276:	2264      	movs	r2, #100	; 0x64
 800e278:	6002      	str	r2, [r0, #0]
 800e27a:	e7d0      	b.n	800e21e <ADS_W_LaserPattern+0x3a>
 800e27c:	2200      	movs	r2, #0
 800e27e:	68ab      	ldr	r3, [r5, #8]
 800e280:	602a      	str	r2, [r5, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d0f0      	beq.n	800e268 <ADS_W_LaserPattern+0x84>
 800e286:	60aa      	str	r2, [r5, #8]
 800e288:	6822      	ldr	r2, [r4, #0]
 800e28a:	1e51      	subs	r1, r2, #1
 800e28c:	6021      	str	r1, [r4, #0]
 800e28e:	2a00      	cmp	r2, #0
 800e290:	d000      	beq.n	800e294 <ADS_W_LaserPattern+0xb0>
 800e292:	b662      	cpsie	i
 800e294:	68e9      	ldr	r1, [r5, #12]
 800e296:	2000      	movs	r0, #0
 800e298:	4798      	blx	r3
 800e29a:	0006      	movs	r6, r0
 800e29c:	e7b8      	b.n	800e210 <ADS_W_LaserPattern+0x2c>
 800e29e:	46c0      	nop			; (mov r8, r8)
 800e2a0:	20005268 	.word	0x20005268
 800e2a4:	0800ddd9 	.word	0x0800ddd9
 800e2a8:	08012b84 	.word	0x08012b84

0800e2ac <ADS_W_CorrelationPattern>:
 800e2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ae:	000f      	movs	r7, r1
 800e2b0:	2106      	movs	r1, #6
 800e2b2:	4311      	orrs	r1, r2
 800e2b4:	b083      	sub	sp, #12
 800e2b6:	0005      	movs	r5, r0
 800e2b8:	7039      	strb	r1, [r7, #0]
 800e2ba:	b672      	cpsid	i
 800e2bc:	4c2a      	ldr	r4, [pc, #168]	; (800e368 <ADS_W_CorrelationPattern+0xbc>)
 800e2be:	6821      	ldr	r1, [r4, #0]
 800e2c0:	3101      	adds	r1, #1
 800e2c2:	6021      	str	r1, [r4, #0]
 800e2c4:	6801      	ldr	r1, [r0, #0]
 800e2c6:	2900      	cmp	r1, #0
 800e2c8:	d009      	beq.n	800e2de <ADS_W_CorrelationPattern+0x32>
 800e2ca:	6823      	ldr	r3, [r4, #0]
 800e2cc:	1e5a      	subs	r2, r3, #1
 800e2ce:	6022      	str	r2, [r4, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d000      	beq.n	800e2d6 <ADS_W_CorrelationPattern+0x2a>
 800e2d4:	b662      	cpsie	i
 800e2d6:	682e      	ldr	r6, [r5, #0]
 800e2d8:	0030      	movs	r0, r6
 800e2da:	b003      	add	sp, #12
 800e2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2de:	2a00      	cmp	r2, #0
 800e2e0:	d12d      	bne.n	800e33e <ADS_W_CorrelationPattern+0x92>
 800e2e2:	2202      	movs	r2, #2
 800e2e4:	6002      	str	r2, [r0, #0]
 800e2e6:	6822      	ldr	r2, [r4, #0]
 800e2e8:	1e51      	subs	r1, r2, #1
 800e2ea:	6021      	str	r1, [r4, #0]
 800e2ec:	2a00      	cmp	r2, #0
 800e2ee:	d000      	beq.n	800e2f2 <ADS_W_CorrelationPattern+0x46>
 800e2f0:	b662      	cpsie	i
 800e2f2:	60ab      	str	r3, [r5, #8]
 800e2f4:	9b08      	ldr	r3, [sp, #32]
 800e2f6:	9501      	str	r5, [sp, #4]
 800e2f8:	60eb      	str	r3, [r5, #12]
 800e2fa:	4b1c      	ldr	r3, [pc, #112]	; (800e36c <ADS_W_CorrelationPattern+0xc0>)
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	0039      	movs	r1, r7
 800e302:	2321      	movs	r3, #33	; 0x21
 800e304:	6868      	ldr	r0, [r5, #4]
 800e306:	f7f8 fde7 	bl	8006ed8 <S2PI_TransferFrame>
 800e30a:	1e06      	subs	r6, r0, #0
 800e30c:	dae4      	bge.n	800e2d8 <ADS_W_CorrelationPattern+0x2c>
 800e30e:	0002      	movs	r2, r0
 800e310:	7839      	ldrb	r1, [r7, #0]
 800e312:	4817      	ldr	r0, [pc, #92]	; (800e370 <ADS_W_CorrelationPattern+0xc4>)
 800e314:	f7f8 feae 	bl	8007074 <print>
 800e318:	b672      	cpsid	i
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	3301      	adds	r3, #1
 800e31e:	6023      	str	r3, [r4, #0]
 800e320:	682b      	ldr	r3, [r5, #0]
 800e322:	2b02      	cmp	r3, #2
 800e324:	d00e      	beq.n	800e344 <ADS_W_CorrelationPattern+0x98>
 800e326:	682b      	ldr	r3, [r5, #0]
 800e328:	2b64      	cmp	r3, #100	; 0x64
 800e32a:	d101      	bne.n	800e330 <ADS_W_CorrelationPattern+0x84>
 800e32c:	3303      	adds	r3, #3
 800e32e:	602b      	str	r3, [r5, #0]
 800e330:	6823      	ldr	r3, [r4, #0]
 800e332:	1e5a      	subs	r2, r3, #1
 800e334:	6022      	str	r2, [r4, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d0ce      	beq.n	800e2d8 <ADS_W_CorrelationPattern+0x2c>
 800e33a:	b662      	cpsie	i
 800e33c:	e7cc      	b.n	800e2d8 <ADS_W_CorrelationPattern+0x2c>
 800e33e:	2264      	movs	r2, #100	; 0x64
 800e340:	6002      	str	r2, [r0, #0]
 800e342:	e7d0      	b.n	800e2e6 <ADS_W_CorrelationPattern+0x3a>
 800e344:	2200      	movs	r2, #0
 800e346:	68ab      	ldr	r3, [r5, #8]
 800e348:	602a      	str	r2, [r5, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d0f0      	beq.n	800e330 <ADS_W_CorrelationPattern+0x84>
 800e34e:	60aa      	str	r2, [r5, #8]
 800e350:	6822      	ldr	r2, [r4, #0]
 800e352:	1e51      	subs	r1, r2, #1
 800e354:	6021      	str	r1, [r4, #0]
 800e356:	2a00      	cmp	r2, #0
 800e358:	d000      	beq.n	800e35c <ADS_W_CorrelationPattern+0xb0>
 800e35a:	b662      	cpsie	i
 800e35c:	68e9      	ldr	r1, [r5, #12]
 800e35e:	2000      	movs	r0, #0
 800e360:	4798      	blx	r3
 800e362:	0006      	movs	r6, r0
 800e364:	e7b8      	b.n	800e2d8 <ADS_W_CorrelationPattern+0x2c>
 800e366:	46c0      	nop			; (mov r8, r8)
 800e368:	20005268 	.word	0x20005268
 800e36c:	0800ddd9 	.word	0x0800ddd9
 800e370:	08012b84 	.word	0x08012b84

0800e374 <ADS_W_SequenceCounter>:
 800e374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e376:	000f      	movs	r7, r1
 800e378:	2108      	movs	r1, #8
 800e37a:	4311      	orrs	r1, r2
 800e37c:	b083      	sub	sp, #12
 800e37e:	0005      	movs	r5, r0
 800e380:	7039      	strb	r1, [r7, #0]
 800e382:	b672      	cpsid	i
 800e384:	4c2a      	ldr	r4, [pc, #168]	; (800e430 <ADS_W_SequenceCounter+0xbc>)
 800e386:	6821      	ldr	r1, [r4, #0]
 800e388:	3101      	adds	r1, #1
 800e38a:	6021      	str	r1, [r4, #0]
 800e38c:	6801      	ldr	r1, [r0, #0]
 800e38e:	2900      	cmp	r1, #0
 800e390:	d009      	beq.n	800e3a6 <ADS_W_SequenceCounter+0x32>
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	1e5a      	subs	r2, r3, #1
 800e396:	6022      	str	r2, [r4, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d000      	beq.n	800e39e <ADS_W_SequenceCounter+0x2a>
 800e39c:	b662      	cpsie	i
 800e39e:	682e      	ldr	r6, [r5, #0]
 800e3a0:	0030      	movs	r0, r6
 800e3a2:	b003      	add	sp, #12
 800e3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a6:	2a00      	cmp	r2, #0
 800e3a8:	d12d      	bne.n	800e406 <ADS_W_SequenceCounter+0x92>
 800e3aa:	2202      	movs	r2, #2
 800e3ac:	6002      	str	r2, [r0, #0]
 800e3ae:	6822      	ldr	r2, [r4, #0]
 800e3b0:	1e51      	subs	r1, r2, #1
 800e3b2:	6021      	str	r1, [r4, #0]
 800e3b4:	2a00      	cmp	r2, #0
 800e3b6:	d000      	beq.n	800e3ba <ADS_W_SequenceCounter+0x46>
 800e3b8:	b662      	cpsie	i
 800e3ba:	60ab      	str	r3, [r5, #8]
 800e3bc:	9b08      	ldr	r3, [sp, #32]
 800e3be:	9501      	str	r5, [sp, #4]
 800e3c0:	60eb      	str	r3, [r5, #12]
 800e3c2:	4b1c      	ldr	r3, [pc, #112]	; (800e434 <ADS_W_SequenceCounter+0xc0>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	0039      	movs	r1, r7
 800e3ca:	2304      	movs	r3, #4
 800e3cc:	6868      	ldr	r0, [r5, #4]
 800e3ce:	f7f8 fd83 	bl	8006ed8 <S2PI_TransferFrame>
 800e3d2:	1e06      	subs	r6, r0, #0
 800e3d4:	dae4      	bge.n	800e3a0 <ADS_W_SequenceCounter+0x2c>
 800e3d6:	0002      	movs	r2, r0
 800e3d8:	7839      	ldrb	r1, [r7, #0]
 800e3da:	4817      	ldr	r0, [pc, #92]	; (800e438 <ADS_W_SequenceCounter+0xc4>)
 800e3dc:	f7f8 fe4a 	bl	8007074 <print>
 800e3e0:	b672      	cpsid	i
 800e3e2:	6823      	ldr	r3, [r4, #0]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	6023      	str	r3, [r4, #0]
 800e3e8:	682b      	ldr	r3, [r5, #0]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d00e      	beq.n	800e40c <ADS_W_SequenceCounter+0x98>
 800e3ee:	682b      	ldr	r3, [r5, #0]
 800e3f0:	2b64      	cmp	r3, #100	; 0x64
 800e3f2:	d101      	bne.n	800e3f8 <ADS_W_SequenceCounter+0x84>
 800e3f4:	3303      	adds	r3, #3
 800e3f6:	602b      	str	r3, [r5, #0]
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	1e5a      	subs	r2, r3, #1
 800e3fc:	6022      	str	r2, [r4, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d0ce      	beq.n	800e3a0 <ADS_W_SequenceCounter+0x2c>
 800e402:	b662      	cpsie	i
 800e404:	e7cc      	b.n	800e3a0 <ADS_W_SequenceCounter+0x2c>
 800e406:	2264      	movs	r2, #100	; 0x64
 800e408:	6002      	str	r2, [r0, #0]
 800e40a:	e7d0      	b.n	800e3ae <ADS_W_SequenceCounter+0x3a>
 800e40c:	2200      	movs	r2, #0
 800e40e:	68ab      	ldr	r3, [r5, #8]
 800e410:	602a      	str	r2, [r5, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d0f0      	beq.n	800e3f8 <ADS_W_SequenceCounter+0x84>
 800e416:	60aa      	str	r2, [r5, #8]
 800e418:	6822      	ldr	r2, [r4, #0]
 800e41a:	1e51      	subs	r1, r2, #1
 800e41c:	6021      	str	r1, [r4, #0]
 800e41e:	2a00      	cmp	r2, #0
 800e420:	d000      	beq.n	800e424 <ADS_W_SequenceCounter+0xb0>
 800e422:	b662      	cpsie	i
 800e424:	68e9      	ldr	r1, [r5, #12]
 800e426:	2000      	movs	r0, #0
 800e428:	4798      	blx	r3
 800e42a:	0006      	movs	r6, r0
 800e42c:	e7b8      	b.n	800e3a0 <ADS_W_SequenceCounter+0x2c>
 800e42e:	46c0      	nop			; (mov r8, r8)
 800e430:	20005268 	.word	0x20005268
 800e434:	0800ddd9 	.word	0x0800ddd9
 800e438:	08012b84 	.word	0x08012b84

0800e43c <ADS_W_AnalogSetup>:
 800e43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e43e:	000f      	movs	r7, r1
 800e440:	210a      	movs	r1, #10
 800e442:	4311      	orrs	r1, r2
 800e444:	b083      	sub	sp, #12
 800e446:	0005      	movs	r5, r0
 800e448:	7039      	strb	r1, [r7, #0]
 800e44a:	b672      	cpsid	i
 800e44c:	4c2a      	ldr	r4, [pc, #168]	; (800e4f8 <ADS_W_AnalogSetup+0xbc>)
 800e44e:	6821      	ldr	r1, [r4, #0]
 800e450:	3101      	adds	r1, #1
 800e452:	6021      	str	r1, [r4, #0]
 800e454:	6801      	ldr	r1, [r0, #0]
 800e456:	2900      	cmp	r1, #0
 800e458:	d009      	beq.n	800e46e <ADS_W_AnalogSetup+0x32>
 800e45a:	6823      	ldr	r3, [r4, #0]
 800e45c:	1e5a      	subs	r2, r3, #1
 800e45e:	6022      	str	r2, [r4, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d000      	beq.n	800e466 <ADS_W_AnalogSetup+0x2a>
 800e464:	b662      	cpsie	i
 800e466:	682e      	ldr	r6, [r5, #0]
 800e468:	0030      	movs	r0, r6
 800e46a:	b003      	add	sp, #12
 800e46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e46e:	2a00      	cmp	r2, #0
 800e470:	d12d      	bne.n	800e4ce <ADS_W_AnalogSetup+0x92>
 800e472:	2202      	movs	r2, #2
 800e474:	6002      	str	r2, [r0, #0]
 800e476:	6822      	ldr	r2, [r4, #0]
 800e478:	1e51      	subs	r1, r2, #1
 800e47a:	6021      	str	r1, [r4, #0]
 800e47c:	2a00      	cmp	r2, #0
 800e47e:	d000      	beq.n	800e482 <ADS_W_AnalogSetup+0x46>
 800e480:	b662      	cpsie	i
 800e482:	60ab      	str	r3, [r5, #8]
 800e484:	9b08      	ldr	r3, [sp, #32]
 800e486:	9501      	str	r5, [sp, #4]
 800e488:	60eb      	str	r3, [r5, #12]
 800e48a:	4b1c      	ldr	r3, [pc, #112]	; (800e4fc <ADS_W_AnalogSetup+0xc0>)
 800e48c:	2200      	movs	r2, #0
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	0039      	movs	r1, r7
 800e492:	2305      	movs	r3, #5
 800e494:	6868      	ldr	r0, [r5, #4]
 800e496:	f7f8 fd1f 	bl	8006ed8 <S2PI_TransferFrame>
 800e49a:	1e06      	subs	r6, r0, #0
 800e49c:	dae4      	bge.n	800e468 <ADS_W_AnalogSetup+0x2c>
 800e49e:	0002      	movs	r2, r0
 800e4a0:	7839      	ldrb	r1, [r7, #0]
 800e4a2:	4817      	ldr	r0, [pc, #92]	; (800e500 <ADS_W_AnalogSetup+0xc4>)
 800e4a4:	f7f8 fde6 	bl	8007074 <print>
 800e4a8:	b672      	cpsid	i
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	6023      	str	r3, [r4, #0]
 800e4b0:	682b      	ldr	r3, [r5, #0]
 800e4b2:	2b02      	cmp	r3, #2
 800e4b4:	d00e      	beq.n	800e4d4 <ADS_W_AnalogSetup+0x98>
 800e4b6:	682b      	ldr	r3, [r5, #0]
 800e4b8:	2b64      	cmp	r3, #100	; 0x64
 800e4ba:	d101      	bne.n	800e4c0 <ADS_W_AnalogSetup+0x84>
 800e4bc:	3303      	adds	r3, #3
 800e4be:	602b      	str	r3, [r5, #0]
 800e4c0:	6823      	ldr	r3, [r4, #0]
 800e4c2:	1e5a      	subs	r2, r3, #1
 800e4c4:	6022      	str	r2, [r4, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d0ce      	beq.n	800e468 <ADS_W_AnalogSetup+0x2c>
 800e4ca:	b662      	cpsie	i
 800e4cc:	e7cc      	b.n	800e468 <ADS_W_AnalogSetup+0x2c>
 800e4ce:	2264      	movs	r2, #100	; 0x64
 800e4d0:	6002      	str	r2, [r0, #0]
 800e4d2:	e7d0      	b.n	800e476 <ADS_W_AnalogSetup+0x3a>
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	68ab      	ldr	r3, [r5, #8]
 800e4d8:	602a      	str	r2, [r5, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d0f0      	beq.n	800e4c0 <ADS_W_AnalogSetup+0x84>
 800e4de:	60aa      	str	r2, [r5, #8]
 800e4e0:	6822      	ldr	r2, [r4, #0]
 800e4e2:	1e51      	subs	r1, r2, #1
 800e4e4:	6021      	str	r1, [r4, #0]
 800e4e6:	2a00      	cmp	r2, #0
 800e4e8:	d000      	beq.n	800e4ec <ADS_W_AnalogSetup+0xb0>
 800e4ea:	b662      	cpsie	i
 800e4ec:	68e9      	ldr	r1, [r5, #12]
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	4798      	blx	r3
 800e4f2:	0006      	movs	r6, r0
 800e4f4:	e7b8      	b.n	800e468 <ADS_W_AnalogSetup+0x2c>
 800e4f6:	46c0      	nop			; (mov r8, r8)
 800e4f8:	20005268 	.word	0x20005268
 800e4fc:	0800ddd9 	.word	0x0800ddd9
 800e500:	08012b84 	.word	0x08012b84

0800e504 <ADS_W_LaserSetup>:
 800e504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e506:	000f      	movs	r7, r1
 800e508:	210c      	movs	r1, #12
 800e50a:	4311      	orrs	r1, r2
 800e50c:	b083      	sub	sp, #12
 800e50e:	0005      	movs	r5, r0
 800e510:	7039      	strb	r1, [r7, #0]
 800e512:	b672      	cpsid	i
 800e514:	4c2a      	ldr	r4, [pc, #168]	; (800e5c0 <ADS_W_LaserSetup+0xbc>)
 800e516:	6821      	ldr	r1, [r4, #0]
 800e518:	3101      	adds	r1, #1
 800e51a:	6021      	str	r1, [r4, #0]
 800e51c:	6801      	ldr	r1, [r0, #0]
 800e51e:	2900      	cmp	r1, #0
 800e520:	d009      	beq.n	800e536 <ADS_W_LaserSetup+0x32>
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	1e5a      	subs	r2, r3, #1
 800e526:	6022      	str	r2, [r4, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d000      	beq.n	800e52e <ADS_W_LaserSetup+0x2a>
 800e52c:	b662      	cpsie	i
 800e52e:	682e      	ldr	r6, [r5, #0]
 800e530:	0030      	movs	r0, r6
 800e532:	b003      	add	sp, #12
 800e534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e536:	2a00      	cmp	r2, #0
 800e538:	d12d      	bne.n	800e596 <ADS_W_LaserSetup+0x92>
 800e53a:	2202      	movs	r2, #2
 800e53c:	6002      	str	r2, [r0, #0]
 800e53e:	6822      	ldr	r2, [r4, #0]
 800e540:	1e51      	subs	r1, r2, #1
 800e542:	6021      	str	r1, [r4, #0]
 800e544:	2a00      	cmp	r2, #0
 800e546:	d000      	beq.n	800e54a <ADS_W_LaserSetup+0x46>
 800e548:	b662      	cpsie	i
 800e54a:	60ab      	str	r3, [r5, #8]
 800e54c:	9b08      	ldr	r3, [sp, #32]
 800e54e:	9501      	str	r5, [sp, #4]
 800e550:	60eb      	str	r3, [r5, #12]
 800e552:	4b1c      	ldr	r3, [pc, #112]	; (800e5c4 <ADS_W_LaserSetup+0xc0>)
 800e554:	2200      	movs	r2, #0
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	0039      	movs	r1, r7
 800e55a:	2304      	movs	r3, #4
 800e55c:	6868      	ldr	r0, [r5, #4]
 800e55e:	f7f8 fcbb 	bl	8006ed8 <S2PI_TransferFrame>
 800e562:	1e06      	subs	r6, r0, #0
 800e564:	dae4      	bge.n	800e530 <ADS_W_LaserSetup+0x2c>
 800e566:	0002      	movs	r2, r0
 800e568:	7839      	ldrb	r1, [r7, #0]
 800e56a:	4817      	ldr	r0, [pc, #92]	; (800e5c8 <ADS_W_LaserSetup+0xc4>)
 800e56c:	f7f8 fd82 	bl	8007074 <print>
 800e570:	b672      	cpsid	i
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	3301      	adds	r3, #1
 800e576:	6023      	str	r3, [r4, #0]
 800e578:	682b      	ldr	r3, [r5, #0]
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	d00e      	beq.n	800e59c <ADS_W_LaserSetup+0x98>
 800e57e:	682b      	ldr	r3, [r5, #0]
 800e580:	2b64      	cmp	r3, #100	; 0x64
 800e582:	d101      	bne.n	800e588 <ADS_W_LaserSetup+0x84>
 800e584:	3303      	adds	r3, #3
 800e586:	602b      	str	r3, [r5, #0]
 800e588:	6823      	ldr	r3, [r4, #0]
 800e58a:	1e5a      	subs	r2, r3, #1
 800e58c:	6022      	str	r2, [r4, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d0ce      	beq.n	800e530 <ADS_W_LaserSetup+0x2c>
 800e592:	b662      	cpsie	i
 800e594:	e7cc      	b.n	800e530 <ADS_W_LaserSetup+0x2c>
 800e596:	2264      	movs	r2, #100	; 0x64
 800e598:	6002      	str	r2, [r0, #0]
 800e59a:	e7d0      	b.n	800e53e <ADS_W_LaserSetup+0x3a>
 800e59c:	2200      	movs	r2, #0
 800e59e:	68ab      	ldr	r3, [r5, #8]
 800e5a0:	602a      	str	r2, [r5, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0f0      	beq.n	800e588 <ADS_W_LaserSetup+0x84>
 800e5a6:	60aa      	str	r2, [r5, #8]
 800e5a8:	6822      	ldr	r2, [r4, #0]
 800e5aa:	1e51      	subs	r1, r2, #1
 800e5ac:	6021      	str	r1, [r4, #0]
 800e5ae:	2a00      	cmp	r2, #0
 800e5b0:	d000      	beq.n	800e5b4 <ADS_W_LaserSetup+0xb0>
 800e5b2:	b662      	cpsie	i
 800e5b4:	68e9      	ldr	r1, [r5, #12]
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	4798      	blx	r3
 800e5ba:	0006      	movs	r6, r0
 800e5bc:	e7b8      	b.n	800e530 <ADS_W_LaserSetup+0x2c>
 800e5be:	46c0      	nop			; (mov r8, r8)
 800e5c0:	20005268 	.word	0x20005268
 800e5c4:	0800ddd9 	.word	0x0800ddd9
 800e5c8:	08012b84 	.word	0x08012b84

0800e5cc <ADS_W_PixelSetup>:
 800e5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ce:	000f      	movs	r7, r1
 800e5d0:	210e      	movs	r1, #14
 800e5d2:	4311      	orrs	r1, r2
 800e5d4:	b083      	sub	sp, #12
 800e5d6:	0005      	movs	r5, r0
 800e5d8:	7039      	strb	r1, [r7, #0]
 800e5da:	b672      	cpsid	i
 800e5dc:	4c2a      	ldr	r4, [pc, #168]	; (800e688 <ADS_W_PixelSetup+0xbc>)
 800e5de:	6821      	ldr	r1, [r4, #0]
 800e5e0:	3101      	adds	r1, #1
 800e5e2:	6021      	str	r1, [r4, #0]
 800e5e4:	6801      	ldr	r1, [r0, #0]
 800e5e6:	2900      	cmp	r1, #0
 800e5e8:	d009      	beq.n	800e5fe <ADS_W_PixelSetup+0x32>
 800e5ea:	6823      	ldr	r3, [r4, #0]
 800e5ec:	1e5a      	subs	r2, r3, #1
 800e5ee:	6022      	str	r2, [r4, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d000      	beq.n	800e5f6 <ADS_W_PixelSetup+0x2a>
 800e5f4:	b662      	cpsie	i
 800e5f6:	682e      	ldr	r6, [r5, #0]
 800e5f8:	0030      	movs	r0, r6
 800e5fa:	b003      	add	sp, #12
 800e5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5fe:	2a00      	cmp	r2, #0
 800e600:	d12d      	bne.n	800e65e <ADS_W_PixelSetup+0x92>
 800e602:	2202      	movs	r2, #2
 800e604:	6002      	str	r2, [r0, #0]
 800e606:	6822      	ldr	r2, [r4, #0]
 800e608:	1e51      	subs	r1, r2, #1
 800e60a:	6021      	str	r1, [r4, #0]
 800e60c:	2a00      	cmp	r2, #0
 800e60e:	d000      	beq.n	800e612 <ADS_W_PixelSetup+0x46>
 800e610:	b662      	cpsie	i
 800e612:	60ab      	str	r3, [r5, #8]
 800e614:	9b08      	ldr	r3, [sp, #32]
 800e616:	9501      	str	r5, [sp, #4]
 800e618:	60eb      	str	r3, [r5, #12]
 800e61a:	4b1c      	ldr	r3, [pc, #112]	; (800e68c <ADS_W_PixelSetup+0xc0>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	9300      	str	r3, [sp, #0]
 800e620:	0039      	movs	r1, r7
 800e622:	2303      	movs	r3, #3
 800e624:	6868      	ldr	r0, [r5, #4]
 800e626:	f7f8 fc57 	bl	8006ed8 <S2PI_TransferFrame>
 800e62a:	1e06      	subs	r6, r0, #0
 800e62c:	dae4      	bge.n	800e5f8 <ADS_W_PixelSetup+0x2c>
 800e62e:	0002      	movs	r2, r0
 800e630:	7839      	ldrb	r1, [r7, #0]
 800e632:	4817      	ldr	r0, [pc, #92]	; (800e690 <ADS_W_PixelSetup+0xc4>)
 800e634:	f7f8 fd1e 	bl	8007074 <print>
 800e638:	b672      	cpsid	i
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	3301      	adds	r3, #1
 800e63e:	6023      	str	r3, [r4, #0]
 800e640:	682b      	ldr	r3, [r5, #0]
 800e642:	2b02      	cmp	r3, #2
 800e644:	d00e      	beq.n	800e664 <ADS_W_PixelSetup+0x98>
 800e646:	682b      	ldr	r3, [r5, #0]
 800e648:	2b64      	cmp	r3, #100	; 0x64
 800e64a:	d101      	bne.n	800e650 <ADS_W_PixelSetup+0x84>
 800e64c:	3303      	adds	r3, #3
 800e64e:	602b      	str	r3, [r5, #0]
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	1e5a      	subs	r2, r3, #1
 800e654:	6022      	str	r2, [r4, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d0ce      	beq.n	800e5f8 <ADS_W_PixelSetup+0x2c>
 800e65a:	b662      	cpsie	i
 800e65c:	e7cc      	b.n	800e5f8 <ADS_W_PixelSetup+0x2c>
 800e65e:	2264      	movs	r2, #100	; 0x64
 800e660:	6002      	str	r2, [r0, #0]
 800e662:	e7d0      	b.n	800e606 <ADS_W_PixelSetup+0x3a>
 800e664:	2200      	movs	r2, #0
 800e666:	68ab      	ldr	r3, [r5, #8]
 800e668:	602a      	str	r2, [r5, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d0f0      	beq.n	800e650 <ADS_W_PixelSetup+0x84>
 800e66e:	60aa      	str	r2, [r5, #8]
 800e670:	6822      	ldr	r2, [r4, #0]
 800e672:	1e51      	subs	r1, r2, #1
 800e674:	6021      	str	r1, [r4, #0]
 800e676:	2a00      	cmp	r2, #0
 800e678:	d000      	beq.n	800e67c <ADS_W_PixelSetup+0xb0>
 800e67a:	b662      	cpsie	i
 800e67c:	68e9      	ldr	r1, [r5, #12]
 800e67e:	2000      	movs	r0, #0
 800e680:	4798      	blx	r3
 800e682:	0006      	movs	r6, r0
 800e684:	e7b8      	b.n	800e5f8 <ADS_W_PixelSetup+0x2c>
 800e686:	46c0      	nop			; (mov r8, r8)
 800e688:	20005268 	.word	0x20005268
 800e68c:	0800ddd9 	.word	0x0800ddd9
 800e690:	08012b84 	.word	0x08012b84

0800e694 <ADS_W_BlockEnable>:
 800e694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e696:	000f      	movs	r7, r1
 800e698:	2110      	movs	r1, #16
 800e69a:	4311      	orrs	r1, r2
 800e69c:	b083      	sub	sp, #12
 800e69e:	0005      	movs	r5, r0
 800e6a0:	7039      	strb	r1, [r7, #0]
 800e6a2:	b672      	cpsid	i
 800e6a4:	4c2a      	ldr	r4, [pc, #168]	; (800e750 <ADS_W_BlockEnable+0xbc>)
 800e6a6:	6821      	ldr	r1, [r4, #0]
 800e6a8:	3101      	adds	r1, #1
 800e6aa:	6021      	str	r1, [r4, #0]
 800e6ac:	6801      	ldr	r1, [r0, #0]
 800e6ae:	2900      	cmp	r1, #0
 800e6b0:	d009      	beq.n	800e6c6 <ADS_W_BlockEnable+0x32>
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	1e5a      	subs	r2, r3, #1
 800e6b6:	6022      	str	r2, [r4, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d000      	beq.n	800e6be <ADS_W_BlockEnable+0x2a>
 800e6bc:	b662      	cpsie	i
 800e6be:	682e      	ldr	r6, [r5, #0]
 800e6c0:	0030      	movs	r0, r6
 800e6c2:	b003      	add	sp, #12
 800e6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6c6:	2a00      	cmp	r2, #0
 800e6c8:	d12d      	bne.n	800e726 <ADS_W_BlockEnable+0x92>
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	6002      	str	r2, [r0, #0]
 800e6ce:	6822      	ldr	r2, [r4, #0]
 800e6d0:	1e51      	subs	r1, r2, #1
 800e6d2:	6021      	str	r1, [r4, #0]
 800e6d4:	2a00      	cmp	r2, #0
 800e6d6:	d000      	beq.n	800e6da <ADS_W_BlockEnable+0x46>
 800e6d8:	b662      	cpsie	i
 800e6da:	60ab      	str	r3, [r5, #8]
 800e6dc:	9b08      	ldr	r3, [sp, #32]
 800e6de:	9501      	str	r5, [sp, #4]
 800e6e0:	60eb      	str	r3, [r5, #12]
 800e6e2:	4b1c      	ldr	r3, [pc, #112]	; (800e754 <ADS_W_BlockEnable+0xc0>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	0039      	movs	r1, r7
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	6868      	ldr	r0, [r5, #4]
 800e6ee:	f7f8 fbf3 	bl	8006ed8 <S2PI_TransferFrame>
 800e6f2:	1e06      	subs	r6, r0, #0
 800e6f4:	dae4      	bge.n	800e6c0 <ADS_W_BlockEnable+0x2c>
 800e6f6:	0002      	movs	r2, r0
 800e6f8:	7839      	ldrb	r1, [r7, #0]
 800e6fa:	4817      	ldr	r0, [pc, #92]	; (800e758 <ADS_W_BlockEnable+0xc4>)
 800e6fc:	f7f8 fcba 	bl	8007074 <print>
 800e700:	b672      	cpsid	i
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	3301      	adds	r3, #1
 800e706:	6023      	str	r3, [r4, #0]
 800e708:	682b      	ldr	r3, [r5, #0]
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d00e      	beq.n	800e72c <ADS_W_BlockEnable+0x98>
 800e70e:	682b      	ldr	r3, [r5, #0]
 800e710:	2b64      	cmp	r3, #100	; 0x64
 800e712:	d101      	bne.n	800e718 <ADS_W_BlockEnable+0x84>
 800e714:	3303      	adds	r3, #3
 800e716:	602b      	str	r3, [r5, #0]
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	1e5a      	subs	r2, r3, #1
 800e71c:	6022      	str	r2, [r4, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d0ce      	beq.n	800e6c0 <ADS_W_BlockEnable+0x2c>
 800e722:	b662      	cpsie	i
 800e724:	e7cc      	b.n	800e6c0 <ADS_W_BlockEnable+0x2c>
 800e726:	2264      	movs	r2, #100	; 0x64
 800e728:	6002      	str	r2, [r0, #0]
 800e72a:	e7d0      	b.n	800e6ce <ADS_W_BlockEnable+0x3a>
 800e72c:	2200      	movs	r2, #0
 800e72e:	68ab      	ldr	r3, [r5, #8]
 800e730:	602a      	str	r2, [r5, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d0f0      	beq.n	800e718 <ADS_W_BlockEnable+0x84>
 800e736:	60aa      	str	r2, [r5, #8]
 800e738:	6822      	ldr	r2, [r4, #0]
 800e73a:	1e51      	subs	r1, r2, #1
 800e73c:	6021      	str	r1, [r4, #0]
 800e73e:	2a00      	cmp	r2, #0
 800e740:	d000      	beq.n	800e744 <ADS_W_BlockEnable+0xb0>
 800e742:	b662      	cpsie	i
 800e744:	68e9      	ldr	r1, [r5, #12]
 800e746:	2000      	movs	r0, #0
 800e748:	4798      	blx	r3
 800e74a:	0006      	movs	r6, r0
 800e74c:	e7b8      	b.n	800e6c0 <ADS_W_BlockEnable+0x2c>
 800e74e:	46c0      	nop			; (mov r8, r8)
 800e750:	20005268 	.word	0x20005268
 800e754:	0800ddd9 	.word	0x0800ddd9
 800e758:	08012b84 	.word	0x08012b84

0800e75c <ADS_W_DeviceConfig>:
 800e75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e75e:	000f      	movs	r7, r1
 800e760:	2112      	movs	r1, #18
 800e762:	4311      	orrs	r1, r2
 800e764:	b083      	sub	sp, #12
 800e766:	0005      	movs	r5, r0
 800e768:	7039      	strb	r1, [r7, #0]
 800e76a:	b672      	cpsid	i
 800e76c:	4c2a      	ldr	r4, [pc, #168]	; (800e818 <ADS_W_DeviceConfig+0xbc>)
 800e76e:	6821      	ldr	r1, [r4, #0]
 800e770:	3101      	adds	r1, #1
 800e772:	6021      	str	r1, [r4, #0]
 800e774:	6801      	ldr	r1, [r0, #0]
 800e776:	2900      	cmp	r1, #0
 800e778:	d009      	beq.n	800e78e <ADS_W_DeviceConfig+0x32>
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	1e5a      	subs	r2, r3, #1
 800e77e:	6022      	str	r2, [r4, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d000      	beq.n	800e786 <ADS_W_DeviceConfig+0x2a>
 800e784:	b662      	cpsie	i
 800e786:	682e      	ldr	r6, [r5, #0]
 800e788:	0030      	movs	r0, r6
 800e78a:	b003      	add	sp, #12
 800e78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e78e:	2a00      	cmp	r2, #0
 800e790:	d12d      	bne.n	800e7ee <ADS_W_DeviceConfig+0x92>
 800e792:	2202      	movs	r2, #2
 800e794:	6002      	str	r2, [r0, #0]
 800e796:	6822      	ldr	r2, [r4, #0]
 800e798:	1e51      	subs	r1, r2, #1
 800e79a:	6021      	str	r1, [r4, #0]
 800e79c:	2a00      	cmp	r2, #0
 800e79e:	d000      	beq.n	800e7a2 <ADS_W_DeviceConfig+0x46>
 800e7a0:	b662      	cpsie	i
 800e7a2:	60ab      	str	r3, [r5, #8]
 800e7a4:	9b08      	ldr	r3, [sp, #32]
 800e7a6:	9501      	str	r5, [sp, #4]
 800e7a8:	60eb      	str	r3, [r5, #12]
 800e7aa:	4b1c      	ldr	r3, [pc, #112]	; (800e81c <ADS_W_DeviceConfig+0xc0>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	0039      	movs	r1, r7
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	6868      	ldr	r0, [r5, #4]
 800e7b6:	f7f8 fb8f 	bl	8006ed8 <S2PI_TransferFrame>
 800e7ba:	1e06      	subs	r6, r0, #0
 800e7bc:	dae4      	bge.n	800e788 <ADS_W_DeviceConfig+0x2c>
 800e7be:	0002      	movs	r2, r0
 800e7c0:	7839      	ldrb	r1, [r7, #0]
 800e7c2:	4817      	ldr	r0, [pc, #92]	; (800e820 <ADS_W_DeviceConfig+0xc4>)
 800e7c4:	f7f8 fc56 	bl	8007074 <print>
 800e7c8:	b672      	cpsid	i
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	6023      	str	r3, [r4, #0]
 800e7d0:	682b      	ldr	r3, [r5, #0]
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d00e      	beq.n	800e7f4 <ADS_W_DeviceConfig+0x98>
 800e7d6:	682b      	ldr	r3, [r5, #0]
 800e7d8:	2b64      	cmp	r3, #100	; 0x64
 800e7da:	d101      	bne.n	800e7e0 <ADS_W_DeviceConfig+0x84>
 800e7dc:	3303      	adds	r3, #3
 800e7de:	602b      	str	r3, [r5, #0]
 800e7e0:	6823      	ldr	r3, [r4, #0]
 800e7e2:	1e5a      	subs	r2, r3, #1
 800e7e4:	6022      	str	r2, [r4, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d0ce      	beq.n	800e788 <ADS_W_DeviceConfig+0x2c>
 800e7ea:	b662      	cpsie	i
 800e7ec:	e7cc      	b.n	800e788 <ADS_W_DeviceConfig+0x2c>
 800e7ee:	2264      	movs	r2, #100	; 0x64
 800e7f0:	6002      	str	r2, [r0, #0]
 800e7f2:	e7d0      	b.n	800e796 <ADS_W_DeviceConfig+0x3a>
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	68ab      	ldr	r3, [r5, #8]
 800e7f8:	602a      	str	r2, [r5, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d0f0      	beq.n	800e7e0 <ADS_W_DeviceConfig+0x84>
 800e7fe:	60aa      	str	r2, [r5, #8]
 800e800:	6822      	ldr	r2, [r4, #0]
 800e802:	1e51      	subs	r1, r2, #1
 800e804:	6021      	str	r1, [r4, #0]
 800e806:	2a00      	cmp	r2, #0
 800e808:	d000      	beq.n	800e80c <ADS_W_DeviceConfig+0xb0>
 800e80a:	b662      	cpsie	i
 800e80c:	68e9      	ldr	r1, [r5, #12]
 800e80e:	2000      	movs	r0, #0
 800e810:	4798      	blx	r3
 800e812:	0006      	movs	r6, r0
 800e814:	e7b8      	b.n	800e788 <ADS_W_DeviceConfig+0x2c>
 800e816:	46c0      	nop			; (mov r8, r8)
 800e818:	20005268 	.word	0x20005268
 800e81c:	0800ddd9 	.word	0x0800ddd9
 800e820:	08012b84 	.word	0x08012b84

0800e824 <ADS_W_ClockSetup1>:
 800e824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e826:	000f      	movs	r7, r1
 800e828:	2114      	movs	r1, #20
 800e82a:	4311      	orrs	r1, r2
 800e82c:	b083      	sub	sp, #12
 800e82e:	0005      	movs	r5, r0
 800e830:	7039      	strb	r1, [r7, #0]
 800e832:	b672      	cpsid	i
 800e834:	4c2a      	ldr	r4, [pc, #168]	; (800e8e0 <ADS_W_ClockSetup1+0xbc>)
 800e836:	6821      	ldr	r1, [r4, #0]
 800e838:	3101      	adds	r1, #1
 800e83a:	6021      	str	r1, [r4, #0]
 800e83c:	6801      	ldr	r1, [r0, #0]
 800e83e:	2900      	cmp	r1, #0
 800e840:	d009      	beq.n	800e856 <ADS_W_ClockSetup1+0x32>
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	1e5a      	subs	r2, r3, #1
 800e846:	6022      	str	r2, [r4, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d000      	beq.n	800e84e <ADS_W_ClockSetup1+0x2a>
 800e84c:	b662      	cpsie	i
 800e84e:	682e      	ldr	r6, [r5, #0]
 800e850:	0030      	movs	r0, r6
 800e852:	b003      	add	sp, #12
 800e854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e856:	2a00      	cmp	r2, #0
 800e858:	d12d      	bne.n	800e8b6 <ADS_W_ClockSetup1+0x92>
 800e85a:	2202      	movs	r2, #2
 800e85c:	6002      	str	r2, [r0, #0]
 800e85e:	6822      	ldr	r2, [r4, #0]
 800e860:	1e51      	subs	r1, r2, #1
 800e862:	6021      	str	r1, [r4, #0]
 800e864:	2a00      	cmp	r2, #0
 800e866:	d000      	beq.n	800e86a <ADS_W_ClockSetup1+0x46>
 800e868:	b662      	cpsie	i
 800e86a:	60ab      	str	r3, [r5, #8]
 800e86c:	9b08      	ldr	r3, [sp, #32]
 800e86e:	9501      	str	r5, [sp, #4]
 800e870:	60eb      	str	r3, [r5, #12]
 800e872:	4b1c      	ldr	r3, [pc, #112]	; (800e8e4 <ADS_W_ClockSetup1+0xc0>)
 800e874:	2200      	movs	r2, #0
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	0039      	movs	r1, r7
 800e87a:	2304      	movs	r3, #4
 800e87c:	6868      	ldr	r0, [r5, #4]
 800e87e:	f7f8 fb2b 	bl	8006ed8 <S2PI_TransferFrame>
 800e882:	1e06      	subs	r6, r0, #0
 800e884:	dae4      	bge.n	800e850 <ADS_W_ClockSetup1+0x2c>
 800e886:	0002      	movs	r2, r0
 800e888:	7839      	ldrb	r1, [r7, #0]
 800e88a:	4817      	ldr	r0, [pc, #92]	; (800e8e8 <ADS_W_ClockSetup1+0xc4>)
 800e88c:	f7f8 fbf2 	bl	8007074 <print>
 800e890:	b672      	cpsid	i
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	3301      	adds	r3, #1
 800e896:	6023      	str	r3, [r4, #0]
 800e898:	682b      	ldr	r3, [r5, #0]
 800e89a:	2b02      	cmp	r3, #2
 800e89c:	d00e      	beq.n	800e8bc <ADS_W_ClockSetup1+0x98>
 800e89e:	682b      	ldr	r3, [r5, #0]
 800e8a0:	2b64      	cmp	r3, #100	; 0x64
 800e8a2:	d101      	bne.n	800e8a8 <ADS_W_ClockSetup1+0x84>
 800e8a4:	3303      	adds	r3, #3
 800e8a6:	602b      	str	r3, [r5, #0]
 800e8a8:	6823      	ldr	r3, [r4, #0]
 800e8aa:	1e5a      	subs	r2, r3, #1
 800e8ac:	6022      	str	r2, [r4, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d0ce      	beq.n	800e850 <ADS_W_ClockSetup1+0x2c>
 800e8b2:	b662      	cpsie	i
 800e8b4:	e7cc      	b.n	800e850 <ADS_W_ClockSetup1+0x2c>
 800e8b6:	2264      	movs	r2, #100	; 0x64
 800e8b8:	6002      	str	r2, [r0, #0]
 800e8ba:	e7d0      	b.n	800e85e <ADS_W_ClockSetup1+0x3a>
 800e8bc:	2200      	movs	r2, #0
 800e8be:	68ab      	ldr	r3, [r5, #8]
 800e8c0:	602a      	str	r2, [r5, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d0f0      	beq.n	800e8a8 <ADS_W_ClockSetup1+0x84>
 800e8c6:	60aa      	str	r2, [r5, #8]
 800e8c8:	6822      	ldr	r2, [r4, #0]
 800e8ca:	1e51      	subs	r1, r2, #1
 800e8cc:	6021      	str	r1, [r4, #0]
 800e8ce:	2a00      	cmp	r2, #0
 800e8d0:	d000      	beq.n	800e8d4 <ADS_W_ClockSetup1+0xb0>
 800e8d2:	b662      	cpsie	i
 800e8d4:	68e9      	ldr	r1, [r5, #12]
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	4798      	blx	r3
 800e8da:	0006      	movs	r6, r0
 800e8dc:	e7b8      	b.n	800e850 <ADS_W_ClockSetup1+0x2c>
 800e8de:	46c0      	nop			; (mov r8, r8)
 800e8e0:	20005268 	.word	0x20005268
 800e8e4:	0800ddd9 	.word	0x0800ddd9
 800e8e8:	08012b84 	.word	0x08012b84

0800e8ec <ADS_W_ClockSetup2>:
 800e8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ee:	000f      	movs	r7, r1
 800e8f0:	2116      	movs	r1, #22
 800e8f2:	4311      	orrs	r1, r2
 800e8f4:	b083      	sub	sp, #12
 800e8f6:	0005      	movs	r5, r0
 800e8f8:	7039      	strb	r1, [r7, #0]
 800e8fa:	b672      	cpsid	i
 800e8fc:	4c2a      	ldr	r4, [pc, #168]	; (800e9a8 <ADS_W_ClockSetup2+0xbc>)
 800e8fe:	6821      	ldr	r1, [r4, #0]
 800e900:	3101      	adds	r1, #1
 800e902:	6021      	str	r1, [r4, #0]
 800e904:	6801      	ldr	r1, [r0, #0]
 800e906:	2900      	cmp	r1, #0
 800e908:	d009      	beq.n	800e91e <ADS_W_ClockSetup2+0x32>
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	1e5a      	subs	r2, r3, #1
 800e90e:	6022      	str	r2, [r4, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d000      	beq.n	800e916 <ADS_W_ClockSetup2+0x2a>
 800e914:	b662      	cpsie	i
 800e916:	682e      	ldr	r6, [r5, #0]
 800e918:	0030      	movs	r0, r6
 800e91a:	b003      	add	sp, #12
 800e91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e91e:	2a00      	cmp	r2, #0
 800e920:	d12d      	bne.n	800e97e <ADS_W_ClockSetup2+0x92>
 800e922:	2202      	movs	r2, #2
 800e924:	6002      	str	r2, [r0, #0]
 800e926:	6822      	ldr	r2, [r4, #0]
 800e928:	1e51      	subs	r1, r2, #1
 800e92a:	6021      	str	r1, [r4, #0]
 800e92c:	2a00      	cmp	r2, #0
 800e92e:	d000      	beq.n	800e932 <ADS_W_ClockSetup2+0x46>
 800e930:	b662      	cpsie	i
 800e932:	60ab      	str	r3, [r5, #8]
 800e934:	9b08      	ldr	r3, [sp, #32]
 800e936:	9501      	str	r5, [sp, #4]
 800e938:	60eb      	str	r3, [r5, #12]
 800e93a:	4b1c      	ldr	r3, [pc, #112]	; (800e9ac <ADS_W_ClockSetup2+0xc0>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	0039      	movs	r1, r7
 800e942:	2305      	movs	r3, #5
 800e944:	6868      	ldr	r0, [r5, #4]
 800e946:	f7f8 fac7 	bl	8006ed8 <S2PI_TransferFrame>
 800e94a:	1e06      	subs	r6, r0, #0
 800e94c:	dae4      	bge.n	800e918 <ADS_W_ClockSetup2+0x2c>
 800e94e:	0002      	movs	r2, r0
 800e950:	7839      	ldrb	r1, [r7, #0]
 800e952:	4817      	ldr	r0, [pc, #92]	; (800e9b0 <ADS_W_ClockSetup2+0xc4>)
 800e954:	f7f8 fb8e 	bl	8007074 <print>
 800e958:	b672      	cpsid	i
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	3301      	adds	r3, #1
 800e95e:	6023      	str	r3, [r4, #0]
 800e960:	682b      	ldr	r3, [r5, #0]
 800e962:	2b02      	cmp	r3, #2
 800e964:	d00e      	beq.n	800e984 <ADS_W_ClockSetup2+0x98>
 800e966:	682b      	ldr	r3, [r5, #0]
 800e968:	2b64      	cmp	r3, #100	; 0x64
 800e96a:	d101      	bne.n	800e970 <ADS_W_ClockSetup2+0x84>
 800e96c:	3303      	adds	r3, #3
 800e96e:	602b      	str	r3, [r5, #0]
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	1e5a      	subs	r2, r3, #1
 800e974:	6022      	str	r2, [r4, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d0ce      	beq.n	800e918 <ADS_W_ClockSetup2+0x2c>
 800e97a:	b662      	cpsie	i
 800e97c:	e7cc      	b.n	800e918 <ADS_W_ClockSetup2+0x2c>
 800e97e:	2264      	movs	r2, #100	; 0x64
 800e980:	6002      	str	r2, [r0, #0]
 800e982:	e7d0      	b.n	800e926 <ADS_W_ClockSetup2+0x3a>
 800e984:	2200      	movs	r2, #0
 800e986:	68ab      	ldr	r3, [r5, #8]
 800e988:	602a      	str	r2, [r5, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d0f0      	beq.n	800e970 <ADS_W_ClockSetup2+0x84>
 800e98e:	60aa      	str	r2, [r5, #8]
 800e990:	6822      	ldr	r2, [r4, #0]
 800e992:	1e51      	subs	r1, r2, #1
 800e994:	6021      	str	r1, [r4, #0]
 800e996:	2a00      	cmp	r2, #0
 800e998:	d000      	beq.n	800e99c <ADS_W_ClockSetup2+0xb0>
 800e99a:	b662      	cpsie	i
 800e99c:	68e9      	ldr	r1, [r5, #12]
 800e99e:	2000      	movs	r0, #0
 800e9a0:	4798      	blx	r3
 800e9a2:	0006      	movs	r6, r0
 800e9a4:	e7b8      	b.n	800e918 <ADS_W_ClockSetup2+0x2c>
 800e9a6:	46c0      	nop			; (mov r8, r8)
 800e9a8:	20005268 	.word	0x20005268
 800e9ac:	0800ddd9 	.word	0x0800ddd9
 800e9b0:	08012b84 	.word	0x08012b84

0800e9b4 <ADS_W_ClockSetup3>:
 800e9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9b6:	000f      	movs	r7, r1
 800e9b8:	2118      	movs	r1, #24
 800e9ba:	4311      	orrs	r1, r2
 800e9bc:	b083      	sub	sp, #12
 800e9be:	0005      	movs	r5, r0
 800e9c0:	7039      	strb	r1, [r7, #0]
 800e9c2:	b672      	cpsid	i
 800e9c4:	4c2a      	ldr	r4, [pc, #168]	; (800ea70 <ADS_W_ClockSetup3+0xbc>)
 800e9c6:	6821      	ldr	r1, [r4, #0]
 800e9c8:	3101      	adds	r1, #1
 800e9ca:	6021      	str	r1, [r4, #0]
 800e9cc:	6801      	ldr	r1, [r0, #0]
 800e9ce:	2900      	cmp	r1, #0
 800e9d0:	d009      	beq.n	800e9e6 <ADS_W_ClockSetup3+0x32>
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	1e5a      	subs	r2, r3, #1
 800e9d6:	6022      	str	r2, [r4, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d000      	beq.n	800e9de <ADS_W_ClockSetup3+0x2a>
 800e9dc:	b662      	cpsie	i
 800e9de:	682e      	ldr	r6, [r5, #0]
 800e9e0:	0030      	movs	r0, r6
 800e9e2:	b003      	add	sp, #12
 800e9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9e6:	2a00      	cmp	r2, #0
 800e9e8:	d12d      	bne.n	800ea46 <ADS_W_ClockSetup3+0x92>
 800e9ea:	2202      	movs	r2, #2
 800e9ec:	6002      	str	r2, [r0, #0]
 800e9ee:	6822      	ldr	r2, [r4, #0]
 800e9f0:	1e51      	subs	r1, r2, #1
 800e9f2:	6021      	str	r1, [r4, #0]
 800e9f4:	2a00      	cmp	r2, #0
 800e9f6:	d000      	beq.n	800e9fa <ADS_W_ClockSetup3+0x46>
 800e9f8:	b662      	cpsie	i
 800e9fa:	60ab      	str	r3, [r5, #8]
 800e9fc:	9b08      	ldr	r3, [sp, #32]
 800e9fe:	9501      	str	r5, [sp, #4]
 800ea00:	60eb      	str	r3, [r5, #12]
 800ea02:	4b1c      	ldr	r3, [pc, #112]	; (800ea74 <ADS_W_ClockSetup3+0xc0>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	9300      	str	r3, [sp, #0]
 800ea08:	0039      	movs	r1, r7
 800ea0a:	2304      	movs	r3, #4
 800ea0c:	6868      	ldr	r0, [r5, #4]
 800ea0e:	f7f8 fa63 	bl	8006ed8 <S2PI_TransferFrame>
 800ea12:	1e06      	subs	r6, r0, #0
 800ea14:	dae4      	bge.n	800e9e0 <ADS_W_ClockSetup3+0x2c>
 800ea16:	0002      	movs	r2, r0
 800ea18:	7839      	ldrb	r1, [r7, #0]
 800ea1a:	4817      	ldr	r0, [pc, #92]	; (800ea78 <ADS_W_ClockSetup3+0xc4>)
 800ea1c:	f7f8 fb2a 	bl	8007074 <print>
 800ea20:	b672      	cpsid	i
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	3301      	adds	r3, #1
 800ea26:	6023      	str	r3, [r4, #0]
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d00e      	beq.n	800ea4c <ADS_W_ClockSetup3+0x98>
 800ea2e:	682b      	ldr	r3, [r5, #0]
 800ea30:	2b64      	cmp	r3, #100	; 0x64
 800ea32:	d101      	bne.n	800ea38 <ADS_W_ClockSetup3+0x84>
 800ea34:	3303      	adds	r3, #3
 800ea36:	602b      	str	r3, [r5, #0]
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	1e5a      	subs	r2, r3, #1
 800ea3c:	6022      	str	r2, [r4, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d0ce      	beq.n	800e9e0 <ADS_W_ClockSetup3+0x2c>
 800ea42:	b662      	cpsie	i
 800ea44:	e7cc      	b.n	800e9e0 <ADS_W_ClockSetup3+0x2c>
 800ea46:	2264      	movs	r2, #100	; 0x64
 800ea48:	6002      	str	r2, [r0, #0]
 800ea4a:	e7d0      	b.n	800e9ee <ADS_W_ClockSetup3+0x3a>
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	68ab      	ldr	r3, [r5, #8]
 800ea50:	602a      	str	r2, [r5, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d0f0      	beq.n	800ea38 <ADS_W_ClockSetup3+0x84>
 800ea56:	60aa      	str	r2, [r5, #8]
 800ea58:	6822      	ldr	r2, [r4, #0]
 800ea5a:	1e51      	subs	r1, r2, #1
 800ea5c:	6021      	str	r1, [r4, #0]
 800ea5e:	2a00      	cmp	r2, #0
 800ea60:	d000      	beq.n	800ea64 <ADS_W_ClockSetup3+0xb0>
 800ea62:	b662      	cpsie	i
 800ea64:	68e9      	ldr	r1, [r5, #12]
 800ea66:	2000      	movs	r0, #0
 800ea68:	4798      	blx	r3
 800ea6a:	0006      	movs	r6, r0
 800ea6c:	e7b8      	b.n	800e9e0 <ADS_W_ClockSetup3+0x2c>
 800ea6e:	46c0      	nop			; (mov r8, r8)
 800ea70:	20005268 	.word	0x20005268
 800ea74:	0800ddd9 	.word	0x0800ddd9
 800ea78:	08012b84 	.word	0x08012b84

0800ea7c <ADS_W_EMEControl>:
 800ea7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea7e:	000f      	movs	r7, r1
 800ea80:	211c      	movs	r1, #28
 800ea82:	4311      	orrs	r1, r2
 800ea84:	b083      	sub	sp, #12
 800ea86:	0005      	movs	r5, r0
 800ea88:	7039      	strb	r1, [r7, #0]
 800ea8a:	b672      	cpsid	i
 800ea8c:	4c2a      	ldr	r4, [pc, #168]	; (800eb38 <ADS_W_EMEControl+0xbc>)
 800ea8e:	6821      	ldr	r1, [r4, #0]
 800ea90:	3101      	adds	r1, #1
 800ea92:	6021      	str	r1, [r4, #0]
 800ea94:	6801      	ldr	r1, [r0, #0]
 800ea96:	2900      	cmp	r1, #0
 800ea98:	d009      	beq.n	800eaae <ADS_W_EMEControl+0x32>
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	1e5a      	subs	r2, r3, #1
 800ea9e:	6022      	str	r2, [r4, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d000      	beq.n	800eaa6 <ADS_W_EMEControl+0x2a>
 800eaa4:	b662      	cpsie	i
 800eaa6:	682e      	ldr	r6, [r5, #0]
 800eaa8:	0030      	movs	r0, r6
 800eaaa:	b003      	add	sp, #12
 800eaac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaae:	2a00      	cmp	r2, #0
 800eab0:	d12d      	bne.n	800eb0e <ADS_W_EMEControl+0x92>
 800eab2:	2202      	movs	r2, #2
 800eab4:	6002      	str	r2, [r0, #0]
 800eab6:	6822      	ldr	r2, [r4, #0]
 800eab8:	1e51      	subs	r1, r2, #1
 800eaba:	6021      	str	r1, [r4, #0]
 800eabc:	2a00      	cmp	r2, #0
 800eabe:	d000      	beq.n	800eac2 <ADS_W_EMEControl+0x46>
 800eac0:	b662      	cpsie	i
 800eac2:	60ab      	str	r3, [r5, #8]
 800eac4:	9b08      	ldr	r3, [sp, #32]
 800eac6:	9501      	str	r5, [sp, #4]
 800eac8:	60eb      	str	r3, [r5, #12]
 800eaca:	4b1c      	ldr	r3, [pc, #112]	; (800eb3c <ADS_W_EMEControl+0xc0>)
 800eacc:	2200      	movs	r2, #0
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	0039      	movs	r1, r7
 800ead2:	2303      	movs	r3, #3
 800ead4:	6868      	ldr	r0, [r5, #4]
 800ead6:	f7f8 f9ff 	bl	8006ed8 <S2PI_TransferFrame>
 800eada:	1e06      	subs	r6, r0, #0
 800eadc:	dae4      	bge.n	800eaa8 <ADS_W_EMEControl+0x2c>
 800eade:	0002      	movs	r2, r0
 800eae0:	7839      	ldrb	r1, [r7, #0]
 800eae2:	4817      	ldr	r0, [pc, #92]	; (800eb40 <ADS_W_EMEControl+0xc4>)
 800eae4:	f7f8 fac6 	bl	8007074 <print>
 800eae8:	b672      	cpsid	i
 800eaea:	6823      	ldr	r3, [r4, #0]
 800eaec:	3301      	adds	r3, #1
 800eaee:	6023      	str	r3, [r4, #0]
 800eaf0:	682b      	ldr	r3, [r5, #0]
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d00e      	beq.n	800eb14 <ADS_W_EMEControl+0x98>
 800eaf6:	682b      	ldr	r3, [r5, #0]
 800eaf8:	2b64      	cmp	r3, #100	; 0x64
 800eafa:	d101      	bne.n	800eb00 <ADS_W_EMEControl+0x84>
 800eafc:	3303      	adds	r3, #3
 800eafe:	602b      	str	r3, [r5, #0]
 800eb00:	6823      	ldr	r3, [r4, #0]
 800eb02:	1e5a      	subs	r2, r3, #1
 800eb04:	6022      	str	r2, [r4, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d0ce      	beq.n	800eaa8 <ADS_W_EMEControl+0x2c>
 800eb0a:	b662      	cpsie	i
 800eb0c:	e7cc      	b.n	800eaa8 <ADS_W_EMEControl+0x2c>
 800eb0e:	2264      	movs	r2, #100	; 0x64
 800eb10:	6002      	str	r2, [r0, #0]
 800eb12:	e7d0      	b.n	800eab6 <ADS_W_EMEControl+0x3a>
 800eb14:	2200      	movs	r2, #0
 800eb16:	68ab      	ldr	r3, [r5, #8]
 800eb18:	602a      	str	r2, [r5, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d0f0      	beq.n	800eb00 <ADS_W_EMEControl+0x84>
 800eb1e:	60aa      	str	r2, [r5, #8]
 800eb20:	6822      	ldr	r2, [r4, #0]
 800eb22:	1e51      	subs	r1, r2, #1
 800eb24:	6021      	str	r1, [r4, #0]
 800eb26:	2a00      	cmp	r2, #0
 800eb28:	d000      	beq.n	800eb2c <ADS_W_EMEControl+0xb0>
 800eb2a:	b662      	cpsie	i
 800eb2c:	68e9      	ldr	r1, [r5, #12]
 800eb2e:	2000      	movs	r0, #0
 800eb30:	4798      	blx	r3
 800eb32:	0006      	movs	r6, r0
 800eb34:	e7b8      	b.n	800eaa8 <ADS_W_EMEControl+0x2c>
 800eb36:	46c0      	nop			; (mov r8, r8)
 800eb38:	20005268 	.word	0x20005268
 800eb3c:	0800ddd9 	.word	0x0800ddd9
 800eb40:	08012b84 	.word	0x08012b84

0800eb44 <ADS_W_EMEChannelSelect1>:
 800eb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb46:	000f      	movs	r7, r1
 800eb48:	211e      	movs	r1, #30
 800eb4a:	4311      	orrs	r1, r2
 800eb4c:	b083      	sub	sp, #12
 800eb4e:	0005      	movs	r5, r0
 800eb50:	7039      	strb	r1, [r7, #0]
 800eb52:	b672      	cpsid	i
 800eb54:	4c2a      	ldr	r4, [pc, #168]	; (800ec00 <ADS_W_EMEChannelSelect1+0xbc>)
 800eb56:	6821      	ldr	r1, [r4, #0]
 800eb58:	3101      	adds	r1, #1
 800eb5a:	6021      	str	r1, [r4, #0]
 800eb5c:	6801      	ldr	r1, [r0, #0]
 800eb5e:	2900      	cmp	r1, #0
 800eb60:	d009      	beq.n	800eb76 <ADS_W_EMEChannelSelect1+0x32>
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	1e5a      	subs	r2, r3, #1
 800eb66:	6022      	str	r2, [r4, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d000      	beq.n	800eb6e <ADS_W_EMEChannelSelect1+0x2a>
 800eb6c:	b662      	cpsie	i
 800eb6e:	682e      	ldr	r6, [r5, #0]
 800eb70:	0030      	movs	r0, r6
 800eb72:	b003      	add	sp, #12
 800eb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb76:	2a00      	cmp	r2, #0
 800eb78:	d12d      	bne.n	800ebd6 <ADS_W_EMEChannelSelect1+0x92>
 800eb7a:	2202      	movs	r2, #2
 800eb7c:	6002      	str	r2, [r0, #0]
 800eb7e:	6822      	ldr	r2, [r4, #0]
 800eb80:	1e51      	subs	r1, r2, #1
 800eb82:	6021      	str	r1, [r4, #0]
 800eb84:	2a00      	cmp	r2, #0
 800eb86:	d000      	beq.n	800eb8a <ADS_W_EMEChannelSelect1+0x46>
 800eb88:	b662      	cpsie	i
 800eb8a:	60ab      	str	r3, [r5, #8]
 800eb8c:	9b08      	ldr	r3, [sp, #32]
 800eb8e:	9501      	str	r5, [sp, #4]
 800eb90:	60eb      	str	r3, [r5, #12]
 800eb92:	4b1c      	ldr	r3, [pc, #112]	; (800ec04 <ADS_W_EMEChannelSelect1+0xc0>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	0039      	movs	r1, r7
 800eb9a:	2304      	movs	r3, #4
 800eb9c:	6868      	ldr	r0, [r5, #4]
 800eb9e:	f7f8 f99b 	bl	8006ed8 <S2PI_TransferFrame>
 800eba2:	1e06      	subs	r6, r0, #0
 800eba4:	dae4      	bge.n	800eb70 <ADS_W_EMEChannelSelect1+0x2c>
 800eba6:	0002      	movs	r2, r0
 800eba8:	7839      	ldrb	r1, [r7, #0]
 800ebaa:	4817      	ldr	r0, [pc, #92]	; (800ec08 <ADS_W_EMEChannelSelect1+0xc4>)
 800ebac:	f7f8 fa62 	bl	8007074 <print>
 800ebb0:	b672      	cpsid	i
 800ebb2:	6823      	ldr	r3, [r4, #0]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	6023      	str	r3, [r4, #0]
 800ebb8:	682b      	ldr	r3, [r5, #0]
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d00e      	beq.n	800ebdc <ADS_W_EMEChannelSelect1+0x98>
 800ebbe:	682b      	ldr	r3, [r5, #0]
 800ebc0:	2b64      	cmp	r3, #100	; 0x64
 800ebc2:	d101      	bne.n	800ebc8 <ADS_W_EMEChannelSelect1+0x84>
 800ebc4:	3303      	adds	r3, #3
 800ebc6:	602b      	str	r3, [r5, #0]
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	1e5a      	subs	r2, r3, #1
 800ebcc:	6022      	str	r2, [r4, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d0ce      	beq.n	800eb70 <ADS_W_EMEChannelSelect1+0x2c>
 800ebd2:	b662      	cpsie	i
 800ebd4:	e7cc      	b.n	800eb70 <ADS_W_EMEChannelSelect1+0x2c>
 800ebd6:	2264      	movs	r2, #100	; 0x64
 800ebd8:	6002      	str	r2, [r0, #0]
 800ebda:	e7d0      	b.n	800eb7e <ADS_W_EMEChannelSelect1+0x3a>
 800ebdc:	2200      	movs	r2, #0
 800ebde:	68ab      	ldr	r3, [r5, #8]
 800ebe0:	602a      	str	r2, [r5, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d0f0      	beq.n	800ebc8 <ADS_W_EMEChannelSelect1+0x84>
 800ebe6:	60aa      	str	r2, [r5, #8]
 800ebe8:	6822      	ldr	r2, [r4, #0]
 800ebea:	1e51      	subs	r1, r2, #1
 800ebec:	6021      	str	r1, [r4, #0]
 800ebee:	2a00      	cmp	r2, #0
 800ebf0:	d000      	beq.n	800ebf4 <ADS_W_EMEChannelSelect1+0xb0>
 800ebf2:	b662      	cpsie	i
 800ebf4:	68e9      	ldr	r1, [r5, #12]
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	4798      	blx	r3
 800ebfa:	0006      	movs	r6, r0
 800ebfc:	e7b8      	b.n	800eb70 <ADS_W_EMEChannelSelect1+0x2c>
 800ebfe:	46c0      	nop			; (mov r8, r8)
 800ec00:	20005268 	.word	0x20005268
 800ec04:	0800ddd9 	.word	0x0800ddd9
 800ec08:	08012b84 	.word	0x08012b84

0800ec0c <ADS_W_EMEChannelSelect2>:
 800ec0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec0e:	000f      	movs	r7, r1
 800ec10:	2120      	movs	r1, #32
 800ec12:	4311      	orrs	r1, r2
 800ec14:	b083      	sub	sp, #12
 800ec16:	0005      	movs	r5, r0
 800ec18:	7039      	strb	r1, [r7, #0]
 800ec1a:	b672      	cpsid	i
 800ec1c:	4c2a      	ldr	r4, [pc, #168]	; (800ecc8 <ADS_W_EMEChannelSelect2+0xbc>)
 800ec1e:	6821      	ldr	r1, [r4, #0]
 800ec20:	3101      	adds	r1, #1
 800ec22:	6021      	str	r1, [r4, #0]
 800ec24:	6801      	ldr	r1, [r0, #0]
 800ec26:	2900      	cmp	r1, #0
 800ec28:	d009      	beq.n	800ec3e <ADS_W_EMEChannelSelect2+0x32>
 800ec2a:	6823      	ldr	r3, [r4, #0]
 800ec2c:	1e5a      	subs	r2, r3, #1
 800ec2e:	6022      	str	r2, [r4, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d000      	beq.n	800ec36 <ADS_W_EMEChannelSelect2+0x2a>
 800ec34:	b662      	cpsie	i
 800ec36:	682e      	ldr	r6, [r5, #0]
 800ec38:	0030      	movs	r0, r6
 800ec3a:	b003      	add	sp, #12
 800ec3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec3e:	2a00      	cmp	r2, #0
 800ec40:	d12d      	bne.n	800ec9e <ADS_W_EMEChannelSelect2+0x92>
 800ec42:	2202      	movs	r2, #2
 800ec44:	6002      	str	r2, [r0, #0]
 800ec46:	6822      	ldr	r2, [r4, #0]
 800ec48:	1e51      	subs	r1, r2, #1
 800ec4a:	6021      	str	r1, [r4, #0]
 800ec4c:	2a00      	cmp	r2, #0
 800ec4e:	d000      	beq.n	800ec52 <ADS_W_EMEChannelSelect2+0x46>
 800ec50:	b662      	cpsie	i
 800ec52:	60ab      	str	r3, [r5, #8]
 800ec54:	9b08      	ldr	r3, [sp, #32]
 800ec56:	9501      	str	r5, [sp, #4]
 800ec58:	60eb      	str	r3, [r5, #12]
 800ec5a:	4b1c      	ldr	r3, [pc, #112]	; (800eccc <ADS_W_EMEChannelSelect2+0xc0>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	0039      	movs	r1, r7
 800ec62:	2304      	movs	r3, #4
 800ec64:	6868      	ldr	r0, [r5, #4]
 800ec66:	f7f8 f937 	bl	8006ed8 <S2PI_TransferFrame>
 800ec6a:	1e06      	subs	r6, r0, #0
 800ec6c:	dae4      	bge.n	800ec38 <ADS_W_EMEChannelSelect2+0x2c>
 800ec6e:	0002      	movs	r2, r0
 800ec70:	7839      	ldrb	r1, [r7, #0]
 800ec72:	4817      	ldr	r0, [pc, #92]	; (800ecd0 <ADS_W_EMEChannelSelect2+0xc4>)
 800ec74:	f7f8 f9fe 	bl	8007074 <print>
 800ec78:	b672      	cpsid	i
 800ec7a:	6823      	ldr	r3, [r4, #0]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	6023      	str	r3, [r4, #0]
 800ec80:	682b      	ldr	r3, [r5, #0]
 800ec82:	2b02      	cmp	r3, #2
 800ec84:	d00e      	beq.n	800eca4 <ADS_W_EMEChannelSelect2+0x98>
 800ec86:	682b      	ldr	r3, [r5, #0]
 800ec88:	2b64      	cmp	r3, #100	; 0x64
 800ec8a:	d101      	bne.n	800ec90 <ADS_W_EMEChannelSelect2+0x84>
 800ec8c:	3303      	adds	r3, #3
 800ec8e:	602b      	str	r3, [r5, #0]
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	1e5a      	subs	r2, r3, #1
 800ec94:	6022      	str	r2, [r4, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d0ce      	beq.n	800ec38 <ADS_W_EMEChannelSelect2+0x2c>
 800ec9a:	b662      	cpsie	i
 800ec9c:	e7cc      	b.n	800ec38 <ADS_W_EMEChannelSelect2+0x2c>
 800ec9e:	2264      	movs	r2, #100	; 0x64
 800eca0:	6002      	str	r2, [r0, #0]
 800eca2:	e7d0      	b.n	800ec46 <ADS_W_EMEChannelSelect2+0x3a>
 800eca4:	2200      	movs	r2, #0
 800eca6:	68ab      	ldr	r3, [r5, #8]
 800eca8:	602a      	str	r2, [r5, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d0f0      	beq.n	800ec90 <ADS_W_EMEChannelSelect2+0x84>
 800ecae:	60aa      	str	r2, [r5, #8]
 800ecb0:	6822      	ldr	r2, [r4, #0]
 800ecb2:	1e51      	subs	r1, r2, #1
 800ecb4:	6021      	str	r1, [r4, #0]
 800ecb6:	2a00      	cmp	r2, #0
 800ecb8:	d000      	beq.n	800ecbc <ADS_W_EMEChannelSelect2+0xb0>
 800ecba:	b662      	cpsie	i
 800ecbc:	68e9      	ldr	r1, [r5, #12]
 800ecbe:	2000      	movs	r0, #0
 800ecc0:	4798      	blx	r3
 800ecc2:	0006      	movs	r6, r0
 800ecc4:	e7b8      	b.n	800ec38 <ADS_W_EMEChannelSelect2+0x2c>
 800ecc6:	46c0      	nop			; (mov r8, r8)
 800ecc8:	20005268 	.word	0x20005268
 800eccc:	0800ddd9 	.word	0x0800ddd9
 800ecd0:	08012b84 	.word	0x08012b84

0800ecd4 <ADS_W_EMEChannelSelect3>:
 800ecd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecd6:	000f      	movs	r7, r1
 800ecd8:	2122      	movs	r1, #34	; 0x22
 800ecda:	4311      	orrs	r1, r2
 800ecdc:	b083      	sub	sp, #12
 800ecde:	0005      	movs	r5, r0
 800ece0:	7039      	strb	r1, [r7, #0]
 800ece2:	b672      	cpsid	i
 800ece4:	4c2a      	ldr	r4, [pc, #168]	; (800ed90 <ADS_W_EMEChannelSelect3+0xbc>)
 800ece6:	6821      	ldr	r1, [r4, #0]
 800ece8:	3101      	adds	r1, #1
 800ecea:	6021      	str	r1, [r4, #0]
 800ecec:	6801      	ldr	r1, [r0, #0]
 800ecee:	2900      	cmp	r1, #0
 800ecf0:	d009      	beq.n	800ed06 <ADS_W_EMEChannelSelect3+0x32>
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	1e5a      	subs	r2, r3, #1
 800ecf6:	6022      	str	r2, [r4, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d000      	beq.n	800ecfe <ADS_W_EMEChannelSelect3+0x2a>
 800ecfc:	b662      	cpsie	i
 800ecfe:	682e      	ldr	r6, [r5, #0]
 800ed00:	0030      	movs	r0, r6
 800ed02:	b003      	add	sp, #12
 800ed04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed06:	2a00      	cmp	r2, #0
 800ed08:	d12d      	bne.n	800ed66 <ADS_W_EMEChannelSelect3+0x92>
 800ed0a:	2202      	movs	r2, #2
 800ed0c:	6002      	str	r2, [r0, #0]
 800ed0e:	6822      	ldr	r2, [r4, #0]
 800ed10:	1e51      	subs	r1, r2, #1
 800ed12:	6021      	str	r1, [r4, #0]
 800ed14:	2a00      	cmp	r2, #0
 800ed16:	d000      	beq.n	800ed1a <ADS_W_EMEChannelSelect3+0x46>
 800ed18:	b662      	cpsie	i
 800ed1a:	60ab      	str	r3, [r5, #8]
 800ed1c:	9b08      	ldr	r3, [sp, #32]
 800ed1e:	9501      	str	r5, [sp, #4]
 800ed20:	60eb      	str	r3, [r5, #12]
 800ed22:	4b1c      	ldr	r3, [pc, #112]	; (800ed94 <ADS_W_EMEChannelSelect3+0xc0>)
 800ed24:	2200      	movs	r2, #0
 800ed26:	9300      	str	r3, [sp, #0]
 800ed28:	0039      	movs	r1, r7
 800ed2a:	2304      	movs	r3, #4
 800ed2c:	6868      	ldr	r0, [r5, #4]
 800ed2e:	f7f8 f8d3 	bl	8006ed8 <S2PI_TransferFrame>
 800ed32:	1e06      	subs	r6, r0, #0
 800ed34:	dae4      	bge.n	800ed00 <ADS_W_EMEChannelSelect3+0x2c>
 800ed36:	0002      	movs	r2, r0
 800ed38:	7839      	ldrb	r1, [r7, #0]
 800ed3a:	4817      	ldr	r0, [pc, #92]	; (800ed98 <ADS_W_EMEChannelSelect3+0xc4>)
 800ed3c:	f7f8 f99a 	bl	8007074 <print>
 800ed40:	b672      	cpsid	i
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	3301      	adds	r3, #1
 800ed46:	6023      	str	r3, [r4, #0]
 800ed48:	682b      	ldr	r3, [r5, #0]
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	d00e      	beq.n	800ed6c <ADS_W_EMEChannelSelect3+0x98>
 800ed4e:	682b      	ldr	r3, [r5, #0]
 800ed50:	2b64      	cmp	r3, #100	; 0x64
 800ed52:	d101      	bne.n	800ed58 <ADS_W_EMEChannelSelect3+0x84>
 800ed54:	3303      	adds	r3, #3
 800ed56:	602b      	str	r3, [r5, #0]
 800ed58:	6823      	ldr	r3, [r4, #0]
 800ed5a:	1e5a      	subs	r2, r3, #1
 800ed5c:	6022      	str	r2, [r4, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d0ce      	beq.n	800ed00 <ADS_W_EMEChannelSelect3+0x2c>
 800ed62:	b662      	cpsie	i
 800ed64:	e7cc      	b.n	800ed00 <ADS_W_EMEChannelSelect3+0x2c>
 800ed66:	2264      	movs	r2, #100	; 0x64
 800ed68:	6002      	str	r2, [r0, #0]
 800ed6a:	e7d0      	b.n	800ed0e <ADS_W_EMEChannelSelect3+0x3a>
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	68ab      	ldr	r3, [r5, #8]
 800ed70:	602a      	str	r2, [r5, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d0f0      	beq.n	800ed58 <ADS_W_EMEChannelSelect3+0x84>
 800ed76:	60aa      	str	r2, [r5, #8]
 800ed78:	6822      	ldr	r2, [r4, #0]
 800ed7a:	1e51      	subs	r1, r2, #1
 800ed7c:	6021      	str	r1, [r4, #0]
 800ed7e:	2a00      	cmp	r2, #0
 800ed80:	d000      	beq.n	800ed84 <ADS_W_EMEChannelSelect3+0xb0>
 800ed82:	b662      	cpsie	i
 800ed84:	68e9      	ldr	r1, [r5, #12]
 800ed86:	2000      	movs	r0, #0
 800ed88:	4798      	blx	r3
 800ed8a:	0006      	movs	r6, r0
 800ed8c:	e7b8      	b.n	800ed00 <ADS_W_EMEChannelSelect3+0x2c>
 800ed8e:	46c0      	nop			; (mov r8, r8)
 800ed90:	20005268 	.word	0x20005268
 800ed94:	0800ddd9 	.word	0x0800ddd9
 800ed98:	08012b84 	.word	0x08012b84

0800ed9c <ADS_W_AnalogTest>:
 800ed9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed9e:	000f      	movs	r7, r1
 800eda0:	2128      	movs	r1, #40	; 0x28
 800eda2:	4311      	orrs	r1, r2
 800eda4:	b083      	sub	sp, #12
 800eda6:	0005      	movs	r5, r0
 800eda8:	7039      	strb	r1, [r7, #0]
 800edaa:	b672      	cpsid	i
 800edac:	4c2a      	ldr	r4, [pc, #168]	; (800ee58 <ADS_W_AnalogTest+0xbc>)
 800edae:	6821      	ldr	r1, [r4, #0]
 800edb0:	3101      	adds	r1, #1
 800edb2:	6021      	str	r1, [r4, #0]
 800edb4:	6801      	ldr	r1, [r0, #0]
 800edb6:	2900      	cmp	r1, #0
 800edb8:	d009      	beq.n	800edce <ADS_W_AnalogTest+0x32>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	1e5a      	subs	r2, r3, #1
 800edbe:	6022      	str	r2, [r4, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d000      	beq.n	800edc6 <ADS_W_AnalogTest+0x2a>
 800edc4:	b662      	cpsie	i
 800edc6:	682e      	ldr	r6, [r5, #0]
 800edc8:	0030      	movs	r0, r6
 800edca:	b003      	add	sp, #12
 800edcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edce:	2a00      	cmp	r2, #0
 800edd0:	d12d      	bne.n	800ee2e <ADS_W_AnalogTest+0x92>
 800edd2:	2202      	movs	r2, #2
 800edd4:	6002      	str	r2, [r0, #0]
 800edd6:	6822      	ldr	r2, [r4, #0]
 800edd8:	1e51      	subs	r1, r2, #1
 800edda:	6021      	str	r1, [r4, #0]
 800eddc:	2a00      	cmp	r2, #0
 800edde:	d000      	beq.n	800ede2 <ADS_W_AnalogTest+0x46>
 800ede0:	b662      	cpsie	i
 800ede2:	60ab      	str	r3, [r5, #8]
 800ede4:	9b08      	ldr	r3, [sp, #32]
 800ede6:	9501      	str	r5, [sp, #4]
 800ede8:	60eb      	str	r3, [r5, #12]
 800edea:	4b1c      	ldr	r3, [pc, #112]	; (800ee5c <ADS_W_AnalogTest+0xc0>)
 800edec:	2200      	movs	r2, #0
 800edee:	9300      	str	r3, [sp, #0]
 800edf0:	0039      	movs	r1, r7
 800edf2:	2303      	movs	r3, #3
 800edf4:	6868      	ldr	r0, [r5, #4]
 800edf6:	f7f8 f86f 	bl	8006ed8 <S2PI_TransferFrame>
 800edfa:	1e06      	subs	r6, r0, #0
 800edfc:	dae4      	bge.n	800edc8 <ADS_W_AnalogTest+0x2c>
 800edfe:	0002      	movs	r2, r0
 800ee00:	7839      	ldrb	r1, [r7, #0]
 800ee02:	4817      	ldr	r0, [pc, #92]	; (800ee60 <ADS_W_AnalogTest+0xc4>)
 800ee04:	f7f8 f936 	bl	8007074 <print>
 800ee08:	b672      	cpsid	i
 800ee0a:	6823      	ldr	r3, [r4, #0]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	6023      	str	r3, [r4, #0]
 800ee10:	682b      	ldr	r3, [r5, #0]
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d00e      	beq.n	800ee34 <ADS_W_AnalogTest+0x98>
 800ee16:	682b      	ldr	r3, [r5, #0]
 800ee18:	2b64      	cmp	r3, #100	; 0x64
 800ee1a:	d101      	bne.n	800ee20 <ADS_W_AnalogTest+0x84>
 800ee1c:	3303      	adds	r3, #3
 800ee1e:	602b      	str	r3, [r5, #0]
 800ee20:	6823      	ldr	r3, [r4, #0]
 800ee22:	1e5a      	subs	r2, r3, #1
 800ee24:	6022      	str	r2, [r4, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d0ce      	beq.n	800edc8 <ADS_W_AnalogTest+0x2c>
 800ee2a:	b662      	cpsie	i
 800ee2c:	e7cc      	b.n	800edc8 <ADS_W_AnalogTest+0x2c>
 800ee2e:	2264      	movs	r2, #100	; 0x64
 800ee30:	6002      	str	r2, [r0, #0]
 800ee32:	e7d0      	b.n	800edd6 <ADS_W_AnalogTest+0x3a>
 800ee34:	2200      	movs	r2, #0
 800ee36:	68ab      	ldr	r3, [r5, #8]
 800ee38:	602a      	str	r2, [r5, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d0f0      	beq.n	800ee20 <ADS_W_AnalogTest+0x84>
 800ee3e:	60aa      	str	r2, [r5, #8]
 800ee40:	6822      	ldr	r2, [r4, #0]
 800ee42:	1e51      	subs	r1, r2, #1
 800ee44:	6021      	str	r1, [r4, #0]
 800ee46:	2a00      	cmp	r2, #0
 800ee48:	d000      	beq.n	800ee4c <ADS_W_AnalogTest+0xb0>
 800ee4a:	b662      	cpsie	i
 800ee4c:	68e9      	ldr	r1, [r5, #12]
 800ee4e:	2000      	movs	r0, #0
 800ee50:	4798      	blx	r3
 800ee52:	0006      	movs	r6, r0
 800ee54:	e7b8      	b.n	800edc8 <ADS_W_AnalogTest+0x2c>
 800ee56:	46c0      	nop			; (mov r8, r8)
 800ee58:	20005268 	.word	0x20005268
 800ee5c:	0800ddd9 	.word	0x0800ddd9
 800ee60:	08012b84 	.word	0x08012b84

0800ee64 <ADS_W_DigitalTest>:
 800ee64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee66:	000f      	movs	r7, r1
 800ee68:	212a      	movs	r1, #42	; 0x2a
 800ee6a:	4311      	orrs	r1, r2
 800ee6c:	b083      	sub	sp, #12
 800ee6e:	0005      	movs	r5, r0
 800ee70:	7039      	strb	r1, [r7, #0]
 800ee72:	b672      	cpsid	i
 800ee74:	4c2a      	ldr	r4, [pc, #168]	; (800ef20 <ADS_W_DigitalTest+0xbc>)
 800ee76:	6821      	ldr	r1, [r4, #0]
 800ee78:	3101      	adds	r1, #1
 800ee7a:	6021      	str	r1, [r4, #0]
 800ee7c:	6801      	ldr	r1, [r0, #0]
 800ee7e:	2900      	cmp	r1, #0
 800ee80:	d009      	beq.n	800ee96 <ADS_W_DigitalTest+0x32>
 800ee82:	6823      	ldr	r3, [r4, #0]
 800ee84:	1e5a      	subs	r2, r3, #1
 800ee86:	6022      	str	r2, [r4, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d000      	beq.n	800ee8e <ADS_W_DigitalTest+0x2a>
 800ee8c:	b662      	cpsie	i
 800ee8e:	682e      	ldr	r6, [r5, #0]
 800ee90:	0030      	movs	r0, r6
 800ee92:	b003      	add	sp, #12
 800ee94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee96:	2a00      	cmp	r2, #0
 800ee98:	d12d      	bne.n	800eef6 <ADS_W_DigitalTest+0x92>
 800ee9a:	2202      	movs	r2, #2
 800ee9c:	6002      	str	r2, [r0, #0]
 800ee9e:	6822      	ldr	r2, [r4, #0]
 800eea0:	1e51      	subs	r1, r2, #1
 800eea2:	6021      	str	r1, [r4, #0]
 800eea4:	2a00      	cmp	r2, #0
 800eea6:	d000      	beq.n	800eeaa <ADS_W_DigitalTest+0x46>
 800eea8:	b662      	cpsie	i
 800eeaa:	60ab      	str	r3, [r5, #8]
 800eeac:	9b08      	ldr	r3, [sp, #32]
 800eeae:	9501      	str	r5, [sp, #4]
 800eeb0:	60eb      	str	r3, [r5, #12]
 800eeb2:	4b1c      	ldr	r3, [pc, #112]	; (800ef24 <ADS_W_DigitalTest+0xc0>)
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	0039      	movs	r1, r7
 800eeba:	2302      	movs	r3, #2
 800eebc:	6868      	ldr	r0, [r5, #4]
 800eebe:	f7f8 f80b 	bl	8006ed8 <S2PI_TransferFrame>
 800eec2:	1e06      	subs	r6, r0, #0
 800eec4:	dae4      	bge.n	800ee90 <ADS_W_DigitalTest+0x2c>
 800eec6:	0002      	movs	r2, r0
 800eec8:	7839      	ldrb	r1, [r7, #0]
 800eeca:	4817      	ldr	r0, [pc, #92]	; (800ef28 <ADS_W_DigitalTest+0xc4>)
 800eecc:	f7f8 f8d2 	bl	8007074 <print>
 800eed0:	b672      	cpsid	i
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	3301      	adds	r3, #1
 800eed6:	6023      	str	r3, [r4, #0]
 800eed8:	682b      	ldr	r3, [r5, #0]
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d00e      	beq.n	800eefc <ADS_W_DigitalTest+0x98>
 800eede:	682b      	ldr	r3, [r5, #0]
 800eee0:	2b64      	cmp	r3, #100	; 0x64
 800eee2:	d101      	bne.n	800eee8 <ADS_W_DigitalTest+0x84>
 800eee4:	3303      	adds	r3, #3
 800eee6:	602b      	str	r3, [r5, #0]
 800eee8:	6823      	ldr	r3, [r4, #0]
 800eeea:	1e5a      	subs	r2, r3, #1
 800eeec:	6022      	str	r2, [r4, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d0ce      	beq.n	800ee90 <ADS_W_DigitalTest+0x2c>
 800eef2:	b662      	cpsie	i
 800eef4:	e7cc      	b.n	800ee90 <ADS_W_DigitalTest+0x2c>
 800eef6:	2264      	movs	r2, #100	; 0x64
 800eef8:	6002      	str	r2, [r0, #0]
 800eefa:	e7d0      	b.n	800ee9e <ADS_W_DigitalTest+0x3a>
 800eefc:	2200      	movs	r2, #0
 800eefe:	68ab      	ldr	r3, [r5, #8]
 800ef00:	602a      	str	r2, [r5, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d0f0      	beq.n	800eee8 <ADS_W_DigitalTest+0x84>
 800ef06:	60aa      	str	r2, [r5, #8]
 800ef08:	6822      	ldr	r2, [r4, #0]
 800ef0a:	1e51      	subs	r1, r2, #1
 800ef0c:	6021      	str	r1, [r4, #0]
 800ef0e:	2a00      	cmp	r2, #0
 800ef10:	d000      	beq.n	800ef14 <ADS_W_DigitalTest+0xb0>
 800ef12:	b662      	cpsie	i
 800ef14:	68e9      	ldr	r1, [r5, #12]
 800ef16:	2000      	movs	r0, #0
 800ef18:	4798      	blx	r3
 800ef1a:	0006      	movs	r6, r0
 800ef1c:	e7b8      	b.n	800ee90 <ADS_W_DigitalTest+0x2c>
 800ef1e:	46c0      	nop			; (mov r8, r8)
 800ef20:	20005268 	.word	0x20005268
 800ef24:	0800ddd9 	.word	0x0800ddd9
 800ef28:	08012b84 	.word	0x08012b84

0800ef2c <ADS_WR_LaserPattern>:
 800ef2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef2e:	000e      	movs	r6, r1
 800ef30:	2104      	movs	r1, #4
 800ef32:	4311      	orrs	r1, r2
 800ef34:	b083      	sub	sp, #12
 800ef36:	0005      	movs	r5, r0
 800ef38:	7031      	strb	r1, [r6, #0]
 800ef3a:	b672      	cpsid	i
 800ef3c:	4c2a      	ldr	r4, [pc, #168]	; (800efe8 <ADS_WR_LaserPattern+0xbc>)
 800ef3e:	6821      	ldr	r1, [r4, #0]
 800ef40:	3101      	adds	r1, #1
 800ef42:	6021      	str	r1, [r4, #0]
 800ef44:	6801      	ldr	r1, [r0, #0]
 800ef46:	2900      	cmp	r1, #0
 800ef48:	d009      	beq.n	800ef5e <ADS_WR_LaserPattern+0x32>
 800ef4a:	6823      	ldr	r3, [r4, #0]
 800ef4c:	1e5a      	subs	r2, r3, #1
 800ef4e:	6022      	str	r2, [r4, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d000      	beq.n	800ef56 <ADS_WR_LaserPattern+0x2a>
 800ef54:	b662      	cpsie	i
 800ef56:	682f      	ldr	r7, [r5, #0]
 800ef58:	0038      	movs	r0, r7
 800ef5a:	b003      	add	sp, #12
 800ef5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef5e:	2a00      	cmp	r2, #0
 800ef60:	d12d      	bne.n	800efbe <ADS_WR_LaserPattern+0x92>
 800ef62:	2202      	movs	r2, #2
 800ef64:	6002      	str	r2, [r0, #0]
 800ef66:	6822      	ldr	r2, [r4, #0]
 800ef68:	1e51      	subs	r1, r2, #1
 800ef6a:	6021      	str	r1, [r4, #0]
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	d000      	beq.n	800ef72 <ADS_WR_LaserPattern+0x46>
 800ef70:	b662      	cpsie	i
 800ef72:	60ab      	str	r3, [r5, #8]
 800ef74:	9b08      	ldr	r3, [sp, #32]
 800ef76:	9501      	str	r5, [sp, #4]
 800ef78:	60eb      	str	r3, [r5, #12]
 800ef7a:	4b1c      	ldr	r3, [pc, #112]	; (800efec <ADS_WR_LaserPattern+0xc0>)
 800ef7c:	0032      	movs	r2, r6
 800ef7e:	9300      	str	r3, [sp, #0]
 800ef80:	0031      	movs	r1, r6
 800ef82:	2311      	movs	r3, #17
 800ef84:	6868      	ldr	r0, [r5, #4]
 800ef86:	f7f7 ffa7 	bl	8006ed8 <S2PI_TransferFrame>
 800ef8a:	1e07      	subs	r7, r0, #0
 800ef8c:	dae4      	bge.n	800ef58 <ADS_WR_LaserPattern+0x2c>
 800ef8e:	0002      	movs	r2, r0
 800ef90:	7831      	ldrb	r1, [r6, #0]
 800ef92:	4817      	ldr	r0, [pc, #92]	; (800eff0 <ADS_WR_LaserPattern+0xc4>)
 800ef94:	f7f8 f86e 	bl	8007074 <print>
 800ef98:	b672      	cpsid	i
 800ef9a:	6823      	ldr	r3, [r4, #0]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	6023      	str	r3, [r4, #0]
 800efa0:	682b      	ldr	r3, [r5, #0]
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d00e      	beq.n	800efc4 <ADS_WR_LaserPattern+0x98>
 800efa6:	682b      	ldr	r3, [r5, #0]
 800efa8:	2b64      	cmp	r3, #100	; 0x64
 800efaa:	d101      	bne.n	800efb0 <ADS_WR_LaserPattern+0x84>
 800efac:	3303      	adds	r3, #3
 800efae:	602b      	str	r3, [r5, #0]
 800efb0:	6823      	ldr	r3, [r4, #0]
 800efb2:	1e5a      	subs	r2, r3, #1
 800efb4:	6022      	str	r2, [r4, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d0ce      	beq.n	800ef58 <ADS_WR_LaserPattern+0x2c>
 800efba:	b662      	cpsie	i
 800efbc:	e7cc      	b.n	800ef58 <ADS_WR_LaserPattern+0x2c>
 800efbe:	2264      	movs	r2, #100	; 0x64
 800efc0:	6002      	str	r2, [r0, #0]
 800efc2:	e7d0      	b.n	800ef66 <ADS_WR_LaserPattern+0x3a>
 800efc4:	2200      	movs	r2, #0
 800efc6:	68ab      	ldr	r3, [r5, #8]
 800efc8:	602a      	str	r2, [r5, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d0f0      	beq.n	800efb0 <ADS_WR_LaserPattern+0x84>
 800efce:	60aa      	str	r2, [r5, #8]
 800efd0:	6822      	ldr	r2, [r4, #0]
 800efd2:	1e51      	subs	r1, r2, #1
 800efd4:	6021      	str	r1, [r4, #0]
 800efd6:	2a00      	cmp	r2, #0
 800efd8:	d000      	beq.n	800efdc <ADS_WR_LaserPattern+0xb0>
 800efda:	b662      	cpsie	i
 800efdc:	68e9      	ldr	r1, [r5, #12]
 800efde:	2000      	movs	r0, #0
 800efe0:	4798      	blx	r3
 800efe2:	0007      	movs	r7, r0
 800efe4:	e7b8      	b.n	800ef58 <ADS_WR_LaserPattern+0x2c>
 800efe6:	46c0      	nop			; (mov r8, r8)
 800efe8:	20005268 	.word	0x20005268
 800efec:	0800ddd9 	.word	0x0800ddd9
 800eff0:	08012b84 	.word	0x08012b84

0800eff4 <ADS_WR_AnalogSetup>:
 800eff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff6:	000e      	movs	r6, r1
 800eff8:	210a      	movs	r1, #10
 800effa:	4311      	orrs	r1, r2
 800effc:	b083      	sub	sp, #12
 800effe:	0005      	movs	r5, r0
 800f000:	7031      	strb	r1, [r6, #0]
 800f002:	b672      	cpsid	i
 800f004:	4c2a      	ldr	r4, [pc, #168]	; (800f0b0 <ADS_WR_AnalogSetup+0xbc>)
 800f006:	6821      	ldr	r1, [r4, #0]
 800f008:	3101      	adds	r1, #1
 800f00a:	6021      	str	r1, [r4, #0]
 800f00c:	6801      	ldr	r1, [r0, #0]
 800f00e:	2900      	cmp	r1, #0
 800f010:	d009      	beq.n	800f026 <ADS_WR_AnalogSetup+0x32>
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	1e5a      	subs	r2, r3, #1
 800f016:	6022      	str	r2, [r4, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d000      	beq.n	800f01e <ADS_WR_AnalogSetup+0x2a>
 800f01c:	b662      	cpsie	i
 800f01e:	682f      	ldr	r7, [r5, #0]
 800f020:	0038      	movs	r0, r7
 800f022:	b003      	add	sp, #12
 800f024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f026:	2a00      	cmp	r2, #0
 800f028:	d12d      	bne.n	800f086 <ADS_WR_AnalogSetup+0x92>
 800f02a:	2202      	movs	r2, #2
 800f02c:	6002      	str	r2, [r0, #0]
 800f02e:	6822      	ldr	r2, [r4, #0]
 800f030:	1e51      	subs	r1, r2, #1
 800f032:	6021      	str	r1, [r4, #0]
 800f034:	2a00      	cmp	r2, #0
 800f036:	d000      	beq.n	800f03a <ADS_WR_AnalogSetup+0x46>
 800f038:	b662      	cpsie	i
 800f03a:	60ab      	str	r3, [r5, #8]
 800f03c:	9b08      	ldr	r3, [sp, #32]
 800f03e:	9501      	str	r5, [sp, #4]
 800f040:	60eb      	str	r3, [r5, #12]
 800f042:	4b1c      	ldr	r3, [pc, #112]	; (800f0b4 <ADS_WR_AnalogSetup+0xc0>)
 800f044:	0032      	movs	r2, r6
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	0031      	movs	r1, r6
 800f04a:	2305      	movs	r3, #5
 800f04c:	6868      	ldr	r0, [r5, #4]
 800f04e:	f7f7 ff43 	bl	8006ed8 <S2PI_TransferFrame>
 800f052:	1e07      	subs	r7, r0, #0
 800f054:	dae4      	bge.n	800f020 <ADS_WR_AnalogSetup+0x2c>
 800f056:	0002      	movs	r2, r0
 800f058:	7831      	ldrb	r1, [r6, #0]
 800f05a:	4817      	ldr	r0, [pc, #92]	; (800f0b8 <ADS_WR_AnalogSetup+0xc4>)
 800f05c:	f7f8 f80a 	bl	8007074 <print>
 800f060:	b672      	cpsid	i
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	3301      	adds	r3, #1
 800f066:	6023      	str	r3, [r4, #0]
 800f068:	682b      	ldr	r3, [r5, #0]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d00e      	beq.n	800f08c <ADS_WR_AnalogSetup+0x98>
 800f06e:	682b      	ldr	r3, [r5, #0]
 800f070:	2b64      	cmp	r3, #100	; 0x64
 800f072:	d101      	bne.n	800f078 <ADS_WR_AnalogSetup+0x84>
 800f074:	3303      	adds	r3, #3
 800f076:	602b      	str	r3, [r5, #0]
 800f078:	6823      	ldr	r3, [r4, #0]
 800f07a:	1e5a      	subs	r2, r3, #1
 800f07c:	6022      	str	r2, [r4, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d0ce      	beq.n	800f020 <ADS_WR_AnalogSetup+0x2c>
 800f082:	b662      	cpsie	i
 800f084:	e7cc      	b.n	800f020 <ADS_WR_AnalogSetup+0x2c>
 800f086:	2264      	movs	r2, #100	; 0x64
 800f088:	6002      	str	r2, [r0, #0]
 800f08a:	e7d0      	b.n	800f02e <ADS_WR_AnalogSetup+0x3a>
 800f08c:	2200      	movs	r2, #0
 800f08e:	68ab      	ldr	r3, [r5, #8]
 800f090:	602a      	str	r2, [r5, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d0f0      	beq.n	800f078 <ADS_WR_AnalogSetup+0x84>
 800f096:	60aa      	str	r2, [r5, #8]
 800f098:	6822      	ldr	r2, [r4, #0]
 800f09a:	1e51      	subs	r1, r2, #1
 800f09c:	6021      	str	r1, [r4, #0]
 800f09e:	2a00      	cmp	r2, #0
 800f0a0:	d000      	beq.n	800f0a4 <ADS_WR_AnalogSetup+0xb0>
 800f0a2:	b662      	cpsie	i
 800f0a4:	68e9      	ldr	r1, [r5, #12]
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	4798      	blx	r3
 800f0aa:	0007      	movs	r7, r0
 800f0ac:	e7b8      	b.n	800f020 <ADS_WR_AnalogSetup+0x2c>
 800f0ae:	46c0      	nop			; (mov r8, r8)
 800f0b0:	20005268 	.word	0x20005268
 800f0b4:	0800ddd9 	.word	0x0800ddd9
 800f0b8:	08012b84 	.word	0x08012b84

0800f0bc <ADS_WR_PixelSetup>:
 800f0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0be:	000e      	movs	r6, r1
 800f0c0:	210e      	movs	r1, #14
 800f0c2:	4311      	orrs	r1, r2
 800f0c4:	b083      	sub	sp, #12
 800f0c6:	0005      	movs	r5, r0
 800f0c8:	7031      	strb	r1, [r6, #0]
 800f0ca:	b672      	cpsid	i
 800f0cc:	4c2a      	ldr	r4, [pc, #168]	; (800f178 <ADS_WR_PixelSetup+0xbc>)
 800f0ce:	6821      	ldr	r1, [r4, #0]
 800f0d0:	3101      	adds	r1, #1
 800f0d2:	6021      	str	r1, [r4, #0]
 800f0d4:	6801      	ldr	r1, [r0, #0]
 800f0d6:	2900      	cmp	r1, #0
 800f0d8:	d009      	beq.n	800f0ee <ADS_WR_PixelSetup+0x32>
 800f0da:	6823      	ldr	r3, [r4, #0]
 800f0dc:	1e5a      	subs	r2, r3, #1
 800f0de:	6022      	str	r2, [r4, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d000      	beq.n	800f0e6 <ADS_WR_PixelSetup+0x2a>
 800f0e4:	b662      	cpsie	i
 800f0e6:	682f      	ldr	r7, [r5, #0]
 800f0e8:	0038      	movs	r0, r7
 800f0ea:	b003      	add	sp, #12
 800f0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ee:	2a00      	cmp	r2, #0
 800f0f0:	d12d      	bne.n	800f14e <ADS_WR_PixelSetup+0x92>
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	6002      	str	r2, [r0, #0]
 800f0f6:	6822      	ldr	r2, [r4, #0]
 800f0f8:	1e51      	subs	r1, r2, #1
 800f0fa:	6021      	str	r1, [r4, #0]
 800f0fc:	2a00      	cmp	r2, #0
 800f0fe:	d000      	beq.n	800f102 <ADS_WR_PixelSetup+0x46>
 800f100:	b662      	cpsie	i
 800f102:	60ab      	str	r3, [r5, #8]
 800f104:	9b08      	ldr	r3, [sp, #32]
 800f106:	9501      	str	r5, [sp, #4]
 800f108:	60eb      	str	r3, [r5, #12]
 800f10a:	4b1c      	ldr	r3, [pc, #112]	; (800f17c <ADS_WR_PixelSetup+0xc0>)
 800f10c:	0032      	movs	r2, r6
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	0031      	movs	r1, r6
 800f112:	2303      	movs	r3, #3
 800f114:	6868      	ldr	r0, [r5, #4]
 800f116:	f7f7 fedf 	bl	8006ed8 <S2PI_TransferFrame>
 800f11a:	1e07      	subs	r7, r0, #0
 800f11c:	dae4      	bge.n	800f0e8 <ADS_WR_PixelSetup+0x2c>
 800f11e:	0002      	movs	r2, r0
 800f120:	7831      	ldrb	r1, [r6, #0]
 800f122:	4817      	ldr	r0, [pc, #92]	; (800f180 <ADS_WR_PixelSetup+0xc4>)
 800f124:	f7f7 ffa6 	bl	8007074 <print>
 800f128:	b672      	cpsid	i
 800f12a:	6823      	ldr	r3, [r4, #0]
 800f12c:	3301      	adds	r3, #1
 800f12e:	6023      	str	r3, [r4, #0]
 800f130:	682b      	ldr	r3, [r5, #0]
 800f132:	2b02      	cmp	r3, #2
 800f134:	d00e      	beq.n	800f154 <ADS_WR_PixelSetup+0x98>
 800f136:	682b      	ldr	r3, [r5, #0]
 800f138:	2b64      	cmp	r3, #100	; 0x64
 800f13a:	d101      	bne.n	800f140 <ADS_WR_PixelSetup+0x84>
 800f13c:	3303      	adds	r3, #3
 800f13e:	602b      	str	r3, [r5, #0]
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	1e5a      	subs	r2, r3, #1
 800f144:	6022      	str	r2, [r4, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d0ce      	beq.n	800f0e8 <ADS_WR_PixelSetup+0x2c>
 800f14a:	b662      	cpsie	i
 800f14c:	e7cc      	b.n	800f0e8 <ADS_WR_PixelSetup+0x2c>
 800f14e:	2264      	movs	r2, #100	; 0x64
 800f150:	6002      	str	r2, [r0, #0]
 800f152:	e7d0      	b.n	800f0f6 <ADS_WR_PixelSetup+0x3a>
 800f154:	2200      	movs	r2, #0
 800f156:	68ab      	ldr	r3, [r5, #8]
 800f158:	602a      	str	r2, [r5, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d0f0      	beq.n	800f140 <ADS_WR_PixelSetup+0x84>
 800f15e:	60aa      	str	r2, [r5, #8]
 800f160:	6822      	ldr	r2, [r4, #0]
 800f162:	1e51      	subs	r1, r2, #1
 800f164:	6021      	str	r1, [r4, #0]
 800f166:	2a00      	cmp	r2, #0
 800f168:	d000      	beq.n	800f16c <ADS_WR_PixelSetup+0xb0>
 800f16a:	b662      	cpsie	i
 800f16c:	68e9      	ldr	r1, [r5, #12]
 800f16e:	2000      	movs	r0, #0
 800f170:	4798      	blx	r3
 800f172:	0007      	movs	r7, r0
 800f174:	e7b8      	b.n	800f0e8 <ADS_WR_PixelSetup+0x2c>
 800f176:	46c0      	nop			; (mov r8, r8)
 800f178:	20005268 	.word	0x20005268
 800f17c:	0800ddd9 	.word	0x0800ddd9
 800f180:	08012b84 	.word	0x08012b84

0800f184 <ADS_WR_BlockEnable>:
 800f184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f186:	000e      	movs	r6, r1
 800f188:	2110      	movs	r1, #16
 800f18a:	4311      	orrs	r1, r2
 800f18c:	b083      	sub	sp, #12
 800f18e:	0005      	movs	r5, r0
 800f190:	7031      	strb	r1, [r6, #0]
 800f192:	b672      	cpsid	i
 800f194:	4c2a      	ldr	r4, [pc, #168]	; (800f240 <ADS_WR_BlockEnable+0xbc>)
 800f196:	6821      	ldr	r1, [r4, #0]
 800f198:	3101      	adds	r1, #1
 800f19a:	6021      	str	r1, [r4, #0]
 800f19c:	6801      	ldr	r1, [r0, #0]
 800f19e:	2900      	cmp	r1, #0
 800f1a0:	d009      	beq.n	800f1b6 <ADS_WR_BlockEnable+0x32>
 800f1a2:	6823      	ldr	r3, [r4, #0]
 800f1a4:	1e5a      	subs	r2, r3, #1
 800f1a6:	6022      	str	r2, [r4, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d000      	beq.n	800f1ae <ADS_WR_BlockEnable+0x2a>
 800f1ac:	b662      	cpsie	i
 800f1ae:	682f      	ldr	r7, [r5, #0]
 800f1b0:	0038      	movs	r0, r7
 800f1b2:	b003      	add	sp, #12
 800f1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1b6:	2a00      	cmp	r2, #0
 800f1b8:	d12d      	bne.n	800f216 <ADS_WR_BlockEnable+0x92>
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	6002      	str	r2, [r0, #0]
 800f1be:	6822      	ldr	r2, [r4, #0]
 800f1c0:	1e51      	subs	r1, r2, #1
 800f1c2:	6021      	str	r1, [r4, #0]
 800f1c4:	2a00      	cmp	r2, #0
 800f1c6:	d000      	beq.n	800f1ca <ADS_WR_BlockEnable+0x46>
 800f1c8:	b662      	cpsie	i
 800f1ca:	60ab      	str	r3, [r5, #8]
 800f1cc:	9b08      	ldr	r3, [sp, #32]
 800f1ce:	9501      	str	r5, [sp, #4]
 800f1d0:	60eb      	str	r3, [r5, #12]
 800f1d2:	4b1c      	ldr	r3, [pc, #112]	; (800f244 <ADS_WR_BlockEnable+0xc0>)
 800f1d4:	0032      	movs	r2, r6
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	0031      	movs	r1, r6
 800f1da:	2302      	movs	r3, #2
 800f1dc:	6868      	ldr	r0, [r5, #4]
 800f1de:	f7f7 fe7b 	bl	8006ed8 <S2PI_TransferFrame>
 800f1e2:	1e07      	subs	r7, r0, #0
 800f1e4:	dae4      	bge.n	800f1b0 <ADS_WR_BlockEnable+0x2c>
 800f1e6:	0002      	movs	r2, r0
 800f1e8:	7831      	ldrb	r1, [r6, #0]
 800f1ea:	4817      	ldr	r0, [pc, #92]	; (800f248 <ADS_WR_BlockEnable+0xc4>)
 800f1ec:	f7f7 ff42 	bl	8007074 <print>
 800f1f0:	b672      	cpsid	i
 800f1f2:	6823      	ldr	r3, [r4, #0]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	6023      	str	r3, [r4, #0]
 800f1f8:	682b      	ldr	r3, [r5, #0]
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d00e      	beq.n	800f21c <ADS_WR_BlockEnable+0x98>
 800f1fe:	682b      	ldr	r3, [r5, #0]
 800f200:	2b64      	cmp	r3, #100	; 0x64
 800f202:	d101      	bne.n	800f208 <ADS_WR_BlockEnable+0x84>
 800f204:	3303      	adds	r3, #3
 800f206:	602b      	str	r3, [r5, #0]
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	1e5a      	subs	r2, r3, #1
 800f20c:	6022      	str	r2, [r4, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d0ce      	beq.n	800f1b0 <ADS_WR_BlockEnable+0x2c>
 800f212:	b662      	cpsie	i
 800f214:	e7cc      	b.n	800f1b0 <ADS_WR_BlockEnable+0x2c>
 800f216:	2264      	movs	r2, #100	; 0x64
 800f218:	6002      	str	r2, [r0, #0]
 800f21a:	e7d0      	b.n	800f1be <ADS_WR_BlockEnable+0x3a>
 800f21c:	2200      	movs	r2, #0
 800f21e:	68ab      	ldr	r3, [r5, #8]
 800f220:	602a      	str	r2, [r5, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d0f0      	beq.n	800f208 <ADS_WR_BlockEnable+0x84>
 800f226:	60aa      	str	r2, [r5, #8]
 800f228:	6822      	ldr	r2, [r4, #0]
 800f22a:	1e51      	subs	r1, r2, #1
 800f22c:	6021      	str	r1, [r4, #0]
 800f22e:	2a00      	cmp	r2, #0
 800f230:	d000      	beq.n	800f234 <ADS_WR_BlockEnable+0xb0>
 800f232:	b662      	cpsie	i
 800f234:	68e9      	ldr	r1, [r5, #12]
 800f236:	2000      	movs	r0, #0
 800f238:	4798      	blx	r3
 800f23a:	0007      	movs	r7, r0
 800f23c:	e7b8      	b.n	800f1b0 <ADS_WR_BlockEnable+0x2c>
 800f23e:	46c0      	nop			; (mov r8, r8)
 800f240:	20005268 	.word	0x20005268
 800f244:	0800ddd9 	.word	0x0800ddd9
 800f248:	08012b84 	.word	0x08012b84

0800f24c <ADS_WR_DeviceConfig>:
 800f24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f24e:	000e      	movs	r6, r1
 800f250:	2112      	movs	r1, #18
 800f252:	4311      	orrs	r1, r2
 800f254:	b083      	sub	sp, #12
 800f256:	0005      	movs	r5, r0
 800f258:	7031      	strb	r1, [r6, #0]
 800f25a:	b672      	cpsid	i
 800f25c:	4c2a      	ldr	r4, [pc, #168]	; (800f308 <ADS_WR_DeviceConfig+0xbc>)
 800f25e:	6821      	ldr	r1, [r4, #0]
 800f260:	3101      	adds	r1, #1
 800f262:	6021      	str	r1, [r4, #0]
 800f264:	6801      	ldr	r1, [r0, #0]
 800f266:	2900      	cmp	r1, #0
 800f268:	d009      	beq.n	800f27e <ADS_WR_DeviceConfig+0x32>
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	1e5a      	subs	r2, r3, #1
 800f26e:	6022      	str	r2, [r4, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d000      	beq.n	800f276 <ADS_WR_DeviceConfig+0x2a>
 800f274:	b662      	cpsie	i
 800f276:	682f      	ldr	r7, [r5, #0]
 800f278:	0038      	movs	r0, r7
 800f27a:	b003      	add	sp, #12
 800f27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f27e:	2a00      	cmp	r2, #0
 800f280:	d12d      	bne.n	800f2de <ADS_WR_DeviceConfig+0x92>
 800f282:	2202      	movs	r2, #2
 800f284:	6002      	str	r2, [r0, #0]
 800f286:	6822      	ldr	r2, [r4, #0]
 800f288:	1e51      	subs	r1, r2, #1
 800f28a:	6021      	str	r1, [r4, #0]
 800f28c:	2a00      	cmp	r2, #0
 800f28e:	d000      	beq.n	800f292 <ADS_WR_DeviceConfig+0x46>
 800f290:	b662      	cpsie	i
 800f292:	60ab      	str	r3, [r5, #8]
 800f294:	9b08      	ldr	r3, [sp, #32]
 800f296:	9501      	str	r5, [sp, #4]
 800f298:	60eb      	str	r3, [r5, #12]
 800f29a:	4b1c      	ldr	r3, [pc, #112]	; (800f30c <ADS_WR_DeviceConfig+0xc0>)
 800f29c:	0032      	movs	r2, r6
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	0031      	movs	r1, r6
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	6868      	ldr	r0, [r5, #4]
 800f2a6:	f7f7 fe17 	bl	8006ed8 <S2PI_TransferFrame>
 800f2aa:	1e07      	subs	r7, r0, #0
 800f2ac:	dae4      	bge.n	800f278 <ADS_WR_DeviceConfig+0x2c>
 800f2ae:	0002      	movs	r2, r0
 800f2b0:	7831      	ldrb	r1, [r6, #0]
 800f2b2:	4817      	ldr	r0, [pc, #92]	; (800f310 <ADS_WR_DeviceConfig+0xc4>)
 800f2b4:	f7f7 fede 	bl	8007074 <print>
 800f2b8:	b672      	cpsid	i
 800f2ba:	6823      	ldr	r3, [r4, #0]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	6023      	str	r3, [r4, #0]
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	2b02      	cmp	r3, #2
 800f2c4:	d00e      	beq.n	800f2e4 <ADS_WR_DeviceConfig+0x98>
 800f2c6:	682b      	ldr	r3, [r5, #0]
 800f2c8:	2b64      	cmp	r3, #100	; 0x64
 800f2ca:	d101      	bne.n	800f2d0 <ADS_WR_DeviceConfig+0x84>
 800f2cc:	3303      	adds	r3, #3
 800f2ce:	602b      	str	r3, [r5, #0]
 800f2d0:	6823      	ldr	r3, [r4, #0]
 800f2d2:	1e5a      	subs	r2, r3, #1
 800f2d4:	6022      	str	r2, [r4, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d0ce      	beq.n	800f278 <ADS_WR_DeviceConfig+0x2c>
 800f2da:	b662      	cpsie	i
 800f2dc:	e7cc      	b.n	800f278 <ADS_WR_DeviceConfig+0x2c>
 800f2de:	2264      	movs	r2, #100	; 0x64
 800f2e0:	6002      	str	r2, [r0, #0]
 800f2e2:	e7d0      	b.n	800f286 <ADS_WR_DeviceConfig+0x3a>
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	68ab      	ldr	r3, [r5, #8]
 800f2e8:	602a      	str	r2, [r5, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d0f0      	beq.n	800f2d0 <ADS_WR_DeviceConfig+0x84>
 800f2ee:	60aa      	str	r2, [r5, #8]
 800f2f0:	6822      	ldr	r2, [r4, #0]
 800f2f2:	1e51      	subs	r1, r2, #1
 800f2f4:	6021      	str	r1, [r4, #0]
 800f2f6:	2a00      	cmp	r2, #0
 800f2f8:	d000      	beq.n	800f2fc <ADS_WR_DeviceConfig+0xb0>
 800f2fa:	b662      	cpsie	i
 800f2fc:	68e9      	ldr	r1, [r5, #12]
 800f2fe:	2000      	movs	r0, #0
 800f300:	4798      	blx	r3
 800f302:	0007      	movs	r7, r0
 800f304:	e7b8      	b.n	800f278 <ADS_WR_DeviceConfig+0x2c>
 800f306:	46c0      	nop			; (mov r8, r8)
 800f308:	20005268 	.word	0x20005268
 800f30c:	0800ddd9 	.word	0x0800ddd9
 800f310:	08012b84 	.word	0x08012b84

0800f314 <fp_div16>:
 800f314:	0002      	movs	r2, r0
 800f316:	b510      	push	{r4, lr}
 800f318:	2000      	movs	r0, #0
 800f31a:	2900      	cmp	r1, #0
 800f31c:	d014      	beq.n	800f348 <fp_div16+0x34>
 800f31e:	17d3      	asrs	r3, r2, #31
 800f320:	18d4      	adds	r4, r2, r3
 800f322:	17c8      	asrs	r0, r1, #31
 800f324:	405c      	eors	r4, r3
 800f326:	180b      	adds	r3, r1, r0
 800f328:	4051      	eors	r1, r2
 800f32a:	2280      	movs	r2, #128	; 0x80
 800f32c:	4043      	eors	r3, r0
 800f32e:	0252      	lsls	r2, r2, #9
 800f330:	429c      	cmp	r4, r3
 800f332:	d90a      	bls.n	800f34a <fp_div16+0x36>
 800f334:	005b      	lsls	r3, r3, #1
 800f336:	0052      	lsls	r2, r2, #1
 800f338:	429c      	cmp	r4, r3
 800f33a:	d8fb      	bhi.n	800f334 <fp_div16+0x20>
 800f33c:	2a00      	cmp	r2, #0
 800f33e:	d104      	bne.n	800f34a <fp_div16+0x36>
 800f340:	4b14      	ldr	r3, [pc, #80]	; (800f394 <fp_div16+0x80>)
 800f342:	0fc8      	lsrs	r0, r1, #31
 800f344:	469c      	mov	ip, r3
 800f346:	4460      	add	r0, ip
 800f348:	bd10      	pop	{r4, pc}
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	db14      	blt.n	800f378 <fp_div16+0x64>
 800f34e:	2000      	movs	r0, #0
 800f350:	2c00      	cmp	r4, #0
 800f352:	d102      	bne.n	800f35a <fp_div16+0x46>
 800f354:	e01c      	b.n	800f390 <fp_div16+0x7c>
 800f356:	2c00      	cmp	r4, #0
 800f358:	d006      	beq.n	800f368 <fp_div16+0x54>
 800f35a:	429c      	cmp	r4, r3
 800f35c:	d301      	bcc.n	800f362 <fp_div16+0x4e>
 800f35e:	4310      	orrs	r0, r2
 800f360:	1ae4      	subs	r4, r4, r3
 800f362:	0064      	lsls	r4, r4, #1
 800f364:	0852      	lsrs	r2, r2, #1
 800f366:	d1f6      	bne.n	800f356 <fp_div16+0x42>
 800f368:	2200      	movs	r2, #0
 800f36a:	429c      	cmp	r4, r3
 800f36c:	4152      	adcs	r2, r2
 800f36e:	1880      	adds	r0, r0, r2
 800f370:	2900      	cmp	r1, #0
 800f372:	dae9      	bge.n	800f348 <fp_div16+0x34>
 800f374:	4240      	negs	r0, r0
 800f376:	e7e7      	b.n	800f348 <fp_div16+0x34>
 800f378:	2000      	movs	r0, #0
 800f37a:	429c      	cmp	r4, r3
 800f37c:	d205      	bcs.n	800f38a <fp_div16+0x76>
 800f37e:	085b      	lsrs	r3, r3, #1
 800f380:	0852      	lsrs	r2, r2, #1
 800f382:	d0f1      	beq.n	800f368 <fp_div16+0x54>
 800f384:	2c00      	cmp	r4, #0
 800f386:	d1e8      	bne.n	800f35a <fp_div16+0x46>
 800f388:	e7f2      	b.n	800f370 <fp_div16+0x5c>
 800f38a:	1ae4      	subs	r4, r4, r3
 800f38c:	0010      	movs	r0, r2
 800f38e:	e7f6      	b.n	800f37e <fp_div16+0x6a>
 800f390:	0020      	movs	r0, r4
 800f392:	e7e9      	b.n	800f368 <fp_div16+0x54>
 800f394:	7fffffff 	.word	0x7fffffff

0800f398 <fp_exp24>:
 800f398:	4b48      	ldr	r3, [pc, #288]	; (800f4bc <fp_exp24+0x124>)
 800f39a:	18c3      	adds	r3, r0, r3
 800f39c:	d500      	bpl.n	800f3a0 <fp_exp24+0x8>
 800f39e:	e087      	b.n	800f4b0 <fp_exp24+0x118>
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	4a46      	ldr	r2, [pc, #280]	; (800f4c0 <fp_exp24+0x128>)
 800f3a6:	189a      	adds	r2, r3, r2
 800f3a8:	d401      	bmi.n	800f3ae <fp_exp24+0x16>
 800f3aa:	0008      	movs	r0, r1
 800f3ac:	0013      	movs	r3, r2
 800f3ae:	4a45      	ldr	r2, [pc, #276]	; (800f4c4 <fp_exp24+0x12c>)
 800f3b0:	189a      	adds	r2, r3, r2
 800f3b2:	d401      	bmi.n	800f3b8 <fp_exp24+0x20>
 800f3b4:	0013      	movs	r3, r2
 800f3b6:	0080      	lsls	r0, r0, #2
 800f3b8:	4a43      	ldr	r2, [pc, #268]	; (800f4c8 <fp_exp24+0x130>)
 800f3ba:	189a      	adds	r2, r3, r2
 800f3bc:	d401      	bmi.n	800f3c2 <fp_exp24+0x2a>
 800f3be:	0013      	movs	r3, r2
 800f3c0:	0040      	lsls	r0, r0, #1
 800f3c2:	4a42      	ldr	r2, [pc, #264]	; (800f4cc <fp_exp24+0x134>)
 800f3c4:	189a      	adds	r2, r3, r2
 800f3c6:	d402      	bmi.n	800f3ce <fp_exp24+0x36>
 800f3c8:	0843      	lsrs	r3, r0, #1
 800f3ca:	18c0      	adds	r0, r0, r3
 800f3cc:	0013      	movs	r3, r2
 800f3ce:	4a40      	ldr	r2, [pc, #256]	; (800f4d0 <fp_exp24+0x138>)
 800f3d0:	189a      	adds	r2, r3, r2
 800f3d2:	d402      	bmi.n	800f3da <fp_exp24+0x42>
 800f3d4:	0883      	lsrs	r3, r0, #2
 800f3d6:	18c0      	adds	r0, r0, r3
 800f3d8:	0013      	movs	r3, r2
 800f3da:	4a3e      	ldr	r2, [pc, #248]	; (800f4d4 <fp_exp24+0x13c>)
 800f3dc:	189a      	adds	r2, r3, r2
 800f3de:	d402      	bmi.n	800f3e6 <fp_exp24+0x4e>
 800f3e0:	08c3      	lsrs	r3, r0, #3
 800f3e2:	18c0      	adds	r0, r0, r3
 800f3e4:	0013      	movs	r3, r2
 800f3e6:	4a3c      	ldr	r2, [pc, #240]	; (800f4d8 <fp_exp24+0x140>)
 800f3e8:	189a      	adds	r2, r3, r2
 800f3ea:	d402      	bmi.n	800f3f2 <fp_exp24+0x5a>
 800f3ec:	0903      	lsrs	r3, r0, #4
 800f3ee:	18c0      	adds	r0, r0, r3
 800f3f0:	0013      	movs	r3, r2
 800f3f2:	4a3a      	ldr	r2, [pc, #232]	; (800f4dc <fp_exp24+0x144>)
 800f3f4:	189a      	adds	r2, r3, r2
 800f3f6:	d402      	bmi.n	800f3fe <fp_exp24+0x66>
 800f3f8:	0943      	lsrs	r3, r0, #5
 800f3fa:	18c0      	adds	r0, r0, r3
 800f3fc:	0013      	movs	r3, r2
 800f3fe:	4a38      	ldr	r2, [pc, #224]	; (800f4e0 <fp_exp24+0x148>)
 800f400:	189a      	adds	r2, r3, r2
 800f402:	d402      	bmi.n	800f40a <fp_exp24+0x72>
 800f404:	0983      	lsrs	r3, r0, #6
 800f406:	18c0      	adds	r0, r0, r3
 800f408:	0013      	movs	r3, r2
 800f40a:	4a36      	ldr	r2, [pc, #216]	; (800f4e4 <fp_exp24+0x14c>)
 800f40c:	189a      	adds	r2, r3, r2
 800f40e:	d402      	bmi.n	800f416 <fp_exp24+0x7e>
 800f410:	09c3      	lsrs	r3, r0, #7
 800f412:	18c0      	adds	r0, r0, r3
 800f414:	0013      	movs	r3, r2
 800f416:	4a34      	ldr	r2, [pc, #208]	; (800f4e8 <fp_exp24+0x150>)
 800f418:	189a      	adds	r2, r3, r2
 800f41a:	d402      	bmi.n	800f422 <fp_exp24+0x8a>
 800f41c:	0a03      	lsrs	r3, r0, #8
 800f41e:	18c0      	adds	r0, r0, r3
 800f420:	0013      	movs	r3, r2
 800f422:	4a32      	ldr	r2, [pc, #200]	; (800f4ec <fp_exp24+0x154>)
 800f424:	189a      	adds	r2, r3, r2
 800f426:	d402      	bmi.n	800f42e <fp_exp24+0x96>
 800f428:	0a43      	lsrs	r3, r0, #9
 800f42a:	18c0      	adds	r0, r0, r3
 800f42c:	0013      	movs	r3, r2
 800f42e:	4a30      	ldr	r2, [pc, #192]	; (800f4f0 <fp_exp24+0x158>)
 800f430:	189a      	adds	r2, r3, r2
 800f432:	d402      	bmi.n	800f43a <fp_exp24+0xa2>
 800f434:	0a83      	lsrs	r3, r0, #10
 800f436:	18c0      	adds	r0, r0, r3
 800f438:	0013      	movs	r3, r2
 800f43a:	4a2e      	ldr	r2, [pc, #184]	; (800f4f4 <fp_exp24+0x15c>)
 800f43c:	189a      	adds	r2, r3, r2
 800f43e:	d402      	bmi.n	800f446 <fp_exp24+0xae>
 800f440:	0ac3      	lsrs	r3, r0, #11
 800f442:	18c0      	adds	r0, r0, r3
 800f444:	0013      	movs	r3, r2
 800f446:	04da      	lsls	r2, r3, #19
 800f448:	d501      	bpl.n	800f44e <fp_exp24+0xb6>
 800f44a:	0b02      	lsrs	r2, r0, #12
 800f44c:	1880      	adds	r0, r0, r2
 800f44e:	051a      	lsls	r2, r3, #20
 800f450:	d501      	bpl.n	800f456 <fp_exp24+0xbe>
 800f452:	0b42      	lsrs	r2, r0, #13
 800f454:	1880      	adds	r0, r0, r2
 800f456:	055a      	lsls	r2, r3, #21
 800f458:	d501      	bpl.n	800f45e <fp_exp24+0xc6>
 800f45a:	0b82      	lsrs	r2, r0, #14
 800f45c:	1880      	adds	r0, r0, r2
 800f45e:	059a      	lsls	r2, r3, #22
 800f460:	d501      	bpl.n	800f466 <fp_exp24+0xce>
 800f462:	0bc2      	lsrs	r2, r0, #15
 800f464:	1880      	adds	r0, r0, r2
 800f466:	05da      	lsls	r2, r3, #23
 800f468:	d501      	bpl.n	800f46e <fp_exp24+0xd6>
 800f46a:	0c02      	lsrs	r2, r0, #16
 800f46c:	1880      	adds	r0, r0, r2
 800f46e:	061a      	lsls	r2, r3, #24
 800f470:	d501      	bpl.n	800f476 <fp_exp24+0xde>
 800f472:	0c42      	lsrs	r2, r0, #17
 800f474:	1880      	adds	r0, r0, r2
 800f476:	065a      	lsls	r2, r3, #25
 800f478:	d501      	bpl.n	800f47e <fp_exp24+0xe6>
 800f47a:	0c82      	lsrs	r2, r0, #18
 800f47c:	1880      	adds	r0, r0, r2
 800f47e:	069a      	lsls	r2, r3, #26
 800f480:	d501      	bpl.n	800f486 <fp_exp24+0xee>
 800f482:	0cc2      	lsrs	r2, r0, #19
 800f484:	1880      	adds	r0, r0, r2
 800f486:	06da      	lsls	r2, r3, #27
 800f488:	d501      	bpl.n	800f48e <fp_exp24+0xf6>
 800f48a:	0d02      	lsrs	r2, r0, #20
 800f48c:	1880      	adds	r0, r0, r2
 800f48e:	071a      	lsls	r2, r3, #28
 800f490:	d501      	bpl.n	800f496 <fp_exp24+0xfe>
 800f492:	0d42      	lsrs	r2, r0, #21
 800f494:	1880      	adds	r0, r0, r2
 800f496:	075a      	lsls	r2, r3, #29
 800f498:	d501      	bpl.n	800f49e <fp_exp24+0x106>
 800f49a:	0d82      	lsrs	r2, r0, #22
 800f49c:	1880      	adds	r0, r0, r2
 800f49e:	079a      	lsls	r2, r3, #30
 800f4a0:	d501      	bpl.n	800f4a6 <fp_exp24+0x10e>
 800f4a2:	0dc2      	lsrs	r2, r0, #23
 800f4a4:	1880      	adds	r0, r0, r2
 800f4a6:	07db      	lsls	r3, r3, #31
 800f4a8:	d501      	bpl.n	800f4ae <fp_exp24+0x116>
 800f4aa:	0e03      	lsrs	r3, r0, #24
 800f4ac:	18c0      	adds	r0, r0, r3
 800f4ae:	4770      	bx	lr
 800f4b0:	0003      	movs	r3, r0
 800f4b2:	2180      	movs	r1, #128	; 0x80
 800f4b4:	2080      	movs	r0, #128	; 0x80
 800f4b6:	0549      	lsls	r1, r1, #21
 800f4b8:	0440      	lsls	r0, r0, #17
 800f4ba:	e773      	b.n	800f3a4 <fp_exp24+0xc>
 800f4bc:	fa746f40 	.word	0xfa746f40
 800f4c0:	fd3a37a0 	.word	0xfd3a37a0
 800f4c4:	fe9d1bd0 	.word	0xfe9d1bd0
 800f4c8:	ff4e8de8 	.word	0xff4e8de8
 800f4cc:	ff983370 	.word	0xff983370
 800f4d0:	ffc6e010 	.word	0xffc6e010
 800f4d4:	ffe1d8f9 	.word	0xffe1d8f9
 800f4d8:	fff07ae8 	.word	0xfff07ae8
 800f4dc:	fff81f59 	.word	0xfff81f59
 800f4e0:	fffc07eb 	.word	0xfffc07eb
 800f4e4:	fffe01fd 	.word	0xfffe01fd
 800f4e8:	ffff0080 	.word	0xffff0080
 800f4ec:	ffff8020 	.word	0xffff8020
 800f4f0:	ffffc008 	.word	0xffffc008
 800f4f4:	ffffe002 	.word	0xffffe002

0800f4f8 <fp_exp16>:
 800f4f8:	b510      	push	{r4, lr}
 800f4fa:	1e03      	subs	r3, r0, #0
 800f4fc:	d018      	beq.n	800f530 <fp_exp16+0x38>
 800f4fe:	2280      	movs	r2, #128	; 0x80
 800f500:	0252      	lsls	r2, r2, #9
 800f502:	4290      	cmp	r0, r2
 800f504:	d02f      	beq.n	800f566 <fp_exp16+0x6e>
 800f506:	4a27      	ldr	r2, [pc, #156]	; (800f5a4 <fp_exp16+0xac>)
 800f508:	4290      	cmp	r0, r2
 800f50a:	dc14      	bgt.n	800f536 <fp_exp16+0x3e>
 800f50c:	4a26      	ldr	r2, [pc, #152]	; (800f5a8 <fp_exp16+0xb0>)
 800f50e:	2000      	movs	r0, #0
 800f510:	4293      	cmp	r3, r2
 800f512:	db0c      	blt.n	800f52e <fp_exp16+0x36>
 800f514:	2b00      	cmp	r3, #0
 800f516:	dd11      	ble.n	800f53c <fp_exp16+0x44>
 800f518:	4a24      	ldr	r2, [pc, #144]	; (800f5ac <fp_exp16+0xb4>)
 800f51a:	0218      	lsls	r0, r3, #8
 800f51c:	4290      	cmp	r0, r2
 800f51e:	dc32      	bgt.n	800f586 <fp_exp16+0x8e>
 800f520:	f7ff ff3a 	bl	800f398 <fp_exp24>
 800f524:	0003      	movs	r3, r0
 800f526:	3381      	adds	r3, #129	; 0x81
 800f528:	d81f      	bhi.n	800f56a <fp_exp16+0x72>
 800f52a:	3080      	adds	r0, #128	; 0x80
 800f52c:	0a00      	lsrs	r0, r0, #8
 800f52e:	bd10      	pop	{r4, pc}
 800f530:	2080      	movs	r0, #128	; 0x80
 800f532:	0240      	lsls	r0, r0, #9
 800f534:	e7fb      	b.n	800f52e <fp_exp16+0x36>
 800f536:	2001      	movs	r0, #1
 800f538:	4240      	negs	r0, r0
 800f53a:	e7f8      	b.n	800f52e <fp_exp16+0x36>
 800f53c:	4a1b      	ldr	r2, [pc, #108]	; (800f5ac <fp_exp16+0xb4>)
 800f53e:	425b      	negs	r3, r3
 800f540:	0218      	lsls	r0, r3, #8
 800f542:	4290      	cmp	r0, r2
 800f544:	dd14      	ble.n	800f570 <fp_exp16+0x78>
 800f546:	01d8      	lsls	r0, r3, #7
 800f548:	f7ff ff26 	bl	800f398 <fp_exp24>
 800f54c:	1c43      	adds	r3, r0, #1
 800f54e:	d022      	beq.n	800f596 <fp_exp16+0x9e>
 800f550:	3001      	adds	r0, #1
 800f552:	0841      	lsrs	r1, r0, #1
 800f554:	2080      	movs	r0, #128	; 0x80
 800f556:	0400      	lsls	r0, r0, #16
 800f558:	f7ff fedc 	bl	800f314 <fp_div16>
 800f55c:	2210      	movs	r2, #16
 800f55e:	0001      	movs	r1, r0
 800f560:	f000 f93c 	bl	800f7dc <fp_mulu>
 800f564:	e7e3      	b.n	800f52e <fp_exp16+0x36>
 800f566:	4812      	ldr	r0, [pc, #72]	; (800f5b0 <fp_exp16+0xb8>)
 800f568:	e7e1      	b.n	800f52e <fp_exp16+0x36>
 800f56a:	2080      	movs	r0, #128	; 0x80
 800f56c:	0440      	lsls	r0, r0, #17
 800f56e:	e7de      	b.n	800f52e <fp_exp16+0x36>
 800f570:	f7ff ff12 	bl	800f398 <fp_exp24>
 800f574:	1c43      	adds	r3, r0, #1
 800f576:	d011      	beq.n	800f59c <fp_exp16+0xa4>
 800f578:	3001      	adds	r0, #1
 800f57a:	0841      	lsrs	r1, r0, #1
 800f57c:	2080      	movs	r0, #128	; 0x80
 800f57e:	0400      	lsls	r0, r0, #16
 800f580:	f7ff fec8 	bl	800f314 <fp_div16>
 800f584:	e7d3      	b.n	800f52e <fp_exp16+0x36>
 800f586:	01d8      	lsls	r0, r3, #7
 800f588:	f7ff ff06 	bl	800f398 <fp_exp24>
 800f58c:	2220      	movs	r2, #32
 800f58e:	0001      	movs	r1, r0
 800f590:	f000 f924 	bl	800f7dc <fp_mulu>
 800f594:	e7cb      	b.n	800f52e <fp_exp16+0x36>
 800f596:	2180      	movs	r1, #128	; 0x80
 800f598:	0609      	lsls	r1, r1, #24
 800f59a:	e7db      	b.n	800f554 <fp_exp16+0x5c>
 800f59c:	2180      	movs	r1, #128	; 0x80
 800f59e:	0609      	lsls	r1, r1, #24
 800f5a0:	e7ec      	b.n	800f57c <fp_exp16+0x84>
 800f5a2:	46c0      	nop			; (mov r8, r8)
 800f5a4:	000b1721 	.word	0x000b1721
 800f5a8:	fff4376c 	.word	0xfff4376c
 800f5ac:	058b90be 	.word	0x058b90be
 800f5b0:	0002b7e1 	.word	0x0002b7e1

0800f5b4 <fp_log16>:
 800f5b4:	2280      	movs	r2, #128	; 0x80
 800f5b6:	0252      	lsls	r2, r2, #9
 800f5b8:	4290      	cmp	r0, r2
 800f5ba:	d100      	bne.n	800f5be <fp_log16+0xa>
 800f5bc:	e08e      	b.n	800f6dc <fp_log16+0x128>
 800f5be:	4b4e      	ldr	r3, [pc, #312]	; (800f6f8 <fp_log16+0x144>)
 800f5c0:	4298      	cmp	r0, r3
 800f5c2:	d100      	bne.n	800f5c6 <fp_log16+0x12>
 800f5c4:	e08e      	b.n	800f6e4 <fp_log16+0x130>
 800f5c6:	2380      	movs	r3, #128	; 0x80
 800f5c8:	061b      	lsls	r3, r3, #24
 800f5ca:	4298      	cmp	r0, r3
 800f5cc:	d900      	bls.n	800f5d0 <fp_log16+0x1c>
 800f5ce:	e074      	b.n	800f6ba <fp_log16+0x106>
 800f5d0:	4b4a      	ldr	r3, [pc, #296]	; (800f6fc <fp_log16+0x148>)
 800f5d2:	4298      	cmp	r0, r3
 800f5d4:	d900      	bls.n	800f5d8 <fp_log16+0x24>
 800f5d6:	e089      	b.n	800f6ec <fp_log16+0x138>
 800f5d8:	4a49      	ldr	r2, [pc, #292]	; (800f700 <fp_log16+0x14c>)
 800f5da:	494a      	ldr	r1, [pc, #296]	; (800f704 <fp_log16+0x150>)
 800f5dc:	0400      	lsls	r0, r0, #16
 800f5de:	4b4a      	ldr	r3, [pc, #296]	; (800f708 <fp_log16+0x154>)
 800f5e0:	4298      	cmp	r0, r3
 800f5e2:	d900      	bls.n	800f5e6 <fp_log16+0x32>
 800f5e4:	e085      	b.n	800f6f2 <fp_log16+0x13e>
 800f5e6:	0200      	lsls	r0, r0, #8
 800f5e8:	4b48      	ldr	r3, [pc, #288]	; (800f70c <fp_log16+0x158>)
 800f5ea:	4298      	cmp	r0, r3
 800f5ec:	d803      	bhi.n	800f5f6 <fp_log16+0x42>
 800f5ee:	4b48      	ldr	r3, [pc, #288]	; (800f710 <fp_log16+0x15c>)
 800f5f0:	0100      	lsls	r0, r0, #4
 800f5f2:	469c      	mov	ip, r3
 800f5f4:	4462      	add	r2, ip
 800f5f6:	4b47      	ldr	r3, [pc, #284]	; (800f714 <fp_log16+0x160>)
 800f5f8:	4298      	cmp	r0, r3
 800f5fa:	d803      	bhi.n	800f604 <fp_log16+0x50>
 800f5fc:	4b46      	ldr	r3, [pc, #280]	; (800f718 <fp_log16+0x164>)
 800f5fe:	0080      	lsls	r0, r0, #2
 800f600:	469c      	mov	ip, r3
 800f602:	4462      	add	r2, ip
 800f604:	4b45      	ldr	r3, [pc, #276]	; (800f71c <fp_log16+0x168>)
 800f606:	4298      	cmp	r0, r3
 800f608:	d803      	bhi.n	800f612 <fp_log16+0x5e>
 800f60a:	4b45      	ldr	r3, [pc, #276]	; (800f720 <fp_log16+0x16c>)
 800f60c:	0040      	lsls	r0, r0, #1
 800f60e:	469c      	mov	ip, r3
 800f610:	4462      	add	r2, ip
 800f612:	0843      	lsrs	r3, r0, #1
 800f614:	181b      	adds	r3, r3, r0
 800f616:	d467      	bmi.n	800f6e8 <fp_log16+0x134>
 800f618:	4942      	ldr	r1, [pc, #264]	; (800f724 <fp_log16+0x170>)
 800f61a:	468c      	mov	ip, r1
 800f61c:	4462      	add	r2, ip
 800f61e:	0899      	lsrs	r1, r3, #2
 800f620:	18c9      	adds	r1, r1, r3
 800f622:	d403      	bmi.n	800f62c <fp_log16+0x78>
 800f624:	4b40      	ldr	r3, [pc, #256]	; (800f728 <fp_log16+0x174>)
 800f626:	469c      	mov	ip, r3
 800f628:	000b      	movs	r3, r1
 800f62a:	4462      	add	r2, ip
 800f62c:	08d9      	lsrs	r1, r3, #3
 800f62e:	18c9      	adds	r1, r1, r3
 800f630:	d403      	bmi.n	800f63a <fp_log16+0x86>
 800f632:	4b3e      	ldr	r3, [pc, #248]	; (800f72c <fp_log16+0x178>)
 800f634:	469c      	mov	ip, r3
 800f636:	000b      	movs	r3, r1
 800f638:	4462      	add	r2, ip
 800f63a:	0919      	lsrs	r1, r3, #4
 800f63c:	18c9      	adds	r1, r1, r3
 800f63e:	d403      	bmi.n	800f648 <fp_log16+0x94>
 800f640:	4b3b      	ldr	r3, [pc, #236]	; (800f730 <fp_log16+0x17c>)
 800f642:	469c      	mov	ip, r3
 800f644:	000b      	movs	r3, r1
 800f646:	4462      	add	r2, ip
 800f648:	0959      	lsrs	r1, r3, #5
 800f64a:	18c9      	adds	r1, r1, r3
 800f64c:	d403      	bmi.n	800f656 <fp_log16+0xa2>
 800f64e:	4b39      	ldr	r3, [pc, #228]	; (800f734 <fp_log16+0x180>)
 800f650:	469c      	mov	ip, r3
 800f652:	000b      	movs	r3, r1
 800f654:	4462      	add	r2, ip
 800f656:	0999      	lsrs	r1, r3, #6
 800f658:	18c9      	adds	r1, r1, r3
 800f65a:	d403      	bmi.n	800f664 <fp_log16+0xb0>
 800f65c:	4b36      	ldr	r3, [pc, #216]	; (800f738 <fp_log16+0x184>)
 800f65e:	469c      	mov	ip, r3
 800f660:	000b      	movs	r3, r1
 800f662:	4462      	add	r2, ip
 800f664:	09d9      	lsrs	r1, r3, #7
 800f666:	18c9      	adds	r1, r1, r3
 800f668:	d403      	bmi.n	800f672 <fp_log16+0xbe>
 800f66a:	4b34      	ldr	r3, [pc, #208]	; (800f73c <fp_log16+0x188>)
 800f66c:	469c      	mov	ip, r3
 800f66e:	000b      	movs	r3, r1
 800f670:	4462      	add	r2, ip
 800f672:	0a19      	lsrs	r1, r3, #8
 800f674:	18c9      	adds	r1, r1, r3
 800f676:	d403      	bmi.n	800f680 <fp_log16+0xcc>
 800f678:	4b31      	ldr	r3, [pc, #196]	; (800f740 <fp_log16+0x18c>)
 800f67a:	469c      	mov	ip, r3
 800f67c:	000b      	movs	r3, r1
 800f67e:	4462      	add	r2, ip
 800f680:	0a59      	lsrs	r1, r3, #9
 800f682:	18c9      	adds	r1, r1, r3
 800f684:	d403      	bmi.n	800f68e <fp_log16+0xda>
 800f686:	4b2f      	ldr	r3, [pc, #188]	; (800f744 <fp_log16+0x190>)
 800f688:	469c      	mov	ip, r3
 800f68a:	000b      	movs	r3, r1
 800f68c:	4462      	add	r2, ip
 800f68e:	0a99      	lsrs	r1, r3, #10
 800f690:	18c9      	adds	r1, r1, r3
 800f692:	d403      	bmi.n	800f69c <fp_log16+0xe8>
 800f694:	4b2c      	ldr	r3, [pc, #176]	; (800f748 <fp_log16+0x194>)
 800f696:	469c      	mov	ip, r3
 800f698:	000b      	movs	r3, r1
 800f69a:	4462      	add	r2, ip
 800f69c:	0ad9      	lsrs	r1, r3, #11
 800f69e:	18c9      	adds	r1, r1, r3
 800f6a0:	d411      	bmi.n	800f6c6 <fp_log16+0x112>
 800f6a2:	4b2a      	ldr	r3, [pc, #168]	; (800f74c <fp_log16+0x198>)
 800f6a4:	2080      	movs	r0, #128	; 0x80
 800f6a6:	469c      	mov	ip, r3
 800f6a8:	0600      	lsls	r0, r0, #24
 800f6aa:	1a41      	subs	r1, r0, r1
 800f6ac:	4462      	add	r2, ip
 800f6ae:	09c9      	lsrs	r1, r1, #7
 800f6b0:	1a52      	subs	r2, r2, r1
 800f6b2:	d40e      	bmi.n	800f6d2 <fp_log16+0x11e>
 800f6b4:	3280      	adds	r2, #128	; 0x80
 800f6b6:	0a10      	lsrs	r0, r2, #8
 800f6b8:	4770      	bx	lr
 800f6ba:	1c42      	adds	r2, r0, #1
 800f6bc:	d010      	beq.n	800f6e0 <fp_log16+0x12c>
 800f6be:	3001      	adds	r0, #1
 800f6c0:	0840      	lsrs	r0, r0, #1
 800f6c2:	4a23      	ldr	r2, [pc, #140]	; (800f750 <fp_log16+0x19c>)
 800f6c4:	e790      	b.n	800f5e8 <fp_log16+0x34>
 800f6c6:	2080      	movs	r0, #128	; 0x80
 800f6c8:	0600      	lsls	r0, r0, #24
 800f6ca:	1ac3      	subs	r3, r0, r3
 800f6cc:	09db      	lsrs	r3, r3, #7
 800f6ce:	1ad2      	subs	r2, r2, r3
 800f6d0:	d5f0      	bpl.n	800f6b4 <fp_log16+0x100>
 800f6d2:	2080      	movs	r0, #128	; 0x80
 800f6d4:	1a82      	subs	r2, r0, r2
 800f6d6:	0a12      	lsrs	r2, r2, #8
 800f6d8:	4250      	negs	r0, r2
 800f6da:	e7ed      	b.n	800f6b8 <fp_log16+0x104>
 800f6dc:	2000      	movs	r0, #0
 800f6de:	e7eb      	b.n	800f6b8 <fp_log16+0x104>
 800f6e0:	4a1b      	ldr	r2, [pc, #108]	; (800f750 <fp_log16+0x19c>)
 800f6e2:	e79c      	b.n	800f61e <fp_log16+0x6a>
 800f6e4:	0010      	movs	r0, r2
 800f6e6:	e7e7      	b.n	800f6b8 <fp_log16+0x104>
 800f6e8:	0003      	movs	r3, r0
 800f6ea:	e798      	b.n	800f61e <fp_log16+0x6a>
 800f6ec:	4a19      	ldr	r2, [pc, #100]	; (800f754 <fp_log16+0x1a0>)
 800f6ee:	491a      	ldr	r1, [pc, #104]	; (800f758 <fp_log16+0x1a4>)
 800f6f0:	e775      	b.n	800f5de <fp_log16+0x2a>
 800f6f2:	000a      	movs	r2, r1
 800f6f4:	e778      	b.n	800f5e8 <fp_log16+0x34>
 800f6f6:	46c0      	nop			; (mov r8, r8)
 800f6f8:	0002b7e1 	.word	0x0002b7e1
 800f6fc:	00007fff 	.word	0x00007fff
 800f700:	f9c2fd29 	.word	0xf9c2fd29
 800f704:	ff4e8de9 	.word	0xff4e8de9
 800f708:	007fffff 	.word	0x007fffff
 800f70c:	07ffffff 	.word	0x07ffffff
 800f710:	fd3a37a0 	.word	0xfd3a37a0
 800f714:	1fffffff 	.word	0x1fffffff
 800f718:	fe9d1bd0 	.word	0xfe9d1bd0
 800f71c:	3fffffff 	.word	0x3fffffff
 800f720:	ff4e8de8 	.word	0xff4e8de8
 800f724:	ff983370 	.word	0xff983370
 800f728:	ffc6e010 	.word	0xffc6e010
 800f72c:	ffe1d8f9 	.word	0xffe1d8f9
 800f730:	fff07ae8 	.word	0xfff07ae8
 800f734:	fff81f59 	.word	0xfff81f59
 800f738:	fffc07eb 	.word	0xfffc07eb
 800f73c:	fffe01fd 	.word	0xfffe01fd
 800f740:	ffff0080 	.word	0xffff0080
 800f744:	ffff8020 	.word	0xffff8020
 800f748:	ffffc008 	.word	0xffffc008
 800f74c:	ffffe002 	.word	0xffffe002
 800f750:	0b172180 	.word	0x0b172180
 800f754:	04da1ea8 	.word	0x04da1ea8
 800f758:	0a65af68 	.word	0x0a65af68

0800f75c <fp_muls>:
 800f75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f75e:	0016      	movs	r6, r2
 800f760:	b083      	sub	sp, #12
 800f762:	2800      	cmp	r0, #0
 800f764:	db2e      	blt.n	800f7c4 <fp_muls+0x68>
 800f766:	2301      	movs	r3, #1
 800f768:	0005      	movs	r5, r0
 800f76a:	2701      	movs	r7, #1
 800f76c:	425b      	negs	r3, r3
 800f76e:	1e0c      	subs	r4, r1, #0
 800f770:	da01      	bge.n	800f776 <fp_muls+0x1a>
 800f772:	001f      	movs	r7, r3
 800f774:	424c      	negs	r4, r1
 800f776:	2208      	movs	r2, #8
 800f778:	2100      	movs	r1, #0
 800f77a:	4668      	mov	r0, sp
 800f77c:	f7f8 ff60 	bl	8008640 <memset>
 800f780:	0022      	movs	r2, r4
 800f782:	0029      	movs	r1, r5
 800f784:	4668      	mov	r0, sp
 800f786:	f000 f951 	bl	800fa2c <muldwu>
 800f78a:	2e20      	cmp	r6, #32
 800f78c:	d012      	beq.n	800f7b4 <fp_muls+0x58>
 800f78e:	2320      	movs	r3, #32
 800f790:	9800      	ldr	r0, [sp, #0]
 800f792:	1b9b      	subs	r3, r3, r6
 800f794:	4098      	lsls	r0, r3
 800f796:	9b01      	ldr	r3, [sp, #4]
 800f798:	2e00      	cmp	r6, #0
 800f79a:	d00e      	beq.n	800f7ba <fp_muls+0x5e>
 800f79c:	2e20      	cmp	r6, #32
 800f79e:	d80d      	bhi.n	800f7bc <fp_muls+0x60>
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	1e71      	subs	r1, r6, #1
 800f7a4:	408a      	lsls	r2, r1
 800f7a6:	43d1      	mvns	r1, r2
 800f7a8:	428b      	cmp	r3, r1
 800f7aa:	d912      	bls.n	800f7d2 <fp_muls+0x76>
 800f7ac:	40f3      	lsrs	r3, r6
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	18c0      	adds	r0, r0, r3
 800f7b2:	e003      	b.n	800f7bc <fp_muls+0x60>
 800f7b4:	9b01      	ldr	r3, [sp, #4]
 800f7b6:	9800      	ldr	r0, [sp, #0]
 800f7b8:	0fdb      	lsrs	r3, r3, #31
 800f7ba:	18c0      	adds	r0, r0, r3
 800f7bc:	2f01      	cmp	r7, #1
 800f7be:	d106      	bne.n	800f7ce <fp_muls+0x72>
 800f7c0:	b003      	add	sp, #12
 800f7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7c4:	2701      	movs	r7, #1
 800f7c6:	4245      	negs	r5, r0
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	427f      	negs	r7, r7
 800f7cc:	e7cf      	b.n	800f76e <fp_muls+0x12>
 800f7ce:	4240      	negs	r0, r0
 800f7d0:	e7f6      	b.n	800f7c0 <fp_muls+0x64>
 800f7d2:	189b      	adds	r3, r3, r2
 800f7d4:	40f3      	lsrs	r3, r6
 800f7d6:	18c0      	adds	r0, r0, r3
 800f7d8:	e7f0      	b.n	800f7bc <fp_muls+0x60>
 800f7da:	46c0      	nop			; (mov r8, r8)

0800f7dc <fp_mulu>:
 800f7dc:	b570      	push	{r4, r5, r6, lr}
 800f7de:	0005      	movs	r5, r0
 800f7e0:	000e      	movs	r6, r1
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	0014      	movs	r4, r2
 800f7e6:	2100      	movs	r1, #0
 800f7e8:	2208      	movs	r2, #8
 800f7ea:	4668      	mov	r0, sp
 800f7ec:	f7f8 ff28 	bl	8008640 <memset>
 800f7f0:	0032      	movs	r2, r6
 800f7f2:	0029      	movs	r1, r5
 800f7f4:	4668      	mov	r0, sp
 800f7f6:	f000 f919 	bl	800fa2c <muldwu>
 800f7fa:	2c20      	cmp	r4, #32
 800f7fc:	d012      	beq.n	800f824 <fp_mulu+0x48>
 800f7fe:	2320      	movs	r3, #32
 800f800:	9800      	ldr	r0, [sp, #0]
 800f802:	1b1b      	subs	r3, r3, r4
 800f804:	4098      	lsls	r0, r3
 800f806:	9b01      	ldr	r3, [sp, #4]
 800f808:	2c00      	cmp	r4, #0
 800f80a:	d00e      	beq.n	800f82a <fp_mulu+0x4e>
 800f80c:	2c20      	cmp	r4, #32
 800f80e:	d80d      	bhi.n	800f82c <fp_mulu+0x50>
 800f810:	2201      	movs	r2, #1
 800f812:	1e61      	subs	r1, r4, #1
 800f814:	408a      	lsls	r2, r1
 800f816:	43d1      	mvns	r1, r2
 800f818:	428b      	cmp	r3, r1
 800f81a:	d909      	bls.n	800f830 <fp_mulu+0x54>
 800f81c:	40e3      	lsrs	r3, r4
 800f81e:	3301      	adds	r3, #1
 800f820:	18c0      	adds	r0, r0, r3
 800f822:	e003      	b.n	800f82c <fp_mulu+0x50>
 800f824:	9b01      	ldr	r3, [sp, #4]
 800f826:	9800      	ldr	r0, [sp, #0]
 800f828:	0fdb      	lsrs	r3, r3, #31
 800f82a:	18c0      	adds	r0, r0, r3
 800f82c:	b002      	add	sp, #8
 800f82e:	bd70      	pop	{r4, r5, r6, pc}
 800f830:	189b      	adds	r3, r3, r2
 800f832:	40e3      	lsrs	r3, r4
 800f834:	18c0      	adds	r0, r0, r3
 800f836:	e7f9      	b.n	800f82c <fp_mulu+0x50>

0800f838 <hamming_decode>:
 800f838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f83a:	46de      	mov	lr, fp
 800f83c:	4657      	mov	r7, sl
 800f83e:	464e      	mov	r6, r9
 800f840:	4645      	mov	r5, r8
 800f842:	0004      	movs	r4, r0
 800f844:	b5e0      	push	{r5, r6, r7, lr}
 800f846:	b089      	sub	sp, #36	; 0x24
 800f848:	9002      	str	r0, [sp, #8]
 800f84a:	468b      	mov	fp, r1
 800f84c:	2210      	movs	r2, #16
 800f84e:	2100      	movs	r1, #0
 800f850:	a804      	add	r0, sp, #16
 800f852:	f7f8 fef5 	bl	8008640 <memset>
 800f856:	0021      	movs	r1, r4
 800f858:	2210      	movs	r2, #16
 800f85a:	a804      	add	r0, sp, #16
 800f85c:	f7f8 fee5 	bl	800862a <memcpy>
 800f860:	2300      	movs	r3, #0
 800f862:	469c      	mov	ip, r3
 800f864:	465b      	mov	r3, fp
 800f866:	2401      	movs	r4, #1
 800f868:	9303      	str	r3, [sp, #12]
 800f86a:	4662      	mov	r2, ip
 800f86c:	0023      	movs	r3, r4
 800f86e:	4093      	lsls	r3, r2
 800f870:	469a      	mov	sl, r3
 800f872:	4652      	mov	r2, sl
 800f874:	2107      	movs	r1, #7
 800f876:	3a01      	subs	r2, #1
 800f878:	4011      	ands	r1, r2
 800f87a:	468b      	mov	fp, r1
 800f87c:	a904      	add	r1, sp, #16
 800f87e:	4688      	mov	r8, r1
 800f880:	08d2      	lsrs	r2, r2, #3
 800f882:	4442      	add	r2, r8
 800f884:	4691      	mov	r9, r2
 800f886:	0021      	movs	r1, r4
 800f888:	465a      	mov	r2, fp
 800f88a:	4091      	lsls	r1, r2
 800f88c:	464a      	mov	r2, r9
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	7812      	ldrb	r2, [r2, #0]
 800f892:	1e5e      	subs	r6, r3, #1
 800f894:	005b      	lsls	r3, r3, #1
 800f896:	438a      	bics	r2, r1
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	4649      	mov	r1, r9
 800f89c:	4698      	mov	r8, r3
 800f89e:	2300      	movs	r3, #0
 800f8a0:	9201      	str	r2, [sp, #4]
 800f8a2:	700a      	strb	r2, [r1, #0]
 800f8a4:	b2f6      	uxtb	r6, r6
 800f8a6:	4652      	mov	r2, sl
 800f8a8:	18b7      	adds	r7, r6, r2
 800f8aa:	0031      	movs	r1, r6
 800f8ac:	0035      	movs	r5, r6
 800f8ae:	42b7      	cmp	r7, r6
 800f8b0:	dd0e      	ble.n	800f8d0 <hamming_decode+0x98>
 800f8b2:	08ea      	lsrs	r2, r5, #3
 800f8b4:	b2d2      	uxtb	r2, r2
 800f8b6:	a804      	add	r0, sp, #16
 800f8b8:	5c80      	ldrb	r0, [r0, r2]
 800f8ba:	00d2      	lsls	r2, r2, #3
 800f8bc:	1a8a      	subs	r2, r1, r2
 800f8be:	4110      	asrs	r0, r2
 800f8c0:	3501      	adds	r5, #1
 800f8c2:	4020      	ands	r0, r4
 800f8c4:	181b      	adds	r3, r3, r0
 800f8c6:	b2ed      	uxtb	r5, r5
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	0029      	movs	r1, r5
 800f8cc:	42af      	cmp	r7, r5
 800f8ce:	dcf0      	bgt.n	800f8b2 <hamming_decode+0x7a>
 800f8d0:	4446      	add	r6, r8
 800f8d2:	b2f6      	uxtb	r6, r6
 800f8d4:	2e7e      	cmp	r6, #126	; 0x7e
 800f8d6:	d9e6      	bls.n	800f8a6 <hamming_decode+0x6e>
 800f8d8:	465a      	mov	r2, fp
 800f8da:	4023      	ands	r3, r4
 800f8dc:	4093      	lsls	r3, r2
 800f8de:	9a01      	ldr	r2, [sp, #4]
 800f8e0:	431a      	orrs	r2, r3
 800f8e2:	0013      	movs	r3, r2
 800f8e4:	464a      	mov	r2, r9
 800f8e6:	7013      	strb	r3, [r2, #0]
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	4698      	mov	r8, r3
 800f8ec:	44c4      	add	ip, r8
 800f8ee:	4663      	mov	r3, ip
 800f8f0:	2b07      	cmp	r3, #7
 800f8f2:	d1ba      	bne.n	800f86a <hamming_decode+0x32>
 800f8f4:	9b03      	ldr	r3, [sp, #12]
 800f8f6:	0020      	movs	r0, r4
 800f8f8:	469b      	mov	fp, r3
 800f8fa:	9b02      	ldr	r3, [sp, #8]
 800f8fc:	781a      	ldrb	r2, [r3, #0]
 800f8fe:	ab04      	add	r3, sp, #16
 800f900:	7819      	ldrb	r1, [r3, #0]
 800f902:	0023      	movs	r3, r4
 800f904:	4008      	ands	r0, r1
 800f906:	4013      	ands	r3, r2
 800f908:	1ac0      	subs	r0, r0, r3
 800f90a:	1e43      	subs	r3, r0, #1
 800f90c:	4198      	sbcs	r0, r3
 800f90e:	b2c3      	uxtb	r3, r0
 800f910:	469c      	mov	ip, r3
 800f912:	1048      	asrs	r0, r1, #1
 800f914:	1053      	asrs	r3, r2, #1
 800f916:	4020      	ands	r0, r4
 800f918:	4023      	ands	r3, r4
 800f91a:	4298      	cmp	r0, r3
 800f91c:	d002      	beq.n	800f924 <hamming_decode+0xec>
 800f91e:	2302      	movs	r3, #2
 800f920:	4698      	mov	r8, r3
 800f922:	44c4      	add	ip, r8
 800f924:	2501      	movs	r5, #1
 800f926:	10cb      	asrs	r3, r1, #3
 800f928:	10d4      	asrs	r4, r2, #3
 800f92a:	402b      	ands	r3, r5
 800f92c:	4025      	ands	r5, r4
 800f92e:	42ab      	cmp	r3, r5
 800f930:	d003      	beq.n	800f93a <hamming_decode+0x102>
 800f932:	4660      	mov	r0, ip
 800f934:	3004      	adds	r0, #4
 800f936:	b2c3      	uxtb	r3, r0
 800f938:	469c      	mov	ip, r3
 800f93a:	09c9      	lsrs	r1, r1, #7
 800f93c:	09d2      	lsrs	r2, r2, #7
 800f93e:	4291      	cmp	r1, r2
 800f940:	d003      	beq.n	800f94a <hamming_decode+0x112>
 800f942:	4660      	mov	r0, ip
 800f944:	3008      	adds	r0, #8
 800f946:	b2c3      	uxtb	r3, r0
 800f948:	469c      	mov	ip, r3
 800f94a:	ab04      	add	r3, sp, #16
 800f94c:	785a      	ldrb	r2, [r3, #1]
 800f94e:	9b02      	ldr	r3, [sp, #8]
 800f950:	09d2      	lsrs	r2, r2, #7
 800f952:	785b      	ldrb	r3, [r3, #1]
 800f954:	09db      	lsrs	r3, r3, #7
 800f956:	429a      	cmp	r2, r3
 800f958:	d003      	beq.n	800f962 <hamming_decode+0x12a>
 800f95a:	4660      	mov	r0, ip
 800f95c:	3010      	adds	r0, #16
 800f95e:	b2c3      	uxtb	r3, r0
 800f960:	469c      	mov	ip, r3
 800f962:	9b02      	ldr	r3, [sp, #8]
 800f964:	78da      	ldrb	r2, [r3, #3]
 800f966:	ab04      	add	r3, sp, #16
 800f968:	78db      	ldrb	r3, [r3, #3]
 800f96a:	09d2      	lsrs	r2, r2, #7
 800f96c:	09db      	lsrs	r3, r3, #7
 800f96e:	429a      	cmp	r2, r3
 800f970:	d003      	beq.n	800f97a <hamming_decode+0x142>
 800f972:	4660      	mov	r0, ip
 800f974:	3020      	adds	r0, #32
 800f976:	b2c3      	uxtb	r3, r0
 800f978:	469c      	mov	ip, r3
 800f97a:	ab04      	add	r3, sp, #16
 800f97c:	79da      	ldrb	r2, [r3, #7]
 800f97e:	9b02      	ldr	r3, [sp, #8]
 800f980:	09d2      	lsrs	r2, r2, #7
 800f982:	79db      	ldrb	r3, [r3, #7]
 800f984:	09db      	lsrs	r3, r3, #7
 800f986:	429a      	cmp	r2, r3
 800f988:	d04c      	beq.n	800fa24 <hamming_decode+0x1ec>
 800f98a:	4660      	mov	r0, ip
 800f98c:	3040      	adds	r0, #64	; 0x40
 800f98e:	b2c3      	uxtb	r3, r0
 800f990:	469c      	mov	ip, r3
 800f992:	4663      	mov	r3, ip
 800f994:	aa04      	add	r2, sp, #16
 800f996:	2407      	movs	r4, #7
 800f998:	4690      	mov	r8, r2
 800f99a:	3b01      	subs	r3, #1
 800f99c:	401c      	ands	r4, r3
 800f99e:	b2d9      	uxtb	r1, r3
 800f9a0:	08db      	lsrs	r3, r3, #3
 800f9a2:	4443      	add	r3, r8
 800f9a4:	001a      	movs	r2, r3
 800f9a6:	4643      	mov	r3, r8
 800f9a8:	08cd      	lsrs	r5, r1, #3
 800f9aa:	5d5b      	ldrb	r3, [r3, r5]
 800f9ac:	00ed      	lsls	r5, r5, #3
 800f9ae:	1b49      	subs	r1, r1, r5
 800f9b0:	410b      	asrs	r3, r1
 800f9b2:	2101      	movs	r1, #1
 800f9b4:	0008      	movs	r0, r1
 800f9b6:	4398      	bics	r0, r3
 800f9b8:	0003      	movs	r3, r0
 800f9ba:	40a1      	lsls	r1, r4
 800f9bc:	40a3      	lsls	r3, r4
 800f9be:	7814      	ldrb	r4, [r2, #0]
 800f9c0:	438c      	bics	r4, r1
 800f9c2:	4323      	orrs	r3, r4
 800f9c4:	7013      	strb	r3, [r2, #0]
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	2400      	movs	r4, #0
 800f9ca:	2701      	movs	r7, #1
 800f9cc:	46da      	mov	sl, fp
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	2b7f      	cmp	r3, #127	; 0x7f
 800f9d2:	d01f      	beq.n	800fa14 <hamming_decode+0x1dc>
 800f9d4:	1c59      	adds	r1, r3, #1
 800f9d6:	4219      	tst	r1, r3
 800f9d8:	d018      	beq.n	800fa0c <hamming_decode+0x1d4>
 800f9da:	08d2      	lsrs	r2, r2, #3
 800f9dc:	4691      	mov	r9, r2
 800f9de:	4648      	mov	r0, r9
 800f9e0:	aa04      	add	r2, sp, #16
 800f9e2:	5c12      	ldrb	r2, [r2, r0]
 800f9e4:	00c0      	lsls	r0, r0, #3
 800f9e6:	1a1b      	subs	r3, r3, r0
 800f9e8:	411a      	asrs	r2, r3
 800f9ea:	2507      	movs	r5, #7
 800f9ec:	0013      	movs	r3, r2
 800f9ee:	003a      	movs	r2, r7
 800f9f0:	4025      	ands	r5, r4
 800f9f2:	40aa      	lsls	r2, r5
 800f9f4:	4690      	mov	r8, r2
 800f9f6:	403b      	ands	r3, r7
 800f9f8:	4640      	mov	r0, r8
 800f9fa:	40ab      	lsls	r3, r5
 800f9fc:	08e6      	lsrs	r6, r4, #3
 800f9fe:	4456      	add	r6, sl
 800fa00:	7832      	ldrb	r2, [r6, #0]
 800fa02:	3401      	adds	r4, #1
 800fa04:	4382      	bics	r2, r0
 800fa06:	4313      	orrs	r3, r2
 800fa08:	7033      	strb	r3, [r6, #0]
 800fa0a:	b2e4      	uxtb	r4, r4
 800fa0c:	000b      	movs	r3, r1
 800fa0e:	b2da      	uxtb	r2, r3
 800fa10:	2b7f      	cmp	r3, #127	; 0x7f
 800fa12:	d1df      	bne.n	800f9d4 <hamming_decode+0x19c>
 800fa14:	4660      	mov	r0, ip
 800fa16:	b009      	add	sp, #36	; 0x24
 800fa18:	bc3c      	pop	{r2, r3, r4, r5}
 800fa1a:	4690      	mov	r8, r2
 800fa1c:	4699      	mov	r9, r3
 800fa1e:	46a2      	mov	sl, r4
 800fa20:	46ab      	mov	fp, r5
 800fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa24:	4663      	mov	r3, ip
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d0cd      	beq.n	800f9c6 <hamming_decode+0x18e>
 800fa2a:	e7b2      	b.n	800f992 <hamming_decode+0x15a>

0800fa2c <muldwu>:
 800fa2c:	0c13      	lsrs	r3, r2, #16
 800fa2e:	0412      	lsls	r2, r2, #16
 800fa30:	0c12      	lsrs	r2, r2, #16
 800fa32:	b570      	push	{r4, r5, r6, lr}
 800fa34:	0015      	movs	r5, r2
 800fa36:	0c0c      	lsrs	r4, r1, #16
 800fa38:	0409      	lsls	r1, r1, #16
 800fa3a:	0c09      	lsrs	r1, r1, #16
 800fa3c:	434d      	muls	r5, r1
 800fa3e:	4362      	muls	r2, r4
 800fa40:	0c2e      	lsrs	r6, r5, #16
 800fa42:	4359      	muls	r1, r3
 800fa44:	1992      	adds	r2, r2, r6
 800fa46:	4363      	muls	r3, r4
 800fa48:	0416      	lsls	r6, r2, #16
 800fa4a:	0c36      	lsrs	r6, r6, #16
 800fa4c:	1989      	adds	r1, r1, r6
 800fa4e:	0c12      	lsrs	r2, r2, #16
 800fa50:	042d      	lsls	r5, r5, #16
 800fa52:	0c2d      	lsrs	r5, r5, #16
 800fa54:	189a      	adds	r2, r3, r2
 800fa56:	0c0b      	lsrs	r3, r1, #16
 800fa58:	0409      	lsls	r1, r1, #16
 800fa5a:	1949      	adds	r1, r1, r5
 800fa5c:	18d2      	adds	r2, r2, r3
 800fa5e:	6002      	str	r2, [r0, #0]
 800fa60:	6041      	str	r1, [r0, #4]
 800fa62:	bd70      	pop	{r4, r5, r6, pc}

0800fa64 <eeprom_place_command>:
 800fa64:	b570      	push	{r4, r5, r6, lr}
 800fa66:	0004      	movs	r4, r0
 800fa68:	000d      	movs	r5, r1
 800fa6a:	0016      	movs	r6, r2
 800fa6c:	2102      	movs	r1, #2
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f7f7 f9d2 	bl	8006e18 <S2PI_WriteGpioPin>
 800fa74:	2064      	movs	r0, #100	; 0x64
 800fa76:	f7fa fa81 	bl	8009f7c <Time_DelayUSec>
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	0020      	movs	r0, r4
 800fa80:	f7f7 f9ca 	bl	8006e18 <S2PI_WriteGpioPin>
 800fa84:	2064      	movs	r0, #100	; 0x64
 800fa86:	f7fa fa79 	bl	8009f7c <Time_DelayUSec>
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	0020      	movs	r0, r4
 800fa90:	f7f7 f9c2 	bl	8006e18 <S2PI_WriteGpioPin>
 800fa94:	2064      	movs	r0, #100	; 0x64
 800fa96:	f7fa fa71 	bl	8009f7c <Time_DelayUSec>
 800fa9a:	002a      	movs	r2, r5
 800fa9c:	2102      	movs	r1, #2
 800fa9e:	0020      	movs	r0, r4
 800faa0:	f7f7 f9ba 	bl	8006e18 <S2PI_WriteGpioPin>
 800faa4:	2064      	movs	r0, #100	; 0x64
 800faa6:	f7fa fa69 	bl	8009f7c <Time_DelayUSec>
 800faaa:	2201      	movs	r2, #1
 800faac:	2100      	movs	r1, #0
 800faae:	0020      	movs	r0, r4
 800fab0:	f7f7 f9b2 	bl	8006e18 <S2PI_WriteGpioPin>
 800fab4:	2064      	movs	r0, #100	; 0x64
 800fab6:	f7fa fa61 	bl	8009f7c <Time_DelayUSec>
 800faba:	2200      	movs	r2, #0
 800fabc:	2100      	movs	r1, #0
 800fabe:	0020      	movs	r0, r4
 800fac0:	f7f7 f9aa 	bl	8006e18 <S2PI_WriteGpioPin>
 800fac4:	2064      	movs	r0, #100	; 0x64
 800fac6:	f7fa fa59 	bl	8009f7c <Time_DelayUSec>
 800faca:	2201      	movs	r2, #1
 800facc:	406a      	eors	r2, r5
 800face:	2501      	movs	r5, #1
 800fad0:	2102      	movs	r1, #2
 800fad2:	0020      	movs	r0, r4
 800fad4:	f7f7 f9a0 	bl	8006e18 <S2PI_WriteGpioPin>
 800fad8:	2064      	movs	r0, #100	; 0x64
 800fada:	f7fa fa4f 	bl	8009f7c <Time_DelayUSec>
 800fade:	2201      	movs	r2, #1
 800fae0:	2100      	movs	r1, #0
 800fae2:	0020      	movs	r0, r4
 800fae4:	f7f7 f998 	bl	8006e18 <S2PI_WriteGpioPin>
 800fae8:	2064      	movs	r0, #100	; 0x64
 800faea:	f7fa fa47 	bl	8009f7c <Time_DelayUSec>
 800faee:	2200      	movs	r2, #0
 800faf0:	2100      	movs	r1, #0
 800faf2:	0020      	movs	r0, r4
 800faf4:	f7f7 f990 	bl	8006e18 <S2PI_WriteGpioPin>
 800faf8:	2064      	movs	r0, #100	; 0x64
 800fafa:	f7fa fa3f 	bl	8009f7c <Time_DelayUSec>
 800fafe:	08f2      	lsrs	r2, r6, #3
 800fb00:	2102      	movs	r1, #2
 800fb02:	0020      	movs	r0, r4
 800fb04:	f7f7 f988 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb08:	2064      	movs	r0, #100	; 0x64
 800fb0a:	f7fa fa37 	bl	8009f7c <Time_DelayUSec>
 800fb0e:	2201      	movs	r2, #1
 800fb10:	2100      	movs	r1, #0
 800fb12:	0020      	movs	r0, r4
 800fb14:	f7f7 f980 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb18:	2064      	movs	r0, #100	; 0x64
 800fb1a:	f7fa fa2f 	bl	8009f7c <Time_DelayUSec>
 800fb1e:	2200      	movs	r2, #0
 800fb20:	2100      	movs	r1, #0
 800fb22:	0020      	movs	r0, r4
 800fb24:	f7f7 f978 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb28:	2064      	movs	r0, #100	; 0x64
 800fb2a:	f7fa fa27 	bl	8009f7c <Time_DelayUSec>
 800fb2e:	08b2      	lsrs	r2, r6, #2
 800fb30:	402a      	ands	r2, r5
 800fb32:	2102      	movs	r1, #2
 800fb34:	0020      	movs	r0, r4
 800fb36:	f7f7 f96f 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb3a:	2064      	movs	r0, #100	; 0x64
 800fb3c:	f7fa fa1e 	bl	8009f7c <Time_DelayUSec>
 800fb40:	2201      	movs	r2, #1
 800fb42:	2100      	movs	r1, #0
 800fb44:	0020      	movs	r0, r4
 800fb46:	f7f7 f967 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb4a:	2064      	movs	r0, #100	; 0x64
 800fb4c:	f7fa fa16 	bl	8009f7c <Time_DelayUSec>
 800fb50:	2200      	movs	r2, #0
 800fb52:	2100      	movs	r1, #0
 800fb54:	0020      	movs	r0, r4
 800fb56:	f7f7 f95f 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb5a:	2064      	movs	r0, #100	; 0x64
 800fb5c:	f7fa fa0e 	bl	8009f7c <Time_DelayUSec>
 800fb60:	0872      	lsrs	r2, r6, #1
 800fb62:	402a      	ands	r2, r5
 800fb64:	2102      	movs	r1, #2
 800fb66:	0020      	movs	r0, r4
 800fb68:	f7f7 f956 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb6c:	2064      	movs	r0, #100	; 0x64
 800fb6e:	f7fa fa05 	bl	8009f7c <Time_DelayUSec>
 800fb72:	2201      	movs	r2, #1
 800fb74:	2100      	movs	r1, #0
 800fb76:	0020      	movs	r0, r4
 800fb78:	f7f7 f94e 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb7c:	2064      	movs	r0, #100	; 0x64
 800fb7e:	f7fa f9fd 	bl	8009f7c <Time_DelayUSec>
 800fb82:	2200      	movs	r2, #0
 800fb84:	2100      	movs	r1, #0
 800fb86:	0020      	movs	r0, r4
 800fb88:	f7f7 f946 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb8c:	2064      	movs	r0, #100	; 0x64
 800fb8e:	f7fa f9f5 	bl	8009f7c <Time_DelayUSec>
 800fb92:	002a      	movs	r2, r5
 800fb94:	2102      	movs	r1, #2
 800fb96:	4032      	ands	r2, r6
 800fb98:	0020      	movs	r0, r4
 800fb9a:	f7f7 f93d 	bl	8006e18 <S2PI_WriteGpioPin>
 800fb9e:	2064      	movs	r0, #100	; 0x64
 800fba0:	f7fa f9ec 	bl	8009f7c <Time_DelayUSec>
 800fba4:	2201      	movs	r2, #1
 800fba6:	2100      	movs	r1, #0
 800fba8:	0020      	movs	r0, r4
 800fbaa:	f7f7 f935 	bl	8006e18 <S2PI_WriteGpioPin>
 800fbae:	2064      	movs	r0, #100	; 0x64
 800fbb0:	f7fa f9e4 	bl	8009f7c <Time_DelayUSec>
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	0020      	movs	r0, r4
 800fbba:	f7f7 f92d 	bl	8006e18 <S2PI_WriteGpioPin>
 800fbbe:	2064      	movs	r0, #100	; 0x64
 800fbc0:	f7fa f9dc 	bl	8009f7c <Time_DelayUSec>
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	2101      	movs	r1, #1
 800fbc8:	0020      	movs	r0, r4
 800fbca:	f7f7 f925 	bl	8006e18 <S2PI_WriteGpioPin>
 800fbce:	2064      	movs	r0, #100	; 0x64
 800fbd0:	f7fa f9d4 	bl	8009f7c <Time_DelayUSec>
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	0020      	movs	r0, r4
 800fbda:	f7f7 f91d 	bl	8006e18 <S2PI_WriteGpioPin>
 800fbde:	2064      	movs	r0, #100	; 0x64
 800fbe0:	f7fa f9cc 	bl	8009f7c <Time_DelayUSec>
 800fbe4:	bd70      	pop	{r4, r5, r6, pc}
 800fbe6:	46c0      	nop			; (mov r8, r8)

0800fbe8 <eeprom_write_ce>:
 800fbe8:	b570      	push	{r4, r5, r6, lr}
 800fbea:	0004      	movs	r4, r0
 800fbec:	000d      	movs	r5, r1
 800fbee:	0016      	movs	r6, r2
 800fbf0:	2101      	movs	r1, #1
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f7f7 f910 	bl	8006e18 <S2PI_WriteGpioPin>
 800fbf8:	2064      	movs	r0, #100	; 0x64
 800fbfa:	f7fa f9bf 	bl	8009f7c <Time_DelayUSec>
 800fbfe:	2200      	movs	r2, #0
 800fc00:	2102      	movs	r1, #2
 800fc02:	0020      	movs	r0, r4
 800fc04:	f7f7 f908 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc08:	2064      	movs	r0, #100	; 0x64
 800fc0a:	f7fa f9b7 	bl	8009f7c <Time_DelayUSec>
 800fc0e:	2200      	movs	r2, #0
 800fc10:	2100      	movs	r1, #0
 800fc12:	0020      	movs	r0, r4
 800fc14:	f7f7 f900 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc18:	2064      	movs	r0, #100	; 0x64
 800fc1a:	f7fa f9af 	bl	8009f7c <Time_DelayUSec>
 800fc1e:	2201      	movs	r2, #1
 800fc20:	2100      	movs	r1, #0
 800fc22:	0020      	movs	r0, r4
 800fc24:	f7f7 f8f8 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc28:	2064      	movs	r0, #100	; 0x64
 800fc2a:	f7fa f9a7 	bl	8009f7c <Time_DelayUSec>
 800fc2e:	2200      	movs	r2, #0
 800fc30:	2102      	movs	r1, #2
 800fc32:	0020      	movs	r0, r4
 800fc34:	f7f7 f8f0 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc38:	2064      	movs	r0, #100	; 0x64
 800fc3a:	f7fa f99f 	bl	8009f7c <Time_DelayUSec>
 800fc3e:	2200      	movs	r2, #0
 800fc40:	2100      	movs	r1, #0
 800fc42:	0020      	movs	r0, r4
 800fc44:	f7f7 f8e8 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc48:	2064      	movs	r0, #100	; 0x64
 800fc4a:	f7fa f997 	bl	8009f7c <Time_DelayUSec>
 800fc4e:	2201      	movs	r2, #1
 800fc50:	2100      	movs	r1, #0
 800fc52:	0020      	movs	r0, r4
 800fc54:	f7f7 f8e0 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc58:	2064      	movs	r0, #100	; 0x64
 800fc5a:	f7fa f98f 	bl	8009f7c <Time_DelayUSec>
 800fc5e:	2201      	movs	r2, #1
 800fc60:	2102      	movs	r1, #2
 800fc62:	0020      	movs	r0, r4
 800fc64:	f7f7 f8d8 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc68:	2064      	movs	r0, #100	; 0x64
 800fc6a:	f7fa f987 	bl	8009f7c <Time_DelayUSec>
 800fc6e:	2200      	movs	r2, #0
 800fc70:	2100      	movs	r1, #0
 800fc72:	0020      	movs	r0, r4
 800fc74:	f7f7 f8d0 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc78:	2064      	movs	r0, #100	; 0x64
 800fc7a:	f7fa f97f 	bl	8009f7c <Time_DelayUSec>
 800fc7e:	2201      	movs	r2, #1
 800fc80:	2100      	movs	r1, #0
 800fc82:	0020      	movs	r0, r4
 800fc84:	f7f7 f8c8 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc88:	2064      	movs	r0, #100	; 0x64
 800fc8a:	f7fa f977 	bl	8009f7c <Time_DelayUSec>
 800fc8e:	2200      	movs	r2, #0
 800fc90:	2102      	movs	r1, #2
 800fc92:	0020      	movs	r0, r4
 800fc94:	f7f7 f8c0 	bl	8006e18 <S2PI_WriteGpioPin>
 800fc98:	2064      	movs	r0, #100	; 0x64
 800fc9a:	f7fa f96f 	bl	8009f7c <Time_DelayUSec>
 800fc9e:	2200      	movs	r2, #0
 800fca0:	2100      	movs	r1, #0
 800fca2:	0020      	movs	r0, r4
 800fca4:	f7f7 f8b8 	bl	8006e18 <S2PI_WriteGpioPin>
 800fca8:	2064      	movs	r0, #100	; 0x64
 800fcaa:	f7fa f967 	bl	8009f7c <Time_DelayUSec>
 800fcae:	2201      	movs	r2, #1
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	0020      	movs	r0, r4
 800fcb4:	f7f7 f8b0 	bl	8006e18 <S2PI_WriteGpioPin>
 800fcb8:	2064      	movs	r0, #100	; 0x64
 800fcba:	f7fa f95f 	bl	8009f7c <Time_DelayUSec>
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	2102      	movs	r1, #2
 800fcc2:	0020      	movs	r0, r4
 800fcc4:	f7f7 f8a8 	bl	8006e18 <S2PI_WriteGpioPin>
 800fcc8:	2064      	movs	r0, #100	; 0x64
 800fcca:	f7fa f957 	bl	8009f7c <Time_DelayUSec>
 800fcce:	2200      	movs	r2, #0
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	0020      	movs	r0, r4
 800fcd4:	f7f7 f8a0 	bl	8006e18 <S2PI_WriteGpioPin>
 800fcd8:	2064      	movs	r0, #100	; 0x64
 800fcda:	f7fa f94f 	bl	8009f7c <Time_DelayUSec>
 800fcde:	2201      	movs	r2, #1
 800fce0:	2100      	movs	r1, #0
 800fce2:	0020      	movs	r0, r4
 800fce4:	f7f7 f898 	bl	8006e18 <S2PI_WriteGpioPin>
 800fce8:	2064      	movs	r0, #100	; 0x64
 800fcea:	f7fa f947 	bl	8009f7c <Time_DelayUSec>
 800fcee:	2201      	movs	r2, #1
 800fcf0:	2102      	movs	r1, #2
 800fcf2:	0020      	movs	r0, r4
 800fcf4:	f7f7 f890 	bl	8006e18 <S2PI_WriteGpioPin>
 800fcf8:	2064      	movs	r0, #100	; 0x64
 800fcfa:	f7fa f93f 	bl	8009f7c <Time_DelayUSec>
 800fcfe:	2200      	movs	r2, #0
 800fd00:	2100      	movs	r1, #0
 800fd02:	0020      	movs	r0, r4
 800fd04:	f7f7 f888 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd08:	2064      	movs	r0, #100	; 0x64
 800fd0a:	f7fa f937 	bl	8009f7c <Time_DelayUSec>
 800fd0e:	2201      	movs	r2, #1
 800fd10:	2100      	movs	r1, #0
 800fd12:	0020      	movs	r0, r4
 800fd14:	f7f7 f880 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd18:	2064      	movs	r0, #100	; 0x64
 800fd1a:	f7fa f92f 	bl	8009f7c <Time_DelayUSec>
 800fd1e:	2201      	movs	r2, #1
 800fd20:	2102      	movs	r1, #2
 800fd22:	406a      	eors	r2, r5
 800fd24:	0020      	movs	r0, r4
 800fd26:	f7f7 f877 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd2a:	2064      	movs	r0, #100	; 0x64
 800fd2c:	f7fa f926 	bl	8009f7c <Time_DelayUSec>
 800fd30:	2200      	movs	r2, #0
 800fd32:	2100      	movs	r1, #0
 800fd34:	0020      	movs	r0, r4
 800fd36:	f7f7 f86f 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd3a:	2064      	movs	r0, #100	; 0x64
 800fd3c:	f7fa f91e 	bl	8009f7c <Time_DelayUSec>
 800fd40:	2201      	movs	r2, #1
 800fd42:	2100      	movs	r1, #0
 800fd44:	0020      	movs	r0, r4
 800fd46:	f7f7 f867 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd4a:	2064      	movs	r0, #100	; 0x64
 800fd4c:	f7fa f916 	bl	8009f7c <Time_DelayUSec>
 800fd50:	0032      	movs	r2, r6
 800fd52:	2102      	movs	r1, #2
 800fd54:	0020      	movs	r0, r4
 800fd56:	f7f7 f85f 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd5a:	2064      	movs	r0, #100	; 0x64
 800fd5c:	f7fa f90e 	bl	8009f7c <Time_DelayUSec>
 800fd60:	2200      	movs	r2, #0
 800fd62:	2100      	movs	r1, #0
 800fd64:	0020      	movs	r0, r4
 800fd66:	f7f7 f857 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd6a:	2064      	movs	r0, #100	; 0x64
 800fd6c:	f7fa f906 	bl	8009f7c <Time_DelayUSec>
 800fd70:	2201      	movs	r2, #1
 800fd72:	2100      	movs	r1, #0
 800fd74:	0020      	movs	r0, r4
 800fd76:	f7f7 f84f 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd7a:	2064      	movs	r0, #100	; 0x64
 800fd7c:	f7fa f8fe 	bl	8009f7c <Time_DelayUSec>
 800fd80:	2200      	movs	r2, #0
 800fd82:	2102      	movs	r1, #2
 800fd84:	0020      	movs	r0, r4
 800fd86:	f7f7 f847 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd8a:	2064      	movs	r0, #100	; 0x64
 800fd8c:	f7fa f8f6 	bl	8009f7c <Time_DelayUSec>
 800fd90:	2200      	movs	r2, #0
 800fd92:	2100      	movs	r1, #0
 800fd94:	0020      	movs	r0, r4
 800fd96:	f7f7 f83f 	bl	8006e18 <S2PI_WriteGpioPin>
 800fd9a:	2064      	movs	r0, #100	; 0x64
 800fd9c:	f7fa f8ee 	bl	8009f7c <Time_DelayUSec>
 800fda0:	bd70      	pop	{r4, r5, r6, pc}
 800fda2:	46c0      	nop			; (mov r8, r8)

0800fda4 <EEPROM_Read>:
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	0004      	movs	r4, r0
 800fdaa:	000d      	movs	r5, r1
 800fdac:	0016      	movs	r6, r2
 800fdae:	f7f6 ffdd 	bl	8006d6c <S2PI_CaptureGpioControl>
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	db7b      	blt.n	800feae <EEPROM_Read+0x10a>
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	2101      	movs	r1, #1
 800fdba:	0020      	movs	r0, r4
 800fdbc:	f7ff ff14 	bl	800fbe8 <eeprom_write_ce>
 800fdc0:	220f      	movs	r2, #15
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	402a      	ands	r2, r5
 800fdc6:	0020      	movs	r0, r4
 800fdc8:	f7ff fe4c 	bl	800fa64 <eeprom_place_command>
 800fdcc:	2200      	movs	r2, #0
 800fdce:	2101      	movs	r1, #1
 800fdd0:	0020      	movs	r0, r4
 800fdd2:	f7ff ff09 	bl	800fbe8 <eeprom_write_ce>
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	2100      	movs	r1, #0
 800fdda:	0020      	movs	r0, r4
 800fddc:	f7f7 f81c 	bl	8006e18 <S2PI_WriteGpioPin>
 800fde0:	2064      	movs	r0, #100	; 0x64
 800fde2:	f7fa f8cb 	bl	8009f7c <Time_DelayUSec>
 800fde6:	2201      	movs	r2, #1
 800fde8:	2101      	movs	r1, #1
 800fdea:	0020      	movs	r0, r4
 800fdec:	f7f7 f814 	bl	8006e18 <S2PI_WriteGpioPin>
 800fdf0:	2064      	movs	r0, #100	; 0x64
 800fdf2:	f7fa f8c3 	bl	8009f7c <Time_DelayUSec>
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	0020      	movs	r0, r4
 800fdfc:	f7f7 f80c 	bl	8006e18 <S2PI_WriteGpioPin>
 800fe00:	2064      	movs	r0, #100	; 0x64
 800fe02:	f7fa f8bb 	bl	8009f7c <Time_DelayUSec>
 800fe06:	2201      	movs	r2, #1
 800fe08:	2100      	movs	r1, #0
 800fe0a:	0020      	movs	r0, r4
 800fe0c:	f7ff feec 	bl	800fbe8 <eeprom_write_ce>
 800fe10:	2300      	movs	r3, #0
 800fe12:	2507      	movs	r5, #7
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	7033      	strb	r3, [r6, #0]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	0020      	movs	r0, r4
 800fe1e:	f7f6 fffb 	bl	8006e18 <S2PI_WriteGpioPin>
 800fe22:	2064      	movs	r0, #100	; 0x64
 800fe24:	f7fa f8aa 	bl	8009f7c <Time_DelayUSec>
 800fe28:	aa01      	add	r2, sp, #4
 800fe2a:	2103      	movs	r1, #3
 800fe2c:	0020      	movs	r0, r4
 800fe2e:	f7f7 f817 	bl	8006e60 <S2PI_ReadGpioPin>
 800fe32:	9b01      	ldr	r3, [sp, #4]
 800fe34:	7832      	ldrb	r2, [r6, #0]
 800fe36:	40ab      	lsls	r3, r5
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	7033      	strb	r3, [r6, #0]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	2100      	movs	r1, #0
 800fe40:	0020      	movs	r0, r4
 800fe42:	f7f6 ffe9 	bl	8006e18 <S2PI_WriteGpioPin>
 800fe46:	2064      	movs	r0, #100	; 0x64
 800fe48:	f7fa f898 	bl	8009f7c <Time_DelayUSec>
 800fe4c:	3d01      	subs	r5, #1
 800fe4e:	d2e3      	bcs.n	800fe18 <EEPROM_Read+0x74>
 800fe50:	2201      	movs	r2, #1
 800fe52:	2101      	movs	r1, #1
 800fe54:	0020      	movs	r0, r4
 800fe56:	f7f6 ffdf 	bl	8006e18 <S2PI_WriteGpioPin>
 800fe5a:	2064      	movs	r0, #100	; 0x64
 800fe5c:	f7fa f88e 	bl	8009f7c <Time_DelayUSec>
 800fe60:	2201      	movs	r2, #1
 800fe62:	2100      	movs	r1, #0
 800fe64:	0020      	movs	r0, r4
 800fe66:	f7f6 ffd7 	bl	8006e18 <S2PI_WriteGpioPin>
 800fe6a:	2064      	movs	r0, #100	; 0x64
 800fe6c:	f7fa f886 	bl	8009f7c <Time_DelayUSec>
 800fe70:	2200      	movs	r2, #0
 800fe72:	2101      	movs	r1, #1
 800fe74:	0020      	movs	r0, r4
 800fe76:	f7ff feb7 	bl	800fbe8 <eeprom_write_ce>
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	0020      	movs	r0, r4
 800fe80:	f7f6 ffca 	bl	8006e18 <S2PI_WriteGpioPin>
 800fe84:	2064      	movs	r0, #100	; 0x64
 800fe86:	f7fa f879 	bl	8009f7c <Time_DelayUSec>
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	2101      	movs	r1, #1
 800fe8e:	0020      	movs	r0, r4
 800fe90:	f7f6 ffc2 	bl	8006e18 <S2PI_WriteGpioPin>
 800fe94:	2064      	movs	r0, #100	; 0x64
 800fe96:	f7fa f871 	bl	8009f7c <Time_DelayUSec>
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	2100      	movs	r1, #0
 800fe9e:	0020      	movs	r0, r4
 800fea0:	f7f6 ffba 	bl	8006e18 <S2PI_WriteGpioPin>
 800fea4:	2064      	movs	r0, #100	; 0x64
 800fea6:	f7fa f869 	bl	8009f7c <Time_DelayUSec>
 800feaa:	f7f6 ff81 	bl	8006db0 <S2PI_ReleaseGpioControl>
 800feae:	b002      	add	sp, #8
 800feb0:	bd70      	pop	{r4, r5, r6, pc}
 800feb2:	46c0      	nop			; (mov r8, r8)

0800feb4 <_init>:
 800feb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feb6:	bf00      	nop
 800feb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feba:	bc08      	pop	{r3}
 800febc:	469e      	mov	lr, r3
 800febe:	4770      	bx	lr

0800fec0 <_fini>:
 800fec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fec2:	bf00      	nop
 800fec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fec6:	bc08      	pop	{r3}
 800fec8:	469e      	mov	lr, r3
 800feca:	4770      	bx	lr
