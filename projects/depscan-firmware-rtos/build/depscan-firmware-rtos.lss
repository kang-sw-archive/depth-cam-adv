
build/depscan-firmware-rtos.elf:     file format elf32-littlearm
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08005755


Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006894 	.word	0x08006894

080001c4 <frame_dummy>:
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <frame_dummy+0x24>)
 80001c6:	b510      	push	{r4, lr}
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <frame_dummy+0x28>)
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <frame_dummy+0x2c>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	4808      	ldr	r0, [pc, #32]	; (80001f4 <frame_dummy+0x30>)
 80001d4:	6803      	ldr	r3, [r0, #0]
 80001d6:	b903      	cbnz	r3, 80001da <frame_dummy+0x16>
 80001d8:	bd10      	pop	{r4, pc}
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <frame_dummy+0x34>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d0fb      	beq.n	80001d8 <frame_dummy+0x14>
 80001e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001e4:	4718      	bx	r3
 80001e6:	bf00      	nop
 80001e8:	00000000 	.word	0x00000000
 80001ec:	200001ec 	.word	0x200001ec
 80001f0:	08006894 	.word	0x08006894
 80001f4:	200001e8 	.word	0x200001e8
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97e 	b.w	80005b4 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460e      	mov	r6, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9d08      	ldr	r5, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d150      	bne.n	8000382 <__udivmoddi4+0xb2>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96c      	bls.n	80003c0 <__udivmoddi4+0xf0>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0420 	rsb	r4, lr, #32
 80002f4:	fa20 f404 	lsr.w	r4, r0, r4
 80002f8:	fa01 f60e 	lsl.w	r6, r1, lr
 80002fc:	ea44 0c06 	orr.w	ip, r4, r6
 8000300:	fa02 f70e 	lsl.w	r7, r2, lr
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	fbbc f0f9 	udiv	r0, ip, r9
 8000312:	fa1f f887 	uxth.w	r8, r7
 8000316:	fb09 c610 	mls	r6, r9, r0, ip
 800031a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800031e:	fb00 f308 	mul.w	r3, r0, r8
 8000322:	42b3      	cmp	r3, r6
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x6a>
 8000326:	19f6      	adds	r6, r6, r7
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	f080 8122 	bcs.w	8000574 <__udivmoddi4+0x2a4>
 8000330:	42b3      	cmp	r3, r6
 8000332:	f240 811f 	bls.w	8000574 <__udivmoddi4+0x2a4>
 8000336:	3802      	subs	r0, #2
 8000338:	443e      	add	r6, r7
 800033a:	1af6      	subs	r6, r6, r3
 800033c:	b2a2      	uxth	r2, r4
 800033e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000342:	fb09 6613 	mls	r6, r9, r3, r6
 8000346:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800034a:	fb03 f808 	mul.w	r8, r3, r8
 800034e:	45a0      	cmp	r8, r4
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x96>
 8000352:	19e4      	adds	r4, r4, r7
 8000354:	f103 32ff 	add.w	r2, r3, #4294967295
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x2a0>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x2a0>
 8000362:	3b02      	subs	r3, #2
 8000364:	443c      	add	r4, r7
 8000366:	ebc8 0404 	rsb	r4, r8, r4
 800036a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	2d00      	cmp	r5, #0
 8000372:	d062      	beq.n	800043a <__udivmoddi4+0x16a>
 8000374:	fa24 f40e 	lsr.w	r4, r4, lr
 8000378:	2300      	movs	r3, #0
 800037a:	602c      	str	r4, [r5, #0]
 800037c:	606b      	str	r3, [r5, #4]
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0xc6>
 8000386:	2d00      	cmp	r5, #0
 8000388:	d055      	beq.n	8000436 <__udivmoddi4+0x166>
 800038a:	2100      	movs	r1, #0
 800038c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000390:	4608      	mov	r0, r1
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x1f0>
 80003a0:	42b3      	cmp	r3, r6
 80003a2:	d302      	bcc.n	80003aa <__udivmoddi4+0xda>
 80003a4:	4282      	cmp	r2, r0
 80003a6:	f200 80f8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 80003aa:	1a84      	subs	r4, r0, r2
 80003ac:	eb66 0603 	sbc.w	r6, r6, r3
 80003b0:	2001      	movs	r0, #1
 80003b2:	46b4      	mov	ip, r6
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d040      	beq.n	800043a <__udivmoddi4+0x16a>
 80003b8:	e885 1010 	stmia.w	r5, {r4, ip}
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	b912      	cbnz	r2, 80003c8 <__udivmoddi4+0xf8>
 80003c2:	2701      	movs	r7, #1
 80003c4:	fbb7 f7f2 	udiv	r7, r7, r2
 80003c8:	fab7 fe87 	clz	lr, r7
 80003cc:	f1be 0f00 	cmp.w	lr, #0
 80003d0:	d135      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d2:	1bf3      	subs	r3, r6, r7
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e2:	0c22      	lsrs	r2, r4, #16
 80003e4:	fb08 3610 	mls	r6, r8, r0, r3
 80003e8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80003ec:	fb0c f300 	mul.w	r3, ip, r0
 80003f0:	42b3      	cmp	r3, r6
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19f6      	adds	r6, r6, r7
 80003f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42b3      	cmp	r3, r6
 80003fe:	f200 80ce 	bhi.w	800059e <__udivmoddi4+0x2ce>
 8000402:	4610      	mov	r0, r2
 8000404:	1af6      	subs	r6, r6, r3
 8000406:	b2a2      	uxth	r2, r4
 8000408:	fbb6 f3f8 	udiv	r3, r6, r8
 800040c:	fb08 6613 	mls	r6, r8, r3, r6
 8000410:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000414:	fb0c fc03 	mul.w	ip, ip, r3
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b5 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 800042a:	4613      	mov	r3, r2
 800042c:	ebcc 0404 	rsb	r4, ip, r4
 8000430:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000434:	e79c      	b.n	8000370 <__udivmoddi4+0xa0>
 8000436:	4629      	mov	r1, r5
 8000438:	4628      	mov	r0, r5
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0120 	rsb	r1, lr, #32
 8000442:	fa06 f30e 	lsl.w	r3, r6, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f901 	lsr.w	r9, r0, r1
 800044e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000452:	40ce      	lsrs	r6, r1
 8000454:	ea49 0903 	orr.w	r9, r9, r3
 8000458:	fbb6 faf8 	udiv	sl, r6, r8
 800045c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000460:	fb08 661a 	mls	r6, r8, sl, r6
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800046c:	fb0a f20c 	mul.w	r2, sl, ip
 8000470:	429a      	cmp	r2, r3
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1be>
 8000478:	19db      	adds	r3, r3, r7
 800047a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800047e:	f080 8087 	bcs.w	8000590 <__udivmoddi4+0x2c0>
 8000482:	429a      	cmp	r2, r3
 8000484:	f240 8084 	bls.w	8000590 <__udivmoddi4+0x2c0>
 8000488:	f1aa 0a02 	sub.w	sl, sl, #2
 800048c:	443b      	add	r3, r7
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	fa1f f989 	uxth.w	r9, r9
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80004a0:	fb01 f60c 	mul.w	r6, r1, ip
 80004a4:	429e      	cmp	r6, r3
 80004a6:	d907      	bls.n	80004b8 <__udivmoddi4+0x1e8>
 80004a8:	19db      	adds	r3, r3, r7
 80004aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80004ae:	d26b      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 80004b0:	429e      	cmp	r6, r3
 80004b2:	d969      	bls.n	8000588 <__udivmoddi4+0x2b8>
 80004b4:	3902      	subs	r1, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1b9b      	subs	r3, r3, r6
 80004ba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80004be:	e78e      	b.n	80003de <__udivmoddi4+0x10e>
 80004c0:	f1c1 0e20 	rsb	lr, r1, #32
 80004c4:	fa22 f40e 	lsr.w	r4, r2, lr
 80004c8:	408b      	lsls	r3, r1
 80004ca:	4323      	orrs	r3, r4
 80004cc:	fa20 f70e 	lsr.w	r7, r0, lr
 80004d0:	fa06 f401 	lsl.w	r4, r6, r1
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	fa26 f60e 	lsr.w	r6, r6, lr
 80004dc:	433c      	orrs	r4, r7
 80004de:	fbb6 f9fc 	udiv	r9, r6, ip
 80004e2:	0c27      	lsrs	r7, r4, #16
 80004e4:	fb0c 6619 	mls	r6, ip, r9, r6
 80004e8:	fa1f f883 	uxth.w	r8, r3
 80004ec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80004f0:	fb09 f708 	mul.w	r7, r9, r8
 80004f4:	42b7      	cmp	r7, r6
 80004f6:	fa02 f201 	lsl.w	r2, r2, r1
 80004fa:	fa00 fa01 	lsl.w	sl, r0, r1
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x242>
 8000500:	18f6      	adds	r6, r6, r3
 8000502:	f109 30ff 	add.w	r0, r9, #4294967295
 8000506:	d241      	bcs.n	800058c <__udivmoddi4+0x2bc>
 8000508:	42b7      	cmp	r7, r6
 800050a:	d93f      	bls.n	800058c <__udivmoddi4+0x2bc>
 800050c:	f1a9 0902 	sub.w	r9, r9, #2
 8000510:	441e      	add	r6, r3
 8000512:	1bf6      	subs	r6, r6, r7
 8000514:	b2a0      	uxth	r0, r4
 8000516:	fbb6 f4fc 	udiv	r4, r6, ip
 800051a:	fb0c 6614 	mls	r6, ip, r4, r6
 800051e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000522:	fb04 f808 	mul.w	r8, r4, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x26a>
 800052a:	18ff      	adds	r7, r7, r3
 800052c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000530:	d228      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d926      	bls.n	8000584 <__udivmoddi4+0x2b4>
 8000536:	3c02      	subs	r4, #2
 8000538:	441f      	add	r7, r3
 800053a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800053e:	ebc8 0707 	rsb	r7, r8, r7
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	4644      	mov	r4, r8
 800054a:	464e      	mov	r6, r9
 800054c:	d314      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	d029      	beq.n	80005a4 <__udivmoddi4+0x2d4>
 8000550:	b365      	cbz	r5, 80005ac <__udivmoddi4+0x2dc>
 8000552:	ebba 0304 	subs.w	r3, sl, r4
 8000556:	eb67 0706 	sbc.w	r7, r7, r6
 800055a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800055e:	40cb      	lsrs	r3, r1
 8000560:	40cf      	lsrs	r7, r1
 8000562:	ea4e 0303 	orr.w	r3, lr, r3
 8000566:	e885 0088 	stmia.w	r5, {r3, r7}
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	4613      	mov	r3, r2
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x96>
 8000574:	4610      	mov	r0, r2
 8000576:	e6e0      	b.n	800033a <__udivmoddi4+0x6a>
 8000578:	ebb8 0402 	subs.w	r4, r8, r2
 800057c:	eb69 0603 	sbc.w	r6, r9, r3
 8000580:	3801      	subs	r0, #1
 8000582:	e7e5      	b.n	8000550 <__udivmoddi4+0x280>
 8000584:	4604      	mov	r4, r0
 8000586:	e7d8      	b.n	800053a <__udivmoddi4+0x26a>
 8000588:	4611      	mov	r1, r2
 800058a:	e795      	b.n	80004b8 <__udivmoddi4+0x1e8>
 800058c:	4681      	mov	r9, r0
 800058e:	e7c0      	b.n	8000512 <__udivmoddi4+0x242>
 8000590:	468a      	mov	sl, r1
 8000592:	e77c      	b.n	800048e <__udivmoddi4+0x1be>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e748      	b.n	800042c <__udivmoddi4+0x15c>
 800059a:	4608      	mov	r0, r1
 800059c:	e70a      	b.n	80003b4 <__udivmoddi4+0xe4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443e      	add	r6, r7
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x134>
 80005a4:	45c2      	cmp	sl, r8
 80005a6:	d3e7      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80005a8:	463e      	mov	r6, r7
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x280>
 80005ac:	4629      	mov	r1, r5
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask( void* argument )
{
 80005b8:	b508      	push	{r3, lr}
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 80005ba:	f000 f957 	bl	800086c <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for ( ;; ) {
        void CommProc( void );
        CommProc();
 80005be:	f005 f873 	bl	80056a8 <CommProc>
        osThreadYield();
 80005c2:	f003 ff5b 	bl	800447c <osThreadYield>
 80005c6:	e7fa      	b.n	80005be <StartDefaultTask+0x6>

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config( void )
{
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005cc:	2230      	movs	r2, #48	; 0x30
 80005ce:	2100      	movs	r1, #0
 80005d0:	a808      	add	r0, sp, #32
 80005d2:	f005 f96c 	bl	80058ae <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005d6:	2100      	movs	r1, #0
 80005d8:	2214      	movs	r2, #20
 80005da:	a803      	add	r0, sp, #12
 80005dc:	f005 f967 	bl	80058ae <memset>

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2400      	movs	r4, #0
 80005e2:	4b1e      	ldr	r3, [pc, #120]	; (800065c <SystemClock_Config+0x94>)
 80005e4:	9401      	str	r4, [sp, #4]
 80005e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE2 );
 80005f0:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <SystemClock_Config+0x98>)
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b01      	ldr	r3, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE2 );
 80005fa:	9402      	str	r4, [sp, #8]
 80005fc:	6813      	ldr	r3, [r2, #0]
 80005fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	6813      	ldr	r3, [r2, #0]
 800060a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060e:	9302      	str	r3, [sp, #8]
 8000610:	9b02      	ldr	r3, [sp, #8]
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000612:	2301      	movs	r3, #1
 8000614:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 800061c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000620:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM       = 8;
 8000622:	2308      	movs	r3, #8
 8000624:	9310      	str	r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN       = 336;
 8000626:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800062a:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
 800062c:	2304      	movs	r3, #4
    __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE2 );
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800062e:	2502      	movs	r5, #2
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM       = 8;
    RCC_OscInitStruct.PLL.PLLN       = 336;
    RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
 8000630:	9312      	str	r3, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ       = 7;
    if ( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK ) {
 8000632:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM       = 8;
    RCC_OscInitStruct.PLL.PLLN       = 336;
    RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
    RCC_OscInitStruct.PLL.PLLQ       = 7;
 8000634:	2307      	movs	r3, #7
 8000636:	9313      	str	r3, [sp, #76]	; 0x4c
    __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE2 );
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8000638:	950e      	str	r5, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM       = 8;
    RCC_OscInitStruct.PLL.PLLN       = 336;
    RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
    RCC_OscInitStruct.PLL.PLLQ       = 7;
    if ( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK ) {
 800063a:	f001 fd95 	bl	8002168 <HAL_RCC_OscConfig>
        Error_Handler();
    }
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800063e:	230f      	movs	r3, #15
 8000640:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if ( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK ) {
 8000642:	4629      	mov	r1, r5
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if ( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK ) {
 8000648:	a803      	add	r0, sp, #12
        Error_Handler();
    }
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	9504      	str	r5, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800064c:	9405      	str	r4, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	9407      	str	r4, [sp, #28]

    if ( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK ) {
 8000652:	f001 ff51 	bl	80024f8 <HAL_RCC_ClockConfig>
        Error_Handler();
    }
}
 8000656:	b015      	add	sp, #84	; 0x54
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main( void )
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09a      	sub	sp, #104	; 0x68
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000668:	f002 f93a 	bl	80028e0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800066c:	f7ff ffac 	bl	80005c8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init( void )
{
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000670:	2214      	movs	r2, #20
 8000672:	2100      	movs	r1, #0
 8000674:	a812      	add	r0, sp, #72	; 0x48

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	2400      	movs	r4, #0
  * @param None
  * @retval None
  */
static void MX_GPIO_Init( void )
{
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000678:	f005 f919 	bl	80058ae <memset>

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800067c:	4b6c      	ldr	r3, [pc, #432]	; (8000830 <main+0x1cc>)
 800067e:	9401      	str	r4, [sp, #4]
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET );
 8000682:	486c      	ldr	r0, [pc, #432]	; (8000834 <main+0x1d0>)
static void MX_GPIO_Init( void )
{
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
 800068a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000694:	9402      	str	r4, [sp, #8]
 8000696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000698:	f042 0204 	orr.w	r2, r2, #4
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
 800069e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a0:	f002 0204 	and.w	r2, r2, #4
 80006a4:	9202      	str	r2, [sp, #8]
 80006a6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	9403      	str	r4, [sp, #12]
 80006aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ac:	f042 0201 	orr.w	r2, r2, #1
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
 80006b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b4:	f002 0201 	and.w	r2, r2, #1
 80006b8:	9203      	str	r2, [sp, #12]
 80006ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	9404      	str	r4, [sp, #16]
 80006be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c0:	f042 0202 	orr.w	r2, r2, #2
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	9304      	str	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET );
 80006ce:	4622      	mov	r2, r4
 80006d0:	2101      	movs	r1, #1

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET );
 80006d4:	f002 f8ac 	bl	8002830 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( GPIOB, MOT_DIR_1_Pin | MOT_DIR_2_Pin, GPIO_PIN_RESET );
 80006d8:	4622      	mov	r2, r4
 80006da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80006de:	4856      	ldr	r0, [pc, #344]	; (8000838 <main+0x1d4>)
 80006e0:	f002 f8a6 	bl	8002830 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : ARGUS_CS_Pin */
    GPIO_InitStruct.Pin   = ARGUS_CS_Pin;
 80006e4:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init( ARGUS_CS_GPIO_Port, &GPIO_InitStruct );
 80006e6:	a912      	add	r1, sp, #72	; 0x48
 80006e8:	4852      	ldr	r0, [pc, #328]	; (8000834 <main+0x1d0>)

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( GPIOB, MOT_DIR_1_Pin | MOT_DIR_2_Pin, GPIO_PIN_RESET );

    /*Configure GPIO pin : ARGUS_CS_Pin */
    GPIO_InitStruct.Pin   = ARGUS_CS_Pin;
 80006ea:	9512      	str	r5, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init( ARGUS_CS_GPIO_Port, &GPIO_InitStruct );

    /*Configure GPIO pin : ARGUS_IRQ_Pin */
    GPIO_InitStruct.Pin  = ARGUS_IRQ_Pin;
 80006ec:	2602      	movs	r6, #2
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( GPIOB, MOT_DIR_1_Pin | MOT_DIR_2_Pin, GPIO_PIN_RESET );

    /*Configure GPIO pin : ARGUS_CS_Pin */
    GPIO_InitStruct.Pin   = ARGUS_CS_Pin;
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80006ee:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80006f0:	9414      	str	r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init( ARGUS_CS_GPIO_Port, &GPIO_InitStruct );
 80006f4:	f001 ffce 	bl	8002694 <HAL_GPIO_Init>

    /*Configure GPIO pin : ARGUS_IRQ_Pin */
    GPIO_InitStruct.Pin  = ARGUS_IRQ_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f8:	4b50      	ldr	r3, [pc, #320]	; (800083c <main+0x1d8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init( ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct );
 80006fa:	484e      	ldr	r0, [pc, #312]	; (8000834 <main+0x1d0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init( ARGUS_CS_GPIO_Port, &GPIO_InitStruct );

    /*Configure GPIO pin : ARGUS_IRQ_Pin */
    GPIO_InitStruct.Pin  = ARGUS_IRQ_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fc:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init( ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct );
 80006fe:	a912      	add	r1, sp, #72	; 0x48
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init( ARGUS_CS_GPIO_Port, &GPIO_InitStruct );

    /*Configure GPIO pin : ARGUS_IRQ_Pin */
    GPIO_InitStruct.Pin  = ARGUS_IRQ_Pin;
 8000700:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	9414      	str	r4, [sp, #80]	; 0x50
    HAL_GPIO_Init( ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct );
 8000704:	f001 ffc6 	bl	8002694 <HAL_GPIO_Init>

    /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
    GPIO_InitStruct.Pin   = MOT_DIR_1_Pin | MOT_DIR_2_Pin;
 8000708:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init( GPIOB, &GPIO_InitStruct );
 800070c:	a912      	add	r1, sp, #72	; 0x48
 800070e:	484a      	ldr	r0, [pc, #296]	; (8000838 <main+0x1d4>)
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init( ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct );

    /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
    GPIO_InitStruct.Pin   = MOT_DIR_1_Pin | MOT_DIR_2_Pin;
 8000710:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000712:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000714:	9414      	str	r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init( GPIOB, &GPIO_InitStruct );
 8000718:	f001 ffbc 	bl	8002694 <HAL_GPIO_Init>

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef         sClockSourceConfig   = { 0 };
 800071c:	2210      	movs	r2, #16
 800071e:	4621      	mov	r1, r4
 8000720:	a807      	add	r0, sp, #28
 8000722:	f005 f8c4 	bl	80058ae <memset>
    TIM_MasterConfigTypeDef        sMasterConfig        = { 0 };
    TIM_OC_InitTypeDef             sConfigOC            = { 0 };
 8000726:	221c      	movs	r2, #28
 8000728:	4621      	mov	r1, r4
 800072a:	a80b      	add	r0, sp, #44	; 0x2c
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance               = TIM1;
 800072c:	4d44      	ldr	r5, [pc, #272]	; (8000840 <main+0x1dc>)
    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef         sClockSourceConfig   = { 0 };
    TIM_MasterConfigTypeDef        sMasterConfig        = { 0 };
 800072e:	9405      	str	r4, [sp, #20]
 8000730:	9406      	str	r4, [sp, #24]
    TIM_OC_InitTypeDef             sConfigOC            = { 0 };
 8000732:	f005 f8bc 	bl	80058ae <memset>
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000736:	2220      	movs	r2, #32
 8000738:	4621      	mov	r1, r4
 800073a:	a812      	add	r0, sp, #72	; 0x48
 800073c:	f005 f8b7 	bl	80058ae <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance               = TIM1;
 8000740:	4b40      	ldr	r3, [pc, #256]	; (8000844 <main+0x1e0>)
    htim1.Init.Prescaler         = 0;
    htim1.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000742:	60ac      	str	r4, [r5, #8]
    htim1.Init.Period            = 0;
    htim1.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
    htim1.Init.RepetitionCounter = 0;
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if ( HAL_TIM_Base_Init( &htim1 ) != HAL_OK ) {
 8000744:	4628      	mov	r0, r5

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance               = TIM1;
    htim1.Init.Prescaler         = 0;
 8000746:	e885 0018 	stmia.w	r5, {r3, r4}
    htim1.Init.CounterMode       = TIM_COUNTERMODE_UP;
    htim1.Init.Period            = 0;
 800074a:	60ec      	str	r4, [r5, #12]
    htim1.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800074c:	612c      	str	r4, [r5, #16]
    htim1.Init.RepetitionCounter = 0;
 800074e:	616c      	str	r4, [r5, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	61ac      	str	r4, [r5, #24]
    if ( HAL_TIM_Base_Init( &htim1 ) != HAL_OK ) {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000752:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    htim1.Init.CounterMode       = TIM_COUNTERMODE_UP;
    htim1.Init.Period            = 0;
    htim1.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
    htim1.Init.RepetitionCounter = 0;
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if ( HAL_TIM_Base_Init( &htim1 ) != HAL_OK ) {
 8000756:	f002 fa7f 	bl	8002c58 <HAL_TIM_Base_Init>
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if ( HAL_TIM_ConfigClockSource( &htim1, &sClockSourceConfig ) != HAL_OK ) {
 800075a:	a907      	add	r1, sp, #28
 800075c:	4628      	mov	r0, r5
    htim1.Init.RepetitionCounter = 0;
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if ( HAL_TIM_Base_Init( &htim1 ) != HAL_OK ) {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	f8cd 801c 	str.w	r8, [sp, #28]
    if ( HAL_TIM_ConfigClockSource( &htim1, &sClockSourceConfig ) != HAL_OK ) {
 8000762:	f002 fb46 	bl	8002df2 <HAL_TIM_ConfigClockSource>
        Error_Handler();
    }
    if ( HAL_TIM_PWM_Init( &htim1 ) != HAL_OK ) {
 8000766:	4628      	mov	r0, r5
 8000768:	f002 fa90 	bl	8002c8c <HAL_TIM_PWM_Init>
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim1, &sMasterConfig ) != HAL_OK ) {
 800076c:	a905      	add	r1, sp, #20
 800076e:	4628      	mov	r0, r5
        Error_Handler();
    }
    sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 8000770:	2760      	movs	r7, #96	; 0x60
        Error_Handler();
    }
    if ( HAL_TIM_PWM_Init( &htim1 ) != HAL_OK ) {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000772:	9405      	str	r4, [sp, #20]
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 8000774:	9406      	str	r4, [sp, #24]
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim1, &sMasterConfig ) != HAL_OK ) {
 8000776:	f002 fbd3 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
    sConfigOC.OCPolarity   = TIM_OCPOLARITY_LOW;
    sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
    sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
    sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
    if ( HAL_TIM_PWM_ConfigChannel( &htim1, &sConfigOC, TIM_CHANNEL_1 ) != HAL_OK ) {
 800077a:	4622      	mov	r2, r4
 800077c:	a90b      	add	r1, sp, #44	; 0x2c
 800077e:	4628      	mov	r0, r5
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim1, &sMasterConfig ) != HAL_OK ) {
        Error_Handler();
    }
    sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 8000780:	970b      	str	r7, [sp, #44]	; 0x2c
    sConfigOC.Pulse        = 0;
 8000782:	940c      	str	r4, [sp, #48]	; 0x30
    sConfigOC.OCPolarity   = TIM_OCPOLARITY_LOW;
 8000784:	960d      	str	r6, [sp, #52]	; 0x34
    sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8000786:	940e      	str	r4, [sp, #56]	; 0x38
    sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8000788:	940f      	str	r4, [sp, #60]	; 0x3c
    sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800078a:	9410      	str	r4, [sp, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078c:	9411      	str	r4, [sp, #68]	; 0x44
    if ( HAL_TIM_PWM_ConfigChannel( &htim1, &sConfigOC, TIM_CHANNEL_1 ) != HAL_OK ) {
 800078e:	f002 fac3 	bl	8002d18 <HAL_TIM_PWM_ConfigChannel>
    sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
    sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
    sBreakDeadTimeConfig.DeadTime         = 0;
    sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
    sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
 8000792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
    if ( HAL_TIMEx_ConfigBreakDeadTime( &htim1, &sBreakDeadTimeConfig ) != HAL_OK ) {
 8000796:	a912      	add	r1, sp, #72	; 0x48
 8000798:	4628      	mov	r0, r5
    sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
    sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
    sBreakDeadTimeConfig.DeadTime         = 0;
    sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
    sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
 800079a:	9317      	str	r3, [sp, #92]	; 0x5c
    sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
    if ( HAL_TIM_PWM_ConfigChannel( &htim1, &sConfigOC, TIM_CHANNEL_1 ) != HAL_OK ) {
        Error_Handler();
    }
    sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
 800079c:	9412      	str	r4, [sp, #72]	; 0x48
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800079e:	9413      	str	r4, [sp, #76]	; 0x4c
    sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
 80007a0:	9414      	str	r4, [sp, #80]	; 0x50
    sBreakDeadTimeConfig.DeadTime         = 0;
 80007a2:	9415      	str	r4, [sp, #84]	; 0x54
    sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
 80007a4:	9416      	str	r4, [sp, #88]	; 0x58
    sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
    sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a6:	9419      	str	r4, [sp, #100]	; 0x64
    if ( HAL_TIMEx_ConfigBreakDeadTime( &htim1, &sBreakDeadTimeConfig ) != HAL_OK ) {
 80007a8:	f002 fbf4 	bl	8002f94 <HAL_TIMEx_ConfigBreakDeadTime>
        Error_Handler();
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit( &htim1 );
 80007ac:	4628      	mov	r0, r5
 80007ae:	f000 faef 	bl	8000d90 <HAL_TIM_MspPostInit>

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef  sClockSourceConfig = { 0 };
 80007b2:	2210      	movs	r2, #16
 80007b4:	4621      	mov	r1, r4
 80007b6:	a80b      	add	r0, sp, #44	; 0x2c
    TIM_OC_InitTypeDef      sConfigOC          = { 0 };

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance               = TIM3;
 80007b8:	4d23      	ldr	r5, [pc, #140]	; (8000848 <main+0x1e4>)

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef  sClockSourceConfig = { 0 };
 80007ba:	f005 f878 	bl	80058ae <memset>
    TIM_MasterConfigTypeDef sMasterConfig      = { 0 };
    TIM_OC_InitTypeDef      sConfigOC          = { 0 };
 80007be:	221c      	movs	r2, #28
 80007c0:	4621      	mov	r1, r4
 80007c2:	a812      	add	r0, sp, #72	; 0x48
    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef  sClockSourceConfig = { 0 };
    TIM_MasterConfigTypeDef sMasterConfig      = { 0 };
 80007c4:	9407      	str	r4, [sp, #28]
 80007c6:	9408      	str	r4, [sp, #32]
    TIM_OC_InitTypeDef      sConfigOC          = { 0 };
 80007c8:	f005 f871 	bl	80058ae <memset>

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance               = TIM3;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <main+0x1e8>)
    htim3.Init.Prescaler         = 0;
    htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80007ce:	60ac      	str	r4, [r5, #8]
    htim3.Init.Period            = 0;
    htim3.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if ( HAL_TIM_Base_Init( &htim3 ) != HAL_OK ) {
 80007d0:	4628      	mov	r0, r5

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance               = TIM3;
    htim3.Init.Prescaler         = 0;
 80007d2:	e885 0018 	stmia.w	r5, {r3, r4}
    htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
    htim3.Init.Period            = 0;
 80007d6:	60ec      	str	r4, [r5, #12]
    htim3.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80007d8:	612c      	str	r4, [r5, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	61ac      	str	r4, [r5, #24]
    if ( HAL_TIM_Base_Init( &htim3 ) != HAL_OK ) {
 80007dc:	f002 fa3c 	bl	8002c58 <HAL_TIM_Base_Init>
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if ( HAL_TIM_ConfigClockSource( &htim3, &sClockSourceConfig ) != HAL_OK ) {
 80007e0:	a90b      	add	r1, sp, #44	; 0x2c
 80007e2:	4628      	mov	r0, r5
    htim3.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if ( HAL_TIM_Base_Init( &htim3 ) != HAL_OK ) {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    if ( HAL_TIM_ConfigClockSource( &htim3, &sClockSourceConfig ) != HAL_OK ) {
 80007e8:	f002 fb03 	bl	8002df2 <HAL_TIM_ConfigClockSource>
        Error_Handler();
    }
    if ( HAL_TIM_PWM_Init( &htim3 ) != HAL_OK ) {
 80007ec:	4628      	mov	r0, r5
 80007ee:	f002 fa4d 	bl	8002c8c <HAL_TIM_PWM_Init>
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim3, &sMasterConfig ) != HAL_OK ) {
 80007f2:	a907      	add	r1, sp, #28
 80007f4:	4628      	mov	r0, r5
        Error_Handler();
    }
    if ( HAL_TIM_PWM_Init( &htim3 ) != HAL_OK ) {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	9407      	str	r4, [sp, #28]
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 80007f8:	9408      	str	r4, [sp, #32]
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim3, &sMasterConfig ) != HAL_OK ) {
 80007fa:	f002 fb91 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
    sConfigOC.Pulse      = 0;
    sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    if ( HAL_TIM_PWM_ConfigChannel( &htim3, &sConfigOC, TIM_CHANNEL_1 ) != HAL_OK ) {
 80007fe:	4622      	mov	r2, r4
 8000800:	a912      	add	r1, sp, #72	; 0x48
 8000802:	4628      	mov	r0, r5
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim3, &sMasterConfig ) != HAL_OK ) {
        Error_Handler();
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
 8000804:	9712      	str	r7, [sp, #72]	; 0x48
    sConfigOC.Pulse      = 0;
 8000806:	9413      	str	r4, [sp, #76]	; 0x4c
    sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000808:	9614      	str	r6, [sp, #80]	; 0x50
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	9416      	str	r4, [sp, #88]	; 0x58
    if ( HAL_TIM_PWM_ConfigChannel( &htim3, &sConfigOC, TIM_CHANNEL_1 ) != HAL_OK ) {
 800080c:	f002 fa84 	bl	8002d18 <HAL_TIM_PWM_ConfigChannel>
        Error_Handler();
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit( &htim3 );
 8000810:	4628      	mov	r0, r5
 8000812:	f000 fabd 	bl	8000d90 <HAL_TIM_MspPostInit>
    MX_TIM3_Init();
    /* USER CODE BEGIN 2 */

    /* USER CODE END 2 */
    /* Init scheduler */
    osKernelInitialize();
 8000816:	f003 fd99 	bl	800434c <osKernelInitialize>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle = osThreadNew( StartDefaultTask, NULL, &defaultTask_attributes );
 800081a:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <main+0x1ec>)
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <main+0x1f0>)
 800081e:	4621      	mov	r1, r4
 8000820:	f003 fdd0 	bl	80043c4 <osThreadNew>
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <main+0x1f4>)
 8000826:	6018      	str	r0, [r3, #0]
    /* add threads, ... */

    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8000828:	f003 fdac 	bl	8004384 <osKernelStart>
 800082c:	e7fe      	b.n	800082c <main+0x1c8>
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40020800 	.word	0x40020800
 8000838:	40020400 	.word	0x40020400
 800083c:	10110000 	.word	0x10110000
 8000840:	20005618 	.word	0x20005618
 8000844:	40010000 	.word	0x40010000
 8000848:	200055d8 	.word	0x200055d8
 800084c:	40000400 	.word	0x40000400
 8000850:	080068ac 	.word	0x080068ac
 8000854:	080005b9 	.word	0x080005b9
 8000858:	200055d4 	.word	0x200055d4

0800085c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef* htim )
{
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if ( htim->Instance == TIM2 ) {
 800085c:	6803      	ldr	r3, [r0, #0]
 800085e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000862:	d101      	bne.n	8000868 <HAL_TIM_PeriodElapsedCallback+0xc>
        HAL_IncTick();
 8000864:	f002 b856 	b.w	8002914 <HAL_IncTick>
 8000868:	4770      	bx	lr

0800086a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler( void )
{
 800086a:	4770      	bx	lr

0800086c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800086c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800086e:	2200      	movs	r2, #0
 8000870:	490e      	ldr	r1, [pc, #56]	; (80008ac <MX_USB_DEVICE_Init+0x40>)
 8000872:	480f      	ldr	r0, [pc, #60]	; (80008b0 <MX_USB_DEVICE_Init+0x44>)
 8000874:	f004 f8da 	bl	8004a2c <USBD_Init>
 8000878:	b108      	cbz	r0, 800087e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800087a:	f7ff fff6 	bl	800086a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <MX_USB_DEVICE_Init+0x48>)
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <MX_USB_DEVICE_Init+0x44>)
 8000882:	f004 f8e8 	bl	8004a56 <USBD_RegisterClass>
 8000886:	b108      	cbz	r0, 800088c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8000888:	f7ff ffef 	bl	800086a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800088c:	490a      	ldr	r1, [pc, #40]	; (80008b8 <MX_USB_DEVICE_Init+0x4c>)
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <MX_USB_DEVICE_Init+0x44>)
 8000890:	f004 fdb0 	bl	80053f4 <USBD_CDC_RegisterInterface>
 8000894:	b108      	cbz	r0, 800089a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8000896:	f7ff ffe8 	bl	800086a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USB_DEVICE_Init+0x44>)
 800089c:	f004 f8e2 	bl	8004a64 <USBD_Start>
 80008a0:	b118      	cbz	r0, 80008aa <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80008a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
  {
    Error_Handler();
 80008a6:	f7ff bfe0 	b.w	800086a <Error_Handler>
 80008aa:	bd08      	pop	{r3, pc}
 80008ac:	20000004 	.word	0x20000004
 80008b0:	20005658 	.word	0x20005658
 80008b4:	200000b8 	.word	0x200000b8
 80008b8:	20000054 	.word	0x20000054

080008bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80008bc:	b530      	push	{r4, r5, lr}
 80008be:	4604      	mov	r4, r0
 80008c0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	2214      	movs	r2, #20
 80008c4:	2100      	movs	r1, #0
 80008c6:	a803      	add	r0, sp, #12
 80008c8:	f004 fff1 	bl	80058ae <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008d2:	d136      	bne.n	8000942 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4c1c      	ldr	r4, [pc, #112]	; (8000948 <HAL_PCD_MspInit+0x8c>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	481d      	ldr	r0, [pc, #116]	; (800094c <HAL_PCD_MspInit+0x90>)
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	2500      	movs	r5, #0
 80008da:	9501      	str	r5, [sp, #4]
 80008dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6323      	str	r3, [r4, #48]	; 0x30
 80008e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	9b01      	ldr	r3, [sp, #4]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	a903      	add	r1, sp, #12
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f001 fecd 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	a903      	add	r1, sp, #12

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	480f      	ldr	r0, [pc, #60]	; (800094c <HAL_PCD_MspInit+0x90>)

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f001 febf 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6363      	str	r3, [r4, #52]	; 0x34
 800091e:	9502      	str	r5, [sp, #8]
 8000920:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	6463      	str	r3, [r4, #68]	; 0x44
 8000928:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000930:	2043      	movs	r0, #67	; 0x43
 8000932:	462a      	mov	r2, r5
 8000934:	2105      	movs	r1, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000936:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000938:	f001 ff90 	bl	800285c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800093c:	2043      	movs	r0, #67	; 0x43
 800093e:	f001 ffc1 	bl	80028c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000942:	b009      	add	sp, #36	; 0x24
 8000944:	bd30      	pop	{r4, r5, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000950:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8000954:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000958:	f004 b89b 	b.w	8004a92 <USBD_LL_SetupStage>

0800095c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800095c:	231c      	movs	r3, #28
 800095e:	fb03 0301 	mla	r3, r3, r1, r0
 8000962:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000966:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800096a:	f004 b8bf 	b.w	8004aec <USBD_LL_DataOutStage>

0800096e <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800096e:	231c      	movs	r3, #28
 8000970:	fb03 0301 	mla	r3, r3, r1, r0
 8000974:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800097a:	f004 b8f1 	b.w	8004b60 <USBD_LL_DataInStage>

0800097e <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800097e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000982:	f004 b982 	b.w	8004c8a <USBD_LL_SOF>

08000986 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000986:	68c3      	ldr	r3, [r0, #12]
 8000988:	2b02      	cmp	r3, #2
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800098a:	b510      	push	{r4, lr}
 800098c:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800098e:	d001      	beq.n	8000994 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8000990:	f7ff ff6b 	bl	800086a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000994:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000998:	2101      	movs	r1, #1
 800099a:	f004 f964 	bl	8004c66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800099e:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80009a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80009a6:	f004 b937 	b.w	8004c18 <USBD_LL_Reset>
	...

080009ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80009ac:	b510      	push	{r4, lr}
 80009ae:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80009b0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80009b4:	f004 f95a 	bl	8004c6c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80009b8:	6822      	ldr	r2, [r4, #0]
 80009ba:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80009c6:	6a23      	ldr	r3, [r4, #32]
 80009c8:	b123      	cbz	r3, 80009d4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80009ca:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <HAL_PCD_SuspendCallback+0x2c>)
 80009cc:	6913      	ldr	r3, [r2, #16]
 80009ce:	f043 0306 	orr.w	r3, r3, #6
 80009d2:	6113      	str	r3, [r2, #16]
 80009d4:	bd10      	pop	{r4, pc}
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80009dc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80009e0:	f004 b94d 	b.w	8004c7e <USBD_LL_Resume>

080009e4 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80009e4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80009e8:	f004 b95d 	b.w	8004ca6 <USBD_LL_IsoOUTIncomplete>

080009ec <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80009ec:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80009f0:	f004 b957 	b.w	8004ca2 <USBD_LL_IsoINIncomplete>

080009f4 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80009f4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80009f8:	f004 b957 	b.w	8004caa <USBD_LL_DevConnected>

080009fc <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80009fc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a00:	f004 b955 	b.w	8004cae <USBD_LL_DevDisconnected>

08000a04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000a04:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8000a06:	7802      	ldrb	r2, [r0, #0]
 8000a08:	bb3a      	cbnz	r2, 8000a5a <USBD_LL_Init+0x56>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a0c:	2104      	movs	r1, #4
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000a0e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8000a12:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a16:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a1a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a1e:	2102      	movs	r1, #2
 8000a20:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a22:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a24:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a26:	2101      	movs	r1, #1
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a30:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a32:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a34:	f000 fa2e 	bl	8000e94 <HAL_PCD_Init>
 8000a38:	b108      	cbz	r0, 8000a3e <USBD_LL_Init+0x3a>
  {
    Error_Handler( );
 8000a3a:	f7ff ff16 	bl	800086a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8000a3e:	2180      	movs	r1, #128	; 0x80
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <USBD_LL_Init+0x5c>)
 8000a42:	f000 fec7 	bl	80017d4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8000a46:	2240      	movs	r2, #64	; 0x40
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <USBD_LL_Init+0x5c>)
 8000a4c:	f000 fea1 	bl	8001792 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	2101      	movs	r1, #1
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <USBD_LL_Init+0x5c>)
 8000a56:	f000 fe9c 	bl	8001792 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	bd08      	pop	{r3, pc}
 8000a5e:	bf00      	nop
 8000a60:	200058f4 	.word	0x200058f4

08000a64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000a64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8000a66:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000a6a:	f000 fa9e 	bl	8000faa <HAL_PCD_Start>
 8000a6e:	2803      	cmp	r0, #3
 8000a70:	bf9a      	itte	ls
 8000a72:	4b02      	ldrls	r3, [pc, #8]	; (8000a7c <USBD_LL_Start+0x18>)
 8000a74:	5c18      	ldrbls	r0, [r3, r0]
 8000a76:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8000a78:	bd08      	pop	{r3, pc}
 8000a7a:	bf00      	nop
 8000a7c:	080068dc 	.word	0x080068dc

08000a80 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000a80:	b510      	push	{r4, lr}
 8000a82:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000a84:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000a88:	4613      	mov	r3, r2
 8000a8a:	4622      	mov	r2, r4
 8000a8c:	f000 fd74 	bl	8001578 <HAL_PCD_EP_Open>
 8000a90:	2803      	cmp	r0, #3
 8000a92:	bf9a      	itte	ls
 8000a94:	4b01      	ldrls	r3, [pc, #4]	; (8000a9c <USBD_LL_OpenEP+0x1c>)
 8000a96:	5c18      	ldrbls	r0, [r3, r0]
 8000a98:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8000a9a:	bd10      	pop	{r4, pc}
 8000a9c:	080068dc 	.word	0x080068dc

08000aa0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000aa0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000aa2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000aa6:	f000 fd9a 	bl	80015de <HAL_PCD_EP_Close>
 8000aaa:	2803      	cmp	r0, #3
 8000aac:	bf9a      	itte	ls
 8000aae:	4b02      	ldrls	r3, [pc, #8]	; (8000ab8 <USBD_LL_CloseEP+0x18>)
 8000ab0:	5c18      	ldrbls	r0, [r3, r0]
 8000ab2:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8000ab4:	bd08      	pop	{r3, pc}
 8000ab6:	bf00      	nop
 8000ab8:	080068dc 	.word	0x080068dc

08000abc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000abc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000abe:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000ac2:	f000 fdfe 	bl	80016c2 <HAL_PCD_EP_SetStall>
 8000ac6:	2803      	cmp	r0, #3
 8000ac8:	bf9a      	itte	ls
 8000aca:	4b02      	ldrls	r3, [pc, #8]	; (8000ad4 <USBD_LL_StallEP+0x18>)
 8000acc:	5c18      	ldrbls	r0, [r3, r0]
 8000ace:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8000ad0:	bd08      	pop	{r3, pc}
 8000ad2:	bf00      	nop
 8000ad4:	080068dc 	.word	0x080068dc

08000ad8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000ad8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000ada:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000ade:	f000 fe27 	bl	8001730 <HAL_PCD_EP_ClrStall>
 8000ae2:	2803      	cmp	r0, #3
 8000ae4:	bf9a      	itte	ls
 8000ae6:	4b02      	ldrls	r3, [pc, #8]	; (8000af0 <USBD_LL_ClearStallEP+0x18>)
 8000ae8:	5c18      	ldrbls	r0, [r3, r0]
 8000aea:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8000aec:	bd08      	pop	{r3, pc}
 8000aee:	bf00      	nop
 8000af0:	080068dc 	.word	0x080068dc

08000af4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8000af4:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000af8:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000afc:	bf18      	it	ne
 8000afe:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8000b02:	f04f 001c 	mov.w	r0, #28
 8000b06:	bf15      	itete	ne
 8000b08:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000b0c:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000b10:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000b14:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8000b18:	4770      	bx	lr
	...

08000b1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000b1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000b1e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b22:	f000 fd15 	bl	8001550 <HAL_PCD_SetAddress>
 8000b26:	2803      	cmp	r0, #3
 8000b28:	bf9a      	itte	ls
 8000b2a:	4b02      	ldrls	r3, [pc, #8]	; (8000b34 <USBD_LL_SetUSBAddress+0x18>)
 8000b2c:	5c18      	ldrbls	r0, [r3, r0]
 8000b2e:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8000b30:	bd08      	pop	{r3, pc}
 8000b32:	bf00      	nop
 8000b34:	080068dc 	.word	0x080068dc

08000b38 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000b38:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000b3a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b3e:	f000 fda1 	bl	8001684 <HAL_PCD_EP_Transmit>
 8000b42:	2803      	cmp	r0, #3
 8000b44:	bf9a      	itte	ls
 8000b46:	4b02      	ldrls	r3, [pc, #8]	; (8000b50 <USBD_LL_Transmit+0x18>)
 8000b48:	5c18      	ldrbls	r0, [r3, r0]
 8000b4a:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8000b4c:	bd08      	pop	{r3, pc}
 8000b4e:	bf00      	nop
 8000b50:	080068dc 	.word	0x080068dc

08000b54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000b54:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000b56:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b5a:	f000 fd68 	bl	800162e <HAL_PCD_EP_Receive>
 8000b5e:	2803      	cmp	r0, #3
 8000b60:	bf9a      	itte	ls
 8000b62:	4b02      	ldrls	r3, [pc, #8]	; (8000b6c <USBD_LL_PrepareReceive+0x18>)
 8000b64:	5c18      	ldrbls	r0, [r3, r0]
 8000b66:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8000b68:	bd08      	pop	{r3, pc}
 8000b6a:	bf00      	nop
 8000b6c:	080068dc 	.word	0x080068dc

08000b70 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000b70:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b74:	f000 bd7e 	b.w	8001674 <HAL_PCD_EP_GetRxCount>

08000b78 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000b78:	2312      	movs	r3, #18
 8000b7a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8000b7c:	4800      	ldr	r0, [pc, #0]	; (8000b80 <USBD_FS_DeviceDescriptor+0x8>)
 8000b7e:	4770      	bx	lr
 8000b80:	20000040 	.word	0x20000040

08000b84 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000b84:	2304      	movs	r3, #4
 8000b86:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8000b88:	4800      	ldr	r0, [pc, #0]	; (8000b8c <USBD_FS_LangIDStrDescriptor+0x8>)
 8000b8a:	4770      	bx	lr
 8000b8c:	20000020 	.word	0x20000020

08000b90 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000b90:	2300      	movs	r3, #0
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000b92:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8000b94:	461d      	mov	r5, r3
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000b96:	b2dc      	uxtb	r4, r3
 8000b98:	42a2      	cmp	r2, r4
 8000b9a:	d90c      	bls.n	8000bb6 <IntToUnicode+0x26>
  {
    if (((value >> 28)) < 0xA)
 8000b9c:	0f04      	lsrs	r4, r0, #28
 8000b9e:	2c09      	cmp	r4, #9
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000ba0:	bf94      	ite	ls
 8000ba2:	3430      	addls	r4, #48	; 0x30
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000ba4:	3437      	addhi	r4, #55	; 0x37
 8000ba6:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8000baa:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;
 8000bae:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8000bb0:	7065      	strb	r5, [r4, #1]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	e7ef      	b.n	8000b96 <IntToUnicode+0x6>
  }
}
 8000bb6:	bd30      	pop	{r4, r5, pc}

08000bb8 <USBD_FS_SerialStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000bb8:	231a      	movs	r3, #26
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000bba:	b510      	push	{r4, lr}
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000bbc:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <USBD_FS_SerialStrDescriptor+0x2c>)
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000bbe:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <USBD_FS_SerialStrDescriptor+0x30>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8000bc2:	6810      	ldr	r0, [r2, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000bc4:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
 8000bc6:	1818      	adds	r0, r3, r0
 8000bc8:	d00a      	beq.n	8000be0 <USBD_FS_SerialStrDescriptor+0x28>
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <USBD_FS_SerialStrDescriptor+0x34>)

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000bcc:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <USBD_FS_SerialStrDescriptor+0x38>)
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000bce:	681c      	ldr	r4, [r3, #0]

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	f7ff ffdd 	bl	8000b90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <USBD_FS_SerialStrDescriptor+0x3c>)
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f7ff ffd8 	bl	8000b90 <IntToUnicode>
  Get_SerialNum();
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
}
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <USBD_FS_SerialStrDescriptor+0x40>)
 8000be2:	bd10      	pop	{r4, pc}
 8000be4:	1fff7a18 	.word	0x1fff7a18
 8000be8:	1fff7a10 	.word	0x1fff7a10
 8000bec:	1fff7a14 	.word	0x1fff7a14
 8000bf0:	20000026 	.word	0x20000026
 8000bf4:	20000036 	.word	0x20000036
 8000bf8:	20000024 	.word	0x20000024

08000bfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000bfc:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000bfe:	4c04      	ldr	r4, [pc, #16]	; (8000c10 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8000c02:	460a      	mov	r2, r1
 8000c04:	4621      	mov	r1, r4
 8000c06:	f004 fa5d 	bl	80050c4 <USBD_GetString>
  return USBD_StrDesc;
}
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	bf00      	nop
 8000c10:	20005cfc 	.word	0x20005cfc
 8000c14:	080068e0 	.word	0x080068e0

08000c18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c18:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000c1a:	4c04      	ldr	r4, [pc, #16]	; (8000c2c <USBD_FS_ProductStrDescriptor+0x14>)
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <USBD_FS_ProductStrDescriptor+0x18>)
 8000c1e:	460a      	mov	r2, r1
 8000c20:	4621      	mov	r1, r4
 8000c22:	f004 fa4f 	bl	80050c4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000c26:	4620      	mov	r0, r4
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20005cfc 	.word	0x20005cfc
 8000c30:	080068f3 	.word	0x080068f3

08000c34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c34:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000c36:	4c04      	ldr	r4, [pc, #16]	; (8000c48 <USBD_FS_ConfigStrDescriptor+0x14>)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <USBD_FS_ConfigStrDescriptor+0x18>)
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f004 fa41 	bl	80050c4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000c42:	4620      	mov	r0, r4
 8000c44:	bd10      	pop	{r4, pc}
 8000c46:	bf00      	nop
 8000c48:	20005cfc 	.word	0x20005cfc
 8000c4c:	08006909 	.word	0x08006909

08000c50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c50:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000c52:	4c04      	ldr	r4, [pc, #16]	; (8000c64 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8000c56:	460a      	mov	r2, r1
 8000c58:	4621      	mov	r1, r4
 8000c5a:	f004 fa33 	bl	80050c4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000c5e:	4620      	mov	r0, r4
 8000c60:	bd10      	pop	{r4, pc}
 8000c62:	bf00      	nop
 8000c64:	20005cfc 	.word	0x20005cfc
 8000c68:	08006914 	.word	0x08006914

08000c6c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	4770      	bx	lr

08000c70 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8000c70:	2000      	movs	r0, #0
 8000c72:	4770      	bx	lr

08000c74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000c74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000c76:	4c05      	ldr	r4, [pc, #20]	; (8000c8c <CDC_Receive_FS+0x18>)
 8000c78:	4601      	mov	r1, r0
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f004 fbc9 	bl	8005412 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000c80:	4620      	mov	r0, r4
 8000c82:	f004 fbcc 	bl	800541e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8000c86:	2000      	movs	r0, #0
 8000c88:	bd10      	pop	{r4, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20005658 	.word	0x20005658

08000c90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000c90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000c92:	4c06      	ldr	r4, [pc, #24]	; (8000cac <CDC_Init_FS+0x1c>)
 8000c94:	4906      	ldr	r1, [pc, #24]	; (8000cb0 <CDC_Init_FS+0x20>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f004 fbb2 	bl	8005402 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000c9e:	4905      	ldr	r1, [pc, #20]	; (8000cb4 <CDC_Init_FS+0x24>)
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f004 fbb6 	bl	8005412 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */
}
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	bf00      	nop
 8000cac:	20005658 	.word	0x20005658
 8000cb0:	200062e4 	.word	0x200062e4
 8000cb4:	20005efc 	.word	0x20005efc

08000cb8 <NMI_Handler>:
 8000cb8:	4770      	bx	lr

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler>

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	4770      	bx	lr

08000cc4 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc4:	4801      	ldr	r0, [pc, #4]	; (8000ccc <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000cc6:	f001 bed6 	b.w	8002a76 <HAL_TIM_IRQHandler>
 8000cca:	bf00      	nop
 8000ccc:	20005618 	.word	0x20005618

08000cd0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cd0:	4801      	ldr	r0, [pc, #4]	; (8000cd8 <TIM2_IRQHandler+0x8>)
 8000cd2:	f001 bed0 	b.w	8002a76 <HAL_TIM_IRQHandler>
 8000cd6:	bf00      	nop
 8000cd8:	200066cc 	.word	0x200066cc

08000cdc <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cdc:	4801      	ldr	r0, [pc, #4]	; (8000ce4 <OTG_FS_IRQHandler+0x8>)
 8000cde:	f000 b983 	b.w	8000fe8 <HAL_PCD_IRQHandler>
 8000ce2:	bf00      	nop
 8000ce4:	200058f4 	.word	0x200058f4

08000ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x40>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	9200      	str	r2, [sp, #0]
 8000cf0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000cf2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000cf6:	6459      	str	r1, [r3, #68]	; 0x44
 8000cf8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000cfa:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000cfe:	9100      	str	r1, [sp, #0]
 8000d00:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	9201      	str	r2, [sp, #4]
 8000d04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d06:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000d0a:	6419      	str	r1, [r3, #64]	; 0x40
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d14:	210f      	movs	r1, #15
 8000d16:	f06f 0001 	mvn.w	r0, #1
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1c:	f001 fd9e 	bl	800285c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d20:	b003      	add	sp, #12
 8000d22:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d2c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8000d2e:	6803      	ldr	r3, [r0, #0]
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <HAL_TIM_Base_MspInit+0x58>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d113      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d36:	2200      	movs	r2, #0
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_TIM_Base_MspInit+0x5c>)
 8000d3a:	9200      	str	r2, [sp, #0]
 8000d3c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000d3e:	f041 0101 	orr.w	r1, r1, #1
 8000d42:	6459      	str	r1, [r3, #68]	; 0x44
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	9300      	str	r3, [sp, #0]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	2019      	movs	r0, #25
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d50:	9b00      	ldr	r3, [sp, #0]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000d52:	f001 fd83 	bl	800285c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d56:	2019      	movs	r0, #25
 8000d58:	f001 fdb4 	bl	80028c4 <HAL_NVIC_EnableIRQ>
 8000d5c:	e00e      	b.n	8000d7c <HAL_TIM_Base_MspInit+0x50>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <HAL_TIM_Base_MspInit+0x60>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d10b      	bne.n	8000d7c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_TIM_Base_MspInit+0x5c>)
 8000d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d6c:	f042 0202 	orr.w	r2, r2, #2
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d7c:	b003      	add	sp, #12
 8000d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d82:	bf00      	nop
 8000d84:	40010000 	.word	0x40010000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40000400 	.word	0x40000400

08000d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d90:	b510      	push	{r4, lr}
 8000d92:	4604      	mov	r4, r0
 8000d94:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	2214      	movs	r2, #20
 8000d98:	2100      	movs	r1, #0
 8000d9a:	a803      	add	r0, sp, #12
 8000d9c:	f004 fd87 	bl	80058ae <memset>
  if(htim->Instance==TIM1)
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_TIM_MspPostInit+0x78>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d115      	bne.n	8000dd4 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_TIM_MspPostInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	4818      	ldr	r0, [pc, #96]	; (8000e10 <HAL_TIM_MspPostInit+0x80>)
  if(htim->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	a903      	add	r1, sp, #12
 8000dd2:	e015      	b.n	8000e00 <HAL_TIM_MspPostInit+0x70>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_TIM_MspPostInit+0x84>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d114      	bne.n	8000e04 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_TIM_MspPostInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <HAL_TIM_MspPostInit+0x88>)
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de4:	f042 0202 	orr.w	r2, r2, #2
 8000de8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	9302      	str	r3, [sp, #8]
 8000df2:	9b02      	ldr	r3, [sp, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000df4:	2310      	movs	r3, #16
 8000df6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dfc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	a903      	add	r1, sp, #12
 8000e00:	f001 fc48 	bl	8002694 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e04:	b008      	add	sp, #32
 8000e06:	bd10      	pop	{r4, pc}
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40000400 	.word	0x40000400
 8000e18:	40020400 	.word	0x40020400

08000e1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000e1e:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000e22:	2200      	movs	r2, #0
 8000e24:	201c      	movs	r0, #28
 8000e26:	f001 fd19 	bl	800285c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000e2a:	201c      	movs	r0, #28
 8000e2c:	f001 fd4a 	bl	80028c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e30:	2500      	movs	r5, #0
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_InitTick+0x6c>)
 8000e34:	9502      	str	r5, [sp, #8]
 8000e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e38:	4c14      	ldr	r4, [pc, #80]	; (8000e8c <HAL_InitTick+0x70>)
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e48:	a901      	add	r1, sp, #4
 8000e4a:	a803      	add	r0, sp, #12
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4c:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e4e:	f001 fc03 	bl	8002658 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e52:	f001 fbf1 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000e5c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000e60:	60e3      	str	r3, [r4, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e62:	0040      	lsls	r0, r0, #1
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_InitTick+0x74>)
 8000e66:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000e6e:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8000e70:	6125      	str	r5, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000e74:	f001 fef0 	bl	8002c58 <HAL_TIM_Base_Init>
 8000e78:	b918      	cbnz	r0, 8000e82 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f001 fde6 	bl	8002a4c <HAL_TIM_Base_Start_IT>
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x68>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
}
 8000e84:	b009      	add	sp, #36	; 0x24
 8000e86:	bd30      	pop	{r4, r5, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	200066cc 	.word	0x200066cc
 8000e90:	000f4240 	.word	0x000f4240

08000e94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e96:	4604      	mov	r4, r0
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e98:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	f000 8081 	beq.w	8000fa2 <HAL_PCD_Init+0x10e>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ea0:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ea4:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ea6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eaa:	b91b      	cbnz	r3, 8000eb4 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eac:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eb0:	f7ff fd04 	bl	80008bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000eba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ebc:	4625      	mov	r5, r4
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ebe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ec2:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
  {
    hpcd->Init.dma_enable = 0U;
 8000ec6:	bf08      	it	eq
 8000ec8:	6123      	streq	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eca:	f000 fd5b 	bl	8001984 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed0:	466e      	mov	r6, sp
 8000ed2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ed8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000edc:	e886 0003 	stmia.w	r6, {r0, r1}
 8000ee0:	4625      	mov	r5, r4
 8000ee2:	1d27      	adds	r7, r4, #4
 8000ee4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000ee8:	f855 0b10 	ldr.w	r0, [r5], #16
 8000eec:	f000 fc90 	bl	8001810 <USB_CoreInit>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	b118      	cbz	r0, 8000efc <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
 8000efa:	e052      	b.n	8000fa2 <HAL_PCD_Init+0x10e>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000efc:	4601      	mov	r1, r0
 8000efe:	6820      	ldr	r0, [r4, #0]
 8000f00:	f000 fd46 	bl	8001990 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f04:	4630      	mov	r0, r6
 8000f06:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f0a:	261c      	movs	r6, #28
 8000f0c:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f10:	4601      	mov	r1, r0
 8000f12:	b2c2      	uxtb	r2, r0

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f14:	4596      	cmp	lr, r2
 8000f16:	f100 0001 	add.w	r0, r0, #1
 8000f1a:	d90d      	bls.n	8000f38 <HAL_PCD_Init+0xa4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f1c:	fb06 4302 	mla	r3, r6, r2, r4
 8000f20:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f28:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f2c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f30:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f32:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f34:	6519      	str	r1, [r3, #80]	; 0x50
 8000f36:	e7ec      	b.n	8000f12 <HAL_PCD_Init+0x7e>
 8000f38:	2300      	movs	r3, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f3a:	261c      	movs	r6, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	b2d8      	uxtb	r0, r3
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f40:	4586      	cmp	lr, r0
 8000f42:	f103 0301 	add.w	r3, r3, #1
 8000f46:	d90e      	bls.n	8000f66 <HAL_PCD_Init+0xd2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f48:	fb06 4200 	mla	r2, r6, r0, r4
 8000f4c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000f50:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f54:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f58:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f5c:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f60:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000f64:	e7eb      	b.n	8000f3e <HAL_PCD_Init+0xaa>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f68:	466e      	mov	r6, sp
 8000f6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f74:	e886 0003 	stmia.w	r6, {r0, r1}
 8000f78:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000f7c:	6820      	ldr	r0, [r4, #0]
 8000f7e:	f000 fd49 	bl	8001a14 <USB_DevInit>
 8000f82:	2301      	movs	r3, #1
 8000f84:	4605      	mov	r5, r0
 8000f86:	b120      	cbz	r0, 8000f92 <HAL_PCD_Init+0xfe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f88:	2202      	movs	r2, #2
 8000f8a:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000f8e:	461d      	mov	r5, r3
 8000f90:	e008      	b.n	8000fa4 <HAL_PCD_Init+0x110>
  }

  hpcd->USB_Address = 0U;
 8000f92:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000f96:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f9a:	6820      	ldr	r0, [r4, #0]
 8000f9c:	f001 f859 	bl	8002052 <USB_DevDisconnect>

  return HAL_OK;
 8000fa0:	e000      	b.n	8000fa4 <HAL_PCD_Init+0x110>
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8000fa2:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	b00b      	add	sp, #44	; 0x2c
 8000fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000faa <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000faa:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000fae:	2b01      	cmp	r3, #1
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	4604      	mov	r4, r0
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000fb4:	d016      	beq.n	8000fe4 <HAL_PCD_Start+0x3a>
 8000fb6:	2301      	movs	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fb8:	6800      	ldr	r0, [r0, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000fba:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000fbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d106      	bne.n	8000fd2 <HAL_PCD_Start+0x28>
 8000fc4:	69a3      	ldr	r3, [r4, #24]
 8000fc6:	2b01      	cmp	r3, #1
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000fc8:	bf1e      	ittt	ne
 8000fca:	6b83      	ldrne	r3, [r0, #56]	; 0x38
 8000fcc:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8000fd0:	6383      	strne	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000fd2:	f001 f832 	bl	800203a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000fd6:	6820      	ldr	r0, [r4, #0]
 8000fd8:	f000 fcce 	bl	8001978 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000fe2:	bd10      	pop	{r4, pc}
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000fe4:	2002      	movs	r0, #2
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8000fe6:	bd10      	pop	{r4, pc}

08000fe8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fec:	6805      	ldr	r5, [r0, #0]
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fee:	b087      	sub	sp, #28
 8000ff0:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	f001 f869 	bl	80020ca <USB_GetMode>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	f040 82a5 	bne.w	8001548 <HAL_PCD_IRQHandler+0x560>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000ffe:	6820      	ldr	r0, [r4, #0]
 8001000:	f001 f833 	bl	800206a <USB_ReadInterrupts>
 8001004:	2800      	cmp	r0, #0
 8001006:	f000 829f 	beq.w	8001548 <HAL_PCD_IRQHandler+0x560>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	f001 f82d 	bl	800206a <USB_ReadInterrupts>
 8001010:	0783      	lsls	r3, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001012:	bf48      	it	mi
 8001014:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001016:	6820      	ldr	r0, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001018:	bf42      	ittt	mi
 800101a:	6953      	ldrmi	r3, [r2, #20]
 800101c:	f003 0302 	andmi.w	r3, r3, #2
 8001020:	6153      	strmi	r3, [r2, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001022:	f001 f822 	bl	800206a <USB_ReadInterrupts>
 8001026:	0307      	lsls	r7, r0, #12
 8001028:	d406      	bmi.n	8001038 <HAL_PCD_IRQHandler+0x50>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800102a:	6820      	ldr	r0, [r4, #0]
 800102c:	f001 f81d 	bl	800206a <USB_ReadInterrupts>
 8001030:	0346      	lsls	r6, r0, #13
 8001032:	f140 80cc 	bpl.w	80011ce <HAL_PCD_IRQHandler+0x1e6>
 8001036:	e0be      	b.n	80011b6 <HAL_PCD_IRQHandler+0x1ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001038:	6820      	ldr	r0, [r4, #0]
 800103a:	f8df b394 	ldr.w	fp, [pc, #916]	; 80013d0 <HAL_PCD_IRQHandler+0x3e8>
 800103e:	f001 f818 	bl	8002072 <USB_ReadDevAllOutEpInterrupt>
 8001042:	f505 6630 	add.w	r6, r5, #2816	; 0xb00
 8001046:	4682      	mov	sl, r0
 8001048:	46a0      	mov	r8, r4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 800104a:	2700      	movs	r7, #0

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 800104c:	f1ba 0f00 	cmp.w	sl, #0
 8001050:	d0eb      	beq.n	800102a <HAL_PCD_IRQHandler+0x42>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001052:	f01a 0f01 	tst.w	sl, #1
 8001056:	f000 80a7 	beq.w	80011a8 <HAL_PCD_IRQHandler+0x1c0>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800105a:	b2fa      	uxtb	r2, r7
 800105c:	4611      	mov	r1, r2
 800105e:	6820      	ldr	r0, [r4, #0]
 8001060:	9203      	str	r2, [sp, #12]
 8001062:	f001 f816 	bl	8002092 <USB_ReadDevOutEPInterrupt>

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001066:	f010 0f01 	tst.w	r0, #1

      while (ep_intr != 0U)
      {
        if ((ep_intr & 0x1U) != 0U)
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800106a:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800106c:	9a03      	ldr	r2, [sp, #12]
 800106e:	d05a      	beq.n	8001126 <HAL_PCD_IRQHandler+0x13e>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001070:	2301      	movs	r3, #1
 8001072:	60b3      	str	r3, [r6, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001074:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8001076:	6920      	ldr	r0, [r4, #16]
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001078:	f8d3 e040 	ldr.w	lr, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800107c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001080:	eb03 1347 	add.w	r3, r3, r7, lsl #5

  if (hpcd->Init.dma_enable == 1U)
 8001084:	2801      	cmp	r0, #1
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001086:	6899      	ldr	r1, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001088:	d13c      	bne.n	8001104 <HAL_PCD_IRQHandler+0x11c>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800108a:	0708      	lsls	r0, r1, #28
 800108c:	d513      	bpl.n	80010b6 <HAL_PCD_IRQHandler+0xce>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800108e:	45de      	cmp	lr, fp
 8001090:	d904      	bls.n	800109c <HAL_PCD_IRQHandler+0xb4>
 8001092:	040a      	lsls	r2, r1, #16
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001094:	bf44      	itt	mi
 8001096:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 800109a:	609a      	strmi	r2, [r3, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800109c:	4620      	mov	r0, r4
 800109e:	9303      	str	r3, [sp, #12]
 80010a0:	f7ff fc56 	bl	8000950 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010a4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80010a8:	2101      	movs	r1, #1
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	f001 f82c 	bl	8002108 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80010b0:	2208      	movs	r2, #8
 80010b2:	9b03      	ldr	r3, [sp, #12]
 80010b4:	e02d      	b.n	8001112 <HAL_PCD_IRQHandler+0x12a>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80010b6:	0688      	lsls	r0, r1, #26
 80010b8:	d501      	bpl.n	80010be <HAL_PCD_IRQHandler+0xd6>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80010ba:	2220      	movs	r2, #32
 80010bc:	e029      	b.n	8001112 <HAL_PCD_IRQHandler+0x12a>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80010be:	f011 0f28 	tst.w	r1, #40	; 0x28
 80010c2:	d130      	bne.n	8001126 <HAL_PCD_IRQHandler+0x13e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80010c4:	45de      	cmp	lr, fp
 80010c6:	d901      	bls.n	80010cc <HAL_PCD_IRQHandler+0xe4>
 80010c8:	0409      	lsls	r1, r1, #16
 80010ca:	d420      	bmi.n	800110e <HAL_PCD_IRQHandler+0x126>
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80010cc:	691b      	ldr	r3, [r3, #16]
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80010ce:	f8d8 1204 	ldr.w	r1, [r8, #516]	; 0x204
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
 80010d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	f8c8 3214 	str.w	r3, [r8, #532]	; 0x214
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80010dc:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 80010e0:	4419      	add	r1, r3
 80010e2:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80010e6:	4620      	mov	r0, r4
 80010e8:	4611      	mov	r1, r2
 80010ea:	f7ff fc37 	bl	800095c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80010ee:	b9d7      	cbnz	r7, 8001126 <HAL_PCD_IRQHandler+0x13e>
 80010f0:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80010f4:	b9bb      	cbnz	r3, 8001126 <HAL_PCD_IRQHandler+0x13e>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010f6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80010fa:	2101      	movs	r1, #1
 80010fc:	6820      	ldr	r0, [r4, #0]
 80010fe:	f001 f803 	bl	8002108 <USB_EP0_OutStart>
 8001102:	e010      	b.n	8001126 <HAL_PCD_IRQHandler+0x13e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001104:	48b1      	ldr	r0, [pc, #708]	; (80013cc <HAL_PCD_IRQHandler+0x3e4>)
 8001106:	4586      	cmp	lr, r0
 8001108:	d109      	bne.n	800111e <HAL_PCD_IRQHandler+0x136>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800110a:	0408      	lsls	r0, r1, #16
 800110c:	d503      	bpl.n	8001116 <HAL_PCD_IRQHandler+0x12e>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800110e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	e007      	b.n	8001126 <HAL_PCD_IRQHandler+0x13e>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001116:	0688      	lsls	r0, r1, #26
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001118:	bf44      	itt	mi
 800111a:	2120      	movmi	r1, #32
 800111c:	6099      	strmi	r1, [r3, #8]
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800111e:	4611      	mov	r1, r2
 8001120:	4620      	mov	r0, r4
 8001122:	f7ff fc1b 	bl	800095c <HAL_PCD_DataOutStageCallback>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001126:	f019 0f08 	tst.w	r9, #8
 800112a:	d025      	beq.n	8001178 <HAL_PCD_IRQHandler+0x190>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800112c:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 800112e:	6920      	ldr	r0, [r4, #16]
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001136:	eb03 1347 	add.w	r3, r3, r7, lsl #5

  if (hpcd->Init.dma_enable == 1U)
 800113a:	2801      	cmp	r0, #1
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800113c:	6899      	ldr	r1, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 800113e:	d102      	bne.n	8001146 <HAL_PCD_IRQHandler+0x15e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001140:	455a      	cmp	r2, fp
 8001142:	d908      	bls.n	8001156 <HAL_PCD_IRQHandler+0x16e>
 8001144:	e002      	b.n	800114c <HAL_PCD_IRQHandler+0x164>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001146:	48a1      	ldr	r0, [pc, #644]	; (80013cc <HAL_PCD_IRQHandler+0x3e4>)
 8001148:	4282      	cmp	r2, r0
 800114a:	d104      	bne.n	8001156 <HAL_PCD_IRQHandler+0x16e>
 800114c:	0409      	lsls	r1, r1, #16
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800114e:	bf44      	itt	mi
 8001150:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 8001154:	6099      	strmi	r1, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001156:	4620      	mov	r0, r4
 8001158:	9203      	str	r2, [sp, #12]
 800115a:	f7ff fbf9 	bl	8000950 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800115e:	9a03      	ldr	r2, [sp, #12]
 8001160:	455a      	cmp	r2, fp
 8001162:	d907      	bls.n	8001174 <HAL_PCD_IRQHandler+0x18c>
 8001164:	6921      	ldr	r1, [r4, #16]
 8001166:	2901      	cmp	r1, #1
 8001168:	d104      	bne.n	8001174 <HAL_PCD_IRQHandler+0x18c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800116a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800116e:	6820      	ldr	r0, [r4, #0]
 8001170:	f000 ffca 	bl	8002108 <USB_EP0_OutStart>

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001174:	2308      	movs	r3, #8
 8001176:	60b3      	str	r3, [r6, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001178:	f019 0f10 	tst.w	r9, #16
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800117c:	bf1c      	itt	ne
 800117e:	2310      	movne	r3, #16
 8001180:	60b3      	strne	r3, [r6, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001182:	f019 0f20 	tst.w	r9, #32
 8001186:	d009      	beq.n	800119c <HAL_PCD_IRQHandler+0x1b4>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001188:	6921      	ldr	r1, [r4, #16]
 800118a:	2901      	cmp	r1, #1
 800118c:	d104      	bne.n	8001198 <HAL_PCD_IRQHandler+0x1b0>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800118e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001192:	6820      	ldr	r0, [r4, #0]
 8001194:	f000 ffb8 	bl	8002108 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001198:	2320      	movs	r3, #32
 800119a:	60b3      	str	r3, [r6, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800119c:	f419 5f00 	tst.w	r9, #8192	; 0x2000
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80011a0:	bf1c      	itt	ne
 80011a2:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 80011a6:	60b3      	strne	r3, [r6, #8]
          }
        }
        epnum++;
 80011a8:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 80011aa:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80011ae:	3620      	adds	r6, #32
 80011b0:	f108 081c 	add.w	r8, r8, #28
 80011b4:	e74a      	b.n	800104c <HAL_PCD_IRQHandler+0x64>
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80011b6:	6820      	ldr	r0, [r4, #0]
 80011b8:	f000 ff63 	bl	8002082 <USB_ReadDevAllInEpInterrupt>
 80011bc:	4626      	mov	r6, r4
 80011be:	4683      	mov	fp, r0
 80011c0:	f505 6910 	add.w	r9, r5, #2304	; 0x900

      epnum = 0U;
 80011c4:	f04f 0800 	mov.w	r8, #0

      while (ep_intr != 0U)
 80011c8:	f1bb 0f00 	cmp.w	fp, #0
 80011cc:	d106      	bne.n	80011dc <HAL_PCD_IRQHandler+0x1f4>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80011ce:	6820      	ldr	r0, [r4, #0]
 80011d0:	f000 ff4b 	bl	800206a <USB_ReadInterrupts>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	f280 80af 	bge.w	8001338 <HAL_PCD_IRQHandler+0x350>
 80011da:	e094      	b.n	8001306 <HAL_PCD_IRQHandler+0x31e>

      epnum = 0U;

      while (ep_intr != 0U)
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80011dc:	f01b 0f01 	tst.w	fp, #1
 80011e0:	f000 8089 	beq.w	80012f6 <HAL_PCD_IRQHandler+0x30e>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011e4:	fa5f fa88 	uxtb.w	sl, r8
 80011e8:	4651      	mov	r1, sl
 80011ea:	6820      	ldr	r0, [r4, #0]
 80011ec:	f000 ff5a 	bl	80020a4 <USB_ReadDevInEPInterrupt>

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80011f0:	07c3      	lsls	r3, r0, #31

      while (ep_intr != 0U)
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011f2:	4607      	mov	r7, r0

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80011f4:	d524      	bpl.n	8001240 <HAL_PCD_IRQHandler+0x258>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80011f6:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
 80011fa:	2001      	movs	r0, #1
 80011fc:	f008 030f 	and.w	r3, r8, #15
 8001200:	fa00 f303 	lsl.w	r3, r0, r3
 8001204:	ea22 0303 	bic.w	r3, r2, r3
 8001208:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);

            if (hpcd->Init.dma_enable == 1U)
 800120c:	6923      	ldr	r3, [r4, #16]
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800120e:	f8c9 0008 	str.w	r0, [r9, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001212:	4283      	cmp	r3, r0
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001214:	bf01      	itttt	eq
 8001216:	6cb2      	ldreq	r2, [r6, #72]	; 0x48
 8001218:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 800121a:	189b      	addeq	r3, r3, r2
 800121c:	64b3      	streq	r3, [r6, #72]	; 0x48
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800121e:	4651      	mov	r1, sl
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fba4 	bl	800096e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001226:	6921      	ldr	r1, [r4, #16]
 8001228:	2901      	cmp	r1, #1
 800122a:	d109      	bne.n	8001240 <HAL_PCD_IRQHandler+0x258>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800122c:	f1b8 0f00 	cmp.w	r8, #0
 8001230:	d106      	bne.n	8001240 <HAL_PCD_IRQHandler+0x258>
 8001232:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001234:	b923      	cbnz	r3, 8001240 <HAL_PCD_IRQHandler+0x258>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001236:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800123a:	6820      	ldr	r0, [r4, #0]
 800123c:	f000 ff64 	bl	8002108 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001240:	0738      	lsls	r0, r7, #28
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001242:	bf44      	itt	mi
 8001244:	2308      	movmi	r3, #8
 8001246:	f8c9 3008 	strmi.w	r3, [r9, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800124a:	06f9      	lsls	r1, r7, #27
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800124c:	bf44      	itt	mi
 800124e:	2310      	movmi	r3, #16
 8001250:	f8c9 3008 	strmi.w	r3, [r9, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001254:	067a      	lsls	r2, r7, #25
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001256:	bf44      	itt	mi
 8001258:	2340      	movmi	r3, #64	; 0x40
 800125a:	f8c9 3008 	strmi.w	r3, [r9, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800125e:	07bb      	lsls	r3, r7, #30
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001260:	bf44      	itt	mi
 8001262:	2302      	movmi	r3, #2
 8001264:	f8c9 3008 	strmi.w	r3, [r9, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001268:	063f      	lsls	r7, r7, #24
 800126a:	d544      	bpl.n	80012f6 <HAL_PCD_IRQHandler+0x30e>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800126c:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800126e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001270:	429a      	cmp	r2, r3
 8001272:	d840      	bhi.n	80012f6 <HAL_PCD_IRQHandler+0x30e>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001274:	1a9a      	subs	r2, r3, r2

  if (len > ep->maxpacket)
 8001276:	6c73      	ldr	r3, [r6, #68]	; 0x44
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001278:	6821      	ldr	r1, [r4, #0]
 800127a:	9103      	str	r1, [sp, #12]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800127c:	4293      	cmp	r3, r2
 800127e:	bf28      	it	cs
 8001280:	4613      	movcs	r3, r2
 8001282:	3303      	adds	r3, #3
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	9304      	str	r3, [sp, #16]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001288:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 800128c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8001290:	9305      	str	r3, [sp, #20]
 8001292:	9b05      	ldr	r3, [sp, #20]
 8001294:	9a04      	ldr	r2, [sp, #16]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	6d77      	ldr	r7, [r6, #84]	; 0x54
 800129a:	b29b      	uxth	r3, r3
 800129c:	4293      	cmp	r3, r2
 800129e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80012a0:	d319      	bcc.n	80012d6 <HAL_PCD_IRQHandler+0x2ee>
 80012a2:	42bb      	cmp	r3, r7
 80012a4:	d917      	bls.n	80012d6 <HAL_PCD_IRQHandler+0x2ee>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80012a6:	b1c3      	cbz	r3, 80012da <HAL_PCD_IRQHandler+0x2f2>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80012a8:	1bdb      	subs	r3, r3, r7

    if (len > ep->maxpacket)
 80012aa:	6c77      	ldr	r7, [r6, #68]	; 0x44
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80012ac:	9803      	ldr	r0, [sp, #12]
 80012ae:	429f      	cmp	r7, r3
 80012b0:	bf28      	it	cs
 80012b2:	461f      	movcs	r7, r3

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80012b4:	1cfb      	adds	r3, r7, #3
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	9304      	str	r3, [sp, #16]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80012ba:	7c23      	ldrb	r3, [r4, #16]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	4652      	mov	r2, sl
 80012c0:	b2bb      	uxth	r3, r7
 80012c2:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80012c4:	f000 fd6c 	bl	8001da0 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80012c8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80012ca:	443b      	add	r3, r7
 80012cc:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80012ce:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80012d0:	441f      	add	r7, r3
 80012d2:	6577      	str	r7, [r6, #84]	; 0x54
 80012d4:	e7dd      	b.n	8001292 <HAL_PCD_IRQHandler+0x2aa>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80012d6:	42bb      	cmp	r3, r7
 80012d8:	d80d      	bhi.n	80012f6 <HAL_PCD_IRQHandler+0x30e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012da:	9b03      	ldr	r3, [sp, #12]
 80012dc:	2101      	movs	r1, #1
 80012de:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80012e2:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 80012e6:	f008 030f 	and.w	r3, r8, #15
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	ea22 0303 	bic.w	r3, r2, r3
 80012f2:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
          }
        }
        epnum++;
 80012f6:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80012fa:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80012fe:	361c      	adds	r6, #28
 8001300:	f109 0920 	add.w	r9, r9, #32
 8001304:	e760      	b.n	80011c8 <HAL_PCD_IRQHandler+0x1e0>

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001306:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8001312:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001316:	2b01      	cmp	r3, #1
 8001318:	d106      	bne.n	8001328 <HAL_PCD_IRQHandler+0x340>
      {
        hpcd->LPM_State = LPM_L0;
 800131a:	2100      	movs	r1, #0
 800131c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001320:	4620      	mov	r0, r4
 8001322:	f000 fa5b 	bl	80017dc <HAL_PCDEx_LPM_Callback>
 8001326:	e002      	b.n	800132e <HAL_PCD_IRQHandler+0x346>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff fb57 	bl	80009dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800132e:	6822      	ldr	r2, [r4, #0]
 8001330:	6953      	ldr	r3, [r2, #20]
 8001332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001336:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001338:	6820      	ldr	r0, [r4, #0]
 800133a:	f000 fe96 	bl	800206a <USB_ReadInterrupts>
 800133e:	0500      	lsls	r0, r0, #20
 8001340:	d50b      	bpl.n	800135a <HAL_PCD_IRQHandler+0x372>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001342:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8001346:	07d9      	lsls	r1, r3, #31
 8001348:	d502      	bpl.n	8001350 <HAL_PCD_IRQHandler+0x368>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800134a:	4620      	mov	r0, r4
 800134c:	f7ff fb2e 	bl	80009ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001350:	6822      	ldr	r2, [r4, #0]
 8001352:	6953      	ldr	r3, [r2, #20]
 8001354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001358:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800135a:	6820      	ldr	r0, [r4, #0]
 800135c:	f000 fe85 	bl	800206a <USB_ReadInterrupts>
 8001360:	04c2      	lsls	r2, r0, #19
 8001362:	d552      	bpl.n	800140a <HAL_PCD_IRQHandler+0x422>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001364:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8001368:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800136a:	6820      	ldr	r0, [r4, #0]
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001372:	2110      	movs	r1, #16
 8001374:	f000 fb24 	bl	80019c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001378:	6867      	ldr	r7, [r4, #4]
 800137a:	f505 6310 	add.w	r3, r5, #2304	; 0x900
 800137e:	2200      	movs	r2, #0
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001380:	f64f 307f 	movw	r0, #64383	; 0xfb7f
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001384:	42ba      	cmp	r2, r7
 8001386:	d00f      	beq.n	80013a8 <HAL_PCD_IRQHandler+0x3c0>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001388:	6098      	str	r0, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800138a:	6819      	ldr	r1, [r3, #0]
 800138c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8001390:	6019      	str	r1, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001392:	f8c3 0208 	str.w	r0, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001396:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800139a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 800139e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a2:	3201      	adds	r2, #1
 80013a4:	3320      	adds	r3, #32
 80013a6:	e7ed      	b.n	8001384 <HAL_PCD_IRQHandler+0x39c>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80013a8:	69f3      	ldr	r3, [r6, #28]
 80013aa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80013ae:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80013b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013b2:	b17b      	cbz	r3, 80013d4 <HAL_PCD_IRQHandler+0x3ec>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80013b4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80013b8:	f043 030b 	orr.w	r3, r3, #11
 80013bc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80013c0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80013c2:	f043 030b 	orr.w	r3, r3, #11
 80013c6:	6473      	str	r3, [r6, #68]	; 0x44
 80013c8:	e00e      	b.n	80013e8 <HAL_PCD_IRQHandler+0x400>
 80013ca:	bf00      	nop
 80013cc:	4f54310a 	.word	0x4f54310a
 80013d0:	4f54300a 	.word	0x4f54300a
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80013d4:	6973      	ldr	r3, [r6, #20]
 80013d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80013de:	6173      	str	r3, [r6, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80013e0:	6933      	ldr	r3, [r6, #16]
 80013e2:	f043 030b 	orr.w	r3, r3, #11
 80013e6:	6133      	str	r3, [r6, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013e8:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013ec:	7c21      	ldrb	r1, [r4, #16]
 80013ee:	6820      	ldr	r0, [r4, #0]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013f4:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013f8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80013fc:	f000 fe84 	bl	8002108 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001400:	6822      	ldr	r2, [r4, #0]
 8001402:	6953      	ldr	r3, [r2, #20]
 8001404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001408:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800140a:	6820      	ldr	r0, [r4, #0]
 800140c:	f000 fe2d 	bl	800206a <USB_ReadInterrupts>
 8001410:	0483      	lsls	r3, r0, #18
 8001412:	d516      	bpl.n	8001442 <HAL_PCD_IRQHandler+0x45a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001414:	6820      	ldr	r0, [r4, #0]
 8001416:	f000 fe5c 	bl	80020d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800141a:	6820      	ldr	r0, [r4, #0]
 800141c:	f000 fbb8 	bl	8001b90 <USB_GetDevSpeed>
 8001420:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001422:	6826      	ldr	r6, [r4, #0]
 8001424:	f001 f902 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8001428:	7b22      	ldrb	r2, [r4, #12]
 800142a:	4601      	mov	r1, r0
 800142c:	4630      	mov	r0, r6
 800142e:	f000 fa2f 	bl	8001890 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff faa7 	bl	8000986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001438:	6822      	ldr	r2, [r4, #0]
 800143a:	6953      	ldr	r3, [r2, #20]
 800143c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001440:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001442:	6820      	ldr	r0, [r4, #0]
 8001444:	f000 fe11 	bl	800206a <USB_ReadInterrupts>
 8001448:	06c7      	lsls	r7, r0, #27
 800144a:	d537      	bpl.n	80014bc <HAL_PCD_IRQHandler+0x4d4>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	6993      	ldr	r3, [r2, #24]
 8001450:	f023 0310 	bic.w	r3, r3, #16
 8001454:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8001456:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001458:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800145c:	2b02      	cmp	r3, #2
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);

      temp = USBx->GRXSTSP;

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800145e:	f006 080f 	and.w	r8, r6, #15

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001462:	d114      	bne.n	800148e <HAL_PCD_IRQHandler+0x4a6>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001464:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001468:	4033      	ands	r3, r6
 800146a:	b313      	cbz	r3, 80014b2 <HAL_PCD_IRQHandler+0x4ca>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800146c:	271c      	movs	r7, #28
 800146e:	fb07 4708 	mla	r7, r7, r8, r4
 8001472:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001476:	4632      	mov	r2, r6
 8001478:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800147c:	4628      	mov	r0, r5
 800147e:	f000 fd89 	bl	8001f94 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001482:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001486:	4433      	add	r3, r6
 8001488:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800148c:	e00c      	b.n	80014a8 <HAL_PCD_IRQHandler+0x4c0>
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800148e:	2b06      	cmp	r3, #6
 8001490:	d10f      	bne.n	80014b2 <HAL_PCD_IRQHandler+0x4ca>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001492:	2208      	movs	r2, #8
 8001494:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001498:	4628      	mov	r0, r5
 800149a:	f000 fd7b 	bl	8001f94 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800149e:	271c      	movs	r7, #28
 80014a0:	fb07 4708 	mla	r7, r7, r8, r4
 80014a4:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80014a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80014ac:	441e      	add	r6, r3
 80014ae:	f8c7 6214 	str.w	r6, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014b2:	6822      	ldr	r2, [r4, #0]
 80014b4:	6993      	ldr	r3, [r2, #24]
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80014bc:	6820      	ldr	r0, [r4, #0]
 80014be:	f000 fdd4 	bl	800206a <USB_ReadInterrupts>
 80014c2:	0706      	lsls	r6, r0, #28
 80014c4:	d507      	bpl.n	80014d6 <HAL_PCD_IRQHandler+0x4ee>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fa59 	bl	800097e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	6953      	ldr	r3, [r2, #20]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014d6:	6820      	ldr	r0, [r4, #0]
 80014d8:	f000 fdc7 	bl	800206a <USB_ReadInterrupts>
 80014dc:	02c5      	lsls	r5, r0, #11
 80014de:	d508      	bpl.n	80014f2 <HAL_PCD_IRQHandler+0x50a>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014e0:	2100      	movs	r1, #0
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff fa82 	bl	80009ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80014e8:	6822      	ldr	r2, [r4, #0]
 80014ea:	6953      	ldr	r3, [r2, #20]
 80014ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f0:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014f2:	6820      	ldr	r0, [r4, #0]
 80014f4:	f000 fdb9 	bl	800206a <USB_ReadInterrupts>
 80014f8:	0280      	lsls	r0, r0, #10
 80014fa:	d508      	bpl.n	800150e <HAL_PCD_IRQHandler+0x526>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014fc:	2100      	movs	r1, #0
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff fa70 	bl	80009e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	6953      	ldr	r3, [r2, #20]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800150e:	6820      	ldr	r0, [r4, #0]
 8001510:	f000 fdab 	bl	800206a <USB_ReadInterrupts>
 8001514:	0041      	lsls	r1, r0, #1
 8001516:	d507      	bpl.n	8001528 <HAL_PCD_IRQHandler+0x540>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fa6b 	bl	80009f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800151e:	6822      	ldr	r2, [r4, #0]
 8001520:	6953      	ldr	r3, [r2, #20]
 8001522:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001526:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001528:	6820      	ldr	r0, [r4, #0]
 800152a:	f000 fd9e 	bl	800206a <USB_ReadInterrupts>
 800152e:	0742      	lsls	r2, r0, #29
 8001530:	d50a      	bpl.n	8001548 <HAL_PCD_IRQHandler+0x560>
    {
      temp = hpcd->Instance->GOTGINT;
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001536:	076b      	lsls	r3, r5, #29
 8001538:	d502      	bpl.n	8001540 <HAL_PCD_IRQHandler+0x558>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff fa5e 	bl	80009fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	6853      	ldr	r3, [r2, #4]
 8001544:	432b      	orrs	r3, r5
 8001546:	6053      	str	r3, [r2, #4]
    }
  }
}
 8001548:	b007      	add	sp, #28
 800154a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800154e:	bf00      	nop

08001550 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001550:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001554:	2a01      	cmp	r2, #1
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001556:	b510      	push	{r4, lr}
 8001558:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800155a:	d00b      	beq.n	8001574 <HAL_PCD_SetAddress+0x24>
 800155c:	2201      	movs	r2, #1
 800155e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001562:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001566:	6800      	ldr	r0, [r0, #0]
 8001568:	f000 fd57 	bl	800201a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800156c:	2000      	movs	r0, #0
 800156e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001572:	bd10      	pop	{r4, pc}
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001574:	2002      	movs	r0, #2
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001576:	bd10      	pop	{r4, pc}

08001578 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	4605      	mov	r5, r0
 800157c:	f001 040f 	and.w	r4, r1, #15
 8001580:	201c      	movs	r0, #28
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001582:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001586:	fb00 f004 	mul.w	r0, r0, r4
 800158a:	eb05 0100 	add.w	r1, r5, r0
    ep->is_in = 1U;
 800158e:	bf15      	itete	ne
 8001590:	1940      	addne	r0, r0, r5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001592:	1940      	addeq	r0, r0, r5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001594:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001596:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 800159a:	bf15      	itete	ne
 800159c:	2601      	movne	r6, #1
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 800159e:	2600      	moveq	r6, #0
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 80015a0:	f880 603d 	strbne.w	r6, [r0, #61]	; 0x3d
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 80015a4:	f880 61fd 	strbeq.w	r6, [r0, #509]	; 0x1fd
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80015a8:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80015aa:	784a      	ldrb	r2, [r1, #1]
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80015ac:	70cb      	strb	r3, [r1, #3]
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015ae:	b2e4      	uxtb	r4, r4
 80015b0:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80015b2:	b102      	cbz	r2, 80015b6 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80015b4:	80cc      	strh	r4, [r1, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015b6:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80015b8:	bf04      	itt	eq
 80015ba:	2300      	moveq	r3, #0
 80015bc:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80015be:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d009      	beq.n	80015da <HAL_PCD_EP_Open+0x62>
 80015c6:	2301      	movs	r3, #1
 80015c8:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015cc:	6828      	ldr	r0, [r5, #0]
 80015ce:	f000 faeb 	bl	8001ba8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc

  return ret;
 80015d8:	bd70      	pop	{r4, r5, r6, pc}
  if (ep_type == EP_TYPE_BULK)
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 80015da:	2002      	movs	r0, #2
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return ret;
}
 80015dc:	bd70      	pop	{r4, r5, r6, pc}

080015de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015de:	f001 020f 	and.w	r2, r1, #15
 80015e2:	231c      	movs	r3, #28
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e4:	4353      	muls	r3, r2
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015e6:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ea:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ec:	eb00 0103 	add.w	r1, r0, r3
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015f0:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 80015f2:	bf15      	itete	ne
 80015f4:	181b      	addne	r3, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 80015f6:	191b      	addeq	r3, r3, r4
{
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f8:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015fa:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 80015fe:	bf15      	itete	ne
 8001600:	2001      	movne	r0, #1
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001602:	2000      	moveq	r0, #0
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 8001604:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001608:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800160c:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 800160e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001612:	2b01      	cmp	r3, #1
 8001614:	d009      	beq.n	800162a <HAL_PCD_EP_Close+0x4c>
 8001616:	2301      	movs	r3, #1
 8001618:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800161c:	6820      	ldr	r0, [r4, #0]
 800161e:	f000 fb05 	bl	8001c2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001622:	2000      	movs	r0, #0
 8001624:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001628:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 800162a:	2002      	movs	r0, #2
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 800162c:	bd10      	pop	{r4, pc}

0800162e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800162e:	b538      	push	{r3, r4, r5, lr}
 8001630:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001634:	241c      	movs	r4, #28
 8001636:	436c      	muls	r4, r5
 8001638:	1901      	adds	r1, r0, r4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800163a:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800163c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
 8001640:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001644:	2300      	movs	r3, #0
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001646:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800164a:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800164e:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001652:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc

  if (hpcd->Init.dma_enable == 1U)
 8001656:	6903      	ldr	r3, [r0, #16]
 8001658:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
 800165a:	bf08      	it	eq
 800165c:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001660:	6800      	ldr	r0, [r0, #0]
 8001662:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001664:	b915      	cbnz	r5, 800166c <HAL_PCD_EP_Receive+0x3e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001666:	f000 fb1d 	bl	8001ca4 <USB_EP0StartXfer>
 800166a:	e001      	b.n	8001670 <HAL_PCD_EP_Receive+0x42>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800166c:	f000 fbac 	bl	8001dc8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001670:	2000      	movs	r0, #0
 8001672:	bd38      	pop	{r3, r4, r5, pc}

08001674 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001674:	f001 010f 	and.w	r1, r1, #15
 8001678:	231c      	movs	r3, #28
 800167a:	fb03 0001 	mla	r0, r3, r1, r0
}
 800167e:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8001682:	4770      	bx	lr

08001684 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800168a:	241c      	movs	r4, #28
 800168c:	436c      	muls	r4, r5
 800168e:	1901      	adds	r1, r0, r4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001690:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001692:	313c      	adds	r1, #60	; 0x3c

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
 8001694:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800169a:	2301      	movs	r3, #1
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800169c:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 800169e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80016a2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c

  if (hpcd->Init.dma_enable == 1U)
 80016a6:	6903      	ldr	r3, [r0, #16]
 80016a8:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
 80016aa:	bf08      	it	eq
 80016ac:	64e2      	streq	r2, [r4, #76]	; 0x4c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80016ae:	6800      	ldr	r0, [r0, #0]
 80016b0:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016b2:	b915      	cbnz	r5, 80016ba <HAL_PCD_EP_Transmit+0x36>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80016b4:	f000 faf6 	bl	8001ca4 <USB_EP0StartXfer>
 80016b8:	e001      	b.n	80016be <HAL_PCD_EP_Transmit+0x3a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80016ba:	f000 fb85 	bl	8001dc8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80016be:	2000      	movs	r0, #0
 80016c0:	bd38      	pop	{r3, r4, r5, pc}

080016c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016c2:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016c4:	6843      	ldr	r3, [r0, #4]
 80016c6:	f001 050f 	and.w	r5, r1, #15
 80016ca:	429d      	cmp	r5, r3
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016cc:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016ce:	d82b      	bhi.n	8001728 <HAL_PCD_EP_SetStall+0x66>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016d0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016d4:	f04f 031c 	mov.w	r3, #28
 80016d8:	d007      	beq.n	80016ea <HAL_PCD_EP_SetStall+0x28>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016da:	436b      	muls	r3, r5
 80016dc:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 80016de:	4403      	add	r3, r0
 80016e0:	2201      	movs	r2, #1
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e2:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80016e8:	e007      	b.n	80016fa <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016ea:	434b      	muls	r3, r1
 80016ec:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 80016ee:	4403      	add	r3, r0
 80016f0:	2200      	movs	r2, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016f2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80016f6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  }

  ep->is_stall = 1U;
 80016fa:	2301      	movs	r3, #1
 80016fc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016fe:	700d      	strb	r5, [r1, #0]

  __HAL_LOCK(hpcd);
 8001700:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8001704:	429a      	cmp	r2, r3
 8001706:	d011      	beq.n	800172c <HAL_PCD_EP_SetStall+0x6a>
 8001708:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800170c:	6820      	ldr	r0, [r4, #0]
 800170e:	f000 fc4f 	bl	8001fb0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001712:	b92d      	cbnz	r5, 8001720 <HAL_PCD_EP_SetStall+0x5e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001714:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001718:	7c21      	ldrb	r1, [r4, #16]
 800171a:	6820      	ldr	r0, [r4, #0]
 800171c:	f000 fcf4 	bl	8002108 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001720:	2000      	movs	r0, #0
 8001722:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001726:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001728:	2001      	movs	r0, #1
 800172a:	bd38      	pop	{r3, r4, r5, pc}
  }

  ep->is_stall = 1U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 800172c:	2002      	movs	r0, #2
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 800172e:	bd38      	pop	{r3, r4, r5, pc}

08001730 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001730:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001732:	6843      	ldr	r3, [r0, #4]
 8001734:	f001 020f 	and.w	r2, r1, #15
 8001738:	429a      	cmp	r2, r3
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800173a:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800173c:	d825      	bhi.n	800178a <HAL_PCD_EP_ClrStall+0x5a>
 800173e:	231c      	movs	r3, #28
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001740:	4353      	muls	r3, r2
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001742:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001746:	eb00 0103 	add.w	r1, r0, r3
 800174a:	bf19      	ittee	ne
 800174c:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 800174e:	181b      	addne	r3, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001750:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8001754:	191b      	addeq	r3, r3, r4
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 8001756:	bf14      	ite	ne
 8001758:	2001      	movne	r0, #1
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 800175a:	2000      	moveq	r0, #0
  }

  ep->is_stall = 0U;
 800175c:	f04f 0500 	mov.w	r5, #0
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 8001760:	bf14      	ite	ne
 8001762:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001766:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  }

  ep->is_stall = 0U;
 800176a:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800176c:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 800176e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001772:	2b01      	cmp	r3, #1
 8001774:	d00b      	beq.n	800178e <HAL_PCD_EP_ClrStall+0x5e>
 8001776:	2301      	movs	r3, #1
 8001778:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800177c:	6820      	ldr	r0, [r4, #0]
 800177e:	f000 fc32 	bl	8001fe6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001782:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001786:	4628      	mov	r0, r5
 8001788:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	bd38      	pop	{r3, r4, r5, pc}
  }

  ep->is_stall = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 800178e:	2002      	movs	r0, #2
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001790:	bd38      	pop	{r3, r4, r5, pc}

08001792 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001792:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001794:	6804      	ldr	r4, [r0, #0]
 8001796:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001798:	b919      	cbnz	r1, 80017a2 <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800179a:	ea40 4302 	orr.w	r3, r0, r2, lsl #16
 800179e:	62a3      	str	r3, [r4, #40]	; 0x28
 80017a0:	e016      	b.n	80017d0 <HAL_PCDEx_SetTxFiFo+0x3e>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80017a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80017a4:	2500      	movs	r5, #0
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80017a6:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80017aa:	1e4e      	subs	r6, r1, #1
 80017ac:	b2e8      	uxtb	r0, r5
 80017ae:	4286      	cmp	r6, r0
 80017b0:	f105 0501 	add.w	r5, r5, #1
 80017b4:	d906      	bls.n	80017c4 <HAL_PCDEx_SetTxFiFo+0x32>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80017b6:	3040      	adds	r0, #64	; 0x40
 80017b8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80017bc:	6840      	ldr	r0, [r0, #4]
 80017be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80017c2:	e7f3      	b.n	80017ac <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80017c4:	313f      	adds	r1, #63	; 0x3f
 80017c6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80017ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017ce:	6063      	str	r3, [r4, #4]
  }

  return HAL_OK;
}
 80017d0:	2000      	movs	r0, #0
 80017d2:	bd70      	pop	{r4, r5, r6, pc}

080017d4 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80017d4:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80017d6:	2000      	movs	r0, #0
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80017d8:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80017da:	4770      	bx	lr

080017dc <HAL_PCDEx_LPM_Callback>:
 80017dc:	4770      	bx	lr
	...

080017e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80017e2:	3b01      	subs	r3, #1
 80017e4:	d101      	bne.n	80017ea <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80017e6:	2003      	movs	r0, #3
 80017e8:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80017ea:	6902      	ldr	r2, [r0, #16]
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	daf8      	bge.n	80017e2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80017f0:	6903      	ldr	r3, [r0, #16]
 80017f2:	4a06      	ldr	r2, [pc, #24]	; (800180c <USB_CoreReset+0x2c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80017fa:	3a01      	subs	r2, #1
 80017fc:	d0f3      	beq.n	80017e6 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80017fe:	6903      	ldr	r3, [r0, #16]
 8001800:	f013 0301 	ands.w	r3, r3, #1
 8001804:	d1f9      	bne.n	80017fa <USB_CoreReset+0x1a>

  return HAL_OK;
 8001806:	4618      	mov	r0, r3
}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	00030d41 	.word	0x00030d41

08001810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001810:	b084      	sub	sp, #16
 8001812:	b538      	push	{r3, r4, r5, lr}
 8001814:	ad05      	add	r5, sp, #20
 8001816:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800181a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800181c:	2b01      	cmp	r3, #1
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800181e:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001820:	d117      	bne.n	8001852 <USB_CoreInit+0x42>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001822:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800182a:	68c3      	ldr	r3, [r0, #12]
 800182c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001834:	60c3      	str	r3, [r0, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001836:	68c3      	ldr	r3, [r0, #12]
 8001838:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800183c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800183e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001840:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001842:	bf02      	ittt	eq
 8001844:	68c3      	ldreq	r3, [r0, #12]
 8001846:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800184a:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800184c:	f7ff ffc8 	bl	80017e0 <USB_CoreReset>
 8001850:	e00f      	b.n	8001872 <USB_CoreInit+0x62>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001852:	68c3      	ldr	r3, [r0, #12]
 8001854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001858:	60c3      	str	r3, [r0, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800185a:	f7ff ffc1 	bl	80017e0 <USB_CoreReset>

    if (cfg.battery_charging_enable == 0U)
 800185e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001860:	b91b      	cbnz	r3, 800186a <USB_CoreInit+0x5a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	e002      	b.n	8001870 <USB_CoreInit+0x60>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800186a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800186c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001870:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8001872:	9b08      	ldr	r3, [sp, #32]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d107      	bne.n	8001888 <USB_CoreInit+0x78>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001878:	68a3      	ldr	r3, [r4, #8]
 800187a:	f043 0306 	orr.w	r3, r3, #6
 800187e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001880:	68a3      	ldr	r3, [r4, #8]
 8001882:	f043 0320 	orr.w	r3, r3, #32
 8001886:	60a3      	str	r3, [r4, #8]
  }

  return ret;
}
 8001888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800188c:	b004      	add	sp, #16
 800188e:	4770      	bx	lr

08001890 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8001890:	2a02      	cmp	r2, #2
 8001892:	d14f      	bne.n	8001934 <USB_SetTurnaroundTime+0xa4>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <USB_SetTurnaroundTime+0xc0>)
 8001896:	4a2f      	ldr	r2, [pc, #188]	; (8001954 <USB_SetTurnaroundTime+0xc4>)
 8001898:	440b      	add	r3, r1
 800189a:	4293      	cmp	r3, r2
 800189c:	d93e      	bls.n	800191c <USB_SetTurnaroundTime+0x8c>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800189e:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <USB_SetTurnaroundTime+0xc8>)
 80018a0:	4a2e      	ldr	r2, [pc, #184]	; (800195c <USB_SetTurnaroundTime+0xcc>)
 80018a2:	440b      	add	r3, r1
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d93b      	bls.n	8001920 <USB_SetTurnaroundTime+0x90>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80018a8:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80018ac:	4a2c      	ldr	r2, [pc, #176]	; (8001960 <USB_SetTurnaroundTime+0xd0>)
 80018ae:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d936      	bls.n	8001924 <USB_SetTurnaroundTime+0x94>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80018b6:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80018ba:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80018be:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80018c2:	32a0      	adds	r2, #160	; 0xa0
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d92f      	bls.n	8001928 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <USB_SetTurnaroundTime+0xd4>)
 80018ca:	4a27      	ldr	r2, [pc, #156]	; (8001968 <USB_SetTurnaroundTime+0xd8>)
 80018cc:	440b      	add	r3, r1
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d92c      	bls.n	800192c <USB_SetTurnaroundTime+0x9c>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <USB_SetTurnaroundTime+0xdc>)
 80018d4:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80018d8:	440b      	add	r3, r1
 80018da:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80018de:	4293      	cmp	r3, r2
 80018e0:	d926      	bls.n	8001930 <USB_SetTurnaroundTime+0xa0>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <USB_SetTurnaroundTime+0xe0>)
 80018e4:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80018e8:	440b      	add	r3, r1
 80018ea:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d920      	bls.n	8001934 <USB_SetTurnaroundTime+0xa4>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80018f2:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80018f6:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80018fa:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80018fe:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8001902:	4293      	cmp	r3, r2
 8001904:	d918      	bls.n	8001938 <USB_SetTurnaroundTime+0xa8>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x7U;
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8001908:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800190c:	440b      	add	r3, r1
      UsbTrd = 0x7U;
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800190e:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8001912:	4293      	cmp	r3, r2
 8001914:	bf94      	ite	ls
 8001916:	2307      	movls	r3, #7
 8001918:	2306      	movhi	r3, #6
 800191a:	e00e      	b.n	800193a <USB_SetTurnaroundTime+0xaa>
  if (speed == USBD_FS_SPEED)
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800191c:	230f      	movs	r3, #15
 800191e:	e00c      	b.n	800193a <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8001920:	230e      	movs	r3, #14
 8001922:	e00a      	b.n	800193a <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8001924:	230d      	movs	r3, #13
 8001926:	e008      	b.n	800193a <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8001928:	230c      	movs	r3, #12
 800192a:	e006      	b.n	800193a <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800192c:	230b      	movs	r3, #11
 800192e:	e004      	b.n	800193a <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8001930:	230a      	movs	r3, #10
 8001932:	e002      	b.n	800193a <USB_SetTurnaroundTime+0xaa>
      UsbTrd = 0x6U;
    }
  }
  else if (speed == USBD_HS_SPEED)
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8001934:	2309      	movs	r3, #9
 8001936:	e000      	b.n	800193a <USB_SetTurnaroundTime+0xaa>
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8001938:	2308      	movs	r3, #8
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800193a:	68c2      	ldr	r2, [r0, #12]
 800193c:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001940:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8001942:	68c2      	ldr	r2, [r0, #12]
 8001944:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8001948:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 800194a:	2000      	movs	r0, #0
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	ff275340 	.word	0xff275340
 8001954:	000c34ff 	.word	0x000c34ff
 8001958:	ff1b1e40 	.word	0xff1b1e40
 800195c:	000f423f 	.word	0x000f423f
 8001960:	00124f7f 	.word	0x00124f7f
 8001964:	fee5b660 	.word	0xfee5b660
 8001968:	0016e35f 	.word	0x0016e35f
 800196c:	feced300 	.word	0xfeced300
 8001970:	feb35bc0 	.word	0xfeb35bc0
 8001974:	fe5954e0 	.word	0xfe5954e0

08001978 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001978:	6883      	ldr	r3, [r0, #8]
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001980:	2000      	movs	r0, #0
 8001982:	4770      	bx	lr

08001984 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001984:	6883      	ldr	r3, [r0, #8]
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800198c:	2000      	movs	r0, #0
 800198e:	4770      	bx	lr

08001990 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001990:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001992:	68c3      	ldr	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 8001994:	2901      	cmp	r1, #1
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001996:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800199a:	60c3      	str	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 800199c:	d103      	bne.n	80019a6 <USB_SetCurrentMode+0x16>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800199e:	68c3      	ldr	r3, [r0, #12]
 80019a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019a4:	e003      	b.n	80019ae <USB_SetCurrentMode+0x1e>
  }
  else if (mode == USB_DEVICE_MODE)
 80019a6:	b941      	cbnz	r1, 80019ba <USB_SetCurrentMode+0x2a>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80019a8:	68c3      	ldr	r3, [r0, #12]
 80019aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019ae:	60c3      	str	r3, [r0, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  HAL_Delay(50U);
 80019b0:	2032      	movs	r0, #50	; 0x32
 80019b2:	f000 ffc1 	bl	8002938 <HAL_Delay>

  return HAL_OK;
 80019b6:	2000      	movs	r0, #0
 80019b8:	bd08      	pop	{r3, pc}
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
  }
  else
  {
    return HAL_ERROR;
 80019ba:	2001      	movs	r0, #1
  }
  HAL_Delay(50U);

  return HAL_OK;
}
 80019bc:	bd08      	pop	{r3, pc}
	...

080019c0 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80019c0:	0189      	lsls	r1, r1, #6
 80019c2:	f041 0120 	orr.w	r1, r1, #32
 80019c6:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <USB_FlushTxFifo+0x20>)
 80019c8:	6101      	str	r1, [r0, #16]

  do
  {
    if (++count > 200000U)
 80019ca:	3a01      	subs	r2, #1
 80019cc:	d005      	beq.n	80019da <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80019ce:	6903      	ldr	r3, [r0, #16]
 80019d0:	f013 0320 	ands.w	r3, r3, #32
 80019d4:	d1f9      	bne.n	80019ca <USB_FlushTxFifo+0xa>

  return HAL_OK;
 80019d6:	4618      	mov	r0, r3
 80019d8:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 80019da:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);

  return HAL_OK;
}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	00030d41 	.word	0x00030d41

080019e4 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80019e4:	2310      	movs	r3, #16
 80019e6:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <USB_FlushRxFifo+0x1c>)
 80019e8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80019ea:	3a01      	subs	r2, #1
 80019ec:	d005      	beq.n	80019fa <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80019ee:	6903      	ldr	r3, [r0, #16]
 80019f0:	f013 0310 	ands.w	r3, r3, #16
 80019f4:	d1f9      	bne.n	80019ea <USB_FlushRxFifo+0x6>

  return HAL_OK;
 80019f6:	4618      	mov	r0, r3
 80019f8:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 80019fa:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);

  return HAL_OK;
}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	00030d41 	.word	0x00030d41

08001a04 <USB_SetDevSpeed>:
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG |= speed;
 8001a04:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001a08:	4319      	orrs	r1, r3
 8001a0a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001a0e:	2000      	movs	r0, #0
 8001a10:	4770      	bx	lr
	...

08001a14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001a14:	b084      	sub	sp, #16
 8001a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	a809      	add	r0, sp, #36	; 0x24
 8001a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001a26:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8001a28:	4688      	mov	r8, r1
  {
    USBx->DIEPTXF[i] = 0U;
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001a30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001a34:	3301      	adds	r3, #1
 8001a36:	2b0f      	cmp	r3, #15
  {
    USBx->DIEPTXF[i] = 0U;
 8001a38:	6051      	str	r1, [r2, #4]
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001a3a:	d1f7      	bne.n	8001a2c <USB_DevInit+0x18>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8001a3c:	b95e      	cbnz	r6, 8001a56 <USB_DevInit+0x42>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001a3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a44:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a48:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001a4c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a54:	e006      	b.n	8001a64 <USB_DevInit+0x50>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a5c:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001a5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a64:	63a3      	str	r3, [r4, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001a6c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001a70:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a76:	2b01      	cmp	r3, #1

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001a78:	f504 6500 	add.w	r5, r4, #2048	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001a7c:	d103      	bne.n	8001a86 <USB_DevInit+0x72>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8001a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001a80:	b111      	cbz	r1, 8001a88 <USB_DevInit+0x74>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001a82:	4619      	mov	r1, r3
 8001a84:	e000      	b.n	8001a88 <USB_DevInit+0x74>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001a86:	2103      	movs	r1, #3
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff ffbb 	bl	8001a04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001a8e:	2110      	movs	r1, #16
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff ff95 	bl	80019c0 <USB_FlushTxFifo>
 8001a96:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff ffa3 	bl	80019e4 <USB_FlushRxFifo>
 8001a9e:	b918      	cbnz	r0, 8001aa8 <USB_DevInit+0x94>
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret = HAL_OK;
 8001aa0:	1c08      	adds	r0, r1, #0
 8001aa2:	bf18      	it	ne
 8001aa4:	2001      	movne	r0, #1
 8001aa6:	e000      	b.n	8001aaa <USB_DevInit+0x96>
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
  {
    ret = HAL_ERROR;
 8001aa8:	2001      	movs	r0, #1
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	612b      	str	r3, [r5, #16]
 8001aae:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8001ab2:	616b      	str	r3, [r5, #20]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001ab4:	4619      	mov	r1, r3
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;
 8001ab6:	61eb      	str	r3, [r5, #28]
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001ab8:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      if (i == 0U)
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001abc:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001ac0:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001ac4:	4543      	cmp	r3, r8
 8001ac6:	d012      	beq.n	8001aee <USB_DevInit+0xda>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001ac8:	f8d2 a000 	ldr.w	sl, [r2]
 8001acc:	f1ba 0f00 	cmp.w	sl, #0
 8001ad0:	da06      	bge.n	8001ae0 <USB_DevInit+0xcc>
    {
      if (i == 0U)
 8001ad2:	b913      	cbnz	r3, 8001ada <USB_DevInit+0xc6>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001ad4:	f8c2 c000 	str.w	ip, [r2]
 8001ad8:	e003      	b.n	8001ae2 <USB_DevInit+0xce>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001ada:	f8c2 e000 	str.w	lr, [r2]
 8001ade:	e000      	b.n	8001ae2 <USB_DevInit+0xce>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001ae0:	6011      	str	r1, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001ae2:	6111      	str	r1, [r2, #16]
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001ae4:	3301      	adds	r3, #1
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001ae6:	f8c2 9008 	str.w	r9, [r2, #8]
 8001aea:	3220      	adds	r2, #32
 8001aec:	e7ea      	b.n	8001ac4 <USB_DevInit+0xb0>
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001aee:	2200      	movs	r2, #0
 8001af0:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001af4:	4611      	mov	r1, r2
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001af6:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      if (i == 0U)
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001afa:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001afe:	f64f 397f 	movw	r9, #64383	; 0xfb7f

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001b02:	4542      	cmp	r2, r8
 8001b04:	d012      	beq.n	8001b2c <USB_DevInit+0x118>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001b06:	f8d3 a000 	ldr.w	sl, [r3]
 8001b0a:	f1ba 0f00 	cmp.w	sl, #0
 8001b0e:	da06      	bge.n	8001b1e <USB_DevInit+0x10a>
    {
      if (i == 0U)
 8001b10:	b912      	cbnz	r2, 8001b18 <USB_DevInit+0x104>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001b12:	f8c3 c000 	str.w	ip, [r3]
 8001b16:	e003      	b.n	8001b20 <USB_DevInit+0x10c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001b18:	f8c3 e000 	str.w	lr, [r3]
 8001b1c:	e000      	b.n	8001b20 <USB_DevInit+0x10c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001b1e:	6019      	str	r1, [r3, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001b20:	6119      	str	r1, [r3, #16]

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001b22:	3201      	adds	r2, #1
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001b24:	f8c3 9008 	str.w	r9, [r3, #8]
 8001b28:	3320      	adds	r3, #32
 8001b2a:	e7ea      	b.n	8001b02 <USB_DevInit+0xee>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001b2c:	692b      	ldr	r3, [r5, #16]

  if (cfg.dma_enable == 1U)
 8001b2e:	2f01      	cmp	r7, #1

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b34:	612b      	str	r3, [r5, #16]

  if (cfg.dma_enable == 1U)
 8001b36:	d107      	bne.n	8001b48 <USB_DevInit+0x134>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <USB_DevInit+0x174>)
 8001b3a:	632b      	str	r3, [r5, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001b3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	f043 0303 	orr.w	r3, r3, #3
 8001b46:	632b      	str	r3, [r5, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001b4c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001b50:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8001b52:	b91f      	cbnz	r7, 8001b5c <USB_DevInit+0x148>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001b54:	69a3      	ldr	r3, [r4, #24]
 8001b56:	f043 0310 	orr.w	r3, r3, #16
 8001b5a:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001b5c:	69a2      	ldr	r2, [r4, #24]
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <USB_DevInit+0x178>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61a3      	str	r3, [r4, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8001b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b66:	b11b      	cbz	r3, 8001b70 <USB_DevInit+0x15c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001b68:	69a3      	ldr	r3, [r4, #24]
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8001b70:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001b72:	bf01      	itttt	eq
 8001b74:	69a3      	ldreq	r3, [r4, #24]
 8001b76:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001b7a:	f043 0304 	orreq.w	r3, r3, #4
 8001b7e:	61a3      	streq	r3, [r4, #24]
  }

  return ret;
}
 8001b80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b84:	b004      	add	sp, #16
 8001b86:	4770      	bx	lr
 8001b88:	00800100 	.word	0x00800100
 8001b8c:	803c3800 	.word	0x803c3800

08001b90 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8001b90:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8001b94:	f013 0006 	ands.w	r0, r3, #6
 8001b98:	d005      	beq.n	8001ba6 <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b02      	cmp	r3, #2
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2002      	moveq	r0, #2
 8001ba4:	200f      	movne	r0, #15
  }

  return speed;
}
 8001ba6:	4770      	bx	lr

08001ba8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001baa:	784a      	ldrb	r2, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001bac:	780e      	ldrb	r6, [r1, #0]

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001bae:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8001bb2:	f500 6300 	add.w	r3, r0, #2048	; 0x800
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001bb6:	2a01      	cmp	r2, #1
 8001bb8:	f006 070f 	and.w	r7, r6, #15
 8001bbc:	d119      	bne.n	8001bf2 <USB_ActivateEndpoint+0x4a>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001bbe:	40ba      	lsls	r2, r7

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001bc0:	f44f 6510 	mov.w	r5, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001bc4:	4322      	orrs	r2, r4

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001bc6:	eb05 1546 	add.w	r5, r5, r6, lsl #5
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001bca:	61da      	str	r2, [r3, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001bcc:	582b      	ldr	r3, [r5, r0]
 8001bce:	041c      	lsls	r4, r3, #16
 8001bd0:	d429      	bmi.n	8001c26 <USB_ActivateEndpoint+0x7e>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001bd2:	688b      	ldr	r3, [r1, #8]
 8001bd4:	582c      	ldr	r4, [r5, r0]
 8001bd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bda:	f044 5380 	orr.w	r3, r4, #268435456	; 0x10000000
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	431a      	orrs	r2, r3
 8001be4:	78cb      	ldrb	r3, [r1, #3]
 8001be6:	ea42 4383 	orr.w	r3, r2, r3, lsl #18
 8001bea:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 8001bee:	502b      	str	r3, [r5, r0]
 8001bf0:	e019      	b.n	8001c26 <USB_ActivateEndpoint+0x7e>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8001bf2:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8001bf6:	fa05 f207 	lsl.w	r2, r5, r7
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	61da      	str	r2, [r3, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001bfe:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001c02:	eb02 1346 	add.w	r3, r2, r6, lsl #5
 8001c06:	581a      	ldr	r2, [r3, r0]
 8001c08:	0412      	lsls	r2, r2, #16
 8001c0a:	d40c      	bmi.n	8001c26 <USB_ActivateEndpoint+0x7e>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8001c0c:	688a      	ldr	r2, [r1, #8]
 8001c0e:	581c      	ldr	r4, [r3, r0]
 8001c10:	78c9      	ldrb	r1, [r1, #3]
 8001c12:	f3c2 050a 	ubfx	r5, r2, #0, #11
 8001c16:	f044 5280 	orr.w	r2, r4, #268435456	; 0x10000000
 8001c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1e:	432a      	orrs	r2, r5
 8001c20:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001c24:	501a      	str	r2, [r3, r0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 8001c26:	2000      	movs	r0, #0
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001c2c:	b570      	push	{r4, r5, r6, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8001c2e:	784c      	ldrb	r4, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001c30:	780d      	ldrb	r5, [r1, #0]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001c32:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 8001c36:	f500 6300 	add.w	r3, r0, #2048	; 0x800
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8001c3a:	2c01      	cmp	r4, #1
 8001c3c:	f005 020f 	and.w	r2, r5, #15
 8001c40:	d113      	bne.n	8001c6a <USB_DeactivateEndpoint+0x3e>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001c42:	fa04 f202 	lsl.w	r2, r4, r2
 8001c46:	ea26 0202 	bic.w	r2, r6, r2
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001c4c:	7809      	ldrb	r1, [r1, #0]
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	f001 010f 	and.w	r1, r1, #15
 8001c54:	408c      	lsls	r4, r1
 8001c56:	ea22 0404 	bic.w	r4, r2, r4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8001c5a:	f44f 6210 	mov.w	r2, #2304	; 0x900

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001c5e:	61dc      	str	r4, [r3, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8001c60:	eb02 1345 	add.w	r3, r2, r5, lsl #5
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <USB_DeactivateEndpoint+0x70>)
 8001c66:	5819      	ldr	r1, [r3, r0]
 8001c68:	e013      	b.n	8001c92 <USB_DeactivateEndpoint+0x66>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001c6a:	2401      	movs	r4, #1
 8001c6c:	fa04 f202 	lsl.w	r2, r4, r2
 8001c70:	ea26 4202 	bic.w	r2, r6, r2, lsl #16
 8001c74:	63da      	str	r2, [r3, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001c76:	7809      	ldrb	r1, [r1, #0]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	f001 010f 	and.w	r1, r1, #15
 8001c7e:	408c      	lsls	r4, r1
 8001c80:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8001c84:	61dc      	str	r4, [r3, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8001c86:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001c8a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <USB_DeactivateEndpoint+0x74>)
 8001c90:	5819      	ldr	r1, [r3, r0]
 8001c92:	400a      	ands	r2, r1
 8001c94:	501a      	str	r2, [r3, r0]
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
}
 8001c96:	2000      	movs	r0, #0
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
 8001c9a:	bf00      	nop
 8001c9c:	ec337800 	.word	0xec337800
 8001ca0:	eff37800 	.word	0xeff37800

08001ca4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8001ca6:	784b      	ldrb	r3, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001ca8:	780d      	ldrb	r5, [r1, #0]
 8001caa:	694e      	ldr	r6, [r1, #20]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f04f 0420 	mov.w	r4, #32
 8001cb2:	d14f      	bne.n	8001d54 <USB_EP0StartXfer+0xb0>
 8001cb4:	f44f 6310 	mov.w	r3, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001cb8:	fb14 3305 	smlabb	r3, r4, r5, r3
 8001cbc:	4403      	add	r3, r0
 8001cbe:	691c      	ldr	r4, [r3, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8001cc0:	b966      	cbnz	r6, 8001cdc <USB_EP0StartXfer+0x38>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001cc2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001cc6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001cca:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001ccc:	691c      	ldr	r4, [r3, #16]
 8001cce:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001cd2:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001cd4:	691c      	ldr	r4, [r3, #16]
 8001cd6:	0ce4      	lsrs	r4, r4, #19
 8001cd8:	04e4      	lsls	r4, r4, #19
 8001cda:	e015      	b.n	8001d08 <USB_EP0StartXfer+0x64>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001cdc:	0ce4      	lsrs	r4, r4, #19
 8001cde:	04e4      	lsls	r4, r4, #19
 8001ce0:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001ce2:	691c      	ldr	r4, [r3, #16]
 8001ce4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001ce8:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001cec:	611c      	str	r4, [r3, #16]

      if (ep->xfer_len > ep->maxpacket)
 8001cee:	688c      	ldr	r4, [r1, #8]
 8001cf0:	42a6      	cmp	r6, r4
      {
        ep->xfer_len = ep->maxpacket;
 8001cf2:	bf88      	it	hi
 8001cf4:	614c      	strhi	r4, [r1, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001cf6:	691c      	ldr	r4, [r3, #16]
 8001cf8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001cfc:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001cfe:	694c      	ldr	r4, [r1, #20]
 8001d00:	691e      	ldr	r6, [r3, #16]
 8001d02:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001d06:	4334      	orrs	r4, r6
    }

    if (dma == 1U)
 8001d08:	2a01      	cmp	r2, #1
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001d0a:	611c      	str	r4, [r3, #16]
 8001d0c:	f04f 0220 	mov.w	r2, #32
    }

    if (dma == 1U)
 8001d10:	d10a      	bne.n	8001d28 <USB_EP0StartXfer+0x84>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8001d12:	690b      	ldr	r3, [r1, #16]
 8001d14:	b11b      	cbz	r3, 8001d1e <USB_EP0StartXfer+0x7a>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001d16:	fb02 0205 	mla	r2, r2, r5, r0
 8001d1a:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001d1e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001d22:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8001d26:	e035      	b.n	8001d94 <USB_EP0StartXfer+0xf0>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001d28:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001d2c:	fb12 3305 	smlabb	r3, r2, r5, r3
 8001d30:	58c2      	ldr	r2, [r0, r3]
 8001d32:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8001d36:	50c2      	str	r2, [r0, r3]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8001d38:	694b      	ldr	r3, [r1, #20]
 8001d3a:	b37b      	cbz	r3, 8001d9c <USB_EP0StartXfer+0xf8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8001d3c:	780b      	ldrb	r3, [r1, #0]
 8001d3e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001d52:	e023      	b.n	8001d9c <USB_EP0StartXfer+0xf8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8001d54:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001d58:	fb14 3305 	smlabb	r3, r4, r5, r3
 8001d5c:	181c      	adds	r4, r3, r0
 8001d5e:	6925      	ldr	r5, [r4, #16]
 8001d60:	0ced      	lsrs	r5, r5, #19
 8001d62:	04ed      	lsls	r5, r5, #19
 8001d64:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8001d66:	6925      	ldr	r5, [r4, #16]
 8001d68:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001d6c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001d70:	6125      	str	r5, [r4, #16]
 8001d72:	688d      	ldr	r5, [r1, #8]

    if (ep->xfer_len > 0U)
 8001d74:	b106      	cbz	r6, 8001d78 <USB_EP0StartXfer+0xd4>
    {
      ep->xfer_len = ep->maxpacket;
 8001d76:	614d      	str	r5, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001d78:	6926      	ldr	r6, [r4, #16]
 8001d7a:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8001d7e:	6126      	str	r6, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8001d80:	6926      	ldr	r6, [r4, #16]
 8001d82:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001d86:	4335      	orrs	r5, r6

    if (dma == 1U)
 8001d88:	2a01      	cmp	r2, #1
    {
      ep->xfer_len = ep->maxpacket;
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8001d8a:	6125      	str	r5, [r4, #16]

    if (dma == 1U)
 8001d8c:	d102      	bne.n	8001d94 <USB_EP0StartXfer+0xf0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8001d8e:	68ca      	ldr	r2, [r1, #12]
 8001d90:	b102      	cbz	r2, 8001d94 <USB_EP0StartXfer+0xf0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001d92:	6162      	str	r2, [r4, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001d94:	581a      	ldr	r2, [r3, r0]
 8001d96:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8001d9a:	501a      	str	r2, [r3, r0]
  }

  return HAL_OK;
}
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}

08001da0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001da0:	b510      	push	{r4, lr}
 8001da2:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 8001da6:	b96c      	cbnz	r4, 8001dc4 <USB_WritePacket+0x24>
 8001da8:	3303      	adds	r3, #3
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001daa:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001db6:	440b      	add	r3, r1
  uint32_t count32b, i;

  if (dma == 0U)
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
 8001db8:	4299      	cmp	r1, r3
 8001dba:	d003      	beq.n	8001dc4 <USB_WritePacket+0x24>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001dbc:	f851 2b04 	ldr.w	r2, [r1], #4
 8001dc0:	6002      	str	r2, [r0, #0]
 8001dc2:	e7f9      	b.n	8001db8 <USB_WritePacket+0x18>
      pSrc++;
    }
  }

  return HAL_OK;
}
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	bd10      	pop	{r4, pc}

08001dc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8001dca:	784b      	ldrb	r3, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001dcc:	780e      	ldrb	r6, [r1, #0]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f04f 0520 	mov.w	r5, #32
 8001dd4:	694b      	ldr	r3, [r1, #20]
 8001dd6:	f040 8091 	bne.w	8001efc <USB_EPStartXfer+0x134>
 8001dda:	f44f 6410 	mov.w	r4, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8001dde:	b98b      	cbnz	r3, 8001e04 <USB_EPStartXfer+0x3c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001de0:	fb15 4506 	smlabb	r5, r5, r6, r4
 8001de4:	4405      	add	r5, r0
 8001de6:	692c      	ldr	r4, [r5, #16]
 8001de8:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001dec:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001df0:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001df2:	692c      	ldr	r4, [r5, #16]
 8001df4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001df8:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001dfa:	692c      	ldr	r4, [r5, #16]
 8001dfc:	0ce4      	lsrs	r4, r4, #19
 8001dfe:	04e4      	lsls	r4, r4, #19
 8001e00:	612c      	str	r4, [r5, #16]
 8001e02:	e02c      	b.n	8001e5e <USB_EPStartXfer+0x96>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001e04:	fb15 4406 	smlabb	r4, r5, r6, r4
 8001e08:	4404      	add	r4, r0
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8001e0a:	f8d1 e008 	ldr.w	lr, [r1, #8]
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001e0e:	6925      	ldr	r5, [r4, #16]
 8001e10:	0ced      	lsrs	r5, r5, #19
 8001e12:	04ed      	lsls	r5, r5, #19
 8001e14:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001e16:	6925      	ldr	r5, [r4, #16]
 8001e18:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001e1c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001e20:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8001e22:	eb03 050e 	add.w	r5, r3, lr
 8001e26:	3d01      	subs	r5, #1
 8001e28:	fbb5 f5fe 	udiv	r5, r5, lr
 8001e2c:	f8df e160 	ldr.w	lr, [pc, #352]	; 8001f90 <USB_EPStartXfer+0x1c8>
 8001e30:	6927      	ldr	r7, [r4, #16]
 8001e32:	04ed      	lsls	r5, r5, #19
 8001e34:	ea05 0e0e 	and.w	lr, r5, lr
 8001e38:	ea4e 0507 	orr.w	r5, lr, r7
 8001e3c:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001e3e:	6925      	ldr	r5, [r4, #16]
 8001e40:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001e44:	433d      	orrs	r5, r7
 8001e46:	6125      	str	r5, [r4, #16]

      if (ep->type == EP_TYPE_ISOC)
 8001e48:	78cd      	ldrb	r5, [r1, #3]
 8001e4a:	2d01      	cmp	r5, #1
 8001e4c:	d107      	bne.n	8001e5e <USB_EPStartXfer+0x96>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8001e4e:	6925      	ldr	r5, [r4, #16]
 8001e50:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8001e54:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8001e56:	6925      	ldr	r5, [r4, #16]
 8001e58:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8001e5c:	6125      	str	r5, [r4, #16]
      }
    }

    if (dma == 1U)
 8001e5e:	2a01      	cmp	r2, #1
 8001e60:	f04f 0520 	mov.w	r5, #32
 8001e64:	d11e      	bne.n	8001ea4 <USB_EPStartXfer+0xdc>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8001e66:	690b      	ldr	r3, [r1, #16]
 8001e68:	b11b      	cbz	r3, 8001e72 <USB_EPStartXfer+0xaa>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001e6a:	fb05 0506 	mla	r5, r5, r6, r0
 8001e6e:	f8c5 3914 	str.w	r3, [r5, #2324]	; 0x914
      }

      if (ep->type == EP_TYPE_ISOC)
 8001e72:	78cb      	ldrb	r3, [r1, #3]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d110      	bne.n	8001e9a <USB_EPStartXfer+0xd2>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001e78:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001e7c:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8001e80:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e84:	f04f 0320 	mov.w	r3, #32
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001e88:	fb13 2306 	smlabb	r3, r3, r6, r2
 8001e8c:	58c2      	ldr	r2, [r0, r3]
 8001e8e:	bf0c      	ite	eq
 8001e90:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001e94:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8001e98:	50c2      	str	r2, [r0, r3]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001e9a:	f44f 6410 	mov.w	r4, #2304	; 0x900
 8001e9e:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 8001ea2:	e06d      	b.n	8001f80 <USB_EPStartXfer+0x1b8>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001ea4:	f44f 6410 	mov.w	r4, #2304	; 0x900
 8001ea8:	fb15 4406 	smlabb	r4, r5, r6, r4
 8001eac:	5905      	ldr	r5, [r0, r4]
 8001eae:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8001eb2:	5105      	str	r5, [r0, r4]

      if (ep->type != EP_TYPE_ISOC)
 8001eb4:	78cd      	ldrb	r5, [r1, #3]
 8001eb6:	2d01      	cmp	r5, #1
 8001eb8:	d00d      	beq.n	8001ed6 <USB_EPStartXfer+0x10e>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d064      	beq.n	8001f88 <USB_EPStartXfer+0x1c0>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8001ebe:	780b      	ldrb	r3, [r1, #0]
 8001ec0:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001ed4:	e058      	b.n	8001f88 <USB_EPStartXfer+0x1c0>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001ed6:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8001eda:	f415 7f80 	tst.w	r5, #256	; 0x100
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001ede:	5905      	ldr	r5, [r0, r4]
 8001ee0:	bf0c      	ite	eq
 8001ee2:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001ee6:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8001eea:	5105      	str	r5, [r0, r4]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8001eec:	780c      	ldrb	r4, [r1, #0]
 8001eee:	9200      	str	r2, [sp, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4622      	mov	r2, r4
 8001ef4:	68c9      	ldr	r1, [r1, #12]
 8001ef6:	f7ff ff53 	bl	8001da0 <USB_WritePacket>
 8001efa:	e045      	b.n	8001f88 <USB_EPStartXfer+0x1c0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8001efc:	f44f 6430 	mov.w	r4, #2816	; 0xb00
 8001f00:	fb15 4406 	smlabb	r4, r5, r6, r4
 8001f04:	1905      	adds	r5, r0, r4
 8001f06:	692e      	ldr	r6, [r5, #16]
 8001f08:	0cf6      	lsrs	r6, r6, #19
 8001f0a:	04f6      	lsls	r6, r6, #19
 8001f0c:	612e      	str	r6, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8001f0e:	692e      	ldr	r6, [r5, #16]
 8001f10:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001f14:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001f18:	612e      	str	r6, [r5, #16]
 8001f1a:	688e      	ldr	r6, [r1, #8]

    if (ep->xfer_len == 0U)
 8001f1c:	b943      	cbnz	r3, 8001f30 <USB_EPStartXfer+0x168>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001f1e:	692f      	ldr	r7, [r5, #16]
 8001f20:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8001f24:	433e      	orrs	r6, r7
 8001f26:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001f28:	692b      	ldr	r3, [r5, #16]
 8001f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f2e:	e013      	b.n	8001f58 <USB_EPStartXfer+0x190>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8001f30:	4433      	add	r3, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8001f32:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8001f90 <USB_EPStartXfer+0x1c8>
 8001f36:	692f      	ldr	r7, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	fbb3 f3f6 	udiv	r3, r3, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8001f3e:	ea4f 4cc3 	mov.w	ip, r3, lsl #19
 8001f42:	ea0c 0e0e 	and.w	lr, ip, lr
 8001f46:	ea4e 0707 	orr.w	r7, lr, r7
 8001f4a:	612f      	str	r7, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	692f      	ldr	r7, [r5, #16]
 8001f50:	4373      	muls	r3, r6
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f56:	433b      	orrs	r3, r7
    }

    if (dma == 1U)
 8001f58:	2a01      	cmp	r2, #1
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8001f5a:	612b      	str	r3, [r5, #16]
    }

    if (dma == 1U)
 8001f5c:	d102      	bne.n	8001f64 <USB_EPStartXfer+0x19c>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8001f5e:	68cb      	ldr	r3, [r1, #12]
 8001f60:	b103      	cbz	r3, 8001f64 <USB_EPStartXfer+0x19c>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001f62:	616b      	str	r3, [r5, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8001f64:	78cb      	ldrb	r3, [r1, #3]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10a      	bne.n	8001f80 <USB_EPStartXfer+0x1b8>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001f6a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001f6e:	f413 7f80 	tst.w	r3, #256	; 0x100
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001f72:	5903      	ldr	r3, [r0, r4]
 8001f74:	bf0c      	ite	eq
 8001f76:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001f7a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	5103      	str	r3, [r0, r4]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001f80:	5903      	ldr	r3, [r0, r4]
 8001f82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001f86:	5103      	str	r3, [r0, r4]
  }

  return HAL_OK;
}
 8001f88:	2000      	movs	r0, #0
 8001f8a:	b003      	add	sp, #12
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	1ff80000 	.word	0x1ff80000

08001f94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001f94:	3203      	adds	r2, #3
 8001f96:	f022 0203 	bic.w	r2, r2, #3
 8001f9a:	440a      	add	r2, r1
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001f9c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
 8001fa0:	4291      	cmp	r1, r2
 8001fa2:	d003      	beq.n	8001fac <USB_ReadPacket+0x18>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001fa4:	6803      	ldr	r3, [r0, #0]
 8001fa6:	f841 3b04 	str.w	r3, [r1], #4
 8001faa:	e7f9      	b.n	8001fa0 <USB_ReadPacket+0xc>
    pDest++;
  }

  return ((void *)pDest);
}
 8001fac:	4608      	mov	r0, r1
 8001fae:	4770      	bx	lr

08001fb0 <USB_EPSetStall>:
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001fb0:	784b      	ldrb	r3, [r1, #1]
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001fb2:	b510      	push	{r4, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001fb4:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001fb6:	780c      	ldrb	r4, [r1, #0]
 8001fb8:	f04f 0220 	mov.w	r2, #32

  if (ep->is_in == 1U)
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8001fbc:	bf0c      	ite	eq
 8001fbe:	f44f 6310 	moveq.w	r3, #2304	; 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8001fc2:	f44f 6330 	movne.w	r3, #2816	; 0xb00
 8001fc6:	fb12 3304 	smlabb	r3, r2, r4, r3
 8001fca:	581a      	ldr	r2, [r3, r0]
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	db04      	blt.n	8001fda <USB_EPSetStall+0x2a>
 8001fd0:	b11c      	cbz	r4, 8001fda <USB_EPSetStall+0x2a>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8001fd2:	581a      	ldr	r2, [r3, r0]
 8001fd4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001fd8:	501a      	str	r2, [r3, r0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001fda:	581a      	ldr	r2, [r3, r0]
 8001fdc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001fe0:	501a      	str	r2, [r3, r0]
  }

  return HAL_OK;
}
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	bd10      	pop	{r4, pc}

08001fe6 <USB_EPClearStall>:
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001fe6:	784b      	ldrb	r3, [r1, #1]
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001fe8:	b510      	push	{r4, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001fea:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001fec:	780c      	ldrb	r4, [r1, #0]

  if (ep->is_in == 1U)
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fee:	bf0c      	ite	eq
 8001ff0:	f44f 6310 	moveq.w	r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ff4:	f44f 6330 	movne.w	r3, #2816	; 0xb00
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	fb12 3304 	smlabb	r3, r2, r4, r3
 8001ffe:	581a      	ldr	r2, [r3, r0]
 8002000:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002004:	501a      	str	r2, [r3, r0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002006:	78ca      	ldrb	r2, [r1, #3]
 8002008:	3a02      	subs	r2, #2
 800200a:	2a01      	cmp	r2, #1
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800200c:	bf9e      	ittt	ls
 800200e:	581a      	ldrls	r2, [r3, r0]
 8002010:	f042 5280 	orrls.w	r2, r2, #268435456	; 0x10000000
 8002014:	501a      	strls	r2, [r3, r0]
    }
  }
  return HAL_OK;
}
 8002016:	2000      	movs	r0, #0
 8002018:	bd10      	pop	{r4, pc}

0800201a <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800201a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800201e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002022:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002026:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800202a:	0109      	lsls	r1, r1, #4
 800202c:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002030:	430b      	orrs	r3, r1
 8002032:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800

  return HAL_OK;
}
 8002036:	2000      	movs	r0, #0
 8002038:	4770      	bx	lr

0800203a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800203a:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800203c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002040:	f023 0302 	bic.w	r3, r3, #2
 8002044:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 fc75 	bl	8002938 <HAL_Delay>

  return HAL_OK;
}
 800204e:	2000      	movs	r0, #0
 8002050:	bd08      	pop	{r3, pc}

08002052 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002052:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002054:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 fc69 	bl	8002938 <HAL_Delay>

  return HAL_OK;
}
 8002066:	2000      	movs	r0, #0
 8002068:	bd08      	pop	{r3, pc}

0800206a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800206a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800206c:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 800206e:	4010      	ands	r0, r2
 8002070:	4770      	bx	lr

08002072 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8002072:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002076:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800207a:	69db      	ldr	r3, [r3, #28]

  return ((tmpreg & 0xffff0000U) >> 16);
 800207c:	4018      	ands	r0, r3
}
 800207e:	0c00      	lsrs	r0, r0, #16
 8002080:	4770      	bx	lr

08002082 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8002082:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002086:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800208a:	69db      	ldr	r3, [r3, #28]

  return ((tmpreg & 0xFFFFU));
 800208c:	4018      	ands	r0, r3
}
 800208e:	b280      	uxth	r0, r0
 8002090:	4770      	bx	lr

08002092 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002092:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002096:	f500 6000 	add.w	r0, r0, #2048	; 0x800
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800209a:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800209e:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 80020a0:	4010      	ands	r0, r2
 80020a2:	4770      	bx	lr

080020a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80020a4:	b510      	push	{r4, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80020a6:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80020aa:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;

  return tmpreg;
 80020ae:	f001 030f 	and.w	r3, r1, #15
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80020b2:	eb00 1041 	add.w	r0, r0, r1, lsl #5

  return tmpreg;
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80020ba:	f500 6010 	add.w	r0, r0, #2304	; 0x900

  return tmpreg;
 80020be:	01db      	lsls	r3, r3, #7
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80020c0:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4323      	orrs	r3, r4
}
 80020c6:	4018      	ands	r0, r3
 80020c8:	bd10      	pop	{r4, pc}

080020ca <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 80020ca:	6940      	ldr	r0, [r0, #20]
}
 80020cc:	f000 0001 	and.w	r0, r0, #1
 80020d0:	4770      	bx	lr

080020d2 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80020d2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80020d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020da:	f023 0307 	bic.w	r3, r3, #7
 80020de:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80020e2:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	f002 0206 	and.w	r2, r2, #6
 80020ec:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80020ee:	bf02      	ittt	eq
 80020f0:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80020f4:	f042 0203 	orreq.w	r2, r2, #3
 80020f8:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002102:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8002104:	2000      	movs	r0, #0
 8002106:	4770      	bx	lr

08002108 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002108:	b510      	push	{r4, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <USB_EP0_OutStart+0x5c>)
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800210c:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800210e:	429c      	cmp	r4, r3
 8002110:	d903      	bls.n	800211a <USB_EP0_OutStart+0x12>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002112:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002116:	2b00      	cmp	r3, #0
 8002118:	db21      	blt.n	800215e <USB_EP0_OutStart+0x56>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800211a:	2400      	movs	r4, #0
 800211c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002120:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002124:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002128:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800212c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002130:	f044 0418 	orr.w	r4, r4, #24
 8002134:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002138:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
 800213c:	2901      	cmp	r1, #1
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800213e:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8002142:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002146:	bf08      	it	eq
 8002148:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800214c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00

  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002150:	bf02      	ittt	eq
 8002152:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 8002156:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 800215a:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800215e:	2000      	movs	r0, #0
 8002160:	bd10      	pop	{r4, pc}
 8002162:	bf00      	nop
 8002164:	4f54300a 	.word	0x4f54300a

08002168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800216c:	4604      	mov	r4, r0
 800216e:	2800      	cmp	r0, #0
 8002170:	f000 8190 	beq.w	8002494 <HAL_RCC_OscConfig+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002174:	6803      	ldr	r3, [r0, #0]
 8002176:	07dd      	lsls	r5, r3, #31
 8002178:	d403      	bmi.n	8002182 <HAL_RCC_OscConfig+0x1a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	0798      	lsls	r0, r3, #30
 800217e:	d44a      	bmi.n	8002216 <HAL_RCC_OscConfig+0xae>
 8002180:	e08f      	b.n	80022a2 <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	4b9b      	ldr	r3, [pc, #620]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	f002 020c 	and.w	r2, r2, #12
 800218a:	2a04      	cmp	r2, #4
 800218c:	d007      	beq.n	800219e <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002190:	f002 020c 	and.w	r2, r2, #12
 8002194:	2a08      	cmp	r2, #8
 8002196:	d10a      	bne.n	80021ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0259      	lsls	r1, r3, #9
 800219c:	d507      	bpl.n	80021ae <HAL_RCC_OscConfig+0x46>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219e:	4b94      	ldr	r3, [pc, #592]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	039a      	lsls	r2, r3, #14
 80021a4:	d5e9      	bpl.n	800217a <HAL_RCC_OscConfig+0x12>
 80021a6:	6863      	ldr	r3, [r4, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e6      	bne.n	800217a <HAL_RCC_OscConfig+0x12>
 80021ac:	e172      	b.n	8002494 <HAL_RCC_OscConfig+0x32c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ae:	6863      	ldr	r3, [r4, #4]
 80021b0:	4d8f      	ldr	r5, [pc, #572]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 80021b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b6:	d006      	beq.n	80021c6 <HAL_RCC_OscConfig+0x5e>
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x68>
 80021be:	682b      	ldr	r3, [r5, #0]
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	682b      	ldr	r3, [r5, #0]
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	602b      	str	r3, [r5, #0]
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x7a>
 80021d0:	682a      	ldr	r2, [r5, #0]
 80021d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021d6:	602a      	str	r2, [r5, #0]
 80021d8:	682a      	ldr	r2, [r5, #0]
 80021da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021de:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e0:	b16b      	cbz	r3, 80021fe <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f000 fba3 	bl	800292c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4d82      	ldr	r5, [pc, #520]	; (80023f0 <HAL_RCC_OscConfig+0x288>)

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	682b      	ldr	r3, [r5, #0]
 80021ec:	039b      	lsls	r3, r3, #14
 80021ee:	d4c4      	bmi.n	800217a <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f0:	f000 fb9c 	bl	800292c <HAL_GetTick>
 80021f4:	1b80      	subs	r0, r0, r6
 80021f6:	2864      	cmp	r0, #100	; 0x64
 80021f8:	d9f7      	bls.n	80021ea <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 80021fa:	2003      	movs	r0, #3
 80021fc:	e14b      	b.n	8002496 <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f000 fb95 	bl	800292c <HAL_GetTick>
 8002202:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	039f      	lsls	r7, r3, #14
 8002208:	d5b7      	bpl.n	800217a <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800220a:	f000 fb8f 	bl	800292c <HAL_GetTick>
 800220e:	1b80      	subs	r0, r0, r6
 8002210:	2864      	cmp	r0, #100	; 0x64
 8002212:	d9f7      	bls.n	8002204 <HAL_RCC_OscConfig+0x9c>
 8002214:	e7f1      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002216:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	f012 0f0c 	tst.w	r2, #12
 800221e:	d007      	beq.n	8002230 <HAL_RCC_OscConfig+0xc8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002220:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002222:	f002 020c 	and.w	r2, r2, #12
 8002226:	2a08      	cmp	r2, #8
 8002228:	d112      	bne.n	8002250 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	025e      	lsls	r6, r3, #9
 800222e:	d40f      	bmi.n	8002250 <HAL_RCC_OscConfig+0xe8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002230:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	0795      	lsls	r5, r2, #30
 8002236:	d503      	bpl.n	8002240 <HAL_RCC_OscConfig+0xd8>
 8002238:	68e2      	ldr	r2, [r4, #12]
 800223a:	2a01      	cmp	r2, #1
 800223c:	f040 812a 	bne.w	8002494 <HAL_RCC_OscConfig+0x32c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	6921      	ldr	r1, [r4, #16]
 8002244:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002248:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800224c:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e028      	b.n	80022a2 <HAL_RCC_OscConfig+0x13a>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002250:	68e2      	ldr	r2, [r4, #12]
 8002252:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCC_OscConfig+0x28c>)
 8002254:	b1ba      	cbz	r2, 8002286 <HAL_RCC_OscConfig+0x11e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f000 fb67 	bl	800292c <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	4d64      	ldr	r5, [pc, #400]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	682b      	ldr	r3, [r5, #0]
 8002264:	4a62      	ldr	r2, [pc, #392]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 8002266:	0798      	lsls	r0, r3, #30
 8002268:	d405      	bmi.n	8002276 <HAL_RCC_OscConfig+0x10e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226a:	f000 fb5f 	bl	800292c <HAL_GetTick>
 800226e:	1b80      	subs	r0, r0, r6
 8002270:	2802      	cmp	r0, #2
 8002272:	d9f6      	bls.n	8002262 <HAL_RCC_OscConfig+0xfa>
 8002274:	e7c1      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	6813      	ldr	r3, [r2, #0]
 8002278:	6921      	ldr	r1, [r4, #16]
 800227a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800227e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e00d      	b.n	80022a2 <HAL_RCC_OscConfig+0x13a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f000 fb50 	bl	800292c <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228c:	4d58      	ldr	r5, [pc, #352]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002290:	682b      	ldr	r3, [r5, #0]
 8002292:	0799      	lsls	r1, r3, #30
 8002294:	d505      	bpl.n	80022a2 <HAL_RCC_OscConfig+0x13a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002296:	f000 fb49 	bl	800292c <HAL_GetTick>
 800229a:	1b80      	subs	r0, r0, r6
 800229c:	2802      	cmp	r0, #2
 800229e:	d9f7      	bls.n	8002290 <HAL_RCC_OscConfig+0x128>
 80022a0:	e7ab      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	071a      	lsls	r2, r3, #28
 80022a6:	d403      	bmi.n	80022b0 <HAL_RCC_OscConfig+0x148>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	075b      	lsls	r3, r3, #29
 80022ac:	d420      	bmi.n	80022f0 <HAL_RCC_OscConfig+0x188>
 80022ae:	e082      	b.n	80023b6 <HAL_RCC_OscConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022b0:	6962      	ldr	r2, [r4, #20]
 80022b2:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <HAL_RCC_OscConfig+0x290>)
 80022b4:	b172      	cbz	r2, 80022d4 <HAL_RCC_OscConfig+0x16c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f000 fb37 	bl	800292c <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4d4c      	ldr	r5, [pc, #304]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022c4:	079f      	lsls	r7, r3, #30
 80022c6:	d4ef      	bmi.n	80022a8 <HAL_RCC_OscConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c8:	f000 fb30 	bl	800292c <HAL_GetTick>
 80022cc:	1b80      	subs	r0, r0, r6
 80022ce:	2802      	cmp	r0, #2
 80022d0:	d9f7      	bls.n	80022c2 <HAL_RCC_OscConfig+0x15a>
 80022d2:	e792      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d6:	f000 fb29 	bl	800292c <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022da:	4d45      	ldr	r5, [pc, #276]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022e0:	0798      	lsls	r0, r3, #30
 80022e2:	d5e1      	bpl.n	80022a8 <HAL_RCC_OscConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e4:	f000 fb22 	bl	800292c <HAL_GetTick>
 80022e8:	1b80      	subs	r0, r0, r6
 80022ea:	2802      	cmp	r0, #2
 80022ec:	d9f7      	bls.n	80022de <HAL_RCC_OscConfig+0x176>
 80022ee:	e784      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f0:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 80022f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80022f8:	d10b      	bne.n	8002312 <HAL_RCC_OscConfig+0x1aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	9201      	str	r2, [sp, #4]
 80022fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800230e:	2601      	movs	r6, #1
 8002310:	e000      	b.n	8002314 <HAL_RCC_OscConfig+0x1ac>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4d39      	ldr	r5, [pc, #228]	; (80023fc <HAL_RCC_OscConfig+0x294>)
 8002316:	682b      	ldr	r3, [r5, #0]
 8002318:	05d9      	lsls	r1, r3, #23
 800231a:	d504      	bpl.n	8002326 <HAL_RCC_OscConfig+0x1be>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231c:	68a3      	ldr	r3, [r4, #8]
 800231e:	4d34      	ldr	r5, [pc, #208]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 8002320:	2b01      	cmp	r3, #1
 8002322:	d110      	bne.n	8002346 <HAL_RCC_OscConfig+0x1de>
 8002324:	e015      	b.n	8002352 <HAL_RCC_OscConfig+0x1ea>
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	682b      	ldr	r3, [r5, #0]
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	602b      	str	r3, [r5, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f000 fafd 	bl	800292c <HAL_GetTick>
 8002332:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	05da      	lsls	r2, r3, #23
 8002338:	d4f0      	bmi.n	800231c <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f000 faf7 	bl	800292c <HAL_GetTick>
 800233e:	1bc0      	subs	r0, r0, r7
 8002340:	2802      	cmp	r0, #2
 8002342:	d9f7      	bls.n	8002334 <HAL_RCC_OscConfig+0x1cc>
 8002344:	e759      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002346:	2b05      	cmp	r3, #5
 8002348:	d108      	bne.n	800235c <HAL_RCC_OscConfig+0x1f4>
 800234a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	672b      	str	r3, [r5, #112]	; 0x70
 8002352:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	672b      	str	r3, [r5, #112]	; 0x70
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x206>
 800235c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	672a      	str	r2, [r5, #112]	; 0x70
 8002364:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002366:	f022 0204 	bic.w	r2, r2, #4
 800236a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236c:	b173      	cbz	r3, 800238c <HAL_RCC_OscConfig+0x224>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236e:	f000 fadd 	bl	800292c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002372:	4d1f      	ldr	r5, [pc, #124]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f241 3888 	movw	r8, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800237c:	079b      	lsls	r3, r3, #30
 800237e:	d40d      	bmi.n	800239c <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f000 fad4 	bl	800292c <HAL_GetTick>
 8002384:	1bc0      	subs	r0, r0, r7
 8002386:	4540      	cmp	r0, r8
 8002388:	d9f7      	bls.n	800237a <HAL_RCC_OscConfig+0x212>
 800238a:	e736      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238c:	f000 face 	bl	800292c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002396:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002398:	0798      	lsls	r0, r3, #30
 800239a:	d406      	bmi.n	80023aa <HAL_RCC_OscConfig+0x242>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239c:	b15e      	cbz	r6, 80023b6 <HAL_RCC_OscConfig+0x24e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 80023a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a6:	6413      	str	r3, [r2, #64]	; 0x40
 80023a8:	e005      	b.n	80023b6 <HAL_RCC_OscConfig+0x24e>
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f000 fabf 	bl	800292c <HAL_GetTick>
 80023ae:	1bc0      	subs	r0, r0, r7
 80023b0:	4540      	cmp	r0, r8
 80023b2:	d9f0      	bls.n	8002396 <HAL_RCC_OscConfig+0x22e>
 80023b4:	e721      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b6:	69a0      	ldr	r0, [r4, #24]
 80023b8:	b908      	cbnz	r0, 80023be <HAL_RCC_OscConfig+0x256>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80023ba:	2000      	movs	r0, #0
 80023bc:	e06b      	b.n	8002496 <HAL_RCC_OscConfig+0x32e>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023be:	4d0c      	ldr	r5, [pc, #48]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 80023c0:	68ab      	ldr	r3, [r5, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d045      	beq.n	8002456 <HAL_RCC_OscConfig+0x2ee>
 80023ca:	4e0d      	ldr	r6, [pc, #52]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023cc:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ce:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	d134      	bne.n	800243e <HAL_RCC_OscConfig+0x2d6>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f000 faaa 	bl	800292c <HAL_GetTick>
 80023d8:	4680      	mov	r8, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	682b      	ldr	r3, [r5, #0]
 80023dc:	4f04      	ldr	r7, [pc, #16]	; (80023f0 <HAL_RCC_OscConfig+0x288>)
 80023de:	0199      	lsls	r1, r3, #6
 80023e0:	d510      	bpl.n	8002404 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e2:	f000 faa3 	bl	800292c <HAL_GetTick>
 80023e6:	ebc8 0000 	rsb	r0, r8, r0
 80023ea:	2802      	cmp	r0, #2
 80023ec:	d9f5      	bls.n	80023da <HAL_RCC_OscConfig+0x272>
 80023ee:	e704      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
 80023f0:	40023800 	.word	0x40023800
 80023f4:	42470000 	.word	0x42470000
 80023f8:	42470e80 	.word	0x42470e80
 80023fc:	40007000 	.word	0x40007000
 8002400:	42470060 	.word	0x42470060
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002404:	69e2      	ldr	r2, [r4, #28]
 8002406:	6a23      	ldr	r3, [r4, #32]
 8002408:	4313      	orrs	r3, r2
 800240a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800240c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002410:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002412:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 8002416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002420:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002422:	2301      	movs	r3, #1
 8002424:	6033      	str	r3, [r6, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f000 fa81 	bl	800292c <HAL_GetTick>
 800242a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	019a      	lsls	r2, r3, #6
 8002430:	d4c3      	bmi.n	80023ba <HAL_RCC_OscConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f000 fa7b 	bl	800292c <HAL_GetTick>
 8002436:	1b00      	subs	r0, r0, r4
 8002438:	2802      	cmp	r0, #2
 800243a:	d9f7      	bls.n	800242c <HAL_RCC_OscConfig+0x2c4>
 800243c:	e6dd      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f000 fa75 	bl	800292c <HAL_GetTick>
 8002442:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002444:	682b      	ldr	r3, [r5, #0]
 8002446:	019b      	lsls	r3, r3, #6
 8002448:	d5b7      	bpl.n	80023ba <HAL_RCC_OscConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244a:	f000 fa6f 	bl	800292c <HAL_GetTick>
 800244e:	1b00      	subs	r0, r0, r4
 8002450:	2802      	cmp	r0, #2
 8002452:	d9f7      	bls.n	8002444 <HAL_RCC_OscConfig+0x2dc>
 8002454:	e6d1      	b.n	80021fa <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002456:	2801      	cmp	r0, #1
 8002458:	d01d      	beq.n	8002496 <HAL_RCC_OscConfig+0x32e>
        return HAL_ERROR;
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800245a:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245c:	69e3      	ldr	r3, [r4, #28]
 800245e:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8002462:	429a      	cmp	r2, r3
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x32c>
 8002466:	6a22      	ldr	r2, [r4, #32]
 8002468:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_RCC_OscConfig+0x32c>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002474:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002476:	4003      	ands	r3, r0
 8002478:	4293      	cmp	r3, r2
 800247a:	d10b      	bne.n	8002494 <HAL_RCC_OscConfig+0x32c>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800247c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800247e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
 8002482:	4293      	cmp	r3, r2
 8002484:	d106      	bne.n	8002494 <HAL_RCC_OscConfig+0x32c>
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 8002486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002488:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800248c:	1ac0      	subs	r0, r0, r3
 800248e:	bf18      	it	ne
 8002490:	2001      	movne	r0, #1
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x32e>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002494:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002496:	b002      	add	sp, #8
 8002498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800249c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800249c:	4913      	ldr	r1, [pc, #76]	; (80024ec <HAL_RCC_GetSysClockFreq+0x50>)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249e:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a0:	688b      	ldr	r3, [r1, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d01c      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x48>
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ae:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b2:	6849      	ldr	r1, [r1, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b8:	bf14      	ite	ne
 80024ba:	480d      	ldrne	r0, [pc, #52]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024bc:	480d      	ldreq	r0, [pc, #52]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x58>)
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024be:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80024c2:	bf18      	it	ne
 80024c4:	2300      	movne	r3, #0
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ca:	fba1 0100 	umull	r0, r1, r1, r0
 80024ce:	f7fd fee7 	bl	80002a0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_GetSysClockFreq+0x50>)
 80024d4:	685b      	ldr	r3, [r3, #4]

      sysclockfreq = pllvco/pllp;
 80024d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024da:	3301      	adds	r3, #1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fbb0 f0f3 	udiv	r0, r0, r3
 80024e2:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x54>)
 80024e6:	bd08      	pop	{r3, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x58>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024ea:	bd08      	pop	{r3, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	007a1200 	.word	0x007a1200
 80024f4:	00f42400 	.word	0x00f42400

080024f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024fc:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fe:	4604      	mov	r4, r0
 8002500:	b910      	cbnz	r0, 8002508 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8002502:	2001      	movs	r0, #1
 8002504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCC_ClockConfig+0x120>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	f002 020f 	and.w	r2, r2, #15
 8002510:	428a      	cmp	r2, r1
 8002512:	d317      	bcc.n	8002544 <HAL_RCC_ClockConfig+0x4c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	6822      	ldr	r2, [r4, #0]
 8002516:	0796      	lsls	r6, r2, #30
 8002518:	d51c      	bpl.n	8002554 <HAL_RCC_ClockConfig+0x5c>
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_RCC_ClockConfig+0x124>)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	f012 0f04 	tst.w	r2, #4
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002520:	bf1e      	ittt	ne
 8002522:	6899      	ldrne	r1, [r3, #8]
 8002524:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002528:	6099      	strne	r1, [r3, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	0710      	lsls	r0, r2, #28
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800252c:	bf42      	ittt	mi
 800252e:	6899      	ldrmi	r1, [r3, #8]
 8002530:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002534:	6099      	strmi	r1, [r3, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002536:	6899      	ldr	r1, [r3, #8]
 8002538:	f021 00f0 	bic.w	r0, r1, #240	; 0xf0
 800253c:	68a1      	ldr	r1, [r4, #8]
 800253e:	4301      	orrs	r1, r0
 8002540:	6099      	str	r1, [r3, #8]
 8002542:	e007      	b.n	8002554 <HAL_RCC_ClockConfig+0x5c>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4299      	cmp	r1, r3
 8002550:	d1d7      	bne.n	8002502 <HAL_RCC_ClockConfig+0xa>
 8002552:	e7df      	b.n	8002514 <HAL_RCC_ClockConfig+0x1c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002554:	07d1      	lsls	r1, r2, #31
 8002556:	d406      	bmi.n	8002566 <HAL_RCC_ClockConfig+0x6e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_ClockConfig+0x120>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f002 020f 	and.w	r2, r2, #15
 8002560:	4295      	cmp	r5, r2
 8002562:	d32c      	bcc.n	80025be <HAL_RCC_ClockConfig+0xc6>
 8002564:	e032      	b.n	80025cc <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	6863      	ldr	r3, [r4, #4]
 8002568:	4a2c      	ldr	r2, [pc, #176]	; (800261c <HAL_RCC_ClockConfig+0x124>)
 800256a:	2b01      	cmp	r3, #1
 800256c:	d103      	bne.n	8002576 <HAL_RCC_ClockConfig+0x7e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002574:	e008      	b.n	8002588 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	1e99      	subs	r1, r3, #2
 8002578:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257c:	d802      	bhi.n	8002584 <HAL_RCC_ClockConfig+0x8c>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002582:	e001      	b.n	8002588 <HAL_RCC_ClockConfig+0x90>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	f012 0f02 	tst.w	r2, #2
 8002588:	d0bb      	beq.n	8002502 <HAL_RCC_ClockConfig+0xa>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4e24      	ldr	r6, [pc, #144]	; (800261c <HAL_RCC_ClockConfig+0x124>)
 800258c:	68b2      	ldr	r2, [r6, #8]
 800258e:	f022 0203 	bic.w	r2, r2, #3
 8002592:	4313      	orrs	r3, r2
 8002594:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002596:	f000 f9c9 	bl	800292c <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259a:	f241 3888 	movw	r8, #5000	; 0x1388
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259e:	4607      	mov	r7, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a0:	68b3      	ldr	r3, [r6, #8]
 80025a2:	6862      	ldr	r2, [r4, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025ac:	d0d4      	beq.n	8002558 <HAL_RCC_ClockConfig+0x60>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ae:	f000 f9bd 	bl	800292c <HAL_GetTick>
 80025b2:	1bc0      	subs	r0, r0, r7
 80025b4:	4540      	cmp	r0, r8
 80025b6:	d9f3      	bls.n	80025a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_TIMEOUT;
 80025b8:	2003      	movs	r0, #3

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80025ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	b2ea      	uxtb	r2, r5
 80025c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	429d      	cmp	r5, r3
 80025ca:	d19a      	bne.n	8002502 <HAL_RCC_ClockConfig+0xa>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	6821      	ldr	r1, [r4, #0]
 80025ce:	074a      	lsls	r2, r1, #29
 80025d0:	d506      	bpl.n	80025e0 <HAL_RCC_ClockConfig+0xe8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d2:	4812      	ldr	r0, [pc, #72]	; (800261c <HAL_RCC_ClockConfig+0x124>)
 80025d4:	6883      	ldr	r3, [r0, #8]
 80025d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025da:	68e3      	ldr	r3, [r4, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	6083      	str	r3, [r0, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	070b      	lsls	r3, r1, #28
 80025e2:	d507      	bpl.n	80025f4 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <HAL_RCC_ClockConfig+0x124>)
 80025e6:	6921      	ldr	r1, [r4, #16]
 80025e8:	6893      	ldr	r3, [r2, #8]
 80025ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025f2:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025f4:	f7ff ff52 	bl	800249c <HAL_RCC_GetSysClockFreq>
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_RCC_ClockConfig+0x124>)
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x128>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	40d8      	lsrs	r0, r3
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <HAL_RCC_ClockConfig+0x12c>)
 8002608:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RCC_ClockConfig+0x130>)
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	f7fe fc05 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 8002612:	2000      	movs	r0, #0
 8002614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002618:	40023c00 	.word	0x40023c00
 800261c:	40023800 	.word	0x40023800
 8002620:	08006922 	.word	0x08006922
 8002624:	2000006c 	.word	0x2000006c
 8002628:	20000064 	.word	0x20000064

0800262c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800262c:	4b01      	ldr	r3, [pc, #4]	; (8002634 <HAL_RCC_GetHCLKFreq+0x8>)
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	2000006c 	.word	0x2000006c

08002638 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_RCC_GetPCLK1Freq+0x14>)
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x18>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	4a03      	ldr	r2, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002646:	6810      	ldr	r0, [r2, #0]
}
 8002648:	40d8      	lsrs	r0, r3
 800264a:	4770      	bx	lr
 800264c:	40023800 	.word	0x40023800
 8002650:	08006932 	.word	0x08006932
 8002654:	2000006c 	.word	0x2000006c

08002658 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002658:	230f      	movs	r3, #15
 800265a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_GetClockConfig+0x34>)
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	f002 0203 	and.w	r2, r2, #3
 8002664:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800266c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002674:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800267e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_GetClockConfig+0x38>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	600b      	str	r3, [r1, #0]
 800268a:	4770      	bx	lr
 800268c:	40023800 	.word	0x40023800
 8002690:	40023c00 	.word	0x40023c00

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8002828 <HAL_GPIO_Init+0x194>
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269c:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800282c <HAL_GPIO_Init+0x198>
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a2:	b085      	sub	sp, #20
 80026a4:	46f0      	mov	r8, lr
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a6:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a8:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026aa:	2201      	movs	r2, #1
 80026ac:	fa02 f403 	lsl.w	r4, r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80026b0:	9a01      	ldr	r2, [sp, #4]
 80026b2:	ea34 0202 	bics.w	r2, r4, r2
 80026b6:	f040 80ad 	bne.w	8002814 <HAL_GPIO_Init+0x180>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ba:	684a      	ldr	r2, [r1, #4]
 80026bc:	f022 0710 	bic.w	r7, r2, #16
 80026c0:	1e7d      	subs	r5, r7, #1
 80026c2:	2d01      	cmp	r5, #1
 80026c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80026c8:	d812      	bhi.n	80026f0 <HAL_GPIO_Init+0x5c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ca:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026cc:	2503      	movs	r5, #3
 80026ce:	fa05 f50c 	lsl.w	r5, r5, ip
 80026d2:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d6:	68cd      	ldr	r5, [r1, #12]
 80026d8:	fa05 f50c 	lsl.w	r5, r5, ip
 80026dc:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80026de:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026e2:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026ea:	409e      	lsls	r6, r3
 80026ec:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80026ee:	6045      	str	r5, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f0:	2603      	movs	r6, #3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
        GPIOx->OTYPER = temp;
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026f2:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f4:	fa06 f60c 	lsl.w	r6, r6, ip
 80026f8:	43f6      	mvns	r6, r6
 80026fa:	ea05 0a06 	and.w	sl, r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026fe:	688d      	ldr	r5, [r1, #8]
 8002700:	fa05 f50c 	lsl.w	r5, r5, ip
 8002704:	ea45 050a 	orr.w	r5, r5, sl
      GPIOx->PUPDR = temp;

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002708:	2f02      	cmp	r7, #2

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
      temp |= ((GPIO_Init->Pull) << (position * 2U));
      GPIOx->PUPDR = temp;
 800270a:	60c5      	str	r5, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800270c:	d114      	bne.n	8002738 <HAL_GPIO_Init+0xa4>
 800270e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002712:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002716:	f003 0b07 	and.w	fp, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800271a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002722:	250f      	movs	r5, #15
 8002724:	fa05 f50b 	lsl.w	r5, r5, fp
 8002728:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800272c:	690f      	ldr	r7, [r1, #16]
 800272e:	fa07 f70b 	lsl.w	r7, r7, fp
 8002732:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8002734:	f8ca 7020 	str.w	r7, [sl, #32]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002738:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800273a:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	f002 0503 	and.w	r5, r2, #3
 8002740:	fa05 fc0c 	lsl.w	ip, r5, ip
 8002744:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002748:	00d5      	lsls	r5, r2, #3

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 800274a:	6006      	str	r6, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800274c:	d562      	bpl.n	8002814 <HAL_GPIO_Init+0x180>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	f04f 0b00 	mov.w	fp, #0
 8002752:	f8cd b00c 	str.w	fp, [sp, #12]
 8002756:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800275a:	4d32      	ldr	r5, [pc, #200]	; (8002824 <HAL_GPIO_Init+0x190>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002760:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002764:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002768:	f023 0703 	bic.w	r7, r3, #3
 800276c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002770:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002774:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002778:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800277a:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002780:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002784:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002788:	260f      	movs	r6, #15
 800278a:	fa06 f60c 	lsl.w	r6, r6, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278e:	42a8      	cmp	r0, r5
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	ea2a 0606 	bic.w	r6, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002794:	d012      	beq.n	80027bc <HAL_GPIO_Init+0x128>
 8002796:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800279a:	42a8      	cmp	r0, r5
 800279c:	d010      	beq.n	80027c0 <HAL_GPIO_Init+0x12c>
 800279e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027a2:	42a8      	cmp	r0, r5
 80027a4:	d00e      	beq.n	80027c4 <HAL_GPIO_Init+0x130>
 80027a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027aa:	42a8      	cmp	r0, r5
 80027ac:	d00c      	beq.n	80027c8 <HAL_GPIO_Init+0x134>
 80027ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027b2:	42a8      	cmp	r0, r5
 80027b4:	bf14      	ite	ne
 80027b6:	2507      	movne	r5, #7
 80027b8:	2504      	moveq	r5, #4
 80027ba:	e006      	b.n	80027ca <HAL_GPIO_Init+0x136>
 80027bc:	465d      	mov	r5, fp
 80027be:	e004      	b.n	80027ca <HAL_GPIO_Init+0x136>
 80027c0:	2501      	movs	r5, #1
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x136>
 80027c4:	2502      	movs	r5, #2
 80027c6:	e000      	b.n	80027ca <HAL_GPIO_Init+0x136>
 80027c8:	2503      	movs	r5, #3
 80027ca:	fa05 f50c 	lsl.w	r5, r5, ip
 80027ce:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d0:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d2:	f8de 5000 	ldr.w	r5, [lr]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d8:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80027da:	bf54      	ite	pl
 80027dc:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80027de:	4325      	orrmi	r5, r4
        }
        EXTI->IMR = temp;
 80027e0:	f8c8 5000 	str.w	r5, [r8]

        temp = EXTI->EMR;
 80027e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e8:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80027ea:	bf54      	ite	pl
 80027ec:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80027ee:	4325      	orrmi	r5, r4
        }
        EXTI->EMR = temp;
 80027f0:	f8ce 5004 	str.w	r5, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027f4:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f8:	02d7      	lsls	r7, r2, #11
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80027fa:	bf54      	ite	pl
 80027fc:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80027fe:	4325      	orrmi	r5, r4
        }
        EXTI->RTSR = temp;
 8002800:	f8c8 5008 	str.w	r5, [r8, #8]

        temp = EXTI->FTSR;
 8002804:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002808:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800280a:	bf54      	ite	pl
 800280c:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800280e:	4325      	orrmi	r5, r4
        }
        EXTI->FTSR = temp;
 8002810:	f8ce 500c 	str.w	r5, [lr, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002814:	3301      	adds	r3, #1
 8002816:	2b10      	cmp	r3, #16
 8002818:	f47f af47 	bne.w	80026aa <HAL_GPIO_Init+0x16>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800281c:	b005      	add	sp, #20
 800281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	40020000 	.word	0x40020000
 8002828:	40013c00 	.word	0x40013c00
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	b902      	cbnz	r2, 8002834 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002832:	0409      	lsls	r1, r1, #16
 8002834:	6181      	str	r1, [r0, #24]
 8002836:	4770      	bx	lr

08002838 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800283a:	68d3      	ldr	r3, [r2, #12]
 800283c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002848:	0200      	lsls	r0, r0, #8
 800284a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002852:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002854:	60d3      	str	r3, [r2, #12]
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_NVIC_SetPriority+0x60>)
 800285e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002864:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002866:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	2c04      	cmp	r4, #4
 800286e:	bf28      	it	cs
 8002870:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	2d06      	cmp	r5, #6

  return (
 8002874:	f04f 0501 	mov.w	r5, #1
 8002878:	fa05 f404 	lsl.w	r4, r5, r4
 800287c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002880:	bf8c      	ite	hi
 8002882:	3b03      	subhi	r3, #3
 8002884:	2300      	movls	r3, #0

  return (
 8002886:	400c      	ands	r4, r1
 8002888:	409c      	lsls	r4, r3
 800288a:	fa05 f303 	lsl.w	r3, r5, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	401a      	ands	r2, r3
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002892:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002894:	ea42 0204 	orr.w	r2, r2, r4
 8002898:	ea4f 1202 	mov.w	r2, r2, lsl #4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	bfad      	iteet	ge
 800289e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	f000 000f 	andlt.w	r0, r0, #15
 80028a6:	4b06      	ldrlt	r3, [pc, #24]	; (80028c0 <HAL_NVIC_SetPriority+0x64>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	bfb5      	itete	lt
 80028ae:	b2d2      	uxtblt	r2, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	b2d2      	uxtbge	r2, r2
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	541a      	strblt	r2, [r3, r0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80028b8:	bd30      	pop	{r4, r5, pc}
 80028ba:	bf00      	nop
 80028bc:	e000ed00 	.word	0xe000ed00
 80028c0:	e000ed14 	.word	0xe000ed14

080028c4 <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80028c4:	2800      	cmp	r0, #0
 80028c6:	db08      	blt.n	80028da <HAL_NVIC_EnableIRQ+0x16>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c8:	0942      	lsrs	r2, r0, #5
 80028ca:	2301      	movs	r3, #1
 80028cc:	f000 001f 	and.w	r0, r0, #31
 80028d0:	fa03 f000 	lsl.w	r0, r3, r0
 80028d4:	4b01      	ldr	r3, [pc, #4]	; (80028dc <HAL_NVIC_EnableIRQ+0x18>)
 80028d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_Init+0x30>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fc:	2003      	movs	r0, #3
 80028fe:	f7ff ff9b 	bl	8002838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe fa8a 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002908:	f7fe f9ee 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800290c:	2000      	movs	r0, #0
 800290e:	bd08      	pop	{r3, pc}
 8002910:	40023c00 	.word	0x40023c00

08002914 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002914:	4a03      	ldr	r2, [pc, #12]	; (8002924 <HAL_IncTick+0x10>)
 8002916:	4904      	ldr	r1, [pc, #16]	; (8002928 <HAL_IncTick+0x14>)
 8002918:	6813      	ldr	r3, [r2, #0]
 800291a:	7809      	ldrb	r1, [r1, #0]
 800291c:	440b      	add	r3, r1
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	2000670c 	.word	0x2000670c
 8002928:	20000068 	.word	0x20000068

0800292c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800292c:	4b01      	ldr	r3, [pc, #4]	; (8002934 <HAL_GetTick+0x8>)
 800292e:	6818      	ldr	r0, [r3, #0]
}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	2000670c 	.word	0x2000670c

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b538      	push	{r3, r4, r5, lr}
 800293a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7ff fff6 	bl	800292c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002940:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002942:	bf1c      	itt	ne
 8002944:	4b05      	ldrne	r3, [pc, #20]	; (800295c <HAL_Delay+0x24>)
 8002946:	781b      	ldrbne	r3, [r3, #0]
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 8002948:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 800294a:	bf18      	it	ne
 800294c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800294e:	f7ff ffed 	bl	800292c <HAL_GetTick>
 8002952:	1b40      	subs	r0, r0, r5
 8002954:	4284      	cmp	r4, r0
 8002956:	d8fa      	bhi.n	800294e <HAL_Delay+0x16>
  {
  }
}
 8002958:	bd38      	pop	{r3, r4, r5, pc}
 800295a:	bf00      	nop
 800295c:	20000068 	.word	0x20000068

08002960 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002960:	6a03      	ldr	r3, [r0, #32]
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002968:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800296a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800296c:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800296e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002970:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002972:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002976:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002978:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800297c:	688b      	ldr	r3, [r1, #8]
 800297e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002980:	4c0a      	ldr	r4, [pc, #40]	; (80029ac <TIM_OC1_SetConfig+0x4c>)
 8002982:	42a0      	cmp	r0, r4
 8002984:	d10b      	bne.n	800299e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002986:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002988:	694e      	ldr	r6, [r1, #20]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800298a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800298e:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002990:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002992:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002996:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002998:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800299c:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800299e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029a0:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029a2:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029a4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a6:	6203      	str	r3, [r0, #32]
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	bf00      	nop
 80029ac:	40010000 	.word	0x40010000

080029b0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029b0:	6a03      	ldr	r3, [r0, #32]
 80029b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ba:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029bc:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029be:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029c2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029c8:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029d2:	4d0c      	ldr	r5, [pc, #48]	; (8002a04 <TIM_OC3_SetConfig+0x54>)
 80029d4:	42a8      	cmp	r0, r5
 80029d6:	d10e      	bne.n	80029f6 <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029d8:	68cd      	ldr	r5, [r1, #12]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029e2:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029e4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029e8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029ec:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029f2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029f8:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029fa:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029fc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029fe:	6203      	str	r3, [r0, #32]
 8002a00:	bd30      	pop	{r4, r5, pc}
 8002a02:	bf00      	nop
 8002a04:	40010000 	.word	0x40010000

08002a08 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a08:	6a03      	ldr	r3, [r0, #32]
 8002a0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a0e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a10:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a12:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a16:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a18:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a1a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a22:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a28:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a2c:	4d06      	ldr	r5, [pc, #24]	; (8002a48 <TIM_OC4_SetConfig+0x40>)
 8002a2e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a30:	bf02      	ittt	eq
 8002a32:	694d      	ldreq	r5, [r1, #20]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a34:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a38:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a3e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a40:	684a      	ldr	r2, [r1, #4]
 8002a42:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a44:	6203      	str	r3, [r0, #32]
 8002a46:	bd30      	pop	{r4, r5, pc}
 8002a48:	40010000 	.word	0x40010000

08002a4c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a4c:	6803      	ldr	r3, [r0, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a56:	689a      	ldr	r2, [r3, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	f002 0207 	and.w	r2, r2, #7
 8002a5c:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8002a5e:	bf1e      	ittt	ne
 8002a60:	681a      	ldrne	r2, [r3, #0]
 8002a62:	f042 0201 	orrne.w	r2, r2, #1
 8002a66:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002a68:	2000      	movs	r0, #0
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIM_PWM_MspInit>:
 8002a6c:	4770      	bx	lr

08002a6e <HAL_TIM_OC_DelayElapsedCallback>:
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_IC_CaptureCallback>:
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_TriggerCallback>:
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a76:	6803      	ldr	r3, [r0, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a80:	d514      	bpl.n	8002aac <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	0792      	lsls	r2, r2, #30
 8002a86:	d511      	bpl.n	8002aac <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a88:	f06f 0202 	mvn.w	r2, #2
 8002a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a8e:	699b      	ldr	r3, [r3, #24]
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a90:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a92:	079b      	lsls	r3, r3, #30
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a94:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a96:	d002      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x28>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a98:	f7ff ffea 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e004      	b.n	8002aa8 <HAL_TIM_IRQHandler+0x32>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	f7ff ffe6 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff ffe5 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	0750      	lsls	r0, r2, #29
 8002ab2:	d516      	bpl.n	8002ae2 <HAL_TIM_IRQHandler+0x6c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	0751      	lsls	r1, r2, #29
 8002ab8:	d513      	bpl.n	8002ae2 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aba:	f06f 0204 	mvn.w	r2, #4
 8002abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac0:	699b      	ldr	r3, [r3, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac2:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac4:	f413 7f40 	tst.w	r3, #768	; 0x300
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	4620      	mov	r0, r4
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002acc:	d002      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0x5e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	f7ff ffcf 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 8002ad2:	e004      	b.n	8002ade <HAL_TIM_IRQHandler+0x68>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad4:	f7ff ffcb 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff ffca 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	0712      	lsls	r2, r2, #28
 8002ae8:	d515      	bpl.n	8002b16 <HAL_TIM_IRQHandler+0xa0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	0710      	lsls	r0, r2, #28
 8002aee:	d512      	bpl.n	8002b16 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af0:	f06f 0208 	mvn.w	r2, #8
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af6:	69db      	ldr	r3, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af8:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afa:	0799      	lsls	r1, r3, #30
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	4620      	mov	r0, r4
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b00:	d002      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x92>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	f7ff ffb5 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 8002b06:	e004      	b.n	8002b12 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b08:	f7ff ffb1 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff ffb0 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	2300      	movs	r3, #0
 8002b14:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	06d2      	lsls	r2, r2, #27
 8002b1c:	d516      	bpl.n	8002b4c <HAL_TIM_IRQHandler+0xd6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	06d0      	lsls	r0, r2, #27
 8002b22:	d513      	bpl.n	8002b4c <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b24:	f06f 0210 	mvn.w	r2, #16
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b2a:	69db      	ldr	r3, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b2c:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b2e:	f413 7f40 	tst.w	r3, #768	; 0x300
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b32:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b34:	4620      	mov	r0, r4
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b36:	d002      	beq.n	8002b3e <HAL_TIM_IRQHandler+0xc8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b38:	f7ff ff9a 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e004      	b.n	8002b48 <HAL_TIM_IRQHandler+0xd2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	f7ff ff96 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b42:	4620      	mov	r0, r4
 8002b44:	f7ff ff95 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	07d1      	lsls	r1, r2, #31
 8002b52:	d508      	bpl.n	8002b66 <HAL_TIM_IRQHandler+0xf0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	07d2      	lsls	r2, r2, #31
 8002b58:	d505      	bpl.n	8002b66 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5a:	f06f 0201 	mvn.w	r2, #1
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7fd fe7b 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	0610      	lsls	r0, r2, #24
 8002b6c:	d508      	bpl.n	8002b80 <HAL_TIM_IRQHandler+0x10a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	0611      	lsls	r1, r2, #24
 8002b72:	d505      	bpl.n	8002b80 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f000 fa31 	bl	8002fe2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	0652      	lsls	r2, r2, #25
 8002b86:	d508      	bpl.n	8002b9a <HAL_TIM_IRQHandler+0x124>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	0650      	lsls	r0, r2, #25
 8002b8c:	d505      	bpl.n	8002b9a <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7ff ff6d 	bl	8002a74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	0691      	lsls	r1, r2, #26
 8002ba0:	d50a      	bpl.n	8002bb8 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	0692      	lsls	r2, r2, #26
 8002ba6:	d507      	bpl.n	8002bb8 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ba8:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bac:	4620      	mov	r0, r4
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bae:	611a      	str	r2, [r3, #16]
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb4:	f000 ba14 	b.w	8002fe0 <HAL_TIMEx_CommutCallback>
 8002bb8:	bd10      	pop	{r4, pc}
	...

08002bbc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bbc:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <TIM_Base_SetConfig+0x94>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bbe:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc0:	4290      	cmp	r0, r2
 8002bc2:	d00e      	beq.n	8002be2 <TIM_Base_SetConfig+0x26>
 8002bc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002bc8:	d00b      	beq.n	8002be2 <TIM_Base_SetConfig+0x26>
 8002bca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002bce:	4290      	cmp	r0, r2
 8002bd0:	d007      	beq.n	8002be2 <TIM_Base_SetConfig+0x26>
 8002bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bd6:	4290      	cmp	r0, r2
 8002bd8:	d003      	beq.n	8002be2 <TIM_Base_SetConfig+0x26>
 8002bda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bde:	4290      	cmp	r0, r2
 8002be0:	d115      	bne.n	8002c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002be2:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002be8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <TIM_Base_SetConfig+0x94>)
 8002bec:	4290      	cmp	r0, r2
 8002bee:	d019      	beq.n	8002c24 <TIM_Base_SetConfig+0x68>
 8002bf0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002bf4:	d016      	beq.n	8002c24 <TIM_Base_SetConfig+0x68>
 8002bf6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002bfa:	4290      	cmp	r0, r2
 8002bfc:	d012      	beq.n	8002c24 <TIM_Base_SetConfig+0x68>
 8002bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c02:	4290      	cmp	r0, r2
 8002c04:	d00e      	beq.n	8002c24 <TIM_Base_SetConfig+0x68>
 8002c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c0a:	4290      	cmp	r0, r2
 8002c0c:	d00a      	beq.n	8002c24 <TIM_Base_SetConfig+0x68>
 8002c0e:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <TIM_Base_SetConfig+0x98>)
 8002c10:	4290      	cmp	r0, r2
 8002c12:	d007      	beq.n	8002c24 <TIM_Base_SetConfig+0x68>
 8002c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c18:	4290      	cmp	r0, r2
 8002c1a:	d003      	beq.n	8002c24 <TIM_Base_SetConfig+0x68>
 8002c1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c20:	4290      	cmp	r0, r2
 8002c22:	d103      	bne.n	8002c2c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c24:	68ca      	ldr	r2, [r1, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c2c:	694a      	ldr	r2, [r1, #20]
 8002c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c32:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002c34:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c36:	688b      	ldr	r3, [r1, #8]
 8002c38:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c3a:	680b      	ldr	r3, [r1, #0]
 8002c3c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <TIM_Base_SetConfig+0x94>)
 8002c40:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c42:	bf04      	itt	eq
 8002c44:	690b      	ldreq	r3, [r1, #16]
 8002c46:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	6143      	str	r3, [r0, #20]
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40014000 	.word	0x40014000

08002c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c58:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	b1a0      	cbz	r0, 8002c88 <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c66:	b91b      	cbnz	r3, 8002c70 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6c:	f7fe f85e 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	2302      	movs	r3, #2
 8002c72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c76:	6820      	ldr	r0, [r4, #0]
 8002c78:	1d21      	adds	r1, r4, #4
 8002c7a:	f7ff ff9f 	bl	8002bbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8002c84:	2000      	movs	r0, #0
 8002c86:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8002c88:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002c8a:	bd10      	pop	{r4, pc}

08002c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c8c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8e:	4604      	mov	r4, r0
 8002c90:	b1a0      	cbz	r0, 8002cbc <HAL_TIM_PWM_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c9a:	b91b      	cbnz	r3, 8002ca4 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ca0:	f7ff fee4 	bl	8002a6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002caa:	6820      	ldr	r0, [r4, #0]
 8002cac:	1d21      	adds	r1, r4, #4
 8002cae:	f7ff ff85 	bl	8002bbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8002cb8:	2000      	movs	r0, #0
 8002cba:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8002cbc:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002cbe:	bd10      	pop	{r4, pc}

08002cc0 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc0:	6a03      	ldr	r3, [r0, #32]
 8002cc2:	f023 0310 	bic.w	r3, r3, #16
 8002cc6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cca:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ccc:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cce:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cd2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cda:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cdc:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ce0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ce4:	4d0b      	ldr	r5, [pc, #44]	; (8002d14 <TIM_OC2_SetConfig+0x54>)
 8002ce6:	42a8      	cmp	r0, r5
 8002ce8:	d10e      	bne.n	8002d08 <TIM_OC2_SetConfig+0x48>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cea:	68cd      	ldr	r5, [r1, #12]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cf0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cf4:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cf6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cfa:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cfe:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d04:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d08:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d0a:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d0c:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d0e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d10:	6203      	str	r3, [r0, #32]
 8002d12:	bd30      	pop	{r4, r5, pc}
 8002d14:	40010000 	.word	0x40010000

08002d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d18:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d20:	4604      	mov	r4, r0
 8002d22:	460d      	mov	r5, r1
 8002d24:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d28:	d058      	beq.n	8002ddc <HAL_TIM_PWM_ConfigChannel+0xc4>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

  switch (Channel)
 8002d34:	2a0c      	cmp	r2, #12
 8002d36:	d84b      	bhi.n	8002dd0 <HAL_TIM_PWM_ConfigChannel+0xb8>
 8002d38:	e8df f002 	tbb	[pc, r2]
 8002d3c:	4a4a4a07 	.word	0x4a4a4a07
 8002d40:	4a4a4a17 	.word	0x4a4a4a17
 8002d44:	4a4a4a29 	.word	0x4a4a4a29
 8002d48:	39          	.byte	0x39
 8002d49:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d4a:	6820      	ldr	r0, [r4, #0]
 8002d4c:	f7ff fe08 	bl	8002960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	f042 0208 	orr.w	r2, r2, #8
 8002d58:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	f022 0204 	bic.w	r2, r2, #4
 8002d60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d62:	6999      	ldr	r1, [r3, #24]
 8002d64:	692a      	ldr	r2, [r5, #16]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	e00f      	b.n	8002d8a <HAL_TIM_PWM_ConfigChannel+0x72>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d6a:	6820      	ldr	r0, [r4, #0]
 8002d6c:	f7ff ffa8 	bl	8002cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d70:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d72:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d8a:	619a      	str	r2, [r3, #24]
      break;
 8002d8c:	e020      	b.n	8002dd0 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d8e:	6820      	ldr	r0, [r4, #0]
 8002d90:	f7ff fe0e 	bl	80029b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	f042 0208 	orr.w	r2, r2, #8
 8002d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	f022 0204 	bic.w	r2, r2, #4
 8002da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002da6:	69d9      	ldr	r1, [r3, #28]
 8002da8:	692a      	ldr	r2, [r5, #16]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	e00f      	b.n	8002dce <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dae:	6820      	ldr	r0, [r4, #0]
 8002db0:	f7ff fe2a 	bl	8002a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002db4:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db6:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dbe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dce:	61da      	str	r2, [r3, #28]

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002dd2:	2000      	movs	r0, #0

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8002ddc:	bd38      	pop	{r3, r4, r5, pc}

08002dde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dde:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002de0:	6884      	ldr	r4, [r0, #8]
 8002de2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8002de6:	4321      	orrs	r1, r4
 8002de8:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dea:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dee:	6083      	str	r3, [r0, #8]
 8002df0:	bd10      	pop	{r4, pc}

08002df2 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e00:	f000 808d 	beq.w	8002f1e <HAL_TIM_ConfigClockSource+0x12c>

  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e10:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002e1a:	6083      	str	r3, [r0, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e1c:	680b      	ldr	r3, [r1, #0]
 8002e1e:	2b40      	cmp	r3, #64	; 0x40
 8002e20:	d059      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0xe4>
 8002e22:	d80a      	bhi.n	8002e3a <HAL_TIM_ConfigClockSource+0x48>
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d06d      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0x112>
 8002e28:	d802      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x3e>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d06a      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0x112>
 8002e2e:	e070      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x120>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d067      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0x112>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d065      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0x112>
 8002e38:	e06b      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x120>
 8002e3a:	2b60      	cmp	r3, #96	; 0x60
 8002e3c:	d033      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0xb4>
 8002e3e:	d818      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x80>
 8002e40:	2b50      	cmp	r3, #80	; 0x50
 8002e42:	d166      	bne.n	8002f12 <HAL_TIM_ConfigClockSource+0x120>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e44:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	684d      	ldr	r5, [r1, #4]
 8002e48:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4a:	6a01      	ldr	r1, [r0, #32]
 8002e4c:	f021 0101 	bic.w	r1, r1, #1
 8002e50:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e52:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e54:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002e5c:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e5e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e62:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e64:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e66:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e6c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002e70:	e04e      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x11e>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002e72:	2b70      	cmp	r3, #112	; 0x70
 8002e74:	d00c      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x9e>
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7a:	d14a      	bne.n	8002f12 <HAL_TIM_ConfigClockSource+0x120>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e7c:	68cb      	ldr	r3, [r1, #12]
 8002e7e:	684a      	ldr	r2, [r1, #4]
 8002e80:	6889      	ldr	r1, [r1, #8]
 8002e82:	f7ff ffac 	bl	8002dde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e86:	6822      	ldr	r2, [r4, #0]
 8002e88:	6893      	ldr	r3, [r2, #8]
 8002e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8e:	e008      	b.n	8002ea2 <HAL_TIM_ConfigClockSource+0xb0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e90:	68cb      	ldr	r3, [r1, #12]
 8002e92:	684a      	ldr	r2, [r1, #4]
 8002e94:	6889      	ldr	r1, [r1, #8]
 8002e96:	f7ff ffa2 	bl	8002dde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e9a:	6822      	ldr	r2, [r4, #0]
 8002e9c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ea2:	6093      	str	r3, [r2, #8]
      break;
 8002ea4:	e035      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x120>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea6:	684d      	ldr	r5, [r1, #4]
 8002ea8:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eaa:	6a01      	ldr	r1, [r0, #32]
 8002eac:	f021 0110 	bic.w	r1, r1, #16
 8002eb0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002eb4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ebe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ec6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ec8:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eca:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002ed4:	e01c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x11e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ed6:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed8:	684d      	ldr	r5, [r1, #4]
 8002eda:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002edc:	6a01      	ldr	r1, [r0, #32]
 8002ede:	f021 0101 	bic.w	r1, r1, #1
 8002ee2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee4:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ee6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002eee:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ef4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ef6:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ef8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002efe:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002f02:	e005      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x11e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f04:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f06:	f043 0307 	orr.w	r3, r3, #7
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f0e:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f10:	6083      	str	r3, [r0, #8]
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f12:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002f14:	2000      	movs	r0, #0
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f1a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}

08002f20 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f24:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f26:	b530      	push	{r4, r5, lr}
 8002f28:	f04f 0302 	mov.w	r3, #2
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2c:	d02d      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f32:	6803      	ldr	r3, [r0, #0]
 8002f34:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f36:	f024 0570 	bic.w	r5, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f3a:	680c      	ldr	r4, [r1, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3c:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f3e:	432c      	orrs	r4, r5
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f44:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f46:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f48:	4c11      	ldr	r4, [pc, #68]	; (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8002f4a:	42a3      	cmp	r3, r4
 8002f4c:	d012      	beq.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f52:	d00f      	beq.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002f54:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	d00b      	beq.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002f5c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f60:	42a3      	cmp	r3, r4
 8002f62:	d007      	beq.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002f64:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f68:	42a3      	cmp	r3, r4
 8002f6a:	d003      	beq.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002f6c:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8002f70:	42a3      	cmp	r3, r4
 8002f72:	d104      	bne.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f74:	f022 0480 	bic.w	r4, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f78:	684a      	ldr	r2, [r1, #4]
 8002f7a:	4322      	orrs	r2, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f84:	2300      	movs	r3, #0
 8002f86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f8a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002f8c:	bd30      	pop	{r4, r5, pc}
 8002f8e:	bf00      	nop
 8002f90:	40010000 	.word	0x40010000

08002f94 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d01f      	beq.n	8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f9c:	68cb      	ldr	r3, [r1, #12]
 8002f9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa2:	688b      	ldr	r3, [r1, #8]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002faa:	684b      	ldr	r3, [r1, #4]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fb2:	680b      	ldr	r3, [r1, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fba:	690b      	ldr	r3, [r1, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fc2:	694b      	ldr	r3, [r1, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	69ca      	ldr	r2, [r1, #28]
 8002fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fcc:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fce:	6802      	ldr	r2, [r0, #0]
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002fd8:	4618      	mov	r0, r3
 8002fda:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fdc:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIMEx_CommutCallback>:
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe2:	4770      	bx	lr

08002fe4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <SystemInit+0x18>)
 8002fe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003000:	f100 0308 	add.w	r3, r0, #8
 8003004:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003006:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800300a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800300c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800300e:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003010:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003012:	6003      	str	r3, [r0, #0]
 8003014:	4770      	bx	lr

08003016 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	6103      	str	r3, [r0, #16]
 800301a:	4770      	bx	lr

0800301c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800301c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800301e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003028:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800302a:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800302c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800302e:	3301      	adds	r3, #1
 8003030:	6003      	str	r3, [r0, #0]
 8003032:	4770      	bx	lr

08003034 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003034:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003036:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003038:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800303a:	d101      	bne.n	8003040 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800303c:	6903      	ldr	r3, [r0, #16]
 800303e:	e007      	b.n	8003050 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003040:	f100 0308 	add.w	r3, r0, #8
 8003044:	685c      	ldr	r4, [r3, #4]
 8003046:	6825      	ldr	r5, [r4, #0]
 8003048:	42aa      	cmp	r2, r5
 800304a:	d301      	bcc.n	8003050 <vListInsert+0x1c>
 800304c:	4623      	mov	r3, r4
 800304e:	e7f9      	b.n	8003044 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003054:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003056:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003058:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800305a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800305c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800305e:	3301      	adds	r3, #1
 8003060:	6003      	str	r3, [r0, #0]
 8003062:	bd30      	pop	{r4, r5, pc}

08003064 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003064:	6841      	ldr	r1, [r0, #4]
 8003066:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003068:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800306a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800306c:	6882      	ldr	r2, [r0, #8]
 800306e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003074:	bf08      	it	eq
 8003076:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003078:	2200      	movs	r2, #0
 800307a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	3a01      	subs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003082:	6818      	ldr	r0, [r3, #0]
}
 8003084:	4770      	bx	lr

08003086 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003086:	b510      	push	{r4, lr}
 8003088:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800308a:	f001 fb83 	bl	8004794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800308e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003090:	f001 fba2 	bl	80047d8 <vPortExitCritical>

	return xReturn;
}
 8003094:	fab4 f084 	clz	r0, r4
 8003098:	0940      	lsrs	r0, r0, #5
 800309a:	bd10      	pop	{r4, pc}

0800309c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030a2:	6b86      	ldr	r6, [r0, #56]	; 0x38

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030a4:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030a6:	b932      	cbnz	r2, 80030b6 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030a8:	6805      	ldr	r5, [r0, #0]
 80030aa:	bb2d      	cbnz	r5, 80030f8 <prvCopyDataToQueue+0x5c>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80030ac:	6840      	ldr	r0, [r0, #4]
 80030ae:	f000 ff23 	bl	8003ef8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80030b2:	6065      	str	r5, [r4, #4]
 80030b4:	e027      	b.n	8003106 <prvCopyDataToQueue+0x6a>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030b6:	b965      	cbnz	r5, 80030d2 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80030b8:	6880      	ldr	r0, [r0, #8]
 80030ba:	f002 fbed 	bl	8005898 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80030be:	68a2      	ldr	r2, [r4, #8]
 80030c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030c2:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030c4:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80030c6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d317      	bcc.n	80030fc <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	60a3      	str	r3, [r4, #8]
 80030d0:	e014      	b.n	80030fc <prvCopyDataToQueue+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d2:	68c0      	ldr	r0, [r0, #12]
 80030d4:	f002 fbe0 	bl	8005898 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80030d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030da:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030dc:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80030de:	425b      	negs	r3, r3
 80030e0:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030e2:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80030e4:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80030e6:	bf3e      	ittt	cc
 80030e8:	6862      	ldrcc	r2, [r4, #4]
 80030ea:	189b      	addcc	r3, r3, r2
 80030ec:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030ee:	2d02      	cmp	r5, #2
 80030f0:	d106      	bne.n	8003100 <prvCopyDataToQueue+0x64>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030f2:	b13e      	cbz	r6, 8003104 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030f4:	3e01      	subs	r6, #1
 80030f6:	e003      	b.n	8003100 <prvCopyDataToQueue+0x64>
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80030f8:	4610      	mov	r0, r2
 80030fa:	e004      	b.n	8003106 <prvCopyDataToQueue+0x6a>
 80030fc:	4628      	mov	r0, r5
 80030fe:	e002      	b.n	8003106 <prvCopyDataToQueue+0x6a>
 8003100:	2000      	movs	r0, #0
 8003102:	e000      	b.n	8003106 <prvCopyDataToQueue+0x6a>
 8003104:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003106:	3601      	adds	r6, #1
 8003108:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800310a:	bd70      	pop	{r4, r5, r6, pc}

0800310c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800310c:	4603      	mov	r3, r0
 800310e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003112:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003114:	b162      	cbz	r2, 8003130 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003116:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003118:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800311a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800311c:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800311e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003120:	bf24      	itt	cs
 8003122:	6819      	ldrcs	r1, [r3, #0]
 8003124:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003126:	68d9      	ldr	r1, [r3, #12]
	}
}
 8003128:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800312c:	f002 bbb4 	b.w	8005898 <memcpy>
	}
}
 8003130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003134:	4770      	bx	lr

08003136 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003136:	b570      	push	{r4, r5, r6, lr}
 8003138:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800313a:	f001 fb2b 	bl	8004794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800313e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003142:	f104 0624 	add.w	r6, r4, #36	; 0x24
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003146:	b26d      	sxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003148:	2d00      	cmp	r5, #0
 800314a:	dd0a      	ble.n	8003162 <prvUnlockQueue+0x2c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800314c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800314e:	b143      	cbz	r3, 8003162 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003150:	4630      	mov	r0, r6
 8003152:	f000 fe31 	bl	8003db8 <xTaskRemoveFromEventList>
 8003156:	b108      	cbz	r0, 800315c <prvUnlockQueue+0x26>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003158:	f000 feb8 	bl	8003ecc <vTaskMissedYield>
 800315c:	3d01      	subs	r5, #1
 800315e:	b26d      	sxtb	r5, r5
 8003160:	e7f2      	b.n	8003148 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003162:	23ff      	movs	r3, #255	; 0xff
 8003164:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003168:	f001 fb36 	bl	80047d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800316c:	f001 fb12 	bl	8004794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003170:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003174:	f104 0610 	add.w	r6, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003178:	b26d      	sxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800317a:	2d00      	cmp	r5, #0
 800317c:	dd0a      	ble.n	8003194 <prvUnlockQueue+0x5e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800317e:	6923      	ldr	r3, [r4, #16]
 8003180:	b143      	cbz	r3, 8003194 <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003182:	4630      	mov	r0, r6
 8003184:	f000 fe18 	bl	8003db8 <xTaskRemoveFromEventList>
 8003188:	b108      	cbz	r0, 800318e <prvUnlockQueue+0x58>
				{
					vTaskMissedYield();
 800318a:	f000 fe9f 	bl	8003ecc <vTaskMissedYield>
 800318e:	3d01      	subs	r5, #1
 8003190:	b26d      	sxtb	r5, r5
 8003192:	e7f2      	b.n	800317a <prvUnlockQueue+0x44>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003194:	23ff      	movs	r3, #255	; 0xff
 8003196:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800319a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 800319e:	f001 bb1b 	b.w	80047d8 <vPortExitCritical>
	...

080031a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80031a8:	4604      	mov	r4, r0
 80031aa:	b940      	cbnz	r0, 80031be <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	e7fe      	b.n	80031bc <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80031be:	f001 fae9 	bl	8004794 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80031c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80031c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031c6:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031c8:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80031ca:	4343      	muls	r3, r0
 80031cc:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80031ce:	1a1b      	subs	r3, r3, r0
 80031d0:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80031d2:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80031d4:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031d6:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80031d8:	23ff      	movs	r3, #255	; 0xff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031da:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80031dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031e4:	b97d      	cbnz	r5, 8003206 <xQueueGenericReset+0x62>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031e6:	6923      	ldr	r3, [r4, #16]
 80031e8:	b1ab      	cbz	r3, 8003216 <xQueueGenericReset+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ea:	f104 0010 	add.w	r0, r4, #16
 80031ee:	f000 fde3 	bl	8003db8 <xTaskRemoveFromEventList>
 80031f2:	b180      	cbz	r0, 8003216 <xQueueGenericReset+0x72>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <xQueueGenericReset+0x7c>)
 80031f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	e007      	b.n	8003216 <xQueueGenericReset+0x72>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003206:	f104 0010 	add.w	r0, r4, #16
 800320a:	f7ff fef9 	bl	8003000 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800320e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003212:	f7ff fef5 	bl	8003000 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003216:	f001 fadf 	bl	80047d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800321a:	2001      	movs	r0, #1
 800321c:	bd38      	pop	{r3, r4, r5, pc}
 800321e:	bf00      	nop
 8003220:	e000ed04 	.word	0xe000ed04

08003224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003224:	b513      	push	{r0, r1, r4, lr}
 8003226:	461c      	mov	r4, r3
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003228:	b940      	cbnz	r0, 800323c <xQueueGenericCreateStatic+0x18>
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	e7fe      	b.n	800323a <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800323c:	b943      	cbnz	r3, 8003250 <xQueueGenericCreateStatic+0x2c>
 800323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	e7fe      	b.n	800324e <xQueueGenericCreateStatic+0x2a>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003250:	b14a      	cbz	r2, 8003266 <xQueueGenericCreateStatic+0x42>
 8003252:	b991      	cbnz	r1, 800327a <xQueueGenericCreateStatic+0x56>
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	e7fe      	b.n	8003264 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003266:	b141      	cbz	r1, 800327a <xQueueGenericCreateStatic+0x56>
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	e7fe      	b.n	8003278 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800327a:	2350      	movs	r3, #80	; 0x50
 800327c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800327e:	9b01      	ldr	r3, [sp, #4]
 8003280:	2b50      	cmp	r3, #80	; 0x50
 8003282:	d008      	beq.n	8003296 <xQueueGenericCreateStatic+0x72>
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	e7fe      	b.n	8003294 <xQueueGenericCreateStatic+0x70>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003296:	2301      	movs	r3, #1
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003298:	2900      	cmp	r1, #0
 800329a:	bf08      	it	eq
 800329c:	4622      	moveq	r2, r4
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800329e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032a2:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032a4:	6421      	str	r1, [r4, #64]	; 0x40
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032a6:	6022      	str	r2, [r4, #0]

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032a8:	4619      	mov	r1, r3
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7ff ff7a 	bl	80031a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80032b4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
 80032b8:	4620      	mov	r0, r4
 80032ba:	b002      	add	sp, #8
 80032bc:	bd10      	pop	{r4, pc}
	...

080032c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032c4:	4689      	mov	r9, r1
 80032c6:	9201      	str	r2, [sp, #4]
 80032c8:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80032ca:	4604      	mov	r4, r0
 80032cc:	b940      	cbnz	r0, 80032e0 <xQueueGenericSend+0x20>
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	e7fe      	b.n	80032de <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032e0:	b951      	cbnz	r1, 80032f8 <xQueueGenericSend+0x38>
 80032e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80032e4:	b143      	cbz	r3, 80032f8 <xQueueGenericSend+0x38>
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	e7fe      	b.n	80032f6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032f8:	2f02      	cmp	r7, #2
 80032fa:	d10b      	bne.n	8003314 <xQueueGenericSend+0x54>
 80032fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d008      	beq.n	8003314 <xQueueGenericSend+0x54>
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	e7fe      	b.n	8003312 <xQueueGenericSend+0x52>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003314:	f000 fde0 	bl	8003ed8 <xTaskGetSchedulerState>
 8003318:	b910      	cbnz	r0, 8003320 <xQueueGenericSend+0x60>
 800331a:	9e01      	ldr	r6, [sp, #4]
 800331c:	b10e      	cbz	r6, 8003322 <xQueueGenericSend+0x62>
 800331e:	e072      	b.n	8003406 <xQueueGenericSend+0x146>
 8003320:	2600      	movs	r6, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8003322:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8003420 <xQueueGenericSend+0x160>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8003326:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800332a:	f001 fa33 	bl	8004794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800332e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003330:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003332:	429a      	cmp	r2, r3
 8003334:	d301      	bcc.n	800333a <xQueueGenericSend+0x7a>
 8003336:	2f02      	cmp	r7, #2
 8003338:	d117      	bne.n	800336a <xQueueGenericSend+0xaa>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800333a:	463a      	mov	r2, r7
 800333c:	4649      	mov	r1, r9
 800333e:	4620      	mov	r0, r4
 8003340:	f7ff feac 	bl	800309c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003346:	b11b      	cbz	r3, 8003350 <xQueueGenericSend+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003348:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800334c:	f000 fd34 	bl	8003db8 <xTaskRemoveFromEventList>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003350:	b138      	cbz	r0, 8003362 <xQueueGenericSend+0xa2>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003352:	4b33      	ldr	r3, [pc, #204]	; (8003420 <xQueueGenericSend+0x160>)
 8003354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003362:	f001 fa39 	bl	80047d8 <vPortExitCritical>
				return pdPASS;
 8003366:	2001      	movs	r0, #1
 8003368:	e056      	b.n	8003418 <xQueueGenericSend+0x158>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800336a:	9d01      	ldr	r5, [sp, #4]
 800336c:	b91d      	cbnz	r5, 8003376 <xQueueGenericSend+0xb6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800336e:	f001 fa33 	bl	80047d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003372:	4628      	mov	r0, r5
 8003374:	e050      	b.n	8003418 <xQueueGenericSend+0x158>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003376:	b916      	cbnz	r6, 800337e <xQueueGenericSend+0xbe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003378:	a802      	add	r0, sp, #8
 800337a:	f000 fd5d 	bl	8003e38 <vTaskInternalSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800337e:	f001 fa2b 	bl	80047d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003382:	f000 fb8f 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003386:	f001 fa05 	bl	8004794 <vPortEnterCritical>
 800338a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800338e:	2bff      	cmp	r3, #255	; 0xff
 8003390:	bf08      	it	eq
 8003392:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003396:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800339a:	2bff      	cmp	r3, #255	; 0xff
 800339c:	bf08      	it	eq
 800339e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80033a2:	f001 fa19 	bl	80047d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033a6:	a901      	add	r1, sp, #4
 80033a8:	a802      	add	r0, sp, #8
 80033aa:	f000 fd51 	bl	8003e50 <xTaskCheckForTimeOut>
 80033ae:	bb18      	cbnz	r0, 80033f8 <xQueueGenericSend+0x138>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033b0:	f001 f9f0 	bl	8004794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80033b6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80033b8:	f001 fa0e 	bl	80047d8 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033bc:	42ae      	cmp	r6, r5
 80033be:	d115      	bne.n	80033ec <xQueueGenericSend+0x12c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033c0:	9901      	ldr	r1, [sp, #4]
 80033c2:	f104 0010 	add.w	r0, r4, #16
 80033c6:	f000 fcbf 	bl	8003d48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7ff feb3 	bl	8003136 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033d0:	f000 fc0a 	bl	8003be8 <xTaskResumeAll>
 80033d4:	b108      	cbz	r0, 80033da <xQueueGenericSend+0x11a>
 80033d6:	2601      	movs	r6, #1
 80033d8:	e7a7      	b.n	800332a <xQueueGenericSend+0x6a>
				{
					portYIELD_WITHIN_API();
 80033da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80033de:	f8ca 3000 	str.w	r3, [sl]
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	e7f4      	b.n	80033d6 <xQueueGenericSend+0x116>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033ec:	4620      	mov	r0, r4
 80033ee:	f7ff fea2 	bl	8003136 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033f2:	f000 fbf9 	bl	8003be8 <xTaskResumeAll>
 80033f6:	e7ee      	b.n	80033d6 <xQueueGenericSend+0x116>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033f8:	4620      	mov	r0, r4
 80033fa:	f7ff fe9c 	bl	8003136 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033fe:	f000 fbf3 	bl	8003be8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003402:	2000      	movs	r0, #0
 8003404:	e008      	b.n	8003418 <xQueueGenericSend+0x158>
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	e7fe      	b.n	8003416 <xQueueGenericSend+0x156>
		}
	}
}
 8003418:	b004      	add	sp, #16
 800341a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341e:	bf00      	nop
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003428:	4688      	mov	r8, r1
 800342a:	4691      	mov	r9, r2
 800342c:	461f      	mov	r7, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800342e:	4604      	mov	r4, r0
 8003430:	b940      	cbnz	r0, 8003444 <xQueueGenericSendFromISR+0x20>
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	e7fe      	b.n	8003442 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003444:	b951      	cbnz	r1, 800345c <xQueueGenericSendFromISR+0x38>
 8003446:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003448:	b143      	cbz	r3, 800345c <xQueueGenericSendFromISR+0x38>
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	e7fe      	b.n	800345a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800345c:	2f02      	cmp	r7, #2
 800345e:	d10b      	bne.n	8003478 <xQueueGenericSendFromISR+0x54>
 8003460:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d008      	beq.n	8003478 <xQueueGenericSendFromISR+0x54>
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	e7fe      	b.n	8003476 <xQueueGenericSendFromISR+0x52>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003478:	f001 faaa 	bl	80049d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800347c:	f3ef 8611 	mrs	r6, BASEPRI
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003490:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003492:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003494:	429a      	cmp	r2, r3
 8003496:	d301      	bcc.n	800349c <xQueueGenericSendFromISR+0x78>
 8003498:	2f02      	cmp	r7, #2
 800349a:	d11d      	bne.n	80034d8 <xQueueGenericSendFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800349c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034a0:	463a      	mov	r2, r7
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034a2:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034a4:	4641      	mov	r1, r8
 80034a6:	4620      	mov	r0, r4
 80034a8:	f7ff fdf8 	bl	800309c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034ac:	1c6b      	adds	r3, r5, #1
 80034ae:	d10d      	bne.n	80034cc <xQueueGenericSendFromISR+0xa8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034b2:	b17b      	cbz	r3, 80034d4 <xQueueGenericSendFromISR+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034b8:	f000 fc7e 	bl	8003db8 <xTaskRemoveFromEventList>
 80034bc:	b150      	cbz	r0, 80034d4 <xQueueGenericSendFromISR+0xb0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034be:	f1b9 0f00 	cmp.w	r9, #0
 80034c2:	d007      	beq.n	80034d4 <xQueueGenericSendFromISR+0xb0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034c4:	2001      	movs	r0, #1
 80034c6:	f8c9 0000 	str.w	r0, [r9]
 80034ca:	e006      	b.n	80034da <xQueueGenericSendFromISR+0xb6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034cc:	3501      	adds	r5, #1
 80034ce:	b26d      	sxtb	r5, r5
 80034d0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034d4:	2001      	movs	r0, #1
 80034d6:	e000      	b.n	80034da <xQueueGenericSendFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034d8:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034da:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 80034de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080034e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034e8:	b085      	sub	sp, #20
 80034ea:	4688      	mov	r8, r1
 80034ec:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034ee:	4604      	mov	r4, r0
 80034f0:	b940      	cbnz	r0, 8003504 <xQueueReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	e7fe      	b.n	8003502 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003504:	b951      	cbnz	r1, 800351c <xQueueReceive+0x38>
 8003506:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003508:	b143      	cbz	r3, 800351c <xQueueReceive+0x38>
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	e7fe      	b.n	800351a <xQueueReceive+0x36>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800351c:	f000 fcdc 	bl	8003ed8 <xTaskGetSchedulerState>
 8003520:	b910      	cbnz	r0, 8003528 <xQueueReceive+0x44>
 8003522:	9e01      	ldr	r6, [sp, #4]
 8003524:	b10e      	cbz	r6, 800352a <xQueueReceive+0x46>
 8003526:	e06f      	b.n	8003608 <xQueueReceive+0x124>
 8003528:	2600      	movs	r6, #0
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800352a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8003620 <xQueueReceive+0x13c>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800352e:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003530:	f001 f930 	bl	8004794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003534:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003536:	b1c5      	cbz	r5, 800356a <xQueueReceive+0x86>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003538:	4641      	mov	r1, r8
 800353a:	4620      	mov	r0, r4
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800353c:	3d01      	subs	r5, #1
			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800353e:	f7ff fde5 	bl	800310c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003542:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	b163      	cbz	r3, 8003562 <xQueueReceive+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003548:	f104 0010 	add.w	r0, r4, #16
 800354c:	f000 fc34 	bl	8003db8 <xTaskRemoveFromEventList>
 8003550:	b138      	cbz	r0, 8003562 <xQueueReceive+0x7e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003552:	4b33      	ldr	r3, [pc, #204]	; (8003620 <xQueueReceive+0x13c>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003562:	f001 f939 	bl	80047d8 <vPortExitCritical>
				return pdPASS;
 8003566:	2001      	movs	r0, #1
 8003568:	e057      	b.n	800361a <xQueueReceive+0x136>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800356a:	9d01      	ldr	r5, [sp, #4]
 800356c:	b91d      	cbnz	r5, 8003576 <xQueueReceive+0x92>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800356e:	f001 f933 	bl	80047d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003572:	4628      	mov	r0, r5
 8003574:	e051      	b.n	800361a <xQueueReceive+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003576:	b916      	cbnz	r6, 800357e <xQueueReceive+0x9a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003578:	a802      	add	r0, sp, #8
 800357a:	f000 fc5d 	bl	8003e38 <vTaskInternalSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800357e:	f001 f92b 	bl	80047d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003582:	f000 fa8f 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003586:	f001 f905 	bl	8004794 <vPortEnterCritical>
 800358a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800358e:	2bff      	cmp	r3, #255	; 0xff
 8003590:	bf08      	it	eq
 8003592:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8003596:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800359a:	2bff      	cmp	r3, #255	; 0xff
 800359c:	bf08      	it	eq
 800359e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80035a2:	f001 f919 	bl	80047d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035a6:	a901      	add	r1, sp, #4
 80035a8:	a802      	add	r0, sp, #8
 80035aa:	f000 fc51 	bl	8003e50 <xTaskCheckForTimeOut>
 80035ae:	b9f8      	cbnz	r0, 80035f0 <xQueueReceive+0x10c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff fd68 	bl	8003086 <prvIsQueueEmpty>
 80035b6:	b1a8      	cbz	r0, 80035e4 <xQueueReceive+0x100>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035b8:	9901      	ldr	r1, [sp, #4]
 80035ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80035be:	f000 fbc3 	bl	8003d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035c2:	4620      	mov	r0, r4
 80035c4:	f7ff fdb7 	bl	8003136 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035c8:	f000 fb0e 	bl	8003be8 <xTaskResumeAll>
 80035cc:	b108      	cbz	r0, 80035d2 <xQueueReceive+0xee>
 80035ce:	2601      	movs	r6, #1
 80035d0:	e7ae      	b.n	8003530 <xQueueReceive+0x4c>
				{
					portYIELD_WITHIN_API();
 80035d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035d6:	f8c9 3000 	str.w	r3, [r9]
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	e7f4      	b.n	80035ce <xQueueReceive+0xea>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035e4:	4620      	mov	r0, r4
 80035e6:	f7ff fda6 	bl	8003136 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035ea:	f000 fafd 	bl	8003be8 <xTaskResumeAll>
 80035ee:	e7ee      	b.n	80035ce <xQueueReceive+0xea>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7ff fda0 	bl	8003136 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035f6:	f000 faf7 	bl	8003be8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7ff fd43 	bl	8003086 <prvIsQueueEmpty>
 8003600:	2800      	cmp	r0, #0
 8003602:	d0e4      	beq.n	80035ce <xQueueReceive+0xea>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003604:	2000      	movs	r0, #0
 8003606:	e008      	b.n	800361a <xQueueReceive+0x136>
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	e7fe      	b.n	8003618 <xQueueReceive+0x134>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800361a:	b005      	add	sp, #20
 800361c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003624:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <vQueueAddToRegistry+0x24>)
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003628:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800362a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800362e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8003632:	b925      	cbnz	r5, 800363e <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <vQueueAddToRegistry+0x24>)
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003636:	6060      	str	r0, [r4, #4]
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003638:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800363c:	bd30      	pop	{r4, r5, pc}
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800363e:	3301      	adds	r3, #1
 8003640:	2b08      	cmp	r3, #8
 8003642:	d1f2      	bne.n	800362a <vQueueAddToRegistry+0x6>
 8003644:	bd30      	pop	{r4, r5, pc}
 8003646:	bf00      	nop
 8003648:	20006710 	.word	0x20006710

0800364c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4604      	mov	r4, r0
 8003650:	460d      	mov	r5, r1
 8003652:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003654:	f001 f89e 	bl	8004794 <vPortEnterCritical>
 8003658:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800365c:	2bff      	cmp	r3, #255	; 0xff
 800365e:	bf04      	itt	eq
 8003660:	2300      	moveq	r3, #0
 8003662:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8003666:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800366a:	2bff      	cmp	r3, #255	; 0xff
 800366c:	bf04      	itt	eq
 800366e:	2300      	moveq	r3, #0
 8003670:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8003674:	f001 f8b0 	bl	80047d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003678:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800367a:	b92b      	cbnz	r3, 8003688 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800367c:	4632      	mov	r2, r6
 800367e:	4629      	mov	r1, r5
 8003680:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003684:	f000 fb7a 	bl	8003d7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003688:	4620      	mov	r0, r4
	}
 800368a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800368e:	f7ff bd52 	b.w	8003136 <prvUnlockQueue>
	...

08003694 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003698:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800369a:	f001 f87b 	bl	8004794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800369e:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80036a0:	4d2d      	ldr	r5, [pc, #180]	; (8003758 <prvAddNewTaskToReadyList+0xc4>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4f2d      	ldr	r7, [pc, #180]	; (800375c <prvAddNewTaskToReadyList+0xc8>)
 80036a6:	3201      	adds	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80036aa:	682e      	ldr	r6, [r5, #0]
 80036ac:	bb16      	cbnz	r6, 80036f4 <prvAddNewTaskToReadyList+0x60>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036ae:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d127      	bne.n	8003706 <prvAddNewTaskToReadyList+0x72>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036b6:	19b8      	adds	r0, r7, r6
 80036b8:	3614      	adds	r6, #20
 80036ba:	f7ff fca1 	bl	8003000 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036be:	f5b6 6f8c 	cmp.w	r6, #1120	; 0x460
 80036c2:	d1f8      	bne.n	80036b6 <prvAddNewTaskToReadyList+0x22>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80036c4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003788 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80036c8:	4e25      	ldr	r6, [pc, #148]	; (8003760 <prvAddNewTaskToReadyList+0xcc>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80036ca:	4640      	mov	r0, r8
 80036cc:	f7ff fc98 	bl	8003000 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036d0:	4630      	mov	r0, r6
 80036d2:	f7ff fc95 	bl	8003000 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036d6:	4823      	ldr	r0, [pc, #140]	; (8003764 <prvAddNewTaskToReadyList+0xd0>)
 80036d8:	f7ff fc92 	bl	8003000 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036dc:	4822      	ldr	r0, [pc, #136]	; (8003768 <prvAddNewTaskToReadyList+0xd4>)
 80036de:	f7ff fc8f 	bl	8003000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036e2:	4822      	ldr	r0, [pc, #136]	; (800376c <prvAddNewTaskToReadyList+0xd8>)
 80036e4:	f7ff fc8c 	bl	8003000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <prvAddNewTaskToReadyList+0xdc>)
 80036ea:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036ee:	4b21      	ldr	r3, [pc, #132]	; (8003774 <prvAddNewTaskToReadyList+0xe0>)
 80036f0:	601e      	str	r6, [r3, #0]
 80036f2:	e008      	b.n	8003706 <prvAddNewTaskToReadyList+0x72>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <prvAddNewTaskToReadyList+0xe4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	b92b      	cbnz	r3, 8003706 <prvAddNewTaskToReadyList+0x72>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036fa:	682b      	ldr	r3, [r5, #0]
 80036fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003700:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 8003702:	bf98      	it	ls
 8003704:	602c      	strls	r4, [r5, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <prvAddNewTaskToReadyList+0xe8>)
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800370e:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003710:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003712:	6811      	ldr	r1, [r2, #0]
 8003714:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003716:	2014      	movs	r0, #20
 8003718:	428b      	cmp	r3, r1
 800371a:	fb00 7003 	mla	r0, r0, r3, r7
 800371e:	f104 0104 	add.w	r1, r4, #4
 8003722:	bf88      	it	hi
 8003724:	6013      	strhi	r3, [r2, #0]
 8003726:	f7ff fc79 	bl	800301c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800372a:	f001 f855 	bl	80047d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <prvAddNewTaskToReadyList+0xe4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	b163      	cbz	r3, 800374e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800373a:	429a      	cmp	r2, r3
 800373c:	d207      	bcs.n	800374e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800373e:	4b11      	ldr	r3, [pc, #68]	; (8003784 <prvAddNewTaskToReadyList+0xf0>)
 8003740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003752:	bf00      	nop
 8003754:	200006f4 	.word	0x200006f4
 8003758:	200006a8 	.word	0x200006a8
 800375c:	20000240 	.word	0x20000240
 8003760:	200006e0 	.word	0x200006e0
 8003764:	200006ac 	.word	0x200006ac
 8003768:	20000214 	.word	0x20000214
 800376c:	20000228 	.word	0x20000228
 8003770:	2000020c 	.word	0x2000020c
 8003774:	200006c4 	.word	0x200006c4
 8003778:	20000210 	.word	0x20000210
 800377c:	200006c8 	.word	0x200006c8
 8003780:	200006f8 	.word	0x200006f8
 8003784:	e000ed04 	.word	0xe000ed04
 8003788:	200006cc 	.word	0x200006cc

0800378c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800378c:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <prvResetNextTaskUnblockTime+0x1c>)
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <prvResetNextTaskUnblockTime+0x20>)
 8003794:	b911      	cbnz	r1, 800379c <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003796:	f04f 32ff 	mov.w	r2, #4294967295
 800379a:	e003      	b.n	80037a4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037a0:	68d2      	ldr	r2, [r2, #12]
 80037a2:	6852      	ldr	r2, [r2, #4]
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	4770      	bx	lr
 80037a8:	2000020c 	.word	0x2000020c
 80037ac:	20000204 	.word	0x20000204

080037b0 <prvInitialiseNewTask.isra.2>:
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80037b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80037b6:	9e09      	ldr	r6, [sp, #36]	; 0x24

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037b8:	0095      	lsls	r5, r2, #2
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80037ba:	468a      	mov	sl, r1

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037bc:	462a      	mov	r2, r5
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80037be:	4607      	mov	r7, r0

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037c0:	21a5      	movs	r1, #165	; 0xa5
 80037c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80037c4:	4698      	mov	r8, r3
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80037c6:	f1a5 0904 	sub.w	r9, r5, #4

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037ca:	f002 f870 	bl	80058ae <memset>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80037ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80037d0:	44a9      	add	r9, r5
 80037d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80037d6:	f029 0907 	bic.w	r9, r9, #7
 80037da:	f104 0233 	add.w	r2, r4, #51	; 0x33
 80037de:	f10a 0a0f 	add.w	sl, sl, #15
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037e2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80037e6:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037ea:	7819      	ldrb	r1, [r3, #0]
 80037ec:	b109      	cbz	r1, 80037f2 <prvInitialiseNewTask.isra.2+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ee:	4553      	cmp	r3, sl
 80037f0:	d1f7      	bne.n	80037e2 <prvInitialiseNewTask.isra.2+0x32>
 80037f2:	9d08      	ldr	r5, [sp, #32]
 80037f4:	2d37      	cmp	r5, #55	; 0x37
 80037f6:	bf28      	it	cs
 80037f8:	2537      	movcs	r5, #55	; 0x37
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037fa:	f04f 0a00 	mov.w	sl, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037fe:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003800:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003802:	1d20      	adds	r0, r4, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003804:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8003808:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800380c:	f7ff fc03 	bl	8003016 <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003810:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003814:	f104 0018 	add.w	r0, r4, #24
 8003818:	f7ff fbfd 	bl	8003016 <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800381c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003820:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003822:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003824:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003826:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800382a:	4642      	mov	r2, r8
 800382c:	4639      	mov	r1, r7
 800382e:	4648      	mov	r0, r9
 8003830:	f000 ff88 	bl	8004744 <pxPortInitialiseStack>
 8003834:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003836:	b106      	cbz	r6, 800383a <prvInitialiseNewTask.isra.2+0x8a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003838:	6034      	str	r4, [r6, #0]
 800383a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800383e <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800383e:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003840:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003844:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003846:	b923      	cbnz	r3, 8003852 <prvDeleteTCB+0x14>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003848:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800384a:	f000 ff05 	bl	8004658 <vPortFree>
				vPortFree( pxTCB );
 800384e:	4620      	mov	r0, r4
 8003850:	e001      	b.n	8003856 <prvDeleteTCB+0x18>
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003852:	2b01      	cmp	r3, #1
 8003854:	d103      	bne.n	800385e <prvDeleteTCB+0x20>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 800385a:	f000 befd 	b.w	8004658 <vPortFree>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800385e:	2b02      	cmp	r3, #2
 8003860:	d008      	beq.n	8003874 <prvDeleteTCB+0x36>
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	e7fe      	b.n	8003872 <prvDeleteTCB+0x34>
 8003874:	bd10      	pop	{r4, pc}
	...

08003878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003878:	b580      	push	{r7, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800387a:	4c13      	ldr	r4, [pc, #76]	; (80038c8 <prvIdleTask+0x50>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 800387c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80038d8 <prvIdleTask+0x60>
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003880:	4f12      	ldr	r7, [pc, #72]	; (80038cc <prvIdleTask+0x54>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
				--uxCurrentNumberOfTasks;
 8003882:	4d13      	ldr	r5, [pc, #76]	; (80038d0 <prvIdleTask+0x58>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	b193      	cbz	r3, 80038ae <prvIdleTask+0x36>
		{
			taskENTER_CRITICAL();
 8003888:	f000 ff84 	bl	8004794 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003890:	1d30      	adds	r0, r6, #4
 8003892:	f7ff fbe7 	bl	8003064 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	3b01      	subs	r3, #1
 800389a:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	3b01      	subs	r3, #1
 80038a0:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 80038a2:	f000 ff99 	bl	80047d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038a6:	4630      	mov	r0, r6
 80038a8:	f7ff ffc9 	bl	800383e <prvDeleteTCB>
 80038ac:	e7ea      	b.n	8003884 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <prvIdleTask+0x5c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d9e5      	bls.n	8003882 <prvIdleTask+0xa>
			{
				taskYIELD();
 80038b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038ba:	f8c8 3000 	str.w	r3, [r8]
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	e7db      	b.n	8003880 <prvIdleTask+0x8>
 80038c8:	200006a4 	.word	0x200006a4
 80038cc:	20000214 	.word	0x20000214
 80038d0:	200006f4 	.word	0x200006f4
 80038d4:	20000240 	.word	0x20000240
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038de:	4b17      	ldr	r3, [pc, #92]	; (800393c <prvAddCurrentTaskToDelayedList+0x60>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038e0:	4d17      	ldr	r5, [pc, #92]	; (8003940 <prvAddCurrentTaskToDelayedList+0x64>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038e2:	681e      	ldr	r6, [r3, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038e4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038e6:	6828      	ldr	r0, [r5, #0]
 80038e8:	3004      	adds	r0, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038ea:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ec:	f7ff fbba 	bl	8003064 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038f0:	1c63      	adds	r3, r4, #1
 80038f2:	462a      	mov	r2, r5
 80038f4:	d107      	bne.n	8003906 <prvAddCurrentTaskToDelayedList+0x2a>
 80038f6:	b137      	cbz	r7, 8003906 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038f8:	6829      	ldr	r1, [r5, #0]
 80038fa:	4812      	ldr	r0, [pc, #72]	; (8003944 <prvAddCurrentTaskToDelayedList+0x68>)
 80038fc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003902:	f7ff bb8b 	b.w	800301c <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003906:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <prvAddCurrentTaskToDelayedList+0x64>)
 800390c:	6054      	str	r4, [r2, #4]

			if( xTimeToWake < xConstTickCount )
 800390e:	42a6      	cmp	r6, r4
 8003910:	d907      	bls.n	8003922 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003912:	4a0d      	ldr	r2, [pc, #52]	; (8003948 <prvAddCurrentTaskToDelayedList+0x6c>)
 8003914:	6810      	ldr	r0, [r2, #0]
 8003916:	6819      	ldr	r1, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800391c:	3104      	adds	r1, #4
 800391e:	f7ff bb89 	b.w	8003034 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <prvAddCurrentTaskToDelayedList+0x70>)
 8003924:	6810      	ldr	r0, [r2, #0]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	3104      	adds	r1, #4
 800392a:	f7ff fb83 	bl	8003034 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <prvAddCurrentTaskToDelayedList+0x74>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003934:	bf38      	it	cc
 8003936:	601c      	strcc	r4, [r3, #0]
 8003938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800393a:	bf00      	nop
 800393c:	200006c0 	.word	0x200006c0
 8003940:	200006a8 	.word	0x200006a8
 8003944:	20000228 	.word	0x20000228
 8003948:	200006c4 	.word	0x200006c4
 800394c:	2000020c 	.word	0x2000020c
 8003950:	20000204 	.word	0x20000204

08003954 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800395a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800395c:	b945      	cbnz	r5, 8003970 <xTaskCreateStatic+0x1c>
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	e7fe      	b.n	800396e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003970:	b944      	cbnz	r4, 8003984 <xTaskCreateStatic+0x30>
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	e7fe      	b.n	8003982 <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003984:	265c      	movs	r6, #92	; 0x5c
 8003986:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003988:	9e04      	ldr	r6, [sp, #16]
 800398a:	2e5c      	cmp	r6, #92	; 0x5c
 800398c:	d008      	beq.n	80039a0 <xTaskCreateStatic+0x4c>
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	e7fe      	b.n	800399e <xTaskCreateStatic+0x4a>
		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039a0:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039a2:	2502      	movs	r5, #2
 80039a4:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039a8:	ad05      	add	r5, sp, #20
 80039aa:	9501      	str	r5, [sp, #4]
 80039ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80039ae:	9402      	str	r4, [sp, #8]
 80039b0:	9500      	str	r5, [sp, #0]
 80039b2:	f7ff fefd 	bl	80037b0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7ff fe6c 	bl	8003694 <prvAddNewTaskToReadyList>
		{
			xReturn = NULL;
		}

		return xReturn;
	}
 80039bc:	9805      	ldr	r0, [sp, #20]
 80039be:	b006      	add	sp, #24
 80039c0:	bd70      	pop	{r4, r5, r6, pc}

080039c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039c6:	4607      	mov	r7, r0
 80039c8:	b085      	sub	sp, #20
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ca:	0090      	lsls	r0, r2, #2
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039cc:	4688      	mov	r8, r1
 80039ce:	4616      	mov	r6, r2
 80039d0:	4699      	mov	r9, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d2:	f000 fdaf 	bl	8004534 <pvPortMalloc>

			if( pxStack != NULL )
 80039d6:	4605      	mov	r5, r0
 80039d8:	b1d8      	cbz	r0, 8003a12 <xTaskCreate+0x50>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039da:	205c      	movs	r0, #92	; 0x5c
 80039dc:	f000 fdaa 	bl	8004534 <pvPortMalloc>

				if( pxNewTCB != NULL )
 80039e0:	4604      	mov	r4, r0
 80039e2:	b198      	cbz	r0, 8003a0c <xTaskCreate+0x4a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

				if( pxNewTCB != NULL )
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039ec:	6305      	str	r5, [r0, #48]	; 0x30
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039f2:	9002      	str	r0, [sp, #8]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4632      	mov	r2, r6
 80039f8:	464b      	mov	r3, r9
 80039fa:	4641      	mov	r1, r8
 80039fc:	4638      	mov	r0, r7
 80039fe:	f7ff fed7 	bl	80037b0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff fe46 	bl	8003694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e004      	b.n	8003a16 <xTaskCreate+0x54>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f000 fe23 	bl	8004658 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a12:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8003a16:	b005      	add	sp, #20
 8003a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003a1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a20:	2400      	movs	r4, #0
		StackType_t *pxIdleTaskStackBuffer = NULL;
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a22:	aa07      	add	r2, sp, #28
 8003a24:	a906      	add	r1, sp, #24
 8003a26:	a805      	add	r0, sp, #20
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a28:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a2a:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a2c:	f000 fd46 	bl	80044bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a30:	9b05      	ldr	r3, [sp, #20]
 8003a32:	9302      	str	r3, [sp, #8]
 8003a34:	9b06      	ldr	r3, [sp, #24]
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	9400      	str	r4, [sp, #0]
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	9a07      	ldr	r2, [sp, #28]
 8003a3e:	4914      	ldr	r1, [pc, #80]	; (8003a90 <vTaskStartScheduler+0x74>)
 8003a40:	4814      	ldr	r0, [pc, #80]	; (8003a94 <vTaskStartScheduler+0x78>)
 8003a42:	f7ff ff87 	bl	8003954 <xTaskCreateStatic>
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a46:	b308      	cbz	r0, 8003a8c <vTaskStartScheduler+0x70>
		{
			xReturn = xTimerCreateTimerTask();
 8003a48:	f000 faea 	bl	8004020 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a4c:	2801      	cmp	r0, #1
 8003a4e:	d112      	bne.n	8003a76 <vTaskStartScheduler+0x5a>
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <vTaskStartScheduler+0x7c>)
 8003a62:	f04f 32ff 	mov.w	r2, #4294967295
 8003a66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <vTaskStartScheduler+0x80>)
 8003a6a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <vTaskStartScheduler+0x84>)
 8003a6e:	601c      	str	r4, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a70:	f000 ff28 	bl	80048c4 <xPortStartScheduler>
 8003a74:	e00a      	b.n	8003a8c <vTaskStartScheduler+0x70>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a76:	3001      	adds	r0, #1
 8003a78:	d108      	bne.n	8003a8c <vTaskStartScheduler+0x70>
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	e7fe      	b.n	8003a8a <vTaskStartScheduler+0x6e>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a8c:	b008      	add	sp, #32
 8003a8e:	bd10      	pop	{r4, pc}
 8003a90:	0800693a 	.word	0x0800693a
 8003a94:	08003879 	.word	0x08003879
 8003a98:	20000204 	.word	0x20000204
 8003a9c:	20000210 	.word	0x20000210
 8003aa0:	200006c0 	.word	0x200006c0

08003aa4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003aa4:	4a02      	ldr	r2, [pc, #8]	; (8003ab0 <vTaskSuspendAll+0xc>)
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	200006a0 	.word	0x200006a0

08003ab4 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ab4:	4b01      	ldr	r3, [pc, #4]	; (8003abc <xTaskGetTickCount+0x8>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	200006c0 	.word	0x200006c0

08003ac0 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac0:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <xTaskIncrementTick+0xfc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d13b      	bne.n	8003b44 <xTaskIncrementTick+0x84>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003acc:	4b3c      	ldr	r3, [pc, #240]	; (8003bc0 <xTaskIncrementTick+0x100>)
 8003ace:	681c      	ldr	r4, [r3, #0]
 8003ad0:	3401      	adds	r4, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ad2:	601c      	str	r4, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ad4:	b9bc      	cbnz	r4, 8003b06 <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <xTaskIncrementTick+0x104>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	b142      	cbz	r2, 8003af0 <xTaskIncrementTick+0x30>
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	e7fe      	b.n	8003aee <xTaskIncrementTick+0x2e>
 8003af0:	4a35      	ldr	r2, [pc, #212]	; (8003bc8 <xTaskIncrementTick+0x108>)
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	6810      	ldr	r0, [r2, #0]
 8003af6:	6018      	str	r0, [r3, #0]
 8003af8:	6011      	str	r1, [r2, #0]
 8003afa:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <xTaskIncrementTick+0x10c>)
 8003afc:	6813      	ldr	r3, [r2, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	f7ff fe43 	bl	800378c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b06:	4d32      	ldr	r5, [pc, #200]	; (8003bd0 <xTaskIncrementTick+0x110>)
 8003b08:	9501      	str	r5, [sp, #4]
 8003b0a:	682b      	ldr	r3, [r5, #0]
 8003b0c:	4e31      	ldr	r6, [pc, #196]	; (8003bd4 <xTaskIncrementTick+0x114>)
 8003b0e:	4f32      	ldr	r7, [pc, #200]	; (8003bd8 <xTaskIncrementTick+0x118>)
 8003b10:	429c      	cmp	r4, r3
 8003b12:	f04f 0b00 	mov.w	fp, #0
 8003b16:	d30b      	bcc.n	8003b30 <xTaskIncrementTick+0x70>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b18:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003bc4 <xTaskIncrementTick+0x104>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b1c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003be4 <xTaskIncrementTick+0x124>
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b20:	f8d8 2000 	ldr.w	r2, [r8]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	b9a2      	cbnz	r2, 8003b52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b28:	9b01      	ldr	r3, [sp, #4]
 8003b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2e:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b34:	2214      	movs	r2, #20
 8003b36:	434a      	muls	r2, r1
 8003b38:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8003b3a:	2a02      	cmp	r2, #2
 8003b3c:	bf28      	it	cs
 8003b3e:	f04f 0b01 	movcs.w	fp, #1
 8003b42:	e030      	b.n	8003ba6 <xTaskIncrementTick+0xe6>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b44:	4a25      	ldr	r2, [pc, #148]	; (8003bdc <xTaskIncrementTick+0x11c>)
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b4c:	f04f 0b00 	mov.w	fp, #0
 8003b50:	e029      	b.n	8003ba6 <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b52:	f8d8 2000 	ldr.w	r2, [r8]
 8003b56:	68d2      	ldr	r2, [r2, #12]
 8003b58:	68d5      	ldr	r5, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b5a:	6869      	ldr	r1, [r5, #4]

					if( xConstTickCount < xItemValue )
 8003b5c:	428c      	cmp	r4, r1
 8003b5e:	d202      	bcs.n	8003b66 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b60:	9b01      	ldr	r3, [sp, #4]
 8003b62:	6019      	str	r1, [r3, #0]
						break;
 8003b64:	e7e4      	b.n	8003b30 <xTaskIncrementTick+0x70>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b66:	f105 0a04 	add.w	sl, r5, #4
 8003b6a:	4650      	mov	r0, sl
 8003b6c:	f7ff fa7a 	bl	8003064 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b70:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003b72:	b119      	cbz	r1, 8003b7c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b74:	f105 0018 	add.w	r0, r5, #24
 8003b78:	f7ff fa74 	bl	8003064 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b7c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003b7e:	f8d9 1000 	ldr.w	r1, [r9]
 8003b82:	2314      	movs	r3, #20
 8003b84:	4288      	cmp	r0, r1
 8003b86:	bf88      	it	hi
 8003b88:	f8c9 0000 	strhi.w	r0, [r9]
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	fb03 6000 	mla	r0, r3, r0, r6
 8003b92:	f7ff fa43 	bl	800301c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b96:	6838      	ldr	r0, [r7, #0]
 8003b98:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003b9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8003b9c:	4291      	cmp	r1, r2
 8003b9e:	bf28      	it	cs
 8003ba0:	f04f 0b01 	movcs.w	fp, #1
 8003ba4:	e7bc      	b.n	8003b20 <xTaskIncrementTick+0x60>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <xTaskIncrementTick+0x120>)
 8003ba8:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8003baa:	2a00      	cmp	r2, #0
 8003bac:	bf18      	it	ne
 8003bae:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8003bb2:	4658      	mov	r0, fp
 8003bb4:	b003      	add	sp, #12
 8003bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	200006a0 	.word	0x200006a0
 8003bc0:	200006c0 	.word	0x200006c0
 8003bc4:	2000020c 	.word	0x2000020c
 8003bc8:	200006c4 	.word	0x200006c4
 8003bcc:	20000208 	.word	0x20000208
 8003bd0:	20000204 	.word	0x20000204
 8003bd4:	20000240 	.word	0x20000240
 8003bd8:	200006a8 	.word	0x200006a8
 8003bdc:	2000023c 	.word	0x2000023c
 8003be0:	200006fc 	.word	0x200006fc
 8003be4:	200006f8 	.word	0x200006f8

08003be8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bec:	4c2f      	ldr	r4, [pc, #188]	; (8003cac <xTaskResumeAll+0xc4>)
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	b943      	cbnz	r3, 8003c04 <xTaskResumeAll+0x1c>
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	e7fe      	b.n	8003c02 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c04:	f000 fdc6 	bl	8004794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c0e:	6824      	ldr	r4, [r4, #0]
 8003c10:	b10c      	cbz	r4, 8003c16 <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8003c12:	2400      	movs	r4, #0
 8003c14:	e045      	b.n	8003ca2 <xTaskResumeAll+0xba>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <xTaskResumeAll+0xc8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f9      	beq.n	8003c12 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c1e:	4e25      	ldr	r6, [pc, #148]	; (8003cb4 <xTaskResumeAll+0xcc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8003c20:	4f25      	ldr	r7, [pc, #148]	; (8003cb8 <xTaskResumeAll+0xd0>)
 8003c22:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003ccc <xTaskResumeAll+0xe4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c26:	6833      	ldr	r3, [r6, #0]
 8003c28:	b1f3      	cbz	r3, 8003c68 <xTaskResumeAll+0x80>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c2a:	68f3      	ldr	r3, [r6, #12]
 8003c2c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c2e:	1d25      	adds	r5, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c30:	f104 0018 	add.w	r0, r4, #24
 8003c34:	f7ff fa16 	bl	8003064 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f7ff fa13 	bl	8003064 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	2014      	movs	r0, #20
 8003c44:	4293      	cmp	r3, r2
 8003c46:	fb00 8003 	mla	r0, r0, r3, r8
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	bf88      	it	hi
 8003c4e:	603b      	strhi	r3, [r7, #0]
 8003c50:	f7ff f9e4 	bl	800301c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <xTaskResumeAll+0xd4>)
 8003c56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8003c5e:	bf22      	ittt	cs
 8003c60:	4b17      	ldrcs	r3, [pc, #92]	; (8003cc0 <xTaskResumeAll+0xd8>)
 8003c62:	2201      	movcs	r2, #1
 8003c64:	601a      	strcs	r2, [r3, #0]
 8003c66:	e7de      	b.n	8003c26 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c68:	b10c      	cbz	r4, 8003c6e <xTaskResumeAll+0x86>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c6a:	f7ff fd8f 	bl	800378c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <xTaskResumeAll+0xdc>)
 8003c70:	681c      	ldr	r4, [r3, #0]
 8003c72:	461d      	mov	r5, r3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c74:	b144      	cbz	r4, 8003c88 <xTaskResumeAll+0xa0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 8003c76:	4e12      	ldr	r6, [pc, #72]	; (8003cc0 <xTaskResumeAll+0xd8>)
 8003c78:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c7a:	f7ff ff21 	bl	8003ac0 <xTaskIncrementTick>
 8003c7e:	b100      	cbz	r0, 8003c82 <xTaskResumeAll+0x9a>
							{
								xYieldPending = pdTRUE;
 8003c80:	6037      	str	r7, [r6, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c82:	3c01      	subs	r4, #1
 8003c84:	d1f9      	bne.n	8003c7a <xTaskResumeAll+0x92>

						uxPendedTicks = 0;
 8003c86:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c88:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <xTaskResumeAll+0xd8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0c0      	beq.n	8003c12 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <xTaskResumeAll+0xe0>)
 8003c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ca0:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ca2:	f000 fd99 	bl	80047d8 <vPortExitCritical>

	return xAlreadyYielded;
}
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cac:	200006a0 	.word	0x200006a0
 8003cb0:	200006f4 	.word	0x200006f4
 8003cb4:	200006ac 	.word	0x200006ac
 8003cb8:	200006f8 	.word	0x200006f8
 8003cbc:	200006a8 	.word	0x200006a8
 8003cc0:	200006fc 	.word	0x200006fc
 8003cc4:	2000023c 	.word	0x2000023c
 8003cc8:	e000ed04 	.word	0xe000ed04
 8003ccc:	20000240 	.word	0x20000240

08003cd0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <vTaskSwitchContext+0x64>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <vTaskSwitchContext+0x68>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cd8:	b112      	cbz	r2, 8003ce0 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}
	else
	{
		xYieldPending = pdFALSE;
 8003ce0:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <vTaskSwitchContext+0x6c>)
 8003ce4:	4816      	ldr	r0, [pc, #88]	; (8003d40 <vTaskSwitchContext+0x70>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	461d      	mov	r5, r3
 8003cea:	2714      	movs	r7, #20
 8003cec:	fb07 f302 	mul.w	r3, r7, r2
 8003cf0:	18c1      	adds	r1, r0, r3
 8003cf2:	58c6      	ldr	r6, [r0, r3]
 8003cf4:	4c12      	ldr	r4, [pc, #72]	; (8003d40 <vTaskSwitchContext+0x70>)
 8003cf6:	b95e      	cbnz	r6, 8003d10 <vTaskSwitchContext+0x40>
 8003cf8:	b942      	cbnz	r2, 8003d0c <vTaskSwitchContext+0x3c>
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	e7fe      	b.n	8003d0a <vTaskSwitchContext+0x3a>
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	e7ed      	b.n	8003cec <vTaskSwitchContext+0x1c>
 8003d10:	6848      	ldr	r0, [r1, #4]
 8003d12:	3308      	adds	r3, #8
 8003d14:	6840      	ldr	r0, [r0, #4]
 8003d16:	6048      	str	r0, [r1, #4]
 8003d18:	4423      	add	r3, r4
 8003d1a:	4298      	cmp	r0, r3
 8003d1c:	bf04      	itt	eq
 8003d1e:	6843      	ldreq	r3, [r0, #4]
 8003d20:	604b      	streq	r3, [r1, #4]
 8003d22:	2314      	movs	r3, #20
 8003d24:	fb03 4302 	mla	r3, r3, r2, r4
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	68d9      	ldr	r1, [r3, #12]
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <vTaskSwitchContext+0x74>)
 8003d2e:	6019      	str	r1, [r3, #0]
 8003d30:	602a      	str	r2, [r5, #0]
 8003d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d34:	200006a0 	.word	0x200006a0
 8003d38:	200006fc 	.word	0x200006fc
 8003d3c:	200006f8 	.word	0x200006f8
 8003d40:	20000240 	.word	0x20000240
 8003d44:	200006a8 	.word	0x200006a8

08003d48 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003d4c:	b940      	cbnz	r0, 8003d60 <vTaskPlaceOnEventList+0x18>
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	e7fe      	b.n	8003d5e <vTaskPlaceOnEventList+0x16>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <vTaskPlaceOnEventList+0x30>)
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	3118      	adds	r1, #24
 8003d66:	f7ff f965 	bl	8003034 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	2101      	movs	r1, #1
}
 8003d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d72:	f7ff bdb3 	b.w	80038dc <prvAddCurrentTaskToDelayedList>
 8003d76:	bf00      	nop
 8003d78:	200006a8 	.word	0x200006a8

08003d7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	460d      	mov	r5, r1
 8003d80:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8003d82:	b940      	cbnz	r0, 8003d96 <vTaskPlaceOnEventListRestricted+0x1a>
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	e7fe      	b.n	8003d94 <vTaskPlaceOnEventListRestricted+0x18>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <vTaskPlaceOnEventListRestricted+0x38>)
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	3118      	adds	r1, #24
 8003d9c:	f7ff f93e 	bl	800301c <vListInsertEnd>
		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
		{
			xTicksToWait = portMAX_DELAY;
 8003da0:	2c00      	cmp	r4, #0
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003da2:	4621      	mov	r1, r4
 8003da4:	bf0c      	ite	eq
 8003da6:	4628      	moveq	r0, r5
 8003da8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8003dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			xTicksToWait = portMAX_DELAY;
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003db0:	f7ff bd94 	b.w	80038dc <prvAddCurrentTaskToDelayedList>
 8003db4:	200006a8 	.word	0x200006a8

08003db8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003db8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003dba:	68c3      	ldr	r3, [r0, #12]
 8003dbc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003dbe:	b944      	cbnz	r4, 8003dd2 <xTaskRemoveFromEventList+0x1a>
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	e7fe      	b.n	8003dd0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dd2:	f104 0518 	add.w	r5, r4, #24
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f7ff f944 	bl	8003064 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <xTaskRemoveFromEventList+0x68>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	b97b      	cbnz	r3, 8003e02 <xTaskRemoveFromEventList+0x4a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003de2:	1d25      	adds	r5, r4, #4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f7ff f93d 	bl	8003064 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dea:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <xTaskRemoveFromEventList+0x6c>)
 8003dec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003dee:	6811      	ldr	r1, [r2, #0]
 8003df0:	428b      	cmp	r3, r1
 8003df2:	bf88      	it	hi
 8003df4:	6013      	strhi	r3, [r2, #0]
 8003df6:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <xTaskRemoveFromEventList+0x70>)
 8003df8:	2014      	movs	r0, #20
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	fb00 2003 	mla	r0, r0, r3, r2
 8003e00:	e001      	b.n	8003e06 <xTaskRemoveFromEventList+0x4e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e02:	480a      	ldr	r0, [pc, #40]	; (8003e2c <xTaskRemoveFromEventList+0x74>)
 8003e04:	4629      	mov	r1, r5
 8003e06:	f7ff f909 	bl	800301c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <xTaskRemoveFromEventList+0x78>)
 8003e0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e14:	bf83      	ittte	hi
 8003e16:	4b07      	ldrhi	r3, [pc, #28]	; (8003e34 <xTaskRemoveFromEventList+0x7c>)
 8003e18:	2001      	movhi	r0, #1
 8003e1a:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8003e1c:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	200006a0 	.word	0x200006a0
 8003e24:	200006f8 	.word	0x200006f8
 8003e28:	20000240 	.word	0x20000240
 8003e2c:	200006ac 	.word	0x200006ac
 8003e30:	200006a8 	.word	0x200006a8
 8003e34:	200006fc 	.word	0x200006fc

08003e38 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <vTaskInternalSetTimeOutState+0x10>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e3e:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <vTaskInternalSetTimeOutState+0x14>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6043      	str	r3, [r0, #4]
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000208 	.word	0x20000208
 8003e4c:	200006c0 	.word	0x200006c0

08003e50 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	460c      	mov	r4, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e54:	4605      	mov	r5, r0
 8003e56:	b940      	cbnz	r0, 8003e6a <xTaskCheckForTimeOut+0x1a>
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	e7fe      	b.n	8003e68 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003e6a:	b941      	cbnz	r1, 8003e7e <xTaskCheckForTimeOut+0x2e>
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	e7fe      	b.n	8003e7c <xTaskCheckForTimeOut+0x2c>

	taskENTER_CRITICAL();
 8003e7e:	f000 fc89 	bl	8004794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <xTaskCheckForTimeOut+0x74>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e84:	6869      	ldr	r1, [r5, #4]
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e86:	681a      	ldr	r2, [r3, #0]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	1c58      	adds	r0, r3, #1
 8003e8c:	d012      	beq.n	8003eb4 <xTaskCheckForTimeOut+0x64>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e8e:	480e      	ldr	r0, [pc, #56]	; (8003ec8 <xTaskCheckForTimeOut+0x78>)
 8003e90:	682e      	ldr	r6, [r5, #0]
 8003e92:	6800      	ldr	r0, [r0, #0]
 8003e94:	4286      	cmp	r6, r0
 8003e96:	d001      	beq.n	8003e9c <xTaskCheckForTimeOut+0x4c>
 8003e98:	428a      	cmp	r2, r1
 8003e9a:	d20d      	bcs.n	8003eb8 <xTaskCheckForTimeOut+0x68>

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e9c:	1a52      	subs	r2, r2, r1
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d205      	bcs.n	8003eae <xTaskCheckForTimeOut+0x5e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f7ff ffc6 	bl	8003e38 <vTaskInternalSetTimeOutState>
 8003eac:	e002      	b.n	8003eb4 <xTaskCheckForTimeOut+0x64>
			xReturn = pdFALSE;
		}
		else
		{
			*pxTicksToWait = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	e001      	b.n	8003eb8 <xTaskCheckForTimeOut+0x68>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eb4:	2400      	movs	r4, #0
 8003eb6:	e000      	b.n	8003eba <xTaskCheckForTimeOut+0x6a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003eb8:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8003eba:	f000 fc8d 	bl	80047d8 <vPortExitCritical>

	return xReturn;
}
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	bd70      	pop	{r4, r5, r6, pc}
 8003ec2:	bf00      	nop
 8003ec4:	200006c0 	.word	0x200006c0
 8003ec8:	20000208 	.word	0x20000208

08003ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8003ecc:	4b01      	ldr	r3, [pc, #4]	; (8003ed4 <vTaskMissedYield+0x8>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	4770      	bx	lr
 8003ed4:	200006fc 	.word	0x200006fc

08003ed8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <xTaskGetSchedulerState+0x18>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b133      	cbz	r3, 8003eec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <xTaskGetSchedulerState+0x1c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2002      	moveq	r0, #2
 8003ee8:	2000      	movne	r0, #0
 8003eea:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eec:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8003eee:	4770      	bx	lr
 8003ef0:	20000210 	.word	0x20000210
 8003ef4:	200006a0 	.word	0x200006a0

08003ef8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ef8:	b538      	push	{r3, r4, r5, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8003efa:	4604      	mov	r4, r0
 8003efc:	b908      	cbnz	r0, 8003f02 <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8003efe:	2000      	movs	r0, #0
 8003f00:	bd38      	pop	{r3, r4, r5, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f02:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <xTaskPriorityDisinherit+0x78>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4298      	cmp	r0, r3
 8003f08:	d008      	beq.n	8003f1c <xTaskPriorityDisinherit+0x24>
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	e7fe      	b.n	8003f1a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003f1e:	b943      	cbnz	r3, 8003f32 <xTaskPriorityDisinherit+0x3a>
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	e7fe      	b.n	8003f30 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f32:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003f34:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8003f36:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f38:	4291      	cmp	r1, r2
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8003f3a:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f3c:	d0df      	beq.n	8003efe <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1dd      	bne.n	8003efe <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f42:	1d05      	adds	r5, r0, #4
 8003f44:	4628      	mov	r0, r5
 8003f46:	f7ff f88d 	bl	8003064 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003f4c:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f52:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <xTaskPriorityDisinherit+0x7c>)
 8003f56:	6811      	ldr	r1, [r2, #0]
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	bf88      	it	hi
 8003f5c:	6013      	strhi	r3, [r2, #0]
 8003f5e:	4a06      	ldr	r2, [pc, #24]	; (8003f78 <xTaskPriorityDisinherit+0x80>)
 8003f60:	2014      	movs	r0, #20
 8003f62:	fb00 2003 	mla	r0, r0, r3, r2
 8003f66:	4629      	mov	r1, r5
 8003f68:	f7ff f858 	bl	800301c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f6c:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	200006a8 	.word	0x200006a8
 8003f74:	200006f8 	.word	0x200006f8
 8003f78:	20000240 	.word	0x20000240

08003f7c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003f7e:	4c11      	ldr	r4, [pc, #68]	; (8003fc4 <prvCheckForValidListAndQueue+0x48>)
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f80:	f000 fc08 	bl	8004794 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f84:	6825      	ldr	r5, [r4, #0]
 8003f86:	b9bd      	cbnz	r5, 8003fb8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f88:	4f0f      	ldr	r7, [pc, #60]	; (8003fc8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8003f8a:	4e10      	ldr	r6, [pc, #64]	; (8003fcc <prvCheckForValidListAndQueue+0x50>)
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f7ff f837 	bl	8003000 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f92:	4630      	mov	r0, r6
 8003f94:	f7ff f834 	bl	8003000 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <prvCheckForValidListAndQueue+0x58>)
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8003f9c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <prvCheckForValidListAndQueue+0x5c>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fa0:	2110      	movs	r1, #16
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 8003fa2:	601e      	str	r6, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fa4:	200a      	movs	r0, #10
 8003fa6:	9500      	str	r5, [sp, #0]
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <prvCheckForValidListAndQueue+0x60>)
 8003faa:	f7ff f93b 	bl	8003224 <xQueueGenericCreateStatic>
 8003fae:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003fb0:	b110      	cbz	r0, 8003fb8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fb2:	490b      	ldr	r1, [pc, #44]	; (8003fe0 <prvCheckForValidListAndQueue+0x64>)
 8003fb4:	f7ff fb36 	bl	8003624 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8003fb8:	b003      	add	sp, #12
 8003fba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fbe:	f000 bc0b 	b.w	80047d8 <vPortExitCritical>
 8003fc2:	bf00      	nop
 8003fc4:	20000820 	.word	0x20000820
 8003fc8:	20000704 	.word	0x20000704
 8003fcc:	20000718 	.word	0x20000718
 8003fd0:	20000700 	.word	0x20000700
 8003fd4:	20000730 	.word	0x20000730
 8003fd8:	20000824 	.word	0x20000824
 8003fdc:	200007d0 	.word	0x200007d0
 8003fe0:	0800693f 	.word	0x0800693f

08003fe4 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8003fe4:	4291      	cmp	r1, r2
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003fe6:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fe8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fea:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003fec:	d806      	bhi.n	8003ffc <prvInsertTimerInActiveList+0x18>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fee:	1ad2      	subs	r2, r2, r3
 8003ff0:	6983      	ldr	r3, [r0, #24]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d20d      	bcs.n	8004012 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ff6:	1d01      	adds	r1, r0, #4
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <prvInsertTimerInActiveList+0x34>)
 8003ffa:	e005      	b.n	8004008 <prvInsertTimerInActiveList+0x24>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d201      	bcs.n	8004004 <prvInsertTimerInActiveList+0x20>
 8004000:	4299      	cmp	r1, r3
 8004002:	d206      	bcs.n	8004012 <prvInsertTimerInActiveList+0x2e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <prvInsertTimerInActiveList+0x38>)
 8004006:	1d01      	adds	r1, r0, #4
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	f7ff f813 	bl	8003034 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 800400e:	2000      	movs	r0, #0
 8004010:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004012:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8004014:	bd08      	pop	{r3, pc}
 8004016:	bf00      	nop
 8004018:	20000824 	.word	0x20000824
 800401c:	20000700 	.word	0x20000700

08004020 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004020:	b510      	push	{r4, lr}
 8004022:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004024:	f7ff ffaa 	bl	8003f7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004028:	4b13      	ldr	r3, [pc, #76]	; (8004078 <xTimerCreateTimerTask+0x58>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	b943      	cbnz	r3, 8004040 <xTimerCreateTimerTask+0x20>
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	e01a      	b.n	8004076 <xTimerCreateTimerTask+0x56>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004040:	2400      	movs	r4, #0
			StackType_t *pxTimerTaskStackBuffer = NULL;
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004042:	aa07      	add	r2, sp, #28
 8004044:	a906      	add	r1, sp, #24
 8004046:	a805      	add	r0, sp, #20

	if( xTimerQueue != NULL )
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004048:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800404a:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800404c:	f000 fa42 	bl	80044d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004050:	9b05      	ldr	r3, [sp, #20]
 8004052:	9302      	str	r3, [sp, #8]
 8004054:	9b06      	ldr	r3, [sp, #24]
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	2302      	movs	r3, #2
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	9a07      	ldr	r2, [sp, #28]
 800405e:	4907      	ldr	r1, [pc, #28]	; (800407c <xTimerCreateTimerTask+0x5c>)
 8004060:	4807      	ldr	r0, [pc, #28]	; (8004080 <xTimerCreateTimerTask+0x60>)
 8004062:	4623      	mov	r3, r4
 8004064:	f7ff fc76 	bl	8003954 <xTaskCreateStatic>
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <xTimerCreateTimerTask+0x64>)
 800406a:	6018      	str	r0, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800406c:	2800      	cmp	r0, #0
 800406e:	d0de      	beq.n	800402e <xTimerCreateTimerTask+0xe>
	return xReturn;
}
 8004070:	2001      	movs	r0, #1
 8004072:	b008      	add	sp, #32
 8004074:	bd10      	pop	{r4, pc}
 8004076:	e7fe      	b.n	8004076 <xTimerCreateTimerTask+0x56>
 8004078:	20000820 	.word	0x20000820
 800407c:	08006944 	.word	0x08006944
 8004080:	08004165 	.word	0x08004165
 8004084:	20000828 	.word	0x20000828

08004088 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004088:	b530      	push	{r4, r5, lr}
 800408a:	4615      	mov	r5, r2
 800408c:	b085      	sub	sp, #20
 800408e:	461a      	mov	r2, r3
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004090:	4603      	mov	r3, r0
 8004092:	b940      	cbnz	r0, 80040a6 <xTimerGenericCommand+0x1e>
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	e7fe      	b.n	80040a4 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040a6:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <xTimerGenericCommand+0x54>)
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	b1a8      	cbz	r0, 80040d8 <xTimerGenericCommand+0x50>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040ac:	2905      	cmp	r1, #5
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040ae:	e88d 0022 	stmia.w	sp, {r1, r5}
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80040b2:	9302      	str	r3, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040b4:	dc0c      	bgt.n	80040d0 <xTimerGenericCommand+0x48>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040b6:	f7ff ff0f 	bl	8003ed8 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040ba:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040bc:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040be:	bf08      	it	eq
 80040c0:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040c2:	6820      	ldr	r0, [r4, #0]
 80040c4:	bf18      	it	ne
 80040c6:	461a      	movne	r2, r3
 80040c8:	4669      	mov	r1, sp
 80040ca:	f7ff f8f9 	bl	80032c0 <xQueueGenericSend>
 80040ce:	e003      	b.n	80040d8 <xTimerGenericCommand+0x50>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040d0:	2300      	movs	r3, #0
 80040d2:	4669      	mov	r1, sp
 80040d4:	f7ff f9a6 	bl	8003424 <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 80040d8:	b005      	add	sp, #20
 80040da:	bd30      	pop	{r4, r5, pc}
 80040dc:	20000820 	.word	0x20000820

080040e0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040e4:	4e1d      	ldr	r6, [pc, #116]	; (800415c <prvSwitchTimerLists+0x7c>)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040e6:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ea:	4637      	mov	r7, r6
 80040ec:	6833      	ldr	r3, [r6, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	b35a      	cbz	r2, 800414a <prvSwitchTimerLists+0x6a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040f2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040f4:	68dc      	ldr	r4, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040f6:	681d      	ldr	r5, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040f8:	f104 0904 	add.w	r9, r4, #4
 80040fc:	4648      	mov	r0, r9
 80040fe:	f7fe ffb1 	bl	8003064 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004104:	4620      	mov	r0, r4
 8004106:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004108:	69e3      	ldr	r3, [r4, #28]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d1ee      	bne.n	80040ec <prvSwitchTimerLists+0xc>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800410e:	69a3      	ldr	r3, [r4, #24]
 8004110:	442b      	add	r3, r5
			if( xReloadTime > xNextExpireTime )
 8004112:	429d      	cmp	r5, r3
 8004114:	d206      	bcs.n	8004124 <prvSwitchTimerLists+0x44>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004116:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004118:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800411a:	4649      	mov	r1, r9
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	f7fe ff89 	bl	8003034 <vListInsert>
 8004122:	e7e3      	b.n	80040ec <prvSwitchTimerLists+0xc>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004124:	2300      	movs	r3, #0
 8004126:	f8cd 8000 	str.w	r8, [sp]
 800412a:	462a      	mov	r2, r5
 800412c:	4619      	mov	r1, r3
 800412e:	4620      	mov	r0, r4
 8004130:	f7ff ffaa 	bl	8004088 <xTimerGenericCommand>
				configASSERT( xResult );
 8004134:	2800      	cmp	r0, #0
 8004136:	d1d9      	bne.n	80040ec <prvSwitchTimerLists+0xc>
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	e7fe      	b.n	8004148 <prvSwitchTimerLists+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800414a:	4a05      	ldr	r2, [pc, #20]	; (8004160 <prvSwitchTimerLists+0x80>)
 800414c:	4903      	ldr	r1, [pc, #12]	; (800415c <prvSwitchTimerLists+0x7c>)
 800414e:	6810      	ldr	r0, [r2, #0]
 8004150:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	b003      	add	sp, #12
 8004156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800415a:	bf00      	nop
 800415c:	20000700 	.word	0x20000700
 8004160:	20000824 	.word	0x20000824

08004164 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004168:	4d73      	ldr	r5, [pc, #460]	; (8004338 <prvTimerTask+0x1d4>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800416a:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8004348 <prvTimerTask+0x1e4>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800416e:	b089      	sub	sp, #36	; 0x24
 8004170:	462f      	mov	r7, r5
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004172:	682b      	ldr	r3, [r5, #0]
 8004174:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8004178:	f1bb 0f00 	cmp.w	fp, #0
 800417c:	d003      	beq.n	8004186 <prvTimerTask+0x22>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f8d3 9000 	ldr.w	r9, [r3]
 8004184:	e000      	b.n	8004188 <prvTimerTask+0x24>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004186:	46d9      	mov	r9, fp
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004188:	f7ff fc8c 	bl	8003aa4 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800418c:	f7ff fc92 	bl	8003ab4 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8004190:	4b6a      	ldr	r3, [pc, #424]	; (800433c <prvTimerTask+0x1d8>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4290      	cmp	r0, r2
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004196:	4682      	mov	sl, r0
 8004198:	461e      	mov	r6, r3

	if( xTimeNow < xLastTime )
 800419a:	d205      	bcs.n	80041a8 <prvTimerTask+0x44>
 800419c:	9303      	str	r3, [sp, #12]
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
 800419e:	2401      	movs	r4, #1

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
 80041a0:	f7ff ff9e 	bl	80040e0 <prvSwitchTimerLists>
 80041a4:	9b03      	ldr	r3, [sp, #12]
 80041a6:	e000      	b.n	80041aa <prvTimerTask+0x46>
		*pxTimerListsWereSwitched = pdTRUE;
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041a8:	2400      	movs	r4, #0
	}

	xLastTime = xTimeNow;
 80041aa:	f8c3 a000 	str.w	sl, [r3]
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
 80041ae:	2c00      	cmp	r4, #0
 80041b0:	d14e      	bne.n	8004250 <prvTimerTask+0xec>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041b2:	f1bb 0f00 	cmp.w	fp, #0
 80041b6:	d030      	beq.n	800421a <prvTimerTask+0xb6>
 80041b8:	45ca      	cmp	sl, r9
 80041ba:	d335      	bcc.n	8004228 <prvTimerTask+0xc4>
			{
				( void ) xTaskResumeAll();
 80041bc:	f7ff fd14 	bl	8003be8 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f8d3 b00c 	ldr.w	fp, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041c8:	f10b 0004 	add.w	r0, fp, #4
 80041cc:	f7fe ff4a 	bl	8003064 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d119      	bne.n	800420c <prvTimerTask+0xa8>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041d8:	f8db 1018 	ldr.w	r1, [fp, #24]
 80041dc:	464b      	mov	r3, r9
 80041de:	4652      	mov	r2, sl
 80041e0:	4449      	add	r1, r9
 80041e2:	4658      	mov	r0, fp
 80041e4:	f7ff fefe 	bl	8003fe4 <prvInsertTimerInActiveList>
 80041e8:	b180      	cbz	r0, 800420c <prvTimerTask+0xa8>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041ea:	9400      	str	r4, [sp, #0]
 80041ec:	4623      	mov	r3, r4
 80041ee:	464a      	mov	r2, r9
 80041f0:	4621      	mov	r1, r4
 80041f2:	4658      	mov	r0, fp
 80041f4:	f7ff ff48 	bl	8004088 <xTimerGenericCommand>
			configASSERT( xResult );
 80041f8:	b940      	cbnz	r0, 800420c <prvTimerTask+0xa8>
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	e7fe      	b.n	800420a <prvTimerTask+0xa6>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800420c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8004210:	4658      	mov	r0, fp
 8004212:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004214:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004344 <prvTimerTask+0x1e0>
 8004218:	e027      	b.n	800426a <prvTimerTask+0x106>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800421a:	4b49      	ldr	r3, [pc, #292]	; (8004340 <prvTimerTask+0x1dc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	fab2 f282 	clz	r2, r2
 8004224:	0952      	lsrs	r2, r2, #5
 8004226:	e000      	b.n	800422a <prvTimerTask+0xc6>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004228:	4622      	mov	r2, r4
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800422a:	4b46      	ldr	r3, [pc, #280]	; (8004344 <prvTimerTask+0x1e0>)
 800422c:	ebca 0109 	rsb	r1, sl, r9
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	f7ff fa0b 	bl	800364c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8004236:	f7ff fcd7 	bl	8003be8 <xTaskResumeAll>
 800423a:	2800      	cmp	r0, #0
 800423c:	d1ea      	bne.n	8004214 <prvTimerTask+0xb0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800423e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004242:	f8c8 3000 	str.w	r3, [r8]
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	e7e1      	b.n	8004214 <prvTimerTask+0xb0>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8004250:	f7ff fcca 	bl	8003be8 <xTaskResumeAll>
 8004254:	e7de      	b.n	8004214 <prvTimerTask+0xb0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004256:	9b04      	ldr	r3, [sp, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	da03      	bge.n	8004264 <prvTimerTask+0x100>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800425c:	9907      	ldr	r1, [sp, #28]
 800425e:	9806      	ldr	r0, [sp, #24]
 8004260:	9b05      	ldr	r3, [sp, #20]
 8004262:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004264:	9b04      	ldr	r3, [sp, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	da08      	bge.n	800427c <prvTimerTask+0x118>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800426a:	2200      	movs	r2, #0
 800426c:	a904      	add	r1, sp, #16
 800426e:	f8d9 0000 	ldr.w	r0, [r9]
 8004272:	f7ff f937 	bl	80034e4 <xQueueReceive>
 8004276:	2800      	cmp	r0, #0
 8004278:	d1ed      	bne.n	8004256 <prvTimerTask+0xf2>
 800427a:	e77a      	b.n	8004172 <prvTimerTask+0xe>
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800427c:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800427e:	6963      	ldr	r3, [r4, #20]
 8004280:	b113      	cbz	r3, 8004288 <prvTimerTask+0x124>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004282:	1d20      	adds	r0, r4, #4
 8004284:	f7fe feee 	bl	8003064 <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004288:	f7ff fc14 	bl	8003ab4 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 800428c:	6833      	ldr	r3, [r6, #0]
 800428e:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004290:	4683      	mov	fp, r0

	if( xTimeNow < xLastTime )
 8004292:	d201      	bcs.n	8004298 <prvTimerTask+0x134>
	{
		prvSwitchTimerLists();
 8004294:	f7ff ff24 	bl	80040e0 <prvSwitchTimerLists>
 8004298:	9a04      	ldr	r2, [sp, #16]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 800429a:	f8c6 b000 	str.w	fp, [r6]
 800429e:	2a09      	cmp	r2, #9
 80042a0:	d8e3      	bhi.n	800426a <prvTimerTask+0x106>
 80042a2:	2301      	movs	r3, #1
 80042a4:	4093      	lsls	r3, r2
 80042a6:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 80042aa:	d129      	bne.n	8004300 <prvTimerTask+0x19c>
 80042ac:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80042b0:	d102      	bne.n	80042b8 <prvTimerTask+0x154>
 80042b2:	069b      	lsls	r3, r3, #26
 80042b4:	d437      	bmi.n	8004326 <prvTimerTask+0x1c2>
 80042b6:	e7d8      	b.n	800426a <prvTimerTask+0x106>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042b8:	69a1      	ldr	r1, [r4, #24]
 80042ba:	9b05      	ldr	r3, [sp, #20]
 80042bc:	465a      	mov	r2, fp
 80042be:	4419      	add	r1, r3
 80042c0:	4620      	mov	r0, r4
 80042c2:	f7ff fe8f 	bl	8003fe4 <prvInsertTimerInActiveList>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d0cf      	beq.n	800426a <prvTimerTask+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042cc:	4620      	mov	r0, r4
 80042ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042d0:	69e3      	ldr	r3, [r4, #28]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d1c9      	bne.n	800426a <prvTimerTask+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042d6:	69a2      	ldr	r2, [r4, #24]
 80042d8:	9905      	ldr	r1, [sp, #20]
 80042da:	f8cd a000 	str.w	sl, [sp]
 80042de:	440a      	add	r2, r1
 80042e0:	4653      	mov	r3, sl
 80042e2:	4651      	mov	r1, sl
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff fecf 	bl	8004088 <xTimerGenericCommand>
							configASSERT( xResult );
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d1bd      	bne.n	800426a <prvTimerTask+0x106>
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	e7fe      	b.n	80042fe <prvTimerTask+0x19a>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004300:	9905      	ldr	r1, [sp, #20]
 8004302:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004304:	b941      	cbnz	r1, 8004318 <prvTimerTask+0x1b4>
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	e7fe      	b.n	8004316 <prvTimerTask+0x1b2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004318:	465b      	mov	r3, fp
 800431a:	465a      	mov	r2, fp
 800431c:	4459      	add	r1, fp
 800431e:	4620      	mov	r0, r4
 8004320:	f7ff fe60 	bl	8003fe4 <prvInsertTimerInActiveList>
 8004324:	e7a1      	b.n	800426a <prvTimerTask+0x106>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004326:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d19d      	bne.n	800426a <prvTimerTask+0x106>
						{
							vPortFree( pxTimer );
 800432e:	4620      	mov	r0, r4
 8004330:	f000 f992 	bl	8004658 <vPortFree>
 8004334:	e799      	b.n	800426a <prvTimerTask+0x106>
 8004336:	bf00      	nop
 8004338:	20000700 	.word	0x20000700
 800433c:	2000072c 	.word	0x2000072c
 8004340:	20000824 	.word	0x20000824
 8004344:	20000820 	.word	0x20000820
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800434c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004350:	b113      	cbz	r3, 8004358 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8004352:	f06f 0005 	mvn.w	r0, #5
 8004356:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004358:	f3ef 8310 	mrs	r3, PRIMASK
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f8      	bne.n	8004352 <osKernelInitialize+0x6>
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <osKernelInitialize+0x34>)
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	2802      	cmp	r0, #2
 8004366:	d103      	bne.n	8004370 <osKernelInitialize+0x24>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004368:	f3ef 8311 	mrs	r3, BASEPRI
 800436c:	b123      	cbz	r3, 8004378 <osKernelInitialize+0x2c>
 800436e:	e7f0      	b.n	8004352 <osKernelInitialize+0x6>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004370:	b910      	cbnz	r0, 8004378 <osKernelInitialize+0x2c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000c88 	.word	0x20000c88

08004384 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004384:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004386:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800438a:	b113      	cbz	r3, 8004392 <osKernelStart+0xe>
    stat = osErrorISR;
 800438c:	f06f 0005 	mvn.w	r0, #5
 8004390:	bd10      	pop	{r4, pc}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004392:	f3ef 8410 	mrs	r4, PRIMASK
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004396:	2c00      	cmp	r4, #0
 8004398:	d1f8      	bne.n	800438c <osKernelStart+0x8>
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <osKernelStart+0x3c>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	2a02      	cmp	r2, #2
 80043a0:	d103      	bne.n	80043aa <osKernelStart+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043a2:	f3ef 8311 	mrs	r3, BASEPRI
 80043a6:	b143      	cbz	r3, 80043ba <osKernelStart+0x36>
 80043a8:	e7f0      	b.n	800438c <osKernelStart+0x8>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80043aa:	2a01      	cmp	r2, #1
 80043ac:	d105      	bne.n	80043ba <osKernelStart+0x36>
      KernelState = osKernelRunning;
 80043ae:	2202      	movs	r2, #2
 80043b0:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80043b2:	f7ff fb33 	bl	8003a1c <vTaskStartScheduler>
      stat = osOK;
 80043b6:	4620      	mov	r0, r4
 80043b8:	bd10      	pop	{r4, pc}
    } else {
      stat = osError;
 80043ba:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80043be:	bd10      	pop	{r4, pc}
 80043c0:	20000c88 	.word	0x20000c88

080043c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c6:	b087      	sub	sp, #28
 80043c8:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043ca:	2200      	movs	r2, #0
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043cc:	460b      	mov	r3, r1
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043ce:	9205      	str	r2, [sp, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043d0:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80043d4:	2a00      	cmp	r2, #0
 80043d6:	d149      	bne.n	800446c <osThreadNew+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8210 	mrs	r2, PRIMASK
 80043dc:	2a00      	cmp	r2, #0
 80043de:	d145      	bne.n	800446c <osThreadNew+0xa8>
 80043e0:	4a25      	ldr	r2, [pc, #148]	; (8004478 <osThreadNew+0xb4>)
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	2a02      	cmp	r2, #2
 80043e6:	d103      	bne.n	80043f0 <osThreadNew+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043e8:	f3ef 8211 	mrs	r2, BASEPRI
 80043ec:	2a00      	cmp	r2, #0
 80043ee:	d13d      	bne.n	800446c <osThreadNew+0xa8>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d03b      	beq.n	800446c <osThreadNew+0xa8>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80043f4:	2200      	movs	r2, #0
 80043f6:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80043fa:	b34c      	cbz	r4, 8004450 <osThreadNew+0x8c>
      if (attr->name != NULL) {
 80043fc:	6821      	ldr	r1, [r4, #0]
 80043fe:	b909      	cbnz	r1, 8004404 <osThreadNew+0x40>
  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8004400:	f10d 0113 	add.w	r1, sp, #19

    if (attr != NULL) {
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004404:	69a5      	ldr	r5, [r4, #24]
        prio = (UBaseType_t)attr->priority;
 8004406:	2d00      	cmp	r5, #0
 8004408:	bf08      	it	eq
 800440a:	2518      	moveq	r5, #24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800440c:	1e6a      	subs	r2, r5, #1
 800440e:	2a37      	cmp	r2, #55	; 0x37
 8004410:	d82e      	bhi.n	8004470 <osThreadNew+0xac>
 8004412:	6862      	ldr	r2, [r4, #4]
 8004414:	07d2      	lsls	r2, r2, #31
 8004416:	d42b      	bmi.n	8004470 <osThreadNew+0xac>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004418:	6966      	ldr	r6, [r4, #20]
 800441a:	b10e      	cbz	r6, 8004420 <osThreadNew+0x5c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800441c:	08b2      	lsrs	r2, r6, #2
 800441e:	e000      	b.n	8004422 <osThreadNew+0x5e>
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 8004420:	2280      	movs	r2, #128	; 0x80
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004422:	68a7      	ldr	r7, [r4, #8]
 8004424:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8004428:	b167      	cbz	r7, 8004444 <osThreadNew+0x80>
 800442a:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 800442e:	d91d      	bls.n	800446c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004430:	6924      	ldr	r4, [r4, #16]
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004432:	b1dc      	cbz	r4, 800446c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004434:	b1d6      	cbz	r6, 800446c <osThreadNew+0xa8>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004436:	9702      	str	r7, [sp, #8]
 8004438:	9401      	str	r4, [sp, #4]
 800443a:	9500      	str	r5, [sp, #0]
 800443c:	f7ff fa8a 	bl	8003954 <xTaskCreateStatic>
 8004440:	9005      	str	r0, [sp, #20]
 8004442:	e013      	b.n	800446c <osThreadNew+0xa8>
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004444:	f1be 0f00 	cmp.w	lr, #0
 8004448:	d110      	bne.n	800446c <osThreadNew+0xa8>
    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800444a:	6924      	ldr	r4, [r4, #16]
 800444c:	b124      	cbz	r4, 8004458 <osThreadNew+0x94>
 800444e:	e00d      	b.n	800446c <osThreadNew+0xa8>
  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8004450:	f10d 0113 	add.w	r1, sp, #19
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 8004454:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8004456:	2518      	movs	r5, #24
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004458:	ac05      	add	r4, sp, #20
 800445a:	9401      	str	r4, [sp, #4]
 800445c:	9500      	str	r5, [sp, #0]
 800445e:	b292      	uxth	r2, r2
 8004460:	f7ff faaf 	bl	80039c2 <xTaskCreate>
 8004464:	2801      	cmp	r0, #1
          hTask = NULL;
 8004466:	bf1c      	itt	ne
 8004468:	2300      	movne	r3, #0
 800446a:	9305      	strne	r3, [sp, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800446c:	9805      	ldr	r0, [sp, #20]
 800446e:	e000      	b.n	8004472 <osThreadNew+0xae>
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
        return (NULL);
 8004470:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8004472:	b007      	add	sp, #28
 8004474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004476:	bf00      	nop
 8004478:	20000c88 	.word	0x20000c88

0800447c <osThreadYield>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osThreadYield (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004480:	b113      	cbz	r3, 8004488 <osThreadYield+0xc>
    stat = osErrorISR;
 8004482:	f06f 0005 	mvn.w	r0, #5
 8004486:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004488:	f3ef 8310 	mrs	r3, PRIMASK
}

osStatus_t osThreadYield (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f8      	bne.n	8004482 <osThreadYield+0x6>
 8004490:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <osThreadYield+0x38>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d103      	bne.n	80044a0 <osThreadYield+0x24>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004498:	f3ef 8311 	mrs	r3, BASEPRI
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <osThreadYield+0x6>
    stat = osErrorISR;
  } else {
    stat = osOK;
    taskYIELD();
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <osThreadYield+0x3c>)
 80044a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
  } else {
    stat = osOK;
 80044b0:	2000      	movs	r0, #0
    taskYIELD();
  }

  return (stat);
}
 80044b2:	4770      	bx	lr
 80044b4:	20000c88 	.word	0x20000c88
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <vApplicationGetIdleTaskMemory+0x10>)
 80044be:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <vApplicationGetIdleTaskMemory+0x14>)
 80044c2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	2000082c 	.word	0x2000082c
 80044d0:	20000c8c 	.word	0x20000c8c

080044d4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044d4:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <vApplicationGetTimerTaskMemory+0x10>)
 80044d6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <vApplicationGetTimerTaskMemory+0x14>)
 80044da:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4770      	bx	lr
 80044e4:	20000e8c 	.word	0x20000e8c
 80044e8:	20000888 	.word	0x20000888

080044ec <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044ec:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <prvInsertBlockIntoFreeList+0x40>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4282      	cmp	r2, r0
 80044f4:	d201      	bcs.n	80044fa <prvInsertBlockIntoFreeList+0xe>
 80044f6:	4613      	mov	r3, r2
 80044f8:	e7fa      	b.n	80044f0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	185c      	adds	r4, r3, r1
 80044fe:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004500:	bf01      	itttt	eq
 8004502:	6840      	ldreq	r0, [r0, #4]
 8004504:	1809      	addeq	r1, r1, r0
 8004506:	4618      	moveq	r0, r3
 8004508:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800450a:	6841      	ldr	r1, [r0, #4]
 800450c:	1844      	adds	r4, r0, r1
 800450e:	42a2      	cmp	r2, r4
 8004510:	d107      	bne.n	8004522 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004512:	4c07      	ldr	r4, [pc, #28]	; (8004530 <prvInsertBlockIntoFreeList+0x44>)
 8004514:	6824      	ldr	r4, [r4, #0]
 8004516:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004518:	bf1f      	itttt	ne
 800451a:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800451c:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800451e:	1909      	addne	r1, r1, r4
 8004520:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004522:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004524:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004526:	bf18      	it	ne
 8004528:	6018      	strne	r0, [r3, #0]
 800452a:	bd10      	pop	{r4, pc}
 800452c:	20000ef0 	.word	0x20000ef0
 8004530:	20000eec 	.word	0x20000eec

08004534 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004538:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800453a:	f7ff fab3 	bl	8003aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800453e:	4940      	ldr	r1, [pc, #256]	; (8004640 <pvPortMalloc+0x10c>)
 8004540:	4d40      	ldr	r5, [pc, #256]	; (8004644 <pvPortMalloc+0x110>)
 8004542:	680b      	ldr	r3, [r1, #0]
 8004544:	bb0b      	cbnz	r3, 800458a <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004546:	4a40      	ldr	r2, [pc, #256]	; (8004648 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004548:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800454a:	bf1f      	itttt	ne
 800454c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800454e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004552:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8004556:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004558:	bf14      	ite	ne
 800455a:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800455c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004560:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004562:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004564:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004568:	4e38      	ldr	r6, [pc, #224]	; (800464c <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 800456a:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 800456c:	2000      	movs	r0, #0
 800456e:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004570:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8004572:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004574:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004576:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004578:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800457a:	4b35      	ldr	r3, [pc, #212]	; (8004650 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800457c:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800457e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004580:	4b34      	ldr	r3, [pc, #208]	; (8004654 <pvPortMalloc+0x120>)
 8004582:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004584:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004588:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800458a:	682f      	ldr	r7, [r5, #0]
 800458c:	4227      	tst	r7, r4
 800458e:	d146      	bne.n	800461e <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004590:	2c00      	cmp	r4, #0
 8004592:	d045      	beq.n	8004620 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8004594:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004598:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800459a:	bf1c      	itt	ne
 800459c:	f023 0307 	bicne.w	r3, r3, #7
 80045a0:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d039      	beq.n	800461a <pvPortMalloc+0xe6>
 80045a6:	4a2b      	ldr	r2, [pc, #172]	; (8004654 <pvPortMalloc+0x120>)
 80045a8:	6816      	ldr	r6, [r2, #0]
 80045aa:	42b3      	cmp	r3, r6
 80045ac:	4690      	mov	r8, r2
 80045ae:	d836      	bhi.n	800461e <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80045b0:	4a26      	ldr	r2, [pc, #152]	; (800464c <pvPortMalloc+0x118>)
 80045b2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045b4:	6868      	ldr	r0, [r5, #4]
 80045b6:	4283      	cmp	r3, r0
 80045b8:	d803      	bhi.n	80045c2 <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045ba:	6809      	ldr	r1, [r1, #0]
 80045bc:	428d      	cmp	r5, r1
 80045be:	d106      	bne.n	80045ce <pvPortMalloc+0x9a>
 80045c0:	e02d      	b.n	800461e <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045c2:	682c      	ldr	r4, [r5, #0]
 80045c4:	2c00      	cmp	r4, #0
 80045c6:	d0f8      	beq.n	80045ba <pvPortMalloc+0x86>
 80045c8:	462a      	mov	r2, r5
 80045ca:	4625      	mov	r5, r4
 80045cc:	e7f2      	b.n	80045b4 <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045ce:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045d0:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045d2:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045d4:	1ac2      	subs	r2, r0, r3
 80045d6:	2a10      	cmp	r2, #16
 80045d8:	d90f      	bls.n	80045fa <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045da:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045dc:	0741      	lsls	r1, r0, #29
 80045de:	d008      	beq.n	80045f2 <pvPortMalloc+0xbe>
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	e7fe      	b.n	80045f0 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045f2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045f4:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045f6:	f7ff ff79 	bl	80044ec <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045fa:	4915      	ldr	r1, [pc, #84]	; (8004650 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045fc:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045fe:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004600:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004602:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004604:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8004606:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800460a:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800460e:	bf38      	it	cc
 8004610:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004612:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004614:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	e002      	b.n	8004620 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800461a:	461c      	mov	r4, r3
 800461c:	e000      	b.n	8004620 <pvPortMalloc+0xec>
 800461e:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004620:	f7ff fae2 	bl	8003be8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004624:	0763      	lsls	r3, r4, #29
 8004626:	d008      	beq.n	800463a <pvPortMalloc+0x106>
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	e7fe      	b.n	8004638 <pvPortMalloc+0x104>
	return pvReturn;
}
 800463a:	4620      	mov	r0, r4
 800463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004640:	20000eec 	.word	0x20000eec
 8004644:	20004af8 	.word	0x20004af8
 8004648:	20000ef8 	.word	0x20000ef8
 800464c:	20000ef0 	.word	0x20000ef0
 8004650:	20004afc 	.word	0x20004afc
 8004654:	20000ee8 	.word	0x20000ee8

08004658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004658:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 800465a:	4604      	mov	r4, r0
 800465c:	b370      	cbz	r0, 80046bc <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <vPortFree+0x68>)
 8004660:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	4213      	tst	r3, r2
 8004668:	d108      	bne.n	800467c <vPortFree+0x24>
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	e7fe      	b.n	800467a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800467c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004680:	b141      	cbz	r1, 8004694 <vPortFree+0x3c>
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	e7fe      	b.n	8004692 <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004694:	ea23 0302 	bic.w	r3, r3, r2
 8004698:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 800469c:	f7ff fa02 	bl	8003aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046a0:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <vPortFree+0x6c>)
 80046a2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80046a6:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046a8:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046ac:	440b      	add	r3, r1
 80046ae:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046b0:	f7ff ff1c 	bl	80044ec <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 80046b8:	f7ff ba96 	b.w	8003be8 <xTaskResumeAll>
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	bf00      	nop
 80046c0:	20004af8 	.word	0x20004af8
 80046c4:	20000ee8 	.word	0x20000ee8

080046c8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046c8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046ce:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <prvTaskExitError+0x3c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	d008      	beq.n	80046e8 <prvTaskExitError+0x20>
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	e7fe      	b.n	80046e6 <prvTaskExitError+0x1e>
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046f8:	9b01      	ldr	r3, [sp, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0fc      	beq.n	80046f8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046fe:	b002      	add	sp, #8
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000070 	.word	0x20000070

08004708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004708:	4808      	ldr	r0, [pc, #32]	; (800472c <prvPortStartFirstTask+0x24>)
 800470a:	6800      	ldr	r0, [r0, #0]
 800470c:	6800      	ldr	r0, [r0, #0]
 800470e:	f380 8808 	msr	MSP, r0
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8814 	msr	CONTROL, r0
 800471a:	b662      	cpsie	i
 800471c:	b661      	cpsie	f
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	df00      	svc	0
 8004728:	bf00      	nop
 800472a:	0000      	.short	0x0000
 800472c:	e000ed08 	.word	0xe000ed08

08004730 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004730:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004740 <vPortEnableVFP+0x10>
 8004734:	6801      	ldr	r1, [r0, #0]
 8004736:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800473a:	6001      	str	r1, [r0, #0]
 800473c:	4770      	bx	lr
 800473e:	0000      	.short	0x0000
 8004740:	e000ed88 	.word	0xe000ed88

08004744 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004748:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800474c:	4b07      	ldr	r3, [pc, #28]	; (800476c <pxPortInitialiseStack+0x28>)
 800474e:	f840 3c0c 	str.w	r3, [r0, #-12]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004752:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004756:	f06f 0302 	mvn.w	r3, #2
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800475a:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800475e:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004762:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8004766:	3844      	subs	r0, #68	; 0x44
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	080046c9 	.word	0x080046c9

08004770 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <pxCurrentTCBConst2>)
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	f380 8809 	msr	PSP, r0
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	4770      	bx	lr
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst2>:
 8004790:	200006a8 	.word	0x200006a8

08004794 <vPortEnterCritical>:
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047a4:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <vPortEnterCritical+0x3c>)
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047aa:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047ae:	d10d      	bne.n	80047cc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b0:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <vPortEnterCritical+0x40>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80047b8:	d008      	beq.n	80047cc <vPortEnterCritical+0x38>
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	e7fe      	b.n	80047ca <vPortEnterCritical+0x36>
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000070 	.word	0x20000070
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80047d8:	4a08      	ldr	r2, [pc, #32]	; (80047fc <vPortExitCritical+0x24>)
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	b943      	cbnz	r3, 80047f0 <vPortExitCritical+0x18>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	e7fe      	b.n	80047ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80047f0:	3b01      	subs	r3, #1
 80047f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047f4:	b90b      	cbnz	r3, 80047fa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	4770      	bx	lr
 80047fc:	20000070 	.word	0x20000070

08004800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004800:	f3ef 8009 	mrs	r0, PSP
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <pxCurrentTCBConst>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f01e 0f10 	tst.w	lr, #16
 8004810:	bf08      	it	eq
 8004812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004824:	f380 8811 	msr	BASEPRI, r0
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f7ff fa4e 	bl	8003cd0 <vTaskSwitchContext>
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f380 8811 	msr	BASEPRI, r0
 800483c:	bc09      	pop	{r0, r3}
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004846:	f01e 0f10 	tst.w	lr, #16
 800484a:	bf08      	it	eq
 800484c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004850:	f380 8809 	msr	PSP, r0
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst>:
 8004860:	200006a8 	.word	0x200006a8

08004864 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004864:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004876:	f7ff f923 	bl	8003ac0 <xTaskIncrementTick>
 800487a:	b118      	cbz	r0, 8004884 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <SysTick_Handler+0x28>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004884:	2300      	movs	r3, #0
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	bd08      	pop	{r3, pc}
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004890:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004892:	4909      	ldr	r1, [pc, #36]	; (80048b8 <vPortSetupTimerInterrupt+0x28>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004894:	2300      	movs	r3, #0
 8004896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004898:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <vPortSetupTimerInterrupt+0x2c>)
 800489c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048a6:	4906      	ldr	r1, [pc, #24]	; (80048c0 <vPortSetupTimerInterrupt+0x30>)
 80048a8:	3b01      	subs	r3, #1
 80048aa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ac:	2307      	movs	r3, #7
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	e000e010 	.word	0xe000e010
 80048b8:	e000e018 	.word	0xe000e018
 80048bc:	2000006c 	.word	0x2000006c
 80048c0:	e000e014 	.word	0xe000e014

080048c4 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048c4:	4b39      	ldr	r3, [pc, #228]	; (80049ac <xPortStartScheduler+0xe8>)
 80048c6:	4a3a      	ldr	r2, [pc, #232]	; (80049b0 <xPortStartScheduler+0xec>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048c8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	4291      	cmp	r1, r2
 80048ce:	d108      	bne.n	80048e2 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	e7fe      	b.n	80048e0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b33      	ldr	r3, [pc, #204]	; (80049b4 <xPortStartScheduler+0xf0>)
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d108      	bne.n	80048fc <xPortStartScheduler+0x38>
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	e7fe      	b.n	80048fa <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048fc:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <xPortStartScheduler+0xf4>)
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004904:	22ff      	movs	r2, #255	; 0xff
 8004906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004908:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800490a:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <xPortStartScheduler+0xf8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004912:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004916:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800491a:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800491c:	4a28      	ldr	r2, [pc, #160]	; (80049c0 <xPortStartScheduler+0xfc>)
 800491e:	2307      	movs	r3, #7
 8004920:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004922:	2100      	movs	r1, #0
 8004924:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004928:	0600      	lsls	r0, r0, #24
 800492a:	f103 34ff 	add.w	r4, r3, #4294967295
 800492e:	d508      	bpl.n	8004942 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004930:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f88d 3003 	strb.w	r3, [sp, #3]
 800493c:	2101      	movs	r1, #1
 800493e:	4623      	mov	r3, r4
 8004940:	e7f0      	b.n	8004924 <xPortStartScheduler+0x60>
 8004942:	b101      	cbz	r1, 8004946 <xPortStartScheduler+0x82>
 8004944:	6013      	str	r3, [r2, #0]
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004946:	6813      	ldr	r3, [r2, #0]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d008      	beq.n	800495e <xPortStartScheduler+0x9a>
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	e7fe      	b.n	800495c <xPortStartScheduler+0x98>
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800495e:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <xPortStartScheduler+0xfc>)
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004966:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004968:	9b01      	ldr	r3, [sp, #4]
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <xPortStartScheduler+0xf4>)
 800496c:	b2db      	uxtb	r3, r3
 800496e:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <xPortStartScheduler+0x100>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004978:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004980:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004982:	f7ff ff85 	bl	8004890 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <xPortStartScheduler+0x104>)
 8004988:	2400      	movs	r4, #0
 800498a:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800498c:	f7ff fed0 	bl	8004730 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004990:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <xPortStartScheduler+0x108>)
 8004992:	6813      	ldr	r3, [r2, #0]
 8004994:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004998:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800499a:	f7ff feb5 	bl	8004708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800499e:	f7ff f997 	bl	8003cd0 <vTaskSwitchContext>
	prvTaskExitError();
 80049a2:	f7ff fe91 	bl	80046c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
 80049a6:	4620      	mov	r0, r4
 80049a8:	b002      	add	sp, #8
 80049aa:	bd10      	pop	{r4, pc}
 80049ac:	e000ed00 	.word	0xe000ed00
 80049b0:	410fc271 	.word	0x410fc271
 80049b4:	410fc270 	.word	0x410fc270
 80049b8:	e000e400 	.word	0xe000e400
 80049bc:	20004b00 	.word	0x20004b00
 80049c0:	20004b04 	.word	0x20004b04
 80049c4:	e000ed20 	.word	0xe000ed20
 80049c8:	20000070 	.word	0x20000070
 80049cc:	e000ef34 	.word	0xe000ef34

080049d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049d4:	2b0f      	cmp	r3, #15
 80049d6:	d90e      	bls.n	80049f6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049d8:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <vPortValidateInterruptPriority+0x4c>)
 80049da:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049dc:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <vPortValidateInterruptPriority+0x50>)
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d908      	bls.n	80049f6 <vPortValidateInterruptPriority+0x26>
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	e7fe      	b.n	80049f4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <vPortValidateInterruptPriority+0x54>)
 80049f8:	4a0b      	ldr	r2, [pc, #44]	; (8004a28 <vPortValidateInterruptPriority+0x58>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d908      	bls.n	8004a18 <vPortValidateInterruptPriority+0x48>
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	e7fe      	b.n	8004a16 <vPortValidateInterruptPriority+0x46>
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e3f0 	.word	0xe000e3f0
 8004a20:	20004b00 	.word	0x20004b00
 8004a24:	e000ed0c 	.word	0xe000ed0c
 8004a28:	20004b04 	.word	0x20004b04

08004a2c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a2c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004a2e:	b180      	cbz	r0, 8004a52 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004a30:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a34:	b113      	cbz	r3, 8004a3c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004a3c:	b109      	cbz	r1, 8004a42 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004a3e:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8004a48:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004a4a:	f7fb ffdb 	bl	8000a04 <USBD_LL_Init>

  return USBD_OK;
 8004a4e:	2000      	movs	r0, #0
 8004a50:	bd08      	pop	{r3, pc}
  if(pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a52:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);

  return USBD_OK;
}
 8004a54:	bd08      	pop	{r3, pc}

08004a56 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004a56:	b119      	cbz	r1, 8004a60 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004a58:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004a60:	2002      	movs	r0, #2
  }

  return status;
}
 8004a62:	4770      	bx	lr

08004a64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004a64:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004a66:	f7fb fffd 	bl	8000a64 <USBD_LL_Start>

  return USBD_OK;
}
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	bd08      	pop	{r3, pc}

08004a6e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a6e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8004a70:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a74:	b90b      	cbnz	r3, 8004a7a <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004a76:	2002      	movs	r0, #2
 8004a78:	bd08      	pop	{r3, pc}

  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4798      	blx	r3
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d1f9      	bne.n	8004a76 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004a82:	bd08      	pop	{r3, pc}

08004a84 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a84:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004a86:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4798      	blx	r3
  return USBD_OK;
}
 8004a8e:	2000      	movs	r0, #0
 8004a90:	bd08      	pop	{r3, pc}

08004a92 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a92:	b538      	push	{r3, r4, r5, lr}
 8004a94:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a96:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 f912 	bl	8004cc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004aa0:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004aa2:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);

  pdev->ep0_state = USBD_EP0_SETUP;
 8004aa6:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8004aaa:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8004aae:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8004ab2:	f001 031f 	and.w	r3, r1, #31
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d00c      	beq.n	8004ad4 <USBD_LL_SetupStage+0x42>
 8004aba:	d306      	bcc.n	8004aca <USBD_LL_SetupStage+0x38>
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d10e      	bne.n	8004ade <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
    break;

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 fa6a 	bl	8004f9c <USBD_StdEPReq>
    break;
 8004ac8:	e00e      	b.n	8004ae8 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8004aca:	4629      	mov	r1, r5
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 f919 	bl	8004d04 <USBD_StdDevReq>
    break;
 8004ad2:	e009      	b.n	8004ae8 <USBD_LL_SetupStage+0x56>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 fa3a 	bl	8004f50 <USBD_StdItfReq>
    break;
 8004adc:	e004      	b.n	8004ae8 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ade:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7fb ffea 	bl	8000abc <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8004ae8:	2000      	movs	r0, #0
 8004aea:	bd38      	pop	{r3, r4, r5, pc}

08004aec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	4605      	mov	r5, r0
 8004af0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004af2:	bb41      	cbnz	r1, 8004b46 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004af4:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d11d      	bne.n	8004b38 <USBD_LL_DataOutStage+0x4c>
    {
      if(pep->rem_length > pep->maxpacket)
 8004afc:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8004b00:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d90a      	bls.n	8004b1e <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8004b08:	1ad2      	subs	r2, r2, r3

        USBD_CtlContinueRx (pdev,
 8004b0a:	4293      	cmp	r3, r2

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8004b0c:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c

        USBD_CtlContinueRx (pdev,
 8004b10:	4631      	mov	r1, r6
 8004b12:	bf8c      	ite	hi
 8004b14:	b292      	uxthhi	r2, r2
 8004b16:	b29a      	uxthls	r2, r3
 8004b18:	f000 fb14 	bl	8005144 <USBD_CtlContinueRx>
 8004b1c:	e01c      	b.n	8004b58 <USBD_LL_DataOutStage+0x6c>
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004b1e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	b123      	cbz	r3, 8004b30 <USBD_LL_DataOutStage+0x44>
 8004b26:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004b2a:	2a03      	cmp	r2, #3
 8004b2c:	d100      	bne.n	8004b30 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004b2e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004b30:	4628      	mov	r0, r5
 8004b32:	f000 fb0f 	bl	8005154 <USBD_CtlSendStatus>
 8004b36:	e00f      	b.n	8004b58 <USBD_LL_DataOutStage+0x6c>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004b38:	2b05      	cmp	r3, #5
 8004b3a:	d10d      	bne.n	8004b58 <USBD_LL_DataOutStage+0x6c>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004b3c:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004b40:	f7fb ffbc 	bl	8000abc <USBD_LL_StallEP>
 8004b44:	e008      	b.n	8004b58 <USBD_LL_DataOutStage+0x6c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004b46:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	b133      	cbz	r3, 8004b5c <USBD_LL_DataOutStage+0x70>
 8004b4e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004b52:	2a03      	cmp	r2, #3
 8004b54:	d102      	bne.n	8004b5c <USBD_LL_DataOutStage+0x70>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004b56:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004b58:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004b5c:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}

08004b60 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	4613      	mov	r3, r2
 8004b64:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004b66:	460e      	mov	r6, r1
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	d148      	bne.n	8004bfe <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b6c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8004b70:	2a02      	cmp	r2, #2
 8004b72:	d135      	bne.n	8004be0 <USBD_LL_DataInStage+0x80>
    {
      if(pep->rem_length > pep->maxpacket)
 8004b74:	6a05      	ldr	r5, [r0, #32]
 8004b76:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004b78:	4295      	cmp	r5, r2
 8004b7a:	d907      	bls.n	8004b8c <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -= pep->maxpacket;
 8004b7c:	1aaa      	subs	r2, r5, r2
 8004b7e:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004b80:	4619      	mov	r1, r3
 8004b82:	b292      	uxth	r2, r2
 8004b84:	f000 fac7 	bl	8005116 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004b88:	4633      	mov	r3, r6
 8004b8a:	e011      	b.n	8004bb0 <USBD_LL_DataInStage+0x50>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004b8c:	69c3      	ldr	r3, [r0, #28]
 8004b8e:	fbb3 f5f2 	udiv	r5, r3, r2
 8004b92:	fb02 3515 	mls	r5, r2, r5, r3
 8004b96:	b98d      	cbnz	r5, 8004bbc <USBD_LL_DataInStage+0x5c>
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d80f      	bhi.n	8004bbc <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 8004b9c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d20b      	bcs.n	8004bbc <USBD_LL_DataInStage+0x5c>
           (pep->total_length < pdev->ep0_data_len))
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ba4:	462a      	mov	r2, r5
 8004ba6:	f000 fab6 	bl	8005116 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004baa:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004bae:	462b      	mov	r3, r5
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7fb ffcd 	bl	8000b54 <USBD_LL_PrepareReceive>
 8004bba:	e017      	b.n	8004bec <USBD_LL_DataInStage+0x8c>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004bbc:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	b12b      	cbz	r3, 8004bd0 <USBD_LL_DataInStage+0x70>
 8004bc4:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8004bc8:	2a03      	cmp	r2, #3
 8004bca:	d101      	bne.n	8004bd0 <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004bcc:	4620      	mov	r0, r4
 8004bce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7fb ff72 	bl	8000abc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f000 fac6 	bl	800516a <USBD_CtlReceiveStatus>
 8004bde:	e005      	b.n	8004bec <USBD_LL_DataInStage+0x8c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004be0:	f032 0304 	bics.w	r3, r2, #4
 8004be4:	d102      	bne.n	8004bec <USBD_LL_DataInStage+0x8c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	f7fb ff68 	bl	8000abc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004bec:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	d10e      	bne.n	8004c16 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004bf8:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8004bfc:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004bfe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	b133      	cbz	r3, 8004c14 <USBD_LL_DataInStage+0xb4>
 8004c06:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004c0a:	2a03      	cmp	r2, #3
 8004c0c:	d102      	bne.n	8004c14 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004c0e:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004c10:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004c14:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 8004c16:	bd70      	pop	{r4, r5, r6, pc}

08004c18 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004c18:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c1a:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004c1c:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c1e:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c20:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c22:	2640      	movs	r6, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c24:	2340      	movs	r3, #64	; 0x40
 8004c26:	f7fb ff2b 	bl	8000a80 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c2a:	4633      	mov	r3, r6
 8004c2c:	2180      	movs	r1, #128	; 0x80

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c2e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c32:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c36:	2200      	movs	r2, #0
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f7fb ff21 	bl	8000a80 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004c3e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c42:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c44:	2100      	movs	r1, #0

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c46:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c48:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c4c:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004c50:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c52:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 8004c56:	b123      	cbz	r3, 8004c62 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c58:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004c62:	2000      	movs	r0, #0
 8004c64:	bd70      	pop	{r4, r5, r6, pc}

08004c66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004c66:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004c68:	2000      	movs	r0, #0
 8004c6a:	4770      	bx	lr

08004c6c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004c6c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004c70:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004c74:	2304      	movs	r3, #4
 8004c76:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	4770      	bx	lr

08004c7e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8004c7e:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8004c82:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8004c86:	2000      	movs	r0, #0
 8004c88:	4770      	bx	lr

08004c8a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004c8a:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c8c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004c90:	2a03      	cmp	r2, #3
 8004c92:	d104      	bne.n	8004c9e <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004c94:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	b103      	cbz	r3, 8004c9e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004c9c:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	bd08      	pop	{r3, pc}

08004ca2 <USBD_LL_IsoINIncomplete>:
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	4770      	bx	lr

08004ca6 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	4770      	bx	lr

08004caa <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8004caa:	2000      	movs	r0, #0
 8004cac:	4770      	bx	lr

08004cae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004cae:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004cb6:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8004cba:	7901      	ldrb	r1, [r0, #4]
 8004cbc:	6852      	ldr	r2, [r2, #4]
 8004cbe:	4790      	blx	r2

  return USBD_OK;
}
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	bd08      	pop	{r3, pc}

08004cc4 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004cc4:	780b      	ldrb	r3, [r1, #0]
 8004cc6:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004cc8:	784b      	ldrb	r3, [r1, #1]
 8004cca:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004ccc:	78ca      	ldrb	r2, [r1, #3]
 8004cce:	788b      	ldrb	r3, [r1, #2]
 8004cd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004cd4:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004cd6:	794a      	ldrb	r2, [r1, #5]
 8004cd8:	790b      	ldrb	r3, [r1, #4]
 8004cda:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004cde:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004ce0:	79ca      	ldrb	r2, [r1, #7]
 8004ce2:	798b      	ldrb	r3, [r1, #6]
 8004ce4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ce8:	80c3      	strh	r3, [r0, #6]
 8004cea:	4770      	bx	lr

08004cec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004cec:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8004cee:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004cf0:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8004cf2:	f7fb fee3 	bl	8000abc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	2100      	movs	r1, #0
}
 8004cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
  USBD_LL_StallEP(pdev , 0U);
 8004cfe:	f7fb bedd 	b.w	8000abc <USBD_LL_StallEP>
	...

08004d04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004d04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d06:	780b      	ldrb	r3, [r1, #0]
 8004d08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d0c:	2b20      	cmp	r3, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004d0e:	4604      	mov	r4, r0
 8004d10:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d12:	d005      	beq.n	8004d20 <USBD_StdDevReq+0x1c>
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d003      	beq.n	8004d20 <USBD_StdDevReq+0x1c>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f040 8112 	bne.w	8004f42 <USBD_StdDevReq+0x23e>
 8004d1e:	e006      	b.n	8004d2e <USBD_StdDevReq+0x2a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8004d20:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004d24:	4629      	mov	r1, r5
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4620      	mov	r0, r4
 8004d2a:	4798      	blx	r3
    break;
 8004d2c:	e10b      	b.n	8004f46 <USBD_StdDevReq+0x242>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8004d2e:	784b      	ldrb	r3, [r1, #1]
 8004d30:	2b09      	cmp	r3, #9
 8004d32:	f200 8104 	bhi.w	8004f3e <USBD_StdDevReq+0x23a>
 8004d36:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004d3a:	00d9      	.short	0x00d9
 8004d3c:	010200f8 	.word	0x010200f8
 8004d40:	010200ef 	.word	0x010200ef
 8004d44:	000a0078 	.word	0x000a0078
 8004d48:	00c80102 	.word	0x00c80102
 8004d4c:	0096      	.short	0x0096
{
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8004d4e:	884b      	ldrh	r3, [r1, #2]
 8004d50:	0a1a      	lsrs	r2, r3, #8
 8004d52:	3a01      	subs	r2, #1
 8004d54:	2a06      	cmp	r2, #6
 8004d56:	f200 80f2 	bhi.w	8004f3e <USBD_StdDevReq+0x23a>
 8004d5a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004d5e:	0007      	.short	0x0007
 8004d60:	0017000b 	.word	0x0017000b
 8004d64:	00f000f0 	.word	0x00f000f0
 8004d68:	0047003c 	.word	0x0047003c
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004d6c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	e017      	b.n	8004da4 <USBD_StdDevReq+0xa0>
    break;

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004d74:	7c02      	ldrb	r2, [r0, #16]
 8004d76:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004d7a:	b90a      	cbnz	r2, 8004d80 <USBD_StdDevReq+0x7c>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	e000      	b.n	8004d82 <USBD_StdDevReq+0x7e>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	f10d 0006 	add.w	r0, sp, #6
 8004d86:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e03a      	b.n	8004e02 <USBD_StdDevReq+0xfe>
    }
    break;

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	f200 80d5 	bhi.w	8004f3e <USBD_StdDevReq+0x23a>
 8004d94:	e8df f003 	tbb	[pc, r3]
 8004d98:	130f0b03 	.word	0x130f0b03
 8004d9c:	1b17      	.short	0x1b17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004d9e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	7c20      	ldrb	r0, [r4, #16]
 8004da6:	f10d 0106 	add.w	r1, sp, #6
 8004daa:	4798      	blx	r3
 8004dac:	e02a      	b.n	8004e04 <USBD_StdDevReq+0x100>
      break;

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004dae:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	e7f6      	b.n	8004da4 <USBD_StdDevReq+0xa0>
      break;

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004db6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	e7f2      	b.n	8004da4 <USBD_StdDevReq+0xa0>
      break;

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004dbe:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	e7ee      	b.n	8004da4 <USBD_StdDevReq+0xa0>
      break;

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004dc6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	e7ea      	b.n	8004da4 <USBD_StdDevReq+0xa0>
      break;

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004dce:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	e7e6      	b.n	8004da4 <USBD_StdDevReq+0xa0>
#endif
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004dd6:	7c03      	ldrb	r3, [r0, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 80b0 	bne.w	8004f3e <USBD_StdDevReq+0x23a>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004dde:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004de2:	f10d 0006 	add.w	r0, sp, #6
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	4798      	blx	r3
 8004dea:	e00b      	b.n	8004e04 <USBD_StdDevReq+0x100>
      USBD_CtlError(pdev , req);
      return;
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004dec:	7c03      	ldrb	r3, [r0, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f040 80a5 	bne.w	8004f3e <USBD_StdDevReq+0x23a>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004df4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004df8:	f10d 0006 	add.w	r0, sp, #6
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004e00:	2307      	movs	r3, #7
 8004e02:	7043      	strb	r3, [r0, #1]
  default:
     USBD_CtlError(pdev , req);
    return;
  }

  if((len != 0U) && (req->wLength != 0U))
 8004e04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004e08:	b152      	cbz	r2, 8004e20 <USBD_StdDevReq+0x11c>
 8004e0a:	88eb      	ldrh	r3, [r5, #6]
 8004e0c:	b143      	cbz	r3, 8004e20 <USBD_StdDevReq+0x11c>
  {

    len = MIN(len, req->wLength);
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	bf28      	it	cs
 8004e12:	461a      	movcs	r2, r3

    USBD_CtlSendData (pdev, pbuf, len);
 8004e14:	4601      	mov	r1, r0
 8004e16:	4620      	mov	r0, r4
  }

  if((len != 0U) && (req->wLength != 0U))
  {

    len = MIN(len, req->wLength);
 8004e18:	f8ad 2006 	strh.w	r2, [sp, #6]

    USBD_CtlSendData (pdev, pbuf, len);
 8004e1c:	f000 f96e 	bl	80050fc <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8004e20:	88eb      	ldrh	r3, [r5, #6]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f040 808f 	bne.w	8004f46 <USBD_StdDevReq+0x242>
 8004e28:	e07b      	b.n	8004f22 <USBD_StdDevReq+0x21e>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004e2a:	888b      	ldrh	r3, [r1, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f040 8086 	bne.w	8004f3e <USBD_StdDevReq+0x23a>
 8004e32:	88cb      	ldrh	r3, [r1, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f040 8082 	bne.w	8004f3e <USBD_StdDevReq+0x23a>
 8004e3a:	884e      	ldrh	r6, [r1, #2]
 8004e3c:	2e7f      	cmp	r6, #127	; 0x7f
 8004e3e:	d87e      	bhi.n	8004f3e <USBD_StdDevReq+0x23a>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e40:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004e44:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004e46:	b2f1      	uxtb	r1, r6

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e48:	d079      	beq.n	8004f3e <USBD_StdDevReq+0x23a>
    {
      USBD_CtlError(pdev , req);
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004e4a:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004e4e:	f7fb fe65 	bl	8000b1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004e52:	4620      	mov	r0, r4
 8004e54:	f000 f97e 	bl	8005154 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004e58:	b10e      	cbz	r6, 8004e5e <USBD_StdDevReq+0x15a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e000      	b.n	8004e60 <USBD_StdDevReq+0x15c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8004e64:	e06f      	b.n	8004f46 <USBD_StdDevReq+0x242>
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004e66:	7889      	ldrb	r1, [r1, #2]
 8004e68:	4e38      	ldr	r6, [pc, #224]	; (8004f4c <USBD_StdDevReq+0x248>)

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e6a:	2901      	cmp	r1, #1
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004e6c:	7031      	strb	r1, [r6, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e6e:	d866      	bhi.n	8004f3e <USBD_StdDevReq+0x23a>
  {
    USBD_CtlError(pdev, req);
  }
  else
  {
    switch (pdev->dev_state)
 8004e70:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d002      	beq.n	8004e7e <USBD_StdDevReq+0x17a>
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d008      	beq.n	8004e8e <USBD_StdDevReq+0x18a>
 8004e7c:	e01d      	b.n	8004eba <USBD_StdDevReq+0x1b6>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	d04f      	beq.n	8004f22 <USBD_StdDevReq+0x21e>
      {
        pdev->dev_config = cfgidx;
 8004e82:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e84:	2303      	movs	r3, #3
    switch (pdev->dev_state)
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
      {
        pdev->dev_config = cfgidx;
 8004e86:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e88:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
 8004e8c:	e00f      	b.n	8004eae <USBD_StdDevReq+0x1aa>
        USBD_CtlSendStatus(pdev);
      }
      break;

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8004e8e:	b931      	cbnz	r1, 8004e9e <USBD_StdDevReq+0x19a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e90:	2302      	movs	r3, #2
 8004e92:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8004e96:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8004e98:	f7ff fdf4 	bl	8004a84 <USBD_ClrClassConfig>
 8004e9c:	e041      	b.n	8004f22 <USBD_StdDevReq+0x21e>
        USBD_CtlSendStatus(pdev);
      }
      else if (cfgidx != pdev->dev_config)
 8004e9e:	6841      	ldr	r1, [r0, #4]
 8004ea0:	2901      	cmp	r1, #1
 8004ea2:	d03e      	beq.n	8004f22 <USBD_StdDevReq+0x21e>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004ea4:	b2c9      	uxtb	r1, r1
 8004ea6:	f7ff fded 	bl	8004a84 <USBD_ClrClassConfig>

        /* set new configuration */
        pdev->dev_config = cfgidx;
 8004eaa:	7831      	ldrb	r1, [r6, #0]
 8004eac:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f7ff fddd 	bl	8004a6e <USBD_SetClassConfig>
 8004eb4:	2802      	cmp	r0, #2
 8004eb6:	d134      	bne.n	8004f22 <USBD_StdDevReq+0x21e>
 8004eb8:	e041      	b.n	8004f3e <USBD_StdDevReq+0x23a>
        USBD_CtlSendStatus(pdev);
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f7ff ff16 	bl	8004cec <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8004ec0:	7831      	ldrb	r1, [r6, #0]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f7ff fdde 	bl	8004a84 <USBD_ClrClassConfig>
 8004ec8:	e03d      	b.n	8004f46 <USBD_StdDevReq+0x242>
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  if (req->wLength != 1U)
 8004eca:	88ca      	ldrh	r2, [r1, #6]
 8004ecc:	2a01      	cmp	r2, #1
 8004ece:	d136      	bne.n	8004f3e <USBD_StdDevReq+0x23a>
  {
    USBD_CtlError(pdev , req);
  }
  else
  {
    switch (pdev->dev_state)
 8004ed0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004ed4:	b39b      	cbz	r3, 8004f3e <USBD_StdDevReq+0x23a>
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d903      	bls.n	8004ee2 <USBD_StdDevReq+0x1de>
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d12f      	bne.n	8004f3e <USBD_StdDevReq+0x23a>
      pdev->dev_default_config = 0U;
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
      break;

    case USBD_STATE_CONFIGURED:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004ede:	1d01      	adds	r1, r0, #4
 8004ee0:	e016      	b.n	8004f10 <USBD_StdDevReq+0x20c>
  {
    switch (pdev->dev_state)
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
      pdev->dev_default_config = 0U;
 8004ee2:	4601      	mov	r1, r0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f841 3f08 	str.w	r3, [r1, #8]!
 8004eea:	e011      	b.n	8004f10 <USBD_StdDevReq+0x20c>
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8004eec:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d823      	bhi.n	8004f3e <USBD_StdDevReq+0x23a>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8004ef6:	88cb      	ldrh	r3, [r1, #6]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d120      	bne.n	8004f3e <USBD_StdDevReq+0x23a>
      USBD_CtlError(pdev, req);
      break;
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004efc:	2301      	movs	r3, #1
 8004efe:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8004f00:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8004f04:	b10b      	cbz	r3, 8004f0a <USBD_StdDevReq+0x206>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004f06:	2303      	movs	r3, #3
 8004f08:	60c3      	str	r3, [r0, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f104 010c 	add.w	r1, r4, #12
 8004f10:	4620      	mov	r0, r4
 8004f12:	f000 f8f3 	bl	80050fc <USBD_CtlSendData>
 8004f16:	e016      	b.n	8004f46 <USBD_StdDevReq+0x242>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004f18:	884b      	ldrh	r3, [r1, #2]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d113      	bne.n	8004f46 <USBD_StdDevReq+0x242>
  {
    pdev->dev_remote_wakeup = 1U;
 8004f1e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f916 	bl	8005154 <USBD_CtlSendStatus>
 8004f28:	e00d      	b.n	8004f46 <USBD_StdDevReq+0x242>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8004f2a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d804      	bhi.n	8004f3e <USBD_StdDevReq+0x23a>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004f34:	884b      	ldrh	r3, [r1, #2]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <USBD_StdDevReq+0x242>
    {
      pdev->dev_remote_wakeup = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e7ef      	b.n	8004f1e <USBD_StdDevReq+0x21a>
    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
      break;

    default:
      USBD_CtlError(pdev, req);
 8004f3e:	4629      	mov	r1, r5
 8004f40:	4620      	mov	r0, r4
      break;
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8004f42:	f7ff fed3 	bl	8004cec <USBD_CtlError>
    break;
  }

  return ret;
}
 8004f46:	2000      	movs	r0, #0
 8004f48:	b002      	add	sp, #8
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	20004b08 	.word	0x20004b08

08004f50 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004f50:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f52:	780b      	ldrb	r3, [r1, #0]
 8004f54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f58:	2b20      	cmp	r3, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f5e:	d002      	beq.n	8004f66 <USBD_StdItfReq+0x16>
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d000      	beq.n	8004f66 <USBD_StdItfReq+0x16>
 8004f64:	b9b3      	cbnz	r3, 8004f94 <USBD_StdItfReq+0x44>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004f66:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d80f      	bhi.n	8004f90 <USBD_StdItfReq+0x40>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004f70:	792b      	ldrb	r3, [r5, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d80c      	bhi.n	8004f90 <USBD_StdItfReq+0x40>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004f76:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4798      	blx	r3

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004f82:	88eb      	ldrh	r3, [r5, #6]
 8004f84:	b943      	cbnz	r3, 8004f98 <USBD_StdItfReq+0x48>
 8004f86:	b938      	cbnz	r0, 8004f98 <USBD_StdItfReq+0x48>
        {
          USBD_CtlSendStatus(pdev);
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 f8e3 	bl	8005154 <USBD_CtlSendStatus>
 8004f8e:	e003      	b.n	8004f98 <USBD_StdItfReq+0x48>
        USBD_CtlError(pdev, req);
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8004f90:	4629      	mov	r1, r5
 8004f92:	4620      	mov	r0, r4
      break;
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8004f94:	f7ff feaa 	bl	8004cec <USBD_CtlError>
    break;
  }

  return USBD_OK;
}
 8004f98:	2000      	movs	r0, #0
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}

08004f9c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004f9c:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f9e:	780b      	ldrb	r3, [r1, #0]
 8004fa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fa4:	2b20      	cmp	r3, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	460a      	mov	r2, r1
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004faa:	d005      	beq.n	8004fb8 <USBD_StdEPReq+0x1c>
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d003      	beq.n	8004fb8 <USBD_StdEPReq+0x1c>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 8083 	bne.w	80050bc <USBD_StdEPReq+0x120>
 8004fb6:	e006      	b.n	8004fc6 <USBD_StdEPReq+0x2a>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8004fb8:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	4798      	blx	r3
    break;
 8004fc4:	e07c      	b.n	80050c0 <USBD_StdEPReq+0x124>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);

      return ret;
    }

    switch (req->bRequest)
 8004fc6:	784e      	ldrb	r6, [r1, #1]
{

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8004fc8:	888d      	ldrh	r5, [r1, #4]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);

      return ret;
    }

    switch (req->bRequest)
 8004fca:	2e01      	cmp	r6, #1
{

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8004fcc:	b2eb      	uxtb	r3, r5
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);

      return ret;
    }

    switch (req->bRequest)
 8004fce:	d015      	beq.n	8004ffc <USBD_StdEPReq+0x60>
 8004fd0:	d331      	bcc.n	8005036 <USBD_StdEPReq+0x9a>
 8004fd2:	2e03      	cmp	r6, #3
 8004fd4:	d172      	bne.n	80050bc <USBD_StdEPReq+0x120>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8004fd6:	f890 5274 	ldrb.w	r5, [r0, #628]	; 0x274
 8004fda:	2d02      	cmp	r5, #2
 8004fdc:	d015      	beq.n	800500a <USBD_StdEPReq+0x6e>
 8004fde:	2d03      	cmp	r5, #3
 8004fe0:	d16c      	bne.n	80050bc <USBD_StdEPReq+0x120>
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004fe2:	8849      	ldrh	r1, [r1, #2]
 8004fe4:	b931      	cbnz	r1, 8004ff4 <USBD_StdEPReq+0x58>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004fe6:	0659      	lsls	r1, r3, #25
 8004fe8:	d004      	beq.n	8004ff4 <USBD_StdEPReq+0x58>
 8004fea:	88d2      	ldrh	r2, [r2, #6]
 8004fec:	b912      	cbnz	r2, 8004ff4 <USBD_StdEPReq+0x58>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fd64 	bl	8000abc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 f8ad 	bl	8005154 <USBD_CtlSendStatus>

        break;
 8004ffa:	e061      	b.n	80050c0 <USBD_StdEPReq+0x124>
      }
      break;

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8004ffc:	f890 5274 	ldrb.w	r5, [r0, #628]	; 0x274
 8005000:	2d02      	cmp	r5, #2
 8005002:	d002      	beq.n	800500a <USBD_StdEPReq+0x6e>
 8005004:	2d03      	cmp	r5, #3
 8005006:	d00d      	beq.n	8005024 <USBD_StdEPReq+0x88>
 8005008:	e058      	b.n	80050bc <USBD_StdEPReq+0x120>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800500a:	065e      	lsls	r6, r3, #25
 800500c:	d102      	bne.n	8005014 <USBD_StdEPReq+0x78>
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
        }
        else
        {
          USBD_CtlError(pdev, req);
 800500e:	4611      	mov	r1, r2
 8005010:	4620      	mov	r0, r4
 8005012:	e053      	b.n	80050bc <USBD_StdEPReq+0x120>
      switch (pdev->dev_state)
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005014:	4619      	mov	r1, r3
 8005016:	f7fb fd51 	bl	8000abc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800501a:	2180      	movs	r1, #128	; 0x80
 800501c:	4620      	mov	r0, r4
 800501e:	f7fb fd4d 	bl	8000abc <USBD_LL_StallEP>
 8005022:	e04d      	b.n	80050c0 <USBD_StdEPReq+0x124>
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005024:	884a      	ldrh	r2, [r1, #2]
 8005026:	2a00      	cmp	r2, #0
 8005028:	d14a      	bne.n	80050c0 <USBD_StdEPReq+0x124>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800502a:	065d      	lsls	r5, r3, #25
 800502c:	d0e2      	beq.n	8004ff4 <USBD_StdEPReq+0x58>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800502e:	4619      	mov	r1, r3
 8005030:	f7fb fd52 	bl	8000ad8 <USBD_LL_ClearStallEP>
 8005034:	e7de      	b.n	8004ff4 <USBD_StdEPReq+0x58>
        break;
      }
      break;

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005036:	f890 6274 	ldrb.w	r6, [r0, #628]	; 0x274
 800503a:	2e02      	cmp	r6, #2
 800503c:	d002      	beq.n	8005044 <USBD_StdEPReq+0xa8>
 800503e:	2e03      	cmp	r6, #3
 8005040:	d00c      	beq.n	800505c <USBD_StdEPReq+0xc0>
 8005042:	e03b      	b.n	80050bc <USBD_StdEPReq+0x120>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005044:	0659      	lsls	r1, r3, #25
 8005046:	d1e2      	bne.n	800500e <USBD_StdEPReq+0x72>
        {
          USBD_CtlError(pdev, req);
          break;
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005048:	062b      	lsls	r3, r5, #24
 800504a:	bf4c      	ite	mi
 800504c:	f100 0114 	addmi.w	r1, r0, #20
 8005050:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;
 8005054:	2300      	movs	r3, #0
 8005056:	600b      	str	r3, [r1, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005058:	2202      	movs	r2, #2
 800505a:	e02b      	b.n	80050b4 <USBD_StdEPReq+0x118>
          break;

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800505c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005060:	f003 010f 	and.w	r1, r3, #15
 8005064:	f04f 0514 	mov.w	r5, #20
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005068:	fb05 0101 	mla	r1, r5, r1, r0

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800506c:	d008      	beq.n	8005080 <USBD_StdEPReq+0xe4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800506e:	6989      	ldr	r1, [r1, #24]
 8005070:	2900      	cmp	r1, #0
 8005072:	d0cc      	beq.n	800500e <USBD_StdEPReq+0x72>
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005078:	fb05 0502 	mla	r5, r5, r2, r0
 800507c:	3514      	adds	r5, #20
 800507e:	e009      	b.n	8005094 <USBD_StdEPReq+0xf8>
            break;
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005080:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
 8005084:	2900      	cmp	r1, #0
 8005086:	d0c2      	beq.n	800500e <USBD_StdEPReq+0x72>
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800508c:	fb05 0502 	mla	r5, r5, r2, r0
 8005090:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          &pdev->ep_out[ep_addr & 0x7FU];

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005094:	f013 027f 	ands.w	r2, r3, #127	; 0x7f
 8005098:	d101      	bne.n	800509e <USBD_StdEPReq+0x102>
          {
            pep->status = 0x0000U;
 800509a:	602a      	str	r2, [r5, #0]
 800509c:	e008      	b.n	80050b0 <USBD_StdEPReq+0x114>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800509e:	4619      	mov	r1, r3
 80050a0:	4620      	mov	r0, r4
 80050a2:	f7fb fd27 	bl	8000af4 <USBD_LL_IsStallEP>
 80050a6:	b110      	cbz	r0, 80050ae <USBD_StdEPReq+0x112>
          {
            pep->status = 0x0001U;
 80050a8:	2301      	movs	r3, #1
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	e000      	b.n	80050b0 <USBD_StdEPReq+0x114>
          }
          else
          {
            pep->status = 0x0000U;
 80050ae:	6028      	str	r0, [r5, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80050b0:	2202      	movs	r2, #2
 80050b2:	4629      	mov	r1, r5
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 f821 	bl	80050fc <USBD_CtlSendData>
          break;
 80050ba:	e001      	b.n	80050c0 <USBD_StdEPReq+0x124>
      break;
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 80050bc:	f7ff fe16 	bl	8004cec <USBD_CtlError>
    break;
  }

  return ret;
}
 80050c0:	2000      	movs	r0, #0
 80050c2:	bd70      	pop	{r4, r5, r6, pc}

080050c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80050c4:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80050c6:	b1c0      	cbz	r0, 80050fa <USBD_GetString+0x36>
 80050c8:	4605      	mov	r5, r0
 80050ca:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80050cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2c00      	cmp	r4, #0
 80050d4:	d1f9      	bne.n	80050ca <USBD_GetString+0x6>
{
  uint8_t idx = 0U;

  if (desc != NULL)
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80050d6:	3301      	adds	r3, #1
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80050dc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80050de:	2303      	movs	r3, #3
 80050e0:	704b      	strb	r3, [r1, #1]
 80050e2:	3801      	subs	r0, #1
 80050e4:	2302      	movs	r3, #2

    while (*desc != '\0')
 80050e6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80050ea:	b135      	cbz	r5, 80050fa <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 80050f2:	3302      	adds	r3, #2
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	548c      	strb	r4, [r1, r2]
 80050f8:	e7f5      	b.n	80050e6 <USBD_GetString+0x22>
 80050fa:	bd30      	pop	{r4, r5, pc}

080050fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80050fc:	b510      	push	{r4, lr}
 80050fe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005100:	2202      	movs	r2, #2
 8005102:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8005106:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005108:	460a      	mov	r2, r1
                                     uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800510a:	6203      	str	r3, [r0, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800510c:	2100      	movs	r1, #0
 800510e:	f7fb fd13 	bl	8000b38 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005112:	2000      	movs	r0, #0
 8005114:	bd10      	pop	{r4, pc}

08005116 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005116:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005118:	4613      	mov	r3, r2
 800511a:	460a      	mov	r2, r1
 800511c:	2100      	movs	r1, #0
 800511e:	f7fb fd0b 	bl	8000b38 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005122:	2000      	movs	r0, #0
 8005124:	bd08      	pop	{r3, pc}

08005126 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005126:	b510      	push	{r4, lr}
 8005128:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800512a:	2203      	movs	r2, #3
 800512c:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8005130:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005134:	460a      	mov	r2, r1
                                      uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8005136:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800513a:	2100      	movs	r1, #0
 800513c:	f7fb fd0a 	bl	8000b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005140:	2000      	movs	r0, #0
 8005142:	bd10      	pop	{r4, pc}

08005144 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005144:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005146:	4613      	mov	r3, r2
 8005148:	460a      	mov	r2, r1
 800514a:	2100      	movs	r1, #0
 800514c:	f7fb fd02 	bl	8000b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005150:	2000      	movs	r0, #0
 8005152:	bd08      	pop	{r3, pc}

08005154 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005154:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005156:	2304      	movs	r3, #4
 8005158:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800515c:	2300      	movs	r3, #0
 800515e:	461a      	mov	r2, r3
 8005160:	4619      	mov	r1, r3
 8005162:	f7fb fce9 	bl	8000b38 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005166:	2000      	movs	r0, #0
 8005168:	bd08      	pop	{r3, pc}

0800516a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800516a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800516c:	2305      	movs	r3, #5
 800516e:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005172:	2300      	movs	r3, #0
 8005174:	461a      	mov	r2, r3
 8005176:	4619      	mov	r1, r3
 8005178:	f7fb fcec 	bl	8000b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800517c:	2000      	movs	r0, #0
 800517e:	bd08      	pop	{r3, pc}

08005180 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005180:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005184:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005186:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800518a:	b15b      	cbz	r3, 80051a4 <USBD_CDC_EP0_RxReady+0x24>
 800518c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005190:	28ff      	cmp	r0, #255	; 0xff
 8005192:	d007      	beq.n	80051a4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800519a:	4621      	mov	r1, r4
 800519c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800519e:	23ff      	movs	r3, #255	; 0xff
 80051a0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80051a4:	2000      	movs	r0, #0
 80051a6:	bd10      	pop	{r4, pc}

080051a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80051a8:	2343      	movs	r3, #67	; 0x43
 80051aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80051ac:	4800      	ldr	r0, [pc, #0]	; (80051b0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80051ae:	4770      	bx	lr
 80051b0:	20000074 	.word	0x20000074

080051b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80051b4:	2343      	movs	r3, #67	; 0x43
 80051b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80051b8:	4800      	ldr	r0, [pc, #0]	; (80051bc <USBD_CDC_GetHSCfgDesc+0x8>)
 80051ba:	4770      	bx	lr
 80051bc:	20000140 	.word	0x20000140

080051c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80051c0:	2343      	movs	r3, #67	; 0x43
 80051c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80051c4:	4800      	ldr	r0, [pc, #0]	; (80051c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80051c6:	4770      	bx	lr
 80051c8:	200000fc 	.word	0x200000fc

080051cc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80051cc:	230a      	movs	r3, #10
 80051ce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80051d0:	4800      	ldr	r0, [pc, #0]	; (80051d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80051d2:	4770      	bx	lr
 80051d4:	200000f0 	.word	0x200000f0

080051d8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80051dc:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80051e0:	f7fb fcc6 	bl	8000b70 <USBD_LL_GetRxDataSize>

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80051e4:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80051e8:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80051ec:	b14b      	cbz	r3, 8005202 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051ee:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 80051f2:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80051fc:	4798      	blx	r3

    return USBD_OK;
 80051fe:	2000      	movs	r0, #0
 8005200:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8005202:	2002      	movs	r0, #2
  }
}
 8005204:	bd38      	pop	{r3, r4, r5, pc}

08005206 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005208:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  PCD_HandleTypeDef *hpcd = pdev->pData;

  if(pdev->pClassData != NULL)
 800520c:	b1d6      	cbz	r6, 8005244 <USBD_CDC_DataIn+0x3e>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800520e:	2214      	movs	r2, #20
 8005210:	fb02 0201 	mla	r2, r2, r1, r0
 8005214:	69d4      	ldr	r4, [r2, #28]
 8005216:	b18c      	cbz	r4, 800523c <USBD_CDC_DataIn+0x36>
 8005218:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 800521c:	271c      	movs	r7, #28
 800521e:	fb07 5301 	mla	r3, r7, r1, r5
 8005222:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8005224:	fbb4 f3f5 	udiv	r3, r4, r5
 8005228:	fb05 4413 	mls	r4, r5, r3, r4
 800522c:	b934      	cbnz	r4, 800523c <USBD_CDC_DataIn+0x36>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800522e:	61d4      	str	r4, [r2, #28]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005230:	4623      	mov	r3, r4
 8005232:	4622      	mov	r2, r4
 8005234:	f7fb fc80 	bl	8000b38 <USBD_LL_Transmit>
    }
    else
    {
      hcdc->TxState = 0U;
    }
    return USBD_OK;
 8005238:	4620      	mov	r0, r4
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800523a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
      hcdc->TxState = 0U;
 800523c:	2000      	movs	r0, #0
 800523e:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8005242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8005244:	2002      	movs	r0, #2
  }
}
 8005246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005248 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800524c:	780a      	ldrb	r2, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800524e:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8005252:	f04f 0800 	mov.w	r8, #0
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005256:	f012 0460 	ands.w	r4, r2, #96	; 0x60
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800525a:	4605      	mov	r5, r0
 800525c:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
 800525e:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8005262:	f8ad 8006 	strh.w	r8, [sp, #6]
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005266:	d026      	beq.n	80052b6 <USBD_CDC_Setup+0x6e>
 8005268:	2c20      	cmp	r4, #32
 800526a:	d147      	bne.n	80052fc <USBD_CDC_Setup+0xb4>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800526c:	88cc      	ldrh	r4, [r1, #6]
 800526e:	784b      	ldrb	r3, [r1, #1]
 8005270:	b1d4      	cbz	r4, 80052a8 <USBD_CDC_Setup+0x60>
    {
      if (req->bmRequest & 0x80U)
 8005272:	0612      	lsls	r2, r2, #24
 8005274:	d50d      	bpl.n	8005292 <USBD_CDC_Setup+0x4a>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005276:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800527a:	4639      	mov	r1, r7
 800527c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	4622      	mov	r2, r4
 8005284:	47c8      	blx	r9
                                                          (uint8_t *)(void *)hcdc->data,
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005286:	88f2      	ldrh	r2, [r6, #6]
 8005288:	4639      	mov	r1, r7
 800528a:	4628      	mov	r0, r5
 800528c:	f7ff ff36 	bl	80050fc <USBD_CtlSendData>
 8005290:	e008      	b.n	80052a4 <USBD_CDC_Setup+0x5c>
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8005292:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005296:	88cb      	ldrh	r3, [r1, #6]
 8005298:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201

        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800529c:	88ca      	ldrh	r2, [r1, #6]
 800529e:	4639      	mov	r1, r7
 80052a0:	f7ff ff41 	bl	8005126 <USBD_CtlPrepareRx>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80052a4:	4640      	mov	r0, r8
 80052a6:	e02c      	b.n	8005302 <USBD_CDC_Setup+0xba>
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052a8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80052ac:	4618      	mov	r0, r3
 80052ae:	6895      	ldr	r5, [r2, #8]
 80052b0:	4622      	mov	r2, r4
 80052b2:	47a8      	blx	r5
 80052b4:	e020      	b.n	80052f8 <USBD_CDC_Setup+0xb0>
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80052b6:	784f      	ldrb	r7, [r1, #1]
 80052b8:	2f0a      	cmp	r7, #10
 80052ba:	d014      	beq.n	80052e6 <USBD_CDC_Setup+0x9e>
 80052bc:	2f0b      	cmp	r7, #11
 80052be:	d00b      	beq.n	80052d8 <USBD_CDC_Setup+0x90>
 80052c0:	b9e7      	cbnz	r7, 80052fc <USBD_CDC_Setup+0xb4>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052c2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d10a      	bne.n	80052e0 <USBD_CDC_Setup+0x98>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80052ca:	2202      	movs	r2, #2
 80052cc:	f10d 0106 	add.w	r1, sp, #6
 80052d0:	f7ff ff14 	bl	80050fc <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80052d4:	4638      	mov	r0, r7
 80052d6:	e014      	b.n	8005302 <USBD_CDC_Setup+0xba>
			  ret = USBD_FAIL;
      }
      break;

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052d8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d00b      	beq.n	80052f8 <USBD_CDC_Setup+0xb0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	e00a      	b.n	80052fc <USBD_CDC_Setup+0xb4>
			  ret = USBD_FAIL;
      }
      break;

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d1f8      	bne.n	80052e0 <USBD_CDC_Setup+0x98>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80052ee:	2201      	movs	r2, #1
 80052f0:	f10d 0105 	add.w	r1, sp, #5
 80052f4:	f7ff ff02 	bl	80050fc <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80052f8:	4620      	mov	r0, r4
 80052fa:	e002      	b.n	8005302 <USBD_CDC_Setup+0xba>
      break;
    }
    break;

  default:
    USBD_CtlError (pdev, req);
 80052fc:	f7ff fcf6 	bl	8004cec <USBD_CtlError>
    ret = USBD_FAIL;
 8005300:	2002      	movs	r0, #2
    break;
  }

  return ret;
}
 8005302:	b003      	add	sp, #12
 8005304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005308 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4604      	mov	r4, r0
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800530c:	2500      	movs	r5, #0
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800530e:	2181      	movs	r1, #129	; 0x81
 8005310:	f7fb fbc6 	bl	8000aa0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005314:	2101      	movs	r1, #1
{
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005316:	62e5      	str	r5, [r4, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005318:	4620      	mov	r0, r4
 800531a:	f7fb fbc1 	bl	8000aa0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800531e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005322:	2182      	movs	r1, #130	; 0x82
 8005324:	4620      	mov	r0, r4
 8005326:	f7fb fbbb 	bl	8000aa0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800532a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800532e:	6425      	str	r5, [r4, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005330:	b14b      	cbz	r3, 8005346 <USBD_CDC_DeInit+0x3e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005332:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800533a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800533e:	f000 faa3 	bl	8005888 <free>
    pdev->pClassData = NULL;
 8005342:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
  }

  return ret;
}
 8005346:	2000      	movs	r0, #0
 8005348:	bd38      	pop	{r3, r4, r5, pc}

0800534a <USBD_CDC_Init>:
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800534a:	7c03      	ldrb	r3, [r0, #16]
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800534c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005350:	4604      	mov	r4, r0
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005352:	b953      	cbnz	r3, 800536a <USBD_CDC_Init+0x20>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005358:	2202      	movs	r2, #2
 800535a:	2181      	movs	r1, #129	; 0x81
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800535c:	2501      	movs	r5, #1
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800535e:	f7fb fb8f 	bl	8000a80 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005362:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005368:	e007      	b.n	800537a <USBD_CDC_Init+0x30>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800536a:	2340      	movs	r3, #64	; 0x40
 800536c:	2202      	movs	r2, #2
 800536e:	2181      	movs	r1, #129	; 0x81
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005370:	2501      	movs	r5, #1

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005372:	f7fb fb85 	bl	8000a80 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005376:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005378:	2340      	movs	r3, #64	; 0x40
 800537a:	4629      	mov	r1, r5
 800537c:	2202      	movs	r2, #2
 800537e:	4620      	mov	r0, r4
 8005380:	f7fb fb7e 	bl	8000a80 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005384:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005388:	2308      	movs	r3, #8
 800538a:	2203      	movs	r2, #3
 800538c:	2182      	movs	r1, #130	; 0x82
 800538e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005390:	2501      	movs	r5, #1
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005392:	f7fb fb75 	bl	8000a80 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005396:	6425      	str	r5, [r4, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005398:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800539c:	f000 fa6c 	bl	8005878 <malloc>
 80053a0:	4606      	mov	r6, r0
 80053a2:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80053a6:	b310      	cbz	r0, 80053ee <USBD_CDC_Init+0xa4>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80053a8:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
    hcdc->RxState = 0U;

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80053b0:	f894 8010 	ldrb.w	r8, [r4, #16]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80053b4:	2700      	movs	r7, #0
 80053b6:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80053ba:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80053be:	f1b8 0f00 	cmp.w	r8, #0
 80053c2:	d10a      	bne.n	80053da <USBD_CDC_Init+0x90>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053c8:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80053cc:	4629      	mov	r1, r5
 80053ce:	4620      	mov	r0, r4
 80053d0:	f7fb fbc0 	bl	8000b54 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 80053d4:	4640      	mov	r0, r8
 80053d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053da:	2340      	movs	r3, #64	; 0x40
 80053dc:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80053e0:	4629      	mov	r1, r5
 80053e2:	4620      	mov	r0, r4
 80053e4:	f7fb fbb6 	bl	8000b54 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 80053e8:	4638      	mov	r0, r7
 80053ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));

  if(pdev->pClassData == NULL)
  {
    ret = 1U;
 80053ee:	4628      	mov	r0, r5
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
}
 80053f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080053f4 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80053f4:	b119      	cbz	r1, 80053fe <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80053f6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80053fa:	2000      	movs	r0, #0
 80053fc:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80053fe:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;
  }

  return ret;
}
 8005400:	4770      	bx	lr

08005402 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005402:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005406:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->TxBuffer = pbuff;
 8005408:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800540c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8005410:	4770      	bx	lr

08005412 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005412:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8005416:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005418:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 800541c:	4770      	bx	lr

0800541e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800541e:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005422:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005424:	b162      	cbz	r2, 8005440 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005426:	7c04      	ldrb	r4, [r0, #16]
 8005428:	b914      	cbnz	r4, 8005430 <USBD_CDC_ReceivePacket+0x12>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800542a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800542e:	e000      	b.n	8005432 <USBD_CDC_ReceivePacket+0x14>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005430:	2340      	movs	r3, #64	; 0x40
 8005432:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005436:	2101      	movs	r1, #1
 8005438:	f7fb fb8c 	bl	8000b54 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800543c:	2000      	movs	r0, #0
 800543e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8005440:	2002      	movs	r0, #2
  }
}
 8005442:	bd10      	pop	{r4, pc}

08005444 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev>:
    timer_cb_t cb_;
};

template <typename tick_ty__,
          typename list_container__>
class timer_logic {
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8005446:	f8d0 3aa8 	ldr.w	r3, [r0, #2728]	; 0xaa8
 800544a:	4604      	mov	r4, r0
 800544c:	b123      	cbz	r3, 8005458 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0x14>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800544e:	f500 612a 	add.w	r1, r0, #2720	; 0xaa0
 8005452:	2203      	movs	r2, #3
 8005454:	4608      	mov	r0, r1
 8005456:	4798      	blx	r3
 8005458:	78a3      	ldrb	r3, [r4, #2]
        }

        if ( idle_ != NODE_NONE ) {
            narray_[idle_].prv_ = i;
        }
        n.prv_ = NODE_NONE;
 800545a:	f04f 0eff 	mov.w	lr, #255	; 0xff
        clear();
    }

    void clear() noexcept
    {
        for ( size_type i = super::head(); i != NODE_NONE; ) {
 800545e:	2bff      	cmp	r3, #255	; 0xff
 8005460:	d03d      	beq.n	80054de <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0x9a>
 8005462:	68a1      	ldr	r1, [r4, #8]
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 8005464:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8005468:	1988      	adds	r0, r1, r6
 800546a:	5d8d      	ldrb	r5, [r1, r6]
    }

    void dealloc_node( size_type i ) noexcept
    {
        auto& n = narray_[i];
        uassert( n.cur_ != NODE_NONE );
 800546c:	7882      	ldrb	r2, [r0, #2]
 800546e:	2aff      	cmp	r2, #255	; 0xff
 8005470:	d103      	bne.n	800547a <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0x36>
 8005472:	4b1c      	ldr	r3, [pc, #112]	; (80054e4 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0xa0>)
 8005474:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0xa4>)
 8005476:	216b      	movs	r1, #107	; 0x6b
 8005478:	e005      	b.n	8005486 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0x42>
        uassert( i >= 0 && i < capacity_ );
 800547a:	7862      	ldrb	r2, [r4, #1]
 800547c:	429a      	cmp	r2, r3
 800547e:	d805      	bhi.n	800548c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0x48>
 8005480:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0xa8>)
 8005482:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0xa4>)
 8005484:	216c      	movs	r1, #108	; 0x6c
 8005486:	481a      	ldr	r0, [pc, #104]	; (80054f0 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0xac>)
 8005488:	f000 f992 	bl	80057b0 <__assert_func>

        if ( n.nxt_ != NODE_NONE ) {
 800548c:	2dff      	cmp	r5, #255	; 0xff
            narray_[n.nxt_].prv_ = n.prv_;
 800548e:	bf1c      	itt	ne
 8005490:	eb05 0245 	addne.w	r2, r5, r5, lsl #1
 8005494:	1852      	addne	r2, r2, r1
 8005496:	7847      	ldrb	r7, [r0, #1]
 8005498:	bf14      	ite	ne
 800549a:	7057      	strbne	r7, [r2, #1]
        }
        else { // It's tail
            tail_ = n.prv_;
 800549c:	70e7      	strbeq	r7, [r4, #3]
        }

        if ( n.prv_ != NODE_NONE ) {
 800549e:	7842      	ldrb	r2, [r0, #1]
 80054a0:	f811 c006 	ldrb.w	ip, [r1, r6]
 80054a4:	2aff      	cmp	r2, #255	; 0xff
            narray_[n.prv_].nxt_ = n.nxt_;
 80054a6:	bf17      	itett	ne
 80054a8:	68a7      	ldrne	r7, [r4, #8]
        }
        else { // It's head
            head_ = n.nxt_;
 80054aa:	f884 c002 	strbeq.w	ip, [r4, #2]
        else { // It's tail
            tail_ = n.prv_;
        }

        if ( n.prv_ != NODE_NONE ) {
            narray_[n.prv_].nxt_ = n.nxt_;
 80054ae:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 80054b2:	f807 c002 	strbne.w	ip, [r7, r2]
        }
        else { // It's head
            head_ = n.nxt_;
        }

        if ( idle_ != NODE_NONE ) {
 80054b6:	7922      	ldrb	r2, [r4, #4]
 80054b8:	2aff      	cmp	r2, #255	; 0xff
            narray_[idle_].prv_ = i;
 80054ba:	bf1f      	itttt	ne
 80054bc:	68a7      	ldrne	r7, [r4, #8]
 80054be:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 80054c2:	19d2      	addne	r2, r2, r7
 80054c4:	7053      	strbne	r3, [r2, #1]
        }
        n.prv_ = NODE_NONE;
 80054c6:	f880 e001 	strb.w	lr, [r0, #1]
        n.cur_ = NODE_NONE;
 80054ca:	f880 e002 	strb.w	lr, [r0, #2]
        n.nxt_ = idle_;
 80054ce:	7922      	ldrb	r2, [r4, #4]
 80054d0:	558a      	strb	r2, [r1, r6]
        idle_  = i;
 80054d2:	7123      	strb	r3, [r4, #4]
        --size_;
 80054d4:	7823      	ldrb	r3, [r4, #0]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	7023      	strb	r3, [r4, #0]
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 80054da:	462b      	mov	r3, r5
 80054dc:	e7bf      	b.n	800545e <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEED1Ev+0x1a>
 80054de:	4620      	mov	r0, r4
 80054e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e2:	bf00      	nop
 80054e4:	08006dcf 	.word	0x08006dcf
 80054e8:	08006fe6 	.word	0x08006fe6
 80054ec:	08006e16 	.word	0x08006e16
 80054f0:	08006de3 	.word	0x08006de3

080054f4 <_ZZ8CommProcENUlT_E_4_FUNIPvEEDTcldtLS2_0Eclfp_EES_>:

upp::static_timer_logic<uint64_t, uint8_t, 100> hw_timer;

extern "C" void CommProc( void )
{
    hw_timer.add( 1600, NULL, []( auto ) { printf( "Hello, world!\n" ); } );
 80054f4:	4801      	ldr	r0, [pc, #4]	; (80054fc <_ZZ8CommProcENUlT_E_4_FUNIPvEEDTcldtLS2_0Eclfp_EES_+0x8>)
 80054f6:	f000 bdcb 	b.w	8006090 <puts>
 80054fa:	bf00      	nop
 80054fc:	08006e2e 	.word	0x08006e2e

08005500 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh>:
        idle_   = n.nxt_;
        ++size_;
        return n.cur_;
    }

    void insert_node( size_type i, size_type at ) noexcept
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
        node_type& n = narray_[i];
 8005502:	6884      	ldr	r4, [r0, #8]
 8005504:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8005508:	19a5      	adds	r5, r4, r6
        uassert( n.cur_ != NODE_NONE );
 800550a:	78ab      	ldrb	r3, [r5, #2]
 800550c:	2bff      	cmp	r3, #255	; 0xff
 800550e:	d103      	bne.n	8005518 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x18>
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x7c>)
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x80>)
 8005514:	214d      	movs	r1, #77	; 0x4d
 8005516:	e01b      	b.n	8005550 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x50>
        if ( at == NODE_NONE ) {
 8005518:	2aff      	cmp	r2, #255	; 0xff
 800551a:	d10c      	bne.n	8005536 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x36>
            n.nxt_ = NODE_NONE;
 800551c:	55a2      	strb	r2, [r4, r6]
            n.prv_ = tail_;
 800551e:	78c3      	ldrb	r3, [r0, #3]
 8005520:	706b      	strb	r3, [r5, #1]
            if ( tail_ != NODE_NONE ) {
 8005522:	78c3      	ldrb	r3, [r0, #3]
 8005524:	2bff      	cmp	r3, #255	; 0xff
                narray_[tail_].nxt_ = i;
 8005526:	bf1b      	ittet	ne
 8005528:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
 800552c:	6882      	ldrne	r2, [r0, #8]
            }
            else { // tail is empty == head is empty
                head_ = i;
 800552e:	7081      	strbeq	r1, [r0, #2]
        uassert( n.cur_ != NODE_NONE );
        if ( at == NODE_NONE ) {
            n.nxt_ = NODE_NONE;
            n.prv_ = tail_;
            if ( tail_ != NODE_NONE ) {
                narray_[tail_].nxt_ = i;
 8005530:	54d1      	strbne	r1, [r2, r3]
            }
            else { // tail is empty == head is empty
                head_ = i;
            }
            tail_ = i;
 8005532:	70c1      	strb	r1, [r0, #3]
 8005534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
        else {
            if ( at == head_ ) {
 8005536:	7883      	ldrb	r3, [r0, #2]
                head_ = i;
            }
            node_type& n_at = narray_[at];
 8005538:	eb02 0742 	add.w	r7, r2, r2, lsl #1
                head_ = i;
            }
            tail_ = i;
        }
        else {
            if ( at == head_ ) {
 800553c:	4293      	cmp	r3, r2
                head_ = i;
 800553e:	bf08      	it	eq
 8005540:	7081      	strbeq	r1, [r0, #2]
            }
            node_type& n_at = narray_[at];
 8005542:	19e0      	adds	r0, r4, r7
            uassert( n_at.cur_ != NODE_NONE );
 8005544:	7883      	ldrb	r3, [r0, #2]
 8005546:	2bff      	cmp	r3, #255	; 0xff
 8005548:	d105      	bne.n	8005556 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x56>
 800554a:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x84>)
 800554c:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x80>)
 800554e:	215e      	movs	r1, #94	; 0x5e
 8005550:	480d      	ldr	r0, [pc, #52]	; (8005588 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x88>)
 8005552:	f000 f92d 	bl	80057b0 <__assert_func>
            n.nxt_ = at;
 8005556:	55a2      	strb	r2, [r4, r6]
            n.prv_ = n_at.prv_;
 8005558:	7842      	ldrb	r2, [r0, #1]
 800555a:	706a      	strb	r2, [r5, #1]
            if ( n_at.prv_ != NODE_NONE ) {
 800555c:	7842      	ldrb	r2, [r0, #1]
 800555e:	2aff      	cmp	r2, #255	; 0xff
 8005560:	d00a      	beq.n	8005578 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x78>
    fslist_node<nty_>& next() { return by_( nxt_ ); }

private:
    fslist_node<nty_>& by_( int absolute )
    {
        uassert( nxt_ != NODE_NONE && prv_ != NODE_NONE );
 8005562:	5de4      	ldrb	r4, [r4, r7]
 8005564:	2cff      	cmp	r4, #255	; 0xff
 8005566:	d103      	bne.n	8005570 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x70>
 8005568:	4b08      	ldr	r3, [pc, #32]	; (800558c <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x8c>)
 800556a:	4a09      	ldr	r2, [pc, #36]	; (8005590 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x90>)
 800556c:	2122      	movs	r1, #34	; 0x22
 800556e:	e7ef      	b.n	8005550 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh+0x50>
            node_type& n_at = narray_[at];
            uassert( n_at.cur_ != NODE_NONE );
            n.nxt_ = at;
            n.prv_ = n_at.prv_;
            if ( n_at.prv_ != NODE_NONE ) {
                n_at.prev().nxt_ = i;
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005576:	54c1      	strb	r1, [r0, r3]
            }
            n_at.prv_ = i;
 8005578:	7041      	strb	r1, [r0, #1]
 800557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800557c:	08006dcf 	.word	0x08006dcf
 8005580:	08006ef8 	.word	0x08006ef8
 8005584:	08006e3c 	.word	0x08006e3c
 8005588:	08006de3 	.word	0x08006de3
 800558c:	08006e53 	.word	0x08006e53
 8005590:	08006d6e 	.word	0x08006d6e

08005594 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E>:
public:
    tick_fnc_type const& tick_function() const noexcept { return tick_; }
    template <class tick_fnc__>
    void tick_function( tick_fnc__&& v ) noexcept { tick_ = std::forward<tick_fnc__>( v ); }

    handle_type add( tick_type delay, void* obj, timer_cb_t callback ) noexcept
 8005594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005598:	461f      	mov	r7, r3
    {
        uassert( tick_ );
 800559a:	f8d1 3aa8 	ldr.w	r3, [r1, #2728]	; 0xaa8
public:
    tick_fnc_type const& tick_function() const noexcept { return tick_; }
    template <class tick_fnc__>
    void tick_function( tick_fnc__&& v ) noexcept { tick_ = std::forward<tick_fnc__>( v ); }

    handle_type add( tick_type delay, void* obj, timer_cb_t callback ) noexcept
 800559e:	4605      	mov	r5, r0
 80055a0:	460c      	mov	r4, r1
 80055a2:	4616      	mov	r6, r2
    {
        uassert( tick_ );
 80055a4:	b91b      	cbnz	r3, 80055ae <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x1a>
 80055a6:	4b37      	ldr	r3, [pc, #220]	; (8005684 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xf0>)
 80055a8:	4a37      	ldr	r2, [pc, #220]	; (8005688 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xf4>)
 80055aa:	212e      	movs	r1, #46	; 0x2e
 80055ac:	e006      	b.n	80055bc <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x28>
        uassert( capacity() );
 80055ae:	784a      	ldrb	r2, [r1, #1]
 80055b0:	780b      	ldrb	r3, [r1, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d105      	bne.n	80055c2 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x2e>
 80055b6:	4b35      	ldr	r3, [pc, #212]	; (800568c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xf8>)
 80055b8:	4a33      	ldr	r2, [pc, #204]	; (8005688 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xf4>)
 80055ba:	212f      	movs	r1, #47	; 0x2f
 80055bc:	4834      	ldr	r0, [pc, #208]	; (8005690 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xfc>)
 80055be:	f000 f8f7 	bl	80057b0 <__assert_func>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80055c2:	f8d1 3aac 	ldr.w	r3, [r1, #2732]	; 0xaac
 80055c6:	f501 602a 	add.w	r0, r1, #2720	; 0xaa0
 80055ca:	4798      	blx	r3

        desc_type d;
        d.trigger_at_ = delay + tick_();
        d.cb_         = callback;
        d.obj_        = obj;
        d.id_         = id_gen_++;
 80055cc:	f504 632b 	add.w	r3, r4, #2736	; 0xab0
 80055d0:	e9d3 8900 	ldrd	r8, r9, [r3]
    {
        uassert( tick_ );
        uassert( capacity() );

        desc_type d;
        d.trigger_at_ = delay + tick_();
 80055d4:	1836      	adds	r6, r6, r0
 80055d6:	414f      	adcs	r7, r1
        d.cb_         = callback;
        d.obj_        = obj;
        d.id_         = id_gen_++;
 80055d8:	f118 0001 	adds.w	r0, r8, #1
 80055dc:	f149 0100 	adc.w	r1, r9, #0
 80055e0:	e9c3 0100 	strd	r0, r1, [r3]
 80055e4:	78a2      	ldrb	r2, [r4, #2]
    fslist_const_iterator<dty_, nty_>& operator--() noexcept;
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
 80055e6:	2aff      	cmp	r2, #255	; 0xff
 80055e8:	d12b      	bne.n	8005642 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xae>
    }

    template <typename... ty__>
    iterator emplace( const_iterator pos, ty__&&... args ) noexcept
    {
        uassert( super::size() < super::max_size() );
 80055ea:	7821      	ldrb	r1, [r4, #0]
 80055ec:	7863      	ldrb	r3, [r4, #1]
 80055ee:	4299      	cmp	r1, r3
 80055f0:	d304      	bcc.n	80055fc <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x68>
 80055f2:	4b28      	ldr	r3, [pc, #160]	; (8005694 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x100>)
 80055f4:	4a28      	ldr	r2, [pc, #160]	; (8005698 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x104>)
 80055f6:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80055fa:	e02f      	b.n	800565c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xc8>
    }

    size_type alloc_node() noexcept
    {
        uassert( size_ < capacity_ );
        auto& n = narray_[idle_];
 80055fc:	7923      	ldrb	r3, [r4, #4]
 80055fe:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005602:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8005606:	eb0e 0100 	add.w	r1, lr, r0
        n.cur_  = idle_;
 800560a:	708b      	strb	r3, [r1, #2]
        idle_   = n.nxt_;
 800560c:	f81e 3000 	ldrb.w	r3, [lr, r0]
 8005610:	7123      	strb	r3, [r4, #4]
        ++size_;
 8005612:	7823      	ldrb	r3, [r4, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	7023      	strb	r3, [r4, #0]
        return n.cur_;
 8005618:	f891 a002 	ldrb.w	sl, [r1, #2]
    template <typename... ty__>
    iterator emplace( const_iterator pos, ty__&&... args ) noexcept
    {
        uassert( super::size() < super::max_size() );
        auto n = super::alloc_node();
        super::insert_node( n, pos.cur_ );
 800561c:	4620      	mov	r0, r4
 800561e:	4651      	mov	r1, sl
 8005620:	f7ff ff6e 	bl	8005500 <_ZN3upp4impl17fslist_alloc_baseIhE11insert_nodeEhh>

        new ( varray_ + n ) value_type( std::forward<ty__>( args )... );
 8005624:	68e3      	ldr	r3, [r4, #12]
 8005626:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 800562a:	eb13 01ca 	adds.w	r1, r3, sl, lsl #3
 800562e:	d023      	beq.n	8005678 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xe4>
 8005630:	9b08      	ldr	r3, [sp, #32]
 8005632:	610b      	str	r3, [r1, #16]
 8005634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005636:	614b      	str	r3, [r1, #20]
 8005638:	e9c1 8900 	strd	r8, r9, [r1]
 800563c:	e9c1 6702 	strd	r6, r7, [r1, #8]
 8005640:	e01a      	b.n	8005678 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xe4>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8005642:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005646:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800564a:	eb0e 0103 	add.w	r1, lr, r3
 800564e:	7889      	ldrb	r1, [r1, #2]
 8005650:	29ff      	cmp	r1, #255	; 0xff
 8005652:	d105      	bne.n	8005660 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0xcc>
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x108>)
 8005656:	4a12      	ldr	r2, [pc, #72]	; (80056a0 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x10c>)
 8005658:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800565c:	4811      	ldr	r0, [pc, #68]	; (80056a4 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x110>)
 800565e:	e7ae      	b.n	80055be <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x2a>

        auto at = std::find_if(
            node_.begin(), node_.end(),
            [&d]( auto& a ) { return d.trigger_at_ < a.trigger_at_; } );
 8005660:	68e1      	ldr	r1, [r4, #12]
 8005662:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
	      _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 8005666:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800566a:	428f      	cmp	r7, r1
 800566c:	bf08      	it	eq
 800566e:	4286      	cmpeq	r6, r0
 8005670:	d3bb      	bcc.n	80055ea <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x56>
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 8005672:	f81e 2003 	ldrb.w	r2, [lr, r3]
 8005676:	e7b6      	b.n	80055e6 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E+0x52>

        node_.insert( at, d );

        handle_type ret;
        ret.id_ = d.id_;
 8005678:	e9c5 8900 	strd	r8, r9, [r5]

        return ret;
    }
 800567c:	4628      	mov	r0, r5
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	bf00      	nop
 8005684:	08006e7a 	.word	0x08006e7a
 8005688:	080070a6 	.word	0x080070a6
 800568c:	08006eb1 	.word	0x08006eb1
 8005690:	08006e80 	.word	0x08006e80
 8005694:	08006ebc 	.word	0x08006ebc
 8005698:	08006b26 	.word	0x08006b26
 800569c:	08006ede 	.word	0x08006ede
 80056a0:	0800694c 	.word	0x0800694c
 80056a4:	08006de3 	.word	0x08006de3

080056a8 <CommProc>:
#include <uEmbedded-pp/static_timer_logic.hxx>

upp::static_timer_logic<uint64_t, uint8_t, 100> hw_timer;

extern "C" void CommProc( void )
{
 80056a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    hw_timer.add( 1600, NULL, []( auto ) { printf( "Hello, world!\n" ); } );
 80056aa:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <CommProc+0x20>)
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	2300      	movs	r3, #0
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80056b6:	2300      	movs	r3, #0
 80056b8:	4904      	ldr	r1, [pc, #16]	; (80056cc <CommProc+0x24>)
 80056ba:	a802      	add	r0, sp, #8
 80056bc:	f7ff ff6a 	bl	8005594 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj100EEEE3addEyPvPFvS6_E>
 80056c0:	b005      	add	sp, #20
 80056c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80056c6:	bf00      	nop
 80056c8:	080054f5 	.word	0x080054f5
 80056cc:	20004b10 	.word	0x20004b10

080056d0 <_GLOBAL__sub_I_hw_timer>:
    using size_type       = nty_;
    using difference_type = ptrdiff_t;
    using node_type       = fslist_node<size_type>;
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
 80056d0:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <_GLOBAL__sub_I_hw_timer+0x78>)
 80056d2:	2164      	movs	r1, #100	; 0x64
 80056d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d6:	2300      	movs	r3, #0
 80056d8:	7051      	strb	r1, [r2, #1]
 80056da:	f502 6017 	add.w	r0, r2, #2416	; 0x970
 80056de:	21ff      	movs	r1, #255	; 0xff
 80056e0:	7013      	strb	r3, [r2, #0]
 80056e2:	7091      	strb	r1, [r2, #2]
 80056e4:	70d1      	strb	r1, [r2, #3]
 80056e6:	7113      	strb	r3, [r2, #4]
 80056e8:	6090      	str	r0, [r2, #8]
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
            auto p  = narray_ + i;
 80056ea:	6897      	ldr	r7, [r2, #8]
 80056ec:	4816      	ldr	r0, [pc, #88]	; (8005748 <_GLOBAL__sub_I_hw_timer+0x78>)
 80056ee:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 80056f2:	197e      	adds	r6, r7, r5
 80056f4:	b2dc      	uxtb	r4, r3
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
 80056f6:	3301      	adds	r3, #1
            auto p  = narray_ + i;
            p->nxt_ = static_cast<size_type>( i + 1 );
 80056f8:	f104 0e01 	add.w	lr, r4, #1
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
 80056fc:	2b64      	cmp	r3, #100	; 0x64
            auto p  = narray_ + i;
            p->nxt_ = static_cast<size_type>( i + 1 );
            p->cur_ = NODE_NONE;
            p->prv_ = static_cast<size_type>( i - 1 );
 80056fe:	f104 34ff 	add.w	r4, r4, #4294967295
    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
            auto p  = narray_ + i;
            p->nxt_ = static_cast<size_type>( i + 1 );
 8005702:	f807 e005 	strb.w	lr, [r7, r5]
            p->cur_ = NODE_NONE;
 8005706:	f04f 05ff 	mov.w	r5, #255	; 0xff
 800570a:	70b1      	strb	r1, [r6, #2]
            p->prv_ = static_cast<size_type>( i - 1 );
 800570c:	7074      	strb	r4, [r6, #1]
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
 800570e:	d1ec      	bne.n	80056ea <_GLOBAL__sub_I_hw_timer+0x1a>
            auto p  = narray_ + i;
            p->nxt_ = static_cast<size_type>( i + 1 );
            p->cur_ = NODE_NONE;
            p->prv_ = static_cast<size_type>( i - 1 );
        }
        narray_[0].prv_             = NODE_NONE;
 8005710:	6883      	ldr	r3, [r0, #8]
 8005712:	705d      	strb	r5, [r3, #1]
        narray_[capacity_ - 1].nxt_ = NODE_NONE;
 8005714:	7841      	ldrb	r1, [r0, #1]
 8005716:	2203      	movs	r2, #3
 8005718:	f06f 0302 	mvn.w	r3, #2
 800571c:	fb12 3301 	smlabb	r3, r2, r1, r3
 8005720:	6882      	ldr	r2, [r0, #8]
#include <cmsis_os2.h>
#include <list>
#include <stdio.h>
#include <uEmbedded-pp/static_timer_logic.hxx>

upp::static_timer_logic<uint64_t, uint8_t, 100> hw_timer;
 8005722:	490a      	ldr	r1, [pc, #40]	; (800574c <_GLOBAL__sub_I_hw_timer+0x7c>)
 8005724:	54d5      	strb	r5, [r2, r3]
            i      = super::next( i );
            super::dealloc_node( k );
        }
    }

    fslist_base( size_type capacity, pointer varray, node_type* narray ) noexcept : super_type( capacity, narray ), varray_( varray )
 8005726:	f100 0310 	add.w	r3, r0, #16
 800572a:	60c3      	str	r3, [r0, #12]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 800572c:	2300      	movs	r3, #0
    timer_cb_t cb_;
};

template <typename tick_ty__,
          typename list_container__>
class timer_logic {
 800572e:	2400      	movs	r4, #0
 8005730:	2500      	movs	r5, #0
 8005732:	f8c0 3aa8 	str.w	r3, [r0, #2728]	; 0xaa8
 8005736:	f500 632b 	add.w	r3, r0, #2736	; 0xab0
 800573a:	e9c3 4500 	strd	r4, r5, [r3]
 800573e:	4a04      	ldr	r2, [pc, #16]	; (8005750 <_GLOBAL__sub_I_hw_timer+0x80>)

extern "C" void CommProc( void )
{
    hw_timer.add( 1600, NULL, []( auto ) { printf( "Hello, world!\n" ); } );
 8005740:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include <cmsis_os2.h>
#include <list>
#include <stdio.h>
#include <uEmbedded-pp/static_timer_logic.hxx>

upp::static_timer_logic<uint64_t, uint8_t, 100> hw_timer;
 8005744:	f000 b82f 	b.w	80057a6 <__aeabi_atexit>
 8005748:	20004b10 	.word	0x20004b10
 800574c:	08005445 	.word	0x08005445
 8005750:	20000000 	.word	0x20000000

08005754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800578c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005758:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800575a:	e003      	b.n	8005764 <LoopCopyDataInit>

0800575c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800575c:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800575e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005760:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005762:	3104      	adds	r1, #4

08005764 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005764:	480b      	ldr	r0, [pc, #44]	; (8005794 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005768:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800576a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800576c:	d3f6      	bcc.n	800575c <CopyDataInit>
  ldr  r2, =_sbss
 800576e:	4a0b      	ldr	r2, [pc, #44]	; (800579c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005770:	e002      	b.n	8005778 <LoopFillZerobss>

08005772 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005772:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005774:	f842 3b04 	str.w	r3, [r2], #4

08005778 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800577a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800577c:	d3f9      	bcc.n	8005772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800577e:	f7fd fc31 	bl	8002fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005782:	f000 f853 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005786:	f7fa ff6d 	bl	8000664 <main>
  bx  lr    
 800578a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800578c:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005790:	080074b4 	.word	0x080074b4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005794:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005798:	200001e8 	.word	0x200001e8
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800579c:	200001e8 	.word	0x200001e8
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057a0:	20006754 	.word	0x20006754

080057a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057a4:	e7fe      	b.n	80057a4 <ADC_IRQHandler>

080057a6 <__aeabi_atexit>:
 80057a6:	460b      	mov	r3, r1
 80057a8:	4601      	mov	r1, r0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 b81e 	b.w	80057ec <__cxa_atexit>

080057b0 <__assert_func>:
 80057b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057b2:	461c      	mov	r4, r3
 80057b4:	4b09      	ldr	r3, [pc, #36]	; (80057dc <__assert_func+0x2c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4605      	mov	r5, r0
 80057ba:	68d8      	ldr	r0, [r3, #12]
 80057bc:	b912      	cbnz	r2, 80057c4 <__assert_func+0x14>
 80057be:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <__assert_func+0x30>)
 80057c0:	461a      	mov	r2, r3
 80057c2:	e000      	b.n	80057c6 <__assert_func+0x16>
 80057c4:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <__assert_func+0x34>)
 80057c6:	9202      	str	r2, [sp, #8]
 80057c8:	e88d 000a 	stmia.w	sp, {r1, r3}
 80057cc:	4622      	mov	r2, r4
 80057ce:	462b      	mov	r3, r5
 80057d0:	4905      	ldr	r1, [pc, #20]	; (80057e8 <__assert_func+0x38>)
 80057d2:	f000 f819 	bl	8005808 <fiprintf>
 80057d6:	f000 fd35 	bl	8006244 <abort>
 80057da:	bf00      	nop
 80057dc:	200001e4 	.word	0x200001e4
 80057e0:	08007407 	.word	0x08007407
 80057e4:	080073cc 	.word	0x080073cc
 80057e8:	080073d9 	.word	0x080073d9

080057ec <__cxa_atexit>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	4c05      	ldr	r4, [pc, #20]	; (8005804 <__cxa_atexit+0x18>)
 80057f0:	4613      	mov	r3, r2
 80057f2:	b12c      	cbz	r4, 8005800 <__cxa_atexit+0x14>
 80057f4:	460a      	mov	r2, r1
 80057f6:	4601      	mov	r1, r0
 80057f8:	2002      	movs	r0, #2
 80057fa:	f3af 8000 	nop.w
 80057fe:	bd10      	pop	{r4, pc}
 8005800:	4620      	mov	r0, r4
 8005802:	bd10      	pop	{r4, pc}
 8005804:	00000000 	.word	0x00000000

08005808 <fiprintf>:
 8005808:	b40e      	push	{r1, r2, r3}
 800580a:	b503      	push	{r0, r1, lr}
 800580c:	4601      	mov	r1, r0
 800580e:	ab03      	add	r3, sp, #12
 8005810:	4805      	ldr	r0, [pc, #20]	; (8005828 <fiprintf+0x20>)
 8005812:	f853 2b04 	ldr.w	r2, [r3], #4
 8005816:	6800      	ldr	r0, [r0, #0]
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	f000 f927 	bl	8005a6c <_vfiprintf_r>
 800581e:	b002      	add	sp, #8
 8005820:	f85d eb04 	ldr.w	lr, [sp], #4
 8005824:	b003      	add	sp, #12
 8005826:	4770      	bx	lr
 8005828:	200001e4 	.word	0x200001e4

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <__libc_init_array+0x3c>)
 8005830:	4c0e      	ldr	r4, [pc, #56]	; (800586c <__libc_init_array+0x40>)
 8005832:	1ae4      	subs	r4, r4, r3
 8005834:	10a4      	asrs	r4, r4, #2
 8005836:	2500      	movs	r5, #0
 8005838:	461e      	mov	r6, r3
 800583a:	42a5      	cmp	r5, r4
 800583c:	d004      	beq.n	8005848 <__libc_init_array+0x1c>
 800583e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005842:	4798      	blx	r3
 8005844:	3501      	adds	r5, #1
 8005846:	e7f8      	b.n	800583a <__libc_init_array+0xe>
 8005848:	f001 f824 	bl	8006894 <_init>
 800584c:	4c08      	ldr	r4, [pc, #32]	; (8005870 <__libc_init_array+0x44>)
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <__libc_init_array+0x48>)
 8005850:	1ae4      	subs	r4, r4, r3
 8005852:	10a4      	asrs	r4, r4, #2
 8005854:	2500      	movs	r5, #0
 8005856:	461e      	mov	r6, r3
 8005858:	42a5      	cmp	r5, r4
 800585a:	d004      	beq.n	8005866 <__libc_init_array+0x3a>
 800585c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005860:	4798      	blx	r3
 8005862:	3501      	adds	r5, #1
 8005864:	e7f8      	b.n	8005858 <__libc_init_array+0x2c>
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	080074a8 	.word	0x080074a8
 800586c:	080074a8 	.word	0x080074a8
 8005870:	080074b0 	.word	0x080074b0
 8005874:	080074a8 	.word	0x080074a8

08005878 <malloc>:
 8005878:	4b02      	ldr	r3, [pc, #8]	; (8005884 <malloc+0xc>)
 800587a:	4601      	mov	r1, r0
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	f000 b86d 	b.w	800595c <_malloc_r>
 8005882:	bf00      	nop
 8005884:	200001e4 	.word	0x200001e4

08005888 <free>:
 8005888:	4b02      	ldr	r3, [pc, #8]	; (8005894 <free+0xc>)
 800588a:	4601      	mov	r1, r0
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	f000 b817 	b.w	80058c0 <_free_r>
 8005892:	bf00      	nop
 8005894:	200001e4 	.word	0x200001e4

08005898 <memcpy>:
 8005898:	b510      	push	{r4, lr}
 800589a:	1e43      	subs	r3, r0, #1
 800589c:	440a      	add	r2, r1
 800589e:	4291      	cmp	r1, r2
 80058a0:	d004      	beq.n	80058ac <memcpy+0x14>
 80058a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058aa:	e7f8      	b.n	800589e <memcpy+0x6>
 80058ac:	bd10      	pop	{r4, pc}

080058ae <memset>:
 80058ae:	4402      	add	r2, r0
 80058b0:	4603      	mov	r3, r0
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d002      	beq.n	80058bc <memset+0xe>
 80058b6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ba:	e7fa      	b.n	80058b2 <memset+0x4>
 80058bc:	4770      	bx	lr
	...

080058c0 <_free_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4605      	mov	r5, r0
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d046      	beq.n	8005956 <_free_r+0x96>
 80058c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058cc:	1f0c      	subs	r4, r1, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfb8      	it	lt
 80058d2:	18e4      	addlt	r4, r4, r3
 80058d4:	f000 fe9a 	bl	800660c <__malloc_lock>
 80058d8:	4a1f      	ldr	r2, [pc, #124]	; (8005958 <_free_r+0x98>)
 80058da:	6813      	ldr	r3, [r2, #0]
 80058dc:	4611      	mov	r1, r2
 80058de:	b913      	cbnz	r3, 80058e6 <_free_r+0x26>
 80058e0:	6063      	str	r3, [r4, #4]
 80058e2:	6014      	str	r4, [r2, #0]
 80058e4:	e032      	b.n	800594c <_free_r+0x8c>
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	d90e      	bls.n	8005908 <_free_r+0x48>
 80058ea:	6822      	ldr	r2, [r4, #0]
 80058ec:	18a0      	adds	r0, r4, r2
 80058ee:	4283      	cmp	r3, r0
 80058f0:	bf04      	itt	eq
 80058f2:	6818      	ldreq	r0, [r3, #0]
 80058f4:	685b      	ldreq	r3, [r3, #4]
 80058f6:	6063      	str	r3, [r4, #4]
 80058f8:	bf04      	itt	eq
 80058fa:	1812      	addeq	r2, r2, r0
 80058fc:	6022      	streq	r2, [r4, #0]
 80058fe:	600c      	str	r4, [r1, #0]
 8005900:	e024      	b.n	800594c <_free_r+0x8c>
 8005902:	42a2      	cmp	r2, r4
 8005904:	d803      	bhi.n	800590e <_free_r+0x4e>
 8005906:	4613      	mov	r3, r2
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	2a00      	cmp	r2, #0
 800590c:	d1f9      	bne.n	8005902 <_free_r+0x42>
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	1819      	adds	r1, r3, r0
 8005912:	42a1      	cmp	r1, r4
 8005914:	d10b      	bne.n	800592e <_free_r+0x6e>
 8005916:	6821      	ldr	r1, [r4, #0]
 8005918:	4401      	add	r1, r0
 800591a:	1858      	adds	r0, r3, r1
 800591c:	4282      	cmp	r2, r0
 800591e:	6019      	str	r1, [r3, #0]
 8005920:	d114      	bne.n	800594c <_free_r+0x8c>
 8005922:	6810      	ldr	r0, [r2, #0]
 8005924:	6852      	ldr	r2, [r2, #4]
 8005926:	605a      	str	r2, [r3, #4]
 8005928:	4401      	add	r1, r0
 800592a:	6019      	str	r1, [r3, #0]
 800592c:	e00e      	b.n	800594c <_free_r+0x8c>
 800592e:	d902      	bls.n	8005936 <_free_r+0x76>
 8005930:	230c      	movs	r3, #12
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	e00a      	b.n	800594c <_free_r+0x8c>
 8005936:	6821      	ldr	r1, [r4, #0]
 8005938:	1860      	adds	r0, r4, r1
 800593a:	4282      	cmp	r2, r0
 800593c:	bf04      	itt	eq
 800593e:	6810      	ldreq	r0, [r2, #0]
 8005940:	6852      	ldreq	r2, [r2, #4]
 8005942:	6062      	str	r2, [r4, #4]
 8005944:	bf04      	itt	eq
 8005946:	1809      	addeq	r1, r1, r0
 8005948:	6021      	streq	r1, [r4, #0]
 800594a:	605c      	str	r4, [r3, #4]
 800594c:	4628      	mov	r0, r5
 800594e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005952:	f000 be5c 	b.w	800660e <__malloc_unlock>
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	200055cc 	.word	0x200055cc

0800595c <_malloc_r>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	1ccd      	adds	r5, r1, #3
 8005960:	f025 0503 	bic.w	r5, r5, #3
 8005964:	3508      	adds	r5, #8
 8005966:	2d0c      	cmp	r5, #12
 8005968:	bf38      	it	cc
 800596a:	250c      	movcc	r5, #12
 800596c:	2d00      	cmp	r5, #0
 800596e:	4606      	mov	r6, r0
 8005970:	db01      	blt.n	8005976 <_malloc_r+0x1a>
 8005972:	42a9      	cmp	r1, r5
 8005974:	d902      	bls.n	800597c <_malloc_r+0x20>
 8005976:	230c      	movs	r3, #12
 8005978:	6033      	str	r3, [r6, #0]
 800597a:	e046      	b.n	8005a0a <_malloc_r+0xae>
 800597c:	f000 fe46 	bl	800660c <__malloc_lock>
 8005980:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <_malloc_r+0xb4>)
 8005982:	681c      	ldr	r4, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	4621      	mov	r1, r4
 8005988:	b1a1      	cbz	r1, 80059b4 <_malloc_r+0x58>
 800598a:	680b      	ldr	r3, [r1, #0]
 800598c:	1b5b      	subs	r3, r3, r5
 800598e:	d40e      	bmi.n	80059ae <_malloc_r+0x52>
 8005990:	2b0b      	cmp	r3, #11
 8005992:	d903      	bls.n	800599c <_malloc_r+0x40>
 8005994:	600b      	str	r3, [r1, #0]
 8005996:	18cc      	adds	r4, r1, r3
 8005998:	50cd      	str	r5, [r1, r3]
 800599a:	e01e      	b.n	80059da <_malloc_r+0x7e>
 800599c:	428c      	cmp	r4, r1
 800599e:	bf0d      	iteet	eq
 80059a0:	6863      	ldreq	r3, [r4, #4]
 80059a2:	684b      	ldrne	r3, [r1, #4]
 80059a4:	6063      	strne	r3, [r4, #4]
 80059a6:	6013      	streq	r3, [r2, #0]
 80059a8:	bf18      	it	ne
 80059aa:	460c      	movne	r4, r1
 80059ac:	e015      	b.n	80059da <_malloc_r+0x7e>
 80059ae:	460c      	mov	r4, r1
 80059b0:	6849      	ldr	r1, [r1, #4]
 80059b2:	e7e9      	b.n	8005988 <_malloc_r+0x2c>
 80059b4:	4c17      	ldr	r4, [pc, #92]	; (8005a14 <_malloc_r+0xb8>)
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	b91b      	cbnz	r3, 80059c2 <_malloc_r+0x66>
 80059ba:	4630      	mov	r0, r6
 80059bc:	f000 fb70 	bl	80060a0 <_sbrk_r>
 80059c0:	6020      	str	r0, [r4, #0]
 80059c2:	4629      	mov	r1, r5
 80059c4:	4630      	mov	r0, r6
 80059c6:	f000 fb6b 	bl	80060a0 <_sbrk_r>
 80059ca:	1c43      	adds	r3, r0, #1
 80059cc:	d018      	beq.n	8005a00 <_malloc_r+0xa4>
 80059ce:	1cc4      	adds	r4, r0, #3
 80059d0:	f024 0403 	bic.w	r4, r4, #3
 80059d4:	42a0      	cmp	r0, r4
 80059d6:	d10d      	bne.n	80059f4 <_malloc_r+0x98>
 80059d8:	6025      	str	r5, [r4, #0]
 80059da:	4630      	mov	r0, r6
 80059dc:	f000 fe17 	bl	800660e <__malloc_unlock>
 80059e0:	f104 000b 	add.w	r0, r4, #11
 80059e4:	1d23      	adds	r3, r4, #4
 80059e6:	f020 0007 	bic.w	r0, r0, #7
 80059ea:	1ac3      	subs	r3, r0, r3
 80059ec:	d00e      	beq.n	8005a0c <_malloc_r+0xb0>
 80059ee:	425a      	negs	r2, r3
 80059f0:	50e2      	str	r2, [r4, r3]
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	1a21      	subs	r1, r4, r0
 80059f6:	4630      	mov	r0, r6
 80059f8:	f000 fb52 	bl	80060a0 <_sbrk_r>
 80059fc:	3001      	adds	r0, #1
 80059fe:	d1eb      	bne.n	80059d8 <_malloc_r+0x7c>
 8005a00:	230c      	movs	r3, #12
 8005a02:	6033      	str	r3, [r6, #0]
 8005a04:	4630      	mov	r0, r6
 8005a06:	f000 fe02 	bl	800660e <__malloc_unlock>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
 8005a0e:	bf00      	nop
 8005a10:	200055cc 	.word	0x200055cc
 8005a14:	200055c8 	.word	0x200055c8

08005a18 <__sfputc_r>:
 8005a18:	6893      	ldr	r3, [r2, #8]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	b410      	push	{r4}
 8005a20:	6093      	str	r3, [r2, #8]
 8005a22:	da09      	bge.n	8005a38 <__sfputc_r+0x20>
 8005a24:	6994      	ldr	r4, [r2, #24]
 8005a26:	42a3      	cmp	r3, r4
 8005a28:	db02      	blt.n	8005a30 <__sfputc_r+0x18>
 8005a2a:	b2cb      	uxtb	r3, r1
 8005a2c:	2b0a      	cmp	r3, #10
 8005a2e:	d103      	bne.n	8005a38 <__sfputc_r+0x20>
 8005a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a34:	f000 bb44 	b.w	80060c0 <__swbuf_r>
 8005a38:	6813      	ldr	r3, [r2, #0]
 8005a3a:	1c58      	adds	r0, r3, #1
 8005a3c:	6010      	str	r0, [r2, #0]
 8005a3e:	7019      	strb	r1, [r3, #0]
 8005a40:	b2c8      	uxtb	r0, r1
 8005a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <__sfputs_r>:
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	460f      	mov	r7, r1
 8005a4e:	4614      	mov	r4, r2
 8005a50:	18d5      	adds	r5, r2, r3
 8005a52:	42ac      	cmp	r4, r5
 8005a54:	d008      	beq.n	8005a68 <__sfputs_r+0x20>
 8005a56:	463a      	mov	r2, r7
 8005a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f7ff ffdb 	bl	8005a18 <__sfputc_r>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d1f5      	bne.n	8005a52 <__sfputs_r+0xa>
 8005a66:	e000      	b.n	8005a6a <__sfputs_r+0x22>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a6c <_vfiprintf_r>:
 8005a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a70:	b09d      	sub	sp, #116	; 0x74
 8005a72:	460c      	mov	r4, r1
 8005a74:	4617      	mov	r7, r2
 8005a76:	9303      	str	r3, [sp, #12]
 8005a78:	4606      	mov	r6, r0
 8005a7a:	b118      	cbz	r0, 8005a84 <_vfiprintf_r+0x18>
 8005a7c:	6983      	ldr	r3, [r0, #24]
 8005a7e:	b90b      	cbnz	r3, 8005a84 <_vfiprintf_r+0x18>
 8005a80:	f000 fcda 	bl	8006438 <__sinit>
 8005a84:	4b7f      	ldr	r3, [pc, #508]	; (8005c84 <_vfiprintf_r+0x218>)
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d101      	bne.n	8005a8e <_vfiprintf_r+0x22>
 8005a8a:	6874      	ldr	r4, [r6, #4]
 8005a8c:	e008      	b.n	8005aa0 <_vfiprintf_r+0x34>
 8005a8e:	4b7e      	ldr	r3, [pc, #504]	; (8005c88 <_vfiprintf_r+0x21c>)
 8005a90:	429c      	cmp	r4, r3
 8005a92:	d101      	bne.n	8005a98 <_vfiprintf_r+0x2c>
 8005a94:	68b4      	ldr	r4, [r6, #8]
 8005a96:	e003      	b.n	8005aa0 <_vfiprintf_r+0x34>
 8005a98:	4b7c      	ldr	r3, [pc, #496]	; (8005c8c <_vfiprintf_r+0x220>)
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	bf08      	it	eq
 8005a9e:	68f4      	ldreq	r4, [r6, #12]
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	0718      	lsls	r0, r3, #28
 8005aa4:	d50c      	bpl.n	8005ac0 <_vfiprintf_r+0x54>
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	b153      	cbz	r3, 8005ac0 <_vfiprintf_r+0x54>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9309      	str	r3, [sp, #36]	; 0x24
 8005aae:	2320      	movs	r3, #32
 8005ab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ab4:	2330      	movs	r3, #48	; 0x30
 8005ab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aba:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8005c90 <_vfiprintf_r+0x224>
 8005abe:	e044      	b.n	8005b4a <_vfiprintf_r+0xde>
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f000 fb50 	bl	8006168 <__swsetup_r>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d0ee      	beq.n	8005aaa <_vfiprintf_r+0x3e>
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	e0d5      	b.n	8005c7e <_vfiprintf_r+0x212>
 8005ad2:	9a03      	ldr	r2, [sp, #12]
 8005ad4:	1d11      	adds	r1, r2, #4
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	9103      	str	r1, [sp, #12]
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	f280 808c 	bge.w	8005bf8 <_vfiprintf_r+0x18c>
 8005ae0:	4252      	negs	r2, r2
 8005ae2:	f043 0002 	orr.w	r0, r3, #2
 8005ae6:	9207      	str	r2, [sp, #28]
 8005ae8:	9004      	str	r0, [sp, #16]
 8005aea:	f898 3000 	ldrb.w	r3, [r8]
 8005aee:	2b2e      	cmp	r3, #46	; 0x2e
 8005af0:	f000 8084 	beq.w	8005bfc <_vfiprintf_r+0x190>
 8005af4:	2203      	movs	r2, #3
 8005af6:	f898 1000 	ldrb.w	r1, [r8]
 8005afa:	4865      	ldr	r0, [pc, #404]	; (8005c90 <_vfiprintf_r+0x224>)
 8005afc:	f7fa fb80 	bl	8000200 <memchr>
 8005b00:	b148      	cbz	r0, 8005b16 <_vfiprintf_r+0xaa>
 8005b02:	2340      	movs	r3, #64	; 0x40
 8005b04:	ebcb 0000 	rsb	r0, fp, r0
 8005b08:	fa03 f000 	lsl.w	r0, r3, r0
 8005b0c:	9b04      	ldr	r3, [sp, #16]
 8005b0e:	4318      	orrs	r0, r3
 8005b10:	9004      	str	r0, [sp, #16]
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	f898 1000 	ldrb.w	r1, [r8]
 8005b1a:	485e      	ldr	r0, [pc, #376]	; (8005c94 <_vfiprintf_r+0x228>)
 8005b1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b20:	2206      	movs	r2, #6
 8005b22:	f108 0701 	add.w	r7, r8, #1
 8005b26:	f7fa fb6b 	bl	8000200 <memchr>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	f000 8095 	beq.w	8005c5a <_vfiprintf_r+0x1ee>
 8005b30:	4b59      	ldr	r3, [pc, #356]	; (8005c98 <_vfiprintf_r+0x22c>)
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 8088 	bne.w	8005c48 <_vfiprintf_r+0x1dc>
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	3307      	adds	r3, #7
 8005b3c:	f023 0307 	bic.w	r3, r3, #7
 8005b40:	3308      	adds	r3, #8
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b46:	4453      	add	r3, sl
 8005b48:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4a:	46b8      	mov	r8, r7
 8005b4c:	4645      	mov	r5, r8
 8005b4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b52:	b91b      	cbnz	r3, 8005b5c <_vfiprintf_r+0xf0>
 8005b54:	ebb8 0907 	subs.w	r9, r8, r7
 8005b58:	d00f      	beq.n	8005b7a <_vfiprintf_r+0x10e>
 8005b5a:	e003      	b.n	8005b64 <_vfiprintf_r+0xf8>
 8005b5c:	2b25      	cmp	r3, #37	; 0x25
 8005b5e:	d0f9      	beq.n	8005b54 <_vfiprintf_r+0xe8>
 8005b60:	46a8      	mov	r8, r5
 8005b62:	e7f3      	b.n	8005b4c <_vfiprintf_r+0xe0>
 8005b64:	464b      	mov	r3, r9
 8005b66:	463a      	mov	r2, r7
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff ff6c 	bl	8005a48 <__sfputs_r>
 8005b70:	3001      	adds	r0, #1
 8005b72:	d07f      	beq.n	8005c74 <_vfiprintf_r+0x208>
 8005b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b76:	444b      	add	r3, r9
 8005b78:	9309      	str	r3, [sp, #36]	; 0x24
 8005b7a:	f898 3000 	ldrb.w	r3, [r8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d078      	beq.n	8005c74 <_vfiprintf_r+0x208>
 8005b82:	2300      	movs	r3, #0
 8005b84:	f04f 32ff 	mov.w	r2, #4294967295
 8005b88:	9304      	str	r3, [sp, #16]
 8005b8a:	9307      	str	r3, [sp, #28]
 8005b8c:	9205      	str	r2, [sp, #20]
 8005b8e:	9306      	str	r3, [sp, #24]
 8005b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b94:	931a      	str	r3, [sp, #104]	; 0x68
 8005b96:	2701      	movs	r7, #1
 8005b98:	2205      	movs	r2, #5
 8005b9a:	7829      	ldrb	r1, [r5, #0]
 8005b9c:	483f      	ldr	r0, [pc, #252]	; (8005c9c <_vfiprintf_r+0x230>)
 8005b9e:	f7fa fb2f 	bl	8000200 <memchr>
 8005ba2:	f105 0801 	add.w	r8, r5, #1
 8005ba6:	9b04      	ldr	r3, [sp, #16]
 8005ba8:	b138      	cbz	r0, 8005bba <_vfiprintf_r+0x14e>
 8005baa:	4a3c      	ldr	r2, [pc, #240]	; (8005c9c <_vfiprintf_r+0x230>)
 8005bac:	1a80      	subs	r0, r0, r2
 8005bae:	fa07 f000 	lsl.w	r0, r7, r0
 8005bb2:	4318      	orrs	r0, r3
 8005bb4:	9004      	str	r0, [sp, #16]
 8005bb6:	4645      	mov	r5, r8
 8005bb8:	e7ee      	b.n	8005b98 <_vfiprintf_r+0x12c>
 8005bba:	06d9      	lsls	r1, r3, #27
 8005bbc:	bf44      	itt	mi
 8005bbe:	2220      	movmi	r2, #32
 8005bc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bc4:	071a      	lsls	r2, r3, #28
 8005bc6:	bf44      	itt	mi
 8005bc8:	222b      	movmi	r2, #43	; 0x2b
 8005bca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bce:	782a      	ldrb	r2, [r5, #0]
 8005bd0:	2a2a      	cmp	r2, #42	; 0x2a
 8005bd2:	f43f af7e 	beq.w	8005ad2 <_vfiprintf_r+0x66>
 8005bd6:	9a07      	ldr	r2, [sp, #28]
 8005bd8:	2100      	movs	r1, #0
 8005bda:	200a      	movs	r0, #10
 8005bdc:	46a8      	mov	r8, r5
 8005bde:	3501      	adds	r5, #1
 8005be0:	f898 3000 	ldrb.w	r3, [r8]
 8005be4:	3b30      	subs	r3, #48	; 0x30
 8005be6:	2b09      	cmp	r3, #9
 8005be8:	d803      	bhi.n	8005bf2 <_vfiprintf_r+0x186>
 8005bea:	fb00 3202 	mla	r2, r0, r2, r3
 8005bee:	2101      	movs	r1, #1
 8005bf0:	e7f4      	b.n	8005bdc <_vfiprintf_r+0x170>
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	f43f af79 	beq.w	8005aea <_vfiprintf_r+0x7e>
 8005bf8:	9207      	str	r2, [sp, #28]
 8005bfa:	e776      	b.n	8005aea <_vfiprintf_r+0x7e>
 8005bfc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005c00:	2b2a      	cmp	r3, #42	; 0x2a
 8005c02:	d10b      	bne.n	8005c1c <_vfiprintf_r+0x1b0>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	1d1a      	adds	r2, r3, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	9203      	str	r2, [sp, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bfb8      	it	lt
 8005c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c14:	f108 0802 	add.w	r8, r8, #2
 8005c18:	9305      	str	r3, [sp, #20]
 8005c1a:	e76b      	b.n	8005af4 <_vfiprintf_r+0x88>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	9305      	str	r3, [sp, #20]
 8005c20:	f108 0001 	add.w	r0, r8, #1
 8005c24:	4619      	mov	r1, r3
 8005c26:	250a      	movs	r5, #10
 8005c28:	4680      	mov	r8, r0
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f898 2000 	ldrb.w	r2, [r8]
 8005c30:	3a30      	subs	r2, #48	; 0x30
 8005c32:	2a09      	cmp	r2, #9
 8005c34:	d803      	bhi.n	8005c3e <_vfiprintf_r+0x1d2>
 8005c36:	fb05 2101 	mla	r1, r5, r1, r2
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e7f4      	b.n	8005c28 <_vfiprintf_r+0x1bc>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f43f af58 	beq.w	8005af4 <_vfiprintf_r+0x88>
 8005c44:	9105      	str	r1, [sp, #20]
 8005c46:	e755      	b.n	8005af4 <_vfiprintf_r+0x88>
 8005c48:	ab03      	add	r3, sp, #12
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	4622      	mov	r2, r4
 8005c4e:	4b14      	ldr	r3, [pc, #80]	; (8005ca0 <_vfiprintf_r+0x234>)
 8005c50:	a904      	add	r1, sp, #16
 8005c52:	4630      	mov	r0, r6
 8005c54:	f3af 8000 	nop.w
 8005c58:	e007      	b.n	8005c6a <_vfiprintf_r+0x1fe>
 8005c5a:	ab03      	add	r3, sp, #12
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <_vfiprintf_r+0x234>)
 8005c62:	a904      	add	r1, sp, #16
 8005c64:	4630      	mov	r0, r6
 8005c66:	f000 f893 	bl	8005d90 <_printf_i>
 8005c6a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c6e:	4682      	mov	sl, r0
 8005c70:	f47f af68 	bne.w	8005b44 <_vfiprintf_r+0xd8>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	065b      	lsls	r3, r3, #25
 8005c78:	f53f af28 	bmi.w	8005acc <_vfiprintf_r+0x60>
 8005c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c7e:	b01d      	add	sp, #116	; 0x74
 8005c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c84:	08007440 	.word	0x08007440
 8005c88:	08007460 	.word	0x08007460
 8005c8c:	08007480 	.word	0x08007480
 8005c90:	08007412 	.word	0x08007412
 8005c94:	08007416 	.word	0x08007416
 8005c98:	00000000 	.word	0x00000000
 8005c9c:	0800740c 	.word	0x0800740c
 8005ca0:	08005a49 	.word	0x08005a49

08005ca4 <_printf_common>:
 8005ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca8:	4691      	mov	r9, r2
 8005caa:	461f      	mov	r7, r3
 8005cac:	690a      	ldr	r2, [r1, #16]
 8005cae:	688b      	ldr	r3, [r1, #8]
 8005cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	bfb8      	it	lt
 8005cb8:	4613      	movlt	r3, r2
 8005cba:	f8c9 3000 	str.w	r3, [r9]
 8005cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	b112      	cbz	r2, 8005cce <_printf_common+0x2a>
 8005cc8:	3301      	adds	r3, #1
 8005cca:	f8c9 3000 	str.w	r3, [r9]
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	0699      	lsls	r1, r3, #26
 8005cd2:	bf42      	ittt	mi
 8005cd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005cd8:	3302      	addmi	r3, #2
 8005cda:	f8c9 3000 	strmi.w	r3, [r9]
 8005cde:	6825      	ldr	r5, [r4, #0]
 8005ce0:	f015 0506 	ands.w	r5, r5, #6
 8005ce4:	d110      	bne.n	8005d08 <_printf_common+0x64>
 8005ce6:	f104 0a19 	add.w	sl, r4, #25
 8005cea:	e007      	b.n	8005cfc <_printf_common+0x58>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	47c0      	blx	r8
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d01a      	beq.n	8005d30 <_printf_common+0x8c>
 8005cfa:	3501      	adds	r5, #1
 8005cfc:	68e3      	ldr	r3, [r4, #12]
 8005cfe:	f8d9 2000 	ldr.w	r2, [r9]
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	429d      	cmp	r5, r3
 8005d06:	dbf1      	blt.n	8005cec <_printf_common+0x48>
 8005d08:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	3300      	adds	r3, #0
 8005d10:	bf18      	it	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	0692      	lsls	r2, r2, #26
 8005d16:	d50f      	bpl.n	8005d38 <_printf_common+0x94>
 8005d18:	18e1      	adds	r1, r4, r3
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	2030      	movs	r0, #48	; 0x30
 8005d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d22:	4422      	add	r2, r4
 8005d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	e003      	b.n	8005d38 <_printf_common+0x94>
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	4630      	mov	r0, r6
 8005d40:	47c0      	blx	r8
 8005d42:	3001      	adds	r0, #1
 8005d44:	d0f4      	beq.n	8005d30 <_printf_common+0x8c>
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	f8d9 5000 	ldr.w	r5, [r9]
 8005d4c:	68e3      	ldr	r3, [r4, #12]
 8005d4e:	f002 0206 	and.w	r2, r2, #6
 8005d52:	2a04      	cmp	r2, #4
 8005d54:	bf08      	it	eq
 8005d56:	1b5d      	subeq	r5, r3, r5
 8005d58:	6922      	ldr	r2, [r4, #16]
 8005d5a:	68a3      	ldr	r3, [r4, #8]
 8005d5c:	bf0c      	ite	eq
 8005d5e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d62:	2500      	movne	r5, #0
 8005d64:	4293      	cmp	r3, r2
 8005d66:	bfc4      	itt	gt
 8005d68:	1a9b      	subgt	r3, r3, r2
 8005d6a:	18ed      	addgt	r5, r5, r3
 8005d6c:	f04f 0900 	mov.w	r9, #0
 8005d70:	341a      	adds	r4, #26
 8005d72:	454d      	cmp	r5, r9
 8005d74:	d009      	beq.n	8005d8a <_printf_common+0xe6>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4622      	mov	r2, r4
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	47c0      	blx	r8
 8005d80:	3001      	adds	r0, #1
 8005d82:	d0d5      	beq.n	8005d30 <_printf_common+0x8c>
 8005d84:	f109 0901 	add.w	r9, r9, #1
 8005d88:	e7f3      	b.n	8005d72 <_printf_common+0xce>
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005d90 <_printf_i>:
 8005d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d94:	4617      	mov	r7, r2
 8005d96:	7e0a      	ldrb	r2, [r1, #24]
 8005d98:	b085      	sub	sp, #20
 8005d9a:	2a6e      	cmp	r2, #110	; 0x6e
 8005d9c:	4698      	mov	r8, r3
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460c      	mov	r4, r1
 8005da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005da4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005da8:	f000 80ae 	beq.w	8005f08 <_printf_i+0x178>
 8005dac:	d811      	bhi.n	8005dd2 <_printf_i+0x42>
 8005dae:	2a63      	cmp	r2, #99	; 0x63
 8005db0:	d022      	beq.n	8005df8 <_printf_i+0x68>
 8005db2:	d809      	bhi.n	8005dc8 <_printf_i+0x38>
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	f000 80bb 	beq.w	8005f30 <_printf_i+0x1a0>
 8005dba:	2a58      	cmp	r2, #88	; 0x58
 8005dbc:	f040 80ca 	bne.w	8005f54 <_printf_i+0x1c4>
 8005dc0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005dc4:	4983      	ldr	r1, [pc, #524]	; (8005fd4 <_printf_i+0x244>)
 8005dc6:	e055      	b.n	8005e74 <_printf_i+0xe4>
 8005dc8:	2a64      	cmp	r2, #100	; 0x64
 8005dca:	d01e      	beq.n	8005e0a <_printf_i+0x7a>
 8005dcc:	2a69      	cmp	r2, #105	; 0x69
 8005dce:	d01c      	beq.n	8005e0a <_printf_i+0x7a>
 8005dd0:	e0c0      	b.n	8005f54 <_printf_i+0x1c4>
 8005dd2:	2a73      	cmp	r2, #115	; 0x73
 8005dd4:	f000 80b0 	beq.w	8005f38 <_printf_i+0x1a8>
 8005dd8:	d809      	bhi.n	8005dee <_printf_i+0x5e>
 8005dda:	2a6f      	cmp	r2, #111	; 0x6f
 8005ddc:	d02e      	beq.n	8005e3c <_printf_i+0xac>
 8005dde:	2a70      	cmp	r2, #112	; 0x70
 8005de0:	f040 80b8 	bne.w	8005f54 <_printf_i+0x1c4>
 8005de4:	680a      	ldr	r2, [r1, #0]
 8005de6:	f042 0220 	orr.w	r2, r2, #32
 8005dea:	600a      	str	r2, [r1, #0]
 8005dec:	e03e      	b.n	8005e6c <_printf_i+0xdc>
 8005dee:	2a75      	cmp	r2, #117	; 0x75
 8005df0:	d024      	beq.n	8005e3c <_printf_i+0xac>
 8005df2:	2a78      	cmp	r2, #120	; 0x78
 8005df4:	d03a      	beq.n	8005e6c <_printf_i+0xdc>
 8005df6:	e0ad      	b.n	8005f54 <_printf_i+0x1c4>
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005dfe:	1d11      	adds	r1, r2, #4
 8005e00:	6019      	str	r1, [r3, #0]
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e08:	e0a8      	b.n	8005f5c <_printf_i+0x1cc>
 8005e0a:	6821      	ldr	r1, [r4, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005e12:	d002      	beq.n	8005e1a <_printf_i+0x8a>
 8005e14:	1d11      	adds	r1, r2, #4
 8005e16:	6019      	str	r1, [r3, #0]
 8005e18:	e008      	b.n	8005e2c <_printf_i+0x9c>
 8005e1a:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005e1e:	f102 0104 	add.w	r1, r2, #4
 8005e22:	6019      	str	r1, [r3, #0]
 8005e24:	d002      	beq.n	8005e2c <_printf_i+0x9c>
 8005e26:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005e2a:	e000      	b.n	8005e2e <_printf_i+0x9e>
 8005e2c:	6813      	ldr	r3, [r2, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	da3c      	bge.n	8005eac <_printf_i+0x11c>
 8005e32:	222d      	movs	r2, #45	; 0x2d
 8005e34:	425b      	negs	r3, r3
 8005e36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e3a:	e037      	b.n	8005eac <_printf_i+0x11c>
 8005e3c:	6821      	ldr	r1, [r4, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005e44:	d002      	beq.n	8005e4c <_printf_i+0xbc>
 8005e46:	1d11      	adds	r1, r2, #4
 8005e48:	6019      	str	r1, [r3, #0]
 8005e4a:	e007      	b.n	8005e5c <_printf_i+0xcc>
 8005e4c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005e50:	f102 0104 	add.w	r1, r2, #4
 8005e54:	6019      	str	r1, [r3, #0]
 8005e56:	d001      	beq.n	8005e5c <_printf_i+0xcc>
 8005e58:	8813      	ldrh	r3, [r2, #0]
 8005e5a:	e000      	b.n	8005e5e <_printf_i+0xce>
 8005e5c:	6813      	ldr	r3, [r2, #0]
 8005e5e:	7e22      	ldrb	r2, [r4, #24]
 8005e60:	495c      	ldr	r1, [pc, #368]	; (8005fd4 <_printf_i+0x244>)
 8005e62:	2a6f      	cmp	r2, #111	; 0x6f
 8005e64:	bf14      	ite	ne
 8005e66:	220a      	movne	r2, #10
 8005e68:	2208      	moveq	r2, #8
 8005e6a:	e01b      	b.n	8005ea4 <_printf_i+0x114>
 8005e6c:	2278      	movs	r2, #120	; 0x78
 8005e6e:	495a      	ldr	r1, [pc, #360]	; (8005fd8 <_printf_i+0x248>)
 8005e70:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005e74:	6822      	ldr	r2, [r4, #0]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e7c:	f100 0504 	add.w	r5, r0, #4
 8005e80:	601d      	str	r5, [r3, #0]
 8005e82:	d103      	bne.n	8005e8c <_printf_i+0xfc>
 8005e84:	0655      	lsls	r5, r2, #25
 8005e86:	d501      	bpl.n	8005e8c <_printf_i+0xfc>
 8005e88:	8803      	ldrh	r3, [r0, #0]
 8005e8a:	e000      	b.n	8005e8e <_printf_i+0xfe>
 8005e8c:	6803      	ldr	r3, [r0, #0]
 8005e8e:	07d0      	lsls	r0, r2, #31
 8005e90:	bf44      	itt	mi
 8005e92:	f042 0220 	orrmi.w	r2, r2, #32
 8005e96:	6022      	strmi	r2, [r4, #0]
 8005e98:	b91b      	cbnz	r3, 8005ea2 <_printf_i+0x112>
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	f022 0220 	bic.w	r2, r2, #32
 8005ea0:	6022      	str	r2, [r4, #0]
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005eaa:	e001      	b.n	8005eb0 <_printf_i+0x120>
 8005eac:	4949      	ldr	r1, [pc, #292]	; (8005fd4 <_printf_i+0x244>)
 8005eae:	220a      	movs	r2, #10
 8005eb0:	6865      	ldr	r5, [r4, #4]
 8005eb2:	60a5      	str	r5, [r4, #8]
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	db08      	blt.n	8005eca <_printf_i+0x13a>
 8005eb8:	6820      	ldr	r0, [r4, #0]
 8005eba:	f020 0004 	bic.w	r0, r0, #4
 8005ebe:	6020      	str	r0, [r4, #0]
 8005ec0:	b92b      	cbnz	r3, 8005ece <_printf_i+0x13e>
 8005ec2:	2d00      	cmp	r5, #0
 8005ec4:	d17d      	bne.n	8005fc2 <_printf_i+0x232>
 8005ec6:	4675      	mov	r5, lr
 8005ec8:	e00c      	b.n	8005ee4 <_printf_i+0x154>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d079      	beq.n	8005fc2 <_printf_i+0x232>
 8005ece:	4675      	mov	r5, lr
 8005ed0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ed4:	fb02 3310 	mls	r3, r2, r0, r3
 8005ed8:	5ccb      	ldrb	r3, [r1, r3]
 8005eda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d1f5      	bne.n	8005ed0 <_printf_i+0x140>
 8005ee4:	2a08      	cmp	r2, #8
 8005ee6:	d10b      	bne.n	8005f00 <_printf_i+0x170>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	07da      	lsls	r2, r3, #31
 8005eec:	d508      	bpl.n	8005f00 <_printf_i+0x170>
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	6862      	ldr	r2, [r4, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	bfde      	ittt	le
 8005ef6:	2330      	movle	r3, #48	; 0x30
 8005ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f00:	ebc5 030e 	rsb	r3, r5, lr
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	e02e      	b.n	8005f66 <_printf_i+0x1d6>
 8005f08:	6808      	ldr	r0, [r1, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	6949      	ldr	r1, [r1, #20]
 8005f0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005f12:	d003      	beq.n	8005f1c <_printf_i+0x18c>
 8005f14:	1d10      	adds	r0, r2, #4
 8005f16:	6018      	str	r0, [r3, #0]
 8005f18:	6813      	ldr	r3, [r2, #0]
 8005f1a:	e008      	b.n	8005f2e <_printf_i+0x19e>
 8005f1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f20:	f102 0004 	add.w	r0, r2, #4
 8005f24:	6018      	str	r0, [r3, #0]
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	d001      	beq.n	8005f2e <_printf_i+0x19e>
 8005f2a:	8019      	strh	r1, [r3, #0]
 8005f2c:	e000      	b.n	8005f30 <_printf_i+0x1a0>
 8005f2e:	6019      	str	r1, [r3, #0]
 8005f30:	2300      	movs	r3, #0
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	4675      	mov	r5, lr
 8005f36:	e016      	b.n	8005f66 <_printf_i+0x1d6>
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	1d11      	adds	r1, r2, #4
 8005f3c:	6019      	str	r1, [r3, #0]
 8005f3e:	6815      	ldr	r5, [r2, #0]
 8005f40:	6862      	ldr	r2, [r4, #4]
 8005f42:	2100      	movs	r1, #0
 8005f44:	4628      	mov	r0, r5
 8005f46:	f7fa f95b 	bl	8000200 <memchr>
 8005f4a:	b108      	cbz	r0, 8005f50 <_printf_i+0x1c0>
 8005f4c:	1b40      	subs	r0, r0, r5
 8005f4e:	6060      	str	r0, [r4, #4]
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	e004      	b.n	8005f5e <_printf_i+0x1ce>
 8005f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f58:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	6123      	str	r3, [r4, #16]
 8005f60:	2300      	movs	r3, #0
 8005f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f66:	f8cd 8000 	str.w	r8, [sp]
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	aa03      	add	r2, sp, #12
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4630      	mov	r0, r6
 8005f72:	f7ff fe97 	bl	8005ca4 <_printf_common>
 8005f76:	3001      	adds	r0, #1
 8005f78:	d102      	bne.n	8005f80 <_printf_i+0x1f0>
 8005f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7e:	e026      	b.n	8005fce <_printf_i+0x23e>
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	462a      	mov	r2, r5
 8005f84:	4639      	mov	r1, r7
 8005f86:	4630      	mov	r0, r6
 8005f88:	47c0      	blx	r8
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d0f5      	beq.n	8005f7a <_printf_i+0x1ea>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	079b      	lsls	r3, r3, #30
 8005f92:	d510      	bpl.n	8005fb6 <_printf_i+0x226>
 8005f94:	2500      	movs	r5, #0
 8005f96:	f104 0919 	add.w	r9, r4, #25
 8005f9a:	e007      	b.n	8005fac <_printf_i+0x21c>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	464a      	mov	r2, r9
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	47c0      	blx	r8
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d0e7      	beq.n	8005f7a <_printf_i+0x1ea>
 8005faa:	3501      	adds	r5, #1
 8005fac:	68e3      	ldr	r3, [r4, #12]
 8005fae:	9a03      	ldr	r2, [sp, #12]
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	429d      	cmp	r5, r3
 8005fb4:	dbf2      	blt.n	8005f9c <_printf_i+0x20c>
 8005fb6:	68e0      	ldr	r0, [r4, #12]
 8005fb8:	9b03      	ldr	r3, [sp, #12]
 8005fba:	4298      	cmp	r0, r3
 8005fbc:	bfb8      	it	lt
 8005fbe:	4618      	movlt	r0, r3
 8005fc0:	e005      	b.n	8005fce <_printf_i+0x23e>
 8005fc2:	780b      	ldrb	r3, [r1, #0]
 8005fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fcc:	e78a      	b.n	8005ee4 <_printf_i+0x154>
 8005fce:	b005      	add	sp, #20
 8005fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fd4:	0800741d 	.word	0x0800741d
 8005fd8:	0800742e 	.word	0x0800742e

08005fdc <_puts_r>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	460e      	mov	r6, r1
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	b118      	cbz	r0, 8005fec <_puts_r+0x10>
 8005fe4:	6983      	ldr	r3, [r0, #24]
 8005fe6:	b90b      	cbnz	r3, 8005fec <_puts_r+0x10>
 8005fe8:	f000 fa26 	bl	8006438 <__sinit>
 8005fec:	69ab      	ldr	r3, [r5, #24]
 8005fee:	68ac      	ldr	r4, [r5, #8]
 8005ff0:	b913      	cbnz	r3, 8005ff8 <_puts_r+0x1c>
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 fa20 	bl	8006438 <__sinit>
 8005ff8:	4b22      	ldr	r3, [pc, #136]	; (8006084 <_puts_r+0xa8>)
 8005ffa:	429c      	cmp	r4, r3
 8005ffc:	d101      	bne.n	8006002 <_puts_r+0x26>
 8005ffe:	686c      	ldr	r4, [r5, #4]
 8006000:	e008      	b.n	8006014 <_puts_r+0x38>
 8006002:	4b21      	ldr	r3, [pc, #132]	; (8006088 <_puts_r+0xac>)
 8006004:	429c      	cmp	r4, r3
 8006006:	d101      	bne.n	800600c <_puts_r+0x30>
 8006008:	68ac      	ldr	r4, [r5, #8]
 800600a:	e003      	b.n	8006014 <_puts_r+0x38>
 800600c:	4b1f      	ldr	r3, [pc, #124]	; (800608c <_puts_r+0xb0>)
 800600e:	429c      	cmp	r4, r3
 8006010:	bf08      	it	eq
 8006012:	68ec      	ldreq	r4, [r5, #12]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	071b      	lsls	r3, r3, #28
 8006018:	d501      	bpl.n	800601e <_puts_r+0x42>
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	b93b      	cbnz	r3, 800602e <_puts_r+0x52>
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f000 f8a1 	bl	8006168 <__swsetup_r>
 8006026:	b110      	cbz	r0, 800602e <_puts_r+0x52>
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	bd70      	pop	{r4, r5, r6, pc}
 800602e:	3e01      	subs	r6, #1
 8006030:	68a3      	ldr	r3, [r4, #8]
 8006032:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006036:	3b01      	subs	r3, #1
 8006038:	60a3      	str	r3, [r4, #8]
 800603a:	b191      	cbz	r1, 8006062 <_puts_r+0x86>
 800603c:	2b00      	cmp	r3, #0
 800603e:	da04      	bge.n	800604a <_puts_r+0x6e>
 8006040:	69a2      	ldr	r2, [r4, #24]
 8006042:	4293      	cmp	r3, r2
 8006044:	db06      	blt.n	8006054 <_puts_r+0x78>
 8006046:	290a      	cmp	r1, #10
 8006048:	d004      	beq.n	8006054 <_puts_r+0x78>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	6022      	str	r2, [r4, #0]
 8006050:	7019      	strb	r1, [r3, #0]
 8006052:	e7ed      	b.n	8006030 <_puts_r+0x54>
 8006054:	4622      	mov	r2, r4
 8006056:	4628      	mov	r0, r5
 8006058:	f000 f832 	bl	80060c0 <__swbuf_r>
 800605c:	3001      	adds	r0, #1
 800605e:	d1e7      	bne.n	8006030 <_puts_r+0x54>
 8006060:	e7e2      	b.n	8006028 <_puts_r+0x4c>
 8006062:	2b00      	cmp	r3, #0
 8006064:	da08      	bge.n	8006078 <_puts_r+0x9c>
 8006066:	4622      	mov	r2, r4
 8006068:	210a      	movs	r1, #10
 800606a:	4628      	mov	r0, r5
 800606c:	f000 f828 	bl	80060c0 <__swbuf_r>
 8006070:	3001      	adds	r0, #1
 8006072:	d0d9      	beq.n	8006028 <_puts_r+0x4c>
 8006074:	200a      	movs	r0, #10
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	200a      	movs	r0, #10
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	6022      	str	r2, [r4, #0]
 8006080:	7018      	strb	r0, [r3, #0]
 8006082:	bd70      	pop	{r4, r5, r6, pc}
 8006084:	08007440 	.word	0x08007440
 8006088:	08007460 	.word	0x08007460
 800608c:	08007480 	.word	0x08007480

08006090 <puts>:
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <puts+0xc>)
 8006092:	4601      	mov	r1, r0
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	f7ff bfa1 	b.w	8005fdc <_puts_r>
 800609a:	bf00      	nop
 800609c:	200001e4 	.word	0x200001e4

080060a0 <_sbrk_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4c06      	ldr	r4, [pc, #24]	; (80060bc <_sbrk_r+0x1c>)
 80060a4:	2300      	movs	r3, #0
 80060a6:	4605      	mov	r5, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	f000 fbda 	bl	8006864 <_sbrk>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_sbrk_r+0x1a>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_sbrk_r+0x1a>
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	20006750 	.word	0x20006750

080060c0 <__swbuf_r>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	460f      	mov	r7, r1
 80060c4:	4614      	mov	r4, r2
 80060c6:	4605      	mov	r5, r0
 80060c8:	b118      	cbz	r0, 80060d2 <__swbuf_r+0x12>
 80060ca:	6983      	ldr	r3, [r0, #24]
 80060cc:	b90b      	cbnz	r3, 80060d2 <__swbuf_r+0x12>
 80060ce:	f000 f9b3 	bl	8006438 <__sinit>
 80060d2:	4b22      	ldr	r3, [pc, #136]	; (800615c <__swbuf_r+0x9c>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d101      	bne.n	80060dc <__swbuf_r+0x1c>
 80060d8:	686c      	ldr	r4, [r5, #4]
 80060da:	e008      	b.n	80060ee <__swbuf_r+0x2e>
 80060dc:	4b20      	ldr	r3, [pc, #128]	; (8006160 <__swbuf_r+0xa0>)
 80060de:	429c      	cmp	r4, r3
 80060e0:	d101      	bne.n	80060e6 <__swbuf_r+0x26>
 80060e2:	68ac      	ldr	r4, [r5, #8]
 80060e4:	e003      	b.n	80060ee <__swbuf_r+0x2e>
 80060e6:	4b1f      	ldr	r3, [pc, #124]	; (8006164 <__swbuf_r+0xa4>)
 80060e8:	429c      	cmp	r4, r3
 80060ea:	bf08      	it	eq
 80060ec:	68ec      	ldreq	r4, [r5, #12]
 80060ee:	69a3      	ldr	r3, [r4, #24]
 80060f0:	60a3      	str	r3, [r4, #8]
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	071a      	lsls	r2, r3, #28
 80060f6:	d509      	bpl.n	800610c <__swbuf_r+0x4c>
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	b13b      	cbz	r3, 800610c <__swbuf_r+0x4c>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	6920      	ldr	r0, [r4, #16]
 8006100:	1a18      	subs	r0, r3, r0
 8006102:	6963      	ldr	r3, [r4, #20]
 8006104:	4298      	cmp	r0, r3
 8006106:	b2fe      	uxtb	r6, r7
 8006108:	db0f      	blt.n	800612a <__swbuf_r+0x6a>
 800610a:	e008      	b.n	800611e <__swbuf_r+0x5e>
 800610c:	4621      	mov	r1, r4
 800610e:	4628      	mov	r0, r5
 8006110:	f000 f82a 	bl	8006168 <__swsetup_r>
 8006114:	2800      	cmp	r0, #0
 8006116:	d0f1      	beq.n	80060fc <__swbuf_r+0x3c>
 8006118:	f04f 36ff 	mov.w	r6, #4294967295
 800611c:	e01b      	b.n	8006156 <__swbuf_r+0x96>
 800611e:	4621      	mov	r1, r4
 8006120:	4628      	mov	r0, r5
 8006122:	f000 f91f 	bl	8006364 <_fflush_r>
 8006126:	2800      	cmp	r0, #0
 8006128:	d1f6      	bne.n	8006118 <__swbuf_r+0x58>
 800612a:	68a3      	ldr	r3, [r4, #8]
 800612c:	3b01      	subs	r3, #1
 800612e:	60a3      	str	r3, [r4, #8]
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	6022      	str	r2, [r4, #0]
 8006136:	701f      	strb	r7, [r3, #0]
 8006138:	6963      	ldr	r3, [r4, #20]
 800613a:	3001      	adds	r0, #1
 800613c:	4298      	cmp	r0, r3
 800613e:	d004      	beq.n	800614a <__swbuf_r+0x8a>
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	07db      	lsls	r3, r3, #31
 8006144:	d507      	bpl.n	8006156 <__swbuf_r+0x96>
 8006146:	2e0a      	cmp	r6, #10
 8006148:	d105      	bne.n	8006156 <__swbuf_r+0x96>
 800614a:	4621      	mov	r1, r4
 800614c:	4628      	mov	r0, r5
 800614e:	f000 f909 	bl	8006364 <_fflush_r>
 8006152:	2800      	cmp	r0, #0
 8006154:	d1e0      	bne.n	8006118 <__swbuf_r+0x58>
 8006156:	4630      	mov	r0, r6
 8006158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800615a:	bf00      	nop
 800615c:	08007440 	.word	0x08007440
 8006160:	08007460 	.word	0x08007460
 8006164:	08007480 	.word	0x08007480

08006168 <__swsetup_r>:
 8006168:	4b32      	ldr	r3, [pc, #200]	; (8006234 <__swsetup_r+0xcc>)
 800616a:	b570      	push	{r4, r5, r6, lr}
 800616c:	681d      	ldr	r5, [r3, #0]
 800616e:	4606      	mov	r6, r0
 8006170:	460c      	mov	r4, r1
 8006172:	b125      	cbz	r5, 800617e <__swsetup_r+0x16>
 8006174:	69ab      	ldr	r3, [r5, #24]
 8006176:	b913      	cbnz	r3, 800617e <__swsetup_r+0x16>
 8006178:	4628      	mov	r0, r5
 800617a:	f000 f95d 	bl	8006438 <__sinit>
 800617e:	4b2e      	ldr	r3, [pc, #184]	; (8006238 <__swsetup_r+0xd0>)
 8006180:	429c      	cmp	r4, r3
 8006182:	d101      	bne.n	8006188 <__swsetup_r+0x20>
 8006184:	686c      	ldr	r4, [r5, #4]
 8006186:	e008      	b.n	800619a <__swsetup_r+0x32>
 8006188:	4b2c      	ldr	r3, [pc, #176]	; (800623c <__swsetup_r+0xd4>)
 800618a:	429c      	cmp	r4, r3
 800618c:	d101      	bne.n	8006192 <__swsetup_r+0x2a>
 800618e:	68ac      	ldr	r4, [r5, #8]
 8006190:	e003      	b.n	800619a <__swsetup_r+0x32>
 8006192:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <__swsetup_r+0xd8>)
 8006194:	429c      	cmp	r4, r3
 8006196:	bf08      	it	eq
 8006198:	68ec      	ldreq	r4, [r5, #12]
 800619a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619e:	b29a      	uxth	r2, r3
 80061a0:	0715      	lsls	r5, r2, #28
 80061a2:	d41d      	bmi.n	80061e0 <__swsetup_r+0x78>
 80061a4:	06d0      	lsls	r0, r2, #27
 80061a6:	d402      	bmi.n	80061ae <__swsetup_r+0x46>
 80061a8:	2209      	movs	r2, #9
 80061aa:	6032      	str	r2, [r6, #0]
 80061ac:	e03a      	b.n	8006224 <__swsetup_r+0xbc>
 80061ae:	0751      	lsls	r1, r2, #29
 80061b0:	d512      	bpl.n	80061d8 <__swsetup_r+0x70>
 80061b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061b4:	b141      	cbz	r1, 80061c8 <__swsetup_r+0x60>
 80061b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d002      	beq.n	80061c4 <__swsetup_r+0x5c>
 80061be:	4630      	mov	r0, r6
 80061c0:	f7ff fb7e 	bl	80058c0 <_free_r>
 80061c4:	2300      	movs	r3, #0
 80061c6:	6363      	str	r3, [r4, #52]	; 0x34
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	2300      	movs	r3, #0
 80061d2:	6063      	str	r3, [r4, #4]
 80061d4:	6923      	ldr	r3, [r4, #16]
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	f043 0308 	orr.w	r3, r3, #8
 80061de:	81a3      	strh	r3, [r4, #12]
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	b94b      	cbnz	r3, 80061f8 <__swsetup_r+0x90>
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ee:	d003      	beq.n	80061f8 <__swsetup_r+0x90>
 80061f0:	4621      	mov	r1, r4
 80061f2:	4630      	mov	r0, r6
 80061f4:	f000 f9ce 	bl	8006594 <__smakebuf_r>
 80061f8:	89a2      	ldrh	r2, [r4, #12]
 80061fa:	f012 0301 	ands.w	r3, r2, #1
 80061fe:	d005      	beq.n	800620c <__swsetup_r+0xa4>
 8006200:	2300      	movs	r3, #0
 8006202:	60a3      	str	r3, [r4, #8]
 8006204:	6963      	ldr	r3, [r4, #20]
 8006206:	425b      	negs	r3, r3
 8006208:	61a3      	str	r3, [r4, #24]
 800620a:	e003      	b.n	8006214 <__swsetup_r+0xac>
 800620c:	0792      	lsls	r2, r2, #30
 800620e:	bf58      	it	pl
 8006210:	6963      	ldrpl	r3, [r4, #20]
 8006212:	60a3      	str	r3, [r4, #8]
 8006214:	6923      	ldr	r3, [r4, #16]
 8006216:	b95b      	cbnz	r3, 8006230 <__swsetup_r+0xc8>
 8006218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800621c:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8006220:	b280      	uxth	r0, r0
 8006222:	b130      	cbz	r0, 8006232 <__swsetup_r+0xca>
 8006224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	f04f 30ff 	mov.w	r0, #4294967295
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	2000      	movs	r0, #0
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	200001e4 	.word	0x200001e4
 8006238:	08007440 	.word	0x08007440
 800623c:	08007460 	.word	0x08007460
 8006240:	08007480 	.word	0x08007480

08006244 <abort>:
 8006244:	b508      	push	{r3, lr}
 8006246:	2006      	movs	r0, #6
 8006248:	f000 fa0c 	bl	8006664 <raise>
 800624c:	2001      	movs	r0, #1
 800624e:	f000 fb1f 	bl	8006890 <_exit>
	...

08006254 <__sflush_r>:
 8006254:	898a      	ldrh	r2, [r1, #12]
 8006256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800625a:	4605      	mov	r5, r0
 800625c:	0710      	lsls	r0, r2, #28
 800625e:	460c      	mov	r4, r1
 8006260:	d459      	bmi.n	8006316 <__sflush_r+0xc2>
 8006262:	684b      	ldr	r3, [r1, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	dc02      	bgt.n	800626e <__sflush_r+0x1a>
 8006268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	dd17      	ble.n	800629e <__sflush_r+0x4a>
 800626e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006270:	b1ae      	cbz	r6, 800629e <__sflush_r+0x4a>
 8006272:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006276:	2300      	movs	r3, #0
 8006278:	b292      	uxth	r2, r2
 800627a:	682f      	ldr	r7, [r5, #0]
 800627c:	602b      	str	r3, [r5, #0]
 800627e:	b10a      	cbz	r2, 8006284 <__sflush_r+0x30>
 8006280:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006282:	e015      	b.n	80062b0 <__sflush_r+0x5c>
 8006284:	6a21      	ldr	r1, [r4, #32]
 8006286:	2301      	movs	r3, #1
 8006288:	4628      	mov	r0, r5
 800628a:	47b0      	blx	r6
 800628c:	1c41      	adds	r1, r0, #1
 800628e:	d10f      	bne.n	80062b0 <__sflush_r+0x5c>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	b16b      	cbz	r3, 80062b0 <__sflush_r+0x5c>
 8006294:	2b1d      	cmp	r3, #29
 8006296:	d001      	beq.n	800629c <__sflush_r+0x48>
 8006298:	2b16      	cmp	r3, #22
 800629a:	d103      	bne.n	80062a4 <__sflush_r+0x50>
 800629c:	602f      	str	r7, [r5, #0]
 800629e:	2000      	movs	r0, #0
 80062a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	075a      	lsls	r2, r3, #29
 80062b4:	d505      	bpl.n	80062c2 <__sflush_r+0x6e>
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	1ac0      	subs	r0, r0, r3
 80062ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062bc:	b10b      	cbz	r3, 80062c2 <__sflush_r+0x6e>
 80062be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062c0:	1ac0      	subs	r0, r0, r3
 80062c2:	2300      	movs	r3, #0
 80062c4:	4602      	mov	r2, r0
 80062c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062c8:	6a21      	ldr	r1, [r4, #32]
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b0      	blx	r6
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	d106      	bne.n	80062e2 <__sflush_r+0x8e>
 80062d4:	6829      	ldr	r1, [r5, #0]
 80062d6:	291d      	cmp	r1, #29
 80062d8:	d83a      	bhi.n	8006350 <__sflush_r+0xfc>
 80062da:	4a21      	ldr	r2, [pc, #132]	; (8006360 <__sflush_r+0x10c>)
 80062dc:	40ca      	lsrs	r2, r1
 80062de:	07d6      	lsls	r6, r2, #31
 80062e0:	d536      	bpl.n	8006350 <__sflush_r+0xfc>
 80062e2:	2200      	movs	r2, #0
 80062e4:	6062      	str	r2, [r4, #4]
 80062e6:	04d9      	lsls	r1, r3, #19
 80062e8:	6922      	ldr	r2, [r4, #16]
 80062ea:	6022      	str	r2, [r4, #0]
 80062ec:	d504      	bpl.n	80062f8 <__sflush_r+0xa4>
 80062ee:	1c42      	adds	r2, r0, #1
 80062f0:	d101      	bne.n	80062f6 <__sflush_r+0xa2>
 80062f2:	682b      	ldr	r3, [r5, #0]
 80062f4:	b903      	cbnz	r3, 80062f8 <__sflush_r+0xa4>
 80062f6:	6560      	str	r0, [r4, #84]	; 0x54
 80062f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062fa:	602f      	str	r7, [r5, #0]
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d0ce      	beq.n	800629e <__sflush_r+0x4a>
 8006300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006304:	4299      	cmp	r1, r3
 8006306:	d002      	beq.n	800630e <__sflush_r+0xba>
 8006308:	4628      	mov	r0, r5
 800630a:	f7ff fad9 	bl	80058c0 <_free_r>
 800630e:	2000      	movs	r0, #0
 8006310:	6360      	str	r0, [r4, #52]	; 0x34
 8006312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006316:	690f      	ldr	r7, [r1, #16]
 8006318:	2f00      	cmp	r7, #0
 800631a:	d0c0      	beq.n	800629e <__sflush_r+0x4a>
 800631c:	0793      	lsls	r3, r2, #30
 800631e:	680e      	ldr	r6, [r1, #0]
 8006320:	bf08      	it	eq
 8006322:	694b      	ldreq	r3, [r1, #20]
 8006324:	600f      	str	r7, [r1, #0]
 8006326:	bf18      	it	ne
 8006328:	2300      	movne	r3, #0
 800632a:	ebc7 0806 	rsb	r8, r7, r6
 800632e:	608b      	str	r3, [r1, #8]
 8006330:	e002      	b.n	8006338 <__sflush_r+0xe4>
 8006332:	4407      	add	r7, r0
 8006334:	ebc0 0808 	rsb	r8, r0, r8
 8006338:	f1b8 0f00 	cmp.w	r8, #0
 800633c:	ddaf      	ble.n	800629e <__sflush_r+0x4a>
 800633e:	4643      	mov	r3, r8
 8006340:	463a      	mov	r2, r7
 8006342:	6a21      	ldr	r1, [r4, #32]
 8006344:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006346:	4628      	mov	r0, r5
 8006348:	47b0      	blx	r6
 800634a:	2800      	cmp	r0, #0
 800634c:	dcf1      	bgt.n	8006332 <__sflush_r+0xde>
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	f04f 30ff 	mov.w	r0, #4294967295
 800635a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800635e:	bf00      	nop
 8006360:	20400001 	.word	0x20400001

08006364 <_fflush_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	690b      	ldr	r3, [r1, #16]
 8006368:	4605      	mov	r5, r0
 800636a:	460c      	mov	r4, r1
 800636c:	b1db      	cbz	r3, 80063a6 <_fflush_r+0x42>
 800636e:	b118      	cbz	r0, 8006378 <_fflush_r+0x14>
 8006370:	6983      	ldr	r3, [r0, #24]
 8006372:	b90b      	cbnz	r3, 8006378 <_fflush_r+0x14>
 8006374:	f000 f860 	bl	8006438 <__sinit>
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <_fflush_r+0x48>)
 800637a:	429c      	cmp	r4, r3
 800637c:	d101      	bne.n	8006382 <_fflush_r+0x1e>
 800637e:	686c      	ldr	r4, [r5, #4]
 8006380:	e008      	b.n	8006394 <_fflush_r+0x30>
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <_fflush_r+0x4c>)
 8006384:	429c      	cmp	r4, r3
 8006386:	d101      	bne.n	800638c <_fflush_r+0x28>
 8006388:	68ac      	ldr	r4, [r5, #8]
 800638a:	e003      	b.n	8006394 <_fflush_r+0x30>
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <_fflush_r+0x50>)
 800638e:	429c      	cmp	r4, r3
 8006390:	bf08      	it	eq
 8006392:	68ec      	ldreq	r4, [r5, #12]
 8006394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006398:	b12b      	cbz	r3, 80063a6 <_fflush_r+0x42>
 800639a:	4621      	mov	r1, r4
 800639c:	4628      	mov	r0, r5
 800639e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063a2:	f7ff bf57 	b.w	8006254 <__sflush_r>
 80063a6:	2000      	movs	r0, #0
 80063a8:	bd38      	pop	{r3, r4, r5, pc}
 80063aa:	bf00      	nop
 80063ac:	08007440 	.word	0x08007440
 80063b0:	08007460 	.word	0x08007460
 80063b4:	08007480 	.word	0x08007480

080063b8 <_cleanup_r>:
 80063b8:	4901      	ldr	r1, [pc, #4]	; (80063c0 <_cleanup_r+0x8>)
 80063ba:	f000 b8a9 	b.w	8006510 <_fwalk_reent>
 80063be:	bf00      	nop
 80063c0:	08006365 	.word	0x08006365

080063c4 <std.isra.0>:
 80063c4:	2300      	movs	r3, #0
 80063c6:	b510      	push	{r4, lr}
 80063c8:	4604      	mov	r4, r0
 80063ca:	6003      	str	r3, [r0, #0]
 80063cc:	6043      	str	r3, [r0, #4]
 80063ce:	6083      	str	r3, [r0, #8]
 80063d0:	8181      	strh	r1, [r0, #12]
 80063d2:	6643      	str	r3, [r0, #100]	; 0x64
 80063d4:	81c2      	strh	r2, [r0, #14]
 80063d6:	6103      	str	r3, [r0, #16]
 80063d8:	6143      	str	r3, [r0, #20]
 80063da:	6183      	str	r3, [r0, #24]
 80063dc:	4619      	mov	r1, r3
 80063de:	2208      	movs	r2, #8
 80063e0:	305c      	adds	r0, #92	; 0x5c
 80063e2:	f7ff fa64 	bl	80058ae <memset>
 80063e6:	4b05      	ldr	r3, [pc, #20]	; (80063fc <std.isra.0+0x38>)
 80063e8:	6263      	str	r3, [r4, #36]	; 0x24
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <std.isra.0+0x3c>)
 80063ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <std.isra.0+0x40>)
 80063f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <std.isra.0+0x44>)
 80063f4:	6224      	str	r4, [r4, #32]
 80063f6:	6323      	str	r3, [r4, #48]	; 0x30
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	bf00      	nop
 80063fc:	0800669d 	.word	0x0800669d
 8006400:	080066bf 	.word	0x080066bf
 8006404:	080066f7 	.word	0x080066f7
 8006408:	0800671b 	.word	0x0800671b

0800640c <__sfmoreglue>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	2368      	movs	r3, #104	; 0x68
 8006410:	1e4d      	subs	r5, r1, #1
 8006412:	435d      	muls	r5, r3
 8006414:	460e      	mov	r6, r1
 8006416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800641a:	f7ff fa9f 	bl	800595c <_malloc_r>
 800641e:	4604      	mov	r4, r0
 8006420:	b140      	cbz	r0, 8006434 <__sfmoreglue+0x28>
 8006422:	2100      	movs	r1, #0
 8006424:	e880 0042 	stmia.w	r0, {r1, r6}
 8006428:	300c      	adds	r0, #12
 800642a:	60a0      	str	r0, [r4, #8]
 800642c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006430:	f7ff fa3d 	bl	80058ae <memset>
 8006434:	4620      	mov	r0, r4
 8006436:	bd70      	pop	{r4, r5, r6, pc}

08006438 <__sinit>:
 8006438:	6983      	ldr	r3, [r0, #24]
 800643a:	b510      	push	{r4, lr}
 800643c:	4604      	mov	r4, r0
 800643e:	bb33      	cbnz	r3, 800648e <__sinit+0x56>
 8006440:	6483      	str	r3, [r0, #72]	; 0x48
 8006442:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006444:	6503      	str	r3, [r0, #80]	; 0x50
 8006446:	4b12      	ldr	r3, [pc, #72]	; (8006490 <__sinit+0x58>)
 8006448:	4a12      	ldr	r2, [pc, #72]	; (8006494 <__sinit+0x5c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6282      	str	r2, [r0, #40]	; 0x28
 800644e:	4298      	cmp	r0, r3
 8006450:	bf04      	itt	eq
 8006452:	2301      	moveq	r3, #1
 8006454:	6183      	streq	r3, [r0, #24]
 8006456:	f000 f81f 	bl	8006498 <__sfp>
 800645a:	6060      	str	r0, [r4, #4]
 800645c:	4620      	mov	r0, r4
 800645e:	f000 f81b 	bl	8006498 <__sfp>
 8006462:	60a0      	str	r0, [r4, #8]
 8006464:	4620      	mov	r0, r4
 8006466:	f000 f817 	bl	8006498 <__sfp>
 800646a:	2200      	movs	r2, #0
 800646c:	60e0      	str	r0, [r4, #12]
 800646e:	2104      	movs	r1, #4
 8006470:	6860      	ldr	r0, [r4, #4]
 8006472:	f7ff ffa7 	bl	80063c4 <std.isra.0>
 8006476:	2201      	movs	r2, #1
 8006478:	2109      	movs	r1, #9
 800647a:	68a0      	ldr	r0, [r4, #8]
 800647c:	f7ff ffa2 	bl	80063c4 <std.isra.0>
 8006480:	2202      	movs	r2, #2
 8006482:	2112      	movs	r1, #18
 8006484:	68e0      	ldr	r0, [r4, #12]
 8006486:	f7ff ff9d 	bl	80063c4 <std.isra.0>
 800648a:	2301      	movs	r3, #1
 800648c:	61a3      	str	r3, [r4, #24]
 800648e:	bd10      	pop	{r4, pc}
 8006490:	08007408 	.word	0x08007408
 8006494:	080063b9 	.word	0x080063b9

08006498 <__sfp>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	4b1c      	ldr	r3, [pc, #112]	; (800650c <__sfp+0x74>)
 800649c:	681e      	ldr	r6, [r3, #0]
 800649e:	69b3      	ldr	r3, [r6, #24]
 80064a0:	4607      	mov	r7, r0
 80064a2:	b913      	cbnz	r3, 80064aa <__sfp+0x12>
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff ffc7 	bl	8006438 <__sinit>
 80064aa:	3648      	adds	r6, #72	; 0x48
 80064ac:	68b4      	ldr	r4, [r6, #8]
 80064ae:	6873      	ldr	r3, [r6, #4]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	d404      	bmi.n	80064be <__sfp+0x26>
 80064b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064b8:	b17d      	cbz	r5, 80064da <__sfp+0x42>
 80064ba:	3468      	adds	r4, #104	; 0x68
 80064bc:	e7f8      	b.n	80064b0 <__sfp+0x18>
 80064be:	6833      	ldr	r3, [r6, #0]
 80064c0:	b10b      	cbz	r3, 80064c6 <__sfp+0x2e>
 80064c2:	6836      	ldr	r6, [r6, #0]
 80064c4:	e7f2      	b.n	80064ac <__sfp+0x14>
 80064c6:	2104      	movs	r1, #4
 80064c8:	4638      	mov	r0, r7
 80064ca:	f7ff ff9f 	bl	800640c <__sfmoreglue>
 80064ce:	6030      	str	r0, [r6, #0]
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d1f6      	bne.n	80064c2 <__sfp+0x2a>
 80064d4:	230c      	movs	r3, #12
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064de:	81e3      	strh	r3, [r4, #14]
 80064e0:	2301      	movs	r3, #1
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	6665      	str	r5, [r4, #100]	; 0x64
 80064e6:	6025      	str	r5, [r4, #0]
 80064e8:	60a5      	str	r5, [r4, #8]
 80064ea:	6065      	str	r5, [r4, #4]
 80064ec:	6125      	str	r5, [r4, #16]
 80064ee:	6165      	str	r5, [r4, #20]
 80064f0:	61a5      	str	r5, [r4, #24]
 80064f2:	2208      	movs	r2, #8
 80064f4:	4629      	mov	r1, r5
 80064f6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064fa:	f7ff f9d8 	bl	80058ae <memset>
 80064fe:	6365      	str	r5, [r4, #52]	; 0x34
 8006500:	63a5      	str	r5, [r4, #56]	; 0x38
 8006502:	64a5      	str	r5, [r4, #72]	; 0x48
 8006504:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006506:	4620      	mov	r0, r4
 8006508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800650a:	bf00      	nop
 800650c:	08007408 	.word	0x08007408

08006510 <_fwalk_reent>:
 8006510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006514:	4680      	mov	r8, r0
 8006516:	4689      	mov	r9, r1
 8006518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800651c:	2600      	movs	r6, #0
 800651e:	b194      	cbz	r4, 8006546 <_fwalk_reent+0x36>
 8006520:	68a5      	ldr	r5, [r4, #8]
 8006522:	6867      	ldr	r7, [r4, #4]
 8006524:	3f01      	subs	r7, #1
 8006526:	d40c      	bmi.n	8006542 <_fwalk_reent+0x32>
 8006528:	89ab      	ldrh	r3, [r5, #12]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d907      	bls.n	800653e <_fwalk_reent+0x2e>
 800652e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006532:	3301      	adds	r3, #1
 8006534:	d003      	beq.n	800653e <_fwalk_reent+0x2e>
 8006536:	4629      	mov	r1, r5
 8006538:	4640      	mov	r0, r8
 800653a:	47c8      	blx	r9
 800653c:	4306      	orrs	r6, r0
 800653e:	3568      	adds	r5, #104	; 0x68
 8006540:	e7f0      	b.n	8006524 <_fwalk_reent+0x14>
 8006542:	6824      	ldr	r4, [r4, #0]
 8006544:	e7eb      	b.n	800651e <_fwalk_reent+0xe>
 8006546:	4630      	mov	r0, r6
 8006548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800654c <__swhatbuf_r>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	460e      	mov	r6, r1
 8006550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006554:	2900      	cmp	r1, #0
 8006556:	b090      	sub	sp, #64	; 0x40
 8006558:	4614      	mov	r4, r2
 800655a:	461d      	mov	r5, r3
 800655c:	da06      	bge.n	800656c <__swhatbuf_r+0x20>
 800655e:	2300      	movs	r3, #0
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	89b3      	ldrh	r3, [r6, #12]
 8006564:	061a      	lsls	r2, r3, #24
 8006566:	d50e      	bpl.n	8006586 <__swhatbuf_r+0x3a>
 8006568:	2340      	movs	r3, #64	; 0x40
 800656a:	e00e      	b.n	800658a <__swhatbuf_r+0x3e>
 800656c:	aa01      	add	r2, sp, #4
 800656e:	f000 f8fb 	bl	8006768 <_fstat_r>
 8006572:	2800      	cmp	r0, #0
 8006574:	dbf3      	blt.n	800655e <__swhatbuf_r+0x12>
 8006576:	9a02      	ldr	r2, [sp, #8]
 8006578:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800657c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006580:	425a      	negs	r2, r3
 8006582:	415a      	adcs	r2, r3
 8006584:	602a      	str	r2, [r5, #0]
 8006586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800658a:	2000      	movs	r0, #0
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	b010      	add	sp, #64	; 0x40
 8006590:	bd70      	pop	{r4, r5, r6, pc}
	...

08006594 <__smakebuf_r>:
 8006594:	898b      	ldrh	r3, [r1, #12]
 8006596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006598:	079e      	lsls	r6, r3, #30
 800659a:	4605      	mov	r5, r0
 800659c:	460c      	mov	r4, r1
 800659e:	d410      	bmi.n	80065c2 <__smakebuf_r+0x2e>
 80065a0:	ab01      	add	r3, sp, #4
 80065a2:	466a      	mov	r2, sp
 80065a4:	f7ff ffd2 	bl	800654c <__swhatbuf_r>
 80065a8:	9900      	ldr	r1, [sp, #0]
 80065aa:	4606      	mov	r6, r0
 80065ac:	4628      	mov	r0, r5
 80065ae:	f7ff f9d5 	bl	800595c <_malloc_r>
 80065b2:	b968      	cbnz	r0, 80065d0 <__smakebuf_r+0x3c>
 80065b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b8:	059a      	lsls	r2, r3, #22
 80065ba:	d422      	bmi.n	8006602 <__smakebuf_r+0x6e>
 80065bc:	f043 0302 	orr.w	r3, r3, #2
 80065c0:	81a3      	strh	r3, [r4, #12]
 80065c2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065c6:	6023      	str	r3, [r4, #0]
 80065c8:	6123      	str	r3, [r4, #16]
 80065ca:	2301      	movs	r3, #1
 80065cc:	6163      	str	r3, [r4, #20]
 80065ce:	e018      	b.n	8006602 <__smakebuf_r+0x6e>
 80065d0:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <__smakebuf_r+0x74>)
 80065d2:	62ab      	str	r3, [r5, #40]	; 0x28
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	6020      	str	r0, [r4, #0]
 80065d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	6163      	str	r3, [r4, #20]
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	6120      	str	r0, [r4, #16]
 80065e6:	b14b      	cbz	r3, 80065fc <__smakebuf_r+0x68>
 80065e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ec:	4628      	mov	r0, r5
 80065ee:	f000 f8cd 	bl	800678c <_isatty_r>
 80065f2:	b118      	cbz	r0, 80065fc <__smakebuf_r+0x68>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	89a0      	ldrh	r0, [r4, #12]
 80065fe:	4330      	orrs	r0, r6
 8006600:	81a0      	strh	r0, [r4, #12]
 8006602:	b002      	add	sp, #8
 8006604:	bd70      	pop	{r4, r5, r6, pc}
 8006606:	bf00      	nop
 8006608:	080063b9 	.word	0x080063b9

0800660c <__malloc_lock>:
 800660c:	4770      	bx	lr

0800660e <__malloc_unlock>:
 800660e:	4770      	bx	lr

08006610 <_raise_r>:
 8006610:	291f      	cmp	r1, #31
 8006612:	b538      	push	{r3, r4, r5, lr}
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	d904      	bls.n	8006624 <_raise_r+0x14>
 800661a:	2316      	movs	r3, #22
 800661c:	6003      	str	r3, [r0, #0]
 800661e:	f04f 30ff 	mov.w	r0, #4294967295
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006626:	b112      	cbz	r2, 800662e <_raise_r+0x1e>
 8006628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800662c:	b94b      	cbnz	r3, 8006642 <_raise_r+0x32>
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f832 	bl	8006698 <_getpid_r>
 8006634:	462a      	mov	r2, r5
 8006636:	4601      	mov	r1, r0
 8006638:	4620      	mov	r0, r4
 800663a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800663e:	f000 b819 	b.w	8006674 <_kill_r>
 8006642:	2b01      	cmp	r3, #1
 8006644:	d00c      	beq.n	8006660 <_raise_r+0x50>
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	d103      	bne.n	8006652 <_raise_r+0x42>
 800664a:	2316      	movs	r3, #22
 800664c:	6003      	str	r3, [r0, #0]
 800664e:	2001      	movs	r0, #1
 8006650:	bd38      	pop	{r3, r4, r5, pc}
 8006652:	2400      	movs	r4, #0
 8006654:	4628      	mov	r0, r5
 8006656:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800665a:	4798      	blx	r3
 800665c:	4620      	mov	r0, r4
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	2000      	movs	r0, #0
 8006662:	bd38      	pop	{r3, r4, r5, pc}

08006664 <raise>:
 8006664:	4b02      	ldr	r3, [pc, #8]	; (8006670 <raise+0xc>)
 8006666:	4601      	mov	r1, r0
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	f7ff bfd1 	b.w	8006610 <_raise_r>
 800666e:	bf00      	nop
 8006670:	200001e4 	.word	0x200001e4

08006674 <_kill_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4c07      	ldr	r4, [pc, #28]	; (8006694 <_kill_r+0x20>)
 8006678:	2300      	movs	r3, #0
 800667a:	4605      	mov	r5, r0
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	f000 f8d7 	bl	8006834 <_kill>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	d102      	bne.n	8006690 <_kill_r+0x1c>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	b103      	cbz	r3, 8006690 <_kill_r+0x1c>
 800668e:	602b      	str	r3, [r5, #0]
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	20006750 	.word	0x20006750

08006698 <_getpid_r>:
 8006698:	f000 b8bc 	b.w	8006814 <_getpid>

0800669c <__sread>:
 800669c:	b510      	push	{r4, lr}
 800669e:	460c      	mov	r4, r1
 80066a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a4:	f000 f894 	bl	80067d0 <_read_r>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	bfab      	itete	ge
 80066ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066ae:	89a3      	ldrhlt	r3, [r4, #12]
 80066b0:	181b      	addge	r3, r3, r0
 80066b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066b6:	bfac      	ite	ge
 80066b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ba:	81a3      	strhlt	r3, [r4, #12]
 80066bc:	bd10      	pop	{r4, pc}

080066be <__swrite>:
 80066be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c2:	461f      	mov	r7, r3
 80066c4:	898b      	ldrh	r3, [r1, #12]
 80066c6:	05db      	lsls	r3, r3, #23
 80066c8:	4605      	mov	r5, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	4616      	mov	r6, r2
 80066ce:	d505      	bpl.n	80066dc <__swrite+0x1e>
 80066d0:	2302      	movs	r3, #2
 80066d2:	2200      	movs	r2, #0
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	f000 f868 	bl	80067ac <_lseek_r>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	4628      	mov	r0, r5
 80066ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066f2:	f000 b817 	b.w	8006724 <_write_r>

080066f6 <__sseek>:
 80066f6:	b510      	push	{r4, lr}
 80066f8:	460c      	mov	r4, r1
 80066fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fe:	f000 f855 	bl	80067ac <_lseek_r>
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	bf15      	itete	ne
 8006708:	6560      	strne	r0, [r4, #84]	; 0x54
 800670a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800670e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006712:	81a3      	strheq	r3, [r4, #12]
 8006714:	bf18      	it	ne
 8006716:	81a3      	strhne	r3, [r4, #12]
 8006718:	bd10      	pop	{r4, pc}

0800671a <__sclose>:
 800671a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671e:	f000 b813 	b.w	8006748 <_close_r>
	...

08006724 <_write_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4c07      	ldr	r4, [pc, #28]	; (8006744 <_write_r+0x20>)
 8006728:	4605      	mov	r5, r0
 800672a:	4608      	mov	r0, r1
 800672c:	4611      	mov	r1, r2
 800672e:	2200      	movs	r2, #0
 8006730:	6022      	str	r2, [r4, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f000 f8a4 	bl	8006880 <_write>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_write_r+0x1e>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	b103      	cbz	r3, 8006742 <_write_r+0x1e>
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	20006750 	.word	0x20006750

08006748 <_close_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4c06      	ldr	r4, [pc, #24]	; (8006764 <_close_r+0x1c>)
 800674c:	2300      	movs	r3, #0
 800674e:	4605      	mov	r5, r0
 8006750:	4608      	mov	r0, r1
 8006752:	6023      	str	r3, [r4, #0]
 8006754:	f000 f84e 	bl	80067f4 <_close>
 8006758:	1c43      	adds	r3, r0, #1
 800675a:	d102      	bne.n	8006762 <_close_r+0x1a>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	b103      	cbz	r3, 8006762 <_close_r+0x1a>
 8006760:	602b      	str	r3, [r5, #0]
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	20006750 	.word	0x20006750

08006768 <_fstat_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4c07      	ldr	r4, [pc, #28]	; (8006788 <_fstat_r+0x20>)
 800676c:	2300      	movs	r3, #0
 800676e:	4605      	mov	r5, r0
 8006770:	4608      	mov	r0, r1
 8006772:	4611      	mov	r1, r2
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	f000 f845 	bl	8006804 <_fstat>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	d102      	bne.n	8006784 <_fstat_r+0x1c>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	b103      	cbz	r3, 8006784 <_fstat_r+0x1c>
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	bd38      	pop	{r3, r4, r5, pc}
 8006786:	bf00      	nop
 8006788:	20006750 	.word	0x20006750

0800678c <_isatty_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4c06      	ldr	r4, [pc, #24]	; (80067a8 <_isatty_r+0x1c>)
 8006790:	2300      	movs	r3, #0
 8006792:	4605      	mov	r5, r0
 8006794:	4608      	mov	r0, r1
 8006796:	6023      	str	r3, [r4, #0]
 8006798:	f000 f844 	bl	8006824 <_isatty>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_isatty_r+0x1a>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_isatty_r+0x1a>
 80067a4:	602b      	str	r3, [r5, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20006750 	.word	0x20006750

080067ac <_lseek_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4c07      	ldr	r4, [pc, #28]	; (80067cc <_lseek_r+0x20>)
 80067b0:	4605      	mov	r5, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	6022      	str	r2, [r4, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f000 f842 	bl	8006844 <_lseek>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_lseek_r+0x1e>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_lseek_r+0x1e>
 80067c8:	602b      	str	r3, [r5, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20006750 	.word	0x20006750

080067d0 <_read_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4c07      	ldr	r4, [pc, #28]	; (80067f0 <_read_r+0x20>)
 80067d4:	4605      	mov	r5, r0
 80067d6:	4608      	mov	r0, r1
 80067d8:	4611      	mov	r1, r2
 80067da:	2200      	movs	r2, #0
 80067dc:	6022      	str	r2, [r4, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	f000 f838 	bl	8006854 <_read>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_read_r+0x1e>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_read_r+0x1e>
 80067ec:	602b      	str	r3, [r5, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	20006750 	.word	0x20006750

080067f4 <_close>:
 80067f4:	4b02      	ldr	r3, [pc, #8]	; (8006800 <_close+0xc>)
 80067f6:	2258      	movs	r2, #88	; 0x58
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	f04f 30ff 	mov.w	r0, #4294967295
 80067fe:	4770      	bx	lr
 8006800:	20006750 	.word	0x20006750

08006804 <_fstat>:
 8006804:	4b02      	ldr	r3, [pc, #8]	; (8006810 <_fstat+0xc>)
 8006806:	2258      	movs	r2, #88	; 0x58
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	4770      	bx	lr
 8006810:	20006750 	.word	0x20006750

08006814 <_getpid>:
 8006814:	4b02      	ldr	r3, [pc, #8]	; (8006820 <_getpid+0xc>)
 8006816:	2258      	movs	r2, #88	; 0x58
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	4770      	bx	lr
 8006820:	20006750 	.word	0x20006750

08006824 <_isatty>:
 8006824:	4b02      	ldr	r3, [pc, #8]	; (8006830 <_isatty+0xc>)
 8006826:	2258      	movs	r2, #88	; 0x58
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	2000      	movs	r0, #0
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20006750 	.word	0x20006750

08006834 <_kill>:
 8006834:	4b02      	ldr	r3, [pc, #8]	; (8006840 <_kill+0xc>)
 8006836:	2258      	movs	r2, #88	; 0x58
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	f04f 30ff 	mov.w	r0, #4294967295
 800683e:	4770      	bx	lr
 8006840:	20006750 	.word	0x20006750

08006844 <_lseek>:
 8006844:	4b02      	ldr	r3, [pc, #8]	; (8006850 <_lseek+0xc>)
 8006846:	2258      	movs	r2, #88	; 0x58
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	f04f 30ff 	mov.w	r0, #4294967295
 800684e:	4770      	bx	lr
 8006850:	20006750 	.word	0x20006750

08006854 <_read>:
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <_read+0xc>)
 8006856:	2258      	movs	r2, #88	; 0x58
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	f04f 30ff 	mov.w	r0, #4294967295
 800685e:	4770      	bx	lr
 8006860:	20006750 	.word	0x20006750

08006864 <_sbrk>:
 8006864:	4a04      	ldr	r2, [pc, #16]	; (8006878 <_sbrk+0x14>)
 8006866:	4905      	ldr	r1, [pc, #20]	; (800687c <_sbrk+0x18>)
 8006868:	6813      	ldr	r3, [r2, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	bf08      	it	eq
 800686e:	460b      	moveq	r3, r1
 8006870:	4418      	add	r0, r3
 8006872:	6010      	str	r0, [r2, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	4770      	bx	lr
 8006878:	200055d0 	.word	0x200055d0
 800687c:	20006758 	.word	0x20006758

08006880 <_write>:
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <_write+0xc>)
 8006882:	2258      	movs	r2, #88	; 0x58
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	f04f 30ff 	mov.w	r0, #4294967295
 800688a:	4770      	bx	lr
 800688c:	20006750 	.word	0x20006750

08006890 <_exit>:
 8006890:	e7fe      	b.n	8006890 <_exit>
 8006892:	bf00      	nop

08006894 <_init>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	bf00      	nop
 8006898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689a:	bc08      	pop	{r3}
 800689c:	469e      	mov	lr, r3
 800689e:	4770      	bx	lr

080068a0 <_fini>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr
