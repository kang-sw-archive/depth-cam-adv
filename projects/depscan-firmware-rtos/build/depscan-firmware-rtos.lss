
build/depscan-firmware-rtos.elf:     file format elf32-littlearm
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800817d


Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000b38 	.word	0x20000b38
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800dd00 	.word	0x0800dd00

080001e4 <frame_dummy>:
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <frame_dummy+0x24>)
 80001e6:	b510      	push	{r4, lr}
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4908      	ldr	r1, [pc, #32]	; (800020c <frame_dummy+0x28>)
 80001ec:	4808      	ldr	r0, [pc, #32]	; (8000210 <frame_dummy+0x2c>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	4808      	ldr	r0, [pc, #32]	; (8000214 <frame_dummy+0x30>)
 80001f4:	6803      	ldr	r3, [r0, #0]
 80001f6:	b903      	cbnz	r3, 80001fa <frame_dummy+0x16>
 80001f8:	bd10      	pop	{r4, pc}
 80001fa:	4b07      	ldr	r3, [pc, #28]	; (8000218 <frame_dummy+0x34>)
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d0fb      	beq.n	80001f8 <frame_dummy+0x14>
 8000200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000204:	4718      	bx	r3
 8000206:	bf00      	nop
 8000208:	00000000 	.word	0x00000000
 800020c:	20000b3c 	.word	0x20000b3c
 8000210:	0800dd00 	.word	0x0800dd00
 8000214:	20000b38 	.word	0x20000b38
 8000218:	00000000 	.word	0x00000000

0800021c <memcpy>:
 800021c:	4684      	mov	ip, r0
 800021e:	ea41 0300 	orr.w	r3, r1, r0
 8000222:	f013 0303 	ands.w	r3, r3, #3
 8000226:	d16d      	bne.n	8000304 <memcpy+0xe8>
 8000228:	3a40      	subs	r2, #64	; 0x40
 800022a:	d341      	bcc.n	80002b0 <memcpy+0x94>
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000270:	f840 3b04 	str.w	r3, [r0], #4
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	f851 3b04 	ldr.w	r3, [r1], #4
 8000298:	f840 3b04 	str.w	r3, [r0], #4
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	3a40      	subs	r2, #64	; 0x40
 80002ae:	d2bd      	bcs.n	800022c <memcpy+0x10>
 80002b0:	3230      	adds	r2, #48	; 0x30
 80002b2:	d311      	bcc.n	80002d8 <memcpy+0xbc>
 80002b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b8:	f840 3b04 	str.w	r3, [r0], #4
 80002bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c0:	f840 3b04 	str.w	r3, [r0], #4
 80002c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c8:	f840 3b04 	str.w	r3, [r0], #4
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	3a10      	subs	r2, #16
 80002d6:	d2ed      	bcs.n	80002b4 <memcpy+0x98>
 80002d8:	320c      	adds	r2, #12
 80002da:	d305      	bcc.n	80002e8 <memcpy+0xcc>
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	3a04      	subs	r2, #4
 80002e6:	d2f9      	bcs.n	80002dc <memcpy+0xc0>
 80002e8:	3204      	adds	r2, #4
 80002ea:	d008      	beq.n	80002fe <memcpy+0xe2>
 80002ec:	07d2      	lsls	r2, r2, #31
 80002ee:	bf1c      	itt	ne
 80002f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002f4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002f8:	d301      	bcc.n	80002fe <memcpy+0xe2>
 80002fa:	880b      	ldrh	r3, [r1, #0]
 80002fc:	8003      	strh	r3, [r0, #0]
 80002fe:	4660      	mov	r0, ip
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	2a08      	cmp	r2, #8
 8000306:	d313      	bcc.n	8000330 <memcpy+0x114>
 8000308:	078b      	lsls	r3, r1, #30
 800030a:	d08d      	beq.n	8000228 <memcpy+0xc>
 800030c:	f010 0303 	ands.w	r3, r0, #3
 8000310:	d08a      	beq.n	8000228 <memcpy+0xc>
 8000312:	f1c3 0304 	rsb	r3, r3, #4
 8000316:	1ad2      	subs	r2, r2, r3
 8000318:	07db      	lsls	r3, r3, #31
 800031a:	bf1c      	itt	ne
 800031c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000320:	f800 3b01 	strbne.w	r3, [r0], #1
 8000324:	d380      	bcc.n	8000228 <memcpy+0xc>
 8000326:	f831 3b02 	ldrh.w	r3, [r1], #2
 800032a:	f820 3b02 	strh.w	r3, [r0], #2
 800032e:	e77b      	b.n	8000228 <memcpy+0xc>
 8000330:	3a04      	subs	r2, #4
 8000332:	d3d9      	bcc.n	80002e8 <memcpy+0xcc>
 8000334:	3a01      	subs	r2, #1
 8000336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800033a:	f800 3b01 	strb.w	r3, [r0], #1
 800033e:	d2f9      	bcs.n	8000334 <memcpy+0x118>
 8000340:	780b      	ldrb	r3, [r1, #0]
 8000342:	7003      	strb	r3, [r0, #0]
 8000344:	784b      	ldrb	r3, [r1, #1]
 8000346:	7043      	strb	r3, [r0, #1]
 8000348:	788b      	ldrb	r3, [r1, #2]
 800034a:	7083      	strb	r3, [r0, #2]
 800034c:	4660      	mov	r0, ip
 800034e:	4770      	bx	lr
	...

08000380 <strlen>:
 8000380:	f890 f000 	pld	[r0]
 8000384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000388:	f020 0107 	bic.w	r1, r0, #7
 800038c:	f06f 0c00 	mvn.w	ip, #0
 8000390:	f010 0407 	ands.w	r4, r0, #7
 8000394:	f891 f020 	pld	[r1, #32]
 8000398:	f040 8049 	bne.w	800042e <strlen+0xae>
 800039c:	f04f 0400 	mov.w	r4, #0
 80003a0:	f06f 0007 	mvn.w	r0, #7
 80003a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80003a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80003ac:	f100 0008 	add.w	r0, r0, #8
 80003b0:	fa82 f24c 	uadd8	r2, r2, ip
 80003b4:	faa4 f28c 	sel	r2, r4, ip
 80003b8:	fa83 f34c 	uadd8	r3, r3, ip
 80003bc:	faa2 f38c 	sel	r3, r2, ip
 80003c0:	bb4b      	cbnz	r3, 8000416 <strlen+0x96>
 80003c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80003c6:	fa82 f24c 	uadd8	r2, r2, ip
 80003ca:	f100 0008 	add.w	r0, r0, #8
 80003ce:	faa4 f28c 	sel	r2, r4, ip
 80003d2:	fa83 f34c 	uadd8	r3, r3, ip
 80003d6:	faa2 f38c 	sel	r3, r2, ip
 80003da:	b9e3      	cbnz	r3, 8000416 <strlen+0x96>
 80003dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80003e0:	fa82 f24c 	uadd8	r2, r2, ip
 80003e4:	f100 0008 	add.w	r0, r0, #8
 80003e8:	faa4 f28c 	sel	r2, r4, ip
 80003ec:	fa83 f34c 	uadd8	r3, r3, ip
 80003f0:	faa2 f38c 	sel	r3, r2, ip
 80003f4:	b97b      	cbnz	r3, 8000416 <strlen+0x96>
 80003f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80003fa:	f101 0120 	add.w	r1, r1, #32
 80003fe:	fa82 f24c 	uadd8	r2, r2, ip
 8000402:	f100 0008 	add.w	r0, r0, #8
 8000406:	faa4 f28c 	sel	r2, r4, ip
 800040a:	fa83 f34c 	uadd8	r3, r3, ip
 800040e:	faa2 f38c 	sel	r3, r2, ip
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0c6      	beq.n	80003a4 <strlen+0x24>
 8000416:	2a00      	cmp	r2, #0
 8000418:	bf04      	itt	eq
 800041a:	3004      	addeq	r0, #4
 800041c:	461a      	moveq	r2, r3
 800041e:	ba12      	rev	r2, r2
 8000420:	fab2 f282 	clz	r2, r2
 8000424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800042c:	4770      	bx	lr
 800042e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000432:	f004 0503 	and.w	r5, r4, #3
 8000436:	f1c4 0000 	rsb	r0, r4, #0
 800043a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800043e:	f014 0f04 	tst.w	r4, #4
 8000442:	f891 f040 	pld	[r1, #64]	; 0x40
 8000446:	fa0c f505 	lsl.w	r5, ip, r5
 800044a:	ea62 0205 	orn	r2, r2, r5
 800044e:	bf1c      	itt	ne
 8000450:	ea63 0305 	ornne	r3, r3, r5
 8000454:	4662      	movne	r2, ip
 8000456:	f04f 0400 	mov.w	r4, #0
 800045a:	e7a9      	b.n	80003b0 <strlen+0x30>
 800045c:	0000      	movs	r0, r0
	...

08000460 <memchr>:
 8000460:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000464:	2a10      	cmp	r2, #16
 8000466:	db2b      	blt.n	80004c0 <memchr+0x60>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	d008      	beq.n	8000480 <memchr+0x20>
 800046e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000472:	3a01      	subs	r2, #1
 8000474:	428b      	cmp	r3, r1
 8000476:	d02d      	beq.n	80004d4 <memchr+0x74>
 8000478:	f010 0f07 	tst.w	r0, #7
 800047c:	b342      	cbz	r2, 80004d0 <memchr+0x70>
 800047e:	d1f6      	bne.n	800046e <memchr+0xe>
 8000480:	b4f0      	push	{r4, r5, r6, r7}
 8000482:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000486:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800048a:	f022 0407 	bic.w	r4, r2, #7
 800048e:	f07f 0700 	mvns.w	r7, #0
 8000492:	2300      	movs	r3, #0
 8000494:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000498:	3c08      	subs	r4, #8
 800049a:	ea85 0501 	eor.w	r5, r5, r1
 800049e:	ea86 0601 	eor.w	r6, r6, r1
 80004a2:	fa85 f547 	uadd8	r5, r5, r7
 80004a6:	faa3 f587 	sel	r5, r3, r7
 80004aa:	fa86 f647 	uadd8	r6, r6, r7
 80004ae:	faa5 f687 	sel	r6, r5, r7
 80004b2:	b98e      	cbnz	r6, 80004d8 <memchr+0x78>
 80004b4:	d1ee      	bne.n	8000494 <memchr+0x34>
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004bc:	f002 0207 	and.w	r2, r2, #7
 80004c0:	b132      	cbz	r2, 80004d0 <memchr+0x70>
 80004c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c6:	3a01      	subs	r2, #1
 80004c8:	ea83 0301 	eor.w	r3, r3, r1
 80004cc:	b113      	cbz	r3, 80004d4 <memchr+0x74>
 80004ce:	d1f8      	bne.n	80004c2 <memchr+0x62>
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4770      	bx	lr
 80004d8:	2d00      	cmp	r5, #0
 80004da:	bf06      	itte	eq
 80004dc:	4635      	moveq	r5, r6
 80004de:	3803      	subeq	r0, #3
 80004e0:	3807      	subne	r0, #7
 80004e2:	f015 0f01 	tst.w	r5, #1
 80004e6:	d107      	bne.n	80004f8 <memchr+0x98>
 80004e8:	3001      	adds	r0, #1
 80004ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ee:	bf02      	ittt	eq
 80004f0:	3001      	addeq	r0, #1
 80004f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004f6:	3001      	addeq	r0, #1
 80004f8:	bcf0      	pop	{r4, r5, r6, r7}
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__aeabi_drsub>:
 8000500:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e002      	b.n	800050c <__adddf3>
 8000506:	bf00      	nop

08000508 <__aeabi_dsub>:
 8000508:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800050c <__adddf3>:
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000512:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	bf1f      	itttt	ne
 8000522:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000526:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800052e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000532:	f000 80e2 	beq.w	80006fa <__adddf3+0x1ee>
 8000536:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800053e:	bfb8      	it	lt
 8000540:	426d      	neglt	r5, r5
 8000542:	dd0c      	ble.n	800055e <__adddf3+0x52>
 8000544:	442c      	add	r4, r5
 8000546:	ea80 0202 	eor.w	r2, r0, r2
 800054a:	ea81 0303 	eor.w	r3, r1, r3
 800054e:	ea82 0000 	eor.w	r0, r2, r0
 8000552:	ea83 0101 	eor.w	r1, r3, r1
 8000556:	ea80 0202 	eor.w	r2, r0, r2
 800055a:	ea81 0303 	eor.w	r3, r1, r3
 800055e:	2d36      	cmp	r5, #54	; 0x36
 8000560:	bf88      	it	hi
 8000562:	bd30      	pophi	{r4, r5, pc}
 8000564:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000568:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800056c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000570:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000574:	d002      	beq.n	800057c <__adddf3+0x70>
 8000576:	4240      	negs	r0, r0
 8000578:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000580:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000584:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x84>
 800058a:	4252      	negs	r2, r2
 800058c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000590:	ea94 0f05 	teq	r4, r5
 8000594:	f000 80a7 	beq.w	80006e6 <__adddf3+0x1da>
 8000598:	f1a4 0401 	sub.w	r4, r4, #1
 800059c:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a0:	db0d      	blt.n	80005be <__adddf3+0xb2>
 80005a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005a6:	fa22 f205 	lsr.w	r2, r2, r5
 80005aa:	1880      	adds	r0, r0, r2
 80005ac:	f141 0100 	adc.w	r1, r1, #0
 80005b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b4:	1880      	adds	r0, r0, r2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	4159      	adcs	r1, r3
 80005bc:	e00e      	b.n	80005dc <__adddf3+0xd0>
 80005be:	f1a5 0520 	sub.w	r5, r5, #32
 80005c2:	f10e 0e20 	add.w	lr, lr, #32
 80005c6:	2a01      	cmp	r2, #1
 80005c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005cc:	bf28      	it	cs
 80005ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	18c0      	adds	r0, r0, r3
 80005d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	d507      	bpl.n	80005f2 <__adddf3+0xe6>
 80005e2:	f04f 0e00 	mov.w	lr, #0
 80005e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005f6:	d31b      	bcc.n	8000630 <__adddf3+0x124>
 80005f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005fc:	d30c      	bcc.n	8000618 <__adddf3+0x10c>
 80005fe:	0849      	lsrs	r1, r1, #1
 8000600:	ea5f 0030 	movs.w	r0, r0, rrx
 8000604:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000608:	f104 0401 	add.w	r4, r4, #1
 800060c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000610:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000614:	f080 809a 	bcs.w	800074c <__adddf3+0x240>
 8000618:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	ea41 0105 	orr.w	r1, r1, r5
 800062e:	bd30      	pop	{r4, r5, pc}
 8000630:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000634:	4140      	adcs	r0, r0
 8000636:	eb41 0101 	adc.w	r1, r1, r1
 800063a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800063e:	f1a4 0401 	sub.w	r4, r4, #1
 8000642:	d1e9      	bne.n	8000618 <__adddf3+0x10c>
 8000644:	f091 0f00 	teq	r1, #0
 8000648:	bf04      	itt	eq
 800064a:	4601      	moveq	r1, r0
 800064c:	2000      	moveq	r0, #0
 800064e:	fab1 f381 	clz	r3, r1
 8000652:	bf08      	it	eq
 8000654:	3320      	addeq	r3, #32
 8000656:	f1a3 030b 	sub.w	r3, r3, #11
 800065a:	f1b3 0220 	subs.w	r2, r3, #32
 800065e:	da0c      	bge.n	800067a <__adddf3+0x16e>
 8000660:	320c      	adds	r2, #12
 8000662:	dd08      	ble.n	8000676 <__adddf3+0x16a>
 8000664:	f102 0c14 	add.w	ip, r2, #20
 8000668:	f1c2 020c 	rsb	r2, r2, #12
 800066c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000670:	fa21 f102 	lsr.w	r1, r1, r2
 8000674:	e00c      	b.n	8000690 <__adddf3+0x184>
 8000676:	f102 0214 	add.w	r2, r2, #20
 800067a:	bfd8      	it	le
 800067c:	f1c2 0c20 	rsble	ip, r2, #32
 8000680:	fa01 f102 	lsl.w	r1, r1, r2
 8000684:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000688:	bfdc      	itt	le
 800068a:	ea41 010c 	orrle.w	r1, r1, ip
 800068e:	4090      	lslle	r0, r2
 8000690:	1ae4      	subs	r4, r4, r3
 8000692:	bfa2      	ittt	ge
 8000694:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000698:	4329      	orrge	r1, r5
 800069a:	bd30      	popge	{r4, r5, pc}
 800069c:	ea6f 0404 	mvn.w	r4, r4
 80006a0:	3c1f      	subs	r4, #31
 80006a2:	da1c      	bge.n	80006de <__adddf3+0x1d2>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc0e      	bgt.n	80006c6 <__adddf3+0x1ba>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0220 	rsb	r2, r4, #32
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f302 	lsl.w	r3, r1, r2
 80006b8:	ea40 0003 	orr.w	r0, r0, r3
 80006bc:	fa21 f304 	lsr.w	r3, r1, r4
 80006c0:	ea45 0103 	orr.w	r1, r5, r3
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	f1c4 040c 	rsb	r4, r4, #12
 80006ca:	f1c4 0220 	rsb	r2, r4, #32
 80006ce:	fa20 f002 	lsr.w	r0, r0, r2
 80006d2:	fa01 f304 	lsl.w	r3, r1, r4
 80006d6:	ea40 0003 	orr.w	r0, r0, r3
 80006da:	4629      	mov	r1, r5
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	fa21 f004 	lsr.w	r0, r1, r4
 80006e2:	4629      	mov	r1, r5
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	f094 0f00 	teq	r4, #0
 80006ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ee:	bf06      	itte	eq
 80006f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f4:	3401      	addeq	r4, #1
 80006f6:	3d01      	subne	r5, #1
 80006f8:	e74e      	b.n	8000598 <__adddf3+0x8c>
 80006fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fe:	bf18      	it	ne
 8000700:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000704:	d029      	beq.n	800075a <__adddf3+0x24e>
 8000706:	ea94 0f05 	teq	r4, r5
 800070a:	bf08      	it	eq
 800070c:	ea90 0f02 	teqeq	r0, r2
 8000710:	d005      	beq.n	800071e <__adddf3+0x212>
 8000712:	ea54 0c00 	orrs.w	ip, r4, r0
 8000716:	bf04      	itt	eq
 8000718:	4619      	moveq	r1, r3
 800071a:	4610      	moveq	r0, r2
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea91 0f03 	teq	r1, r3
 8000722:	bf1e      	ittt	ne
 8000724:	2100      	movne	r1, #0
 8000726:	2000      	movne	r0, #0
 8000728:	bd30      	popne	{r4, r5, pc}
 800072a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800072e:	d105      	bne.n	800073c <__adddf3+0x230>
 8000730:	0040      	lsls	r0, r0, #1
 8000732:	4149      	adcs	r1, r1
 8000734:	bf28      	it	cs
 8000736:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd30      	pop	{r4, r5, pc}
 800073c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000740:	bf3c      	itt	cc
 8000742:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000746:	bd30      	popcc	{r4, r5, pc}
 8000748:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800074c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd30      	pop	{r4, r5, pc}
 800075a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800075e:	bf1a      	itte	ne
 8000760:	4619      	movne	r1, r3
 8000762:	4610      	movne	r0, r2
 8000764:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000768:	bf1c      	itt	ne
 800076a:	460b      	movne	r3, r1
 800076c:	4602      	movne	r2, r0
 800076e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000772:	bf06      	itte	eq
 8000774:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000778:	ea91 0f03 	teqeq	r1, r3
 800077c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000780:	bd30      	pop	{r4, r5, pc}
 8000782:	bf00      	nop

08000784 <__aeabi_ui2d>:
 8000784:	f090 0f00 	teq	r0, #0
 8000788:	bf04      	itt	eq
 800078a:	2100      	moveq	r1, #0
 800078c:	4770      	bxeq	lr
 800078e:	b530      	push	{r4, r5, lr}
 8000790:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000794:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000798:	f04f 0500 	mov.w	r5, #0
 800079c:	f04f 0100 	mov.w	r1, #0
 80007a0:	e750      	b.n	8000644 <__adddf3+0x138>
 80007a2:	bf00      	nop

080007a4 <__aeabi_i2d>:
 80007a4:	f090 0f00 	teq	r0, #0
 80007a8:	bf04      	itt	eq
 80007aa:	2100      	moveq	r1, #0
 80007ac:	4770      	bxeq	lr
 80007ae:	b530      	push	{r4, r5, lr}
 80007b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007bc:	bf48      	it	mi
 80007be:	4240      	negmi	r0, r0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e73e      	b.n	8000644 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_f2d>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007d6:	bf1f      	itttt	ne
 80007d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e4:	4770      	bxne	lr
 80007e6:	f092 0f00 	teq	r2, #0
 80007ea:	bf14      	ite	ne
 80007ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f0:	4770      	bxeq	lr
 80007f2:	b530      	push	{r4, r5, lr}
 80007f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000800:	e720      	b.n	8000644 <__adddf3+0x138>
 8000802:	bf00      	nop

08000804 <__aeabi_ul2d>:
 8000804:	ea50 0201 	orrs.w	r2, r0, r1
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	f04f 0500 	mov.w	r5, #0
 8000812:	e00a      	b.n	800082a <__aeabi_l2d+0x16>

08000814 <__aeabi_l2d>:
 8000814:	ea50 0201 	orrs.w	r2, r0, r1
 8000818:	bf08      	it	eq
 800081a:	4770      	bxeq	lr
 800081c:	b530      	push	{r4, r5, lr}
 800081e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000822:	d502      	bpl.n	800082a <__aeabi_l2d+0x16>
 8000824:	4240      	negs	r0, r0
 8000826:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000832:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000836:	f43f aedc 	beq.w	80005f2 <__adddf3+0xe6>
 800083a:	f04f 0203 	mov.w	r2, #3
 800083e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000842:	bf18      	it	ne
 8000844:	3203      	addne	r2, #3
 8000846:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084a:	bf18      	it	ne
 800084c:	3203      	addne	r2, #3
 800084e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000852:	f1c2 0320 	rsb	r3, r2, #32
 8000856:	fa00 fc03 	lsl.w	ip, r0, r3
 800085a:	fa20 f002 	lsr.w	r0, r0, r2
 800085e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000862:	ea40 000e 	orr.w	r0, r0, lr
 8000866:	fa21 f102 	lsr.w	r1, r1, r2
 800086a:	4414      	add	r4, r2
 800086c:	e6c1      	b.n	80005f2 <__adddf3+0xe6>
 800086e:	bf00      	nop

08000870 <__aeabi_dmul>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8de 	bleq	8000a4c <__aeabi_dmul+0x1dc>
 8000890:	442c      	add	r4, r5
 8000892:	ea81 0603 	eor.w	r6, r1, r3
 8000896:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800089a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800089e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008a2:	bf18      	it	ne
 80008a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008b0:	d038      	beq.n	8000924 <__aeabi_dmul+0xb4>
 80008b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80008b6:	f04f 0500 	mov.w	r5, #0
 80008ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008c6:	f04f 0600 	mov.w	r6, #0
 80008ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008ce:	f09c 0f00 	teq	ip, #0
 80008d2:	bf18      	it	ne
 80008d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80008d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008e4:	d204      	bcs.n	80008f0 <__aeabi_dmul+0x80>
 80008e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008ea:	416d      	adcs	r5, r5
 80008ec:	eb46 0606 	adc.w	r6, r6, r6
 80008f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000900:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000904:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000908:	bf88      	it	hi
 800090a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090e:	d81e      	bhi.n	800094e <__aeabi_dmul+0xde>
 8000910:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000914:	bf08      	it	eq
 8000916:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000928:	ea46 0101 	orr.w	r1, r6, r1
 800092c:	ea40 0002 	orr.w	r0, r0, r2
 8000930:	ea81 0103 	eor.w	r1, r1, r3
 8000934:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000938:	bfc2      	ittt	gt
 800093a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000942:	bd70      	popgt	{r4, r5, r6, pc}
 8000944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000948:	f04f 0e00 	mov.w	lr, #0
 800094c:	3c01      	subs	r4, #1
 800094e:	f300 80ab 	bgt.w	8000aa8 <__aeabi_dmul+0x238>
 8000952:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000956:	bfde      	ittt	le
 8000958:	2000      	movle	r0, #0
 800095a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800095e:	bd70      	pople	{r4, r5, r6, pc}
 8000960:	f1c4 0400 	rsb	r4, r4, #0
 8000964:	3c20      	subs	r4, #32
 8000966:	da35      	bge.n	80009d4 <__aeabi_dmul+0x164>
 8000968:	340c      	adds	r4, #12
 800096a:	dc1b      	bgt.n	80009a4 <__aeabi_dmul+0x134>
 800096c:	f104 0414 	add.w	r4, r4, #20
 8000970:	f1c4 0520 	rsb	r5, r4, #32
 8000974:	fa00 f305 	lsl.w	r3, r0, r5
 8000978:	fa20 f004 	lsr.w	r0, r0, r4
 800097c:	fa01 f205 	lsl.w	r2, r1, r5
 8000980:	ea40 0002 	orr.w	r0, r0, r2
 8000984:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000988:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800098c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000990:	fa21 f604 	lsr.w	r6, r1, r4
 8000994:	eb42 0106 	adc.w	r1, r2, r6
 8000998:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800099c:	bf08      	it	eq
 800099e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f1c4 040c 	rsb	r4, r4, #12
 80009a8:	f1c4 0520 	rsb	r5, r4, #32
 80009ac:	fa00 f304 	lsl.w	r3, r0, r4
 80009b0:	fa20 f005 	lsr.w	r0, r0, r5
 80009b4:	fa01 f204 	lsl.w	r2, r1, r4
 80009b8:	ea40 0002 	orr.w	r0, r0, r2
 80009bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009c4:	f141 0100 	adc.w	r1, r1, #0
 80009c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009cc:	bf08      	it	eq
 80009ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f1c4 0520 	rsb	r5, r4, #32
 80009d8:	fa00 f205 	lsl.w	r2, r0, r5
 80009dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80009e0:	fa20 f304 	lsr.w	r3, r0, r4
 80009e4:	fa01 f205 	lsl.w	r2, r1, r5
 80009e8:	ea43 0302 	orr.w	r3, r3, r2
 80009ec:	fa21 f004 	lsr.w	r0, r1, r4
 80009f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009f4:	fa21 f204 	lsr.w	r2, r1, r4
 80009f8:	ea20 0002 	bic.w	r0, r0, r2
 80009fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a04:	bf08      	it	eq
 8000a06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	f094 0f00 	teq	r4, #0
 8000a10:	d10f      	bne.n	8000a32 <__aeabi_dmul+0x1c2>
 8000a12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a16:	0040      	lsls	r0, r0, #1
 8000a18:	eb41 0101 	adc.w	r1, r1, r1
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a20:	bf08      	it	eq
 8000a22:	3c01      	subeq	r4, #1
 8000a24:	d0f7      	beq.n	8000a16 <__aeabi_dmul+0x1a6>
 8000a26:	ea41 0106 	orr.w	r1, r1, r6
 8000a2a:	f095 0f00 	teq	r5, #0
 8000a2e:	bf18      	it	ne
 8000a30:	4770      	bxne	lr
 8000a32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a36:	0052      	lsls	r2, r2, #1
 8000a38:	eb43 0303 	adc.w	r3, r3, r3
 8000a3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a40:	bf08      	it	eq
 8000a42:	3d01      	subeq	r5, #1
 8000a44:	d0f7      	beq.n	8000a36 <__aeabi_dmul+0x1c6>
 8000a46:	ea43 0306 	orr.w	r3, r3, r6
 8000a4a:	4770      	bx	lr
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a54:	bf18      	it	ne
 8000a56:	ea95 0f0c 	teqne	r5, ip
 8000a5a:	d00c      	beq.n	8000a76 <__aeabi_dmul+0x206>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	d1d1      	bne.n	8000a0c <__aeabi_dmul+0x19c>
 8000a68:	ea81 0103 	eor.w	r1, r1, r3
 8000a6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a7a:	bf06      	itte	eq
 8000a7c:	4610      	moveq	r0, r2
 8000a7e:	4619      	moveq	r1, r3
 8000a80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a84:	d019      	beq.n	8000aba <__aeabi_dmul+0x24a>
 8000a86:	ea94 0f0c 	teq	r4, ip
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dmul+0x222>
 8000a8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a90:	d113      	bne.n	8000aba <__aeabi_dmul+0x24a>
 8000a92:	ea95 0f0c 	teq	r5, ip
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_dmul+0x234>
 8000a98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a9c:	bf1c      	itt	ne
 8000a9e:	4610      	movne	r0, r2
 8000aa0:	4619      	movne	r1, r3
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dmul+0x24a>
 8000aa4:	ea81 0103 	eor.w	r1, r1, r3
 8000aa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000aac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ab0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000abe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}

08000ac4 <__aeabi_ddiv>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ace:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ad2:	bf1d      	ittte	ne
 8000ad4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ad8:	ea94 0f0c 	teqne	r4, ip
 8000adc:	ea95 0f0c 	teqne	r5, ip
 8000ae0:	f000 f8a7 	bleq	8000c32 <__aeabi_ddiv+0x16e>
 8000ae4:	eba4 0405 	sub.w	r4, r4, r5
 8000ae8:	ea81 0e03 	eor.w	lr, r1, r3
 8000aec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000af4:	f000 8088 	beq.w	8000c08 <__aeabi_ddiv+0x144>
 8000af8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000afc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b1c:	429d      	cmp	r5, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4296      	cmpeq	r6, r2
 8000b22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b2a:	d202      	bcs.n	8000b32 <__aeabi_ddiv+0x6e>
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b32:	1ab6      	subs	r6, r6, r2
 8000b34:	eb65 0503 	sbc.w	r5, r5, r3
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4e:	bf22      	ittt	cs
 8000b50:	1ab6      	subcs	r6, r6, r2
 8000b52:	4675      	movcs	r5, lr
 8000b54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b66:	bf22      	ittt	cs
 8000b68:	1ab6      	subcs	r6, r6, r2
 8000b6a:	4675      	movcs	r5, lr
 8000b6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b7e:	bf22      	ittt	cs
 8000b80:	1ab6      	subcs	r6, r6, r2
 8000b82:	4675      	movcs	r5, lr
 8000b84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b88:	085b      	lsrs	r3, r3, #1
 8000b8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b96:	bf22      	ittt	cs
 8000b98:	1ab6      	subcs	r6, r6, r2
 8000b9a:	4675      	movcs	r5, lr
 8000b9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ba0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ba4:	d018      	beq.n	8000bd8 <__aeabi_ddiv+0x114>
 8000ba6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000baa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bbe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bc2:	d1c0      	bne.n	8000b46 <__aeabi_ddiv+0x82>
 8000bc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bc8:	d10b      	bne.n	8000be2 <__aeabi_ddiv+0x11e>
 8000bca:	ea41 0100 	orr.w	r1, r1, r0
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bd6:	e7b6      	b.n	8000b46 <__aeabi_ddiv+0x82>
 8000bd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bdc:	bf04      	itt	eq
 8000bde:	4301      	orreq	r1, r0
 8000be0:	2000      	moveq	r0, #0
 8000be2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000be6:	bf88      	it	hi
 8000be8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bec:	f63f aeaf 	bhi.w	800094e <__aeabi_dmul+0xde>
 8000bf0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bf4:	bf04      	itt	eq
 8000bf6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bfe:	f150 0000 	adcs.w	r0, r0, #0
 8000c02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c14:	bfc2      	ittt	gt
 8000c16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c24:	f04f 0e00 	mov.w	lr, #0
 8000c28:	3c01      	subs	r4, #1
 8000c2a:	e690      	b.n	800094e <__aeabi_dmul+0xde>
 8000c2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000c30:	e68d      	b.n	800094e <__aeabi_dmul+0xde>
 8000c32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c36:	ea94 0f0c 	teq	r4, ip
 8000c3a:	bf08      	it	eq
 8000c3c:	ea95 0f0c 	teqeq	r5, ip
 8000c40:	f43f af3b 	beq.w	8000aba <__aeabi_dmul+0x24a>
 8000c44:	ea94 0f0c 	teq	r4, ip
 8000c48:	d10a      	bne.n	8000c60 <__aeabi_ddiv+0x19c>
 8000c4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c4e:	f47f af34 	bne.w	8000aba <__aeabi_dmul+0x24a>
 8000c52:	ea95 0f0c 	teq	r5, ip
 8000c56:	f47f af25 	bne.w	8000aa4 <__aeabi_dmul+0x234>
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	e72c      	b.n	8000aba <__aeabi_dmul+0x24a>
 8000c60:	ea95 0f0c 	teq	r5, ip
 8000c64:	d106      	bne.n	8000c74 <__aeabi_ddiv+0x1b0>
 8000c66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c6a:	f43f aefd 	beq.w	8000a68 <__aeabi_dmul+0x1f8>
 8000c6e:	4610      	mov	r0, r2
 8000c70:	4619      	mov	r1, r3
 8000c72:	e722      	b.n	8000aba <__aeabi_dmul+0x24a>
 8000c74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c78:	bf18      	it	ne
 8000c7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c7e:	f47f aec5 	bne.w	8000a0c <__aeabi_dmul+0x19c>
 8000c82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c86:	f47f af0d 	bne.w	8000aa4 <__aeabi_dmul+0x234>
 8000c8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c8e:	f47f aeeb 	bne.w	8000a68 <__aeabi_dmul+0x1f8>
 8000c92:	e712      	b.n	8000aba <__aeabi_dmul+0x24a>

08000c94 <__gedf2>:
 8000c94:	f04f 3cff 	mov.w	ip, #4294967295
 8000c98:	e006      	b.n	8000ca8 <__cmpdf2+0x4>
 8000c9a:	bf00      	nop

08000c9c <__ledf2>:
 8000c9c:	f04f 0c01 	mov.w	ip, #1
 8000ca0:	e002      	b.n	8000ca8 <__cmpdf2+0x4>
 8000ca2:	bf00      	nop

08000ca4 <__cmpdf2>:
 8000ca4:	f04f 0c01 	mov.w	ip, #1
 8000ca8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cb8:	bf18      	it	ne
 8000cba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cbe:	d01b      	beq.n	8000cf8 <__cmpdf2+0x54>
 8000cc0:	b001      	add	sp, #4
 8000cc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cc6:	bf0c      	ite	eq
 8000cc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ccc:	ea91 0f03 	teqne	r1, r3
 8000cd0:	bf02      	ittt	eq
 8000cd2:	ea90 0f02 	teqeq	r0, r2
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	4770      	bxeq	lr
 8000cda:	f110 0f00 	cmn.w	r0, #0
 8000cde:	ea91 0f03 	teq	r1, r3
 8000ce2:	bf58      	it	pl
 8000ce4:	4299      	cmppl	r1, r3
 8000ce6:	bf08      	it	eq
 8000ce8:	4290      	cmpeq	r0, r2
 8000cea:	bf2c      	ite	cs
 8000cec:	17d8      	asrcs	r0, r3, #31
 8000cee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cf2:	f040 0001 	orr.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d00:	d102      	bne.n	8000d08 <__cmpdf2+0x64>
 8000d02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d06:	d107      	bne.n	8000d18 <__cmpdf2+0x74>
 8000d08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d10:	d1d6      	bne.n	8000cc0 <__cmpdf2+0x1c>
 8000d12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d16:	d0d3      	beq.n	8000cc0 <__cmpdf2+0x1c>
 8000d18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__aeabi_cdrcmple>:
 8000d20:	4684      	mov	ip, r0
 8000d22:	4610      	mov	r0, r2
 8000d24:	4662      	mov	r2, ip
 8000d26:	468c      	mov	ip, r1
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	e000      	b.n	8000d30 <__aeabi_cdcmpeq>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_cdcmpeq>:
 8000d30:	b501      	push	{r0, lr}
 8000d32:	f7ff ffb7 	bl	8000ca4 <__cmpdf2>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	bf48      	it	mi
 8000d3a:	f110 0f00 	cmnmi.w	r0, #0
 8000d3e:	bd01      	pop	{r0, pc}

08000d40 <__aeabi_dcmpeq>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff fff4 	bl	8000d30 <__aeabi_cdcmpeq>
 8000d48:	bf0c      	ite	eq
 8000d4a:	2001      	moveq	r0, #1
 8000d4c:	2000      	movne	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_dcmplt>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffea 	bl	8000d30 <__aeabi_cdcmpeq>
 8000d5c:	bf34      	ite	cc
 8000d5e:	2001      	movcc	r0, #1
 8000d60:	2000      	movcs	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_dcmple>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffe0 	bl	8000d30 <__aeabi_cdcmpeq>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_dcmpge>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffce 	bl	8000d20 <__aeabi_cdrcmple>
 8000d84:	bf94      	ite	ls
 8000d86:	2001      	movls	r0, #1
 8000d88:	2000      	movhi	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_dcmpgt>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff ffc4 	bl	8000d20 <__aeabi_cdrcmple>
 8000d98:	bf34      	ite	cc
 8000d9a:	2001      	movcc	r0, #1
 8000d9c:	2000      	movcs	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_dcmpun>:
 8000da4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000da8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dac:	d102      	bne.n	8000db4 <__aeabi_dcmpun+0x10>
 8000dae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000db2:	d10a      	bne.n	8000dca <__aeabi_dcmpun+0x26>
 8000db4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000db8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dbc:	d102      	bne.n	8000dc4 <__aeabi_dcmpun+0x20>
 8000dbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dc2:	d102      	bne.n	8000dca <__aeabi_dcmpun+0x26>
 8000dc4:	f04f 0000 	mov.w	r0, #0
 8000dc8:	4770      	bx	lr
 8000dca:	f04f 0001 	mov.w	r0, #1
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_d2iz>:
 8000dd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dd8:	d215      	bcs.n	8000e06 <__aeabi_d2iz+0x36>
 8000dda:	d511      	bpl.n	8000e00 <__aeabi_d2iz+0x30>
 8000ddc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000de0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000de4:	d912      	bls.n	8000e0c <__aeabi_d2iz+0x3c>
 8000de6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000df2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000df6:	fa23 f002 	lsr.w	r0, r3, r2
 8000dfa:	bf18      	it	ne
 8000dfc:	4240      	negne	r0, r0
 8000dfe:	4770      	bx	lr
 8000e00:	f04f 0000 	mov.w	r0, #0
 8000e04:	4770      	bx	lr
 8000e06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e0a:	d105      	bne.n	8000e18 <__aeabi_d2iz+0x48>
 8000e0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e10:	bf08      	it	eq
 8000e12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e16:	4770      	bx	lr
 8000e18:	f04f 0000 	mov.w	r0, #0
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <__aeabi_uldivmod>:
 8000e20:	b953      	cbnz	r3, 8000e38 <__aeabi_uldivmod+0x18>
 8000e22:	b94a      	cbnz	r2, 8000e38 <__aeabi_uldivmod+0x18>
 8000e24:	2900      	cmp	r1, #0
 8000e26:	bf08      	it	eq
 8000e28:	2800      	cmpeq	r0, #0
 8000e2a:	bf1c      	itt	ne
 8000e2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e30:	f04f 30ff 	movne.w	r0, #4294967295
 8000e34:	f000 b97e 	b.w	8001134 <__aeabi_idiv0>
 8000e38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e40:	f000 f806 	bl	8000e50 <__udivmoddi4>
 8000e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4770      	bx	lr

08000e50 <__udivmoddi4>:
 8000e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e54:	468c      	mov	ip, r1
 8000e56:	460e      	mov	r6, r1
 8000e58:	4604      	mov	r4, r0
 8000e5a:	9d08      	ldr	r5, [sp, #32]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d150      	bne.n	8000f02 <__udivmoddi4+0xb2>
 8000e60:	428a      	cmp	r2, r1
 8000e62:	4617      	mov	r7, r2
 8000e64:	d96c      	bls.n	8000f40 <__udivmoddi4+0xf0>
 8000e66:	fab2 fe82 	clz	lr, r2
 8000e6a:	f1be 0f00 	cmp.w	lr, #0
 8000e6e:	d00b      	beq.n	8000e88 <__udivmoddi4+0x38>
 8000e70:	f1ce 0420 	rsb	r4, lr, #32
 8000e74:	fa20 f404 	lsr.w	r4, r0, r4
 8000e78:	fa01 f60e 	lsl.w	r6, r1, lr
 8000e7c:	ea44 0c06 	orr.w	ip, r4, r6
 8000e80:	fa02 f70e 	lsl.w	r7, r2, lr
 8000e84:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	0c22      	lsrs	r2, r4, #16
 8000e8e:	fbbc f0f9 	udiv	r0, ip, r9
 8000e92:	fa1f f887 	uxth.w	r8, r7
 8000e96:	fb09 c610 	mls	r6, r9, r0, ip
 8000e9a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000e9e:	fb00 f308 	mul.w	r3, r0, r8
 8000ea2:	42b3      	cmp	r3, r6
 8000ea4:	d909      	bls.n	8000eba <__udivmoddi4+0x6a>
 8000ea6:	19f6      	adds	r6, r6, r7
 8000ea8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eac:	f080 8122 	bcs.w	80010f4 <__udivmoddi4+0x2a4>
 8000eb0:	42b3      	cmp	r3, r6
 8000eb2:	f240 811f 	bls.w	80010f4 <__udivmoddi4+0x2a4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	443e      	add	r6, r7
 8000eba:	1af6      	subs	r6, r6, r3
 8000ebc:	b2a2      	uxth	r2, r4
 8000ebe:	fbb6 f3f9 	udiv	r3, r6, r9
 8000ec2:	fb09 6613 	mls	r6, r9, r3, r6
 8000ec6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000eca:	fb03 f808 	mul.w	r8, r3, r8
 8000ece:	45a0      	cmp	r8, r4
 8000ed0:	d909      	bls.n	8000ee6 <__udivmoddi4+0x96>
 8000ed2:	19e4      	adds	r4, r4, r7
 8000ed4:	f103 32ff 	add.w	r2, r3, #4294967295
 8000ed8:	f080 810a 	bcs.w	80010f0 <__udivmoddi4+0x2a0>
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	f240 8107 	bls.w	80010f0 <__udivmoddi4+0x2a0>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ebc8 0404 	rsb	r4, r8, r4
 8000eea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d062      	beq.n	8000fba <__udivmoddi4+0x16a>
 8000ef4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ef8:	2300      	movs	r3, #0
 8000efa:	602c      	str	r4, [r5, #0]
 8000efc:	606b      	str	r3, [r5, #4]
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0xc6>
 8000f06:	2d00      	cmp	r5, #0
 8000f08:	d055      	beq.n	8000fb6 <__udivmoddi4+0x166>
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000f10:	4608      	mov	r0, r1
 8000f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f16:	fab3 f183 	clz	r1, r3
 8000f1a:	2900      	cmp	r1, #0
 8000f1c:	f040 8090 	bne.w	8001040 <__udivmoddi4+0x1f0>
 8000f20:	42b3      	cmp	r3, r6
 8000f22:	d302      	bcc.n	8000f2a <__udivmoddi4+0xda>
 8000f24:	4282      	cmp	r2, r0
 8000f26:	f200 80f8 	bhi.w	800111a <__udivmoddi4+0x2ca>
 8000f2a:	1a84      	subs	r4, r0, r2
 8000f2c:	eb66 0603 	sbc.w	r6, r6, r3
 8000f30:	2001      	movs	r0, #1
 8000f32:	46b4      	mov	ip, r6
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d040      	beq.n	8000fba <__udivmoddi4+0x16a>
 8000f38:	e885 1010 	stmia.w	r5, {r4, ip}
 8000f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f40:	b912      	cbnz	r2, 8000f48 <__udivmoddi4+0xf8>
 8000f42:	2701      	movs	r7, #1
 8000f44:	fbb7 f7f2 	udiv	r7, r7, r2
 8000f48:	fab7 fe87 	clz	lr, r7
 8000f4c:	f1be 0f00 	cmp.w	lr, #0
 8000f50:	d135      	bne.n	8000fbe <__udivmoddi4+0x16e>
 8000f52:	1bf3      	subs	r3, r6, r7
 8000f54:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f58:	fa1f fc87 	uxth.w	ip, r7
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f62:	0c22      	lsrs	r2, r4, #16
 8000f64:	fb08 3610 	mls	r6, r8, r0, r3
 8000f68:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000f6c:	fb0c f300 	mul.w	r3, ip, r0
 8000f70:	42b3      	cmp	r3, r6
 8000f72:	d907      	bls.n	8000f84 <__udivmoddi4+0x134>
 8000f74:	19f6      	adds	r6, r6, r7
 8000f76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f7a:	d202      	bcs.n	8000f82 <__udivmoddi4+0x132>
 8000f7c:	42b3      	cmp	r3, r6
 8000f7e:	f200 80ce 	bhi.w	800111e <__udivmoddi4+0x2ce>
 8000f82:	4610      	mov	r0, r2
 8000f84:	1af6      	subs	r6, r6, r3
 8000f86:	b2a2      	uxth	r2, r4
 8000f88:	fbb6 f3f8 	udiv	r3, r6, r8
 8000f8c:	fb08 6613 	mls	r6, r8, r3, r6
 8000f90:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000f94:	fb0c fc03 	mul.w	ip, ip, r3
 8000f98:	45a4      	cmp	ip, r4
 8000f9a:	d907      	bls.n	8000fac <__udivmoddi4+0x15c>
 8000f9c:	19e4      	adds	r4, r4, r7
 8000f9e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000fa2:	d202      	bcs.n	8000faa <__udivmoddi4+0x15a>
 8000fa4:	45a4      	cmp	ip, r4
 8000fa6:	f200 80b5 	bhi.w	8001114 <__udivmoddi4+0x2c4>
 8000faa:	4613      	mov	r3, r2
 8000fac:	ebcc 0404 	rsb	r4, ip, r4
 8000fb0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fb4:	e79c      	b.n	8000ef0 <__udivmoddi4+0xa0>
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	f1ce 0120 	rsb	r1, lr, #32
 8000fc2:	fa06 f30e 	lsl.w	r3, r6, lr
 8000fc6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000fca:	fa20 f901 	lsr.w	r9, r0, r1
 8000fce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000fd2:	40ce      	lsrs	r6, r1
 8000fd4:	ea49 0903 	orr.w	r9, r9, r3
 8000fd8:	fbb6 faf8 	udiv	sl, r6, r8
 8000fdc:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000fe0:	fb08 661a 	mls	r6, r8, sl, r6
 8000fe4:	fa1f fc87 	uxth.w	ip, r7
 8000fe8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000fec:	fb0a f20c 	mul.w	r2, sl, ip
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ff6:	d90a      	bls.n	800100e <__udivmoddi4+0x1be>
 8000ff8:	19db      	adds	r3, r3, r7
 8000ffa:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000ffe:	f080 8087 	bcs.w	8001110 <__udivmoddi4+0x2c0>
 8001002:	429a      	cmp	r2, r3
 8001004:	f240 8084 	bls.w	8001110 <__udivmoddi4+0x2c0>
 8001008:	f1aa 0a02 	sub.w	sl, sl, #2
 800100c:	443b      	add	r3, r7
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	fa1f f989 	uxth.w	r9, r9
 8001014:	fbb3 f1f8 	udiv	r1, r3, r8
 8001018:	fb08 3311 	mls	r3, r8, r1, r3
 800101c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8001020:	fb01 f60c 	mul.w	r6, r1, ip
 8001024:	429e      	cmp	r6, r3
 8001026:	d907      	bls.n	8001038 <__udivmoddi4+0x1e8>
 8001028:	19db      	adds	r3, r3, r7
 800102a:	f101 32ff 	add.w	r2, r1, #4294967295
 800102e:	d26b      	bcs.n	8001108 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d969      	bls.n	8001108 <__udivmoddi4+0x2b8>
 8001034:	3902      	subs	r1, #2
 8001036:	443b      	add	r3, r7
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800103e:	e78e      	b.n	8000f5e <__udivmoddi4+0x10e>
 8001040:	f1c1 0e20 	rsb	lr, r1, #32
 8001044:	fa22 f40e 	lsr.w	r4, r2, lr
 8001048:	408b      	lsls	r3, r1
 800104a:	4323      	orrs	r3, r4
 800104c:	fa20 f70e 	lsr.w	r7, r0, lr
 8001050:	fa06 f401 	lsl.w	r4, r6, r1
 8001054:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001058:	fa26 f60e 	lsr.w	r6, r6, lr
 800105c:	433c      	orrs	r4, r7
 800105e:	fbb6 f9fc 	udiv	r9, r6, ip
 8001062:	0c27      	lsrs	r7, r4, #16
 8001064:	fb0c 6619 	mls	r6, ip, r9, r6
 8001068:	fa1f f883 	uxth.w	r8, r3
 800106c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8001070:	fb09 f708 	mul.w	r7, r9, r8
 8001074:	42b7      	cmp	r7, r6
 8001076:	fa02 f201 	lsl.w	r2, r2, r1
 800107a:	fa00 fa01 	lsl.w	sl, r0, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x242>
 8001080:	18f6      	adds	r6, r6, r3
 8001082:	f109 30ff 	add.w	r0, r9, #4294967295
 8001086:	d241      	bcs.n	800110c <__udivmoddi4+0x2bc>
 8001088:	42b7      	cmp	r7, r6
 800108a:	d93f      	bls.n	800110c <__udivmoddi4+0x2bc>
 800108c:	f1a9 0902 	sub.w	r9, r9, #2
 8001090:	441e      	add	r6, r3
 8001092:	1bf6      	subs	r6, r6, r7
 8001094:	b2a0      	uxth	r0, r4
 8001096:	fbb6 f4fc 	udiv	r4, r6, ip
 800109a:	fb0c 6614 	mls	r6, ip, r4, r6
 800109e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 80010a2:	fb04 f808 	mul.w	r8, r4, r8
 80010a6:	45b8      	cmp	r8, r7
 80010a8:	d907      	bls.n	80010ba <__udivmoddi4+0x26a>
 80010aa:	18ff      	adds	r7, r7, r3
 80010ac:	f104 30ff 	add.w	r0, r4, #4294967295
 80010b0:	d228      	bcs.n	8001104 <__udivmoddi4+0x2b4>
 80010b2:	45b8      	cmp	r8, r7
 80010b4:	d926      	bls.n	8001104 <__udivmoddi4+0x2b4>
 80010b6:	3c02      	subs	r4, #2
 80010b8:	441f      	add	r7, r3
 80010ba:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80010be:	ebc8 0707 	rsb	r7, r8, r7
 80010c2:	fba0 8902 	umull	r8, r9, r0, r2
 80010c6:	454f      	cmp	r7, r9
 80010c8:	4644      	mov	r4, r8
 80010ca:	464e      	mov	r6, r9
 80010cc:	d314      	bcc.n	80010f8 <__udivmoddi4+0x2a8>
 80010ce:	d029      	beq.n	8001124 <__udivmoddi4+0x2d4>
 80010d0:	b365      	cbz	r5, 800112c <__udivmoddi4+0x2dc>
 80010d2:	ebba 0304 	subs.w	r3, sl, r4
 80010d6:	eb67 0706 	sbc.w	r7, r7, r6
 80010da:	fa07 fe0e 	lsl.w	lr, r7, lr
 80010de:	40cb      	lsrs	r3, r1
 80010e0:	40cf      	lsrs	r7, r1
 80010e2:	ea4e 0303 	orr.w	r3, lr, r3
 80010e6:	e885 0088 	stmia.w	r5, {r3, r7}
 80010ea:	2100      	movs	r1, #0
 80010ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f0:	4613      	mov	r3, r2
 80010f2:	e6f8      	b.n	8000ee6 <__udivmoddi4+0x96>
 80010f4:	4610      	mov	r0, r2
 80010f6:	e6e0      	b.n	8000eba <__udivmoddi4+0x6a>
 80010f8:	ebb8 0402 	subs.w	r4, r8, r2
 80010fc:	eb69 0603 	sbc.w	r6, r9, r3
 8001100:	3801      	subs	r0, #1
 8001102:	e7e5      	b.n	80010d0 <__udivmoddi4+0x280>
 8001104:	4604      	mov	r4, r0
 8001106:	e7d8      	b.n	80010ba <__udivmoddi4+0x26a>
 8001108:	4611      	mov	r1, r2
 800110a:	e795      	b.n	8001038 <__udivmoddi4+0x1e8>
 800110c:	4681      	mov	r9, r0
 800110e:	e7c0      	b.n	8001092 <__udivmoddi4+0x242>
 8001110:	468a      	mov	sl, r1
 8001112:	e77c      	b.n	800100e <__udivmoddi4+0x1be>
 8001114:	3b02      	subs	r3, #2
 8001116:	443c      	add	r4, r7
 8001118:	e748      	b.n	8000fac <__udivmoddi4+0x15c>
 800111a:	4608      	mov	r0, r1
 800111c:	e70a      	b.n	8000f34 <__udivmoddi4+0xe4>
 800111e:	3802      	subs	r0, #2
 8001120:	443e      	add	r6, r7
 8001122:	e72f      	b.n	8000f84 <__udivmoddi4+0x134>
 8001124:	45c2      	cmp	sl, r8
 8001126:	d3e7      	bcc.n	80010f8 <__udivmoddi4+0x2a8>
 8001128:	463e      	mov	r6, r7
 800112a:	e7d1      	b.n	80010d0 <__udivmoddi4+0x280>
 800112c:	4629      	mov	r1, r5
 800112e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001132:	bf00      	nop

08001134 <__aeabi_idiv0>:
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	2400      	movs	r4, #0
 800113e:	9405      	str	r4, [sp, #20]
 8001140:	9406      	str	r4, [sp, #24]
 8001142:	9407      	str	r4, [sp, #28]
 8001144:	9408      	str	r4, [sp, #32]
 8001146:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001148:	9401      	str	r4, [sp, #4]
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_GPIO_Init+0xb8>)
 800114c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800114e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001152:	631a      	str	r2, [r3, #48]	; 0x30
 8001154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001156:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	9402      	str	r4, [sp, #8]
 8001160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001162:	f042 0204 	orr.w	r2, r2, #4
 8001166:	631a      	str	r2, [r3, #48]	; 0x30
 8001168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800116a:	f002 0204 	and.w	r2, r2, #4
 800116e:	9202      	str	r2, [sp, #8]
 8001170:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	9403      	str	r4, [sp, #12]
 8001174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
 800117c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117e:	f002 0201 	and.w	r2, r2, #1
 8001182:	9203      	str	r2, [sp, #12]
 8001184:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	9404      	str	r4, [sp, #16]
 8001188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118a:	f042 0202 	orr.w	r2, r2, #2
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	9304      	str	r3, [sp, #16]
 8001198:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 800119a:	4e16      	ldr	r6, [pc, #88]	; (80011f4 <MX_GPIO_Init+0xbc>)
 800119c:	4622      	mov	r2, r4
 800119e:	2101      	movs	r1, #1
 80011a0:	4630      	mov	r0, r6
 80011a2:	f002 fc87 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);
 80011a6:	4f14      	ldr	r7, [pc, #80]	; (80011f8 <MX_GPIO_Init+0xc0>)
 80011a8:	4622      	mov	r2, r4
 80011aa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011ae:	4638      	mov	r0, r7
 80011b0:	f002 fc80 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
 80011b4:	2501      	movs	r5, #1
 80011b6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);
 80011be:	a905      	add	r1, sp, #20
 80011c0:	4630      	mov	r0, r6
 80011c2:	f002 fba1 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
 80011c6:	2302      	movs	r3, #2
 80011c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_GPIO_Init+0xc4>)
 80011cc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80011d0:	a905      	add	r1, sp, #20
 80011d2:	4630      	mov	r0, r6
 80011d4:	f002 fb98 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
  GPIO_InitStruct.Pin = MOT_DIR_1_Pin|MOT_DIR_2_Pin;
 80011d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011dc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	a905      	add	r1, sp, #20
 80011e6:	4638      	mov	r0, r7
 80011e8:	f002 fb8e 	bl	8003908 <HAL_GPIO_Init>

}
 80011ec:	b00b      	add	sp, #44	; 0x2c
 80011ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020400 	.word	0x40020400
 80011fc:	10110000 	.word	0x10110000

08001200 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001200:	b510      	push	{r4, lr}
 8001202:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001204:	2400      	movs	r4, #0
 8001206:	9401      	str	r4, [sp, #4]
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <MX_DMA_Init+0x40>)
 800120a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800120c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800121c:	4622      	mov	r2, r4
 800121e:	2105      	movs	r1, #5
 8001220:	203a      	movs	r0, #58	; 0x3a
 8001222:	f002 fe19 	bl	8003e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001226:	203a      	movs	r0, #58	; 0x3a
 8001228:	f002 fe48 	bl	8003ebc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800122c:	4622      	mov	r2, r4
 800122e:	2105      	movs	r1, #5
 8001230:	203b      	movs	r0, #59	; 0x3b
 8001232:	f002 fe11 	bl	8003e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001236:	203b      	movs	r0, #59	; 0x3b
 8001238:	f002 fe40 	bl	8003ebc <HAL_NVIC_EnableIRQ>

}
 800123c:	b002      	add	sp, #8
 800123e:	bd10      	pop	{r4, pc}
 8001240:	40023800 	.word	0x40023800

08001244 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001244:	b530      	push	{r4, r5, lr}
 8001246:	b097      	sub	sp, #92	; 0x5c

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001248:	2400      	movs	r4, #0
 800124a:	9412      	str	r4, [sp, #72]	; 0x48
 800124c:	9413      	str	r4, [sp, #76]	; 0x4c
 800124e:	9414      	str	r4, [sp, #80]	; 0x50
 8001250:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	9410      	str	r4, [sp, #64]	; 0x40
 8001254:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	9409      	str	r4, [sp, #36]	; 0x24
 8001258:	940a      	str	r4, [sp, #40]	; 0x28
 800125a:	940b      	str	r4, [sp, #44]	; 0x2c
 800125c:	940c      	str	r4, [sp, #48]	; 0x30
 800125e:	940d      	str	r4, [sp, #52]	; 0x34
 8001260:	940e      	str	r4, [sp, #56]	; 0x38
 8001262:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001264:	2220      	movs	r2, #32
 8001266:	4621      	mov	r1, r4
 8001268:	a801      	add	r0, sp, #4
 800126a:	f007 fae3 	bl	8008834 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800126e:	4d1e      	ldr	r5, [pc, #120]	; (80012e8 <MX_TIM1_Init+0xa4>)
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_TIM1_Init+0xa8>)
 8001272:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8001274:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8001278:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800127c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001280:	4628      	mov	r0, r5
 8001282:	f002 ff7b 	bl	800417c <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128c:	a912      	add	r1, sp, #72	; 0x48
 800128e:	4628      	mov	r0, r5
 8001290:	f003 f8a4 	bl	80043dc <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001294:	4628      	mov	r0, r5
 8001296:	f002 ffa9 	bl	80041ec <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129e:	a910      	add	r1, sp, #64	; 0x40
 80012a0:	4628      	mov	r0, r5
 80012a2:	f003 f91f 	bl	80044e4 <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a6:	2360      	movs	r3, #96	; 0x60
 80012a8:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012aa:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80012ac:	2302      	movs	r3, #2
 80012ae:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b0:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b2:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b4:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b6:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b8:	4622      	mov	r2, r4
 80012ba:	a909      	add	r1, sp, #36	; 0x24
 80012bc:	4628      	mov	r0, r5
 80012be:	f003 f811 	bl	80042e4 <HAL_TIM_PWM_ConfigChannel>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c2:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c4:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c6:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c8:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ca:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d0:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d2:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d4:	a901      	add	r1, sp, #4
 80012d6:	4628      	mov	r0, r5
 80012d8:	f003 f942 	bl	8004560 <HAL_TIMEx_ConfigBreakDeadTime>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012dc:	4628      	mov	r0, r5
 80012de:	f000 fc89 	bl	8001bf4 <HAL_TIM_MspPostInit>

}
 80012e2:	b017      	add	sp, #92	; 0x5c
 80012e4:	bd30      	pop	{r4, r5, pc}
 80012e6:	bf00      	nop
 80012e8:	200059d0 	.word	0x200059d0
 80012ec:	40010000 	.word	0x40010000

080012f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f0:	b530      	push	{r4, r5, lr}
 80012f2:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f4:	2400      	movs	r4, #0
 80012f6:	940a      	str	r4, [sp, #40]	; 0x28
 80012f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80012fa:	940c      	str	r4, [sp, #48]	; 0x30
 80012fc:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	9408      	str	r4, [sp, #32]
 8001300:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001302:	9401      	str	r4, [sp, #4]
 8001304:	9402      	str	r4, [sp, #8]
 8001306:	9403      	str	r4, [sp, #12]
 8001308:	9404      	str	r4, [sp, #16]
 800130a:	9405      	str	r4, [sp, #20]
 800130c:	9406      	str	r4, [sp, #24]
 800130e:	9407      	str	r4, [sp, #28]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001310:	4d15      	ldr	r5, [pc, #84]	; (8001368 <MX_TIM3_Init+0x78>)
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_TIM3_Init+0x7c>)
 8001314:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 8001316:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
 800131a:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001320:	4628      	mov	r0, r5
 8001322:	f002 ff2b 	bl	800417c <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800132c:	a90a      	add	r1, sp, #40	; 0x28
 800132e:	4628      	mov	r0, r5
 8001330:	f003 f854 	bl	80043dc <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001334:	4628      	mov	r0, r5
 8001336:	f002 ff59 	bl	80041ec <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133a:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133e:	a908      	add	r1, sp, #32
 8001340:	4628      	mov	r0, r5
 8001342:	f003 f8cf 	bl	80044e4 <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001346:	2360      	movs	r3, #96	; 0x60
 8001348:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800134a:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800134c:	2302      	movs	r3, #2
 800134e:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001350:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001352:	4622      	mov	r2, r4
 8001354:	a901      	add	r1, sp, #4
 8001356:	4628      	mov	r0, r5
 8001358:	f002 ffc4 	bl	80042e4 <HAL_TIM_PWM_ConfigChannel>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800135c:	4628      	mov	r0, r5
 800135e:	f000 fc49 	bl	8001bf4 <HAL_TIM_MspPostInit>

}
 8001362:	b00f      	add	sp, #60	; 0x3c
 8001364:	bd30      	pop	{r4, r5, pc}
 8001366:	bf00      	nop
 8001368:	2000598c 	.word	0x2000598c
 800136c:	40000400 	.word	0x40000400

08001370 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001370:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <MX_SPI1_Init+0x38>)
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_SPI1_Init+0x3c>)
 8001376:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001378:	f44f 7382 	mov.w	r3, #260	; 0x104
 800137c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	2300      	movs	r3, #0
 8001380:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001382:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001384:	2202      	movs	r2, #2
 8001386:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001388:	2201      	movs	r2, #1
 800138a:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800138c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001390:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001392:	2208      	movs	r2, #8
 8001394:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001396:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001398:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800139c:	230a      	movs	r3, #10
 800139e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013a0:	f005 fefc 	bl	800719c <HAL_SPI_Init>
 80013a4:	bd08      	pop	{r3, pc}
 80013a6:	bf00      	nop
 80013a8:	20006210 	.word	0x20006210
 80013ac:	40013000 	.word	0x40013000

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b530      	push	{r4, r5, lr}
 80013b2:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b4:	2400      	movs	r4, #0
 80013b6:	940a      	str	r4, [sp, #40]	; 0x28
 80013b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80013ba:	940c      	str	r4, [sp, #48]	; 0x30
 80013bc:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013be:	9408      	str	r4, [sp, #32]
 80013c0:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	9401      	str	r4, [sp, #4]
 80013c4:	9402      	str	r4, [sp, #8]
 80013c6:	9403      	str	r4, [sp, #12]
 80013c8:	9404      	str	r4, [sp, #16]
 80013ca:	9405      	str	r4, [sp, #20]
 80013cc:	9406      	str	r4, [sp, #24]
 80013ce:	9407      	str	r4, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d0:	4d14      	ldr	r5, [pc, #80]	; (8001424 <MX_TIM2_Init+0x74>)
 80013d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d6:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 83;
 80013d8:	2353      	movs	r3, #83	; 0x53
 80013da:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 999999999;
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_TIM2_Init+0x78>)
 80013e0:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e6:	4628      	mov	r0, r5
 80013e8:	f002 fec8 	bl	800417c <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f2:	a90a      	add	r1, sp, #40	; 0x28
 80013f4:	4628      	mov	r0, r5
 80013f6:	f002 fff1 	bl	80043dc <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80013fa:	4628      	mov	r0, r5
 80013fc:	f002 feda 	bl	80041b4 <HAL_TIM_OC_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001404:	a908      	add	r1, sp, #32
 8001406:	4628      	mov	r0, r5
 8001408:	f003 f86c 	bl	80044e4 <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800140c:	9401      	str	r4, [sp, #4]
  sConfigOC.Pulse = 0;
 800140e:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001410:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001412:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001414:	4622      	mov	r2, r4
 8001416:	a901      	add	r1, sp, #4
 8001418:	4628      	mov	r0, r5
 800141a:	f002 ff33 	bl	8004284 <HAL_TIM_OC_ConfigChannel>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141e:	b00f      	add	sp, #60	; 0x3c
 8001420:	bd30      	pop	{r4, r5, pc}
 8001422:	bf00      	nop
 8001424:	200062c4 	.word	0x200062c4
 8001428:	3b9ac9ff 	.word	0x3b9ac9ff

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b530      	push	{r4, r5, lr}
 800142e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001430:	2230      	movs	r2, #48	; 0x30
 8001432:	2100      	movs	r1, #0
 8001434:	a808      	add	r0, sp, #32
 8001436:	f007 f9fd 	bl	8008834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143a:	2400      	movs	r4, #0
 800143c:	9403      	str	r4, [sp, #12]
 800143e:	9404      	str	r4, [sp, #16]
 8001440:	9405      	str	r4, [sp, #20]
 8001442:	9406      	str	r4, [sp, #24]
 8001444:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	9401      	str	r4, [sp, #4]
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <SystemClock_Config+0x94>)
 800144a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800144c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800145c:	9402      	str	r4, [sp, #8]
 800145e:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <SystemClock_Config+0x98>)
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001476:	2301      	movs	r3, #1
 8001478:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001480:	2502      	movs	r5, #2
 8001482:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001484:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001488:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800148a:	2308      	movs	r3, #8
 800148c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800148e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001492:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001494:	2304      	movs	r3, #4
 8001496:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001498:	2307      	movs	r3, #7
 800149a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	a808      	add	r0, sp, #32
 800149e:	f001 fed9 	bl	8003254 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a2:	230f      	movs	r3, #15
 80014a4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b0:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b2:	4629      	mov	r1, r5
 80014b4:	a803      	add	r0, sp, #12
 80014b6:	f002 f93f 	bl	8003738 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80014ba:	b015      	add	sp, #84	; 0x54
 80014bc:	bd30      	pop	{r4, r5, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b508      	push	{r3, lr}
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ca:	f002 fd05 	bl	8003ed8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ce:	f7ff ffad 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d2:	f7ff fe31 	bl	8001138 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d6:	f7ff fe93 	bl	8001200 <MX_DMA_Init>
  MX_TIM1_Init();
 80014da:	f7ff feb3 	bl	8001244 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014de:	f7ff ff07 	bl	80012f0 <MX_TIM3_Init>
  MX_SPI1_Init();
 80014e2:	f7ff ff45 	bl	8001370 <MX_SPI1_Init>
  MX_TIM2_Init();
 80014e6:	f7ff ff63 	bl	80013b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80014ea:	f004 fc2d 	bl	8005d48 <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HostIO */
  HostIOHandle = osThreadNew(StartDefaultTask, NULL, &HostIO_attributes);
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <main+0x3c>)
 80014f0:	2100      	movs	r1, #0
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <main+0x40>)
 80014f4:	f004 fc70 	bl	8005dd8 <osThreadNew>
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <main+0x44>)
 80014fa:	6018      	str	r0, [r3, #0]
    /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014fc:	f004 fc46 	bl	8005d8c <osKernelStart>
 8001500:	e7fe      	b.n	8001500 <main+0x38>
 8001502:	bf00      	nop
 8001504:	0800dd18 	.word	0x0800dd18
 8001508:	0800736d 	.word	0x0800736d
 800150c:	200059cc 	.word	0x200059cc

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8001514:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8001516:	2200      	movs	r2, #0
 8001518:	490d      	ldr	r1, [pc, #52]	; (8001550 <MX_USB_DEVICE_Init+0x3c>)
 800151a:	480e      	ldr	r0, [pc, #56]	; (8001554 <MX_USB_DEVICE_Init+0x40>)
 800151c:	f004 ffc2 	bl	80064a4 <USBD_Init>
 8001520:	b108      	cbz	r0, 8001526 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8001522:	f7ff fff5 	bl	8001510 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001526:	490c      	ldr	r1, [pc, #48]	; (8001558 <MX_USB_DEVICE_Init+0x44>)
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <MX_USB_DEVICE_Init+0x40>)
 800152a:	f004 ffd3 	bl	80064d4 <USBD_RegisterClass>
 800152e:	b108      	cbz	r0, 8001534 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8001530:	f7ff ffee 	bl	8001510 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8001534:	4909      	ldr	r1, [pc, #36]	; (800155c <MX_USB_DEVICE_Init+0x48>)
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <MX_USB_DEVICE_Init+0x40>)
 8001538:	f005 fde6 	bl	8007108 <USBD_CDC_RegisterInterface>
 800153c:	b108      	cbz	r0, 8001542 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800153e:	f7ff ffe7 	bl	8001510 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001542:	4804      	ldr	r0, [pc, #16]	; (8001554 <MX_USB_DEVICE_Init+0x40>)
 8001544:	f004 ffce 	bl	80064e4 <USBD_Start>
 8001548:	b108      	cbz	r0, 800154e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800154a:	f7ff ffe1 	bl	8001510 <Error_Handler>
 800154e:	bd08      	pop	{r3, pc}
 8001550:	20000004 	.word	0x20000004
 8001554:	200063c4 	.word	0x200063c4
 8001558:	200000b8 	.word	0x200000b8
 800155c:	20000054 	.word	0x20000054

08001560 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	2300      	movs	r3, #0
 8001566:	9303      	str	r3, [sp, #12]
 8001568:	9304      	str	r3, [sp, #16]
 800156a:	9305      	str	r3, [sp, #20]
 800156c:	9306      	str	r3, [sp, #24]
 800156e:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001570:	6803      	ldr	r3, [r0, #0]
 8001572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001576:	d139      	bne.n	80015ec <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	2500      	movs	r5, #0
 800157a:	9501      	str	r5, [sp, #4]
 800157c:	4c1c      	ldr	r4, [pc, #112]	; (80015f0 <HAL_PCD_MspInit+0x90>)
 800157e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6323      	str	r3, [r4, #48]	; 0x30
 8001586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	9b01      	ldr	r3, [sp, #4]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001590:	ae08      	add	r6, sp, #32
 8001592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001596:	f846 3d14 	str.w	r3, [r6, #-20]!
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	4f16      	ldr	r7, [pc, #88]	; (80015f4 <HAL_PCD_MspInit+0x94>)
 800159c:	4631      	mov	r1, r6
 800159e:	4638      	mov	r0, r7
 80015a0:	f002 f9b2 	bl	8003908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015b4:	230a      	movs	r3, #10
 80015b6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	4631      	mov	r1, r6
 80015ba:	4638      	mov	r0, r7
 80015bc:	f002 f9a4 	bl	8003908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c6:	6363      	str	r3, [r4, #52]	; 0x34
 80015c8:	9502      	str	r5, [sp, #8]
 80015ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6463      	str	r3, [r4, #68]	; 0x44
 80015d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80015dc:	462a      	mov	r2, r5
 80015de:	4629      	mov	r1, r5
 80015e0:	2043      	movs	r0, #67	; 0x43
 80015e2:	f002 fc39 	bl	8003e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80015e6:	2043      	movs	r0, #67	; 0x43
 80015e8:	f002 fc68 	bl	8003ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015ec:	b009      	add	sp, #36	; 0x24
 80015ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80015f8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80015fa:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80015fe:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001602:	f004 ff8b 	bl	800651c <USBD_LL_SetupStage>
 8001606:	bd08      	pop	{r3, pc}

08001608 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001608:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800160a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800160e:	0093      	lsls	r3, r2, #2
 8001610:	4403      	add	r3, r0
 8001612:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001616:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800161a:	f004 ffad 	bl	8006578 <USBD_LL_DataOutStage>
 800161e:	bd08      	pop	{r3, pc}

08001620 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001620:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001622:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001626:	0093      	lsls	r3, r2, #2
 8001628:	4403      	add	r3, r0
 800162a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800162c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001630:	f004 ffec 	bl	800660c <USBD_LL_DataInStage>
 8001634:	bd08      	pop	{r3, pc}
 8001636:	bf00      	nop

08001638 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001638:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800163a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800163e:	f005 f889 	bl	8006754 <USBD_LL_SOF>
 8001642:	bd08      	pop	{r3, pc}

08001644 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8001644:	b510      	push	{r4, lr}
 8001646:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8001648:	68c3      	ldr	r3, [r0, #12]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d001      	beq.n	8001652 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800164e:	f7ff ff5f 	bl	8001510 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001652:	2101      	movs	r1, #1
 8001654:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8001658:	f005 f868 	bl	800672c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800165c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8001660:	f005 f83c 	bl	80066dc <USBD_LL_Reset>
 8001664:	bd10      	pop	{r4, pc}
 8001666:	bf00      	nop

08001668 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001668:	b510      	push	{r4, lr}
 800166a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800166c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001670:	f005 f860 	bl	8006734 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001674:	6822      	ldr	r2, [r4, #0]
 8001676:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001682:	6a23      	ldr	r3, [r4, #32]
 8001684:	b123      	cbz	r3, 8001690 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001686:	4a03      	ldr	r2, [pc, #12]	; (8001694 <HAL_PCD_SuspendCallback+0x2c>)
 8001688:	6913      	ldr	r3, [r2, #16]
 800168a:	f043 0306 	orr.w	r3, r3, #6
 800168e:	6113      	str	r3, [r2, #16]
 8001690:	bd10      	pop	{r4, pc}
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800169a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800169e:	f005 f853 	bl	8006748 <USBD_LL_Resume>
 80016a2:	bd08      	pop	{r3, pc}

080016a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80016a4:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80016a6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80016aa:	f005 f861 	bl	8006770 <USBD_LL_IsoOUTIncomplete>
 80016ae:	bd08      	pop	{r3, pc}

080016b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80016b0:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80016b2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80016b6:	f005 f859 	bl	800676c <USBD_LL_IsoINIncomplete>
 80016ba:	bd08      	pop	{r3, pc}

080016bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80016bc:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80016be:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80016c2:	f005 f857 	bl	8006774 <USBD_LL_DevConnected>
 80016c6:	bd08      	pop	{r3, pc}

080016c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80016c8:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80016ca:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80016ce:	f005 f853 	bl	8006778 <USBD_LL_DevDisconnected>
 80016d2:	bd08      	pop	{r3, pc}

080016d4 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80016d4:	7803      	ldrb	r3, [r0, #0]
 80016d6:	bb63      	cbnz	r3, 8001732 <USBD_LL_Init+0x5e>
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80016d8:	b510      	push	{r4, lr}
 80016da:	4603      	mov	r3, r0
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80016dc:	4816      	ldr	r0, [pc, #88]	; (8001738 <USBD_LL_Init+0x64>)
 80016de:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80016e2:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016ea:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016f0:	2202      	movs	r2, #2
 80016f2:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016f8:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80016fa:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016fc:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016fe:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001700:	2201      	movs	r2, #1
 8001702:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001704:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001706:	f000 fb29 	bl	8001d5c <HAL_PCD_Init>
 800170a:	b108      	cbz	r0, 8001710 <USBD_LL_Init+0x3c>
  {
    Error_Handler( );
 800170c:	f7ff ff00 	bl	8001510 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8001710:	4c09      	ldr	r4, [pc, #36]	; (8001738 <USBD_LL_Init+0x64>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	4620      	mov	r0, r4
 8001716:	f001 f835 	bl	8002784 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	2100      	movs	r1, #0
 800171e:	4620      	mov	r0, r4
 8001720:	f001 f80c 	bl	800273c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	2101      	movs	r1, #1
 8001728:	4620      	mov	r0, r4
 800172a:	f001 f807 	bl	800273c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 800172e:	2000      	movs	r0, #0
 8001730:	bd10      	pop	{r4, pc}
 8001732:	2000      	movs	r0, #0
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20006660 	.word	0x20006660

0800173c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800173c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
  
  if((ep_addr & 0x80) == 0x80)
 8001740:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001744:	d008      	beq.n	8001758 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001746:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800174a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800174e:	008b      	lsls	r3, r1, #2
 8001750:	4413      	add	r3, r2
 8001752:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8001756:	4770      	bx	lr
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8001758:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800175c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001760:	008b      	lsls	r3, r1, #2
 8001762:	4413      	add	r3, r2
 8001764:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop

0800176c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800176c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800176e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8001772:	f000 ff37 	bl	80025e4 <HAL_PCD_EP_GetRxCount>
}
 8001776:	bd08      	pop	{r3, pc}

08001778 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8001778:	b110      	cbz	r0, 8001780 <USBD_Get_USB_Status+0x8>
 800177a:	2802      	cmp	r0, #2
 800177c:	d002      	beq.n	8001784 <USBD_Get_USB_Status+0xc>
 800177e:	e003      	b.n	8001788 <USBD_Get_USB_Status+0x10>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001780:	2000      	movs	r0, #0
 8001782:	4770      	bx	lr
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001784:	2001      	movs	r0, #1
    break;
 8001786:	4770      	bx	lr
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001788:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800178a:	4770      	bx	lr

0800178c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800178c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800178e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8001792:	f000 fb77 	bl	8001e84 <HAL_PCD_Start>
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8001796:	f7ff ffef 	bl	8001778 <USBD_Get_USB_Status>
  
  return usb_status;
}
 800179a:	bd08      	pop	{r3, pc}

0800179c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800179c:	b510      	push	{r4, lr}
 800179e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80017a0:	4613      	mov	r3, r2
 80017a2:	4622      	mov	r2, r4
 80017a4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80017a8:	f000 fe76 	bl	8002498 <HAL_PCD_EP_Open>

  usb_status =  USBD_Get_USB_Status(hal_status);
 80017ac:	f7ff ffe4 	bl	8001778 <USBD_Get_USB_Status>
  
  return usb_status;
}
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	bf00      	nop

080017b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80017b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80017b6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80017ba:	f000 fead 	bl	8002518 <HAL_PCD_EP_Close>
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80017be:	f7ff ffdb 	bl	8001778 <USBD_Get_USB_Status>
 
  return usb_status;  
}
 80017c2:	bd08      	pop	{r3, pc}

080017c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80017c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80017c6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80017ca:	f000 ff3f 	bl	800264c <HAL_PCD_EP_SetStall>

  usb_status =  USBD_Get_USB_Status(hal_status);
 80017ce:	f7ff ffd3 	bl	8001778 <USBD_Get_USB_Status>
  
  return usb_status;  
}
 80017d2:	bd08      	pop	{r3, pc}

080017d4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80017d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80017d6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80017da:	f000 ff77 	bl	80026cc <HAL_PCD_EP_ClrStall>
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80017de:	f7ff ffcb 	bl	8001778 <USBD_Get_USB_Status>
  
  return usb_status; 
}
 80017e2:	bd08      	pop	{r3, pc}

080017e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80017e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80017e6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80017ea:	f000 fe41 	bl	8002470 <HAL_PCD_SetAddress>
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80017ee:	f7ff ffc3 	bl	8001778 <USBD_Get_USB_Status>
  
  return usb_status;  
}
 80017f2:	bd08      	pop	{r3, pc}

080017f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80017f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80017f6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80017fa:	f000 fefd 	bl	80025f8 <HAL_PCD_EP_Transmit>
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80017fe:	f7ff ffbb 	bl	8001778 <USBD_Get_USB_Status>
  
  return usb_status;    
}
 8001802:	bd08      	pop	{r3, pc}

08001804 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8001804:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001806:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800180a:	f000 febd 	bl	8002588 <HAL_PCD_EP_Receive>
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800180e:	f7ff ffb3 	bl	8001778 <USBD_Get_USB_Status>
  
  return usb_status; 
}
 8001812:	bd08      	pop	{r3, pc}

08001814 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001814:	2312      	movs	r3, #18
 8001816:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8001818:	4800      	ldr	r0, [pc, #0]	; (800181c <USBD_FS_DeviceDescriptor+0x8>)
 800181a:	4770      	bx	lr
 800181c:	20000040 	.word	0x20000040

08001820 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001820:	2304      	movs	r3, #4
 8001822:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8001824:	4800      	ldr	r0, [pc, #0]	; (8001828 <USBD_FS_LangIDStrDescriptor+0x8>)
 8001826:	4770      	bx	lr
 8001828:	20000020 	.word	0x20000020

0800182c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800182c:	b430      	push	{r4, r5}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800182e:	2300      	movs	r3, #0
 8001830:	e010      	b.n	8001854 <IntToUnicode+0x28>
  {
    if (((value >> 28)) < 0xA)
 8001832:	0f04      	lsrs	r4, r0, #28
 8001834:	2c09      	cmp	r4, #9
 8001836:	d803      	bhi.n	8001840 <IntToUnicode+0x14>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001838:	3430      	adds	r4, #48	; 0x30
 800183a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800183e:	e002      	b.n	8001846 <IntToUnicode+0x1a>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001840:	3437      	adds	r4, #55	; 0x37
 8001842:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8001846:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8001848:	005c      	lsls	r4, r3, #1
 800184a:	3401      	adds	r4, #1
 800184c:	2500      	movs	r5, #0
 800184e:	550d      	strb	r5, [r1, r4]
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8001850:	3301      	adds	r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4293      	cmp	r3, r2
 8001856:	d3ec      	bcc.n	8001832 <IntToUnicode+0x6>

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
  }
}
 8001858:	bc30      	pop	{r4, r5}
 800185a:	4770      	bx	lr

0800185c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800185c:	b538      	push	{r3, r4, r5, lr}
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <Get_SerialNum+0x2c>)
 8001860:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <Get_SerialNum+0x30>)
 8001864:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8001866:	3204      	adds	r2, #4
 8001868:	6810      	ldr	r0, [r2, #0]

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
 800186a:	1818      	adds	r0, r3, r0
 800186c:	d00a      	beq.n	8001884 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800186e:	4d08      	ldr	r5, [pc, #32]	; (8001890 <Get_SerialNum+0x34>)
 8001870:	2208      	movs	r2, #8
 8001872:	1ca9      	adds	r1, r5, #2
 8001874:	f7ff ffda 	bl	800182c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8001878:	2204      	movs	r2, #4
 800187a:	f105 0112 	add.w	r1, r5, #18
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff ffd4 	bl	800182c <IntToUnicode>
 8001884:	bd38      	pop	{r3, r4, r5, pc}
 8001886:	bf00      	nop
 8001888:	1fff7a10 	.word	0x1fff7a10
 800188c:	1fff7a14 	.word	0x1fff7a14
 8001890:	20000024 	.word	0x20000024

08001894 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001894:	b508      	push	{r3, lr}
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8001896:	231a      	movs	r3, #26
 8001898:	800b      	strh	r3, [r1, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800189a:	f7ff ffdf 	bl	800185c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
}
 800189e:	4801      	ldr	r0, [pc, #4]	; (80018a4 <USBD_FS_SerialStrDescriptor+0x10>)
 80018a0:	bd08      	pop	{r3, pc}
 80018a2:	bf00      	nop
 80018a4:	20000024 	.word	0x20000024

080018a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80018a8:	b508      	push	{r3, lr}
 80018aa:	460a      	mov	r2, r1
  if(speed == 0)
 80018ac:	b920      	cbnz	r0, 80018b8 <USBD_FS_ProductStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80018ae:	4905      	ldr	r1, [pc, #20]	; (80018c4 <USBD_FS_ProductStrDescriptor+0x1c>)
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <USBD_FS_ProductStrDescriptor+0x20>)
 80018b2:	f005 fa75 	bl	8006da0 <USBD_GetString>
 80018b6:	e003      	b.n	80018c0 <USBD_FS_ProductStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80018b8:	4902      	ldr	r1, [pc, #8]	; (80018c4 <USBD_FS_ProductStrDescriptor+0x1c>)
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <USBD_FS_ProductStrDescriptor+0x20>)
 80018bc:	f005 fa70 	bl	8006da0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 80018c0:	4800      	ldr	r0, [pc, #0]	; (80018c4 <USBD_FS_ProductStrDescriptor+0x1c>)
 80018c2:	bd08      	pop	{r3, pc}
 80018c4:	20006a68 	.word	0x20006a68
 80018c8:	0800dd44 	.word	0x0800dd44

080018cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80018cc:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80018ce:	4c04      	ldr	r4, [pc, #16]	; (80018e0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80018d0:	460a      	mov	r2, r1
 80018d2:	4621      	mov	r1, r4
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80018d6:	f005 fa63 	bl	8006da0 <USBD_GetString>
  return USBD_StrDesc;
}
 80018da:	4620      	mov	r0, r4
 80018dc:	bd10      	pop	{r4, pc}
 80018de:	bf00      	nop
 80018e0:	20006a68 	.word	0x20006a68
 80018e4:	0800dd5c 	.word	0x0800dd5c

080018e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80018e8:	b508      	push	{r3, lr}
 80018ea:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80018ec:	b920      	cbnz	r0, 80018f8 <USBD_FS_ConfigStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80018ee:	4905      	ldr	r1, [pc, #20]	; (8001904 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <USBD_FS_ConfigStrDescriptor+0x20>)
 80018f2:	f005 fa55 	bl	8006da0 <USBD_GetString>
 80018f6:	e003      	b.n	8001900 <USBD_FS_ConfigStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80018f8:	4902      	ldr	r1, [pc, #8]	; (8001904 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <USBD_FS_ConfigStrDescriptor+0x20>)
 80018fc:	f005 fa50 	bl	8006da0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8001900:	4800      	ldr	r0, [pc, #0]	; (8001904 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8001902:	bd08      	pop	{r3, pc}
 8001904:	20006a68 	.word	0x20006a68
 8001908:	0800dd70 	.word	0x0800dd70

0800190c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800190c:	b508      	push	{r3, lr}
 800190e:	460a      	mov	r2, r1
  if(speed == 0)
 8001910:	b920      	cbnz	r0, 800191c <USBD_FS_InterfaceStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001912:	4905      	ldr	r1, [pc, #20]	; (8001928 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8001916:	f005 fa43 	bl	8006da0 <USBD_GetString>
 800191a:	e003      	b.n	8001924 <USBD_FS_InterfaceStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800191c:	4902      	ldr	r1, [pc, #8]	; (8001928 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800191e:	4803      	ldr	r0, [pc, #12]	; (800192c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8001920:	f005 fa3e 	bl	8006da0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8001924:	4800      	ldr	r0, [pc, #0]	; (8001928 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8001926:	bd08      	pop	{r3, pc}
 8001928:	20006a68 	.word	0x20006a68
 800192c:	0800dd7c 	.word	0x0800dd7c

08001930 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
    return ( USBD_OK );
  /* USER CODE END 4 */
}
 8001930:	2000      	movs	r0, #0
 8001932:	4770      	bx	lr

08001934 <CDC_Control_FS>:
        break;
    }

    return ( USBD_OK );
  /* USER CODE END 5 */
}
 8001934:	2000      	movs	r0, #0
 8001936:	4770      	bx	lr

08001938 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8001938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
    void CdcReceiveHandler( char* Buf, size_t len );
    CdcReceiveHandler( (char*)Buf, (size_t)*Len );
 800193a:	6809      	ldr	r1, [r1, #0]
 800193c:	f006 fc02 	bl	8008144 <CdcReceiveHandler>
    return ( USBD_OK );
  /* USER CODE END 6 */
}
 8001940:	2000      	movs	r0, #0
 8001942:	bd08      	pop	{r3, pc}

08001944 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8001944:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, UserTxBufferFS, 0 );
 8001946:	4c06      	ldr	r4, [pc, #24]	; (8001960 <CDC_Init_FS+0x1c>)
 8001948:	2200      	movs	r2, #0
 800194a:	4906      	ldr	r1, [pc, #24]	; (8001964 <CDC_Init_FS+0x20>)
 800194c:	4620      	mov	r0, r4
 800194e:	f005 fbe3 	bl	8007118 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, UserRxBufferFS );
 8001952:	4905      	ldr	r1, [pc, #20]	; (8001968 <CDC_Init_FS+0x24>)
 8001954:	4620      	mov	r0, r4
 8001956:	f005 fbe7 	bl	8007128 <USBD_CDC_SetRxBuffer>
    return ( USBD_OK );
  /* USER CODE END 3 */
}
 800195a:	2000      	movs	r0, #0
 800195c:	bd10      	pop	{r4, pc}
 800195e:	bf00      	nop
 8001960:	200063c4 	.word	0x200063c4
 8001964:	20006d68 	.word	0x20006d68
 8001968:	20006c68 	.word	0x20006c68

0800196c <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <CDC_Transmit_FS+0x28>)
 800196e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
    if ( hcdc->TxState != 0 ) {
 8001972:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001976:	b953      	cbnz	r3, 800198e <CDC_Transmit_FS+0x22>
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8001978:	b510      	push	{r4, lr}
 800197a:	460a      	mov	r2, r1
 800197c:	4601      	mov	r1, r0
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
 800197e:	4c05      	ldr	r4, [pc, #20]	; (8001994 <CDC_Transmit_FS+0x28>)
 8001980:	4620      	mov	r0, r4
 8001982:	f005 fbc9 	bl	8007118 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8001986:	4620      	mov	r0, r4
 8001988:	f005 fbd4 	bl	8007134 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
 800198c:	bd10      	pop	{r4, pc}
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
 800198e:	2001      	movs	r0, #1
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200063c4 	.word	0x200063c4

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <HardFault_Handler>:
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
    *(volatile int*)0;
 800199c:	2300      	movs	r3, #0
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	e7fe      	b.n	80019a0 <HardFault_Handler+0x4>
 80019a2:	bf00      	nop

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler>
 80019a6:	bf00      	nop

080019a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a8:	e7fe      	b.n	80019a8 <BusFault_Handler>
 80019aa:	bf00      	nop

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler>
 80019ae:	bf00      	nop

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <TIM1_UP_TIM10_IRQHandler>:
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim1, TIM_IT_UPDATE );
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 0201 	mvn.w	r2, #1
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	4770      	bx	lr
 80019c0:	200059d0 	.word	0x200059d0

080019c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80019c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
    HAL_IncTick();
 80019c6:	f002 faa1 	bl	8003f0c <HAL_IncTick>
    __HAL_TIM_CLEAR_FLAG( &htim11, TIM_IT_UPDATE );
 80019ca:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f06f 0201 	mvn.w	r2, #1
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	bd08      	pop	{r3, pc}
 80019d6:	bf00      	nop
 80019d8:	20006dac 	.word	0x20006dac

080019dc <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim3, TIM_IT_UPDATE );
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <TIM3_IRQHandler+0xc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0201 	mvn.w	r2, #1
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	4770      	bx	lr
 80019e8:	2000598c 	.word	0x2000598c

080019ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80019ee:	4802      	ldr	r0, [pc, #8]	; (80019f8 <DMA2_Stream2_IRQHandler+0xc>)
 80019f0:	f002 f934 	bl	8003c5c <HAL_DMA_IRQHandler>
 80019f4:	bd08      	pop	{r3, pc}
 80019f6:	bf00      	nop
 80019f8:	20006304 	.word	0x20006304

080019fc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <DMA2_Stream3_IRQHandler+0xc>)
 8001a00:	f002 f92c 	bl	8003c5c <HAL_DMA_IRQHandler>
 8001a04:	bd08      	pop	{r3, pc}
 8001a06:	bf00      	nop
 8001a08:	20006364 	.word	0x20006364

08001a0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a0e:	4802      	ldr	r0, [pc, #8]	; (8001a18 <OTG_FS_IRQHandler+0xc>)
 8001a10:	f000 fb08 	bl	8002024 <HAL_PCD_IRQHandler>
 8001a14:	bd08      	pop	{r3, pc}
 8001a16:	bf00      	nop
 8001a18:	20006660 	.word	0x20006660

08001a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b500      	push	{lr}
 8001a1e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a20:	2200      	movs	r2, #0
 8001a22:	9200      	str	r2, [sp, #0]
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_MspInit+0x40>)
 8001a26:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a28:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001a2c:	6459      	str	r1, [r3, #68]	; 0x44
 8001a2e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a30:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001a34:	9100      	str	r1, [sp, #0]
 8001a36:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a38:	9201      	str	r2, [sp, #4]
 8001a3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a3c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001a40:	6419      	str	r1, [r3, #64]	; 0x40
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	f06f 0001 	mvn.w	r0, #1
 8001a52:	f002 fa01 	bl	8003e58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a56:	b003      	add	sp, #12
 8001a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a60:	b530      	push	{r4, r5, lr}
 8001a62:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	2300      	movs	r3, #0
 8001a66:	9303      	str	r3, [sp, #12]
 8001a68:	9304      	str	r3, [sp, #16]
 8001a6a:	9305      	str	r3, [sp, #20]
 8001a6c:	9306      	str	r3, [sp, #24]
 8001a6e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001a70:	6802      	ldr	r2, [r0, #0]
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d155      	bne.n	8001b24 <HAL_SPI_MspInit+0xc4>
 8001a78:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	9501      	str	r5, [sp, #4]
 8001a7e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
 8001a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a90:	9201      	str	r2, [sp, #4]
 8001a92:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	9502      	str	r5, [sp, #8]
 8001a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	9302      	str	r3, [sp, #8]
 8001aa6:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aa8:	23e0      	movs	r3, #224	; 0xe0
 8001aaa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ab4:	2305      	movs	r3, #5
 8001ab6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	a903      	add	r1, sp, #12
 8001aba:	481c      	ldr	r0, [pc, #112]	; (8001b2c <HAL_SPI_MspInit+0xcc>)
 8001abc:	f001 ff24 	bl	8003908 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8001ac0:	481b      	ldr	r0, [pc, #108]	; (8001b30 <HAL_SPI_MspInit+0xd0>)
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_SPI_MspInit+0xd4>)
 8001ac4:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001ac6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001aca:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001acc:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ace:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad4:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad6:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad8:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001ada:	61c5      	str	r5, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001adc:	6205      	str	r5, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ade:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001ae0:	f002 f854 	bl	8003b8c <HAL_DMA_Init>
 8001ae4:	b108      	cbz	r0, 8001aea <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
 8001ae6:	f7ff fd13 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_SPI_MspInit+0xd0>)
 8001aec:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001aee:	639c      	str	r4, [r3, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001af0:	4811      	ldr	r0, [pc, #68]	; (8001b38 <HAL_SPI_MspInit+0xd8>)
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_SPI_MspInit+0xdc>)
 8001af4:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001af6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001afa:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b08:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0a:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0c:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b0e:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b10:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b12:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b14:	f002 f83a 	bl	8003b8c <HAL_DMA_Init>
 8001b18:	b108      	cbz	r0, 8001b1e <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8001b1a:	f7ff fcf9 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_SPI_MspInit+0xd8>)
 8001b20:	64a3      	str	r3, [r4, #72]	; 0x48
 8001b22:	639c      	str	r4, [r3, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b24:	b009      	add	sp, #36	; 0x24
 8001b26:	bd30      	pop	{r4, r5, pc}
 8001b28:	40013000 	.word	0x40013000
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	20006304 	.word	0x20006304
 8001b34:	40026440 	.word	0x40026440
 8001b38:	20006364 	.word	0x20006364
 8001b3c:	40026458 	.word	0x40026458

08001b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b40:	b510      	push	{r4, lr}
 8001b42:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8001b44:	6803      	ldr	r3, [r0, #0]
 8001b46:	4a28      	ldr	r2, [pc, #160]	; (8001be8 <HAL_TIM_Base_MspInit+0xa8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d11c      	bne.n	8001b86 <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	9401      	str	r4, [sp, #4]
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_TIM_Base_MspInit+0xac>)
 8001b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b64:	4622      	mov	r2, r4
 8001b66:	4621      	mov	r1, r4
 8001b68:	2019      	movs	r0, #25
 8001b6a:	f002 f975 	bl	8003e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b6e:	2019      	movs	r0, #25
 8001b70:	f002 f9a4 	bl	8003ebc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b74:	4622      	mov	r2, r4
 8001b76:	4621      	mov	r1, r4
 8001b78:	201a      	movs	r0, #26
 8001b7a:	f002 f96d 	bl	8003e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b7e:	201a      	movs	r0, #26
 8001b80:	f002 f99c 	bl	8003ebc <HAL_NVIC_EnableIRQ>
 8001b84:	e02d      	b.n	8001be2 <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8a:	d114      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	9202      	str	r2, [sp, #8]
 8001b90:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001b94:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b96:	f041 0101 	orr.w	r1, r1, #1
 8001b9a:	6419      	str	r1, [r3, #64]	; 0x40
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	9b02      	ldr	r3, [sp, #8]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ba6:	2105      	movs	r1, #5
 8001ba8:	201c      	movs	r0, #28
 8001baa:	f002 f955 	bl	8003e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bae:	201c      	movs	r0, #28
 8001bb0:	f002 f984 	bl	8003ebc <HAL_NVIC_EnableIRQ>
 8001bb4:	e015      	b.n	8001be2 <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d112      	bne.n	8001be2 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	9103      	str	r1, [sp, #12]
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_TIM_Base_MspInit+0xac>)
 8001bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc4:	f042 0202 	orr.w	r2, r2, #2
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	9303      	str	r3, [sp, #12]
 8001bd2:	9b03      	ldr	r3, [sp, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	201d      	movs	r0, #29
 8001bd8:	f002 f93e 	bl	8003e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bdc:	201d      	movs	r0, #29
 8001bde:	f002 f96d 	bl	8003ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001be2:	b004      	add	sp, #16
 8001be4:	bd10      	pop	{r4, pc}
 8001be6:	bf00      	nop
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40000400 	.word	0x40000400

08001bf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf4:	b500      	push	{lr}
 8001bf6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9303      	str	r3, [sp, #12]
 8001bfc:	9304      	str	r3, [sp, #16]
 8001bfe:	9305      	str	r3, [sp, #20]
 8001c00:	9306      	str	r3, [sp, #24]
 8001c02:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8001c04:	6803      	ldr	r3, [r0, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_TIM_MspPostInit+0x80>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d117      	bne.n	8001c3c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_TIM_MspPostInit+0x84>)
 8001c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP1_Pin;
 8001c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP1_GPIO_Port, &GPIO_InitStruct);
 8001c32:	a903      	add	r1, sp, #12
 8001c34:	4811      	ldr	r0, [pc, #68]	; (8001c7c <HAL_TIM_MspPostInit+0x88>)
 8001c36:	f001 fe67 	bl	8003908 <HAL_GPIO_Init>
 8001c3a:	e017      	b.n	8001c6c <HAL_TIM_MspPostInit+0x78>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001c3c:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <HAL_TIM_MspPostInit+0x8c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d114      	bne.n	8001c6c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_TIM_MspPostInit+0x84>)
 8001c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4a:	f042 0202 	orr.w	r2, r2, #2
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	9b02      	ldr	r3, [sp, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP2_Pin;
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c62:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP2_GPIO_Port, &GPIO_InitStruct);
 8001c64:	a903      	add	r1, sp, #12
 8001c66:	4807      	ldr	r0, [pc, #28]	; (8001c84 <HAL_TIM_MspPostInit+0x90>)
 8001c68:	f001 fe4e 	bl	8003908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c6c:	b009      	add	sp, #36	; 0x24
 8001c6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c72:	bf00      	nop
 8001c74:	40010000 	.word	0x40010000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40020400 	.word	0x40020400

08001c88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c8c:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8e:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001c92:	00ca      	lsls	r2, r1, #3
 8001c94:	1a52      	subs	r2, r2, r1
 8001c96:	0093      	lsls	r3, r2, #2
 8001c98:	4403      	add	r3, r0
 8001c9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d856      	bhi.n	8001d50 <PCD_WriteEmptyTxFifo+0xc8>
 8001ca2:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ca4:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001ca6:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8001caa:	00a2      	lsls	r2, r4, #2
 8001cac:	4402      	add	r2, r0
 8001cae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d800      	bhi.n	8001cb6 <PCD_WriteEmptyTxFifo+0x2e>
  if (ep->xfer_count > ep->xfer_len)
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	4607      	mov	r7, r0
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001cba:	f102 0a03 	add.w	sl, r2, #3
 8001cbe:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cc2:	e01e      	b.n	8001d02 <PCD_WriteEmptyTxFifo+0x7a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cc4:	1a5b      	subs	r3, r3, r1

    if (len > ep->maxpacket)
 8001cc6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001cca:	008a      	lsls	r2, r1, #2
 8001ccc:	443a      	add	r2, r7
 8001cce:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8001cd0:	42b3      	cmp	r3, r6
 8001cd2:	d800      	bhi.n	8001cd6 <PCD_WriteEmptyTxFifo+0x4e>

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cd4:	461e      	mov	r6, r3

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001cd6:	f106 0a03 	add.w	sl, r6, #3
 8001cda:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cde:	00e3      	lsls	r3, r4, #3
 8001ce0:	1b1b      	subs	r3, r3, r4
 8001ce2:	009d      	lsls	r5, r3, #2
 8001ce4:	443d      	add	r5, r7
 8001ce6:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001ce8:	7c3b      	ldrb	r3, [r7, #16]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	b2b3      	uxth	r3, r6
 8001cee:	b2e2      	uxtb	r2, r4
 8001cf0:	4640      	mov	r0, r8
 8001cf2:	f001 f87b 	bl	8002dec <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001cf6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001cf8:	4433      	add	r3, r6
 8001cfa:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001cfc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001cfe:	441e      	add	r6, r3
 8001d00:	656e      	str	r6, [r5, #84]	; 0x54
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d02:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8001d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	459a      	cmp	sl, r3
 8001d10:	d809      	bhi.n	8001d26 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d12:	00e3      	lsls	r3, r4, #3
 8001d14:	1b1b      	subs	r3, r3, r4
 8001d16:	009a      	lsls	r2, r3, #2
 8001d18:	443a      	add	r2, r7
 8001d1a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001d1c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d1e:	4299      	cmp	r1, r3
 8001d20:	d201      	bcs.n	8001d26 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ce      	bne.n	8001cc4 <PCD_WriteEmptyTxFifo+0x3c>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d26:	00e3      	lsls	r3, r4, #3
 8001d28:	1b1b      	subs	r3, r3, r4
 8001d2a:	0098      	lsls	r0, r3, #2
 8001d2c:	4407      	add	r7, r0
 8001d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d80e      	bhi.n	8001d54 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d36:	f004 040f 	and.w	r4, r4, #15
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	fa03 f404 	lsl.w	r4, r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d40:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 8001d44:	ea23 0404 	bic.w	r4, r3, r4
 8001d48:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	e002      	b.n	8001d56 <PCD_WriteEmptyTxFifo+0xce>

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
  {
    return HAL_ERROR;
 8001d50:	2001      	movs	r0, #1
 8001d52:	e000      	b.n	8001d56 <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
  }

  return HAL_OK;
 8001d54:	2000      	movs	r0, #0
}
 8001d56:	b002      	add	sp, #8
 8001d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001d5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5e:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d60:	2800      	cmp	r0, #0
 8001d62:	f000 808a 	beq.w	8001e7a <HAL_PCD_Init+0x11e>
 8001d66:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d68:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d6a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001d6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001d72:	d104      	bne.n	8001d7e <HAL_PCD_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d7a:	f7ff fbf1 	bl	8001560 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d84:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001d86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d8a:	d101      	bne.n	8001d90 <HAL_PCD_Init+0x34>
  {
    hpcd->Init.dma_enable = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d90:	6820      	ldr	r0, [r4, #0]
 8001d92:	f000 fddb 	bl	800294c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d96:	4625      	mov	r5, r4
 8001d98:	f855 7b10 	ldr.w	r7, [r5], #16
 8001d9c:	466e      	mov	r6, sp
 8001d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001da6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001daa:	e886 0003 	stmia.w	r6, {r0, r1}
 8001dae:	1d23      	adds	r3, r4, #4
 8001db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db2:	4638      	mov	r0, r7
 8001db4:	f000 fd0a 	bl	80027cc <USB_CoreInit>
 8001db8:	b120      	cbz	r0, 8001dc4 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001dc0:	2501      	movs	r5, #1
 8001dc2:	e05b      	b.n	8001e7c <HAL_PCD_Init+0x120>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	6820      	ldr	r0, [r4, #0]
 8001dc8:	f000 fdc6 	bl	8002958 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e015      	b.n	8001dfc <HAL_PCD_Init+0xa0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dd0:	00d9      	lsls	r1, r3, #3
 8001dd2:	1ac8      	subs	r0, r1, r3
 8001dd4:	0082      	lsls	r2, r0, #2
 8001dd6:	4422      	add	r2, r4
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001dde:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001de2:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de6:	2000      	movs	r0, #0
 8001de8:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dec:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dee:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001df0:	1aca      	subs	r2, r1, r3
 8001df2:	0091      	lsls	r1, r2, #2
 8001df4:	4421      	add	r1, r4
 8001df6:	6508      	str	r0, [r1, #80]	; 0x50

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	6865      	ldr	r5, [r4, #4]
 8001dfe:	42ab      	cmp	r3, r5
 8001e00:	d3e6      	bcc.n	8001dd0 <HAL_PCD_Init+0x74>
 8001e02:	2300      	movs	r3, #0
 8001e04:	e015      	b.n	8001e32 <HAL_PCD_Init+0xd6>
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e06:	00d8      	lsls	r0, r3, #3
 8001e08:	1ac1      	subs	r1, r0, r3
 8001e0a:	008a      	lsls	r2, r1, #2
 8001e0c:	4422      	add	r2, r4
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001e14:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e18:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e1c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e20:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e24:	1ac2      	subs	r2, r0, r3
 8001e26:	0090      	lsls	r0, r2, #2
 8001e28:	4420      	add	r0, r4
 8001e2a:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	429d      	cmp	r5, r3
 8001e34:	d8e7      	bhi.n	8001e06 <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e36:	4625      	mov	r5, r4
 8001e38:	f855 7b10 	ldr.w	r7, [r5], #16
 8001e3c:	466e      	mov	r6, sp
 8001e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e4a:	e886 0003 	stmia.w	r6, {r0, r1}
 8001e4e:	1d23      	adds	r3, r4, #4
 8001e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e52:	4638      	mov	r0, r7
 8001e54:	f000 fdc6 	bl	80029e4 <USB_DevInit>
 8001e58:	4605      	mov	r5, r0
 8001e5a:	b120      	cbz	r0, 8001e66 <HAL_PCD_Init+0x10a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001e62:	2501      	movs	r5, #1
 8001e64:	e00a      	b.n	8001e7c <HAL_PCD_Init+0x120>
  }

  hpcd->USB_Address = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e72:	6820      	ldr	r0, [r4, #0]
 8001e74:	f001 f960 	bl	8003138 <USB_DevDisconnect>

  return HAL_OK;
 8001e78:	e000      	b.n	8001e7c <HAL_PCD_Init+0x120>
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8001e7a:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	b00b      	add	sp, #44	; 0x2c
 8001e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e82:	bf00      	nop

08001e84 <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e84:	6802      	ldr	r2, [r0, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001e86:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d018      	beq.n	8001ec0 <HAL_PCD_Start+0x3c>
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e8e:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001e90:	2301      	movs	r3, #1
 8001e92:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_PCD_Start+0x26>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e9c:	6983      	ldr	r3, [r0, #24]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d003      	beq.n	8001eaa <HAL_PCD_Start+0x26>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ea2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6393      	str	r3, [r2, #56]	; 0x38
 8001eaa:	4604      	mov	r4, r0
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001eac:	6800      	ldr	r0, [r0, #0]
 8001eae:	f001 f937 	bl	8003120 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001eb2:	6820      	ldr	r0, [r4, #0]
 8001eb4:	f000 fd44 	bl	8002940 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001ebe:	bd10      	pop	{r4, pc}
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	4770      	bx	lr

08001ec4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	4605      	mov	r5, r0
 8001ec8:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eca:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ecc:	6c19      	ldr	r1, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ece:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8001ed2:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8001ed6:	68a3      	ldr	r3, [r4, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ed8:	6902      	ldr	r2, [r0, #16]
 8001eda:	2a01      	cmp	r2, #1
 8001edc:	d150      	bne.n	8001f80 <PCD_EP_OutXfrComplete_int+0xbc>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ede:	f013 0f08 	tst.w	r3, #8
 8001ee2:	d014      	beq.n	8001f0e <PCD_EP_OutXfrComplete_int+0x4a>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ee4:	4a33      	ldr	r2, [pc, #204]	; (8001fb4 <PCD_EP_OutXfrComplete_int+0xf0>)
 8001ee6:	4291      	cmp	r1, r2
 8001ee8:	d905      	bls.n	8001ef6 <PCD_EP_OutXfrComplete_int+0x32>
 8001eea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001eee:	d002      	beq.n	8001ef6 <PCD_EP_OutXfrComplete_int+0x32>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ef0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef4:	60a3      	str	r3, [r4, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	f7ff fb7e 	bl	80015f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001efc:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8001f00:	2101      	movs	r1, #1
 8001f02:	6828      	ldr	r0, [r5, #0]
 8001f04:	f001 f978 	bl	80031f8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f08:	2308      	movs	r3, #8
 8001f0a:	60a3      	str	r3, [r4, #8]
 8001f0c:	e04f      	b.n	8001fae <PCD_EP_OutXfrComplete_int+0xea>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f0e:	f013 0f20 	tst.w	r3, #32
 8001f12:	d002      	beq.n	8001f1a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f14:	2320      	movs	r3, #32
 8001f16:	60a3      	str	r3, [r4, #8]
 8001f18:	e049      	b.n	8001fae <PCD_EP_OutXfrComplete_int+0xea>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f1a:	f013 0f28 	tst.w	r3, #40	; 0x28
 8001f1e:	d146      	bne.n	8001fae <PCD_EP_OutXfrComplete_int+0xea>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f20:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <PCD_EP_OutXfrComplete_int+0xf0>)
 8001f22:	4291      	cmp	r1, r2
 8001f24:	d906      	bls.n	8001f34 <PCD_EP_OutXfrComplete_int+0x70>
 8001f26:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001f2a:	d003      	beq.n	8001f34 <PCD_EP_OutXfrComplete_int+0x70>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f30:	60a3      	str	r3, [r4, #8]
 8001f32:	e03c      	b.n	8001fae <PCD_EP_OutXfrComplete_int+0xea>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f34:	00f2      	lsls	r2, r6, #3
 8001f36:	1b92      	subs	r2, r2, r6
 8001f38:	0093      	lsls	r3, r2, #2
 8001f3a:	442b      	add	r3, r5
 8001f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f40:	6921      	ldr	r1, [r4, #16]
 8001f42:	f3c1 0112 	ubfx	r1, r1, #0, #19
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f46:	1a52      	subs	r2, r2, r1
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
 8001f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001f4c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8001f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f54:	440a      	add	r2, r1
 8001f56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f5a:	b2f1      	uxtb	r1, r6
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	f7ff fb53 	bl	8001608 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f62:	bb26      	cbnz	r6, 8001fae <PCD_EP_OutXfrComplete_int+0xea>
 8001f64:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001f68:	00b3      	lsls	r3, r6, #2
 8001f6a:	442b      	add	r3, r5
 8001f6c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001f70:	b9eb      	cbnz	r3, 8001fae <PCD_EP_OutXfrComplete_int+0xea>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f72:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8001f76:	2101      	movs	r1, #1
 8001f78:	6828      	ldr	r0, [r5, #0]
 8001f7a:	f001 f93d 	bl	80031f8 <USB_EP0_OutStart>
 8001f7e:	e016      	b.n	8001fae <PCD_EP_OutXfrComplete_int+0xea>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <PCD_EP_OutXfrComplete_int+0xf4>)
 8001f82:	4291      	cmp	r1, r2
 8001f84:	d110      	bne.n	8001fa8 <PCD_EP_OutXfrComplete_int+0xe4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f86:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001f8a:	d003      	beq.n	8001f94 <PCD_EP_OutXfrComplete_int+0xd0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f90:	60a3      	str	r3, [r4, #8]
 8001f92:	e00c      	b.n	8001fae <PCD_EP_OutXfrComplete_int+0xea>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f94:	f013 0f20 	tst.w	r3, #32
 8001f98:	d001      	beq.n	8001f9e <PCD_EP_OutXfrComplete_int+0xda>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	60a3      	str	r3, [r4, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f9e:	b2f1      	uxtb	r1, r6
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f7ff fb31 	bl	8001608 <HAL_PCD_DataOutStageCallback>
 8001fa6:	e002      	b.n	8001fae <PCD_EP_OutXfrComplete_int+0xea>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fa8:	b2f1      	uxtb	r1, r6
 8001faa:	f7ff fb2d 	bl	8001608 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001fae:	2000      	movs	r0, #0
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
 8001fb2:	bf00      	nop
 8001fb4:	4f54300a 	.word	0x4f54300a
 8001fb8:	4f54310a 	.word	0x4f54310a

08001fbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc0:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fc2:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fc4:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8001fc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8001fcc:	688a      	ldr	r2, [r1, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001fce:	6903      	ldr	r3, [r0, #16]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d109      	bne.n	8001fe8 <PCD_EP_OutSetupPacket_int+0x2c>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <PCD_EP_OutSetupPacket_int+0x60>)
 8001fd6:	429d      	cmp	r5, r3
 8001fd8:	d90f      	bls.n	8001ffa <PCD_EP_OutSetupPacket_int+0x3e>
 8001fda:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001fde:	d00c      	beq.n	8001ffa <PCD_EP_OutSetupPacket_int+0x3e>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe4:	608b      	str	r3, [r1, #8]
 8001fe6:	e008      	b.n	8001ffa <PCD_EP_OutSetupPacket_int+0x3e>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <PCD_EP_OutSetupPacket_int+0x64>)
 8001fea:	429d      	cmp	r5, r3
 8001fec:	d105      	bne.n	8001ffa <PCD_EP_OutSetupPacket_int+0x3e>
 8001fee:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001ff2:	d002      	beq.n	8001ffa <PCD_EP_OutSetupPacket_int+0x3e>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff8:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff fafc 	bl	80015f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <PCD_EP_OutSetupPacket_int+0x60>)
 8002002:	429d      	cmp	r5, r3
 8002004:	d908      	bls.n	8002018 <PCD_EP_OutSetupPacket_int+0x5c>
 8002006:	6923      	ldr	r3, [r4, #16]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <PCD_EP_OutSetupPacket_int+0x5c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800200c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002010:	2101      	movs	r1, #1
 8002012:	6820      	ldr	r0, [r4, #0]
 8002014:	f001 f8f0 	bl	80031f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
}
 8002018:	2000      	movs	r0, #0
 800201a:	bd38      	pop	{r3, r4, r5, pc}
 800201c:	4f54300a 	.word	0x4f54300a
 8002020:	4f54310a 	.word	0x4f54310a

08002024 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002028:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800202a:	6805      	ldr	r5, [r0, #0]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800202c:	4628      	mov	r0, r5
 800202e:	f001 f8c3 	bl	80031b8 <USB_GetMode>
 8002032:	2800      	cmp	r0, #0
 8002034:	f040 8219 	bne.w	800246a <HAL_PCD_IRQHandler+0x446>
 8002038:	462e      	mov	r6, r5
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800203a:	6820      	ldr	r0, [r4, #0]
 800203c:	f001 f888 	bl	8003150 <USB_ReadInterrupts>
 8002040:	2800      	cmp	r0, #0
 8002042:	f000 8212 	beq.w	800246a <HAL_PCD_IRQHandler+0x446>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002046:	6820      	ldr	r0, [r4, #0]
 8002048:	f001 f882 	bl	8003150 <USB_ReadInterrupts>
 800204c:	f010 0f02 	tst.w	r0, #2
 8002050:	d004      	beq.n	800205c <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002052:	6822      	ldr	r2, [r4, #0]
 8002054:	6953      	ldr	r3, [r2, #20]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	6153      	str	r3, [r2, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800205c:	6820      	ldr	r0, [r4, #0]
 800205e:	f001 f877 	bl	8003150 <USB_ReadInterrupts>
 8002062:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8002066:	d04e      	beq.n	8002106 <HAL_PCD_IRQHandler+0xe2>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002068:	6820      	ldr	r0, [r4, #0]
 800206a:	f001 f875 	bl	8003158 <USB_ReadDevAllOutEpInterrupt>
 800206e:	4607      	mov	r7, r0
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 8002070:	f04f 0800 	mov.w	r8, #0

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 8002074:	e045      	b.n	8002102 <HAL_PCD_IRQHandler+0xde>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002076:	f017 0f01 	tst.w	r7, #1
 800207a:	d03f      	beq.n	80020fc <HAL_PCD_IRQHandler+0xd8>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800207c:	fa5f f188 	uxtb.w	r1, r8
 8002080:	6820      	ldr	r0, [r4, #0]
 8002082:	f001 f879 	bl	8003178 <USB_ReadDevOutEPInterrupt>
 8002086:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002088:	f010 0f01 	tst.w	r0, #1
 800208c:	d008      	beq.n	80020a0 <HAL_PCD_IRQHandler+0x7c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800208e:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8002092:	2201      	movs	r2, #1
 8002094:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002098:	4641      	mov	r1, r8
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff ff12 	bl	8001ec4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020a0:	f019 0f08 	tst.w	r9, #8
 80020a4:	d008      	beq.n	80020b8 <HAL_PCD_IRQHandler+0x94>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020a6:	4641      	mov	r1, r8
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7ff ff87 	bl	8001fbc <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020ae:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80020b2:	2208      	movs	r2, #8
 80020b4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020b8:	f019 0f10 	tst.w	r9, #16
 80020bc:	d004      	beq.n	80020c8 <HAL_PCD_IRQHandler+0xa4>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020be:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80020c2:	2210      	movs	r2, #16
 80020c4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020c8:	f019 0f20 	tst.w	r9, #32
 80020cc:	d00d      	beq.n	80020ea <HAL_PCD_IRQHandler+0xc6>
          {
            if (hpcd->Init.dma_enable == 1U)
 80020ce:	6923      	ldr	r3, [r4, #16]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_PCD_IRQHandler+0xbc>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020d4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80020d8:	2101      	movs	r1, #1
 80020da:	6820      	ldr	r0, [r4, #0]
 80020dc:	f001 f88c 	bl	80031f8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020e0:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80020e4:	2220      	movs	r2, #32
 80020e6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020ea:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 80020ee:	d005      	beq.n	80020fc <HAL_PCD_IRQHandler+0xd8>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020f0:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80020f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }
        }
        epnum++;
 80020fc:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8002100:	087f      	lsrs	r7, r7, #1
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 8002102:	2f00      	cmp	r7, #0
 8002104:	d1b7      	bne.n	8002076 <HAL_PCD_IRQHandler+0x52>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002106:	6820      	ldr	r0, [r4, #0]
 8002108:	f001 f822 	bl	8003150 <USB_ReadInterrupts>
 800210c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002110:	d071      	beq.n	80021f6 <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002112:	6820      	ldr	r0, [r4, #0]
 8002114:	f001 f828 	bl	8003168 <USB_ReadDevAllInEpInterrupt>
 8002118:	4607      	mov	r7, r0

      epnum = 0U;
 800211a:	f04f 0800 	mov.w	r8, #0

      while (ep_intr != 0U)
 800211e:	e068      	b.n	80021f2 <HAL_PCD_IRQHandler+0x1ce>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002120:	f017 0f01 	tst.w	r7, #1
 8002124:	d062      	beq.n	80021ec <HAL_PCD_IRQHandler+0x1c8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002126:	fa5f fa88 	uxtb.w	sl, r8
 800212a:	4651      	mov	r1, sl
 800212c:	6820      	ldr	r0, [r4, #0]
 800212e:	f001 f82d 	bl	800318c <USB_ReadDevInEPInterrupt>
 8002132:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002134:	f010 0f01 	tst.w	r0, #1
 8002138:	d031      	beq.n	800219e <HAL_PCD_IRQHandler+0x17a>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800213a:	f008 030f 	and.w	r3, r8, #15
 800213e:	2101      	movs	r1, #1
 8002140:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002144:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 8002148:	ea23 0302 	bic.w	r3, r3, r2
 800214c:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002150:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8002154:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908

            if (hpcd->Init.dma_enable == 1U)
 8002158:	6923      	ldr	r3, [r4, #16]
 800215a:	428b      	cmp	r3, r1
 800215c:	d109      	bne.n	8002172 <HAL_PCD_IRQHandler+0x14e>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800215e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002162:	ebc8 0202 	rsb	r2, r8, r2
 8002166:	0093      	lsls	r3, r2, #2
 8002168:	4423      	add	r3, r4
 800216a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800216c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800216e:	440a      	add	r2, r1
 8002170:	649a      	str	r2, [r3, #72]	; 0x48
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002172:	4651      	mov	r1, sl
 8002174:	4620      	mov	r0, r4
 8002176:	f7ff fa53 	bl	8001620 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800217a:	6923      	ldr	r3, [r4, #16]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d10e      	bne.n	800219e <HAL_PCD_IRQHandler+0x17a>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002180:	f1b8 0f00 	cmp.w	r8, #0
 8002184:	d10b      	bne.n	800219e <HAL_PCD_IRQHandler+0x17a>
 8002186:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 800218a:	0093      	lsls	r3, r2, #2
 800218c:	4423      	add	r3, r4
 800218e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002190:	b92b      	cbnz	r3, 800219e <HAL_PCD_IRQHandler+0x17a>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002192:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002196:	2101      	movs	r1, #1
 8002198:	6820      	ldr	r0, [r4, #0]
 800219a:	f001 f82d 	bl	80031f8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800219e:	f019 0f08 	tst.w	r9, #8
 80021a2:	d004      	beq.n	80021ae <HAL_PCD_IRQHandler+0x18a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021a4:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80021a8:	2208      	movs	r2, #8
 80021aa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021ae:	f019 0f10 	tst.w	r9, #16
 80021b2:	d004      	beq.n	80021be <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021b4:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80021b8:	2210      	movs	r2, #16
 80021ba:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021be:	f019 0f40 	tst.w	r9, #64	; 0x40
 80021c2:	d004      	beq.n	80021ce <HAL_PCD_IRQHandler+0x1aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021c4:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021ce:	f019 0f02 	tst.w	r9, #2
 80021d2:	d004      	beq.n	80021de <HAL_PCD_IRQHandler+0x1ba>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021d4:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80021d8:	2202      	movs	r2, #2
 80021da:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021de:	f019 0f80 	tst.w	r9, #128	; 0x80
 80021e2:	d003      	beq.n	80021ec <HAL_PCD_IRQHandler+0x1c8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021e4:	4641      	mov	r1, r8
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff fd4e 	bl	8001c88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021ec:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80021f0:	087f      	lsrs	r7, r7, #1
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);

      epnum = 0U;

      while (ep_intr != 0U)
 80021f2:	2f00      	cmp	r7, #0
 80021f4:	d194      	bne.n	8002120 <HAL_PCD_IRQHandler+0xfc>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021f6:	6820      	ldr	r0, [r4, #0]
 80021f8:	f000 ffaa 	bl	8003150 <USB_ReadInterrupts>
 80021fc:	2800      	cmp	r0, #0
 80021fe:	da18      	bge.n	8002232 <HAL_PCD_IRQHandler+0x20e>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002200:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 800220c:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002210:	2b01      	cmp	r3, #1
 8002212:	d106      	bne.n	8002222 <HAL_PCD_IRQHandler+0x1fe>
      {
        hpcd->LPM_State = LPM_L0;
 8002214:	2100      	movs	r1, #0
 8002216:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800221a:	4620      	mov	r0, r4
 800221c:	f000 fab6 	bl	800278c <HAL_PCDEx_LPM_Callback>
 8002220:	e002      	b.n	8002228 <HAL_PCD_IRQHandler+0x204>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff fa38 	bl	8001698 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002228:	6822      	ldr	r2, [r4, #0]
 800222a:	6953      	ldr	r3, [r2, #20]
 800222c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002230:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	f000 ff8c 	bl	8003150 <USB_ReadInterrupts>
 8002238:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800223c:	d00c      	beq.n	8002258 <HAL_PCD_IRQHandler+0x234>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800223e:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8002242:	f013 0f01 	tst.w	r3, #1
 8002246:	d002      	beq.n	800224e <HAL_PCD_IRQHandler+0x22a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff fa0d 	bl	8001668 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	6953      	ldr	r3, [r2, #20]
 8002252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002256:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	f000 ff79 	bl	8003150 <USB_ReadInterrupts>
 800225e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002262:	d04f      	beq.n	8002304 <HAL_PCD_IRQHandler+0x2e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002264:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002270:	2110      	movs	r1, #16
 8002272:	6820      	ldr	r0, [r4, #0]
 8002274:	f000 fb88 	bl	8002988 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002278:	2200      	movs	r2, #0
 800227a:	e014      	b.n	80022a6 <HAL_PCD_IRQHandler+0x282>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800227c:	eb06 1342 	add.w	r3, r6, r2, lsl #5
 8002280:	f64f 307f 	movw	r0, #64383	; 0xfb7f
 8002284:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002288:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800228c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8002290:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002294:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002298:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800229c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80022a0:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a4:	3201      	adds	r2, #1
 80022a6:	6863      	ldr	r3, [r4, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3e7      	bcc.n	800227c <HAL_PCD_IRQHandler+0x258>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022b2:	61fb      	str	r3, [r7, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022b6:	b153      	cbz	r3, 80022ce <HAL_PCD_IRQHandler+0x2aa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022bc:	f043 030b 	orr.w	r3, r3, #11
 80022c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c6:	f043 030b 	orr.w	r3, r3, #11
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
 80022cc:	e009      	b.n	80022e2 <HAL_PCD_IRQHandler+0x2be>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022d8:	617b      	str	r3, [r7, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f043 030b 	orr.w	r3, r3, #11
 80022e0:	613b      	str	r3, [r7, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022e2:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80022e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022ea:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022ee:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80022f2:	7c21      	ldrb	r1, [r4, #16]
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	f000 ff7f 	bl	80031f8 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022fa:	6822      	ldr	r2, [r4, #0]
 80022fc:	6953      	ldr	r3, [r2, #20]
 80022fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002302:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002304:	6820      	ldr	r0, [r4, #0]
 8002306:	f000 ff23 	bl	8003150 <USB_ReadInterrupts>
 800230a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800230e:	d016      	beq.n	800233e <HAL_PCD_IRQHandler+0x31a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002310:	6820      	ldr	r0, [r4, #0]
 8002312:	f000 ff55 	bl	80031c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002316:	6820      	ldr	r0, [r4, #0]
 8002318:	f000 fc34 	bl	8002b84 <USB_GetDevSpeed>
 800231c:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800231e:	6826      	ldr	r6, [r4, #0]
 8002320:	f001 fabe 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 8002324:	7b22      	ldrb	r2, [r4, #12]
 8002326:	4601      	mov	r1, r0
 8002328:	4630      	mov	r0, r6
 800232a:	f000 fa93 	bl	8002854 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff f988 	bl	8001644 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	6953      	ldr	r3, [r2, #20]
 8002338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233c:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800233e:	6820      	ldr	r0, [r4, #0]
 8002340:	f000 ff06 	bl	8003150 <USB_ReadInterrupts>
 8002344:	f010 0f10 	tst.w	r0, #16
 8002348:	d043      	beq.n	80023d2 <HAL_PCD_IRQHandler+0x3ae>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	6993      	ldr	r3, [r2, #24]
 800234e:	f023 0310 	bic.w	r3, r3, #16
 8002352:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8002354:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002356:	f006 070f 	and.w	r7, r6, #15

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800235a:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800235e:	2b02      	cmp	r3, #2
 8002360:	d11f      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x37e>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002362:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002366:	421e      	tst	r6, r3
 8002368:	d02e      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x3a4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800236a:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800236e:	ebc7 0309 	rsb	r3, r7, r9
 8002372:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002376:	44a0      	add	r8, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002378:	0936      	lsrs	r6, r6, #4

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800237a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800237e:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8002382:	4628      	mov	r0, r5
 8002384:	f000 fe4e 	bl	8003024 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002388:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800238c:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8002390:	4433      	add	r3, r6
 8002392:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002396:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 800239a:	441e      	add	r6, r3
 800239c:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
 80023a0:	e012      	b.n	80023c8 <HAL_PCD_IRQHandler+0x3a4>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d110      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x3a4>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023a6:	2208      	movs	r2, #8
 80023a8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80023ac:	4628      	mov	r0, r5
 80023ae:	f000 fe39 	bl	8003024 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023b2:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80023b6:	00fb      	lsls	r3, r7, #3
 80023b8:	1bd9      	subs	r1, r3, r7
 80023ba:	008a      	lsls	r2, r1, #2
 80023bc:	4422      	add	r2, r4
 80023be:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80023c2:	4433      	add	r3, r6
 80023c4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6993      	ldr	r3, [r2, #24]
 80023cc:	f043 0310 	orr.w	r3, r3, #16
 80023d0:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023d2:	6820      	ldr	r0, [r4, #0]
 80023d4:	f000 febc 	bl	8003150 <USB_ReadInterrupts>
 80023d8:	f010 0f08 	tst.w	r0, #8
 80023dc:	d007      	beq.n	80023ee <HAL_PCD_IRQHandler+0x3ca>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023de:	4620      	mov	r0, r4
 80023e0:	f7ff f92a 	bl	8001638 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	6953      	ldr	r3, [r2, #20]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023ee:	6820      	ldr	r0, [r4, #0]
 80023f0:	f000 feae 	bl	8003150 <USB_ReadInterrupts>
 80023f4:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80023f8:	d008      	beq.n	800240c <HAL_PCD_IRQHandler+0x3e8>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023fa:	2100      	movs	r1, #0
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7ff f957 	bl	80016b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002402:	6822      	ldr	r2, [r4, #0]
 8002404:	6953      	ldr	r3, [r2, #20]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800240c:	6820      	ldr	r0, [r4, #0]
 800240e:	f000 fe9f 	bl	8003150 <USB_ReadInterrupts>
 8002412:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002416:	d008      	beq.n	800242a <HAL_PCD_IRQHandler+0x406>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002418:	2100      	movs	r1, #0
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff f942 	bl	80016a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	6953      	ldr	r3, [r2, #20]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800242a:	6820      	ldr	r0, [r4, #0]
 800242c:	f000 fe90 	bl	8003150 <USB_ReadInterrupts>
 8002430:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002434:	d007      	beq.n	8002446 <HAL_PCD_IRQHandler+0x422>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002436:	4620      	mov	r0, r4
 8002438:	f7ff f940 	bl	80016bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800243c:	6822      	ldr	r2, [r4, #0]
 800243e:	6953      	ldr	r3, [r2, #20]
 8002440:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002444:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002446:	6820      	ldr	r0, [r4, #0]
 8002448:	f000 fe82 	bl	8003150 <USB_ReadInterrupts>
 800244c:	f010 0f04 	tst.w	r0, #4
 8002450:	d00b      	beq.n	800246a <HAL_PCD_IRQHandler+0x446>
    {
      temp = hpcd->Instance->GOTGINT;
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002456:	f015 0f04 	tst.w	r5, #4
 800245a:	d002      	beq.n	8002462 <HAL_PCD_IRQHandler+0x43e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff f933 	bl	80016c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002462:	6822      	ldr	r2, [r4, #0]
 8002464:	6853      	ldr	r3, [r2, #4]
 8002466:	432b      	orrs	r3, r5
 8002468:	6053      	str	r3, [r2, #4]
 800246a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800246e:	bf00      	nop

08002470 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002470:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002474:	2b01      	cmp	r3, #1
 8002476:	d00d      	beq.n	8002494 <HAL_PCD_SetAddress+0x24>
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002478:	b510      	push	{r4, lr}
 800247a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800247c:	2301      	movs	r3, #1
 800247e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002482:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002486:	6800      	ldr	r0, [r0, #0]
 8002488:	f000 fe3a 	bl	8003100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800248c:	2000      	movs	r0, #0
 800248e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002492:	bd10      	pop	{r4, pc}
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002494:	2002      	movs	r0, #2
 8002496:	4770      	bx	lr

08002498 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800249a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800249e:	d00e      	beq.n	80024be <HAL_PCD_EP_Open+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a0:	f001 060f 	and.w	r6, r1, #15
 80024a4:	00f5      	lsls	r5, r6, #3
 80024a6:	1baf      	subs	r7, r5, r6
 80024a8:	00bc      	lsls	r4, r7, #2
 80024aa:	4627      	mov	r7, r4
 80024ac:	3438      	adds	r4, #56	; 0x38
 80024ae:	4404      	add	r4, r0
 80024b0:	3404      	adds	r4, #4
    ep->is_in = 1U;
 80024b2:	463e      	mov	r6, r7
 80024b4:	4406      	add	r6, r0
 80024b6:	2501      	movs	r5, #1
 80024b8:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 80024bc:	e00e      	b.n	80024dc <HAL_PCD_EP_Open+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024be:	f001 060f 	and.w	r6, r1, #15
 80024c2:	00f5      	lsls	r5, r6, #3
 80024c4:	1baf      	subs	r7, r5, r6
 80024c6:	00bc      	lsls	r4, r7, #2
 80024c8:	4627      	mov	r7, r4
 80024ca:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80024ce:	4404      	add	r4, r0
 80024d0:	3404      	adds	r4, #4
    ep->is_in = 0U;
 80024d2:	463e      	mov	r6, r7
 80024d4:	4406      	add	r6, r0
 80024d6:	2500      	movs	r5, #0
 80024d8:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024dc:	f001 010f 	and.w	r1, r1, #15
 80024e0:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 80024e2:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 80024e4:	70e3      	strb	r3, [r4, #3]

  if (ep->is_in != 0U)
 80024e6:	7862      	ldrb	r2, [r4, #1]
 80024e8:	b102      	cbz	r2, 80024ec <HAL_PCD_EP_Open+0x54>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024ea:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d101      	bne.n	80024f4 <HAL_PCD_EP_Open+0x5c>
  {
    ep->data_pid_start = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	7123      	strb	r3, [r4, #4]
  }

  __HAL_LOCK(hpcd);
 80024f4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d00b      	beq.n	8002514 <HAL_PCD_EP_Open+0x7c>
 80024fc:	4605      	mov	r5, r0
 80024fe:	2301      	movs	r3, #1
 8002500:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002504:	4621      	mov	r1, r4
 8002506:	6800      	ldr	r0, [r0, #0]
 8002508:	f000 fb4e 	bl	8002ba8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800250c:	2000      	movs	r0, #0
 800250e:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc

  return ret;
 8002512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ep_type == EP_TYPE_BULK)
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 8002514:	2002      	movs	r0, #2
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return ret;
}
 8002516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002518 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002518:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800251a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800251e:	d00e      	beq.n	800253e <HAL_PCD_EP_Close+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002520:	f001 040f 	and.w	r4, r1, #15
 8002524:	00e2      	lsls	r2, r4, #3
 8002526:	1b15      	subs	r5, r2, r4
 8002528:	00ab      	lsls	r3, r5, #2
 800252a:	461d      	mov	r5, r3
 800252c:	3338      	adds	r3, #56	; 0x38
 800252e:	4403      	add	r3, r0
 8002530:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8002532:	462c      	mov	r4, r5
 8002534:	4404      	add	r4, r0
 8002536:	2201      	movs	r2, #1
 8002538:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800253c:	e00e      	b.n	800255c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800253e:	f001 040f 	and.w	r4, r1, #15
 8002542:	00e2      	lsls	r2, r4, #3
 8002544:	1b15      	subs	r5, r2, r4
 8002546:	00ab      	lsls	r3, r5, #2
 8002548:	461d      	mov	r5, r3
 800254a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800254e:	4403      	add	r3, r0
 8002550:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8002552:	462c      	mov	r4, r5
 8002554:	4404      	add	r4, r0
 8002556:	2200      	movs	r2, #0
 8002558:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800255c:	f001 010f 	and.w	r1, r1, #15
 8002560:	7019      	strb	r1, [r3, #0]

  __HAL_LOCK(hpcd);
 8002562:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002566:	2a01      	cmp	r2, #1
 8002568:	d00b      	beq.n	8002582 <HAL_PCD_EP_Close+0x6a>
 800256a:	4604      	mov	r4, r0
 800256c:	2201      	movs	r2, #1
 800256e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002572:	4619      	mov	r1, r3
 8002574:	6800      	ldr	r0, [r0, #0]
 8002576:	f000 fb63 	bl	8002c40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800257a:	2000      	movs	r0, #0
 800257c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002580:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8002582:	2002      	movs	r0, #2
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8002584:	bd38      	pop	{r3, r4, r5, pc}
 8002586:	bf00      	nop

08002588 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800258e:	00ee      	lsls	r6, r5, #3
 8002590:	1b71      	subs	r1, r6, r5
 8002592:	008c      	lsls	r4, r1, #2
 8002594:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8002598:	4404      	add	r4, r0
 800259a:	1d21      	adds	r1, r4, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800259c:	1b76      	subs	r6, r6, r5
 800259e:	00b4      	lsls	r4, r6, #2
 80025a0:	4404      	add	r4, r0
 80025a2:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 80025a6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80025b0:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc

  if (hpcd->Init.dma_enable == 1U)
 80025b8:	6903      	ldr	r3, [r0, #16]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d105      	bne.n	80025ca <HAL_PCD_EP_Receive+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025be:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 80025c2:	00b4      	lsls	r4, r6, #2
 80025c4:	4404      	add	r4, r0
 80025c6:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ca:	b925      	cbnz	r5, 80025d6 <HAL_PCD_EP_Receive+0x4e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	6800      	ldr	r0, [r0, #0]
 80025d0:	f000 fb7e 	bl	8002cd0 <USB_EP0StartXfer>
 80025d4:	e003      	b.n	80025de <HAL_PCD_EP_Receive+0x56>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	6800      	ldr	r0, [r0, #0]
 80025da:	f000 fc1d 	bl	8002e18 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80025de:	2000      	movs	r0, #0
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
 80025e2:	bf00      	nop

080025e4 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025e4:	f001 010f 	and.w	r1, r1, #15
 80025e8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80025ec:	008b      	lsls	r3, r1, #2
 80025ee:	4418      	add	r0, r3
}
 80025f0:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	00ee      	lsls	r6, r5, #3
 8002600:	1b71      	subs	r1, r6, r5
 8002602:	008c      	lsls	r4, r1, #2
 8002604:	3438      	adds	r4, #56	; 0x38
 8002606:	4404      	add	r4, r0
 8002608:	1d21      	adds	r1, r4, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800260a:	1b76      	subs	r6, r6, r5
 800260c:	00b4      	lsls	r4, r6, #2
 800260e:	4404      	add	r4, r0
 8002610:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8002612:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8002618:	2301      	movs	r3, #1
 800261a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800261e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c

  if (hpcd->Init.dma_enable == 1U)
 8002622:	6903      	ldr	r3, [r0, #16]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d104      	bne.n	8002632 <HAL_PCD_EP_Transmit+0x3a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002628:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800262c:	00b4      	lsls	r4, r6, #2
 800262e:	4404      	add	r4, r0
 8002630:	64e2      	str	r2, [r4, #76]	; 0x4c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002632:	b925      	cbnz	r5, 800263e <HAL_PCD_EP_Transmit+0x46>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002634:	b2da      	uxtb	r2, r3
 8002636:	6800      	ldr	r0, [r0, #0]
 8002638:	f000 fb4a 	bl	8002cd0 <USB_EP0StartXfer>
 800263c:	e003      	b.n	8002646 <HAL_PCD_EP_Transmit+0x4e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800263e:	b2da      	uxtb	r2, r3
 8002640:	6800      	ldr	r0, [r0, #0]
 8002642:	f000 fbe9 	bl	8002e18 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8002646:	2000      	movs	r0, #0
 8002648:	bd70      	pop	{r4, r5, r6, pc}
 800264a:	bf00      	nop

0800264c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264c:	b538      	push	{r3, r4, r5, lr}
 800264e:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002652:	6843      	ldr	r3, [r0, #4]
 8002654:	429d      	cmp	r5, r3
 8002656:	d835      	bhi.n	80026c4 <HAL_PCD_EP_SetStall+0x78>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002658:	f011 0f80 	tst.w	r1, #128	; 0x80
 800265c:	d00b      	beq.n	8002676 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265e:	00ea      	lsls	r2, r5, #3
 8002660:	1b51      	subs	r1, r2, r5
 8002662:	008b      	lsls	r3, r1, #2
 8002664:	4619      	mov	r1, r3
 8002666:	3338      	adds	r3, #56	; 0x38
 8002668:	4403      	add	r3, r0
 800266a:	3304      	adds	r3, #4
    ep->is_in = 1U;
 800266c:	4401      	add	r1, r0
 800266e:	2201      	movs	r2, #1
 8002670:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 8002674:	e00c      	b.n	8002690 <HAL_PCD_EP_SetStall+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002676:	00ca      	lsls	r2, r1, #3
 8002678:	1a54      	subs	r4, r2, r1
 800267a:	00a3      	lsls	r3, r4, #2
 800267c:	461c      	mov	r4, r3
 800267e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002682:	4403      	add	r3, r0
 8002684:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8002686:	4622      	mov	r2, r4
 8002688:	4402      	add	r2, r0
 800268a:	2100      	movs	r1, #0
 800268c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  }

  ep->is_stall = 1U;
 8002690:	2201      	movs	r2, #1
 8002692:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002694:	701d      	strb	r5, [r3, #0]

  __HAL_LOCK(hpcd);
 8002696:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800269a:	2a01      	cmp	r2, #1
 800269c:	d014      	beq.n	80026c8 <HAL_PCD_EP_SetStall+0x7c>
 800269e:	4604      	mov	r4, r0
 80026a0:	2201      	movs	r2, #1
 80026a2:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026a6:	4619      	mov	r1, r3
 80026a8:	6800      	ldr	r0, [r0, #0]
 80026aa:	f000 fccd 	bl	8003048 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ae:	b92d      	cbnz	r5, 80026bc <HAL_PCD_EP_SetStall+0x70>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026b0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80026b4:	7c21      	ldrb	r1, [r4, #16]
 80026b6:	6820      	ldr	r0, [r4, #0]
 80026b8:	f000 fd9e 	bl	80031f8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80026bc:	2000      	movs	r0, #0
 80026be:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 80026c2:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 80026c4:	2001      	movs	r0, #1
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
  }

  ep->is_stall = 1U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 80026c8:	2002      	movs	r0, #2
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 80026ca:	bd38      	pop	{r3, r4, r5, pc}

080026cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026cc:	f001 030f 	and.w	r3, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026d0:	6842      	ldr	r2, [r0, #4]
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d82d      	bhi.n	8002732 <HAL_PCD_EP_ClrStall+0x66>
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026d6:	b510      	push	{r4, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026d8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026dc:	d00b      	beq.n	80026f6 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026de:	00da      	lsls	r2, r3, #3
 80026e0:	1ad4      	subs	r4, r2, r3
 80026e2:	00a1      	lsls	r1, r4, #2
 80026e4:	460c      	mov	r4, r1
 80026e6:	3138      	adds	r1, #56	; 0x38
 80026e8:	4401      	add	r1, r0
 80026ea:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80026ec:	4404      	add	r4, r0
 80026ee:	2201      	movs	r2, #1
 80026f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80026f4:	e00b      	b.n	800270e <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f6:	00da      	lsls	r2, r3, #3
 80026f8:	1ad4      	subs	r4, r2, r3
 80026fa:	00a1      	lsls	r1, r4, #2
 80026fc:	460c      	mov	r4, r1
 80026fe:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002702:	4401      	add	r1, r0
 8002704:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8002706:	4404      	add	r4, r0
 8002708:	2200      	movs	r2, #0
 800270a:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  }

  ep->is_stall = 0U;
 800270e:	2200      	movs	r2, #0
 8002710:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002712:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8002714:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002718:	2b01      	cmp	r3, #1
 800271a:	d00c      	beq.n	8002736 <HAL_PCD_EP_ClrStall+0x6a>
 800271c:	4604      	mov	r4, r0
 800271e:	2301      	movs	r3, #1
 8002720:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002724:	6800      	ldr	r0, [r0, #0]
 8002726:	f000 fcbd 	bl	80030a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800272a:	2000      	movs	r0, #0
 800272c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 8002730:	bd10      	pop	{r4, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8002732:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8002734:	4770      	bx	lr
  }

  ep->is_stall = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8002736:	2002      	movs	r0, #2
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8002738:	bd10      	pop	{r4, pc}
 800273a:	bf00      	nop

0800273c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800273c:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800273e:	6804      	ldr	r4, [r0, #0]
 8002740:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8002742:	b919      	cbnz	r1, 800274c <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002744:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8002748:	62a0      	str	r0, [r4, #40]	; 0x28
 800274a:	e018      	b.n	800277e <HAL_PCDEx_SetTxFiFo+0x42>
 800274c:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800274e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002750:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002754:	2300      	movs	r3, #0
 8002756:	e008      	b.n	800276a <HAL_PCDEx_SetTxFiFo+0x2e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002758:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800275c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002760:	6849      	ldr	r1, [r1, #4]
 8002762:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
    for (i = 0U; i < (fifo - 1U); i++)
 8002766:	3301      	adds	r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	1e69      	subs	r1, r5, #1
 800276c:	428b      	cmp	r3, r1
 800276e:	d3f3      	bcc.n	8002758 <HAL_PCDEx_SetTxFiFo+0x1c>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002770:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002774:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8002778:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800277c:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 800277e:	2000      	movs	r0, #0
 8002780:	bc30      	pop	{r4, r5}
 8002782:	4770      	bx	lr

08002784 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002784:	6803      	ldr	r3, [r0, #0]
 8002786:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8002788:	2000      	movs	r0, #0
 800278a:	4770      	bx	lr

0800278c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop

08002790 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8002790:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002792:	3301      	adds	r3, #1
 8002794:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <USB_CoreReset+0x38>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d811      	bhi.n	80027be <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800279a:	6902      	ldr	r2, [r0, #16]
 800279c:	2a00      	cmp	r2, #0
 800279e:	daf8      	bge.n	8002792 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80027a0:	6903      	ldr	r3, [r0, #16]
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6103      	str	r3, [r0, #16]
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);

  /* Core Soft Reset */
  count = 0U;
 80027a8:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <USB_CoreReset+0x38>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d807      	bhi.n	80027c2 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80027b2:	6902      	ldr	r2, [r0, #16]
 80027b4:	f012 0f01 	tst.w	r2, #1
 80027b8:	d1f7      	bne.n	80027aa <USB_CoreReset+0x1a>

  return HAL_OK;
 80027ba:	2000      	movs	r0, #0
 80027bc:	4770      	bx	lr
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 80027be:	2003      	movs	r0, #3
 80027c0:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 80027c2:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	00030d40 	.word	0x00030d40

080027cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80027cc:	b084      	sub	sp, #16
 80027ce:	b510      	push	{r4, lr}
 80027d0:	4604      	mov	r4, r0
 80027d2:	a803      	add	r0, sp, #12
 80027d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80027d8:	9b08      	ldr	r3, [sp, #32]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d118      	bne.n	8002810 <USB_CoreInit+0x44>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e4:	63a3      	str	r3, [r4, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80027e6:	68e3      	ldr	r3, [r4, #12]
 80027e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80027ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f0:	60e3      	str	r3, [r4, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80027f2:	68e3      	ldr	r3, [r4, #12]
 80027f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80027f8:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80027fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d103      	bne.n	8002808 <USB_CoreInit+0x3c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002800:	68e3      	ldr	r3, [r4, #12]
 8002802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002806:	60e3      	str	r3, [r4, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff ffc1 	bl	8002790 <USB_CoreReset>
 800280e:	e011      	b.n	8002834 <USB_CoreInit+0x68>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002810:	68e3      	ldr	r3, [r4, #12]
 8002812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002816:	60e3      	str	r3, [r4, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002818:	4620      	mov	r0, r4
 800281a:	f7ff ffb9 	bl	8002790 <USB_CoreReset>

    if (cfg.battery_charging_enable == 0U)
 800281e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002820:	b923      	cbnz	r3, 800282c <USB_CoreInit+0x60>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002822:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	63a3      	str	r3, [r4, #56]	; 0x38
 800282a:	e003      	b.n	8002834 <USB_CoreInit+0x68>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800282c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800282e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002832:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002834:	9b06      	ldr	r3, [sp, #24]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d107      	bne.n	800284a <USB_CoreInit+0x7e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800283a:	68a3      	ldr	r3, [r4, #8]
 800283c:	f043 0306 	orr.w	r3, r3, #6
 8002840:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002842:	68a3      	ldr	r3, [r4, #8]
 8002844:	f043 0320 	orr.w	r3, r3, #32
 8002848:	60a3      	str	r3, [r4, #8]
  }

  return ret;
}
 800284a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800284e:	b004      	add	sp, #16
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop

08002854 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002854:	2a02      	cmp	r2, #2
 8002856:	d142      	bne.n	80028de <USB_SetTurnaroundTime+0x8a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002858:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <USB_SetTurnaroundTime+0xc4>)
 800285a:	440b      	add	r3, r1
 800285c:	4a2f      	ldr	r2, [pc, #188]	; (800291c <USB_SetTurnaroundTime+0xc8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d93f      	bls.n	80028e2 <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002862:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <USB_SetTurnaroundTime+0xcc>)
 8002864:	440b      	add	r3, r1
 8002866:	4a2f      	ldr	r2, [pc, #188]	; (8002924 <USB_SetTurnaroundTime+0xd0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d93c      	bls.n	80028e6 <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800286c:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8002870:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8002874:	4a2c      	ldr	r2, [pc, #176]	; (8002928 <USB_SetTurnaroundTime+0xd4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d937      	bls.n	80028ea <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800287a:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800287e:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8002882:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8002886:	32a0      	adds	r2, #160	; 0xa0
 8002888:	4293      	cmp	r3, r2
 800288a:	d930      	bls.n	80028ee <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <USB_SetTurnaroundTime+0xd8>)
 800288e:	440b      	add	r3, r1
 8002890:	4a27      	ldr	r2, [pc, #156]	; (8002930 <USB_SetTurnaroundTime+0xdc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d92d      	bls.n	80028f2 <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002896:	4b27      	ldr	r3, [pc, #156]	; (8002934 <USB_SetTurnaroundTime+0xe0>)
 8002898:	440b      	add	r3, r1
 800289a:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800289e:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d927      	bls.n	80028f6 <USB_SetTurnaroundTime+0xa2>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <USB_SetTurnaroundTime+0xe4>)
 80028a8:	440b      	add	r3, r1
 80028aa:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80028ae:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d921      	bls.n	80028fa <USB_SetTurnaroundTime+0xa6>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80028b6:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80028ba:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80028be:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80028c2:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d919      	bls.n	80028fe <USB_SetTurnaroundTime+0xaa>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <USB_SetTurnaroundTime+0xe8>)
 80028cc:	440b      	add	r3, r1
 80028ce:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 80028d2:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d813      	bhi.n	8002902 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80028da:	2107      	movs	r1, #7
 80028dc:	e012      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
      UsbTrd = 0x6U;
    }
  }
  else if (speed == USBD_HS_SPEED)
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80028de:	2109      	movs	r1, #9
 80028e0:	e010      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
  if (speed == USBD_FS_SPEED)
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80028e2:	210f      	movs	r1, #15
 80028e4:	e00e      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80028e6:	210e      	movs	r1, #14
 80028e8:	e00c      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80028ea:	210d      	movs	r1, #13
 80028ec:	e00a      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80028ee:	210c      	movs	r1, #12
 80028f0:	e008      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80028f2:	210b      	movs	r1, #11
 80028f4:	e006      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80028f6:	210a      	movs	r1, #10
 80028f8:	e004      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80028fa:	2109      	movs	r1, #9
 80028fc:	e002      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80028fe:	2108      	movs	r1, #8
 8002900:	e000      	b.n	8002904 <USB_SetTurnaroundTime+0xb0>
      UsbTrd = 0x7U;
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002902:	2106      	movs	r1, #6
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002904:	68c2      	ldr	r2, [r0, #12]
 8002906:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800290a:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800290c:	68c3      	ldr	r3, [r0, #12]
 800290e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002912:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8002914:	2000      	movs	r0, #0
 8002916:	4770      	bx	lr
 8002918:	ff275340 	.word	0xff275340
 800291c:	000c34ff 	.word	0x000c34ff
 8002920:	ff1b1e40 	.word	0xff1b1e40
 8002924:	000f423f 	.word	0x000f423f
 8002928:	00124f7f 	.word	0x00124f7f
 800292c:	fee5b660 	.word	0xfee5b660
 8002930:	0016e35f 	.word	0x0016e35f
 8002934:	feced300 	.word	0xfeced300
 8002938:	feb35bc0 	.word	0xfeb35bc0
 800293c:	fe5954e0 	.word	0xfe5954e0

08002940 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002940:	6883      	ldr	r3, [r0, #8]
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002948:	2000      	movs	r0, #0
 800294a:	4770      	bx	lr

0800294c <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800294c:	6883      	ldr	r3, [r0, #8]
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002954:	2000      	movs	r0, #0
 8002956:	4770      	bx	lr

08002958 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002958:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800295a:	68c3      	ldr	r3, [r0, #12]
 800295c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002960:	60c3      	str	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 8002962:	2901      	cmp	r1, #1
 8002964:	d104      	bne.n	8002970 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002966:	68c3      	ldr	r3, [r0, #12]
 8002968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800296c:	60c3      	str	r3, [r0, #12]
 800296e:	e004      	b.n	800297a <USB_SetCurrentMode+0x22>
  }
  else if (mode == USB_DEVICE_MODE)
 8002970:	b941      	cbnz	r1, 8002984 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002972:	68c3      	ldr	r3, [r0, #12]
 8002974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002978:	60c3      	str	r3, [r0, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  HAL_Delay(50U);
 800297a:	2032      	movs	r0, #50	; 0x32
 800297c:	f001 fad8 	bl	8003f30 <HAL_Delay>

  return HAL_OK;
 8002980:	2000      	movs	r0, #0
 8002982:	bd08      	pop	{r3, pc}
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
  }
  else
  {
    return HAL_ERROR;
 8002984:	2001      	movs	r0, #1
  }
  HAL_Delay(50U);

  return HAL_OK;
}
 8002986:	bd08      	pop	{r3, pc}

08002988 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002988:	0189      	lsls	r1, r1, #6
 800298a:	f041 0120 	orr.w	r1, r1, #32
 800298e:	6101      	str	r1, [r0, #16]
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;
 8002990:	2300      	movs	r3, #0

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));

  do
  {
    if (++count > 200000U)
 8002992:	3301      	adds	r3, #1
 8002994:	4a05      	ldr	r2, [pc, #20]	; (80029ac <USB_FlushTxFifo+0x24>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d805      	bhi.n	80029a6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800299a:	6902      	ldr	r2, [r0, #16]
 800299c:	f012 0f20 	tst.w	r2, #32
 80029a0:	d1f7      	bne.n	8002992 <USB_FlushTxFifo+0xa>

  return HAL_OK;
 80029a2:	2000      	movs	r0, #0
 80029a4:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 80029a6:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);

  return HAL_OK;
}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	00030d40 	.word	0x00030d40

080029b0 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80029b0:	2310      	movs	r3, #16
 80029b2:	6103      	str	r3, [r0, #16]
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
 80029b4:	2300      	movs	r3, #0

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;

  do
  {
    if (++count > 200000U)
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <USB_FlushRxFifo+0x20>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d805      	bhi.n	80029ca <USB_FlushRxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80029be:	6902      	ldr	r2, [r0, #16]
 80029c0:	f012 0f10 	tst.w	r2, #16
 80029c4:	d1f7      	bne.n	80029b6 <USB_FlushRxFifo+0x6>

  return HAL_OK;
 80029c6:	2000      	movs	r0, #0
 80029c8:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 80029ca:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);

  return HAL_OK;
}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	00030d40 	.word	0x00030d40

080029d4 <USB_SetDevSpeed>:
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG |= speed;
 80029d4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80029d8:	4319      	orrs	r1, r3
 80029da:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 80029de:	2000      	movs	r0, #0
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop

080029e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029e4:	b084      	sub	sp, #16
 80029e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ea:	4604      	mov	r4, r0
 80029ec:	a807      	add	r0, sp, #28
 80029ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f2:	4625      	mov	r5, r4
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	e006      	b.n	8002a06 <USB_DevInit+0x22>
  {
    USBx->DIEPTXF[i] = 0U;
 80029f8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80029fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002a00:	2100      	movs	r1, #0
 8002a02:	6051      	str	r1, [r2, #4]
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002a04:	3301      	adds	r3, #1
 8002a06:	2b0e      	cmp	r3, #14
 8002a08:	d9f6      	bls.n	80029f8 <USB_DevInit+0x14>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002a0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a0c:	b963      	cbnz	r3, 8002a28 <USB_DevInit+0x44>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002a0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a14:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002a16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a18:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002a1c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a24:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a26:	e007      	b.n	8002a38 <USB_DevInit+0x54>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a2e:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a36:	63a3      	str	r3, [r4, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002a3e:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8002a42:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002a46:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10b      	bne.n	8002a68 <USB_DevInit+0x84>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a52:	b923      	cbnz	r3, 8002a5e <USB_DevInit+0x7a>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a54:	2100      	movs	r1, #0
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff ffbc 	bl	80029d4 <USB_SetDevSpeed>
 8002a5c:	e008      	b.n	8002a70 <USB_DevInit+0x8c>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff ffb7 	bl	80029d4 <USB_SetDevSpeed>
 8002a66:	e003      	b.n	8002a70 <USB_DevInit+0x8c>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a68:	2103      	movs	r1, #3
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7ff ffb2 	bl	80029d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a70:	2110      	movs	r1, #16
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff ff88 	bl	8002988 <USB_FlushTxFifo>
 8002a78:	b910      	cbnz	r0, 8002a80 <USB_DevInit+0x9c>
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret = HAL_OK;
 8002a7a:	f04f 0800 	mov.w	r8, #0
 8002a7e:	e001      	b.n	8002a84 <USB_DevInit+0xa0>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
  {
    ret = HAL_ERROR;
 8002a80:	f04f 0801 	mov.w	r8, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff ff93 	bl	80029b0 <USB_FlushRxFifo>
 8002a8a:	b108      	cbz	r0, 8002a90 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8002a8c:	f04f 0801 	mov.w	r8, #1
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a94:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002a96:	61f3      	str	r3, [r6, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a98:	e01b      	b.n	8002ad2 <USB_DevInit+0xee>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a9a:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002a9e:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8002aa2:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	da0a      	bge.n	8002ac0 <USB_DevInit+0xdc>
    {
      if (i == 0U)
 8002aaa:	b923      	cbnz	r3, 8002ab6 <USB_DevInit+0xd2>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002aac:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002ab0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002ab4:	e007      	b.n	8002ac6 <USB_DevInit+0xe2>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aba:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002abe:	e002      	b.n	8002ac6 <USB_DevInit+0xe2>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002aca:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002ace:	608a      	str	r2, [r1, #8]
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	9907      	ldr	r1, [sp, #28]
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	d3e0      	bcc.n	8002a9a <USB_DevInit+0xb6>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e01b      	b.n	8002b14 <USB_DevInit+0x130>
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002adc:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002ae0:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8002ae4:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 8002ae8:	2f00      	cmp	r7, #0
 8002aea:	da0a      	bge.n	8002b02 <USB_DevInit+0x11e>
    {
      if (i == 0U)
 8002aec:	b923      	cbnz	r3, 8002af8 <USB_DevInit+0x114>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002aee:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8002af2:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002af6:	e007      	b.n	8002b08 <USB_DevInit+0x124>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002af8:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8002afc:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002b00:	e002      	b.n	8002b08 <USB_DevInit+0x124>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002b02:	2700      	movs	r7, #0
 8002b04:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002b0c:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002b10:	6082      	str	r2, [r0, #8]

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b12:	3301      	adds	r3, #1
 8002b14:	428b      	cmp	r3, r1
 8002b16:	d3e1      	bcc.n	8002adc <USB_DevInit+0xf8>

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002b18:	6933      	ldr	r3, [r6, #16]
 8002b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b1e:	6133      	str	r3, [r6, #16]

  if (cfg.dma_enable == 1U)
 8002b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <USB_DevInit+0x152>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002b26:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <USB_DevInit+0x198>)
 8002b28:	6332      	str	r2, [r6, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002b2a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002b2c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b30:	f042 0203 	orr.w	r2, r2, #3
 8002b34:	6332      	str	r2, [r6, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002b36:	2200      	movs	r2, #0
 8002b38:	61a2      	str	r2, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002b3a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002b3e:	6162      	str	r2, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002b40:	b91b      	cbnz	r3, 8002b4a <USB_DevInit+0x166>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002b42:	69a3      	ldr	r3, [r4, #24]
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002b4a:	69a2      	ldr	r2, [r4, #24]
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <USB_DevInit+0x19c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61a3      	str	r3, [r4, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b54:	b11b      	cbz	r3, 8002b5e <USB_DevInit+0x17a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002b56:	69a3      	ldr	r3, [r4, #24]
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002b5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <USB_DevInit+0x18c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002b64:	69a3      	ldr	r3, [r4, #24]
 8002b66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	61a3      	str	r3, [r4, #24]
  }

  return ret;
}
 8002b70:	4640      	mov	r0, r8
 8002b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b76:	b004      	add	sp, #16
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	00800100 	.word	0x00800100
 8002b80:	803c3800 	.word	0x803c3800

08002b84 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002b84:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002b88:	f013 0306 	ands.w	r3, r3, #6
 8002b8c:	d005      	beq.n	8002b9a <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d005      	beq.n	8002b9e <USB_GetDevSpeed+0x1a>
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d105      	bne.n	8002ba2 <USB_GetDevSpeed+0x1e>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002b96:	2002      	movs	r0, #2
 8002b98:	4770      	bx	lr
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USBD_HS_SPEED;
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	4770      	bx	lr
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	4770      	bx	lr
  }
  else
  {
    speed = 0xFU;
 8002ba2:	200f      	movs	r0, #15
  }

  return speed;
}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop

08002ba8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002ba8:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002baa:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8002bac:	784a      	ldrb	r2, [r1, #1]
 8002bae:	2a01      	cmp	r2, #1
 8002bb0:	d123      	bne.n	8002bfa <USB_ActivateEndpoint+0x52>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002bb2:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	2401      	movs	r4, #1
 8002bbc:	fa04 f202 	lsl.w	r2, r4, r2
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	4332      	orrs	r2, r6
 8002bc4:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002bc8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002bcc:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002bd0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002bd4:	d131      	bne.n	8002c3a <USB_ActivateEndpoint+0x92>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002bd6:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8002bda:	688a      	ldr	r2, [r1, #8]
 8002bdc:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002be0:	78c9      	ldrb	r1, [r1, #3]
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002be2:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002be6:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002bea:	4323      	orrs	r3, r4
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002bf8:	e01f      	b.n	8002c3a <USB_ActivateEndpoint+0x92>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002bfa:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8002bfe:	f003 060f 	and.w	r6, r3, #15
 8002c02:	2201      	movs	r2, #1
 8002c04:	40b2      	lsls	r2, r6
 8002c06:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8002c0a:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002c0e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002c12:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002c16:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002c1a:	d10e      	bne.n	8002c3a <USB_ActivateEndpoint+0x92>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002c1c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002c20:	688a      	ldr	r2, [r1, #8]
 8002c22:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002c26:	78c9      	ldrb	r1, [r1, #3]
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002c28:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c36:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	bc70      	pop	{r4, r5, r6}
 8002c3e:	4770      	bx	lr

08002c40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002c40:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002c42:	780c      	ldrb	r4, [r1, #0]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002c44:	784b      	ldrb	r3, [r1, #1]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d11e      	bne.n	8002c88 <USB_DeactivateEndpoint+0x48>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002c4a:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 8002c4e:	f004 020f 	and.w	r2, r4, #15
 8002c52:	fa03 f202 	lsl.w	r2, r3, r2
 8002c56:	b292      	uxth	r2, r2
 8002c58:	ea26 0202 	bic.w	r2, r6, r2
 8002c5c:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002c60:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002c64:	7809      	ldrb	r1, [r1, #0]
 8002c66:	f001 010f 	and.w	r1, r1, #15
 8002c6a:	408b      	lsls	r3, r1
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	ea22 0303 	bic.w	r3, r2, r3
 8002c72:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002c76:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002c7a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <USB_DeactivateEndpoint+0x88>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002c86:	e01c      	b.n	8002cc2 <USB_DeactivateEndpoint+0x82>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002c88:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 8002c8c:	f004 050f 	and.w	r5, r4, #15
 8002c90:	2201      	movs	r2, #1
 8002c92:	fa02 f505 	lsl.w	r5, r2, r5
 8002c96:	ea26 4505 	bic.w	r5, r6, r5, lsl #16
 8002c9a:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002c9e:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8002ca2:	7809      	ldrb	r1, [r1, #0]
 8002ca4:	f001 010f 	and.w	r1, r1, #15
 8002ca8:	408a      	lsls	r2, r1
 8002caa:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8002cae:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002cb2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002cb6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <USB_DeactivateEndpoint+0x8c>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
}
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	bc70      	pop	{r4, r5, r6}
 8002cc6:	4770      	bx	lr
 8002cc8:	ec337800 	.word	0xec337800
 8002ccc:	eff37800 	.word	0xeff37800

08002cd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002cd0:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002cd2:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002cd4:	784c      	ldrb	r4, [r1, #1]
 8002cd6:	2c01      	cmp	r4, #1
 8002cd8:	d15d      	bne.n	8002d96 <USB_EP0StartXfer+0xc6>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002cda:	694c      	ldr	r4, [r1, #20]
 8002cdc:	b9b4      	cbnz	r4, 8002d0c <USB_EP0StartXfer+0x3c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002cde:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002ce2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002ce6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002cea:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002cee:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002cf2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002cf6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002cfa:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002cfe:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002d02:	0ced      	lsrs	r5, r5, #19
 8002d04:	04ed      	lsls	r5, r5, #19
 8002d06:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8002d0a:	e01c      	b.n	8002d46 <USB_EP0StartXfer+0x76>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002d0c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002d10:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8002d14:	6925      	ldr	r5, [r4, #16]
 8002d16:	0ced      	lsrs	r5, r5, #19
 8002d18:	04ed      	lsls	r5, r5, #19
 8002d1a:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002d1c:	6925      	ldr	r5, [r4, #16]
 8002d1e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002d22:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002d26:	6125      	str	r5, [r4, #16]

      if (ep->xfer_len > ep->maxpacket)
 8002d28:	694e      	ldr	r6, [r1, #20]
 8002d2a:	688d      	ldr	r5, [r1, #8]
 8002d2c:	42ae      	cmp	r6, r5
 8002d2e:	d900      	bls.n	8002d32 <USB_EP0StartXfer+0x62>
      {
        ep->xfer_len = ep->maxpacket;
 8002d30:	614d      	str	r5, [r1, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002d32:	6925      	ldr	r5, [r4, #16]
 8002d34:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002d38:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002d3a:	6926      	ldr	r6, [r4, #16]
 8002d3c:	694d      	ldr	r5, [r1, #20]
 8002d3e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002d42:	4335      	orrs	r5, r6
 8002d44:	6125      	str	r5, [r4, #16]
    }

    if (dma == 1U)
 8002d46:	2a01      	cmp	r2, #1
 8002d48:	d10e      	bne.n	8002d68 <USB_EP0StartXfer+0x98>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002d4a:	690a      	ldr	r2, [r1, #16]
 8002d4c:	b11a      	cbz	r2, 8002d56 <USB_EP0StartXfer+0x86>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002d4e:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002d52:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d56:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002d5a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002d5e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002d62:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002d66:	e03d      	b.n	8002de4 <USB_EP0StartXfer+0x114>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d68:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002d6c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002d70:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002d74:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8002d78:	694b      	ldr	r3, [r1, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d032      	beq.n	8002de4 <USB_EP0StartXfer+0x114>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002d7e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8002d82:	780a      	ldrb	r2, [r1, #0]
 8002d84:	f002 020f 	and.w	r2, r2, #15
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002d94:	e026      	b.n	8002de4 <USB_EP0StartXfer+0x114>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d96:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002d9a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002d9e:	691c      	ldr	r4, [r3, #16]
 8002da0:	0ce4      	lsrs	r4, r4, #19
 8002da2:	04e4      	lsls	r4, r4, #19
 8002da4:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002da6:	691c      	ldr	r4, [r3, #16]
 8002da8:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002dac:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002db0:	611c      	str	r4, [r3, #16]

    if (ep->xfer_len > 0U)
 8002db2:	694c      	ldr	r4, [r1, #20]
 8002db4:	b10c      	cbz	r4, 8002dba <USB_EP0StartXfer+0xea>
    {
      ep->xfer_len = ep->maxpacket;
 8002db6:	688c      	ldr	r4, [r1, #8]
 8002db8:	614c      	str	r4, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002dba:	691c      	ldr	r4, [r3, #16]
 8002dbc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002dc0:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002dc2:	691d      	ldr	r5, [r3, #16]
 8002dc4:	688c      	ldr	r4, [r1, #8]
 8002dc6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002dca:	432c      	orrs	r4, r5
 8002dcc:	611c      	str	r4, [r3, #16]

    if (dma == 1U)
 8002dce:	2a01      	cmp	r2, #1
 8002dd0:	d102      	bne.n	8002dd8 <USB_EP0StartXfer+0x108>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002dd2:	68ca      	ldr	r2, [r1, #12]
 8002dd4:	b102      	cbz	r2, 8002dd8 <USB_EP0StartXfer+0x108>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002dd6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002dd8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002ddc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002de0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8002de4:	2000      	movs	r0, #0
 8002de6:	bc70      	pop	{r4, r5, r6}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop

08002dec <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002dec:	b470      	push	{r4, r5, r6}
 8002dee:	f89d 400c 	ldrb.w	r4, [sp, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 8002df2:	b96c      	cbnz	r4, 8002e10 <USB_WritePacket+0x24>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8002df4:	3303      	adds	r3, #3
 8002df6:	089b      	lsrs	r3, r3, #2
    for (i = 0U; i < count32b; i++)
 8002df8:	2500      	movs	r5, #0
 8002dfa:	e007      	b.n	8002e0c <USB_WritePacket+0x20>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002dfc:	eb00 3402 	add.w	r4, r0, r2, lsl #12
 8002e00:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8002e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e08:	6026      	str	r6, [r4, #0]
  uint32_t count32b, i;

  if (dma == 0U)
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
 8002e0a:	3501      	adds	r5, #1
 8002e0c:	429d      	cmp	r5, r3
 8002e0e:	d3f5      	bcc.n	8002dfc <USB_WritePacket+0x10>
      pSrc++;
    }
  }

  return HAL_OK;
}
 8002e10:	2000      	movs	r0, #0
 8002e12:	bc70      	pop	{r4, r5, r6}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1a:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002e1c:	780c      	ldrb	r4, [r1, #0]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002e1e:	784b      	ldrb	r3, [r1, #1]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	f040 80ab 	bne.w	8002f7c <USB_EPStartXfer+0x164>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002e26:	694b      	ldr	r3, [r1, #20]
 8002e28:	b9b3      	cbnz	r3, 8002e58 <USB_EPStartXfer+0x40>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e2a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002e2e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002e32:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002e36:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002e3a:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002e3e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002e42:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002e46:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002e4a:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002e4e:	0ced      	lsrs	r5, r5, #19
 8002e50:	04ed      	lsls	r5, r5, #19
 8002e52:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
 8002e56:	e032      	b.n	8002ebe <USB_EPStartXfer+0xa6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002e58:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002e5c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002e60:	0ced      	lsrs	r5, r5, #19
 8002e62:	04ed      	lsls	r5, r5, #19
 8002e64:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e68:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002e6c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002e70:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002e74:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002e78:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8002e7c:	694d      	ldr	r5, [r1, #20]
 8002e7e:	688e      	ldr	r6, [r1, #8]
 8002e80:	4435      	add	r5, r6
 8002e82:	3d01      	subs	r5, #1
 8002e84:	fbb5 f5f6 	udiv	r5, r5, r6
 8002e88:	4e65      	ldr	r6, [pc, #404]	; (8003020 <USB_EPStartXfer+0x208>)
 8002e8a:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8002e8e:	433d      	orrs	r5, r7
 8002e90:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002e94:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8002e98:	694d      	ldr	r5, [r1, #20]
 8002e9a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002e9e:	4335      	orrs	r5, r6
 8002ea0:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);

      if (ep->type == EP_TYPE_ISOC)
 8002ea8:	78cd      	ldrb	r5, [r1, #3]
 8002eaa:	2d01      	cmp	r5, #1
 8002eac:	d107      	bne.n	8002ebe <USB_EPStartXfer+0xa6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002eae:	691d      	ldr	r5, [r3, #16]
 8002eb0:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002eb4:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002eb6:	691d      	ldr	r5, [r3, #16]
 8002eb8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002ebc:	611d      	str	r5, [r3, #16]
      }
    }

    if (dma == 1U)
 8002ebe:	2a01      	cmp	r2, #1
 8002ec0:	d127      	bne.n	8002f12 <USB_EPStartXfer+0xfa>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002ec2:	690b      	ldr	r3, [r1, #16]
 8002ec4:	b11b      	cbz	r3, 8002ece <USB_EPStartXfer+0xb6>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002ec6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002eca:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
      }

      if (ep->type == EP_TYPE_ISOC)
 8002ece:	78cb      	ldrb	r3, [r1, #3]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d115      	bne.n	8002f00 <USB_EPStartXfer+0xe8>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002ed4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002ed8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002edc:	d108      	bne.n	8002ef0 <USB_EPStartXfer+0xd8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002ede:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002ee2:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002ee6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002eea:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 8002eee:	e007      	b.n	8002f00 <USB_EPStartXfer+0xe8>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002ef0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002ef4:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002f00:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002f04:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002f08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002f0c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8002f10:	e083      	b.n	800301a <USB_EPStartXfer+0x202>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002f12:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002f16:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002f1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002f1e:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900

      if (ep->type != EP_TYPE_ISOC)
 8002f22:	78cb      	ldrb	r3, [r1, #3]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d00e      	beq.n	8002f46 <USB_EPStartXfer+0x12e>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8002f28:	694b      	ldr	r3, [r1, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d075      	beq.n	800301a <USB_EPStartXfer+0x202>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002f2e:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8002f32:	780b      	ldrb	r3, [r1, #0]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	2201      	movs	r2, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	4323      	orrs	r3, r4
 8002f40:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002f44:	e069      	b.n	800301a <USB_EPStartXfer+0x202>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002f46:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002f4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f4e:	d106      	bne.n	8002f5e <USB_EPStartXfer+0x146>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002f50:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002f54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f58:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8002f5c:	e005      	b.n	8002f6a <USB_EPStartXfer+0x152>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002f5e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f66:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8002f6a:	4614      	mov	r4, r2
 8002f6c:	460b      	mov	r3, r1
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002f6e:	68c9      	ldr	r1, [r1, #12]
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	8a9b      	ldrh	r3, [r3, #20]
 8002f74:	9400      	str	r4, [sp, #0]
 8002f76:	f7ff ff39 	bl	8002dec <USB_WritePacket>
 8002f7a:	e04e      	b.n	800301a <USB_EPStartXfer+0x202>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f7c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002f80:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002f84:	691d      	ldr	r5, [r3, #16]
 8002f86:	0ced      	lsrs	r5, r5, #19
 8002f88:	04ed      	lsls	r5, r5, #19
 8002f8a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002f8c:	691d      	ldr	r5, [r3, #16]
 8002f8e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002f92:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002f96:	611d      	str	r5, [r3, #16]

    if (ep->xfer_len == 0U)
 8002f98:	694d      	ldr	r5, [r1, #20]
 8002f9a:	b955      	cbnz	r5, 8002fb2 <USB_EPStartXfer+0x19a>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002f9c:	691e      	ldr	r6, [r3, #16]
 8002f9e:	688d      	ldr	r5, [r1, #8]
 8002fa0:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002fa4:	4335      	orrs	r5, r6
 8002fa6:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002fa8:	691d      	ldr	r5, [r3, #16]
 8002faa:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002fae:	611d      	str	r5, [r3, #16]
 8002fb0:	e013      	b.n	8002fda <USB_EPStartXfer+0x1c2>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002fb2:	688e      	ldr	r6, [r1, #8]
 8002fb4:	4435      	add	r5, r6
 8002fb6:	3d01      	subs	r5, #1
 8002fb8:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002fbc:	691f      	ldr	r7, [r3, #16]
 8002fbe:	4e18      	ldr	r6, [pc, #96]	; (8003020 <USB_EPStartXfer+0x208>)
 8002fc0:	ea06 46c5 	and.w	r6, r6, r5, lsl #19
 8002fc4:	433e      	orrs	r6, r7
 8002fc6:	611e      	str	r6, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002fc8:	691f      	ldr	r7, [r3, #16]
 8002fca:	688e      	ldr	r6, [r1, #8]
 8002fcc:	b2ad      	uxth	r5, r5
 8002fce:	fb06 f505 	mul.w	r5, r6, r5
 8002fd2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002fd6:	433d      	orrs	r5, r7
 8002fd8:	611d      	str	r5, [r3, #16]
    }

    if (dma == 1U)
 8002fda:	2a01      	cmp	r2, #1
 8002fdc:	d102      	bne.n	8002fe4 <USB_EPStartXfer+0x1cc>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002fde:	68ca      	ldr	r2, [r1, #12]
 8002fe0:	b102      	cbz	r2, 8002fe4 <USB_EPStartXfer+0x1cc>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002fe2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8002fe4:	78cb      	ldrb	r3, [r1, #3]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d111      	bne.n	800300e <USB_EPStartXfer+0x1f6>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002fea:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002fee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ff2:	d106      	bne.n	8003002 <USB_EPStartXfer+0x1ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002ff4:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002ff8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ffc:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8003000:	e005      	b.n	800300e <USB_EPStartXfer+0x1f6>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003002:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800300e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003012:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003016:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800301a:	2000      	movs	r0, #0
 800301c:	b003      	add	sp, #12
 800301e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003020:	1ff80000 	.word	0x1ff80000

08003024 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003024:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003026:	3203      	adds	r2, #3
 8003028:	0892      	lsrs	r2, r2, #2

  for (i = 0U; i < count32b; i++)
 800302a:	2300      	movs	r3, #0
 800302c:	e005      	b.n	800303a <USB_ReadPacket+0x16>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800302e:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8003032:	6824      	ldr	r4, [r4, #0]
 8003034:	f841 4b04 	str.w	r4, [r1], #4
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
 8003038:	3301      	adds	r3, #1
 800303a:	4293      	cmp	r3, r2
 800303c:	d3f7      	bcc.n	800302e <USB_ReadPacket+0xa>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
    pDest++;
  }

  return ((void *)pDest);
}
 800303e:	4608      	mov	r0, r1
 8003040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <USB_EPSetStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8003048:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 800304a:	784a      	ldrb	r2, [r1, #1]
 800304c:	2a01      	cmp	r2, #1
 800304e:	d113      	bne.n	8003078 <USB_EPSetStall+0x30>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003050:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003054:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003058:	2a00      	cmp	r2, #0
 800305a:	db06      	blt.n	800306a <USB_EPSetStall+0x22>
 800305c:	b12b      	cbz	r3, 800306a <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800305e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003066:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800306a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800306e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003072:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003076:	e012      	b.n	800309e <USB_EPSetStall+0x56>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003078:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800307c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003080:	2a00      	cmp	r2, #0
 8003082:	db06      	blt.n	8003092 <USB_EPSetStall+0x4a>
 8003084:	b12b      	cbz	r3, 8003092 <USB_EPSetStall+0x4a>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003086:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800308a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800308e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003092:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800309a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800309e:	2000      	movs	r0, #0
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <USB_EPClearStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80030a4:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 80030a6:	784a      	ldrb	r2, [r1, #1]
 80030a8:	2a01      	cmp	r2, #1
 80030aa:	d113      	bne.n	80030d4 <USB_EPClearStall+0x30>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030ac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80030b0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80030b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030b8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80030bc:	78cb      	ldrb	r3, [r1, #3]
 80030be:	3b02      	subs	r3, #2
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d819      	bhi.n	80030fa <USB_EPClearStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80030c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80030d2:	e012      	b.n	80030fa <USB_EPClearStall+0x56>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030d4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80030d8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80030dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030e0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80030e4:	78cb      	ldrb	r3, [r1, #3]
 80030e6:	3b02      	subs	r3, #2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d805      	bhi.n	80030fa <USB_EPClearStall+0x56>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80030ee:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80030f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
  }
  return HAL_OK;
}
 80030fa:	2000      	movs	r0, #0
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop

08003100 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003100:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003104:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003108:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800310c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003110:	0109      	lsls	r1, r1, #4
 8003112:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003116:	4319      	orrs	r1, r3
 8003118:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800

  return HAL_OK;
}
 800311c:	2000      	movs	r0, #0
 800311e:	4770      	bx	lr

08003120 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003120:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003122:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003126:	f023 0302 	bic.w	r3, r3, #2
 800312a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800312e:	2003      	movs	r0, #3
 8003130:	f000 fefe 	bl	8003f30 <HAL_Delay>

  return HAL_OK;
}
 8003134:	2000      	movs	r0, #0
 8003136:	bd08      	pop	{r3, pc}

08003138 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003138:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800313a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800313e:	f043 0302 	orr.w	r3, r3, #2
 8003142:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003146:	2003      	movs	r0, #3
 8003148:	f000 fef2 	bl	8003f30 <HAL_Delay>

  return HAL_OK;
}
 800314c:	2000      	movs	r0, #0
 800314e:	bd08      	pop	{r3, pc}

08003150 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003150:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003152:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8003154:	4010      	ands	r0, r2
 8003156:	4770      	bx	lr

08003158 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003158:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800315c:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
 8003164:	0c00      	lsrs	r0, r0, #16
 8003166:	4770      	bx	lr

08003168 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003168:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800316c:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
 8003174:	b280      	uxth	r0, r0
 8003176:	4770      	bx	lr

08003178 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003178:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800317c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003180:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003184:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 8003186:	4010      	ands	r0, r2
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800318c:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800318e:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003192:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003196:	f001 030f 	and.w	r3, r1, #15
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	01db      	lsls	r3, r3, #7
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80031a4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80031a8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80031ac:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
}
 80031ae:	4018      	ands	r0, r3
 80031b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop

080031b8 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 80031b8:	6940      	ldr	r0, [r0, #20]
}
 80031ba:	f000 0001 	and.w	r0, r0, #1
 80031be:	4770      	bx	lr

080031c0 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80031c0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80031c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031c8:	f023 0307 	bic.w	r3, r3, #7
 80031cc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80031d0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	f002 0206 	and.w	r2, r2, #6
 80031da:	2a04      	cmp	r2, #4
 80031dc:	d105      	bne.n	80031ea <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80031de:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80031e2:	f042 0203 	orr.w	r2, r2, #3
 80031e6:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 80031f2:	2000      	movs	r0, #0
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop

080031f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80031f8:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031fa:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <USB_EP0_OutStart+0x58>)
 80031fe:	429c      	cmp	r4, r3
 8003200:	d903      	bls.n	800320a <USB_EP0_OutStart+0x12>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003202:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003206:	2b00      	cmp	r3, #0
 8003208:	db1e      	blt.n	8003248 <USB_EP0_OutStart+0x50>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800320a:	2400      	movs	r4, #0
 800320c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003210:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003214:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003218:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800321c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003220:	f044 0418 	orr.w	r4, r4, #24
 8003224:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003228:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800322c:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8003230:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
 8003234:	2901      	cmp	r1, #1
 8003236:	d107      	bne.n	8003248 <USB_EP0_OutStart+0x50>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003238:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800323c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003240:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003244:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8003248:	2000      	movs	r0, #0
 800324a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	4f54300a 	.word	0x4f54300a

08003254 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003254:	2800      	cmp	r0, #0
 8003256:	f000 81d7 	beq.w	8003608 <HAL_RCC_OscConfig+0x3b4>
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325a:	b570      	push	{r4, r5, r6, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003260:	6803      	ldr	r3, [r0, #0]
 8003262:	f013 0f01 	tst.w	r3, #1
 8003266:	d05a      	beq.n	800331e <HAL_RCC_OscConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003268:	4ba0      	ldr	r3, [pc, #640]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b04      	cmp	r3, #4
 8003272:	d00a      	beq.n	800328a <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003274:	4b9d      	ldr	r3, [pc, #628]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800327c:	2b08      	cmp	r3, #8
 800327e:	d10d      	bne.n	800329c <HAL_RCC_OscConfig+0x48>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003280:	4b9a      	ldr	r3, [pc, #616]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003288:	d008      	beq.n	800329c <HAL_RCC_OscConfig+0x48>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328a:	4b98      	ldr	r3, [pc, #608]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003292:	d044      	beq.n	800331e <HAL_RCC_OscConfig+0xca>
 8003294:	6863      	ldr	r3, [r4, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d141      	bne.n	800331e <HAL_RCC_OscConfig+0xca>
 800329a:	e1b7      	b.n	800360c <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329c:	6863      	ldr	r3, [r4, #4]
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d105      	bne.n	80032b0 <HAL_RCC_OscConfig+0x5c>
 80032a4:	4a91      	ldr	r2, [pc, #580]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e015      	b.n	80032dc <HAL_RCC_OscConfig+0x88>
 80032b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_OscConfig+0x76>
 80032b6:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x88>
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032dc:	6863      	ldr	r3, [r4, #4]
 80032de:	b17b      	cbz	r3, 8003300 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f000 fe20 	bl	8003f24 <HAL_GetTick>
 80032e4:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	e005      	b.n	80032f4 <HAL_RCC_OscConfig+0xa0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e8:	f000 fe1c 	bl	8003f24 <HAL_GetTick>
 80032ec:	1b40      	subs	r0, r0, r5
 80032ee:	2864      	cmp	r0, #100	; 0x64
 80032f0:	f200 818e 	bhi.w	8003610 <HAL_RCC_OscConfig+0x3bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f4:	4b7d      	ldr	r3, [pc, #500]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032fc:	d0f4      	beq.n	80032e8 <HAL_RCC_OscConfig+0x94>
 80032fe:	e00e      	b.n	800331e <HAL_RCC_OscConfig+0xca>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f000 fe10 	bl	8003f24 <HAL_GetTick>
 8003304:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	e005      	b.n	8003314 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003308:	f000 fe0c 	bl	8003f24 <HAL_GetTick>
 800330c:	1b40      	subs	r0, r0, r5
 800330e:	2864      	cmp	r0, #100	; 0x64
 8003310:	f200 8180 	bhi.w	8003614 <HAL_RCC_OscConfig+0x3c0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003314:	4b75      	ldr	r3, [pc, #468]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800331c:	d1f4      	bne.n	8003308 <HAL_RCC_OscConfig+0xb4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	f013 0f02 	tst.w	r3, #2
 8003324:	d050      	beq.n	80033c8 <HAL_RCC_OscConfig+0x174>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003326:	4b71      	ldr	r3, [pc, #452]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f013 0f0c 	tst.w	r3, #12
 800332e:	d00a      	beq.n	8003346 <HAL_RCC_OscConfig+0xf2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003330:	4b6e      	ldr	r3, [pc, #440]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003338:	2b08      	cmp	r3, #8
 800333a:	d116      	bne.n	800336a <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333c:	4b6b      	ldr	r3, [pc, #428]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003344:	d111      	bne.n	800336a <HAL_RCC_OscConfig+0x116>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b69      	ldr	r3, [pc, #420]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f013 0f02 	tst.w	r3, #2
 800334e:	d003      	beq.n	8003358 <HAL_RCC_OscConfig+0x104>
 8003350:	68e3      	ldr	r3, [r4, #12]
 8003352:	2b01      	cmp	r3, #1
 8003354:	f040 8160 	bne.w	8003618 <HAL_RCC_OscConfig+0x3c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4a64      	ldr	r2, [pc, #400]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 800335a:	6813      	ldr	r3, [r2, #0]
 800335c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003360:	6921      	ldr	r1, [r4, #16]
 8003362:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003366:	6013      	str	r3, [r2, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003368:	e02e      	b.n	80033c8 <HAL_RCC_OscConfig+0x174>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800336a:	68e3      	ldr	r3, [r4, #12]
 800336c:	b1d3      	cbz	r3, 80033a4 <HAL_RCC_OscConfig+0x150>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336e:	2201      	movs	r2, #1
 8003370:	4b5f      	ldr	r3, [pc, #380]	; (80034f0 <HAL_RCC_OscConfig+0x29c>)
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f000 fdd6 	bl	8003f24 <HAL_GetTick>
 8003378:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	e005      	b.n	8003388 <HAL_RCC_OscConfig+0x134>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337c:	f000 fdd2 	bl	8003f24 <HAL_GetTick>
 8003380:	1b40      	subs	r0, r0, r5
 8003382:	2802      	cmp	r0, #2
 8003384:	f200 814a 	bhi.w	800361c <HAL_RCC_OscConfig+0x3c8>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	4b58      	ldr	r3, [pc, #352]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f013 0f02 	tst.w	r3, #2
 8003390:	d0f4      	beq.n	800337c <HAL_RCC_OscConfig+0x128>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003392:	4a56      	ldr	r2, [pc, #344]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003394:	6813      	ldr	r3, [r2, #0]
 8003396:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800339a:	6921      	ldr	r1, [r4, #16]
 800339c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e011      	b.n	80033c8 <HAL_RCC_OscConfig+0x174>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a4:	2200      	movs	r2, #0
 80033a6:	4b52      	ldr	r3, [pc, #328]	; (80034f0 <HAL_RCC_OscConfig+0x29c>)
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f000 fdbb 	bl	8003f24 <HAL_GetTick>
 80033ae:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b0:	e005      	b.n	80033be <HAL_RCC_OscConfig+0x16a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b2:	f000 fdb7 	bl	8003f24 <HAL_GetTick>
 80033b6:	1b40      	subs	r0, r0, r5
 80033b8:	2802      	cmp	r0, #2
 80033ba:	f200 8131 	bhi.w	8003620 <HAL_RCC_OscConfig+0x3cc>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f013 0f02 	tst.w	r3, #2
 80033c6:	d1f4      	bne.n	80033b2 <HAL_RCC_OscConfig+0x15e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	f013 0f08 	tst.w	r3, #8
 80033ce:	d026      	beq.n	800341e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033d0:	6963      	ldr	r3, [r4, #20]
 80033d2:	b193      	cbz	r3, 80033fa <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d4:	2201      	movs	r2, #1
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_OscConfig+0x2a0>)
 80033d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f000 fda3 	bl	8003f24 <HAL_GetTick>
 80033de:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e0:	e005      	b.n	80033ee <HAL_RCC_OscConfig+0x19a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e2:	f000 fd9f 	bl	8003f24 <HAL_GetTick>
 80033e6:	1b40      	subs	r0, r0, r5
 80033e8:	2802      	cmp	r0, #2
 80033ea:	f200 811b 	bhi.w	8003624 <HAL_RCC_OscConfig+0x3d0>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	f013 0f02 	tst.w	r3, #2
 80033f6:	d0f4      	beq.n	80033e2 <HAL_RCC_OscConfig+0x18e>
 80033f8:	e011      	b.n	800341e <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fa:	2200      	movs	r2, #0
 80033fc:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_RCC_OscConfig+0x2a0>)
 80033fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003400:	f000 fd90 	bl	8003f24 <HAL_GetTick>
 8003404:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003406:	e005      	b.n	8003414 <HAL_RCC_OscConfig+0x1c0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003408:	f000 fd8c 	bl	8003f24 <HAL_GetTick>
 800340c:	1b40      	subs	r0, r0, r5
 800340e:	2802      	cmp	r0, #2
 8003410:	f200 810a 	bhi.w	8003628 <HAL_RCC_OscConfig+0x3d4>

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	f013 0f02 	tst.w	r3, #2
 800341c:	d1f4      	bne.n	8003408 <HAL_RCC_OscConfig+0x1b4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	f013 0f04 	tst.w	r3, #4
 8003424:	d07d      	beq.n	8003522 <HAL_RCC_OscConfig+0x2ce>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800342e:	d10d      	bne.n	800344c <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003438:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003448:	2501      	movs	r5, #1
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x1fa>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800344c:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <HAL_RCC_OscConfig+0x2a4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003456:	d113      	bne.n	8003480 <HAL_RCC_OscConfig+0x22c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003458:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x2a4>)
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f000 fd5f 	bl	8003f24 <HAL_GetTick>
 8003466:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e005      	b.n	8003476 <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f000 fd5b 	bl	8003f24 <HAL_GetTick>
 800346e:	1b80      	subs	r0, r0, r6
 8003470:	2802      	cmp	r0, #2
 8003472:	f200 80db 	bhi.w	800362c <HAL_RCC_OscConfig+0x3d8>
      SET_BIT(PWR->CR, PWR_CR_DBP);

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_OscConfig+0x2a4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800347e:	d0f4      	beq.n	800346a <HAL_RCC_OscConfig+0x216>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	68a3      	ldr	r3, [r4, #8]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_RCC_OscConfig+0x23e>
 8003486:	4a19      	ldr	r2, [pc, #100]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003488:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	e014      	b.n	80034bc <HAL_RCC_OscConfig+0x268>
 8003492:	2b05      	cmp	r3, #5
 8003494:	d109      	bne.n	80034aa <HAL_RCC_OscConfig+0x256>
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 8003498:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800349a:	f042 0204 	orr.w	r2, r2, #4
 800349e:	671a      	str	r2, [r3, #112]	; 0x70
 80034a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	671a      	str	r2, [r3, #112]	; 0x70
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x268>
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 80034ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	671a      	str	r2, [r3, #112]	; 0x70
 80034b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034bc:	68a3      	ldr	r3, [r4, #8]
 80034be:	b18b      	cbz	r3, 80034e4 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f000 fd30 	bl	8003f24 <HAL_GetTick>
 80034c4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	e007      	b.n	80034d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f000 fd2c 	bl	8003f24 <HAL_GetTick>
 80034cc:	1b80      	subs	r0, r0, r6
 80034ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80034d2:	4298      	cmp	r0, r3
 80034d4:	f200 80ac 	bhi.w	8003630 <HAL_RCC_OscConfig+0x3dc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_RCC_OscConfig+0x298>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	f013 0f02 	tst.w	r3, #2
 80034e0:	d0f2      	beq.n	80034c8 <HAL_RCC_OscConfig+0x274>
 80034e2:	e018      	b.n	8003516 <HAL_RCC_OscConfig+0x2c2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f000 fd1e 	bl	8003f24 <HAL_GetTick>
 80034e8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	e00f      	b.n	800350c <HAL_RCC_OscConfig+0x2b8>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	42470000 	.word	0x42470000
 80034f4:	42470e80 	.word	0x42470e80
 80034f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f000 fd12 	bl	8003f24 <HAL_GetTick>
 8003500:	1b80      	subs	r0, r0, r6
 8003502:	f241 3388 	movw	r3, #5000	; 0x1388
 8003506:	4298      	cmp	r0, r3
 8003508:	f200 8094 	bhi.w	8003634 <HAL_RCC_OscConfig+0x3e0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350c:	4b55      	ldr	r3, [pc, #340]	; (8003664 <HAL_RCC_OscConfig+0x410>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	f013 0f02 	tst.w	r3, #2
 8003514:	d1f2      	bne.n	80034fc <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003516:	b125      	cbz	r5, 8003522 <HAL_RCC_OscConfig+0x2ce>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003518:	4a52      	ldr	r2, [pc, #328]	; (8003664 <HAL_RCC_OscConfig+0x410>)
 800351a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003522:	69a3      	ldr	r3, [r4, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8087 	beq.w	8003638 <HAL_RCC_OscConfig+0x3e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352a:	4a4e      	ldr	r2, [pc, #312]	; (8003664 <HAL_RCC_OscConfig+0x410>)
 800352c:	6892      	ldr	r2, [r2, #8]
 800352e:	f002 020c 	and.w	r2, r2, #12
 8003532:	2a08      	cmp	r2, #8
 8003534:	d048      	beq.n	80035c8 <HAL_RCC_OscConfig+0x374>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	2b02      	cmp	r3, #2
 8003538:	d133      	bne.n	80035a2 <HAL_RCC_OscConfig+0x34e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	2200      	movs	r2, #0
 800353c:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_RCC_OscConfig+0x414>)
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f000 fcf0 	bl	8003f24 <HAL_GetTick>
 8003544:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	e004      	b.n	8003552 <HAL_RCC_OscConfig+0x2fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003548:	f000 fcec 	bl	8003f24 <HAL_GetTick>
 800354c:	1b40      	subs	r0, r0, r5
 800354e:	2802      	cmp	r0, #2
 8003550:	d874      	bhi.n	800363c <HAL_RCC_OscConfig+0x3e8>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <HAL_RCC_OscConfig+0x410>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800355a:	d1f5      	bne.n	8003548 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800355c:	69e2      	ldr	r2, [r4, #28]
 800355e:	6a23      	ldr	r3, [r4, #32]
 8003560:	4313      	orrs	r3, r2
 8003562:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003564:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003568:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800356a:	0852      	lsrs	r2, r2, #1
 800356c:	3a01      	subs	r2, #1
 800356e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003572:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003574:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003578:	4a3a      	ldr	r2, [pc, #232]	; (8003664 <HAL_RCC_OscConfig+0x410>)
 800357a:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800357c:	2201      	movs	r2, #1
 800357e:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCC_OscConfig+0x414>)
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f000 fccf 	bl	8003f24 <HAL_GetTick>
 8003586:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003588:	e004      	b.n	8003594 <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358a:	f000 fccb 	bl	8003f24 <HAL_GetTick>
 800358e:	1b00      	subs	r0, r0, r4
 8003590:	2802      	cmp	r0, #2
 8003592:	d855      	bhi.n	8003640 <HAL_RCC_OscConfig+0x3ec>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003594:	4b33      	ldr	r3, [pc, #204]	; (8003664 <HAL_RCC_OscConfig+0x410>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800359c:	d0f5      	beq.n	800358a <HAL_RCC_OscConfig+0x336>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800359e:	2000      	movs	r0, #0
 80035a0:	e05d      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	2200      	movs	r2, #0
 80035a4:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_OscConfig+0x414>)
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f000 fcbc 	bl	8003f24 <HAL_GetTick>
 80035ac:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	e004      	b.n	80035ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b0:	f000 fcb8 	bl	8003f24 <HAL_GetTick>
 80035b4:	1b00      	subs	r0, r0, r4
 80035b6:	2802      	cmp	r0, #2
 80035b8:	d844      	bhi.n	8003644 <HAL_RCC_OscConfig+0x3f0>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <HAL_RCC_OscConfig+0x410>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035c2:	d1f5      	bne.n	80035b0 <HAL_RCC_OscConfig+0x35c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80035c4:	2000      	movs	r0, #0
 80035c6:	e04a      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d03d      	beq.n	8003648 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_OscConfig+0x410>)
 80035ce:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80035d4:	69e2      	ldr	r2, [r4, #28]
 80035d6:	4291      	cmp	r1, r2
 80035d8:	d138      	bne.n	800364c <HAL_RCC_OscConfig+0x3f8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035de:	6a21      	ldr	r1, [r4, #32]
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e0:	428a      	cmp	r2, r1
 80035e2:	d135      	bne.n	8003650 <HAL_RCC_OscConfig+0x3fc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80035ea:	401a      	ands	r2, r3
 80035ec:	428a      	cmp	r2, r1
 80035ee:	d131      	bne.n	8003654 <HAL_RCC_OscConfig+0x400>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035f6:	428a      	cmp	r2, r1
 80035f8:	d12e      	bne.n	8003658 <HAL_RCC_OscConfig+0x404>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035fa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80035fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003600:	4293      	cmp	r3, r2
 8003602:	d02b      	beq.n	800365c <HAL_RCC_OscConfig+0x408>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
        {
          return HAL_ERROR;
 8003604:	2001      	movs	r0, #1
 8003606:	e02a      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 8003608:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800360a:	4770      	bx	lr
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
 800360e:	e026      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8003610:	2003      	movs	r0, #3
 8003612:	e024      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8003614:	2003      	movs	r0, #3
 8003616:	e022      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 8003618:	2001      	movs	r0, #1
 800361a:	e020      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800361c:	2003      	movs	r0, #3
 800361e:	e01e      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8003620:	2003      	movs	r0, #3
 8003622:	e01c      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8003624:	2003      	movs	r0, #3
 8003626:	e01a      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8003628:	2003      	movs	r0, #3
 800362a:	e018      	b.n	800365e <HAL_RCC_OscConfig+0x40a>

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800362c:	2003      	movs	r0, #3
 800362e:	e016      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8003630:	2003      	movs	r0, #3
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8003634:	2003      	movs	r0, #3
 8003636:	e012      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003638:	2000      	movs	r0, #0
 800363a:	e010      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800363c:	2003      	movs	r0, #3
 800363e:	e00e      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8003640:	2003      	movs	r0, #3
 8003642:	e00c      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8003644:	2003      	movs	r0, #3
 8003646:	e00a      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8003648:	2001      	movs	r0, #1
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
        {
          return HAL_ERROR;
 800364c:	2001      	movs	r0, #1
 800364e:	e006      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
 8003650:	2001      	movs	r0, #1
 8003652:	e004      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
 8003654:	2001      	movs	r0, #1
 8003656:	e002      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
 8003658:	2001      	movs	r0, #1
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  return HAL_OK;
 800365c:	2000      	movs	r0, #0
}
 800365e:	b002      	add	sp, #8
 8003660:	bd70      	pop	{r4, r5, r6, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	42470060 	.word	0x42470060

0800366c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800366c:	b538      	push	{r3, r4, r5, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b04      	cmp	r3, #4
 8003678:	d055      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0xba>
 800367a:	2b08      	cmp	r3, #8
 800367c:	d001      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800367e:	482c      	ldr	r0, [pc, #176]	; (8003730 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003680:	bd38      	pop	{r3, r4, r5, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003682:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003690:	d020      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x68>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800369a:	00dc      	lsls	r4, r3, #3
 800369c:	2500      	movs	r5, #0
 800369e:	0169      	lsls	r1, r5, #5
 80036a0:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 80036a4:	0160      	lsls	r0, r4, #5
 80036a6:	1b04      	subs	r4, r0, r4
 80036a8:	eb61 0505 	sbc.w	r5, r1, r5
 80036ac:	01a9      	lsls	r1, r5, #6
 80036ae:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80036b2:	01a0      	lsls	r0, r4, #6
 80036b4:	1b00      	subs	r0, r0, r4
 80036b6:	eb61 0105 	sbc.w	r1, r1, r5
 80036ba:	18c0      	adds	r0, r0, r3
 80036bc:	f141 0100 	adc.w	r1, r1, #0
 80036c0:	024b      	lsls	r3, r1, #9
 80036c2:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80036c6:	0244      	lsls	r4, r0, #9
 80036c8:	4620      	mov	r0, r4
 80036ca:	4619      	mov	r1, r3
 80036cc:	2300      	movs	r3, #0
 80036ce:	f7fd fba7 	bl	8000e20 <__aeabi_uldivmod>
 80036d2:	e01f      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d4:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80036dc:	00dc      	lsls	r4, r3, #3
 80036de:	2500      	movs	r5, #0
 80036e0:	0169      	lsls	r1, r5, #5
 80036e2:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 80036e6:	0160      	lsls	r0, r4, #5
 80036e8:	1b04      	subs	r4, r0, r4
 80036ea:	eb61 0505 	sbc.w	r5, r1, r5
 80036ee:	01a9      	lsls	r1, r5, #6
 80036f0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80036f4:	01a0      	lsls	r0, r4, #6
 80036f6:	1b00      	subs	r0, r0, r4
 80036f8:	eb61 0105 	sbc.w	r1, r1, r5
 80036fc:	18c0      	adds	r0, r0, r3
 80036fe:	f141 0100 	adc.w	r1, r1, #0
 8003702:	028b      	lsls	r3, r1, #10
 8003704:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003708:	0284      	lsls	r4, r0, #10
 800370a:	4620      	mov	r0, r4
 800370c:	4619      	mov	r1, r3
 800370e:	2300      	movs	r3, #0
 8003710:	f7fd fb86 	bl	8000e20 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800371c:	3301      	adds	r3, #1
 800371e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003720:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003724:	bd38      	pop	{r3, r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003726:	4803      	ldr	r0, [pc, #12]	; (8003734 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003728:	bd38      	pop	{r3, r4, r5, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	00f42400 	.word	0x00f42400
 8003734:	007a1200 	.word	0x007a1200

08003738 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003738:	2800      	cmp	r0, #0
 800373a:	f000 8098 	beq.w	800386e <HAL_RCC_ClockConfig+0x136>
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800373e:	b570      	push	{r4, r5, r6, lr}
 8003740:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003742:	4b52      	ldr	r3, [pc, #328]	; (800388c <HAL_RCC_ClockConfig+0x154>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	428b      	cmp	r3, r1
 800374c:	d208      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	b2cb      	uxtb	r3, r1
 8003750:	4a4e      	ldr	r2, [pc, #312]	; (800388c <HAL_RCC_ClockConfig+0x154>)
 8003752:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003754:	6813      	ldr	r3, [r2, #0]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	4299      	cmp	r1, r3
 800375c:	f040 8089 	bne.w	8003872 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	f013 0f02 	tst.w	r3, #2
 8003766:	d017      	beq.n	8003798 <HAL_RCC_ClockConfig+0x60>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	f013 0f04 	tst.w	r3, #4
 800376c:	d004      	beq.n	8003778 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376e:	4a48      	ldr	r2, [pc, #288]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 8003770:	6893      	ldr	r3, [r2, #8]
 8003772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	f013 0f08 	tst.w	r3, #8
 800377e:	d004      	beq.n	800378a <HAL_RCC_ClockConfig+0x52>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003780:	4a43      	ldr	r2, [pc, #268]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 8003782:	6893      	ldr	r3, [r2, #8]
 8003784:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003788:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378a:	4841      	ldr	r0, [pc, #260]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 800378c:	6883      	ldr	r3, [r0, #8]
 800378e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003792:	68a3      	ldr	r3, [r4, #8]
 8003794:	4313      	orrs	r3, r2
 8003796:	6083      	str	r3, [r0, #8]
 8003798:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	f013 0f01 	tst.w	r3, #1
 80037a0:	d02f      	beq.n	8003802 <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a2:	6862      	ldr	r2, [r4, #4]
 80037a4:	2a01      	cmp	r2, #1
 80037a6:	d105      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x7c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a8:	4b39      	ldr	r3, [pc, #228]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037b0:	d10e      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x98>
 80037b2:	e060      	b.n	8003876 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b4:	1e93      	subs	r3, r2, #2
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d805      	bhi.n	80037c6 <HAL_RCC_ClockConfig+0x8e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b35      	ldr	r3, [pc, #212]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037c2:	d105      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x98>
 80037c4:	e059      	b.n	800387a <HAL_RCC_ClockConfig+0x142>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	4b32      	ldr	r3, [pc, #200]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f013 0f02 	tst.w	r3, #2
 80037ce:	d056      	beq.n	800387e <HAL_RCC_ClockConfig+0x146>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d0:	492f      	ldr	r1, [pc, #188]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 80037d2:	688b      	ldr	r3, [r1, #8]
 80037d4:	f023 0303 	bic.w	r3, r3, #3
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f000 fba2 	bl	8003f24 <HAL_GetTick>
 80037e0:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e006      	b.n	80037f2 <HAL_RCC_ClockConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f000 fb9e 	bl	8003f24 <HAL_GetTick>
 80037e8:	1b80      	subs	r0, r0, r6
 80037ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80037ee:	4298      	cmp	r0, r3
 80037f0:	d847      	bhi.n	8003882 <HAL_RCC_ClockConfig+0x14a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b27      	ldr	r3, [pc, #156]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	6862      	ldr	r2, [r4, #4]
 80037fc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_RCC_ClockConfig+0x154>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	429d      	cmp	r5, r3
 800380c:	d207      	bcs.n	800381e <HAL_RCC_ClockConfig+0xe6>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	b2ea      	uxtb	r2, r5
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_RCC_ClockConfig+0x154>)
 8003812:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	429d      	cmp	r5, r3
 800381c:	d133      	bne.n	8003886 <HAL_RCC_ClockConfig+0x14e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	f013 0f04 	tst.w	r3, #4
 8003824:	d006      	beq.n	8003834 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003826:	491a      	ldr	r1, [pc, #104]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 8003828:	688b      	ldr	r3, [r1, #8]
 800382a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800382e:	68e3      	ldr	r3, [r4, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	f013 0f08 	tst.w	r3, #8
 800383a:	d007      	beq.n	800384c <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800383c:	4a14      	ldr	r2, [pc, #80]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 800383e:	6893      	ldr	r3, [r2, #8]
 8003840:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003844:	6921      	ldr	r1, [r4, #16]
 8003846:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800384a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800384c:	f7ff ff0e 	bl	800366c <HAL_RCC_GetSysClockFreq>
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_RCC_ClockConfig+0x158>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003858:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_RCC_ClockConfig+0x15c>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	40d8      	lsrs	r0, r3
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_RCC_ClockConfig+0x160>)
 8003860:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_RCC_ClockConfig+0x164>)
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	f003 fcdb 	bl	8007220 <HAL_InitTick>

  return HAL_OK;
 800386a:	2000      	movs	r0, #0
 800386c:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 800386e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8003870:	4770      	bx	lr

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8003872:	2001      	movs	r0, #1
 8003874:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8003876:	2001      	movs	r0, #1
 8003878:	bd70      	pop	{r4, r5, r6, pc}
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 800387a:	2001      	movs	r0, #1
 800387c:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 800387e:	2001      	movs	r0, #1
 8003880:	bd70      	pop	{r4, r5, r6, pc}

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8003882:	2003      	movs	r0, #3
 8003884:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8003886:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8003888:	bd70      	pop	{r4, r5, r6, pc}
 800388a:	bf00      	nop
 800388c:	40023c00 	.word	0x40023c00
 8003890:	40023800 	.word	0x40023800
 8003894:	0800dd94 	.word	0x0800dd94
 8003898:	2000006c 	.word	0x2000006c
 800389c:	20000064 	.word	0x20000064

080038a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80038a0:	4b01      	ldr	r3, [pc, #4]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	2000006c 	.word	0x2000006c

080038ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038ae:	f7ff fff7 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80038ba:	4a03      	ldr	r2, [pc, #12]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80038be:	40d8      	lsrs	r0, r3
 80038c0:	bd08      	pop	{r3, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	0800dda4 	.word	0x0800dda4

080038cc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038cc:	230f      	movs	r3, #15
 80038ce:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_GetClockConfig+0x34>)
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	f002 0203 	and.w	r2, r2, #3
 80038d8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80038e0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80038e8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	08db      	lsrs	r3, r3, #3
 80038ee:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80038f2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <HAL_RCC_GetClockConfig+0x38>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	600b      	str	r3, [r1, #0]
 80038fe:	4770      	bx	lr
 8003900:	40023800 	.word	0x40023800
 8003904:	40023c00 	.word	0x40023c00

08003908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390c:	b082      	sub	sp, #8
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800390e:	2300      	movs	r3, #0
 8003910:	e0c1      	b.n	8003a96 <HAL_GPIO_Init+0x18e>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003912:	2201      	movs	r2, #1
 8003914:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003916:	680c      	ldr	r4, [r1, #0]
 8003918:	ea02 0504 	and.w	r5, r2, r4

    if(iocurrent == ioposition)
 800391c:	42aa      	cmp	r2, r5
 800391e:	f040 80b9 	bne.w	8003a94 <HAL_GPIO_Init+0x18c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003922:	684c      	ldr	r4, [r1, #4]
 8003924:	1e66      	subs	r6, r4, #1
 8003926:	2e01      	cmp	r6, #1
 8003928:	d903      	bls.n	8003932 <HAL_GPIO_Init+0x2a>
 800392a:	2c11      	cmp	r4, #17
 800392c:	d001      	beq.n	8003932 <HAL_GPIO_Init+0x2a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800392e:	2c12      	cmp	r4, #18
 8003930:	d115      	bne.n	800395e <HAL_GPIO_Init+0x56>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003932:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003934:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003938:	2603      	movs	r6, #3
 800393a:	fa06 f60e 	lsl.w	r6, r6, lr
 800393e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003942:	68cc      	ldr	r4, [r1, #12]
 8003944:	fa04 f40e 	lsl.w	r4, r4, lr
 8003948:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800394a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800394e:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003952:	684c      	ldr	r4, [r1, #4]
 8003954:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003958:	409c      	lsls	r4, r3
 800395a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800395c:	6042      	str	r2, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800395e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003960:	005f      	lsls	r7, r3, #1
 8003962:	2403      	movs	r4, #3
 8003964:	40bc      	lsls	r4, r7
 8003966:	43e4      	mvns	r4, r4
 8003968:	ea06 0204 	and.w	r2, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800396c:	688e      	ldr	r6, [r1, #8]
 800396e:	40be      	lsls	r6, r7
 8003970:	4316      	orrs	r6, r2
      GPIOx->PUPDR = temp;
 8003972:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003974:	684a      	ldr	r2, [r1, #4]
 8003976:	2a02      	cmp	r2, #2
 8003978:	d001      	beq.n	800397e <HAL_GPIO_Init+0x76>
 800397a:	2a12      	cmp	r2, #18
 800397c:	d113      	bne.n	80039a6 <HAL_GPIO_Init+0x9e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800397e:	08de      	lsrs	r6, r3, #3
 8003980:	3608      	adds	r6, #8
 8003982:	f850 8026 	ldr.w	r8, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003986:	f003 0207 	and.w	r2, r3, #7
 800398a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800398e:	220f      	movs	r2, #15
 8003990:	fa02 f20e 	lsl.w	r2, r2, lr
 8003994:	ea28 0c02 	bic.w	ip, r8, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003998:	690a      	ldr	r2, [r1, #16]
 800399a:	fa02 f20e 	lsl.w	r2, r2, lr
 800399e:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3U] = temp;
 80039a2:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a8:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039aa:	684a      	ldr	r2, [r1, #4]
 80039ac:	f002 0403 	and.w	r4, r2, #3
 80039b0:	fa04 f207 	lsl.w	r2, r4, r7
 80039b4:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 80039b6:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039b8:	684a      	ldr	r2, [r1, #4]
 80039ba:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80039be:	d069      	beq.n	8003a94 <HAL_GPIO_Init+0x18c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c0:	2200      	movs	r2, #0
 80039c2:	9201      	str	r2, [sp, #4]
 80039c4:	4a37      	ldr	r2, [pc, #220]	; (8003aa4 <HAL_GPIO_Init+0x19c>)
 80039c6:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80039c8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80039cc:	6454      	str	r4, [r2, #68]	; 0x44
 80039ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039d0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80039d4:	9201      	str	r2, [sp, #4]
 80039d6:	9a01      	ldr	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d8:	089e      	lsrs	r6, r3, #2
 80039da:	1cb4      	adds	r4, r6, #2
 80039dc:	4a32      	ldr	r2, [pc, #200]	; (8003aa8 <HAL_GPIO_Init+0x1a0>)
 80039de:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e2:	f003 0203 	and.w	r2, r3, #3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	270f      	movs	r7, #15
 80039ea:	4097      	lsls	r7, r2
 80039ec:	ea24 0707 	bic.w	r7, r4, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f0:	4c2e      	ldr	r4, [pc, #184]	; (8003aac <HAL_GPIO_Init+0x1a4>)
 80039f2:	42a0      	cmp	r0, r4
 80039f4:	d011      	beq.n	8003a1a <HAL_GPIO_Init+0x112>
 80039f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80039fa:	42a0      	cmp	r0, r4
 80039fc:	d00f      	beq.n	8003a1e <HAL_GPIO_Init+0x116>
 80039fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a02:	42a0      	cmp	r0, r4
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_Init+0x11a>
 8003a06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a0a:	42a0      	cmp	r0, r4
 8003a0c:	d00b      	beq.n	8003a26 <HAL_GPIO_Init+0x11e>
 8003a0e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a12:	42a0      	cmp	r0, r4
 8003a14:	d109      	bne.n	8003a2a <HAL_GPIO_Init+0x122>
 8003a16:	2404      	movs	r4, #4
 8003a18:	e008      	b.n	8003a2c <HAL_GPIO_Init+0x124>
 8003a1a:	2400      	movs	r4, #0
 8003a1c:	e006      	b.n	8003a2c <HAL_GPIO_Init+0x124>
 8003a1e:	2401      	movs	r4, #1
 8003a20:	e004      	b.n	8003a2c <HAL_GPIO_Init+0x124>
 8003a22:	2402      	movs	r4, #2
 8003a24:	e002      	b.n	8003a2c <HAL_GPIO_Init+0x124>
 8003a26:	2403      	movs	r4, #3
 8003a28:	e000      	b.n	8003a2c <HAL_GPIO_Init+0x124>
 8003a2a:	2407      	movs	r4, #7
 8003a2c:	fa04 f202 	lsl.w	r2, r4, r2
 8003a30:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a32:	3602      	adds	r6, #2
 8003a34:	4c1c      	ldr	r4, [pc, #112]	; (8003aa8 <HAL_GPIO_Init+0x1a0>)
 8003a36:	f844 2026 	str.w	r2, [r4, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <HAL_GPIO_Init+0x1a8>)
 8003a3c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003a3e:	43ea      	mvns	r2, r5
 8003a40:	ea04 0602 	and.w	r6, r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a44:	684f      	ldr	r7, [r1, #4]
 8003a46:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003a4a:	d001      	beq.n	8003a50 <HAL_GPIO_Init+0x148>
        {
          temp |= iocurrent;
 8003a4c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003a50:	4c17      	ldr	r4, [pc, #92]	; (8003ab0 <HAL_GPIO_Init+0x1a8>)
 8003a52:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8003a54:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003a56:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a5a:	684f      	ldr	r7, [r1, #4]
 8003a5c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003a60:	d001      	beq.n	8003a66 <HAL_GPIO_Init+0x15e>
        {
          temp |= iocurrent;
 8003a62:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8003a66:	4c12      	ldr	r4, [pc, #72]	; (8003ab0 <HAL_GPIO_Init+0x1a8>)
 8003a68:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a70:	684f      	ldr	r7, [r1, #4]
 8003a72:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003a76:	d001      	beq.n	8003a7c <HAL_GPIO_Init+0x174>
        {
          temp |= iocurrent;
 8003a78:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8003a7c:	4c0c      	ldr	r4, [pc, #48]	; (8003ab0 <HAL_GPIO_Init+0x1a8>)
 8003a7e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003a80:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a84:	684e      	ldr	r6, [r1, #4]
 8003a86:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003a8a:	d001      	beq.n	8003a90 <HAL_GPIO_Init+0x188>
        {
          temp |= iocurrent;
 8003a8c:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003a90:	4c07      	ldr	r4, [pc, #28]	; (8003ab0 <HAL_GPIO_Init+0x1a8>)
 8003a92:	60e2      	str	r2, [r4, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a94:	3301      	adds	r3, #1
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	f67f af3b 	bls.w	8003912 <HAL_GPIO_Init+0xa>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8003a9c:	b002      	add	sp, #8
 8003a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40013800 	.word	0x40013800
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	40013c00 	.word	0x40013c00

08003ab4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab4:	b10a      	cbz	r2, 8003aba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab6:	6181      	str	r1, [r0, #24]
 8003ab8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aba:	0409      	lsls	r1, r1, #16
 8003abc:	6181      	str	r1, [r0, #24]
 8003abe:	4770      	bx	lr

08003ac0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ac0:	6802      	ldr	r2, [r0, #0]
 8003ac2:	b2d3      	uxtb	r3, r2
 8003ac4:	3b10      	subs	r3, #16
 8003ac6:	490b      	ldr	r1, [pc, #44]	; (8003af4 <DMA_CalcBaseAndBitshift+0x34>)
 8003ac8:	fba1 1303 	umull	r1, r3, r1, r3
 8003acc:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ace:	490a      	ldr	r1, [pc, #40]	; (8003af8 <DMA_CalcBaseAndBitshift+0x38>)
 8003ad0:	5cc9      	ldrb	r1, [r1, r3]
 8003ad2:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d906      	bls.n	8003ae6 <DMA_CalcBaseAndBitshift+0x26>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ad8:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8003adc:	f022 0203 	bic.w	r2, r2, #3
 8003ae0:	3204      	adds	r2, #4
 8003ae2:	6582      	str	r2, [r0, #88]	; 0x58
 8003ae4:	e004      	b.n	8003af0 <DMA_CalcBaseAndBitshift+0x30>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ae6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8003aea:	f022 0203 	bic.w	r2, r2, #3
 8003aee:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8003af0:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003af2:	4770      	bx	lr
 8003af4:	aaaaaaab 	.word	0xaaaaaaab
 8003af8:	0800dd8c 	.word	0x0800dd8c

08003afc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003afc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003afe:	6982      	ldr	r2, [r0, #24]
 8003b00:	b982      	cbnz	r2, 8003b24 <DMA_CheckFifoParam+0x28>
  {
    switch (tmp)
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d008      	beq.n	8003b18 <DMA_CheckFifoParam+0x1c>
 8003b06:	b10b      	cbz	r3, 8003b0c <DMA_CheckFifoParam+0x10>
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d12e      	bne.n	8003b6a <DMA_CheckFifoParam+0x6e>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b0e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003b12:	d12c      	bne.n	8003b6e <DMA_CheckFifoParam+0x72>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2000      	movs	r0, #0
 8003b16:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b1e:	d028      	beq.n	8003b72 <DMA_CheckFifoParam+0x76>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003b20:	2000      	movs	r0, #0
 8003b22:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b24:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003b28:	d113      	bne.n	8003b52 <DMA_CheckFifoParam+0x56>
  {
    switch (tmp)
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d803      	bhi.n	8003b36 <DMA_CheckFifoParam+0x3a>
 8003b2e:	e8df f003 	tbb	[pc, r3]
 8003b32:	0422      	.short	0x0422
 8003b34:	0a22      	.short	0x0a22
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003b36:	2000      	movs	r0, #0
 8003b38:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003b40:	d11b      	bne.n	8003b7a <DMA_CheckFifoParam+0x7e>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2000      	movs	r0, #0
 8003b44:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b4c:	d017      	beq.n	8003b7e <DMA_CheckFifoParam+0x82>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2000      	movs	r0, #0
 8003b50:	4770      	bx	lr
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d915      	bls.n	8003b82 <DMA_CheckFifoParam+0x86>
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d001      	beq.n	8003b5e <DMA_CheckFifoParam+0x62>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b60:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003b64:	d10f      	bne.n	8003b86 <DMA_CheckFifoParam+0x8a>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2000      	movs	r0, #0
 8003b68:	4770      	bx	lr
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8003b6e:	2001      	movs	r0, #1
 8003b70:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 8003b72:	2001      	movs	r0, #1
 8003b74:	4770      	bx	lr
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b76:	2001      	movs	r0, #1
 8003b78:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 8003b7e:	2001      	movs	r0, #1
 8003b80:	4770      	bx	lr
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b82:	2001      	movs	r0, #1
 8003b84:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8003b86:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop

08003b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003b90:	f000 f9c8 	bl	8003f24 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b94:	2c00      	cmp	r4, #0
 8003b96:	d05c      	beq.n	8003c52 <HAL_DMA_Init+0xc6>
 8003b98:	4605      	mov	r5, r0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ba6:	6822      	ldr	r2, [r4, #0]
 8003ba8:	6813      	ldr	r3, [r2, #0]
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_DMA_Init+0x3c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bb2:	f000 f9b7 	bl	8003f24 <HAL_GetTick>
 8003bb6:	1b40      	subs	r0, r0, r5
 8003bb8:	2805      	cmp	r0, #5
 8003bba:	d905      	bls.n	8003bc8 <HAL_DMA_Init+0x3c>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	f012 0f01 	tst.w	r2, #1
 8003bd0:	d1ef      	bne.n	8003bb2 <HAL_DMA_Init+0x26>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bd2:	681a      	ldr	r2, [r3, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bd4:	4820      	ldr	r0, [pc, #128]	; (8003c58 <HAL_DMA_Init+0xcc>)
 8003bd6:	4010      	ands	r0, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd8:	6861      	ldr	r1, [r4, #4]
 8003bda:	68a2      	ldr	r2, [r4, #8]
 8003bdc:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bde:	68e2      	ldr	r2, [r4, #12]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be0:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be2:	6922      	ldr	r2, [r4, #16]
 8003be4:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be6:	6962      	ldr	r2, [r4, #20]
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be8:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bea:	69a2      	ldr	r2, [r4, #24]
 8003bec:	4311      	orrs	r1, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bee:	69e2      	ldr	r2, [r4, #28]
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf0:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf2:	6a21      	ldr	r1, [r4, #32]
 8003bf4:	4311      	orrs	r1, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bf6:	ea40 0201 	orr.w	r2, r0, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003bfc:	2904      	cmp	r1, #4
 8003bfe:	d103      	bne.n	8003c08 <HAL_DMA_Init+0x7c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c04:	4301      	orrs	r1, r0
 8003c06:	430a      	orrs	r2, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c08:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c0a:	6826      	ldr	r6, [r4, #0]
 8003c0c:	6975      	ldr	r5, [r6, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c0e:	f025 0507 	bic.w	r5, r5, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c14:	431d      	orrs	r5, r3

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d10d      	bne.n	8003c36 <HAL_DMA_Init+0xaa>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c1c:	431d      	orrs	r5, r3
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c20:	b14b      	cbz	r3, 8003c36 <HAL_DMA_Init+0xaa>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c22:	4620      	mov	r0, r4
 8003c24:	f7ff ff6a 	bl	8003afc <DMA_CheckFifoParam>
 8003c28:	b128      	cbz	r0, 8003c36 <HAL_DMA_Init+0xaa>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c2a:	2340      	movs	r3, #64	; 0x40
 8003c2c:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c36:	6175      	str	r5, [r6, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f7ff ff41 	bl	8003ac0 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c40:	233f      	movs	r3, #63	; 0x3f
 8003c42:	4093      	lsls	r3, r2
 8003c44:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c46:	2000      	movs	r0, #0
 8003c48:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8003c50:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003c52:	2001      	movs	r0, #1
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8003c54:	bd70      	pop	{r4, r5, r6, pc}
 8003c56:	bf00      	nop
 8003c58:	f010803f 	.word	0xf010803f

08003c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c66:	4b71      	ldr	r3, [pc, #452]	; (8003e2c <HAL_DMA_IRQHandler+0x1d0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4d71      	ldr	r5, [pc, #452]	; (8003e30 <HAL_DMA_IRQHandler+0x1d4>)
 8003c6c:	fba5 3503 	umull	r3, r5, r5, r3
 8003c70:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c72:	6d87      	ldr	r7, [r0, #88]	; 0x58

  tmpisr = regs->ISR;
 8003c74:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c76:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003c78:	2308      	movs	r3, #8
 8003c7a:	4093      	lsls	r3, r2
 8003c7c:	421e      	tst	r6, r3
 8003c7e:	d010      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c80:	6803      	ldr	r3, [r0, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	f012 0f04 	tst.w	r2, #4
 8003c88:	d00b      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	f022 0204 	bic.w	r2, r2, #4
 8003c90:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c92:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003c94:	2308      	movs	r3, #8
 8003c96:	4093      	lsls	r3, r2
 8003c98:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c9a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6543      	str	r3, [r0, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	4093      	lsls	r3, r2
 8003ca8:	421e      	tst	r6, r3
 8003caa:	d009      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	6952      	ldr	r2, [r2, #20]
 8003cb0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003cb4:	d004      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cb6:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cba:	f043 0302 	orr.w	r3, r3, #2
 8003cbe:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	4093      	lsls	r3, r2
 8003cc6:	421e      	tst	r6, r3
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cca:	6822      	ldr	r2, [r4, #0]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	f012 0f02 	tst.w	r2, #2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cd4:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	4093      	lsls	r3, r2
 8003ce4:	421e      	tst	r6, r3
 8003ce6:	d024      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	f012 0f08 	tst.w	r2, #8
 8003cf0:	d01f      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cf2:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003cfc:	d00d      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003d04:	d104      	bne.n	8003d10 <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d08:	b19b      	cbz	r3, 8003d32 <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	4798      	blx	r3
 8003d0e:	e010      	b.n	8003d32 <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d12:	b173      	cbz	r3, 8003d32 <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d14:	4620      	mov	r0, r4
 8003d16:	4798      	blx	r3
 8003d18:	e00b      	b.n	8003d32 <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003d20:	d103      	bne.n	8003d2a <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	f022 0208 	bic.w	r2, r2, #8
 8003d28:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d2c:	b10b      	cbz	r3, 8003d32 <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d2e:	4620      	mov	r0, r4
 8003d30:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003d34:	2320      	movs	r3, #32
 8003d36:	4093      	lsls	r3, r2
 8003d38:	421e      	tst	r6, r3
 8003d3a:	d052      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x186>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d3c:	6822      	ldr	r2, [r4, #0]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	f012 0f10 	tst.w	r2, #16
 8003d44:	d04d      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x186>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d46:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d48:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	d122      	bne.n	8003d98 <HAL_DMA_IRQHandler+0x13c>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d52:	6822      	ldr	r2, [r4, #0]
 8003d54:	6813      	ldr	r3, [r2, #0]
 8003d56:	f023 0316 	bic.w	r3, r3, #22
 8003d5a:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	6953      	ldr	r3, [r2, #20]
 8003d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d64:	6153      	str	r3, [r2, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d68:	b90b      	cbnz	r3, 8003d6e <HAL_DMA_IRQHandler+0x112>
 8003d6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d6c:	b123      	cbz	r3, 8003d78 <HAL_DMA_IRQHandler+0x11c>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	f023 0308 	bic.w	r3, r3, #8
 8003d76:	6013      	str	r3, [r2, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d78:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003d7a:	233f      	movs	r3, #63	; 0x3f
 8003d7c:	4093      	lsls	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d80:	2300      	movs	r3, #0
 8003d82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d049      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x1ca>
        {
          hdma->XferAbortCallback(hdma);
 8003d92:	4620      	mov	r0, r4
 8003d94:	4798      	blx	r3
 8003d96:	e046      	b.n	8003e26 <HAL_DMA_IRQHandler+0x1ca>
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003da0:	d00d      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x162>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003da8:	d104      	bne.n	8003db4 <HAL_DMA_IRQHandler+0x158>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003daa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dac:	b1cb      	cbz	r3, 8003de2 <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dae:	4620      	mov	r0, r4
 8003db0:	4798      	blx	r3
 8003db2:	e016      	b.n	8003de2 <HAL_DMA_IRQHandler+0x186>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003db4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003db6:	b1a3      	cbz	r3, 8003de2 <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003db8:	4620      	mov	r0, r4
 8003dba:	4798      	blx	r3
 8003dbc:	e011      	b.n	8003de2 <HAL_DMA_IRQHandler+0x186>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003dc4:	d109      	bne.n	8003dda <HAL_DMA_IRQHandler+0x17e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	f022 0210 	bic.w	r2, r2, #16
 8003dcc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003dda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ddc:	b10b      	cbz	r3, 8003de2 <HAL_DMA_IRQHandler+0x186>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dde:	4620      	mov	r0, r4
 8003de0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003de2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003de4:	b1fb      	cbz	r3, 8003e26 <HAL_DMA_IRQHandler+0x1ca>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003de6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003de8:	f013 0f01 	tst.w	r3, #1
 8003dec:	d017      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x1c2>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dee:	2305      	movs	r3, #5
 8003df0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	3301      	adds	r3, #1
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	429d      	cmp	r5, r3
 8003e06:	d304      	bcc.n	8003e12 <HAL_DMA_IRQHandler+0x1b6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f013 0f01 	tst.w	r3, #1
 8003e10:	d1f5      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x1a2>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e12:	2300      	movs	r3, #0
 8003e14:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003e20:	b10b      	cbz	r3, 8003e26 <HAL_DMA_IRQHandler+0x1ca>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e22:	4620      	mov	r0, r4
 8003e24:	4798      	blx	r3
    }
  }
}
 8003e26:	b003      	add	sp, #12
 8003e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2000006c 	.word	0x2000006c
 8003e30:	1b4e81b5 	.word	0x1b4e81b5

08003e34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e34:	4a07      	ldr	r2, [pc, #28]	; (8003e54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003e36:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e40:	0200      	lsls	r0, r0, #8
 8003e42:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e46:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003e48:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003e4c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8003e50:	60d0      	str	r0, [r2, #12]
 8003e52:	4770      	bx	lr
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e58:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <HAL_NVIC_SetPriority+0x5c>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e62:	f1c3 0407 	rsb	r4, r3, #7
 8003e66:	2c04      	cmp	r4, #4
 8003e68:	bf28      	it	cs
 8003e6a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6c:	1d1d      	adds	r5, r3, #4
 8003e6e:	2d06      	cmp	r5, #6
 8003e70:	d901      	bls.n	8003e76 <HAL_NVIC_SetPriority+0x1e>
 8003e72:	1edd      	subs	r5, r3, #3
 8003e74:	e000      	b.n	8003e78 <HAL_NVIC_SetPriority+0x20>
 8003e76:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	2301      	movs	r3, #1
 8003e7a:	fa03 f404 	lsl.w	r4, r3, r4
 8003e7e:	3c01      	subs	r4, #1
 8003e80:	4021      	ands	r1, r4
 8003e82:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e84:	40ab      	lsls	r3, r5
 8003e86:	3b01      	subs	r3, #1
 8003e88:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003e8a:	430a      	orrs	r2, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	db08      	blt.n	8003ea2 <HAL_NVIC_SetPriority+0x4a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003e98:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003e9c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8003ea0:	e005      	b.n	8003eae <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea2:	f000 000f 	and.w	r0, r0, #15
 8003ea6:	0112      	lsls	r2, r2, #4
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_NVIC_SetPriority+0x60>)
 8003eac:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003eae:	bc30      	pop	{r4, r5}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000ed00 	.word	0xe000ed00
 8003eb8:	e000ed14 	.word	0xe000ed14

08003ebc <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	db08      	blt.n	8003ed2 <HAL_NVIC_EnableIRQ+0x16>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec0:	0942      	lsrs	r2, r0, #5
 8003ec2:	f000 001f 	and.w	r0, r0, #31
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	fa03 f000 	lsl.w	r0, r3, r0
 8003ecc:	4b01      	ldr	r3, [pc, #4]	; (8003ed4 <HAL_NVIC_EnableIRQ+0x18>)
 8003ece:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003ed2:	4770      	bx	lr
 8003ed4:	e000e100 	.word	0xe000e100

08003ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ed8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_Init+0x30>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eea:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef4:	2003      	movs	r0, #3
 8003ef6:	f7ff ff9d 	bl	8003e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003efa:	2000      	movs	r0, #0
 8003efc:	f003 f990 	bl	8007220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f00:	f7fd fd8c 	bl	8001a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003f04:	2000      	movs	r0, #0
 8003f06:	bd08      	pop	{r3, pc}
 8003f08:	40023c00 	.word	0x40023c00

08003f0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003f0c:	4a03      	ldr	r2, [pc, #12]	; (8003f1c <HAL_IncTick+0x10>)
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	4903      	ldr	r1, [pc, #12]	; (8003f20 <HAL_IncTick+0x14>)
 8003f12:	7809      	ldrb	r1, [r1, #0]
 8003f14:	440b      	add	r3, r1
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20006d68 	.word	0x20006d68
 8003f20:	20000068 	.word	0x20000068

08003f24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f24:	4b01      	ldr	r3, [pc, #4]	; (8003f2c <HAL_GetTick+0x8>)
 8003f26:	6818      	ldr	r0, [r3, #0]
}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20006d68 	.word	0x20006d68

08003f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003f34:	f7ff fff6 	bl	8003f24 <HAL_GetTick>
 8003f38:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f3a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003f3e:	d002      	beq.n	8003f46 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <HAL_Delay+0x24>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f46:	f7ff ffed 	bl	8003f24 <HAL_GetTick>
 8003f4a:	1b40      	subs	r0, r0, r5
 8003f4c:	4284      	cmp	r4, r0
 8003f4e:	d8fa      	bhi.n	8003f46 <HAL_Delay+0x16>
  {
  }
}
 8003f50:	bd38      	pop	{r3, r4, r5, pc}
 8003f52:	bf00      	nop
 8003f54:	20000068 	.word	0x20000068

08003f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5a:	6a03      	ldr	r3, [r0, #32]
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f64:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f66:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f68:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	680c      	ldr	r4, [r1, #0]
 8003f6e:	ea42 0504 	orr.w	r5, r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f72:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f76:	688b      	ldr	r3, [r1, #8]
 8003f78:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f7a:	4c0c      	ldr	r4, [pc, #48]	; (8003fac <TIM_OC1_SetConfig+0x54>)
 8003f7c:	42a0      	cmp	r0, r4
 8003f7e:	d105      	bne.n	8003f8c <TIM_OC1_SetConfig+0x34>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f80:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f84:	68ca      	ldr	r2, [r1, #12]
 8003f86:	4313      	orrs	r3, r2
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f88:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8c:	4c07      	ldr	r4, [pc, #28]	; (8003fac <TIM_OC1_SetConfig+0x54>)
 8003f8e:	42a0      	cmp	r0, r4
 8003f90:	d105      	bne.n	8003f9e <TIM_OC1_SetConfig+0x46>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f92:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f96:	694a      	ldr	r2, [r1, #20]
 8003f98:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f9a:	698e      	ldr	r6, [r1, #24]
 8003f9c:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9e:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa0:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fa2:	684a      	ldr	r2, [r1, #4]
 8003fa4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa6:	6203      	str	r3, [r0, #32]
}
 8003fa8:	bc70      	pop	{r4, r5, r6}
 8003faa:	4770      	bx	lr
 8003fac:	40010000 	.word	0x40010000

08003fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fb2:	6a03      	ldr	r3, [r0, #32]
 8003fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fc0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc4:	680c      	ldr	r4, [r1, #0]
 8003fc6:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fcc:	688c      	ldr	r4, [r1, #8]
 8003fce:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fd2:	4c0e      	ldr	r4, [pc, #56]	; (800400c <TIM_OC3_SetConfig+0x5c>)
 8003fd4:	42a0      	cmp	r0, r4
 8003fd6:	d106      	bne.n	8003fe6 <TIM_OC3_SetConfig+0x36>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fdc:	68cc      	ldr	r4, [r1, #12]
 8003fde:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	4c09      	ldr	r4, [pc, #36]	; (800400c <TIM_OC3_SetConfig+0x5c>)
 8003fe8:	42a0      	cmp	r0, r4
 8003fea:	d107      	bne.n	8003ffc <TIM_OC3_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fec:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ff0:	694c      	ldr	r4, [r1, #20]
 8003ff2:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ff6:	698c      	ldr	r4, [r1, #24]
 8003ff8:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffc:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffe:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004000:	684a      	ldr	r2, [r1, #4]
 8004002:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004004:	6203      	str	r3, [r0, #32]
}
 8004006:	bc30      	pop	{r4, r5}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000

08004010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004012:	6a03      	ldr	r3, [r0, #32]
 8004014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004018:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004020:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004024:	680d      	ldr	r5, [r1, #0]
 8004026:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800402a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800402e:	688d      	ldr	r5, [r1, #8]
 8004030:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004034:	4d07      	ldr	r5, [pc, #28]	; (8004054 <TIM_OC4_SetConfig+0x44>)
 8004036:	42a8      	cmp	r0, r5
 8004038:	d104      	bne.n	8004044 <TIM_OC4_SetConfig+0x34>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800403a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800403e:	694d      	ldr	r5, [r1, #20]
 8004040:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004044:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004046:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004048:	684a      	ldr	r2, [r1, #4]
 800404a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	6203      	str	r3, [r0, #32]
}
 800404e:	bc30      	pop	{r4, r5}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800405a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405c:	6a04      	ldr	r4, [r0, #32]
 800405e:	f024 0401 	bic.w	r4, r4, #1
 8004062:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004064:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004066:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800406a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004072:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004074:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004076:	6201      	str	r1, [r0, #32]
}
 8004078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop

08004080 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004080:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004082:	6a03      	ldr	r3, [r0, #32]
 8004084:	f023 0310 	bic.w	r3, r3, #16
 8004088:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800408c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004092:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004096:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800409a:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800409e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80040a0:	6201      	str	r1, [r0, #32]
}
 80040a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040a8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ae:	4319      	orrs	r1, r3
 80040b0:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b4:	6081      	str	r1, [r0, #8]
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040b8:	6802      	ldr	r2, [r0, #0]
 80040ba:	68d3      	ldr	r3, [r2, #12]
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c2:	6802      	ldr	r2, [r0, #0]
 80040c4:	6893      	ldr	r3, [r2, #8]
 80040c6:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80040d6:	2000      	movs	r0, #0
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop

080040dc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop

080040e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop

080040e4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e6:	4a24      	ldr	r2, [pc, #144]	; (8004178 <TIM_Base_SetConfig+0x94>)
 80040e8:	4290      	cmp	r0, r2
 80040ea:	d00e      	beq.n	800410a <TIM_Base_SetConfig+0x26>
 80040ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80040f0:	d00b      	beq.n	800410a <TIM_Base_SetConfig+0x26>
 80040f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80040f6:	4290      	cmp	r0, r2
 80040f8:	d007      	beq.n	800410a <TIM_Base_SetConfig+0x26>
 80040fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040fe:	4290      	cmp	r0, r2
 8004100:	d003      	beq.n	800410a <TIM_Base_SetConfig+0x26>
 8004102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004106:	4290      	cmp	r0, r2
 8004108:	d103      	bne.n	8004112 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800410e:	684a      	ldr	r2, [r1, #4]
 8004110:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004112:	4a19      	ldr	r2, [pc, #100]	; (8004178 <TIM_Base_SetConfig+0x94>)
 8004114:	4290      	cmp	r0, r2
 8004116:	d01a      	beq.n	800414e <TIM_Base_SetConfig+0x6a>
 8004118:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800411c:	d017      	beq.n	800414e <TIM_Base_SetConfig+0x6a>
 800411e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004122:	4290      	cmp	r0, r2
 8004124:	d013      	beq.n	800414e <TIM_Base_SetConfig+0x6a>
 8004126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800412a:	4290      	cmp	r0, r2
 800412c:	d00f      	beq.n	800414e <TIM_Base_SetConfig+0x6a>
 800412e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004132:	4290      	cmp	r0, r2
 8004134:	d00b      	beq.n	800414e <TIM_Base_SetConfig+0x6a>
 8004136:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800413a:	4290      	cmp	r0, r2
 800413c:	d007      	beq.n	800414e <TIM_Base_SetConfig+0x6a>
 800413e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004142:	4290      	cmp	r0, r2
 8004144:	d003      	beq.n	800414e <TIM_Base_SetConfig+0x6a>
 8004146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800414a:	4290      	cmp	r0, r2
 800414c:	d103      	bne.n	8004156 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004152:	68ca      	ldr	r2, [r1, #12]
 8004154:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415a:	694a      	ldr	r2, [r1, #20]
 800415c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800415e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004160:	688b      	ldr	r3, [r1, #8]
 8004162:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004164:	680b      	ldr	r3, [r1, #0]
 8004166:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <TIM_Base_SetConfig+0x94>)
 800416a:	4298      	cmp	r0, r3
 800416c:	d101      	bne.n	8004172 <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800416e:	690b      	ldr	r3, [r1, #16]
 8004170:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004172:	2301      	movs	r3, #1
 8004174:	6143      	str	r3, [r0, #20]
 8004176:	4770      	bx	lr
 8004178:	40010000 	.word	0x40010000

0800417c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800417c:	b1b8      	cbz	r0, 80041ae <HAL_TIM_Base_Init+0x32>
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800417e:	b510      	push	{r4, lr}
 8004180:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004182:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004186:	f013 0fff 	tst.w	r3, #255	; 0xff
 800418a:	d104      	bne.n	8004196 <HAL_TIM_Base_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418c:	2300      	movs	r3, #0
 800418e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004192:	f7fd fcd5 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004196:	2302      	movs	r3, #2
 8004198:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419c:	1d21      	adds	r1, r4, #4
 800419e:	6820      	ldr	r0, [r4, #0]
 80041a0:	f7ff ffa0 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 80041aa:	2000      	movs	r0, #0
 80041ac:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 80041ae:	2001      	movs	r0, #1
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop

080041b4 <HAL_TIM_OC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b4:	b1b8      	cbz	r0, 80041e6 <HAL_TIM_OC_Init+0x32>
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041b6:	b510      	push	{r4, lr}
 80041b8:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_OC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c4:	2300      	movs	r3, #0
 80041c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041ca:	f7ff ff87 	bl	80040dc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80041d4:	1d21      	adds	r1, r4, #4
 80041d6:	6820      	ldr	r0, [r4, #0]
 80041d8:	f7ff ff84 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	2301      	movs	r3, #1
 80041de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 80041e2:	2000      	movs	r0, #0
 80041e4:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 80041e6:	2001      	movs	r0, #1
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop

080041ec <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ec:	b1b8      	cbz	r0, 800421e <HAL_TIM_PWM_Init+0x32>
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041ee:	b510      	push	{r4, lr}
 80041f0:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fc:	2300      	movs	r3, #0
 80041fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004202:	f7ff ff6d 	bl	80040e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004206:	2302      	movs	r3, #2
 8004208:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800420c:	1d21      	adds	r1, r4, #4
 800420e:	6820      	ldr	r0, [r4, #0]
 8004210:	f7ff ff68 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004214:	2301      	movs	r3, #1
 8004216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 800421a:	2000      	movs	r0, #0
 800421c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 800421e:	2001      	movs	r0, #1
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop

08004224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004226:	6a03      	ldr	r3, [r0, #32]
 8004228:	f023 0310 	bic.w	r3, r3, #16
 800422c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004232:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004234:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004238:	680d      	ldr	r5, [r1, #0]
 800423a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800423e:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004242:	688d      	ldr	r5, [r1, #8]
 8004244:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004248:	4d0d      	ldr	r5, [pc, #52]	; (8004280 <TIM_OC2_SetConfig+0x5c>)
 800424a:	42a8      	cmp	r0, r5
 800424c:	d106      	bne.n	800425c <TIM_OC2_SetConfig+0x38>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800424e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004252:	68cd      	ldr	r5, [r1, #12]
 8004254:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004258:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425c:	4d08      	ldr	r5, [pc, #32]	; (8004280 <TIM_OC2_SetConfig+0x5c>)
 800425e:	42a8      	cmp	r0, r5
 8004260:	d107      	bne.n	8004272 <TIM_OC2_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004262:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004266:	694d      	ldr	r5, [r1, #20]
 8004268:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800426c:	698d      	ldr	r5, [r1, #24]
 800426e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004274:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004276:	684a      	ldr	r2, [r1, #4]
 8004278:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427a:	6203      	str	r3, [r0, #32]
}
 800427c:	bc30      	pop	{r4, r5}
 800427e:	4770      	bx	lr
 8004280:	40010000 	.word	0x40010000

08004284 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004284:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d028      	beq.n	80042de <HAL_TIM_OC_ConfigChannel+0x5a>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800428c:	b510      	push	{r4, lr}
 800428e:	4604      	mov	r4, r0
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004290:	2301      	movs	r3, #1
 8004292:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004296:	2302      	movs	r3, #2
 8004298:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 800429c:	2a0c      	cmp	r2, #12
 800429e:	d817      	bhi.n	80042d0 <HAL_TIM_OC_ConfigChannel+0x4c>
 80042a0:	e8df f002 	tbb	[pc, r2]
 80042a4:	16161607 	.word	0x16161607
 80042a8:	1616160b 	.word	0x1616160b
 80042ac:	1616160f 	.word	0x1616160f
 80042b0:	13          	.byte	0x13
 80042b1:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042b2:	6800      	ldr	r0, [r0, #0]
 80042b4:	f7ff fe50 	bl	8003f58 <TIM_OC1_SetConfig>
      break;
 80042b8:	e00a      	b.n	80042d0 <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ba:	6800      	ldr	r0, [r0, #0]
 80042bc:	f7ff ffb2 	bl	8004224 <TIM_OC2_SetConfig>
      break;
 80042c0:	e006      	b.n	80042d0 <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042c2:	6800      	ldr	r0, [r0, #0]
 80042c4:	f7ff fe74 	bl	8003fb0 <TIM_OC3_SetConfig>
      break;
 80042c8:	e002      	b.n	80042d0 <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ca:	6800      	ldr	r0, [r0, #0]
 80042cc:	f7ff fea0 	bl	8004010 <TIM_OC4_SetConfig>

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 80042dc:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	2002      	movs	r0, #2
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop

080042e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042e4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d066      	beq.n	80043bc <HAL_TIM_PWM_ConfigChannel+0xd8>
 80042ee:	460d      	mov	r5, r1
 80042f0:	4604      	mov	r4, r0
 80042f2:	2301      	movs	r3, #1
 80042f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	2302      	movs	r3, #2
 80042fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 80042fe:	2a0c      	cmp	r2, #12
 8004300:	d855      	bhi.n	80043ae <HAL_TIM_PWM_ConfigChannel+0xca>
 8004302:	e8df f002 	tbb	[pc, r2]
 8004306:	5407      	.short	0x5407
 8004308:	541a5454 	.word	0x541a5454
 800430c:	542e5454 	.word	0x542e5454
 8004310:	5454      	.short	0x5454
 8004312:	41          	.byte	0x41
 8004313:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004314:	6800      	ldr	r0, [r0, #0]
 8004316:	f7ff fe1f 	bl	8003f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800431a:	6822      	ldr	r2, [r4, #0]
 800431c:	6993      	ldr	r3, [r2, #24]
 800431e:	f043 0308 	orr.w	r3, r3, #8
 8004322:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	6993      	ldr	r3, [r2, #24]
 8004328:	f023 0304 	bic.w	r3, r3, #4
 800432c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	6991      	ldr	r1, [r2, #24]
 8004332:	692b      	ldr	r3, [r5, #16]
 8004334:	430b      	orrs	r3, r1
 8004336:	6193      	str	r3, [r2, #24]
      break;
 8004338:	e039      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800433a:	6800      	ldr	r0, [r0, #0]
 800433c:	f7ff ff72 	bl	8004224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	6993      	ldr	r3, [r2, #24]
 8004344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004348:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	6993      	ldr	r3, [r2, #24]
 800434e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004352:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	6993      	ldr	r3, [r2, #24]
 8004358:	6929      	ldr	r1, [r5, #16]
 800435a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800435e:	6193      	str	r3, [r2, #24]
      break;
 8004360:	e025      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004362:	6800      	ldr	r0, [r0, #0]
 8004364:	f7ff fe24 	bl	8003fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	69d3      	ldr	r3, [r2, #28]
 800436c:	f043 0308 	orr.w	r3, r3, #8
 8004370:	61d3      	str	r3, [r2, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	69d3      	ldr	r3, [r2, #28]
 8004376:	f023 0304 	bic.w	r3, r3, #4
 800437a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	69d1      	ldr	r1, [r2, #28]
 8004380:	692b      	ldr	r3, [r5, #16]
 8004382:	430b      	orrs	r3, r1
 8004384:	61d3      	str	r3, [r2, #28]
      break;
 8004386:	e012      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004388:	6800      	ldr	r0, [r0, #0]
 800438a:	f7ff fe41 	bl	8004010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	69d3      	ldr	r3, [r2, #28]
 8004392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004396:	61d3      	str	r3, [r2, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	69d3      	ldr	r3, [r2, #28]
 800439c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	69d3      	ldr	r3, [r2, #28]
 80043a6:	6929      	ldr	r1, [r5, #16]
 80043a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80043ac:	61d3      	str	r3, [r2, #28]

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043bc:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80043be:	bd38      	pop	{r3, r4, r5, pc}

080043c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043c2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043c8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80043cc:	4319      	orrs	r1, r3
 80043ce:	ea44 0301 	orr.w	r3, r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d2:	6083      	str	r3, [r0, #8]
}
 80043d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop

080043dc <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d06a      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0xde>
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e8:	2301      	movs	r3, #1
 80043ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ee:	2302      	movs	r3, #2
 80043f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043f4:	6802      	ldr	r2, [r0, #0]
 80043f6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004400:	6093      	str	r3, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 8004402:	680b      	ldr	r3, [r1, #0]
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d043      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0xb4>
 8004408:	d80a      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x44>
 800440a:	2b10      	cmp	r3, #16
 800440c:	d04a      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0xc8>
 800440e:	d802      	bhi.n	8004416 <HAL_TIM_ConfigClockSource+0x3a>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d047      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0xc8>
 8004414:	e04a      	b.n	80044ac <HAL_TIM_ConfigClockSource+0xd0>
 8004416:	2b20      	cmp	r3, #32
 8004418:	d044      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0xc8>
 800441a:	2b30      	cmp	r3, #48	; 0x30
 800441c:	d042      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0xc8>
 800441e:	e045      	b.n	80044ac <HAL_TIM_ConfigClockSource+0xd0>
 8004420:	2b60      	cmp	r3, #96	; 0x60
 8004422:	d02b      	beq.n	800447c <HAL_TIM_ConfigClockSource+0xa0>
 8004424:	d802      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x50>
 8004426:	2b50      	cmp	r3, #80	; 0x50
 8004428:	d01e      	beq.n	8004468 <HAL_TIM_ConfigClockSource+0x8c>
 800442a:	e03f      	b.n	80044ac <HAL_TIM_ConfigClockSource+0xd0>
 800442c:	2b70      	cmp	r3, #112	; 0x70
 800442e:	d003      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x5c>
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004434:	d00c      	beq.n	8004450 <HAL_TIM_ConfigClockSource+0x74>
 8004436:	e039      	b.n	80044ac <HAL_TIM_ConfigClockSource+0xd0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004438:	68cb      	ldr	r3, [r1, #12]
 800443a:	684a      	ldr	r2, [r1, #4]
 800443c:	6889      	ldr	r1, [r1, #8]
 800443e:	6800      	ldr	r0, [r0, #0]
 8004440:	f7ff ffbe 	bl	80043c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800444c:	6093      	str	r3, [r2, #8]
      break;
 800444e:	e02d      	b.n	80044ac <HAL_TIM_ConfigClockSource+0xd0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004450:	68cb      	ldr	r3, [r1, #12]
 8004452:	684a      	ldr	r2, [r1, #4]
 8004454:	6889      	ldr	r1, [r1, #8]
 8004456:	6800      	ldr	r0, [r0, #0]
 8004458:	f7ff ffb2 	bl	80043c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	6893      	ldr	r3, [r2, #8]
 8004460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004464:	6093      	str	r3, [r2, #8]
      break;
 8004466:	e021      	b.n	80044ac <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004468:	68ca      	ldr	r2, [r1, #12]
 800446a:	6849      	ldr	r1, [r1, #4]
 800446c:	6800      	ldr	r0, [r0, #0]
 800446e:	f7ff fdf3 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004472:	2150      	movs	r1, #80	; 0x50
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	f7ff fe17 	bl	80040a8 <TIM_ITRx_SetConfig>
      break;
 800447a:	e017      	b.n	80044ac <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800447c:	68ca      	ldr	r2, [r1, #12]
 800447e:	6849      	ldr	r1, [r1, #4]
 8004480:	6800      	ldr	r0, [r0, #0]
 8004482:	f7ff fdfd 	bl	8004080 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004486:	2160      	movs	r1, #96	; 0x60
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	f7ff fe0d 	bl	80040a8 <TIM_ITRx_SetConfig>
      break;
 800448e:	e00d      	b.n	80044ac <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004490:	68ca      	ldr	r2, [r1, #12]
 8004492:	6849      	ldr	r1, [r1, #4]
 8004494:	6800      	ldr	r0, [r0, #0]
 8004496:	f7ff fddf 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800449a:	2140      	movs	r1, #64	; 0x40
 800449c:	6820      	ldr	r0, [r4, #0]
 800449e:	f7ff fe03 	bl	80040a8 <TIM_ITRx_SetConfig>
      break;
 80044a2:	e003      	b.n	80044ac <HAL_TIM_ConfigClockSource+0xd0>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044a4:	4619      	mov	r1, r3
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	f7ff fdfe 	bl	80040a8 <TIM_ITRx_SetConfig>
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b2:	2000      	movs	r0, #0
 80044b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 80044b8:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ba:	2002      	movs	r0, #2
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c0:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044c2:	f001 011f 	and.w	r1, r1, #31
 80044c6:	2301      	movs	r3, #1
 80044c8:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044cc:	6a03      	ldr	r3, [r0, #32]
 80044ce:	ea23 0304 	bic.w	r3, r3, r4
 80044d2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044d4:	6a03      	ldr	r3, [r0, #32]
 80044d6:	408a      	lsls	r2, r1
 80044d8:	431a      	orrs	r2, r3
 80044da:	6202      	str	r2, [r0, #32]
}
 80044dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop

080044e4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d032      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ec:	b430      	push	{r4, r5}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ee:	2301      	movs	r3, #1
 80044f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	2302      	movs	r3, #2
 80044f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044fa:	6803      	ldr	r3, [r0, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044fe:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004500:	f022 0470 	bic.w	r4, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004504:	680a      	ldr	r2, [r1, #0]
 8004506:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450a:	6803      	ldr	r3, [r0, #0]
 800450c:	4a13      	ldr	r2, [pc, #76]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d012      	beq.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d00f      	beq.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004518:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800451c:	4293      	cmp	r3, r2
 800451e:	d00b      	beq.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004520:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004528:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004530:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004534:	4293      	cmp	r3, r2
 8004536:	d104      	bne.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004538:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800453c:	684a      	ldr	r2, [r1, #4]
 800453e:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004540:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004542:	2301      	movs	r3, #1
 8004544:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004548:	2300      	movs	r3, #0
 800454a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800454e:	4618      	mov	r0, r3
 8004550:	e001      	b.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004552:	2002      	movs	r0, #2
 8004554:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8004556:	bc30      	pop	{r4, r5}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40010000 	.word	0x40010000

08004560 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004560:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d022      	beq.n	80045ae <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004568:	2301      	movs	r3, #1
 800456a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800456e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004574:	688b      	ldr	r3, [r1, #8]
 8004576:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004578:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800457c:	684b      	ldr	r3, [r1, #4]
 800457e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004580:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004584:	680b      	ldr	r3, [r1, #0]
 8004586:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004588:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800458c:	690b      	ldr	r3, [r1, #16]
 800458e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004590:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004594:	694b      	ldr	r3, [r1, #20]
 8004596:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459c:	69ca      	ldr	r2, [r1, #28]
 800459e:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045a0:	6802      	ldr	r2, [r0, #0]
 80045a2:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045a4:	2300      	movs	r3, #0
 80045a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80045aa:	4618      	mov	r0, r3
 80045ac:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ae:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop

080045b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <SystemInit+0x18>)
 80045b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80045be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d0:	f100 0308 	add.w	r3, r0, #8
 80045d4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045d6:	f04f 32ff 	mov.w	r2, #4294967295
 80045da:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045dc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045de:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	6003      	str	r3, [r0, #0]
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop

080045e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	6103      	str	r3, [r0, #16]
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop

080045f0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80045f0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045f2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045fc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045fe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004600:	6803      	ldr	r3, [r0, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	6003      	str	r3, [r0, #0]
 8004606:	4770      	bx	lr

08004608 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004608:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800460a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800460c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004610:	d101      	bne.n	8004616 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004612:	6902      	ldr	r2, [r0, #16]
 8004614:	e007      	b.n	8004626 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004616:	f100 0208 	add.w	r2, r0, #8
 800461a:	e000      	b.n	800461e <vListInsert+0x16>
 800461c:	461a      	mov	r2, r3
 800461e:	6853      	ldr	r3, [r2, #4]
 8004620:	681c      	ldr	r4, [r3, #0]
 8004622:	42a5      	cmp	r5, r4
 8004624:	d2fa      	bcs.n	800461c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004626:	6853      	ldr	r3, [r2, #4]
 8004628:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800462a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800462c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800462e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004630:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004632:	6803      	ldr	r3, [r0, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	6003      	str	r3, [r0, #0]
}
 8004638:	bc30      	pop	{r4, r5}
 800463a:	4770      	bx	lr

0800463c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800463c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800463e:	6842      	ldr	r2, [r0, #4]
 8004640:	6881      	ldr	r1, [r0, #8]
 8004642:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004644:	6882      	ldr	r2, [r0, #8]
 8004646:	6841      	ldr	r1, [r0, #4]
 8004648:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	4290      	cmp	r0, r2
 800464e:	d101      	bne.n	8004654 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004650:	6882      	ldr	r2, [r0, #8]
 8004652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004654:	2200      	movs	r2, #0
 8004656:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	3a01      	subs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800465e:	6818      	ldr	r0, [r3, #0]
}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop

08004664 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004664:	b510      	push	{r4, lr}
 8004666:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004668:	f001 fdc4 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800466c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800466e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004670:	429a      	cmp	r2, r3
 8004672:	d101      	bne.n	8004678 <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
 8004674:	2401      	movs	r4, #1
 8004676:	e000      	b.n	800467a <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
 8004678:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800467a:	f001 fddd 	bl	8006238 <vPortExitCritical>

	return xReturn;
}
 800467e:	4620      	mov	r0, r4
 8004680:	bd10      	pop	{r4, pc}
 8004682:	bf00      	nop

08004684 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004684:	b510      	push	{r4, lr}
 8004686:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004688:	f001 fdb4 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800468c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800468e:	b90b      	cbnz	r3, 8004694 <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
 8004690:	2401      	movs	r4, #1
 8004692:	e000      	b.n	8004696 <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
 8004694:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004696:	f001 fdcf 	bl	8006238 <vPortExitCritical>

	return xReturn;
}
 800469a:	4620      	mov	r0, r4
 800469c:	bd10      	pop	{r4, pc}
 800469e:	bf00      	nop

080046a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	4604      	mov	r4, r0
 80046a4:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046a6:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80046aa:	b93a      	cbnz	r2, 80046bc <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046ac:	6803      	ldr	r3, [r0, #0]
 80046ae:	bb43      	cbnz	r3, 8004702 <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80046b0:	6840      	ldr	r0, [r0, #4]
 80046b2:	f000 ffe5 	bl	8005680 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	6063      	str	r3, [r4, #4]
 80046ba:	e029      	b.n	8004710 <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046bc:	b96e      	cbnz	r6, 80046da <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80046be:	6880      	ldr	r0, [r0, #8]
 80046c0:	f7fb fdac 	bl	800021c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80046c4:	68a2      	ldr	r2, [r4, #8]
 80046c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046c8:	4413      	add	r3, r2
 80046ca:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046cc:	6862      	ldr	r2, [r4, #4]
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d319      	bcc.n	8004706 <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80046d6:	2000      	movs	r0, #0
 80046d8:	e01a      	b.n	8004710 <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046da:	68c0      	ldr	r0, [r0, #12]
 80046dc:	f7fb fd9e 	bl	800021c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046e2:	425b      	negs	r3, r3
 80046e4:	68e2      	ldr	r2, [r4, #12]
 80046e6:	441a      	add	r2, r3
 80046e8:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046ea:	6821      	ldr	r1, [r4, #0]
 80046ec:	428a      	cmp	r2, r1
 80046ee:	d202      	bcs.n	80046f6 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046f0:	6862      	ldr	r2, [r4, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046f6:	2e02      	cmp	r6, #2
 80046f8:	d107      	bne.n	800470a <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046fa:	b145      	cbz	r5, 800470e <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046fc:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80046fe:	2000      	movs	r0, #0
 8004700:	e006      	b.n	8004710 <prvCopyDataToQueue+0x70>
 8004702:	2000      	movs	r0, #0
 8004704:	e004      	b.n	8004710 <prvCopyDataToQueue+0x70>
 8004706:	2000      	movs	r0, #0
 8004708:	e002      	b.n	8004710 <prvCopyDataToQueue+0x70>
 800470a:	2000      	movs	r0, #0
 800470c:	e000      	b.n	8004710 <prvCopyDataToQueue+0x70>
 800470e:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004710:	3501      	adds	r5, #1
 8004712:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 8004714:	bd70      	pop	{r4, r5, r6, pc}
 8004716:	bf00      	nop

08004718 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004718:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800471a:	b172      	cbz	r2, 800473a <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800471c:	b510      	push	{r4, lr}
 800471e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004720:	68c4      	ldr	r4, [r0, #12]
 8004722:	4414      	add	r4, r2
 8004724:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004726:	6840      	ldr	r0, [r0, #4]
 8004728:	4284      	cmp	r4, r0
 800472a:	d301      	bcc.n	8004730 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	60d8      	str	r0, [r3, #12]
 8004730:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004732:	68d9      	ldr	r1, [r3, #12]
 8004734:	f7fb fd72 	bl	800021c <memcpy>
 8004738:	bd10      	pop	{r4, pc}
 800473a:	4770      	bx	lr

0800473c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004740:	f001 fd58 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004744:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004748:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800474a:	e00a      	b.n	8004762 <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800474c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800474e:	b153      	cbz	r3, 8004766 <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004750:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004754:	f000 feec 	bl	8005530 <xTaskRemoveFromEventList>
 8004758:	b108      	cbz	r0, 800475e <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800475a:	f000 ff7b 	bl	8005654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800475e:	3c01      	subs	r4, #1
 8004760:	b264      	sxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004762:	2c00      	cmp	r4, #0
 8004764:	dcf2      	bgt.n	800474c <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004766:	23ff      	movs	r3, #255	; 0xff
 8004768:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800476c:	f001 fd64 	bl	8006238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004770:	f001 fd40 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004774:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8004778:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800477a:	e00a      	b.n	8004792 <prvUnlockQueue+0x56>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800477c:	692b      	ldr	r3, [r5, #16]
 800477e:	b153      	cbz	r3, 8004796 <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004780:	f105 0010 	add.w	r0, r5, #16
 8004784:	f000 fed4 	bl	8005530 <xTaskRemoveFromEventList>
 8004788:	b108      	cbz	r0, 800478e <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 800478a:	f000 ff63 	bl	8005654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800478e:	3c01      	subs	r4, #1
 8004790:	b264      	sxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004792:	2c00      	cmp	r4, #0
 8004794:	dcf2      	bgt.n	800477c <prvUnlockQueue+0x40>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004796:	23ff      	movs	r3, #255	; 0xff
 8004798:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800479c:	f001 fd4c 	bl	8006238 <vPortExitCritical>
 80047a0:	bd38      	pop	{r3, r4, r5, pc}
 80047a2:	bf00      	nop

080047a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047a4:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80047a6:	b940      	cbnz	r0, 80047ba <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	e7fe      	b.n	80047b8 <xQueueGenericReset+0x14>
 80047ba:	4604      	mov	r4, r0
 80047bc:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 80047be:	f001 fd19 	bl	80061f4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047c2:	6821      	ldr	r1, [r4, #0]
 80047c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80047c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047c8:	fb03 1002 	mla	r0, r3, r2, r1
 80047cc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047ce:	2000      	movs	r0, #0
 80047d0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047d2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047d4:	3a01      	subs	r2, #1
 80047d6:	fb02 1303 	mla	r3, r2, r3, r1
 80047da:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047dc:	23ff      	movs	r3, #255	; 0xff
 80047de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047e6:	b97d      	cbnz	r5, 8004808 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	b1ab      	cbz	r3, 8004818 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ec:	f104 0010 	add.w	r0, r4, #16
 80047f0:	f000 fe9e 	bl	8005530 <xTaskRemoveFromEventList>
 80047f4:	b180      	cbz	r0, 8004818 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <xQueueGenericReset+0x7c>)
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	e007      	b.n	8004818 <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004808:	f104 0010 	add.w	r0, r4, #16
 800480c:	f7ff fee0 	bl	80045d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004810:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004814:	f7ff fedc 	bl	80045d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004818:	f001 fd0e 	bl	8006238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800481c:	2001      	movs	r0, #1
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	461d      	mov	r5, r3
 8004828:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800482a:	460b      	mov	r3, r1
 800482c:	b909      	cbnz	r1, 8004832 <prvInitialiseNewQueue+0xe>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800482e:	6024      	str	r4, [r4, #0]
 8004830:	e000      	b.n	8004834 <prvInitialiseNewQueue+0x10>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004832:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004834:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004836:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004838:	2101      	movs	r1, #1
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff ffb2 	bl	80047a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004840:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	bf00      	nop

08004848 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004848:	b940      	cbnz	r0, 800485c <xQueueGenericCreateStatic+0x14>
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	e7fe      	b.n	800485a <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800485c:	b510      	push	{r4, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004862:	b943      	cbnz	r3, 8004876 <xQueueGenericCreateStatic+0x2e>
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	e7fe      	b.n	8004874 <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004876:	b112      	cbz	r2, 800487e <xQueueGenericCreateStatic+0x36>
 8004878:	b119      	cbz	r1, 8004882 <xQueueGenericCreateStatic+0x3a>
 800487a:	2001      	movs	r0, #1
 800487c:	e002      	b.n	8004884 <xQueueGenericCreateStatic+0x3c>
 800487e:	2001      	movs	r0, #1
 8004880:	e000      	b.n	8004884 <xQueueGenericCreateStatic+0x3c>
 8004882:	2000      	movs	r0, #0
 8004884:	b940      	cbnz	r0, 8004898 <xQueueGenericCreateStatic+0x50>
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	e7fe      	b.n	8004896 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004898:	b912      	cbnz	r2, 80048a0 <xQueueGenericCreateStatic+0x58>
 800489a:	b919      	cbnz	r1, 80048a4 <xQueueGenericCreateStatic+0x5c>
 800489c:	2001      	movs	r0, #1
 800489e:	e002      	b.n	80048a6 <xQueueGenericCreateStatic+0x5e>
 80048a0:	2001      	movs	r0, #1
 80048a2:	e000      	b.n	80048a6 <xQueueGenericCreateStatic+0x5e>
 80048a4:	2000      	movs	r0, #0
 80048a6:	b940      	cbnz	r0, 80048ba <xQueueGenericCreateStatic+0x72>
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048ba:	2050      	movs	r0, #80	; 0x50
 80048bc:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048be:	9803      	ldr	r0, [sp, #12]
 80048c0:	2850      	cmp	r0, #80	; 0x50
 80048c2:	d008      	beq.n	80048d6 <xQueueGenericCreateStatic+0x8e>
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericCreateStatic+0x8c>
 80048d6:	4620      	mov	r0, r4
 80048d8:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
 80048da:	b13b      	cbz	r3, 80048ec <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048dc:	2301      	movs	r3, #1
 80048de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048e2:	9400      	str	r4, [sp, #0]
 80048e4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80048e8:	f7ff ff9c 	bl	8004824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
 80048ec:	4620      	mov	r0, r4
 80048ee:	b004      	add	sp, #16
 80048f0:	bd10      	pop	{r4, pc}
 80048f2:	bf00      	nop

080048f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	b085      	sub	sp, #20
 80048f8:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80048fa:	b940      	cbnz	r0, 800490e <xQueueGenericSend+0x1a>
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	e7fe      	b.n	800490c <xQueueGenericSend+0x18>
 800490e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004910:	b919      	cbnz	r1, 800491a <xQueueGenericSend+0x26>
 8004912:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004914:	b91a      	cbnz	r2, 800491e <xQueueGenericSend+0x2a>
 8004916:	2201      	movs	r2, #1
 8004918:	e002      	b.n	8004920 <xQueueGenericSend+0x2c>
 800491a:	2201      	movs	r2, #1
 800491c:	e000      	b.n	8004920 <xQueueGenericSend+0x2c>
 800491e:	2200      	movs	r2, #0
 8004920:	b942      	cbnz	r2, 8004934 <xQueueGenericSend+0x40>
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	e7fe      	b.n	8004932 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004934:	2b02      	cmp	r3, #2
 8004936:	d103      	bne.n	8004940 <xQueueGenericSend+0x4c>
 8004938:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800493a:	2a01      	cmp	r2, #1
 800493c:	d102      	bne.n	8004944 <xQueueGenericSend+0x50>
 800493e:	e002      	b.n	8004946 <xQueueGenericSend+0x52>
 8004940:	2201      	movs	r2, #1
 8004942:	e000      	b.n	8004946 <xQueueGenericSend+0x52>
 8004944:	2200      	movs	r2, #0
 8004946:	b942      	cbnz	r2, 800495a <xQueueGenericSend+0x66>
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	e7fe      	b.n	8004958 <xQueueGenericSend+0x64>
 800495a:	461d      	mov	r5, r3
 800495c:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800495e:	f000 fe7f 	bl	8005660 <xTaskGetSchedulerState>
 8004962:	b918      	cbnz	r0, 800496c <xQueueGenericSend+0x78>
 8004964:	9b01      	ldr	r3, [sp, #4]
 8004966:	b91b      	cbnz	r3, 8004970 <xQueueGenericSend+0x7c>
 8004968:	2301      	movs	r3, #1
 800496a:	e002      	b.n	8004972 <xQueueGenericSend+0x7e>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <xQueueGenericSend+0x7e>
 8004970:	2300      	movs	r3, #0
 8004972:	b943      	cbnz	r3, 8004986 <xQueueGenericSend+0x92>
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	e7fe      	b.n	8004984 <xQueueGenericSend+0x90>
 8004986:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004988:	f001 fc34 	bl	80061f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800498c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800498e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004990:	429a      	cmp	r2, r3
 8004992:	d301      	bcc.n	8004998 <xQueueGenericSend+0xa4>
 8004994:	2d02      	cmp	r5, #2
 8004996:	d121      	bne.n	80049dc <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004998:	462a      	mov	r2, r5
 800499a:	4631      	mov	r1, r6
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff fe7f 	bl	80046a0 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049a4:	b16b      	cbz	r3, 80049c2 <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80049aa:	f000 fdc1 	bl	8005530 <xTaskRemoveFromEventList>
 80049ae:	b188      	cbz	r0, 80049d4 <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b4:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <xQueueGenericSend+0x18c>)
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	e008      	b.n	80049d4 <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049c2:	b138      	cbz	r0, 80049d4 <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c8:	4b2d      	ldr	r3, [pc, #180]	; (8004a80 <xQueueGenericSend+0x18c>)
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049d4:	f001 fc30 	bl	8006238 <vPortExitCritical>
				return pdPASS;
 80049d8:	2001      	movs	r0, #1
 80049da:	e04e      	b.n	8004a7a <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049dc:	9b01      	ldr	r3, [sp, #4]
 80049de:	b91b      	cbnz	r3, 80049e8 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049e0:	f001 fc2a 	bl	8006238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049e4:	2000      	movs	r0, #0
 80049e6:	e048      	b.n	8004a7a <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049e8:	b91f      	cbnz	r7, 80049f2 <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049ea:	a802      	add	r0, sp, #8
 80049ec:	f000 fde6 	bl	80055bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049f0:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049f2:	f001 fc21 	bl	8006238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049f6:	f000 fbd7 	bl	80051a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049fa:	f001 fbfb 	bl	80061f4 <vPortEnterCritical>
 80049fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004a02:	b25b      	sxtb	r3, r3
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d102      	bne.n	8004a10 <xQueueGenericSend+0x11c>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a10:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d102      	bne.n	8004a22 <xQueueGenericSend+0x12e>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a22:	f001 fc09 	bl	8006238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a26:	a901      	add	r1, sp, #4
 8004a28:	a802      	add	r0, sp, #8
 8004a2a:	f000 fdd3 	bl	80055d4 <xTaskCheckForTimeOut>
 8004a2e:	b9f0      	cbnz	r0, 8004a6e <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff fe17 	bl	8004664 <prvIsQueueFull>
 8004a36:	b1a0      	cbz	r0, 8004a62 <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a38:	9901      	ldr	r1, [sp, #4]
 8004a3a:	f104 0010 	add.w	r0, r4, #16
 8004a3e:	f000 fd43 	bl	80054c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7ff fe7a 	bl	800473c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a48:	f000 fc4e 	bl	80052e8 <xTaskResumeAll>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d19b      	bne.n	8004988 <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
 8004a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <xQueueGenericSend+0x18c>)
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	e792      	b.n	8004988 <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a62:	4620      	mov	r0, r4
 8004a64:	f7ff fe6a 	bl	800473c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a68:	f000 fc3e 	bl	80052e8 <xTaskResumeAll>
 8004a6c:	e78c      	b.n	8004988 <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7ff fe64 	bl	800473c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a74:	f000 fc38 	bl	80052e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a78:	2000      	movs	r0, #0
		}
	}
}
 8004a7a:	b005      	add	sp, #20
 8004a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8004a88:	b940      	cbnz	r0, 8004a9c <xQueueGenericSendFromISR+0x18>
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	e7fe      	b.n	8004a9a <xQueueGenericSendFromISR+0x16>
 8004a9c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a9e:	b919      	cbnz	r1, 8004aa8 <xQueueGenericSendFromISR+0x24>
 8004aa0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004aa2:	b918      	cbnz	r0, 8004aac <xQueueGenericSendFromISR+0x28>
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	e002      	b.n	8004aae <xQueueGenericSendFromISR+0x2a>
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	e000      	b.n	8004aae <xQueueGenericSendFromISR+0x2a>
 8004aac:	2000      	movs	r0, #0
 8004aae:	b940      	cbnz	r0, 8004ac2 <xQueueGenericSendFromISR+0x3e>
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d103      	bne.n	8004ace <xQueueGenericSendFromISR+0x4a>
 8004ac6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ac8:	2801      	cmp	r0, #1
 8004aca:	d102      	bne.n	8004ad2 <xQueueGenericSendFromISR+0x4e>
 8004acc:	e002      	b.n	8004ad4 <xQueueGenericSendFromISR+0x50>
 8004ace:	2001      	movs	r0, #1
 8004ad0:	e000      	b.n	8004ad4 <xQueueGenericSendFromISR+0x50>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	b940      	cbnz	r0, 8004ae8 <xQueueGenericSendFromISR+0x64>
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	e7fe      	b.n	8004ae6 <xQueueGenericSendFromISR+0x62>
 8004ae8:	461f      	mov	r7, r3
 8004aea:	4690      	mov	r8, r2
 8004aec:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aee:	f001 fcab 	bl	8006448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004af2:	f3ef 8611 	mrs	r6, BASEPRI
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d301      	bcc.n	8004b12 <xQueueGenericSendFromISR+0x8e>
 8004b0e:	2f02      	cmp	r7, #2
 8004b10:	d11e      	bne.n	8004b50 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b12:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8004b16:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b18:	463a      	mov	r2, r7
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f7ff fdbf 	bl	80046a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b22:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004b26:	d10d      	bne.n	8004b44 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b2a:	b19b      	cbz	r3, 8004b54 <xQueueGenericSendFromISR+0xd0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b30:	f000 fcfe 	bl	8005530 <xTaskRemoveFromEventList>
 8004b34:	b180      	cbz	r0, 8004b58 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b36:	f1b8 0f00 	cmp.w	r8, #0
 8004b3a:	d00f      	beq.n	8004b5c <xQueueGenericSendFromISR+0xd8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	f8c8 0000 	str.w	r0, [r8]
 8004b42:	e00c      	b.n	8004b5e <xQueueGenericSendFromISR+0xda>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b44:	1c6b      	adds	r3, r5, #1
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	e006      	b.n	8004b5e <xQueueGenericSendFromISR+0xda>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b50:	2000      	movs	r0, #0
 8004b52:	e004      	b.n	8004b5e <xQueueGenericSendFromISR+0xda>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
 8004b54:	2001      	movs	r0, #1
 8004b56:	e002      	b.n	8004b5e <xQueueGenericSendFromISR+0xda>
 8004b58:	2001      	movs	r0, #1
 8004b5a:	e000      	b.n	8004b5e <xQueueGenericSendFromISR+0xda>
 8004b5c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b5e:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8004b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b66:	bf00      	nop

08004b68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b6e:	b940      	cbnz	r0, 8004b82 <xQueueReceive+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	e7fe      	b.n	8004b80 <xQueueReceive+0x18>
 8004b82:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b84:	b919      	cbnz	r1, 8004b8e <xQueueReceive+0x26>
 8004b86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b88:	b91b      	cbnz	r3, 8004b92 <xQueueReceive+0x2a>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e002      	b.n	8004b94 <xQueueReceive+0x2c>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <xQueueReceive+0x2c>
 8004b92:	2300      	movs	r3, #0
 8004b94:	b943      	cbnz	r3, 8004ba8 <xQueueReceive+0x40>
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	e7fe      	b.n	8004ba6 <xQueueReceive+0x3e>
 8004ba8:	460e      	mov	r6, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004baa:	f000 fd59 	bl	8005660 <xTaskGetSchedulerState>
 8004bae:	b918      	cbnz	r0, 8004bb8 <xQueueReceive+0x50>
 8004bb0:	9b01      	ldr	r3, [sp, #4]
 8004bb2:	b91b      	cbnz	r3, 8004bbc <xQueueReceive+0x54>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e002      	b.n	8004bbe <xQueueReceive+0x56>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <xQueueReceive+0x56>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	b943      	cbnz	r3, 8004bd2 <xQueueReceive+0x6a>
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	e7fe      	b.n	8004bd0 <xQueueReceive+0x68>
 8004bd2:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bd4:	f001 fb0e 	bl	80061f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bd8:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bda:	b1c5      	cbz	r5, 8004c0e <xQueueReceive+0xa6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4620      	mov	r0, r4
 8004be0:	f7ff fd9a 	bl	8004718 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004be4:	3d01      	subs	r5, #1
 8004be6:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be8:	6923      	ldr	r3, [r4, #16]
 8004bea:	b163      	cbz	r3, 8004c06 <xQueueReceive+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bec:	f104 0010 	add.w	r0, r4, #16
 8004bf0:	f000 fc9e 	bl	8005530 <xTaskRemoveFromEventList>
 8004bf4:	b138      	cbz	r0, 8004c06 <xQueueReceive+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfa:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <xQueueReceive+0x154>)
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c06:	f001 fb17 	bl	8006238 <vPortExitCritical>
				return pdPASS;
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	e053      	b.n	8004cb6 <xQueueReceive+0x14e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c0e:	9b01      	ldr	r3, [sp, #4]
 8004c10:	b91b      	cbnz	r3, 8004c1a <xQueueReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c12:	f001 fb11 	bl	8006238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c16:	2000      	movs	r0, #0
 8004c18:	e04d      	b.n	8004cb6 <xQueueReceive+0x14e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c1a:	b91f      	cbnz	r7, 8004c24 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c1c:	a802      	add	r0, sp, #8
 8004c1e:	f000 fccd 	bl	80055bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c22:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c24:	f001 fb08 	bl	8006238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c28:	f000 fabe 	bl	80051a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c2c:	f001 fae2 	bl	80061f4 <vPortEnterCritical>
 8004c30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c34:	b25b      	sxtb	r3, r3
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d102      	bne.n	8004c42 <xQueueReceive+0xda>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c46:	b25b      	sxtb	r3, r3
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d102      	bne.n	8004c54 <xQueueReceive+0xec>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c54:	f001 faf0 	bl	8006238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c58:	a901      	add	r1, sp, #4
 8004c5a:	a802      	add	r0, sp, #8
 8004c5c:	f000 fcba 	bl	80055d4 <xTaskCheckForTimeOut>
 8004c60:	b9f0      	cbnz	r0, 8004ca0 <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c62:	4620      	mov	r0, r4
 8004c64:	f7ff fd0e 	bl	8004684 <prvIsQueueEmpty>
 8004c68:	b1a0      	cbz	r0, 8004c94 <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c6a:	9901      	ldr	r1, [sp, #4]
 8004c6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c70:	f000 fc2a 	bl	80054c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7ff fd61 	bl	800473c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c7a:	f000 fb35 	bl	80052e8 <xTaskResumeAll>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d1a8      	bne.n	8004bd4 <xQueueReceive+0x6c>
				{
					portYIELD_WITHIN_API();
 8004c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <xQueueReceive+0x154>)
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	e79f      	b.n	8004bd4 <xQueueReceive+0x6c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7ff fd51 	bl	800473c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c9a:	f000 fb25 	bl	80052e8 <xTaskResumeAll>
 8004c9e:	e799      	b.n	8004bd4 <xQueueReceive+0x6c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f7ff fd4b 	bl	800473c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ca6:	f000 fb1f 	bl	80052e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff fcea 	bl	8004684 <prvIsQueueEmpty>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d08f      	beq.n	8004bd4 <xQueueReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cb4:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cb6:	b005      	add	sp, #20
 8004cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	e000ed04 	.word	0xe000ed04

08004cc0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e00b      	b.n	8004cdc <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cc4:	4a07      	ldr	r2, [pc, #28]	; (8004ce4 <vQueueAddToRegistry+0x24>)
 8004cc6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004cca:	b932      	cbnz	r2, 8004cda <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ccc:	4a05      	ldr	r2, [pc, #20]	; (8004ce4 <vQueueAddToRegistry+0x24>)
 8004cce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cd2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004cd6:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cd8:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cda:	3301      	adds	r3, #1
 8004cdc:	2b07      	cmp	r3, #7
 8004cde:	d9f1      	bls.n	8004cc4 <vQueueAddToRegistry+0x4>
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20006d6c 	.word	0x20006d6c

08004ce8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	460d      	mov	r5, r1
 8004cee:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cf0:	f001 fa80 	bl	80061f4 <vPortEnterCritical>
 8004cf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d102      	bne.n	8004d06 <vQueueWaitForMessageRestricted+0x1e>
 8004d00:	2300      	movs	r3, #0
 8004d02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004d0a:	b25b      	sxtb	r3, r3
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d102      	bne.n	8004d18 <vQueueWaitForMessageRestricted+0x30>
 8004d12:	2300      	movs	r3, #0
 8004d14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d18:	f001 fa8e 	bl	8006238 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d1e:	b92b      	cbnz	r3, 8004d2c <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d20:	4632      	mov	r2, r6
 8004d22:	4629      	mov	r1, r5
 8004d24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d28:	f000 fbe6 	bl	80054f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7ff fd05 	bl	800473c <prvUnlockQueue>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}

08004d34 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <prvResetNextTaskUnblockTime+0x2c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	b90b      	cbnz	r3, 8004d40 <prvResetNextTaskUnblockTime+0xc>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <prvResetNextTaskUnblockTime+0xe>
 8004d40:	2300      	movs	r3, #0
 8004d42:	b123      	cbz	r3, 8004d4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <prvResetNextTaskUnblockTime+0x30>)
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <prvResetNextTaskUnblockTime+0x2c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	4b02      	ldr	r3, [pc, #8]	; (8004d64 <prvResetNextTaskUnblockTime+0x30>)
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000b54 	.word	0x20000b54
 8004d64:	20001004 	.word	0x20001004

08004d68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	4681      	mov	r9, r0
 8004d6e:	460d      	mov	r5, r1
 8004d70:	4617      	mov	r7, r2
 8004d72:	469a      	mov	sl, r3
 8004d74:	9e08      	ldr	r6, [sp, #32]
 8004d76:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004d7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d7c:	0092      	lsls	r2, r2, #2
 8004d7e:	21a5      	movs	r1, #165	; 0xa5
 8004d80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004d82:	f003 fd57 	bl	8008834 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004d86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d88:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8004d8c:	3a01      	subs	r2, #1
 8004d8e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004d92:	f027 0707 	bic.w	r7, r7, #7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d96:	2300      	movs	r3, #0
 8004d98:	e006      	b.n	8004da8 <prvInitialiseNewTask+0x40>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d9a:	5ce9      	ldrb	r1, [r5, r3]
 8004d9c:	18e2      	adds	r2, r4, r3
 8004d9e:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004da2:	5cea      	ldrb	r2, [r5, r3]
 8004da4:	b112      	cbz	r2, 8004dac <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004da6:	3301      	adds	r3, #1
 8004da8:	2b0f      	cmp	r3, #15
 8004daa:	d9f6      	bls.n	8004d9a <prvInitialiseNewTask+0x32>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dac:	2300      	movs	r3, #0
 8004dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004db2:	2e37      	cmp	r6, #55	; 0x37
 8004db4:	d900      	bls.n	8004db8 <prvInitialiseNewTask+0x50>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004db6:	2637      	movs	r6, #55	; 0x37
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004db8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dba:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dbc:	2500      	movs	r5, #0
 8004dbe:	6525      	str	r5, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dc0:	1d20      	adds	r0, r4, #4
 8004dc2:	f7ff fc11 	bl	80045e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dc6:	f104 0018 	add.w	r0, r4, #24
 8004dca:	f7ff fc0d 	bl	80045e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dce:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd0:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8004dd4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dd6:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004dd8:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dda:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dde:	4652      	mov	r2, sl
 8004de0:	4649      	mov	r1, r9
 8004de2:	4638      	mov	r0, r7
 8004de4:	f001 f9de 	bl	80061a4 <pxPortInitialiseStack>
 8004de8:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004dea:	f1b8 0f00 	cmp.w	r8, #0
 8004dee:	d001      	beq.n	8004df4 <prvInitialiseNewTask+0x8c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004df0:	f8c8 4000 	str.w	r4, [r8]
 8004df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df8:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dfa:	2400      	movs	r4, #0
 8004dfc:	e007      	b.n	8004e0e <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dfe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004e02:	0093      	lsls	r3, r2, #2
 8004e04:	480e      	ldr	r0, [pc, #56]	; (8004e40 <prvInitialiseTaskLists+0x48>)
 8004e06:	4418      	add	r0, r3
 8004e08:	f7ff fbe2 	bl	80045d0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e0c:	3401      	adds	r4, #1
 8004e0e:	2c37      	cmp	r4, #55	; 0x37
 8004e10:	d9f5      	bls.n	8004dfe <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e12:	4d0c      	ldr	r5, [pc, #48]	; (8004e44 <prvInitialiseTaskLists+0x4c>)
 8004e14:	4628      	mov	r0, r5
 8004e16:	f7ff fbdb 	bl	80045d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e1a:	4c0b      	ldr	r4, [pc, #44]	; (8004e48 <prvInitialiseTaskLists+0x50>)
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f7ff fbd7 	bl	80045d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e22:	480a      	ldr	r0, [pc, #40]	; (8004e4c <prvInitialiseTaskLists+0x54>)
 8004e24:	f7ff fbd4 	bl	80045d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e28:	4809      	ldr	r0, [pc, #36]	; (8004e50 <prvInitialiseTaskLists+0x58>)
 8004e2a:	f7ff fbd1 	bl	80045d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e2e:	4809      	ldr	r0, [pc, #36]	; (8004e54 <prvInitialiseTaskLists+0x5c>)
 8004e30:	f7ff fbce 	bl	80045d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e34:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <prvInitialiseTaskLists+0x60>)
 8004e36:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <prvInitialiseTaskLists+0x64>)
 8004e3a:	601c      	str	r4, [r3, #0]
 8004e3c:	bd38      	pop	{r3, r4, r5, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000b78 	.word	0x20000b78
 8004e44:	2000100c 	.word	0x2000100c
 8004e48:	20001020 	.word	0x20001020
 8004e4c:	20000fe8 	.word	0x20000fe8
 8004e50:	20000b5c 	.word	0x20000b5c
 8004e54:	20001034 	.word	0x20001034
 8004e58:	20000b54 	.word	0x20000b54
 8004e5c:	20000b70 	.word	0x20000b70

08004e60 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e60:	b510      	push	{r4, lr}
 8004e62:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e64:	f001 f9c6 	bl	80061f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e68:	4a20      	ldr	r2, [pc, #128]	; (8004eec <prvAddNewTaskToReadyList+0x8c>)
 8004e6a:	6813      	ldr	r3, [r2, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e70:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <prvAddNewTaskToReadyList+0x90>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	b93b      	cbnz	r3, 8004e86 <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <prvAddNewTaskToReadyList+0x90>)
 8004e78:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e7a:	6813      	ldr	r3, [r2, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10d      	bne.n	8004e9c <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e80:	f7ff ffba 	bl	8004df8 <prvInitialiseTaskLists>
 8004e84:	e00a      	b.n	8004e9c <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <prvAddNewTaskToReadyList+0x94>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	b93b      	cbnz	r3, 8004e9c <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e8c:	4b18      	ldr	r3, [pc, #96]	; (8004ef0 <prvAddNewTaskToReadyList+0x90>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d801      	bhi.n	8004e9c <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <prvAddNewTaskToReadyList+0x90>)
 8004e9a:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e9c:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <prvAddNewTaskToReadyList+0x98>)
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ea4:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ea8:	4a14      	ldr	r2, [pc, #80]	; (8004efc <prvAddNewTaskToReadyList+0x9c>)
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <prvAddNewTaskToReadyList+0x54>
 8004eb0:	4a12      	ldr	r2, [pc, #72]	; (8004efc <prvAddNewTaskToReadyList+0x9c>)
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004eb8:	009a      	lsls	r2, r3, #2
 8004eba:	1d21      	adds	r1, r4, #4
 8004ebc:	4810      	ldr	r0, [pc, #64]	; (8004f00 <prvAddNewTaskToReadyList+0xa0>)
 8004ebe:	4410      	add	r0, r2
 8004ec0:	f7ff fb96 	bl	80045f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ec4:	f001 f9b8 	bl	8006238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <prvAddNewTaskToReadyList+0x94>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	b16b      	cbz	r3, 8004eea <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ece:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <prvAddNewTaskToReadyList+0x90>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d207      	bcs.n	8004eea <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <prvAddNewTaskToReadyList+0xa4>)
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	bd10      	pop	{r4, pc}
 8004eec:	20000fe0 	.word	0x20000fe0
 8004ef0:	20000fe4 	.word	0x20000fe4
 8004ef4:	20000b58 	.word	0x20000b58
 8004ef8:	20001008 	.word	0x20001008
 8004efc:	20001048 	.word	0x20001048
 8004f00:	20000b78 	.word	0x20000b78
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f0c:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8004f10:	b933      	cbnz	r3, 8004f20 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f12:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004f14:	f001 f8cc 	bl	80060b0 <vPortFree>
				vPortFree( pxTCB );
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f001 f8c9 	bl	80060b0 <vPortFree>
 8004f1e:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d102      	bne.n	8004f2a <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 8004f24:	f001 f8c4 	bl	80060b0 <vPortFree>
 8004f28:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d008      	beq.n	8004f40 <prvDeleteTCB+0x38>
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	e7fe      	b.n	8004f3e <prvDeleteTCB+0x36>
 8004f40:	bd10      	pop	{r4, pc}
 8004f42:	bf00      	nop

08004f44 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f44:	b510      	push	{r4, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f46:	e014      	b.n	8004f72 <prvCheckTasksWaitingTermination+0x2e>
		{
			taskENTER_CRITICAL();
 8004f48:	f001 f954 	bl	80061f4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <prvCheckTasksWaitingTermination+0x38>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f52:	1d20      	adds	r0, r4, #4
 8004f54:	f7ff fb72 	bl	800463c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f58:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <prvCheckTasksWaitingTermination+0x3c>)
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f60:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <prvCheckTasksWaitingTermination+0x40>)
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f68:	f001 f966 	bl	8006238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7ff ffcb 	bl	8004f08 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <prvCheckTasksWaitingTermination+0x40>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e6      	bne.n	8004f48 <prvCheckTasksWaitingTermination+0x4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f7a:	bd10      	pop	{r4, pc}
 8004f7c:	20000b5c 	.word	0x20000b5c
 8004f80:	20000fe0 	.word	0x20000fe0
 8004f84:	20000fdc 	.word	0x20000fdc

08004f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f88:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f8a:	f7ff ffdb 	bl	8004f44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <prvIdleTask+0x20>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d9f9      	bls.n	8004f8a <prvIdleTask+0x2>
			{
				taskYIELD();
 8004f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9a:	4b04      	ldr	r3, [pc, #16]	; (8004fac <prvIdleTask+0x24>)
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	e7f0      	b.n	8004f8a <prvIdleTask+0x2>
 8004fa8:	20000b78 	.word	0x20000b78
 8004fac:	e000ed04 	.word	0xe000ed04

08004fb0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fb6:	4b17      	ldr	r3, [pc, #92]	; (8005014 <prvAddCurrentTaskToDelayedList+0x64>)
 8004fb8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fba:	4b17      	ldr	r3, [pc, #92]	; (8005018 <prvAddCurrentTaskToDelayedList+0x68>)
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	3004      	adds	r0, #4
 8004fc0:	f7ff fb3c 	bl	800463c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fc4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004fc8:	d107      	bne.n	8004fda <prvAddCurrentTaskToDelayedList+0x2a>
 8004fca:	b136      	cbz	r6, 8004fda <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fcc:	4b12      	ldr	r3, [pc, #72]	; (8005018 <prvAddCurrentTaskToDelayedList+0x68>)
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	3104      	adds	r1, #4
 8004fd2:	4812      	ldr	r0, [pc, #72]	; (800501c <prvAddCurrentTaskToDelayedList+0x6c>)
 8004fd4:	f7ff fb0c 	bl	80045f0 <vListInsertEnd>
 8004fd8:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fda:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <prvAddCurrentTaskToDelayedList+0x68>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004fe2:	42a5      	cmp	r5, r4
 8004fe4:	d907      	bls.n	8004ff6 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <prvAddCurrentTaskToDelayedList+0x70>)
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <prvAddCurrentTaskToDelayedList+0x68>)
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	3104      	adds	r1, #4
 8004ff0:	f7ff fb0a 	bl	8004608 <vListInsert>
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <prvAddCurrentTaskToDelayedList+0x74>)
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	4b07      	ldr	r3, [pc, #28]	; (8005018 <prvAddCurrentTaskToDelayedList+0x68>)
 8004ffc:	6819      	ldr	r1, [r3, #0]
 8004ffe:	3104      	adds	r1, #4
 8005000:	f7ff fb02 	bl	8004608 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005004:	4b08      	ldr	r3, [pc, #32]	; (8005028 <prvAddCurrentTaskToDelayedList+0x78>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	429c      	cmp	r4, r3
 800500a:	d201      	bcs.n	8005010 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <prvAddCurrentTaskToDelayedList+0x78>)
 800500e:	601c      	str	r4, [r3, #0]
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	bf00      	nop
 8005014:	20001000 	.word	0x20001000
 8005018:	20000fe4 	.word	0x20000fe4
 800501c:	20001034 	.word	0x20001034
 8005020:	20000b70 	.word	0x20000b70
 8005024:	20000b54 	.word	0x20000b54
 8005028:	20001004 	.word	0x20001004

0800502c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005032:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005034:	b945      	cbnz	r5, 8005048 <xTaskCreateStatic+0x1c>
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	e7fe      	b.n	8005046 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8005048:	b944      	cbnz	r4, 800505c <xTaskCreateStatic+0x30>
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	e7fe      	b.n	800505a <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800505c:	265c      	movs	r6, #92	; 0x5c
 800505e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005060:	9e04      	ldr	r6, [sp, #16]
 8005062:	2e5c      	cmp	r6, #92	; 0x5c
 8005064:	d008      	beq.n	8005078 <xTaskCreateStatic+0x4c>
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	e7fe      	b.n	8005076 <xTaskCreateStatic+0x4a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005078:	b18c      	cbz	r4, 800509e <xTaskCreateStatic+0x72>
 800507a:	b185      	cbz	r5, 800509e <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800507c:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800507e:	2502      	movs	r5, #2
 8005080:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005084:	2500      	movs	r5, #0
 8005086:	9503      	str	r5, [sp, #12]
 8005088:	9402      	str	r4, [sp, #8]
 800508a:	ad05      	add	r5, sp, #20
 800508c:	9501      	str	r5, [sp, #4]
 800508e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005090:	9500      	str	r5, [sp, #0]
 8005092:	f7ff fe69 	bl	8004d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005096:	4620      	mov	r0, r4
 8005098:	f7ff fee2 	bl	8004e60 <prvAddNewTaskToReadyList>
 800509c:	e001      	b.n	80050a2 <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
 80050a2:	9805      	ldr	r0, [sp, #20]
 80050a4:	b006      	add	sp, #24
 80050a6:	bd70      	pop	{r4, r5, r6, pc}

080050a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050ac:	b085      	sub	sp, #20
 80050ae:	4606      	mov	r6, r0
 80050b0:	460f      	mov	r7, r1
 80050b2:	4615      	mov	r5, r2
 80050b4:	4698      	mov	r8, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b6:	0090      	lsls	r0, r2, #2
 80050b8:	f000 ff78 	bl	8005fac <pvPortMalloc>

			if( pxStack != NULL )
 80050bc:	b160      	cbz	r0, 80050d8 <xTaskCreate+0x30>
 80050be:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050c0:	205c      	movs	r0, #92	; 0x5c
 80050c2:	f000 ff73 	bl	8005fac <pvPortMalloc>

				if( pxNewTCB != NULL )
 80050c6:	4604      	mov	r4, r0
 80050c8:	b110      	cbz	r0, 80050d0 <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050ca:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
 80050ce:	e004      	b.n	80050da <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050d0:	4648      	mov	r0, r9
 80050d2:	f000 ffed 	bl	80060b0 <vPortFree>
 80050d6:	e000      	b.n	80050da <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050d8:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050da:	b19c      	cbz	r4, 8005104 <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050dc:	2300      	movs	r3, #0
 80050de:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050e2:	9303      	str	r3, [sp, #12]
 80050e4:	9402      	str	r4, [sp, #8]
 80050e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	4643      	mov	r3, r8
 80050f0:	462a      	mov	r2, r5
 80050f2:	4639      	mov	r1, r7
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7ff fe37 	bl	8004d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050fa:	4620      	mov	r0, r4
 80050fc:	f7ff feb0 	bl	8004e60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005100:	2001      	movs	r0, #1
 8005102:	e001      	b.n	8005108 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8005108:	b005      	add	sp, #20
 800510a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800510e:	bf00      	nop

08005110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005110:	b510      	push	{r4, lr}
 8005112:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005114:	2400      	movs	r4, #0
 8005116:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005118:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800511a:	aa07      	add	r2, sp, #28
 800511c:	a906      	add	r1, sp, #24
 800511e:	a805      	add	r0, sp, #20
 8005120:	f000 fece 	bl	8005ec0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005124:	9b05      	ldr	r3, [sp, #20]
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	9b06      	ldr	r3, [sp, #24]
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	9400      	str	r4, [sp, #0]
 800512e:	4623      	mov	r3, r4
 8005130:	9a07      	ldr	r2, [sp, #28]
 8005132:	4918      	ldr	r1, [pc, #96]	; (8005194 <vTaskStartScheduler+0x84>)
 8005134:	4818      	ldr	r0, [pc, #96]	; (8005198 <vTaskStartScheduler+0x88>)
 8005136:	f7ff ff79 	bl	800502c <xTaskCreateStatic>
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800513a:	b108      	cbz	r0, 8005140 <vTaskStartScheduler+0x30>
		{
			xReturn = pdPASS;
 800513c:	2001      	movs	r0, #1
 800513e:	e000      	b.n	8005142 <vTaskStartScheduler+0x32>
		}
		else
		{
			xReturn = pdFAIL;
 8005140:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005142:	2801      	cmp	r0, #1
 8005144:	d101      	bne.n	800514a <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
 8005146:	f000 fc61 	bl	8005a0c <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800514a:	2801      	cmp	r0, #1
 800514c:	d114      	bne.n	8005178 <vTaskStartScheduler+0x68>
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800515e:	f04f 32ff 	mov.w	r2, #4294967295
 8005162:	4b0e      	ldr	r3, [pc, #56]	; (800519c <vTaskStartScheduler+0x8c>)
 8005164:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005166:	2201      	movs	r2, #1
 8005168:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <vTaskStartScheduler+0x90>)
 800516a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800516c:	2200      	movs	r2, #0
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <vTaskStartScheduler+0x94>)
 8005170:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005172:	f001 f8e1 	bl	8006338 <xPortStartScheduler>
 8005176:	e00b      	b.n	8005190 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005178:	f1b0 3fff 	cmp.w	r0, #4294967295
 800517c:	d108      	bne.n	8005190 <vTaskStartScheduler+0x80>
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	e7fe      	b.n	800518e <vTaskStartScheduler+0x7e>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005190:	b008      	add	sp, #32
 8005192:	bd10      	pop	{r4, pc}
 8005194:	0800ddac 	.word	0x0800ddac
 8005198:	08004f89 	.word	0x08004f89
 800519c:	20001004 	.word	0x20001004
 80051a0:	20000b58 	.word	0x20000b58
 80051a4:	20001000 	.word	0x20001000

080051a8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051a8:	4a02      	ldr	r2, [pc, #8]	; (80051b4 <vTaskSuspendAll+0xc>)
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	3301      	adds	r3, #1
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000fd8 	.word	0x20000fd8

080051b8 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051b8:	4b01      	ldr	r3, [pc, #4]	; (80051c0 <xTaskGetTickCount+0x8>)
 80051ba:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20001000 	.word	0x20001000

080051c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c6:	4b3d      	ldr	r3, [pc, #244]	; (80052bc <xTaskIncrementTick+0xf8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d168      	bne.n	80052a0 <xTaskIncrementTick+0xdc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051ce:	4b3c      	ldr	r3, [pc, #240]	; (80052c0 <xTaskIncrementTick+0xfc>)
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051d4:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051d6:	b9c5      	cbnz	r5, 800520a <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 80051d8:	4b3a      	ldr	r3, [pc, #232]	; (80052c4 <xTaskIncrementTick+0x100>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	b143      	cbz	r3, 80051f2 <xTaskIncrementTick+0x2e>
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	e7fe      	b.n	80051f0 <xTaskIncrementTick+0x2c>
 80051f2:	4a34      	ldr	r2, [pc, #208]	; (80052c4 <xTaskIncrementTick+0x100>)
 80051f4:	6811      	ldr	r1, [r2, #0]
 80051f6:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <xTaskIncrementTick+0x104>)
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	6019      	str	r1, [r3, #0]
 80051fe:	4a33      	ldr	r2, [pc, #204]	; (80052cc <xTaskIncrementTick+0x108>)
 8005200:	6813      	ldr	r3, [r2, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	f7ff fd95 	bl	8004d34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <xTaskIncrementTick+0x10c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	429d      	cmp	r5, r3
 8005210:	d203      	bcs.n	800521a <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005212:	2400      	movs	r4, #0
 8005214:	e039      	b.n	800528a <xTaskIncrementTick+0xc6>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
 8005216:	2401      	movs	r4, #1
 8005218:	e000      	b.n	800521c <xTaskIncrementTick+0x58>
 800521a:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800521c:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <xTaskIncrementTick+0x100>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	b90b      	cbnz	r3, 8005228 <xTaskIncrementTick+0x64>
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <xTaskIncrementTick+0x66>
 8005228:	2300      	movs	r3, #0
 800522a:	b123      	cbz	r3, 8005236 <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522c:	f04f 32ff 	mov.w	r2, #4294967295
 8005230:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <xTaskIncrementTick+0x10c>)
 8005232:	601a      	str	r2, [r3, #0]
					break;
 8005234:	e029      	b.n	800528a <xTaskIncrementTick+0xc6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005236:	4b23      	ldr	r3, [pc, #140]	; (80052c4 <xTaskIncrementTick+0x100>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800523e:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
 8005240:	429d      	cmp	r5, r3
 8005242:	d202      	bcs.n	800524a <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005244:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <xTaskIncrementTick+0x10c>)
 8005246:	6013      	str	r3, [r2, #0]
						break;
 8005248:	e01f      	b.n	800528a <xTaskIncrementTick+0xc6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800524a:	1d37      	adds	r7, r6, #4
 800524c:	4638      	mov	r0, r7
 800524e:	f7ff f9f5 	bl	800463c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005252:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005254:	b11b      	cbz	r3, 800525e <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005256:	f106 0018 	add.w	r0, r6, #24
 800525a:	f7ff f9ef 	bl	800463c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800525e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005260:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <xTaskIncrementTick+0x110>)
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	4293      	cmp	r3, r2
 8005266:	d901      	bls.n	800526c <xTaskIncrementTick+0xa8>
 8005268:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <xTaskIncrementTick+0x110>)
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005270:	009a      	lsls	r2, r3, #2
 8005272:	4639      	mov	r1, r7
 8005274:	4818      	ldr	r0, [pc, #96]	; (80052d8 <xTaskIncrementTick+0x114>)
 8005276:	4410      	add	r0, r2
 8005278:	f7ff f9ba 	bl	80045f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800527c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800527e:	4b17      	ldr	r3, [pc, #92]	; (80052dc <xTaskIncrementTick+0x118>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	429a      	cmp	r2, r3
 8005286:	d2c6      	bcs.n	8005216 <xTaskIncrementTick+0x52>
 8005288:	e7c8      	b.n	800521c <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800528a:	4b14      	ldr	r3, [pc, #80]	; (80052dc <xTaskIncrementTick+0x118>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005294:	009a      	lsls	r2, r3, #2
 8005296:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <xTaskIncrementTick+0x114>)
 8005298:	589b      	ldr	r3, [r3, r2]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d806      	bhi.n	80052ac <xTaskIncrementTick+0xe8>
 800529e:	e006      	b.n	80052ae <xTaskIncrementTick+0xea>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80052a0:	4a0f      	ldr	r2, [pc, #60]	; (80052e0 <xTaskIncrementTick+0x11c>)
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	3301      	adds	r3, #1
 80052a6:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052a8:	2400      	movs	r4, #0
 80052aa:	e000      	b.n	80052ae <xTaskIncrementTick+0xea>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 80052ac:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <xTaskIncrementTick+0x120>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <xTaskIncrementTick+0xf2>
		{
			xSwitchRequired = pdTRUE;
 80052b4:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80052b6:	4620      	mov	r0, r4
 80052b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000fd8 	.word	0x20000fd8
 80052c0:	20001000 	.word	0x20001000
 80052c4:	20000b54 	.word	0x20000b54
 80052c8:	20000b70 	.word	0x20000b70
 80052cc:	20000ffc 	.word	0x20000ffc
 80052d0:	20001004 	.word	0x20001004
 80052d4:	20001048 	.word	0x20001048
 80052d8:	20000b78 	.word	0x20000b78
 80052dc:	20000fe4 	.word	0x20000fe4
 80052e0:	20000b74 	.word	0x20000b74
 80052e4:	2000104c 	.word	0x2000104c

080052e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052e8:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052ea:	4b34      	ldr	r3, [pc, #208]	; (80053bc <xTaskResumeAll+0xd4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	b943      	cbnz	r3, 8005302 <xTaskResumeAll+0x1a>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	e7fe      	b.n	8005300 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005302:	f000 ff77 	bl	80061f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005306:	4b2d      	ldr	r3, [pc, #180]	; (80053bc <xTaskResumeAll+0xd4>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	3a01      	subs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d14b      	bne.n	80053ac <xTaskResumeAll+0xc4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005314:	4b2a      	ldr	r3, [pc, #168]	; (80053c0 <xTaskResumeAll+0xd8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	bb2b      	cbnz	r3, 8005366 <xTaskResumeAll+0x7e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 800531a:	2400      	movs	r4, #0
 800531c:	e049      	b.n	80053b2 <xTaskResumeAll+0xca>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800531e:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <xTaskResumeAll+0xdc>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005324:	f104 0018 	add.w	r0, r4, #24
 8005328:	f7ff f988 	bl	800463c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800532c:	1d25      	adds	r5, r4, #4
 800532e:	4628      	mov	r0, r5
 8005330:	f7ff f984 	bl	800463c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005336:	4a24      	ldr	r2, [pc, #144]	; (80053c8 <xTaskResumeAll+0xe0>)
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <xTaskResumeAll+0x5a>
 800533e:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <xTaskResumeAll+0xe0>)
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005346:	009a      	lsls	r2, r3, #2
 8005348:	4629      	mov	r1, r5
 800534a:	4820      	ldr	r0, [pc, #128]	; (80053cc <xTaskResumeAll+0xe4>)
 800534c:	4410      	add	r0, r2
 800534e:	f7ff f94f 	bl	80045f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005352:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005354:	4b1e      	ldr	r3, [pc, #120]	; (80053d0 <xTaskResumeAll+0xe8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	429a      	cmp	r2, r3
 800535c:	d304      	bcc.n	8005368 <xTaskResumeAll+0x80>
					{
						xYieldPending = pdTRUE;
 800535e:	2201      	movs	r2, #1
 8005360:	4b1c      	ldr	r3, [pc, #112]	; (80053d4 <xTaskResumeAll+0xec>)
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e000      	b.n	8005368 <xTaskResumeAll+0x80>
 8005366:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005368:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <xTaskResumeAll+0xdc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1d6      	bne.n	800531e <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005370:	b10c      	cbz	r4, 8005376 <xTaskResumeAll+0x8e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005372:	f7ff fcdf 	bl	8004d34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <xTaskResumeAll+0xf0>)
 8005378:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800537a:	b154      	cbz	r4, 8005392 <xTaskResumeAll+0xaa>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800537c:	f7ff ff22 	bl	80051c4 <xTaskIncrementTick>
 8005380:	b110      	cbz	r0, 8005388 <xTaskResumeAll+0xa0>
							{
								xYieldPending = pdTRUE;
 8005382:	2201      	movs	r2, #1
 8005384:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <xTaskResumeAll+0xec>)
 8005386:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005388:	3c01      	subs	r4, #1
 800538a:	d1f7      	bne.n	800537c <xTaskResumeAll+0x94>

						uxPendedTicks = 0;
 800538c:	2200      	movs	r2, #0
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <xTaskResumeAll+0xf0>)
 8005390:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <xTaskResumeAll+0xec>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	b15b      	cbz	r3, 80053b0 <xTaskResumeAll+0xc8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539c:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <xTaskResumeAll+0xf4>)
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053a8:	2401      	movs	r4, #1
 80053aa:	e002      	b.n	80053b2 <xTaskResumeAll+0xca>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 80053ac:	2400      	movs	r4, #0
 80053ae:	e000      	b.n	80053b2 <xTaskResumeAll+0xca>
 80053b0:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053b2:	f000 ff41 	bl	8006238 <vPortExitCritical>

	return xAlreadyYielded;
}
 80053b6:	4620      	mov	r0, r4
 80053b8:	bd38      	pop	{r3, r4, r5, pc}
 80053ba:	bf00      	nop
 80053bc:	20000fd8 	.word	0x20000fd8
 80053c0:	20000fe0 	.word	0x20000fe0
 80053c4:	20000fe8 	.word	0x20000fe8
 80053c8:	20001048 	.word	0x20001048
 80053cc:	20000b78 	.word	0x20000b78
 80053d0:	20000fe4 	.word	0x20000fe4
 80053d4:	2000104c 	.word	0x2000104c
 80053d8:	20000b74 	.word	0x20000b74
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053e0:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053e2:	b1a8      	cbz	r0, 8005410 <vTaskDelay+0x30>
 80053e4:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <vTaskDelay+0x48>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	b143      	cbz	r3, 80053fe <vTaskDelay+0x1e>
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	e7fe      	b.n	80053fc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80053fe:	f7ff fed3 	bl	80051a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005402:	2100      	movs	r1, #0
 8005404:	4620      	mov	r0, r4
 8005406:	f7ff fdd3 	bl	8004fb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800540a:	f7ff ff6d 	bl	80052e8 <xTaskResumeAll>
 800540e:	e000      	b.n	8005412 <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
 8005410:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005412:	b938      	cbnz	r0, 8005424 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 8005414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <vTaskDelay+0x4c>)
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	bd10      	pop	{r4, pc}
 8005426:	bf00      	nop
 8005428:	20000fd8 	.word	0x20000fd8
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005430:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <vTaskSwitchContext+0x84>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	b11b      	cbz	r3, 800543e <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005436:	2201      	movs	r2, #1
 8005438:	4b1f      	ldr	r3, [pc, #124]	; (80054b8 <vTaskSwitchContext+0x88>)
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
 800543e:	2200      	movs	r2, #0
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <vTaskSwitchContext+0x88>)
 8005442:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005444:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <vTaskSwitchContext+0x8c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	e00a      	b.n	8005460 <vTaskSwitchContext+0x30>
 800544a:	b943      	cbnz	r3, 800545e <vTaskSwitchContext+0x2e>
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	e7fe      	b.n	800545c <vTaskSwitchContext+0x2c>
 800545e:	3b01      	subs	r3, #1
 8005460:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005464:	008a      	lsls	r2, r1, #2
 8005466:	4916      	ldr	r1, [pc, #88]	; (80054c0 <vTaskSwitchContext+0x90>)
 8005468:	588a      	ldr	r2, [r1, r2]
 800546a:	2a00      	cmp	r2, #0
 800546c:	d0ed      	beq.n	800544a <vTaskSwitchContext+0x1a>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800546e:	b430      	push	{r4, r5}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005470:	460d      	mov	r5, r1
 8005472:	0099      	lsls	r1, r3, #2
 8005474:	18ca      	adds	r2, r1, r3
 8005476:	0090      	lsls	r0, r2, #2
 8005478:	4428      	add	r0, r5
 800547a:	6842      	ldr	r2, [r0, #4]
 800547c:	6854      	ldr	r4, [r2, #4]
 800547e:	6044      	str	r4, [r0, #4]
 8005480:	4419      	add	r1, r3
 8005482:	008a      	lsls	r2, r1, #2
 8005484:	3208      	adds	r2, #8
 8005486:	442a      	add	r2, r5
 8005488:	4294      	cmp	r4, r2
 800548a:	d105      	bne.n	8005498 <vTaskSwitchContext+0x68>
 800548c:	6860      	ldr	r0, [r4, #4]
 800548e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005492:	008a      	lsls	r2, r1, #2
 8005494:	442a      	add	r2, r5
 8005496:	6050      	str	r0, [r2, #4]
 8005498:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800549c:	008a      	lsls	r2, r1, #2
 800549e:	4908      	ldr	r1, [pc, #32]	; (80054c0 <vTaskSwitchContext+0x90>)
 80054a0:	440a      	add	r2, r1
 80054a2:	6852      	ldr	r2, [r2, #4]
 80054a4:	68d1      	ldr	r1, [r2, #12]
 80054a6:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <vTaskSwitchContext+0x94>)
 80054a8:	6011      	str	r1, [r2, #0]
 80054aa:	4a04      	ldr	r2, [pc, #16]	; (80054bc <vTaskSwitchContext+0x8c>)
 80054ac:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054ae:	bc30      	pop	{r4, r5}
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000fd8 	.word	0x20000fd8
 80054b8:	2000104c 	.word	0x2000104c
 80054bc:	20001048 	.word	0x20001048
 80054c0:	20000b78 	.word	0x20000b78
 80054c4:	20000fe4 	.word	0x20000fe4

080054c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
 80054c8:	b940      	cbnz	r0, 80054dc <vTaskPlaceOnEventList+0x14>
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	e7fe      	b.n	80054da <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054dc:	b510      	push	{r4, lr}
 80054de:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <vTaskPlaceOnEventList+0x2c>)
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	3118      	adds	r1, #24
 80054e6:	f7ff f88f 	bl	8004608 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054ea:	2101      	movs	r1, #1
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7ff fd5f 	bl	8004fb0 <prvAddCurrentTaskToDelayedList>
 80054f2:	bd10      	pop	{r4, pc}
 80054f4:	20000fe4 	.word	0x20000fe4

080054f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054f8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80054fa:	b940      	cbnz	r0, 800550e <vTaskPlaceOnEventListRestricted+0x16>
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	e7fe      	b.n	800550c <vTaskPlaceOnEventListRestricted+0x14>
 800550e:	460c      	mov	r4, r1
 8005510:	4615      	mov	r5, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005512:	4a06      	ldr	r2, [pc, #24]	; (800552c <vTaskPlaceOnEventListRestricted+0x34>)
 8005514:	6811      	ldr	r1, [r2, #0]
 8005516:	3118      	adds	r1, #24
 8005518:	f7ff f86a 	bl	80045f0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800551c:	b10d      	cbz	r5, 8005522 <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
 800551e:	f04f 34ff 	mov.w	r4, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005522:	4629      	mov	r1, r5
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff fd43 	bl	8004fb0 <prvAddCurrentTaskToDelayedList>
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20000fe4 	.word	0x20000fe4

08005530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005530:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005532:	68c3      	ldr	r3, [r0, #12]
 8005534:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005536:	b944      	cbnz	r4, 800554a <xTaskRemoveFromEventList+0x1a>
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	e7fe      	b.n	8005548 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800554a:	f104 0518 	add.w	r5, r4, #24
 800554e:	4628      	mov	r0, r5
 8005550:	f7ff f874 	bl	800463c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005554:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <xTaskRemoveFromEventList+0x74>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	b99b      	cbnz	r3, 8005582 <xTaskRemoveFromEventList+0x52>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800555a:	1d25      	adds	r5, r4, #4
 800555c:	4628      	mov	r0, r5
 800555e:	f7ff f86d 	bl	800463c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005562:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005564:	4a10      	ldr	r2, [pc, #64]	; (80055a8 <xTaskRemoveFromEventList+0x78>)
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	4293      	cmp	r3, r2
 800556a:	d901      	bls.n	8005570 <xTaskRemoveFromEventList+0x40>
 800556c:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <xTaskRemoveFromEventList+0x78>)
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005574:	009a      	lsls	r2, r3, #2
 8005576:	4629      	mov	r1, r5
 8005578:	480c      	ldr	r0, [pc, #48]	; (80055ac <xTaskRemoveFromEventList+0x7c>)
 800557a:	4410      	add	r0, r2
 800557c:	f7ff f838 	bl	80045f0 <vListInsertEnd>
 8005580:	e003      	b.n	800558a <xTaskRemoveFromEventList+0x5a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005582:	4629      	mov	r1, r5
 8005584:	480a      	ldr	r0, [pc, #40]	; (80055b0 <xTaskRemoveFromEventList+0x80>)
 8005586:	f7ff f833 	bl	80045f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800558a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <xTaskRemoveFromEventList+0x84>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	429a      	cmp	r2, r3
 8005594:	d903      	bls.n	800559e <xTaskRemoveFromEventList+0x6e>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005596:	2001      	movs	r0, #1
 8005598:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <xTaskRemoveFromEventList+0x88>)
 800559a:	6018      	str	r0, [r3, #0]
 800559c:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
 800559e:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 80055a0:	bd38      	pop	{r3, r4, r5, pc}
 80055a2:	bf00      	nop
 80055a4:	20000fd8 	.word	0x20000fd8
 80055a8:	20001048 	.word	0x20001048
 80055ac:	20000b78 	.word	0x20000b78
 80055b0:	20000fe8 	.word	0x20000fe8
 80055b4:	20000fe4 	.word	0x20000fe4
 80055b8:	2000104c 	.word	0x2000104c

080055bc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055bc:	4b03      	ldr	r3, [pc, #12]	; (80055cc <vTaskInternalSetTimeOutState+0x10>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055c2:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <vTaskInternalSetTimeOutState+0x14>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6043      	str	r3, [r0, #4]
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20000ffc 	.word	0x20000ffc
 80055d0:	20001000 	.word	0x20001000

080055d4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055d6:	b940      	cbnz	r0, 80055ea <xTaskCheckForTimeOut+0x16>
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	e7fe      	b.n	80055e8 <xTaskCheckForTimeOut+0x14>
 80055ea:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80055ec:	b941      	cbnz	r1, 8005600 <xTaskCheckForTimeOut+0x2c>
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	e7fe      	b.n	80055fe <xTaskCheckForTimeOut+0x2a>
 8005600:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
 8005602:	f000 fdf7 	bl	80061f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005606:	4b11      	ldr	r3, [pc, #68]	; (800564c <xTaskCheckForTimeOut+0x78>)
 8005608:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800560a:	6869      	ldr	r1, [r5, #4]
 800560c:	1a42      	subs	r2, r0, r1
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d013      	beq.n	800563e <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005616:	682f      	ldr	r7, [r5, #0]
 8005618:	4e0d      	ldr	r6, [pc, #52]	; (8005650 <xTaskCheckForTimeOut+0x7c>)
 800561a:	6836      	ldr	r6, [r6, #0]
 800561c:	42b7      	cmp	r7, r6
 800561e:	d001      	beq.n	8005624 <xTaskCheckForTimeOut+0x50>
 8005620:	4288      	cmp	r0, r1
 8005622:	d20e      	bcs.n	8005642 <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005624:	429a      	cmp	r2, r3
 8005626:	d206      	bcs.n	8005636 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800562c:	4628      	mov	r0, r5
 800562e:	f7ff ffc5 	bl	80055bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005632:	2400      	movs	r4, #0
 8005634:	e006      	b.n	8005644 <xTaskCheckForTimeOut+0x70>
		}
		else
		{
			*pxTicksToWait = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800563a:	2401      	movs	r4, #1
 800563c:	e002      	b.n	8005644 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800563e:	2400      	movs	r4, #0
 8005640:	e000      	b.n	8005644 <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005642:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8005644:	f000 fdf8 	bl	8006238 <vPortExitCritical>

	return xReturn;
}
 8005648:	4620      	mov	r0, r4
 800564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564c:	20001000 	.word	0x20001000
 8005650:	20000ffc 	.word	0x20000ffc

08005654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8005654:	2201      	movs	r2, #1
 8005656:	4b01      	ldr	r3, [pc, #4]	; (800565c <vTaskMissedYield+0x8>)
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	4770      	bx	lr
 800565c:	2000104c 	.word	0x2000104c

08005660 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <xTaskGetSchedulerState+0x18>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	b123      	cbz	r3, 8005670 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <xTaskGetSchedulerState+0x1c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	b91b      	cbnz	r3, 8005674 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800566c:	2002      	movs	r0, #2
 800566e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005670:	2001      	movs	r0, #1
 8005672:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005674:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
 8005676:	4770      	bx	lr
 8005678:	20000b58 	.word	0x20000b58
 800567c:	20000fd8 	.word	0x20000fd8

08005680 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8005680:	2800      	cmp	r0, #0
 8005682:	d03a      	beq.n	80056fa <xTaskPriorityDisinherit+0x7a>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005688:	4a1f      	ldr	r2, [pc, #124]	; (8005708 <xTaskPriorityDisinherit+0x88>)
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	4290      	cmp	r0, r2
 800568e:	d008      	beq.n	80056a2 <xTaskPriorityDisinherit+0x22>
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	e7fe      	b.n	80056a0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80056a2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80056a4:	b942      	cbnz	r2, 80056b8 <xTaskPriorityDisinherit+0x38>
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	e7fe      	b.n	80056b6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80056b8:	3a01      	subs	r2, #1
 80056ba:	6502      	str	r2, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80056be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056c0:	4288      	cmp	r0, r1
 80056c2:	d01c      	beq.n	80056fe <xTaskPriorityDisinherit+0x7e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056c4:	b9ea      	cbnz	r2, 8005702 <xTaskPriorityDisinherit+0x82>
 80056c6:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c8:	1d1d      	adds	r5, r3, #4
 80056ca:	4628      	mov	r0, r5
 80056cc:	f7fe ffb6 	bl	800463c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80056d2:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056d8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80056da:	4a0c      	ldr	r2, [pc, #48]	; (800570c <xTaskPriorityDisinherit+0x8c>)
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <xTaskPriorityDisinherit+0x66>
 80056e2:	4a0a      	ldr	r2, [pc, #40]	; (800570c <xTaskPriorityDisinherit+0x8c>)
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80056ea:	009a      	lsls	r2, r3, #2
 80056ec:	4629      	mov	r1, r5
 80056ee:	4808      	ldr	r0, [pc, #32]	; (8005710 <xTaskPriorityDisinherit+0x90>)
 80056f0:	4410      	add	r0, r2
 80056f2:	f7fe ff7d 	bl	80045f0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056f6:	2001      	movs	r0, #1
 80056f8:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 80056fa:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 80056fc:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 80056fe:	2000      	movs	r0, #0
 8005700:	bd38      	pop	{r3, r4, r5, pc}
 8005702:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8005704:	bd38      	pop	{r3, r4, r5, pc}
 8005706:	bf00      	nop
 8005708:	20000fe4 	.word	0x20000fe4
 800570c:	20001048 	.word	0x20001048
 8005710:	20000b78 	.word	0x20000b78

08005714 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4605      	mov	r5, r0
 8005718:	460c      	mov	r4, r1
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800571a:	f000 fd6b 	bl	80061f4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800571e:	4b18      	ldr	r3, [pc, #96]	; (8005780 <ulTaskNotifyTake+0x6c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	b98b      	cbnz	r3, 800574a <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005726:	4b16      	ldr	r3, [pc, #88]	; (8005780 <ulTaskNotifyTake+0x6c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005730:	b15c      	cbz	r4, 800574a <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005732:	4611      	mov	r1, r2
 8005734:	4620      	mov	r0, r4
 8005736:	f7ff fc3b 	bl	8004fb0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800573a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573e:	4b11      	ldr	r3, [pc, #68]	; (8005784 <ulTaskNotifyTake+0x70>)
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800574a:	f000 fd75 	bl	8006238 <vPortExitCritical>

		taskENTER_CRITICAL();
 800574e:	f000 fd51 	bl	80061f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <ulTaskNotifyTake+0x6c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6d5c      	ldr	r4, [r3, #84]	; 0x54

			if( ulReturn != 0UL )
 8005758:	b14c      	cbz	r4, 800576e <ulTaskNotifyTake+0x5a>
			{
				if( xClearCountOnExit != pdFALSE )
 800575a:	b125      	cbz	r5, 8005766 <ulTaskNotifyTake+0x52>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800575c:	4b08      	ldr	r3, [pc, #32]	; (8005780 <ulTaskNotifyTake+0x6c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2200      	movs	r2, #0
 8005762:	655a      	str	r2, [r3, #84]	; 0x54
 8005764:	e003      	b.n	800576e <ulTaskNotifyTake+0x5a>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <ulTaskNotifyTake+0x6c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1e62      	subs	r2, r4, #1
 800576c:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800576e:	4b04      	ldr	r3, [pc, #16]	; (8005780 <ulTaskNotifyTake+0x6c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8005778:	f000 fd5e 	bl	8006238 <vPortExitCritical>

		return ulReturn;
	}
 800577c:	4620      	mov	r0, r4
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	20000fe4 	.word	0x20000fe4
 8005784:	e000ed04 	.word	0xe000ed04

08005788 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800578a:	b940      	cbnz	r0, 800579e <xTaskGenericNotify+0x16>
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	e7fe      	b.n	800579c <xTaskGenericNotify+0x14>
 800579e:	4604      	mov	r4, r0
 80057a0:	461f      	mov	r7, r3
 80057a2:	4615      	mov	r5, r2
 80057a4:	460e      	mov	r6, r1
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 80057a6:	f000 fd25 	bl	80061f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80057aa:	b10f      	cbz	r7, 80057b0 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80057ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80057ae:	603b      	str	r3, [r7, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80057b0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80057b4:	b2db      	uxtb	r3, r3

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80057b6:	2202      	movs	r2, #2
 80057b8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58

			switch( eAction )
 80057bc:	1e6a      	subs	r2, r5, #1
 80057be:	2a03      	cmp	r2, #3
 80057c0:	d815      	bhi.n	80057ee <xTaskGenericNotify+0x66>
 80057c2:	e8df f002 	tbb	[pc, r2]
 80057c6:	0702      	.short	0x0702
 80057c8:	0f0c      	.short	0x0f0c
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80057ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80057cc:	4316      	orrs	r6, r2
 80057ce:	6566      	str	r6, [r4, #84]	; 0x54
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80057d0:	2501      	movs	r5, #1

			switch( eAction )
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;
 80057d2:	e00f      	b.n	80057f4 <xTaskGenericNotify+0x6c>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80057d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80057d6:	3201      	adds	r2, #1
 80057d8:	6562      	str	r2, [r4, #84]	; 0x54
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80057da:	2501      	movs	r5, #1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
 80057dc:	e00a      	b.n	80057f4 <xTaskGenericNotify+0x6c>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80057de:	6566      	str	r6, [r4, #84]	; 0x54
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80057e0:	2501      	movs	r5, #1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
 80057e2:	e007      	b.n	80057f4 <xTaskGenericNotify+0x6c>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d004      	beq.n	80057f2 <xTaskGenericNotify+0x6a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80057e8:	6566      	str	r6, [r4, #84]	; 0x54
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80057ea:	2501      	movs	r5, #1
 80057ec:	e002      	b.n	80057f4 <xTaskGenericNotify+0x6c>
 80057ee:	2501      	movs	r5, #1
 80057f0:	e000      	b.n	80057f4 <xTaskGenericNotify+0x6c>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80057f2:	2500      	movs	r5, #0

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d12b      	bne.n	8005850 <xTaskGenericNotify+0xc8>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f8:	1d26      	adds	r6, r4, #4
 80057fa:	4630      	mov	r0, r6
 80057fc:	f7fe ff1e 	bl	800463c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005802:	4a15      	ldr	r2, [pc, #84]	; (8005858 <xTaskGenericNotify+0xd0>)
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <xTaskGenericNotify+0x86>
 800580a:	4a13      	ldr	r2, [pc, #76]	; (8005858 <xTaskGenericNotify+0xd0>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005812:	009a      	lsls	r2, r3, #2
 8005814:	4631      	mov	r1, r6
 8005816:	4811      	ldr	r0, [pc, #68]	; (800585c <xTaskGenericNotify+0xd4>)
 8005818:	4410      	add	r0, r2
 800581a:	f7fe fee9 	bl	80045f0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800581e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005820:	b143      	cbz	r3, 8005834 <xTaskGenericNotify+0xac>
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	e7fe      	b.n	8005832 <xTaskGenericNotify+0xaa>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005834:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <xTaskGenericNotify+0xd8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	429a      	cmp	r2, r3
 800583e:	d907      	bls.n	8005850 <xTaskGenericNotify+0xc8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005844:	4b07      	ldr	r3, [pc, #28]	; (8005864 <xTaskGenericNotify+0xdc>)
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005850:	f000 fcf2 	bl	8006238 <vPortExitCritical>

		return xReturn;
	}
 8005854:	4628      	mov	r0, r5
 8005856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005858:	20001048 	.word	0x20001048
 800585c:	20000b78 	.word	0x20000b78
 8005860:	20000fe4 	.word	0x20000fe4
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800586a:	b940      	cbnz	r0, 800587e <vTaskNotifyGiveFromISR+0x16>
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	e7fe      	b.n	800587c <vTaskNotifyGiveFromISR+0x14>
 800587e:	4604      	mov	r4, r0
 8005880:	460d      	mov	r5, r1
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005882:	f000 fde1 	bl	8006448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005886:	f3ef 8611 	mrs	r6, BASEPRI
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800589a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800589e:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80058a0:	2202      	movs	r2, #2
 80058a2:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80058a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80058a8:	3201      	adds	r2, #1
 80058aa:	6562      	str	r2, [r4, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d133      	bne.n	8005918 <vTaskNotifyGiveFromISR+0xb0>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80058b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058b2:	b143      	cbz	r3, 80058c6 <vTaskNotifyGiveFromISR+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	e7fe      	b.n	80058c4 <vTaskNotifyGiveFromISR+0x5c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c6:	4b16      	ldr	r3, [pc, #88]	; (8005920 <vTaskNotifyGiveFromISR+0xb8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	b99b      	cbnz	r3, 80058f4 <vTaskNotifyGiveFromISR+0x8c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058cc:	1d27      	adds	r7, r4, #4
 80058ce:	4638      	mov	r0, r7
 80058d0:	f7fe feb4 	bl	800463c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058d6:	4a13      	ldr	r2, [pc, #76]	; (8005924 <vTaskNotifyGiveFromISR+0xbc>)
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <vTaskNotifyGiveFromISR+0x7a>
 80058de:	4a11      	ldr	r2, [pc, #68]	; (8005924 <vTaskNotifyGiveFromISR+0xbc>)
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80058e6:	009a      	lsls	r2, r3, #2
 80058e8:	4639      	mov	r1, r7
 80058ea:	480f      	ldr	r0, [pc, #60]	; (8005928 <vTaskNotifyGiveFromISR+0xc0>)
 80058ec:	4410      	add	r0, r2
 80058ee:	f7fe fe7f 	bl	80045f0 <vListInsertEnd>
 80058f2:	e004      	b.n	80058fe <vTaskNotifyGiveFromISR+0x96>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80058f4:	f104 0118 	add.w	r1, r4, #24
 80058f8:	480c      	ldr	r0, [pc, #48]	; (800592c <vTaskNotifyGiveFromISR+0xc4>)
 80058fa:	f7fe fe79 	bl	80045f0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <vTaskNotifyGiveFromISR+0xc8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	429a      	cmp	r2, r3
 8005908:	d906      	bls.n	8005918 <vTaskNotifyGiveFromISR+0xb0>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800590a:	b115      	cbz	r5, 8005912 <vTaskNotifyGiveFromISR+0xaa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	602b      	str	r3, [r5, #0]
 8005910:	e002      	b.n	8005918 <vTaskNotifyGiveFromISR+0xb0>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8005912:	2201      	movs	r2, #1
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <vTaskNotifyGiveFromISR+0xcc>)
 8005916:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005918:	f386 8811 	msr	BASEPRI, r6
 800591c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800591e:	bf00      	nop
 8005920:	20000fd8 	.word	0x20000fd8
 8005924:	20001048 	.word	0x20001048
 8005928:	20000b78 	.word	0x20000b78
 800592c:	20000fe8 	.word	0x20000fe8
 8005930:	20000fe4 	.word	0x20000fe4
 8005934:	2000104c 	.word	0x2000104c

08005938 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <prvGetNextExpireTime+0x1c>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	fab3 f383 	clz	r3, r3
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005946:	b913      	cbnz	r3, 800594e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005948:	68d3      	ldr	r3, [r2, #12]
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800594e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20001050 	.word	0x20001050

08005958 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005958:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800595a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800595c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800595e:	4291      	cmp	r1, r2
 8005960:	d80a      	bhi.n	8005978 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005962:	1ad2      	subs	r2, r2, r3
 8005964:	6983      	ldr	r3, [r0, #24]
 8005966:	429a      	cmp	r2, r3
 8005968:	d211      	bcs.n	800598e <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800596a:	1d01      	adds	r1, r0, #4
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <prvInsertTimerInActiveList+0x40>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	f7fe fe4a 	bl	8004608 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8005974:	2000      	movs	r0, #0
 8005976:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005978:	429a      	cmp	r2, r3
 800597a:	d201      	bcs.n	8005980 <prvInsertTimerInActiveList+0x28>
 800597c:	4299      	cmp	r1, r3
 800597e:	d208      	bcs.n	8005992 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005980:	1d01      	adds	r1, r0, #4
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <prvInsertTimerInActiveList+0x44>)
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	f7fe fe3f 	bl	8004608 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 800598a:	2000      	movs	r0, #0
 800598c:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800598e:	2001      	movs	r0, #1
 8005990:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005992:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8005994:	bd08      	pop	{r3, pc}
 8005996:	bf00      	nop
 8005998:	20001174 	.word	0x20001174
 800599c:	20001050 	.word	0x20001050

080059a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059a0:	b530      	push	{r4, r5, lr}
 80059a2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059a4:	f000 fc26 	bl	80061f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059a8:	4b10      	ldr	r3, [pc, #64]	; (80059ec <prvCheckForValidListAndQueue+0x4c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	b9cb      	cbnz	r3, 80059e2 <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
 80059ae:	4d10      	ldr	r5, [pc, #64]	; (80059f0 <prvCheckForValidListAndQueue+0x50>)
 80059b0:	4628      	mov	r0, r5
 80059b2:	f7fe fe0d 	bl	80045d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059b6:	4c0f      	ldr	r4, [pc, #60]	; (80059f4 <prvCheckForValidListAndQueue+0x54>)
 80059b8:	4620      	mov	r0, r4
 80059ba:	f7fe fe09 	bl	80045d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059be:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <prvCheckForValidListAndQueue+0x58>)
 80059c0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059c2:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <prvCheckForValidListAndQueue+0x5c>)
 80059c4:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059c6:	2300      	movs	r3, #0
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <prvCheckForValidListAndQueue+0x60>)
 80059cc:	4a0d      	ldr	r2, [pc, #52]	; (8005a04 <prvCheckForValidListAndQueue+0x64>)
 80059ce:	2110      	movs	r1, #16
 80059d0:	200a      	movs	r0, #10
 80059d2:	f7fe ff39 	bl	8004848 <xQueueGenericCreateStatic>
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <prvCheckForValidListAndQueue+0x4c>)
 80059d8:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059da:	b110      	cbz	r0, 80059e2 <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059dc:	490a      	ldr	r1, [pc, #40]	; (8005a08 <prvCheckForValidListAndQueue+0x68>)
 80059de:	f7ff f96f 	bl	8004cc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059e2:	f000 fc29 	bl	8006238 <vPortExitCritical>
}
 80059e6:	b003      	add	sp, #12
 80059e8:	bd30      	pop	{r4, r5, pc}
 80059ea:	bf00      	nop
 80059ec:	20001170 	.word	0x20001170
 80059f0:	20001054 	.word	0x20001054
 80059f4:	20001068 	.word	0x20001068
 80059f8:	20001050 	.word	0x20001050
 80059fc:	20001174 	.word	0x20001174
 8005a00:	20001120 	.word	0x20001120
 8005a04:	20001080 	.word	0x20001080
 8005a08:	0800ddb4 	.word	0x0800ddb4

08005a0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a10:	f7ff ffc6 	bl	80059a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a14:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <xTimerCreateTimerTask+0x60>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	b1d3      	cbz	r3, 8005a50 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a1a:	2400      	movs	r4, #0
 8005a1c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a1e:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a20:	aa07      	add	r2, sp, #28
 8005a22:	a906      	add	r1, sp, #24
 8005a24:	a805      	add	r0, sp, #20
 8005a26:	f000 fa57 	bl	8005ed8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a2a:	9b05      	ldr	r3, [sp, #20]
 8005a2c:	9302      	str	r3, [sp, #8]
 8005a2e:	9b06      	ldr	r3, [sp, #24]
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	2302      	movs	r3, #2
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	4623      	mov	r3, r4
 8005a38:	9a07      	ldr	r2, [sp, #28]
 8005a3a:	490d      	ldr	r1, [pc, #52]	; (8005a70 <xTimerCreateTimerTask+0x64>)
 8005a3c:	480d      	ldr	r0, [pc, #52]	; (8005a74 <xTimerCreateTimerTask+0x68>)
 8005a3e:	f7ff faf5 	bl	800502c <xTaskCreateStatic>
 8005a42:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <xTimerCreateTimerTask+0x6c>)
 8005a44:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a46:	b908      	cbnz	r0, 8005a4c <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8005a48:	4620      	mov	r0, r4
 8005a4a:	e002      	b.n	8005a52 <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	e000      	b.n	8005a52 <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8005a50:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a52:	b940      	cbnz	r0, 8005a66 <xTimerCreateTimerTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	e7fe      	b.n	8005a64 <xTimerCreateTimerTask+0x58>
	return xReturn;
}
 8005a66:	b008      	add	sp, #32
 8005a68:	bd10      	pop	{r4, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20001170 	.word	0x20001170
 8005a70:	0800ddbc 	.word	0x0800ddbc
 8005a74:	08005d31 	.word	0x08005d31
 8005a78:	20001178 	.word	0x20001178

08005a7c <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a7c:	b940      	cbnz	r0, 8005a90 <xTimerGenericCommand+0x14>
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	e7fe      	b.n	8005a8e <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a90:	b530      	push	{r4, r5, lr}
 8005a92:	b085      	sub	sp, #20
 8005a94:	4615      	mov	r5, r2
 8005a96:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a98:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <xTimerGenericCommand+0x68>)
 8005a9a:	6810      	ldr	r0, [r2, #0]
 8005a9c:	b1f0      	cbz	r0, 8005adc <xTimerGenericCommand+0x60>
 8005a9e:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005aa0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005aa2:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005aa4:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005aa6:	2905      	cmp	r1, #5
 8005aa8:	dc13      	bgt.n	8005ad2 <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005aaa:	f7ff fdd9 	bl	8005660 <xTaskGetSchedulerState>
 8005aae:	2802      	cmp	r0, #2
 8005ab0:	d107      	bne.n	8005ac2 <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9a08      	ldr	r2, [sp, #32]
 8005ab6:	4669      	mov	r1, sp
 8005ab8:	480a      	ldr	r0, [pc, #40]	; (8005ae4 <xTimerGenericCommand+0x68>)
 8005aba:	6800      	ldr	r0, [r0, #0]
 8005abc:	f7fe ff1a 	bl	80048f4 <xQueueGenericSend>
 8005ac0:	e00d      	b.n	8005ade <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4669      	mov	r1, sp
 8005ac8:	4806      	ldr	r0, [pc, #24]	; (8005ae4 <xTimerGenericCommand+0x68>)
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	f7fe ff12 	bl	80048f4 <xQueueGenericSend>
 8005ad0:	e005      	b.n	8005ade <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4669      	mov	r1, sp
 8005ad6:	f7fe ffd5 	bl	8004a84 <xQueueGenericSendFromISR>
 8005ada:	e000      	b.n	8005ade <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 8005adc:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8005ade:	b005      	add	sp, #20
 8005ae0:	bd30      	pop	{r4, r5, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20001170 	.word	0x20001170

08005ae8 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aec:	e029      	b.n	8005b42 <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005af2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005af4:	1d25      	adds	r5, r4, #4
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7fe fda0 	bl	800463c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005afe:	4620      	mov	r0, r4
 8005b00:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b02:	69e3      	ldr	r3, [r4, #28]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d11c      	bne.n	8005b42 <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b08:	69a3      	ldr	r3, [r4, #24]
 8005b0a:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8005b0c:	429e      	cmp	r6, r3
 8005b0e:	d207      	bcs.n	8005b20 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b10:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b12:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b14:	4629      	mov	r1, r5
 8005b16:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <prvSwitchTimerLists+0x74>)
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	f7fe fd75 	bl	8004608 <vListInsert>
 8005b1e:	e010      	b.n	8005b42 <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b20:	2100      	movs	r1, #0
 8005b22:	9100      	str	r1, [sp, #0]
 8005b24:	460b      	mov	r3, r1
 8005b26:	4632      	mov	r2, r6
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f7ff ffa7 	bl	8005a7c <xTimerGenericCommand>
				configASSERT( xResult );
 8005b2e:	b940      	cbnz	r0, 8005b42 <prvSwitchTimerLists+0x5a>
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	e7fe      	b.n	8005b40 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b42:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <prvSwitchTimerLists+0x74>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	d1d0      	bne.n	8005aee <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8005b4c:	4a04      	ldr	r2, [pc, #16]	; (8005b60 <prvSwitchTimerLists+0x78>)
 8005b4e:	6810      	ldr	r0, [r2, #0]
 8005b50:	4902      	ldr	r1, [pc, #8]	; (8005b5c <prvSwitchTimerLists+0x74>)
 8005b52:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8005b54:	6013      	str	r3, [r2, #0]
}
 8005b56:	b002      	add	sp, #8
 8005b58:	bd70      	pop	{r4, r5, r6, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20001050 	.word	0x20001050
 8005b60:	20001174 	.word	0x20001174

08005b64 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b68:	f7ff fb26 	bl	80051b8 <xTaskGetTickCount>
 8005b6c:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <prvSampleTimeNow+0x28>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4298      	cmp	r0, r3
 8005b74:	d204      	bcs.n	8005b80 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
 8005b76:	f7ff ffb7 	bl	8005ae8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	602b      	str	r3, [r5, #0]
 8005b7e:	e001      	b.n	8005b84 <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
 8005b84:	4b01      	ldr	r3, [pc, #4]	; (8005b8c <prvSampleTimeNow+0x28>)
 8005b86:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
 8005b88:	4620      	mov	r0, r4
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	2000107c 	.word	0x2000107c

08005b90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	4605      	mov	r5, r0
 8005b96:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b98:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <prvProcessExpiredTimer+0x58>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba0:	1d20      	adds	r0, r4, #4
 8005ba2:	f7fe fd4b 	bl	800463c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ba6:	69e3      	ldr	r3, [r4, #28]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d118      	bne.n	8005bde <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bac:	69a1      	ldr	r1, [r4, #24]
 8005bae:	462b      	mov	r3, r5
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	4429      	add	r1, r5
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f7ff fecf 	bl	8005958 <prvInsertTimerInActiveList>
 8005bba:	b180      	cbz	r0, 8005bde <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	9100      	str	r1, [sp, #0]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	462a      	mov	r2, r5
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff ff59 	bl	8005a7c <xTimerGenericCommand>
			configASSERT( xResult );
 8005bca:	b940      	cbnz	r0, 8005bde <prvProcessExpiredTimer+0x4e>
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	e7fe      	b.n	8005bdc <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005be0:	4620      	mov	r0, r4
 8005be2:	4798      	blx	r3
}
 8005be4:	b002      	add	sp, #8
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	20001050 	.word	0x20001050

08005bec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bf4:	f7ff fad8 	bl	80051a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bf8:	a801      	add	r0, sp, #4
 8005bfa:	f7ff ffb3 	bl	8005b64 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	bb1b      	cbnz	r3, 8005c4a <prvProcessTimerOrBlockTask+0x5e>
 8005c02:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c04:	b944      	cbnz	r4, 8005c18 <prvProcessTimerOrBlockTask+0x2c>
 8005c06:	42b0      	cmp	r0, r6
 8005c08:	d306      	bcc.n	8005c18 <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
 8005c0a:	f7ff fb6d 	bl	80052e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c0e:	4629      	mov	r1, r5
 8005c10:	4630      	mov	r0, r6
 8005c12:	f7ff ffbd 	bl	8005b90 <prvProcessExpiredTimer>
 8005c16:	e01a      	b.n	8005c4e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8005c18:	b12c      	cbz	r4, 8005c26 <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <prvProcessTimerOrBlockTask+0x68>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681c      	ldr	r4, [r3, #0]
 8005c20:	fab4 f484 	clz	r4, r4
 8005c24:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c26:	4622      	mov	r2, r4
 8005c28:	1b71      	subs	r1, r6, r5
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <prvProcessTimerOrBlockTask+0x6c>)
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	f7ff f85b 	bl	8004ce8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8005c32:	f7ff fb59 	bl	80052e8 <xTaskResumeAll>
 8005c36:	b950      	cbnz	r0, 8005c4e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8005c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <prvProcessTimerOrBlockTask+0x70>)
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	e001      	b.n	8005c4e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8005c4a:	f7ff fb4d 	bl	80052e8 <xTaskResumeAll>
		}
	}
}
 8005c4e:	b002      	add	sp, #8
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
 8005c52:	bf00      	nop
 8005c54:	20001174 	.word	0x20001174
 8005c58:	20001170 	.word	0x20001170
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c60:	b530      	push	{r4, r5, lr}
 8005c62:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c64:	e057      	b.n	8005d16 <prvProcessReceivedCommands+0xb6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	da03      	bge.n	8005c74 <prvProcessReceivedCommands+0x14>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c6c:	9907      	ldr	r1, [sp, #28]
 8005c6e:	9806      	ldr	r0, [sp, #24]
 8005c70:	9b05      	ldr	r3, [sp, #20]
 8005c72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	db4d      	blt.n	8005d16 <prvProcessReceivedCommands+0xb6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c7a:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c7c:	6963      	ldr	r3, [r4, #20]
 8005c7e:	b113      	cbz	r3, 8005c86 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c80:	1d20      	adds	r0, r4, #4
 8005c82:	f7fe fcdb 	bl	800463c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c86:	a803      	add	r0, sp, #12
 8005c88:	f7ff ff6c 	bl	8005b64 <prvSampleTimeNow>

			switch( xMessage.xMessageID )
 8005c8c:	9b04      	ldr	r3, [sp, #16]
 8005c8e:	2b09      	cmp	r3, #9
 8005c90:	d841      	bhi.n	8005d16 <prvProcessReceivedCommands+0xb6>
 8005c92:	e8df f003 	tbb	[pc, r3]
 8005c96:	0505      	.short	0x0505
 8005c98:	3a274005 	.word	0x3a274005
 8005c9c:	27400505 	.word	0x27400505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ca0:	9905      	ldr	r1, [sp, #20]
 8005ca2:	69a5      	ldr	r5, [r4, #24]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	4429      	add	r1, r5
 8005caa:	4620      	mov	r0, r4
 8005cac:	f7ff fe54 	bl	8005958 <prvInsertTimerInActiveList>
 8005cb0:	b388      	cbz	r0, 8005d16 <prvProcessReceivedCommands+0xb6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005cb8:	69e3      	ldr	r3, [r4, #28]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d12b      	bne.n	8005d16 <prvProcessReceivedCommands+0xb6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cbe:	69a2      	ldr	r2, [r4, #24]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	9100      	str	r1, [sp, #0]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	9805      	ldr	r0, [sp, #20]
 8005cc8:	4402      	add	r2, r0
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f7ff fed6 	bl	8005a7c <xTimerGenericCommand>
							configASSERT( xResult );
 8005cd0:	bb08      	cbnz	r0, 8005d16 <prvProcessReceivedCommands+0xb6>
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	e7fe      	b.n	8005ce2 <prvProcessReceivedCommands+0x82>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ce4:	9905      	ldr	r1, [sp, #20]
 8005ce6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ce8:	b941      	cbnz	r1, 8005cfc <prvProcessReceivedCommands+0x9c>
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	e7fe      	b.n	8005cfa <prvProcessReceivedCommands+0x9a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	4602      	mov	r2, r0
 8005d00:	4401      	add	r1, r0
 8005d02:	4620      	mov	r0, r4
 8005d04:	f7ff fe28 	bl	8005958 <prvInsertTimerInActiveList>
					break;
 8005d08:	e005      	b.n	8005d16 <prvProcessReceivedCommands+0xb6>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d0a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005d0e:	b913      	cbnz	r3, 8005d16 <prvProcessReceivedCommands+0xb6>
						{
							vPortFree( pxTimer );
 8005d10:	4620      	mov	r0, r4
 8005d12:	f000 f9cd 	bl	80060b0 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d16:	2200      	movs	r2, #0
 8005d18:	a904      	add	r1, sp, #16
 8005d1a:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <prvProcessReceivedCommands+0xcc>)
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	f7fe ff23 	bl	8004b68 <xQueueReceive>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d19f      	bne.n	8005c66 <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8005d26:	b009      	add	sp, #36	; 0x24
 8005d28:	bd30      	pop	{r4, r5, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20001170 	.word	0x20001170

08005d30 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005d30:	b500      	push	{lr}
 8005d32:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d34:	a801      	add	r0, sp, #4
 8005d36:	f7ff fdff 	bl	8005938 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d3a:	9901      	ldr	r1, [sp, #4]
 8005d3c:	f7ff ff56 	bl	8005bec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d40:	f7ff ff8e 	bl	8005c60 <prvProcessReceivedCommands>
 8005d44:	e7f6      	b.n	8005d34 <prvTimerTask+0x4>
 8005d46:	bf00      	nop

08005d48 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d48:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d4c:	b97b      	cbnz	r3, 8005d6e <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d52:	b97b      	cbnz	r3, 8005d74 <osKernelInitialize+0x2c>
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <osKernelInitialize+0x40>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d102      	bne.n	8005d62 <osKernelInitialize+0x1a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d5c:	f3ef 8211 	mrs	r2, BASEPRI
 8005d60:	b95a      	cbnz	r2, 8005d7a <osKernelInitialize+0x32>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d62:	b96b      	cbnz	r3, 8005d80 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005d64:	2201      	movs	r2, #1
 8005d66:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <osKernelInitialize+0x40>)
 8005d68:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	4770      	bx	lr

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 8005d6e:	f06f 0005 	mvn.w	r0, #5
 8005d72:	4770      	bx	lr
 8005d74:	f06f 0005 	mvn.w	r0, #5
 8005d78:	4770      	bx	lr
 8005d7a:	f06f 0005 	mvn.w	r0, #5
 8005d7e:	4770      	bx	lr
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	200017d8 	.word	0x200017d8

08005d8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d8c:	b508      	push	{r3, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d8e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d92:	b993      	cbnz	r3, 8005dba <osKernelStart+0x2e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d94:	f3ef 8310 	mrs	r3, PRIMASK
 8005d98:	b993      	cbnz	r3, 8005dc0 <osKernelStart+0x34>
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <osKernelStart+0x48>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d102      	bne.n	8005da8 <osKernelStart+0x1c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005da2:	f3ef 8211 	mrs	r2, BASEPRI
 8005da6:	b972      	cbnz	r2, 8005dc6 <osKernelStart+0x3a>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d10f      	bne.n	8005dcc <osKernelStart+0x40>
      KernelState = osKernelRunning;
 8005dac:	2202      	movs	r2, #2
 8005dae:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <osKernelStart+0x48>)
 8005db0:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005db2:	f7ff f9ad 	bl	8005110 <vTaskStartScheduler>
      stat = osOK;
 8005db6:	2000      	movs	r0, #0
 8005db8:	bd08      	pop	{r3, pc}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 8005dba:	f06f 0005 	mvn.w	r0, #5
 8005dbe:	bd08      	pop	{r3, pc}
 8005dc0:	f06f 0005 	mvn.w	r0, #5
 8005dc4:	bd08      	pop	{r3, pc}
 8005dc6:	f06f 0005 	mvn.w	r0, #5
 8005dca:	bd08      	pop	{r3, pc}
    if (KernelState == osKernelReady) {
      KernelState = osKernelRunning;
      vTaskStartScheduler();
      stat = osOK;
    } else {
      stat = osError;
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005dd0:	bd08      	pop	{r3, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200017d8 	.word	0x200017d8

08005dd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dda:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ddc:	2400      	movs	r4, #0
 8005dde:	9404      	str	r4, [sp, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005de4:	2c00      	cmp	r4, #0
 8005de6:	d161      	bne.n	8005eac <osThreadNew+0xd4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d15d      	bne.n	8005eac <osThreadNew+0xd4>
 8005df0:	4b32      	ldr	r3, [pc, #200]	; (8005ebc <osThreadNew+0xe4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d103      	bne.n	8005e00 <osThreadNew+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005df8:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d155      	bne.n	8005eac <osThreadNew+0xd4>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d053      	beq.n	8005eac <osThreadNew+0xd4>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005e04:	2300      	movs	r3, #0
 8005e06:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005e0a:	b322      	cbz	r2, 8005e56 <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8005e0c:	6816      	ldr	r6, [r2, #0]
 8005e0e:	b90e      	cbnz	r6, 8005e14 <osThreadNew+0x3c>
  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8005e10:	f10d 0617 	add.w	r6, sp, #23

    if (attr != NULL) {
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005e14:	6994      	ldr	r4, [r2, #24]
 8005e16:	b904      	cbnz	r4, 8005e1a <osThreadNew+0x42>

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;
 8005e18:	2418      	movs	r4, #24
      }
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e1a:	1e63      	subs	r3, r4, #1
 8005e1c:	2b37      	cmp	r3, #55	; 0x37
 8005e1e:	d847      	bhi.n	8005eb0 <osThreadNew+0xd8>
 8005e20:	6853      	ldr	r3, [r2, #4]
 8005e22:	f013 0f01 	tst.w	r3, #1
 8005e26:	d145      	bne.n	8005eb4 <osThreadNew+0xdc>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005e28:	6953      	ldr	r3, [r2, #20]
 8005e2a:	b113      	cbz	r3, 8005e32 <osThreadNew+0x5a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e2c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8005e30:	e001      	b.n	8005e36 <osThreadNew+0x5e>
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 8005e32:	f04f 0e80 	mov.w	lr, #128	; 0x80
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e36:	6895      	ldr	r5, [r2, #8]
 8005e38:	b12d      	cbz	r5, 8005e46 <osThreadNew+0x6e>
 8005e3a:	68d7      	ldr	r7, [r2, #12]
 8005e3c:	2f5b      	cmp	r7, #91	; 0x5b
 8005e3e:	d902      	bls.n	8005e46 <osThreadNew+0x6e>
 8005e40:	6917      	ldr	r7, [r2, #16]
 8005e42:	b107      	cbz	r7, 8005e46 <osThreadNew+0x6e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e44:	b973      	cbnz	r3, 8005e64 <osThreadNew+0x8c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e46:	b97d      	cbnz	r5, 8005e68 <osThreadNew+0x90>
 8005e48:	68d3      	ldr	r3, [r2, #12]
 8005e4a:	b983      	cbnz	r3, 8005e6e <osThreadNew+0x96>
 8005e4c:	6913      	ldr	r3, [r2, #16]
 8005e4e:	b18b      	cbz	r3, 8005e74 <osThreadNew+0x9c>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
    mem   = -1;
 8005e50:	f04f 35ff 	mov.w	r5, #4294967295
 8005e54:	e00f      	b.n	8005e76 <osThreadNew+0x9e>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8005e56:	2500      	movs	r5, #0

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;
 8005e58:	2418      	movs	r4, #24
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 8005e5a:	f04f 0e80 	mov.w	lr, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8005e5e:	f10d 0617 	add.w	r6, sp, #23
 8005e62:	e008      	b.n	8005e76 <osThreadNew+0x9e>
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
 8005e64:	2501      	movs	r5, #1
 8005e66:	e006      	b.n	8005e76 <osThreadNew+0x9e>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
    mem   = -1;
 8005e68:	f04f 35ff 	mov.w	r5, #4294967295
 8005e6c:	e003      	b.n	8005e76 <osThreadNew+0x9e>
 8005e6e:	f04f 35ff 	mov.w	r5, #4294967295
 8005e72:	e000      	b.n	8005e76 <osThreadNew+0x9e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
          mem = 0;
 8005e74:	2500      	movs	r5, #0
 8005e76:	460b      	mov	r3, r1
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8005e78:	2d01      	cmp	r5, #1
 8005e7a:	d10a      	bne.n	8005e92 <osThreadNew+0xba>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e7c:	6911      	ldr	r1, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005e7e:	6892      	ldr	r2, [r2, #8]
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e80:	9202      	str	r2, [sp, #8]
 8005e82:	9101      	str	r1, [sp, #4]
 8005e84:	9400      	str	r4, [sp, #0]
 8005e86:	4672      	mov	r2, lr
 8005e88:	4631      	mov	r1, r6
 8005e8a:	f7ff f8cf 	bl	800502c <xTaskCreateStatic>
 8005e8e:	9004      	str	r0, [sp, #16]
 8005e90:	e00c      	b.n	8005eac <osThreadNew+0xd4>
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005e92:	b95d      	cbnz	r5, 8005eac <osThreadNew+0xd4>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e94:	aa04      	add	r2, sp, #16
 8005e96:	9201      	str	r2, [sp, #4]
 8005e98:	9400      	str	r4, [sp, #0]
 8005e9a:	fa1f f28e 	uxth.w	r2, lr
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	f7ff f902 	bl	80050a8 <xTaskCreate>
 8005ea4:	2801      	cmp	r0, #1
 8005ea6:	d001      	beq.n	8005eac <osThreadNew+0xd4>
          hTask = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9304      	str	r3, [sp, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005eac:	9804      	ldr	r0, [sp, #16]
 8005eae:	e002      	b.n	8005eb6 <osThreadNew+0xde>
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
        return (NULL);
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	e000      	b.n	8005eb6 <osThreadNew+0xde>
 8005eb4:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8005eb6:	b007      	add	sp, #28
 8005eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200017d8 	.word	0x200017d8

08005ec0 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ec0:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <vApplicationGetIdleTaskMemory+0x10>)
 8005ec2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ec4:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <vApplicationGetIdleTaskMemory+0x14>)
 8005ec6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	2000137c 	.word	0x2000137c
 8005ed4:	2000117c 	.word	0x2000117c

08005ed8 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ed8:	4b03      	ldr	r3, [pc, #12]	; (8005ee8 <vApplicationGetTimerTaskMemory+0x10>)
 8005eda:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005edc:	4b03      	ldr	r3, [pc, #12]	; (8005eec <vApplicationGetTimerTaskMemory+0x14>)
 8005ede:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4770      	bx	lr
 8005ee8:	200017dc 	.word	0x200017dc
 8005eec:	200013d8 	.word	0x200013d8

08005ef0 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ef2:	f012 0f07 	tst.w	r2, #7
 8005ef6:	d007      	beq.n	8005f08 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ef8:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005efa:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005efe:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 8005f02:	4413      	add	r3, r2
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f04:	460a      	mov	r2, r1
 8005f06:	e001      	b.n	8005f0c <prvHeapInit+0x1c>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f0c:	480c      	ldr	r0, [pc, #48]	; (8005f40 <prvHeapInit+0x50>)
 8005f0e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f10:	2100      	movs	r1, #0
 8005f12:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f14:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005f16:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f18:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005f1c:	4809      	ldr	r0, [pc, #36]	; (8005f44 <prvHeapInit+0x54>)
 8005f1e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005f20:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f22:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f24:	1a99      	subs	r1, r3, r2
 8005f26:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f28:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f2a:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <prvHeapInit+0x58>)
 8005f2c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f2e:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <prvHeapInit+0x5c>)
 8005f30:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <prvHeapInit+0x60>)
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	4770      	bx	lr
 8005f3c:	20001848 	.word	0x20001848
 8005f40:	20001840 	.word	0x20001840
 8005f44:	2000183c 	.word	0x2000183c
 8005f48:	2000384c 	.word	0x2000384c
 8005f4c:	20001838 	.word	0x20001838
 8005f50:	20003848 	.word	0x20003848

08005f54 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f54:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <prvInsertBlockIntoFreeList+0x50>)
 8005f56:	e000      	b.n	8005f5a <prvInsertBlockIntoFreeList+0x6>
 8005f58:	4613      	mov	r3, r2
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	4282      	cmp	r2, r0
 8005f5e:	d3fb      	bcc.n	8005f58 <prvInsertBlockIntoFreeList+0x4>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f60:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f62:	685c      	ldr	r4, [r3, #4]
 8005f64:	1919      	adds	r1, r3, r4
 8005f66:	4288      	cmp	r0, r1
 8005f68:	d103      	bne.n	8005f72 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f6a:	6841      	ldr	r1, [r0, #4]
 8005f6c:	4421      	add	r1, r4
 8005f6e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f70:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f72:	6844      	ldr	r4, [r0, #4]
 8005f74:	1901      	adds	r1, r0, r4
 8005f76:	428a      	cmp	r2, r1
 8005f78:	d10c      	bne.n	8005f94 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f7a:	490b      	ldr	r1, [pc, #44]	; (8005fa8 <prvInsertBlockIntoFreeList+0x54>)
 8005f7c:	6809      	ldr	r1, [r1, #0]
 8005f7e:	428a      	cmp	r2, r1
 8005f80:	d006      	beq.n	8005f90 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f82:	6852      	ldr	r2, [r2, #4]
 8005f84:	4422      	add	r2, r4
 8005f86:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	6002      	str	r2, [r0, #0]
 8005f8e:	e002      	b.n	8005f96 <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f90:	6001      	str	r1, [r0, #0]
 8005f92:	e000      	b.n	8005f96 <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f94:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f96:	4298      	cmp	r0, r3
 8005f98:	d000      	beq.n	8005f9c <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f9a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20001840 	.word	0x20001840
 8005fa8:	2000183c 	.word	0x2000183c

08005fac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8005fb0:	f7ff f8fa 	bl	80051a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fb4:	4b39      	ldr	r3, [pc, #228]	; (800609c <pvPortMalloc+0xf0>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	b90b      	cbnz	r3, 8005fbe <pvPortMalloc+0x12>
		{
			prvHeapInit();
 8005fba:	f7ff ff99 	bl	8005ef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fbe:	4b38      	ldr	r3, [pc, #224]	; (80060a0 <pvPortMalloc+0xf4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	421c      	tst	r4, r3
 8005fc4:	d153      	bne.n	800606e <pvPortMalloc+0xc2>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fc6:	b194      	cbz	r4, 8005fee <pvPortMalloc+0x42>
			{
				xWantedSize += xHeapStructSize;
 8005fc8:	3408      	adds	r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fca:	f014 0f07 	tst.w	r4, #7
 8005fce:	d00e      	beq.n	8005fee <pvPortMalloc+0x42>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fd0:	f024 0407 	bic.w	r4, r4, #7
 8005fd4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fd6:	f004 0307 	and.w	r3, r4, #7
 8005fda:	b143      	cbz	r3, 8005fee <pvPortMalloc+0x42>
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	e7fe      	b.n	8005fec <pvPortMalloc+0x40>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fee:	2c00      	cmp	r4, #0
 8005ff0:	d03f      	beq.n	8006072 <pvPortMalloc+0xc6>
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <pvPortMalloc+0xf8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429c      	cmp	r4, r3
 8005ff8:	d83d      	bhi.n	8006076 <pvPortMalloc+0xca>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8005ffa:	4b2b      	ldr	r3, [pc, #172]	; (80060a8 <pvPortMalloc+0xfc>)
 8005ffc:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ffe:	e001      	b.n	8006004 <pvPortMalloc+0x58>
				{
					pxPreviousBlock = pxBlock;
 8006000:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006002:	4615      	mov	r5, r2
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006004:	686a      	ldr	r2, [r5, #4]
 8006006:	4294      	cmp	r4, r2
 8006008:	d902      	bls.n	8006010 <pvPortMalloc+0x64>
 800600a:	682a      	ldr	r2, [r5, #0]
 800600c:	2a00      	cmp	r2, #0
 800600e:	d1f7      	bne.n	8006000 <pvPortMalloc+0x54>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006010:	4a22      	ldr	r2, [pc, #136]	; (800609c <pvPortMalloc+0xf0>)
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	4295      	cmp	r5, r2
 8006016:	d030      	beq.n	800607a <pvPortMalloc+0xce>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006018:	681e      	ldr	r6, [r3, #0]
 800601a:	3608      	adds	r6, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800601c:	682a      	ldr	r2, [r5, #0]
 800601e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006020:	686b      	ldr	r3, [r5, #4]
 8006022:	1b1b      	subs	r3, r3, r4
 8006024:	2b10      	cmp	r3, #16
 8006026:	d910      	bls.n	800604a <pvPortMalloc+0x9e>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006028:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800602a:	f010 0f07 	tst.w	r0, #7
 800602e:	d008      	beq.n	8006042 <pvPortMalloc+0x96>
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	e7fe      	b.n	8006040 <pvPortMalloc+0x94>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006042:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006044:	606c      	str	r4, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006046:	f7ff ff85 	bl	8005f54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800604a:	686a      	ldr	r2, [r5, #4]
 800604c:	4915      	ldr	r1, [pc, #84]	; (80060a4 <pvPortMalloc+0xf8>)
 800604e:	680b      	ldr	r3, [r1, #0]
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006054:	4915      	ldr	r1, [pc, #84]	; (80060ac <pvPortMalloc+0x100>)
 8006056:	6809      	ldr	r1, [r1, #0]
 8006058:	428b      	cmp	r3, r1
 800605a:	d201      	bcs.n	8006060 <pvPortMalloc+0xb4>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800605c:	4913      	ldr	r1, [pc, #76]	; (80060ac <pvPortMalloc+0x100>)
 800605e:	600b      	str	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <pvPortMalloc+0xf4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	431a      	orrs	r2, r3
 8006066:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	e006      	b.n	800607c <pvPortMalloc+0xd0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800606e:	2600      	movs	r6, #0
 8006070:	e004      	b.n	800607c <pvPortMalloc+0xd0>
 8006072:	2600      	movs	r6, #0
 8006074:	e002      	b.n	800607c <pvPortMalloc+0xd0>
 8006076:	2600      	movs	r6, #0
 8006078:	e000      	b.n	800607c <pvPortMalloc+0xd0>
 800607a:	2600      	movs	r6, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800607c:	f7ff f934 	bl	80052e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006080:	f016 0f07 	tst.w	r6, #7
 8006084:	d008      	beq.n	8006098 <pvPortMalloc+0xec>
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	e7fe      	b.n	8006096 <pvPortMalloc+0xea>
	return pvReturn;
}
 8006098:	4630      	mov	r0, r6
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	2000183c 	.word	0x2000183c
 80060a0:	20003848 	.word	0x20003848
 80060a4:	20001838 	.word	0x20001838
 80060a8:	20001840 	.word	0x20001840
 80060ac:	2000384c 	.word	0x2000384c

080060b0 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80060b0:	b3a0      	cbz	r0, 800611c <vPortFree+0x6c>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060b2:	b538      	push	{r3, r4, r5, lr}
 80060b4:	4603      	mov	r3, r0

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060b6:	f1a0 0508 	sub.w	r5, r0, #8

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80060be:	4918      	ldr	r1, [pc, #96]	; (8006120 <vPortFree+0x70>)
 80060c0:	6809      	ldr	r1, [r1, #0]
 80060c2:	ea12 0401 	ands.w	r4, r2, r1
 80060c6:	d108      	bne.n	80060da <vPortFree+0x2a>
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	e7fe      	b.n	80060d8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060da:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80060de:	b140      	cbz	r0, 80060f2 <vPortFree+0x42>
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	e7fe      	b.n	80060f0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060f2:	b194      	cbz	r4, 800611a <vPortFree+0x6a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060f4:	b988      	cbnz	r0, 800611a <vPortFree+0x6a>
 80060f6:	461c      	mov	r4, r3
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060f8:	ea22 0201 	bic.w	r2, r2, r1
 80060fc:	f843 2c04 	str.w	r2, [r3, #-4]

				vTaskSuspendAll();
 8006100:	f7ff f852 	bl	80051a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006104:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006108:	4a06      	ldr	r2, [pc, #24]	; (8006124 <vPortFree+0x74>)
 800610a:	6811      	ldr	r1, [r2, #0]
 800610c:	440b      	add	r3, r1
 800610e:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006110:	4628      	mov	r0, r5
 8006112:	f7ff ff1f 	bl	8005f54 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006116:	f7ff f8e7 	bl	80052e8 <xTaskResumeAll>
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	20003848 	.word	0x20003848
 8006124:	20001838 	.word	0x20001838

08006128 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006128:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <prvTaskExitError+0x3c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d008      	beq.n	800614a <prvTaskExitError+0x22>
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	e7fe      	b.n	8006148 <prvTaskExitError+0x20>
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800615a:	9b01      	ldr	r3, [sp, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0fc      	beq.n	800615a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006160:	b002      	add	sp, #8
 8006162:	4770      	bx	lr
 8006164:	20000070 	.word	0x20000070

08006168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006168:	4808      	ldr	r0, [pc, #32]	; (800618c <prvPortStartFirstTask+0x24>)
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	6800      	ldr	r0, [r0, #0]
 800616e:	f380 8808 	msr	MSP, r0
 8006172:	f04f 0000 	mov.w	r0, #0
 8006176:	f380 8814 	msr	CONTROL, r0
 800617a:	b662      	cpsie	i
 800617c:	b661      	cpsie	f
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	df00      	svc	0
 8006188:	bf00      	nop
 800618a:	0000      	.short	0x0000
 800618c:	e000ed08 	.word	0xe000ed08

08006190 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006190:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061a0 <vPortEnableVFP+0x10>
 8006194:	6801      	ldr	r1, [r0, #0]
 8006196:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800619a:	6001      	str	r1, [r0, #0]
 800619c:	4770      	bx	lr
 800619e:	0000      	.short	0x0000
 80061a0:	e000ed88 	.word	0xe000ed88

080061a4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061a8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061ac:	f021 0101 	bic.w	r1, r1, #1
 80061b0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <pxPortInitialiseStack+0x28>)
 80061b6:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061ba:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061be:	f06f 0302 	mvn.w	r3, #2
 80061c2:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80061c6:	3844      	subs	r0, #68	; 0x44
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	08006129 	.word	0x08006129

080061d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <pxCurrentTCBConst2>)
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	6808      	ldr	r0, [r1, #0]
 80061d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	f380 8809 	msr	PSP, r0
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8811 	msr	BASEPRI, r0
 80061ea:	4770      	bx	lr
 80061ec:	f3af 8000 	nop.w

080061f0 <pxCurrentTCBConst2>:
 80061f0:	20000fe4 	.word	0x20000fe4

080061f4 <vPortEnterCritical>:
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006204:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <vPortEnterCritical+0x3c>)
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	3301      	adds	r3, #1
 800620a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10d      	bne.n	800622c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <vPortEnterCritical+0x40>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006218:	d008      	beq.n	800622c <vPortEnterCritical+0x38>
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	e7fe      	b.n	800622a <vPortEnterCritical+0x36>
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000070 	.word	0x20000070
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006238:	4b09      	ldr	r3, [pc, #36]	; (8006260 <vPortExitCritical+0x28>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	b943      	cbnz	r3, 8006250 <vPortExitCritical+0x18>
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	e7fe      	b.n	800624e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006250:	3b01      	subs	r3, #1
 8006252:	4a03      	ldr	r2, [pc, #12]	; (8006260 <vPortExitCritical+0x28>)
 8006254:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006256:	b90b      	cbnz	r3, 800625c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000070 	.word	0x20000070
	...

08006270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006270:	f3ef 8009 	mrs	r0, PSP
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <pxCurrentTCBConst>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	f01e 0f10 	tst.w	lr, #16
 8006280:	bf08      	it	eq
 8006282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628a:	6010      	str	r0, [r2, #0]
 800628c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006294:	f380 8811 	msr	BASEPRI, r0
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f7ff f8c6 	bl	8005430 <vTaskSwitchContext>
 80062a4:	f04f 0000 	mov.w	r0, #0
 80062a8:	f380 8811 	msr	BASEPRI, r0
 80062ac:	bc09      	pop	{r0, r3}
 80062ae:	6819      	ldr	r1, [r3, #0]
 80062b0:	6808      	ldr	r0, [r1, #0]
 80062b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b6:	f01e 0f10 	tst.w	lr, #16
 80062ba:	bf08      	it	eq
 80062bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062c0:	f380 8809 	msr	PSP, r0
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst>:
 80062d0:	20000fe4 	.word	0x20000fe4

080062d4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062d4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062e6:	f7fe ff6d 	bl	80051c4 <xTaskIncrementTick>
 80062ea:	b118      	cbz	r0, 80062f4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f0:	4b02      	ldr	r3, [pc, #8]	; (80062fc <SysTick_Handler+0x28>)
 80062f2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062f4:	2300      	movs	r3, #0
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	bd08      	pop	{r3, pc}
 80062fc:	e000ed04 	.word	0xe000ed04

08006300 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006300:	4a08      	ldr	r2, [pc, #32]	; (8006324 <vPortSetupTimerInterrupt+0x24>)
 8006302:	2300      	movs	r3, #0
 8006304:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006306:	4908      	ldr	r1, [pc, #32]	; (8006328 <vPortSetupTimerInterrupt+0x28>)
 8006308:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800630a:	4b08      	ldr	r3, [pc, #32]	; (800632c <vPortSetupTimerInterrupt+0x2c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4908      	ldr	r1, [pc, #32]	; (8006330 <vPortSetupTimerInterrupt+0x30>)
 8006310:	fba1 1303 	umull	r1, r3, r1, r3
 8006314:	099b      	lsrs	r3, r3, #6
 8006316:	3b01      	subs	r3, #1
 8006318:	4906      	ldr	r1, [pc, #24]	; (8006334 <vPortSetupTimerInterrupt+0x34>)
 800631a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800631c:	2307      	movs	r3, #7
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	e000e010 	.word	0xe000e010
 8006328:	e000e018 	.word	0xe000e018
 800632c:	2000006c 	.word	0x2000006c
 8006330:	10624dd3 	.word	0x10624dd3
 8006334:	e000e014 	.word	0xe000e014

08006338 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006338:	4b3a      	ldr	r3, [pc, #232]	; (8006424 <xPortStartScheduler+0xec>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4b3a      	ldr	r3, [pc, #232]	; (8006428 <xPortStartScheduler+0xf0>)
 800633e:	429a      	cmp	r2, r3
 8006340:	d108      	bne.n	8006354 <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	e7fe      	b.n	8006352 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006354:	4b33      	ldr	r3, [pc, #204]	; (8006424 <xPortStartScheduler+0xec>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4b34      	ldr	r3, [pc, #208]	; (800642c <xPortStartScheduler+0xf4>)
 800635a:	429a      	cmp	r2, r3
 800635c:	d108      	bne.n	8006370 <xPortStartScheduler+0x38>
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	e7fe      	b.n	800636e <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006370:	b510      	push	{r4, lr}
 8006372:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006374:	4b2e      	ldr	r3, [pc, #184]	; (8006430 <xPortStartScheduler+0xf8>)
 8006376:	781a      	ldrb	r2, [r3, #0]
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800637c:	22ff      	movs	r2, #255	; 0xff
 800637e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006388:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800638c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006390:	4a28      	ldr	r2, [pc, #160]	; (8006434 <xPortStartScheduler+0xfc>)
 8006392:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006394:	2207      	movs	r2, #7
 8006396:	4b28      	ldr	r3, [pc, #160]	; (8006438 <xPortStartScheduler+0x100>)
 8006398:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800639a:	e009      	b.n	80063b0 <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
 800639c:	4a26      	ldr	r2, [pc, #152]	; (8006438 <xPortStartScheduler+0x100>)
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063b8:	d1f0      	bne.n	800639c <xPortStartScheduler+0x64>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063ba:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <xPortStartScheduler+0x100>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d008      	beq.n	80063d4 <xPortStartScheduler+0x9c>
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	e7fe      	b.n	80063d2 <xPortStartScheduler+0x9a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063d4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <xPortStartScheduler+0x100>)
 80063dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	4a13      	ldr	r2, [pc, #76]	; (8006430 <xPortStartScheduler+0xf8>)
 80063e4:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063e6:	4b15      	ldr	r3, [pc, #84]	; (800643c <xPortStartScheduler+0x104>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80063ee:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80063f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063f8:	f7ff ff82 	bl	8006300 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063fc:	2400      	movs	r4, #0
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xPortStartScheduler+0x108>)
 8006400:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006402:	f7ff fec5 	bl	8006190 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006406:	4a0f      	ldr	r2, [pc, #60]	; (8006444 <xPortStartScheduler+0x10c>)
 8006408:	6813      	ldr	r3, [r2, #0]
 800640a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800640e:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006410:	f7ff feaa 	bl	8006168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006414:	f7ff f80c 	bl	8005430 <vTaskSwitchContext>
	prvTaskExitError();
 8006418:	f7ff fe86 	bl	8006128 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
 800641c:	4620      	mov	r0, r4
 800641e:	b002      	add	sp, #8
 8006420:	bd10      	pop	{r4, pc}
 8006422:	bf00      	nop
 8006424:	e000ed00 	.word	0xe000ed00
 8006428:	410fc271 	.word	0x410fc271
 800642c:	410fc270 	.word	0x410fc270
 8006430:	e000e400 	.word	0xe000e400
 8006434:	20003850 	.word	0x20003850
 8006438:	20003854 	.word	0x20003854
 800643c:	e000ed20 	.word	0xe000ed20
 8006440:	20000070 	.word	0x20000070
 8006444:	e000ef34 	.word	0xe000ef34

08006448 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006448:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800644c:	2b0f      	cmp	r3, #15
 800644e:	d90f      	bls.n	8006470 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006450:	4a10      	ldr	r2, [pc, #64]	; (8006494 <vPortValidateInterruptPriority+0x4c>)
 8006452:	5c9b      	ldrb	r3, [r3, r2]
 8006454:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <vPortValidateInterruptPriority+0x50>)
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	4293      	cmp	r3, r2
 800645c:	d208      	bcs.n	8006470 <vPortValidateInterruptPriority+0x28>
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	e7fe      	b.n	800646e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <vPortValidateInterruptPriority+0x54>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006478:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <vPortValidateInterruptPriority+0x58>)
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	4293      	cmp	r3, r2
 800647e:	d908      	bls.n	8006492 <vPortValidateInterruptPriority+0x4a>
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	e7fe      	b.n	8006490 <vPortValidateInterruptPriority+0x48>
 8006492:	4770      	bx	lr
 8006494:	e000e3f0 	.word	0xe000e3f0
 8006498:	20003850 	.word	0x20003850
 800649c:	e000ed0c 	.word	0xe000ed0c
 80064a0:	20003854 	.word	0x20003854

080064a4 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80064a4:	b198      	cbz	r0, 80064ce <USBD_Init+0x2a>
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064a6:	b508      	push	{r3, lr}
 80064a8:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80064aa:	f8d0 028c 	ldr.w	r0, [r0, #652]	; 0x28c
 80064ae:	b110      	cbz	r0, 80064b6 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80064b0:	2000      	movs	r0, #0
 80064b2:	f8c3 028c 	str.w	r0, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80064b6:	b109      	cbz	r1, 80064bc <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80064b8:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
 80064bc:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80064be:	2301      	movs	r3, #1
 80064c0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80064c4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80064c6:	f7fb f905 	bl	80016d4 <USBD_LL_Init>

  return USBD_OK;
 80064ca:	2000      	movs	r0, #0
 80064cc:	bd08      	pop	{r3, pc}
  if(pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80064ce:	2002      	movs	r0, #2
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop

080064d4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80064d4:	b119      	cbz	r1, 80064de <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064d6:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80064da:	2000      	movs	r0, #0
 80064dc:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064de:	2002      	movs	r0, #2
  }

  return status;
}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop

080064e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80064e4:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064e6:	f7fb f951 	bl	800178c <USBD_LL_Start>

  return USBD_OK;
}
 80064ea:	2000      	movs	r0, #0
 80064ec:	bd08      	pop	{r3, pc}
 80064ee:	bf00      	nop

080064f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064f0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80064f2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80064f6:	b123      	cbz	r3, 8006502 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4798      	blx	r3
 80064fc:	b118      	cbz	r0, 8006506 <USBD_SetClassConfig+0x16>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80064fe:	2002      	movs	r0, #2
 8006500:	bd08      	pop	{r3, pc}
 8006502:	2002      	movs	r0, #2
 8006504:	bd08      	pop	{r3, pc}
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
    {
      ret = USBD_OK;
 8006506:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8006508:	bd08      	pop	{r3, pc}
 800650a:	bf00      	nop

0800650c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800650c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800650e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4798      	blx	r3
  return USBD_OK;
}
 8006516:	2000      	movs	r0, #0
 8006518:	bd08      	pop	{r3, pc}
 800651a:	bf00      	nop

0800651c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006520:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8006524:	4628      	mov	r0, r5
 8006526:	f000 f947 	bl	80067b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800652a:	2301      	movs	r3, #1
 800652c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006530:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8006534:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006538:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
 800653c:	f001 031f 	and.w	r3, r1, #31
 8006540:	2b01      	cmp	r3, #1
 8006542:	d008      	beq.n	8006556 <USBD_LL_SetupStage+0x3a>
 8006544:	b113      	cbz	r3, 800654c <USBD_LL_SetupStage+0x30>
 8006546:	2b02      	cmp	r3, #2
 8006548:	d00a      	beq.n	8006560 <USBD_LL_SetupStage+0x44>
 800654a:	e00e      	b.n	800656a <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800654c:	4629      	mov	r1, r5
 800654e:	4620      	mov	r0, r4
 8006550:	f000 faba 	bl	8006ac8 <USBD_StdDevReq>
    break;
 8006554:	e00e      	b.n	8006574 <USBD_LL_SetupStage+0x58>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006556:	4629      	mov	r1, r5
 8006558:	4620      	mov	r0, r4
 800655a:	f000 faeb 	bl	8006b34 <USBD_StdItfReq>
    break;
 800655e:	e009      	b.n	8006574 <USBD_LL_SetupStage+0x58>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006560:	4629      	mov	r1, r5
 8006562:	4620      	mov	r0, r4
 8006564:	f000 fb14 	bl	8006b90 <USBD_StdEPReq>
    break;
 8006568:	e004      	b.n	8006574 <USBD_LL_SetupStage+0x58>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800656a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800656e:	4620      	mov	r0, r4
 8006570:	f7fb f928 	bl	80017c4 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8006574:	2000      	movs	r0, #0
 8006576:	bd38      	pop	{r3, r4, r5, pc}

08006578 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800657c:	bb91      	cbnz	r1, 80065e4 <USBD_LL_DataOutStage+0x6c>
 800657e:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006580:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 8006584:	2b03      	cmp	r3, #3
 8006586:	d122      	bne.n	80065ce <USBD_LL_DataOutStage+0x56>
    {
      if(pep->rem_length > pep->maxpacket)
 8006588:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 800658c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8006590:	429a      	cmp	r2, r3
 8006592:	d90d      	bls.n	80065b0 <USBD_LL_DataOutStage+0x38>
      {
        pep->rem_length -=  pep->maxpacket;
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c

        USBD_CtlContinueRx (pdev,
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <USBD_LL_DataOutStage+0x2a>
 800659e:	b292      	uxth	r2, r2
 80065a0:	e000      	b.n	80065a4 <USBD_LL_DataOutStage+0x2c>
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	4601      	mov	r1, r0
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fc3c 	bl	8006e24 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80065ac:	2000      	movs	r0, #0
 80065ae:	bd38      	pop	{r3, r4, r5, pc}
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80065b0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	b12b      	cbz	r3, 80065c4 <USBD_LL_DataOutStage+0x4c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065b8:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80065bc:	2a03      	cmp	r2, #3
 80065be:	d101      	bne.n	80065c4 <USBD_LL_DataOutStage+0x4c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev);
 80065c0:	4620      	mov	r0, r4
 80065c2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 fc35 	bl	8006e34 <USBD_CtlSendStatus>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80065ca:	2000      	movs	r0, #0
 80065cc:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d115      	bne.n	80065fe <USBD_LL_DataOutStage+0x86>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80065d2:	2500      	movs	r5, #0
 80065d4:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80065d8:	4629      	mov	r1, r5
 80065da:	4620      	mov	r0, r4
 80065dc:	f7fb f8f2 	bl	80017c4 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80065e0:	4628      	mov	r0, r5
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	460a      	mov	r2, r1
        pdev->ep0_state = USBD_EP0_IDLE;
        USBD_LL_StallEP(pdev, 0U);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80065e6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	b14b      	cbz	r3, 8006602 <USBD_LL_DataOutStage+0x8a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065ee:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
        pdev->ep0_state = USBD_EP0_IDLE;
        USBD_LL_StallEP(pdev, 0U);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80065f2:	2903      	cmp	r1, #3
 80065f4:	d107      	bne.n	8006606 <USBD_LL_DataOutStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 80065f6:	4611      	mov	r1, r2
 80065f8:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80065fa:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 80065fc:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80065fe:	2000      	movs	r0, #0
 8006600:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->DataOut(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006602:	2002      	movs	r0, #2
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop

0800660c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800660c:	b510      	push	{r4, lr}
 800660e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006610:	2900      	cmp	r1, #0
 8006612:	d150      	bne.n	80066b6 <USBD_LL_DataInStage+0xaa>
 8006614:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006616:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 800661a:	2b02      	cmp	r3, #2
 800661c:	d13c      	bne.n	8006698 <USBD_LL_DataInStage+0x8c>
    {
      if(pep->rem_length > pep->maxpacket)
 800661e:	6a22      	ldr	r2, [r4, #32]
 8006620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006622:	429a      	cmp	r2, r3
 8006624:	d90d      	bls.n	8006642 <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -= pep->maxpacket;
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	6222      	str	r2, [r4, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800662a:	b292      	uxth	r2, r2
 800662c:	4601      	mov	r1, r0
 800662e:	4620      	mov	r0, r4
 8006630:	f000 fbe0 	bl	8006df4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006634:	2300      	movs	r3, #0
 8006636:	461a      	mov	r2, r3
 8006638:	4619      	mov	r1, r3
 800663a:	4620      	mov	r0, r4
 800663c:	f7fb f8e2 	bl	8001804 <USBD_LL_PrepareReceive>
 8006640:	e031      	b.n	80066a6 <USBD_LL_DataInStage+0x9a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006642:	69e1      	ldr	r1, [r4, #28]
 8006644:	fbb1 f2f3 	udiv	r2, r1, r3
 8006648:	fb03 1212 	mls	r2, r3, r2, r1
 800664c:	b992      	cbnz	r2, 8006674 <USBD_LL_DataInStage+0x68>
 800664e:	428b      	cmp	r3, r1
 8006650:	d810      	bhi.n	8006674 <USBD_LL_DataInStage+0x68>
           (pep->total_length >= pep->maxpacket) &&
           (pep->total_length < pdev->ep0_data_len))
 8006652:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
           (pep->total_length >= pep->maxpacket) &&
 8006656:	4299      	cmp	r1, r3
 8006658:	d20c      	bcs.n	8006674 <USBD_LL_DataInStage+0x68>
           (pep->total_length < pdev->ep0_data_len))
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800665a:	4611      	mov	r1, r2
 800665c:	4620      	mov	r0, r4
 800665e:	f000 fbc9 	bl	8006df4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006662:	2100      	movs	r1, #0
 8006664:	f8c4 1270 	str.w	r1, [r4, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006668:	460b      	mov	r3, r1
 800666a:	460a      	mov	r2, r1
 800666c:	4620      	mov	r0, r4
 800666e:	f7fb f8c9 	bl	8001804 <USBD_LL_PrepareReceive>
 8006672:	e018      	b.n	80066a6 <USBD_LL_DataInStage+0x9a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006674:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	b12b      	cbz	r3, 8006688 <USBD_LL_DataInStage+0x7c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800667c:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006680:	2a03      	cmp	r2, #3
 8006682:	d101      	bne.n	8006688 <USBD_LL_DataInStage+0x7c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006684:	4620      	mov	r0, r4
 8006686:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006688:	2180      	movs	r1, #128	; 0x80
 800668a:	4620      	mov	r0, r4
 800668c:	f7fb f89a 	bl	80017c4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fbdb 	bl	8006e4c <USBD_CtlReceiveStatus>
 8006696:	e006      	b.n	80066a6 <USBD_LL_DataInStage+0x9a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006698:	2b04      	cmp	r3, #4
 800669a:	d000      	beq.n	800669e <USBD_LL_DataInStage+0x92>
 800669c:	b91b      	cbnz	r3, 80066a6 <USBD_LL_DataInStage+0x9a>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800669e:	2180      	movs	r1, #128	; 0x80
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7fb f88f 	bl	80017c4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80066a6:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d110      	bne.n	80066d0 <USBD_LL_DataInStage+0xc4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80066ae:	2000      	movs	r0, #0
 80066b0:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	460a      	mov	r2, r1
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80066b8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	b14b      	cbz	r3, 80066d4 <USBD_LL_DataInStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066c0:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80066c4:	2903      	cmp	r1, #3
 80066c6:	d107      	bne.n	80066d8 <USBD_LL_DataInStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80066c8:	4611      	mov	r1, r2
 80066ca:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80066cc:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80066ce:	bd10      	pop	{r4, pc}
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80066d0:	2000      	movs	r0, #0
 80066d2:	bd10      	pop	{r4, pc}
    pdev->pClass->DataIn(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066d4:	2002      	movs	r0, #2
 80066d6:	bd10      	pop	{r4, pc}
 80066d8:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 80066da:	bd10      	pop	{r4, pc}

080066dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066e0:	2340      	movs	r3, #64	; 0x40
 80066e2:	2200      	movs	r2, #0
 80066e4:	4611      	mov	r1, r2
 80066e6:	f7fb f859 	bl	800179c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066ea:	2501      	movs	r5, #1
 80066ec:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066f0:	2640      	movs	r6, #64	; 0x40
 80066f2:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066f6:	4633      	mov	r3, r6
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	; 0x80
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7fb f84d 	bl	800179c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006702:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006704:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006706:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800670a:	2300      	movs	r3, #0
 800670c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006710:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8006712:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 8006716:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800671a:	b12b      	cbz	r3, 8006728 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800671c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2100      	movs	r1, #0
 8006724:	4620      	mov	r0, r4
 8006726:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006728:	2000      	movs	r0, #0
 800672a:	bd70      	pop	{r4, r5, r6, pc}

0800672c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800672c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800672e:	2000      	movs	r0, #0
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop

08006734 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006734:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006738:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800673c:	2304      	movs	r3, #4
 800673e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8006742:	2000      	movs	r0, #0
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop

08006748 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8006748:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 800674c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8006750:	2000      	movs	r0, #0
 8006752:	4770      	bx	lr

08006754 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006754:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006756:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800675a:	2b03      	cmp	r3, #3
 800675c:	d104      	bne.n	8006768 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800675e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	b103      	cbz	r3, 8006768 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8006766:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8006768:	2000      	movs	r0, #0
 800676a:	bd08      	pop	{r3, pc}

0800676c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800676c:	2000      	movs	r0, #0
 800676e:	4770      	bx	lr

08006770 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8006770:	2000      	movs	r0, #0
 8006772:	4770      	bx	lr

08006774 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8006774:	2000      	movs	r0, #0
 8006776:	4770      	bx	lr

08006778 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006778:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800677a:	2201      	movs	r2, #1
 800677c:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006780:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8006784:	6852      	ldr	r2, [r2, #4]
 8006786:	7901      	ldrb	r1, [r0, #4]
 8006788:	4790      	blx	r2

  return USBD_OK;
}
 800678a:	2000      	movs	r0, #0
 800678c:	bd08      	pop	{r3, pc}
 800678e:	bf00      	nop

08006790 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006790:	4603      	mov	r3, r0
    uint8_t  len = 0U;
 8006792:	2000      	movs	r0, #0

    while (*buf != '\0')
 8006794:	e002      	b.n	800679c <USBD_GetLen+0xc>
    {
        len++;
 8006796:	3001      	adds	r0, #1
 8006798:	b2c0      	uxtb	r0, r0
        buf++;
 800679a:	3301      	adds	r3, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	2a00      	cmp	r2, #0
 80067a0:	d1f9      	bne.n	8006796 <USBD_GetLen+0x6>
        len++;
        buf++;
    }

    return len;
}
 80067a2:	4770      	bx	lr

080067a4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80067a4:	b508      	push	{r3, lr}

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067a6:	884b      	ldrh	r3, [r1, #2]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d103      	bne.n	80067b4 <USBD_SetFeature+0x10>
  {
    pdev->dev_remote_wakeup = 1U;
 80067ac:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80067b0:	f000 fb40 	bl	8006e34 <USBD_CtlSendStatus>
 80067b4:	bd08      	pop	{r3, pc}
 80067b6:	bf00      	nop

080067b8 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 80067b8:	780b      	ldrb	r3, [r1, #0]
 80067ba:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80067bc:	784b      	ldrb	r3, [r1, #1]
 80067be:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80067c0:	788b      	ldrb	r3, [r1, #2]
 80067c2:	78ca      	ldrb	r2, [r1, #3]
 80067c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80067c8:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80067ca:	790b      	ldrb	r3, [r1, #4]
 80067cc:	794a      	ldrb	r2, [r1, #5]
 80067ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80067d2:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80067d4:	798b      	ldrb	r3, [r1, #6]
 80067d6:	79ca      	ldrb	r2, [r1, #7]
 80067d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80067dc:	80c3      	strh	r3, [r0, #6]
 80067de:	4770      	bx	lr

080067e0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80067e4:	2180      	movs	r1, #128	; 0x80
 80067e6:	f7fa ffed 	bl	80017c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80067ea:	2100      	movs	r1, #0
 80067ec:	4620      	mov	r0, r4
 80067ee:	f7fa ffe9 	bl	80017c4 <USBD_LL_StallEP>
 80067f2:	bd10      	pop	{r4, pc}

080067f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80067f4:	b530      	push	{r4, r5, lr}
 80067f6:	b083      	sub	sp, #12
 80067f8:	4605      	mov	r5, r0
 80067fa:	460c      	mov	r4, r1
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80067fc:	884a      	ldrh	r2, [r1, #2]
 80067fe:	0a13      	lsrs	r3, r2, #8
 8006800:	3b01      	subs	r3, #1
 8006802:	2b06      	cmp	r3, #6
 8006804:	d879      	bhi.n	80068fa <USBD_GetDescriptor+0x106>
 8006806:	e8df f003 	tbb	[pc, r3]
 800680a:	0c04      	.short	0x0c04
 800680c:	5c787820 	.word	0x5c787820
 8006810:	69          	.byte	0x69
 8006811:	00          	.byte	0x00
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006812:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f10d 0106 	add.w	r1, sp, #6
 800681c:	7c00      	ldrb	r0, [r0, #16]
 800681e:	4798      	blx	r3
    break;
 8006820:	e06f      	b.n	8006902 <USBD_GetDescriptor+0x10e>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006822:	7c03      	ldrb	r3, [r0, #16]
 8006824:	b943      	cbnz	r3, 8006838 <USBD_GetDescriptor+0x44>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006826:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	f10d 0006 	add.w	r0, sp, #6
 8006830:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006832:	2302      	movs	r3, #2
 8006834:	7043      	strb	r3, [r0, #1]
 8006836:	e064      	b.n	8006902 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006838:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	f10d 0006 	add.w	r0, sp, #6
 8006842:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006844:	2302      	movs	r3, #2
 8006846:	7043      	strb	r3, [r0, #1]
 8006848:	e05b      	b.n	8006902 <USBD_GetDescriptor+0x10e>
    }
    break;

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	2a05      	cmp	r2, #5
 800684e:	d834      	bhi.n	80068ba <USBD_GetDescriptor+0xc6>
 8006850:	e8df f002 	tbb	[pc, r2]
 8006854:	1b130b03 	.word	0x1b130b03
 8006858:	2b23      	.short	0x2b23
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800685a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f10d 0106 	add.w	r1, sp, #6
 8006864:	7c00      	ldrb	r0, [r0, #16]
 8006866:	4798      	blx	r3
      break;
 8006868:	e04b      	b.n	8006902 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800686a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f10d 0106 	add.w	r1, sp, #6
 8006874:	7c00      	ldrb	r0, [r0, #16]
 8006876:	4798      	blx	r3
      break;
 8006878:	e043      	b.n	8006902 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800687a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f10d 0106 	add.w	r1, sp, #6
 8006884:	7c00      	ldrb	r0, [r0, #16]
 8006886:	4798      	blx	r3
      break;
 8006888:	e03b      	b.n	8006902 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800688a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f10d 0106 	add.w	r1, sp, #6
 8006894:	7c00      	ldrb	r0, [r0, #16]
 8006896:	4798      	blx	r3
      break;
 8006898:	e033      	b.n	8006902 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800689a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f10d 0106 	add.w	r1, sp, #6
 80068a4:	7c00      	ldrb	r0, [r0, #16]
 80068a6:	4798      	blx	r3
      break;
 80068a8:	e02b      	b.n	8006902 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068aa:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f10d 0106 	add.w	r1, sp, #6
 80068b4:	7c00      	ldrb	r0, [r0, #16]
 80068b6:	4798      	blx	r3
      break;
 80068b8:	e023      	b.n	8006902 <USBD_GetDescriptor+0x10e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80068ba:	4621      	mov	r1, r4
 80068bc:	f7ff ff90 	bl	80067e0 <USBD_CtlError>
      return;
 80068c0:	e032      	b.n	8006928 <USBD_GetDescriptor+0x134>
#endif
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80068c2:	7c03      	ldrb	r3, [r0, #16]
 80068c4:	b933      	cbnz	r3, 80068d4 <USBD_GetDescriptor+0xe0>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068c6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80068ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068cc:	f10d 0006 	add.w	r0, sp, #6
 80068d0:	4798      	blx	r3
      break;
 80068d2:	e016      	b.n	8006902 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80068d4:	4621      	mov	r1, r4
 80068d6:	f7ff ff83 	bl	80067e0 <USBD_CtlError>
      return;
 80068da:	e025      	b.n	8006928 <USBD_GetDescriptor+0x134>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80068dc:	7c03      	ldrb	r3, [r0, #16]
 80068de:	b943      	cbnz	r3, 80068f2 <USBD_GetDescriptor+0xfe>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068e0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	f10d 0006 	add.w	r0, sp, #6
 80068ea:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068ec:	2307      	movs	r3, #7
 80068ee:	7043      	strb	r3, [r0, #1]
      break;
 80068f0:	e007      	b.n	8006902 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80068f2:	4621      	mov	r1, r4
 80068f4:	f7ff ff74 	bl	80067e0 <USBD_CtlError>
      return;
 80068f8:	e016      	b.n	8006928 <USBD_GetDescriptor+0x134>
    }

  default:
     USBD_CtlError(pdev , req);
 80068fa:	4621      	mov	r1, r4
 80068fc:	f7ff ff70 	bl	80067e0 <USBD_CtlError>
    return;
 8006900:	e012      	b.n	8006928 <USBD_GetDescriptor+0x134>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006902:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006906:	b153      	cbz	r3, 800691e <USBD_GetDescriptor+0x12a>
 8006908:	88e2      	ldrh	r2, [r4, #6]
 800690a:	b142      	cbz	r2, 800691e <USBD_GetDescriptor+0x12a>
  {

    len = MIN(len, req->wLength);
 800690c:	429a      	cmp	r2, r3
 800690e:	bf28      	it	cs
 8006910:	461a      	movcs	r2, r3
 8006912:	f8ad 2006 	strh.w	r2, [sp, #6]

    USBD_CtlSendData (pdev, pbuf, len);
 8006916:	4601      	mov	r1, r0
 8006918:	4628      	mov	r0, r5
 800691a:	f000 fa5d 	bl	8006dd8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800691e:	88e3      	ldrh	r3, [r4, #6]
 8006920:	b913      	cbnz	r3, 8006928 <USBD_GetDescriptor+0x134>
  {
   USBD_CtlSendStatus(pdev);
 8006922:	4628      	mov	r0, r5
 8006924:	f000 fa86 	bl	8006e34 <USBD_CtlSendStatus>
  }
}
 8006928:	b003      	add	sp, #12
 800692a:	bd30      	pop	{r4, r5, pc}

0800692c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4604      	mov	r4, r0
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006930:	888b      	ldrh	r3, [r1, #4]
 8006932:	b9f3      	cbnz	r3, 8006972 <USBD_SetAddress+0x46>
 8006934:	88cb      	ldrh	r3, [r1, #6]
 8006936:	b9e3      	cbnz	r3, 8006972 <USBD_SetAddress+0x46>
 8006938:	884b      	ldrh	r3, [r1, #2]
 800693a:	2b7f      	cmp	r3, #127	; 0x7f
 800693c:	d819      	bhi.n	8006972 <USBD_SetAddress+0x46>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800693e:	f003 057f 	and.w	r5, r3, #127	; 0x7f

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006942:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006946:	2b03      	cmp	r3, #3
 8006948:	d102      	bne.n	8006950 <USBD_SetAddress+0x24>
    {
      USBD_CtlError(pdev , req);
 800694a:	f7ff ff49 	bl	80067e0 <USBD_CtlError>
 800694e:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006950:	f880 5276 	strb.w	r5, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006954:	4629      	mov	r1, r5
 8006956:	f7fa ff45 	bl	80017e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fa6a 	bl	8006e34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006960:	b11d      	cbz	r5, 800696a <USBD_SetAddress+0x3e>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006962:	2302      	movs	r3, #2
 8006964:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8006968:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800696a:	2301      	movs	r3, #1
 800696c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8006970:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006972:	4620      	mov	r0, r4
 8006974:	f7ff ff34 	bl	80067e0 <USBD_CtlError>
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	bf00      	nop

0800697c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4604      	mov	r4, r0
 8006980:	460d      	mov	r5, r1
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006982:	7889      	ldrb	r1, [r1, #2]
 8006984:	4b28      	ldr	r3, [pc, #160]	; (8006a28 <USBD_SetConfig+0xac>)
 8006986:	7019      	strb	r1, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006988:	2901      	cmp	r1, #1
 800698a:	d903      	bls.n	8006994 <USBD_SetConfig+0x18>
  {
    USBD_CtlError(pdev, req);
 800698c:	4629      	mov	r1, r5
 800698e:	f7ff ff27 	bl	80067e0 <USBD_CtlError>
 8006992:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (pdev->dev_state)
 8006994:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006998:	2b02      	cmp	r3, #2
 800699a:	d002      	beq.n	80069a2 <USBD_SetConfig+0x26>
 800699c:	2b03      	cmp	r3, #3
 800699e:	d015      	beq.n	80069cc <USBD_SetConfig+0x50>
 80069a0:	e039      	b.n	8006a16 <USBD_SetConfig+0x9a>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80069a2:	b181      	cbz	r1, 80069c6 <USBD_SetConfig+0x4a>
      {
        pdev->dev_config = cfgidx;
 80069a4:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80069a6:	2303      	movs	r3, #3
 80069a8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069ac:	f7ff fda0 	bl	80064f0 <USBD_SetClassConfig>
 80069b0:	2802      	cmp	r0, #2
 80069b2:	d104      	bne.n	80069be <USBD_SetConfig+0x42>
        {
          USBD_CtlError(pdev, req);
 80069b4:	4629      	mov	r1, r5
 80069b6:	4620      	mov	r0, r4
 80069b8:	f7ff ff12 	bl	80067e0 <USBD_CtlError>
          return;
 80069bc:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 fa38 	bl	8006e34 <USBD_CtlSendStatus>
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 80069c6:	f000 fa35 	bl	8006e34 <USBD_CtlSendStatus>
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069cc:	b949      	cbnz	r1, 80069e2 <USBD_SetConfig+0x66>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ce:	2302      	movs	r3, #2
 80069d0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80069d4:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80069d6:	f7ff fd99 	bl	800650c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fa2a 	bl	8006e34 <USBD_CtlSendStatus>
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
      }
      else if (cfgidx != pdev->dev_config)
 80069e2:	6843      	ldr	r3, [r0, #4]
 80069e4:	4299      	cmp	r1, r3
 80069e6:	d013      	beq.n	8006a10 <USBD_SetConfig+0x94>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069e8:	b2d9      	uxtb	r1, r3
 80069ea:	f7ff fd8f 	bl	800650c <USBD_ClrClassConfig>

        /* set new configuration */
        pdev->dev_config = cfgidx;
 80069ee:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <USBD_SetConfig+0xac>)
 80069f0:	7819      	ldrb	r1, [r3, #0]
 80069f2:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069f4:	4620      	mov	r0, r4
 80069f6:	f7ff fd7b 	bl	80064f0 <USBD_SetClassConfig>
 80069fa:	2802      	cmp	r0, #2
 80069fc:	d104      	bne.n	8006a08 <USBD_SetConfig+0x8c>
        {
          USBD_CtlError(pdev, req);
 80069fe:	4629      	mov	r1, r5
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7ff feed 	bl	80067e0 <USBD_CtlError>
          return;
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fa13 	bl	8006e34 <USBD_CtlSendStatus>
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8006a10:	f000 fa10 	bl	8006e34 <USBD_CtlSendStatus>
 8006a14:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8006a16:	4629      	mov	r1, r5
 8006a18:	f7ff fee2 	bl	80067e0 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006a1c:	4b02      	ldr	r3, [pc, #8]	; (8006a28 <USBD_SetConfig+0xac>)
 8006a1e:	7819      	ldrb	r1, [r3, #0]
 8006a20:	4620      	mov	r0, r4
 8006a22:	f7ff fd73 	bl	800650c <USBD_ClrClassConfig>
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	20003858 	.word	0x20003858

08006a2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a2c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8006a2e:	88cb      	ldrh	r3, [r1, #6]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d002      	beq.n	8006a3a <USBD_GetConfig+0xe>
  {
    USBD_CtlError(pdev , req);
 8006a34:	f7ff fed4 	bl	80067e0 <USBD_CtlError>
 8006a38:	bd08      	pop	{r3, pc}
  }
  else
  {
    switch (pdev->dev_state)
 8006a3a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a3e:	b18b      	cbz	r3, 8006a64 <USBD_GetConfig+0x38>
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d902      	bls.n	8006a4a <USBD_GetConfig+0x1e>
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d008      	beq.n	8006a5a <USBD_GetConfig+0x2e>
 8006a48:	e00c      	b.n	8006a64 <USBD_GetConfig+0x38>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
      pdev->dev_default_config = 0U;
 8006a4a:	4601      	mov	r1, r0
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a52:	2201      	movs	r2, #1
 8006a54:	f000 f9c0 	bl	8006dd8 <USBD_CtlSendData>
      break;
 8006a58:	bd08      	pop	{r3, pc}

    case USBD_STATE_CONFIGURED:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	1d01      	adds	r1, r0, #4
 8006a5e:	f000 f9bb 	bl	8006dd8 <USBD_CtlSendData>
      break;
 8006a62:	bd08      	pop	{r3, pc}

    default:
      USBD_CtlError(pdev , req);
 8006a64:	f7ff febc 	bl	80067e0 <USBD_CtlError>
 8006a68:	bd08      	pop	{r3, pc}
 8006a6a:	bf00      	nop

08006a6c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a6c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006a6e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a72:	3b01      	subs	r3, #1
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d812      	bhi.n	8006a9e <USBD_GetStatus+0x32>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006a78:	88cb      	ldrh	r3, [r1, #6]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d002      	beq.n	8006a84 <USBD_GetStatus+0x18>
    {
      USBD_CtlError(pdev, req);
 8006a7e:	f7ff feaf 	bl	80067e0 <USBD_CtlError>
      break;
 8006a82:	bd08      	pop	{r3, pc}
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a84:	2301      	movs	r3, #1
 8006a86:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006a88:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8006a8c:	b10b      	cbz	r3, 8006a92 <USBD_GetStatus+0x26>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	60c3      	str	r3, [r0, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a92:	2202      	movs	r2, #2
 8006a94:	f100 010c 	add.w	r1, r0, #12
 8006a98:	f000 f99e 	bl	8006dd8 <USBD_CtlSendData>
    break;
 8006a9c:	bd08      	pop	{r3, pc}

  default :
    USBD_CtlError(pdev , req);
 8006a9e:	f7ff fe9f 	bl	80067e0 <USBD_CtlError>
 8006aa2:	bd08      	pop	{r3, pc}

08006aa4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006aa4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006aa6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d808      	bhi.n	8006ac2 <USBD_ClrFeature+0x1e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ab0:	884b      	ldrh	r3, [r1, #2]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d107      	bne.n	8006ac6 <USBD_ClrFeature+0x22>
    {
      pdev->dev_remote_wakeup = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006abc:	f000 f9ba 	bl	8006e34 <USBD_CtlSendStatus>
 8006ac0:	bd08      	pop	{r3, pc}
    }
    break;

  default :
     USBD_CtlError(pdev , req);
 8006ac2:	f7ff fe8d 	bl	80067e0 <USBD_CtlError>
 8006ac6:	bd08      	pop	{r3, pc}

08006ac8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006ac8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aca:	780b      	ldrb	r3, [r1, #0]
 8006acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d003      	beq.n	8006adc <USBD_StdDevReq+0x14>
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d001      	beq.n	8006adc <USBD_StdDevReq+0x14>
 8006ad8:	bb3b      	cbnz	r3, 8006b2a <USBD_StdDevReq+0x62>
 8006ada:	e004      	b.n	8006ae6 <USBD_StdDevReq+0x1e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006adc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	4798      	blx	r3
    break;
 8006ae4:	e023      	b.n	8006b2e <USBD_StdDevReq+0x66>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006ae6:	784b      	ldrb	r3, [r1, #1]
 8006ae8:	2b09      	cmp	r3, #9
 8006aea:	d81b      	bhi.n	8006b24 <USBD_StdDevReq+0x5c>
 8006aec:	e8df f003 	tbb	[pc, r3]
 8006af0:	141a1711 	.word	0x141a1711
 8006af4:	1a05081a 	.word	0x1a05081a
 8006af8:	0b0e      	.short	0x0b0e
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006afa:	f7ff fe7b 	bl	80067f4 <USBD_GetDescriptor>
      break;
 8006afe:	e016      	b.n	8006b2e <USBD_StdDevReq+0x66>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006b00:	f7ff ff14 	bl	800692c <USBD_SetAddress>
      break;
 8006b04:	e013      	b.n	8006b2e <USBD_StdDevReq+0x66>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006b06:	f7ff ff39 	bl	800697c <USBD_SetConfig>
      break;
 8006b0a:	e010      	b.n	8006b2e <USBD_StdDevReq+0x66>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006b0c:	f7ff ff8e 	bl	8006a2c <USBD_GetConfig>
      break;
 8006b10:	e00d      	b.n	8006b2e <USBD_StdDevReq+0x66>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006b12:	f7ff ffab 	bl	8006a6c <USBD_GetStatus>
      break;
 8006b16:	e00a      	b.n	8006b2e <USBD_StdDevReq+0x66>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006b18:	f7ff fe44 	bl	80067a4 <USBD_SetFeature>
      break;
 8006b1c:	e007      	b.n	8006b2e <USBD_StdDevReq+0x66>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006b1e:	f7ff ffc1 	bl	8006aa4 <USBD_ClrFeature>
      break;
 8006b22:	e004      	b.n	8006b2e <USBD_StdDevReq+0x66>

    default:
      USBD_CtlError(pdev, req);
 8006b24:	f7ff fe5c 	bl	80067e0 <USBD_CtlError>
      break;
 8006b28:	e001      	b.n	8006b2e <USBD_StdDevReq+0x66>
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8006b2a:	f7ff fe59 	bl	80067e0 <USBD_CtlError>
    break;
  }

  return ret;
}
 8006b2e:	2000      	movs	r0, #0
 8006b30:	bd08      	pop	{r3, pc}
 8006b32:	bf00      	nop

08006b34 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4605      	mov	r5, r0
 8006b38:	460c      	mov	r4, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b3a:	780b      	ldrb	r3, [r1, #0]
 8006b3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	d002      	beq.n	8006b4a <USBD_StdItfReq+0x16>
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	d000      	beq.n	8006b4a <USBD_StdItfReq+0x16>
 8006b48:	b9f3      	cbnz	r3, 8006b88 <USBD_StdItfReq+0x54>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006b4a:	f895 3274 	ldrb.w	r3, [r5, #628]	; 0x274
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d814      	bhi.n	8006b7e <USBD_StdItfReq+0x4a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b54:	7923      	ldrb	r3, [r4, #4]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d80c      	bhi.n	8006b74 <USBD_StdItfReq+0x40>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006b5a:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	4621      	mov	r1, r4
 8006b62:	4628      	mov	r0, r5
 8006b64:	4798      	blx	r3

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b66:	88e3      	ldrh	r3, [r4, #6]
 8006b68:	b983      	cbnz	r3, 8006b8c <USBD_StdItfReq+0x58>
 8006b6a:	b978      	cbnz	r0, 8006b8c <USBD_StdItfReq+0x58>
        {
          USBD_CtlSendStatus(pdev);
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f000 f961 	bl	8006e34 <USBD_CtlSendStatus>
 8006b72:	e00b      	b.n	8006b8c <USBD_StdItfReq+0x58>
        }
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006b74:	4621      	mov	r1, r4
 8006b76:	4628      	mov	r0, r5
 8006b78:	f7ff fe32 	bl	80067e0 <USBD_CtlError>
 8006b7c:	e006      	b.n	8006b8c <USBD_StdItfReq+0x58>
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f7ff fe2d 	bl	80067e0 <USBD_CtlError>
      break;
 8006b86:	e001      	b.n	8006b8c <USBD_StdItfReq+0x58>
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8006b88:	f7ff fe2a 	bl	80067e0 <USBD_CtlError>
    break;
  }

  return USBD_OK;
}
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}

08006b90 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4604      	mov	r4, r0

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006b94:	888a      	ldrh	r2, [r1, #4]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b96:	780b      	ldrb	r3, [r1, #0]
 8006b98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d006      	beq.n	8006bae <USBD_StdEPReq+0x1e>
 8006ba0:	b2d0      	uxtb	r0, r2
 8006ba2:	2b40      	cmp	r3, #64	; 0x40
 8006ba4:	d003      	beq.n	8006bae <USBD_StdEPReq+0x1e>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f040 80f3 	bne.w	8006d92 <USBD_StdEPReq+0x202>
 8006bac:	e006      	b.n	8006bbc <USBD_StdEPReq+0x2c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006bae:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	4798      	blx	r3
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006bb8:	2000      	movs	r0, #0
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
    break;
 8006bba:	bd38      	pop	{r3, r4, r5, pc}

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d105      	bne.n	8006bcc <USBD_StdEPReq+0x3c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006bc0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4798      	blx	r3

      return ret;
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
    }

    switch (req->bRequest)
 8006bcc:	784b      	ldrb	r3, [r1, #1]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d032      	beq.n	8006c38 <USBD_StdEPReq+0xa8>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d05e      	beq.n	8006c94 <USBD_StdEPReq+0x104>
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	f040 80d6 	bne.w	8006d88 <USBD_StdEPReq+0x1f8>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006bdc:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d002      	beq.n	8006bea <USBD_StdEPReq+0x5a>
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d012      	beq.n	8006c0e <USBD_StdEPReq+0x7e>
 8006be8:	e021      	b.n	8006c2e <USBD_StdEPReq+0x9e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bea:	b158      	cbz	r0, 8006c04 <USBD_StdEPReq+0x74>
 8006bec:	2880      	cmp	r0, #128	; 0x80
 8006bee:	d009      	beq.n	8006c04 <USBD_StdEPReq+0x74>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006bf0:	4601      	mov	r1, r0
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f7fa fde6 	bl	80017c4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006bf8:	2180      	movs	r1, #128	; 0x80
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f7fa fde2 	bl	80017c4 <USBD_LL_StallEP>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006c00:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
          USBD_CtlError(pdev, req);
 8006c04:	4620      	mov	r0, r4
 8006c06:	f7ff fdeb 	bl	80067e0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c0e:	884b      	ldrh	r3, [r1, #2]
 8006c10:	b943      	cbnz	r3, 8006c24 <USBD_StdEPReq+0x94>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c12:	b138      	cbz	r0, 8006c24 <USBD_StdEPReq+0x94>
 8006c14:	2880      	cmp	r0, #128	; 0x80
 8006c16:	d005      	beq.n	8006c24 <USBD_StdEPReq+0x94>
 8006c18:	88cb      	ldrh	r3, [r1, #6]
 8006c1a:	b91b      	cbnz	r3, 8006c24 <USBD_StdEPReq+0x94>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006c1c:	4601      	mov	r1, r0
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7fa fdd0 	bl	80017c4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 f905 	bl	8006e34 <USBD_CtlSendStatus>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006c2a:	2000      	movs	r0, #0
            USBD_LL_StallEP(pdev, ep_addr);
          }
        }
        USBD_CtlSendStatus(pdev);

        break;
 8006c2c:	bd38      	pop	{r3, r4, r5, pc}

      default:
        USBD_CtlError(pdev, req);
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f7ff fdd6 	bl	80067e0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006c34:	2000      	movs	r0, #0

        break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006c38:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d002      	beq.n	8006c46 <USBD_StdEPReq+0xb6>
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d012      	beq.n	8006c6a <USBD_StdEPReq+0xda>
 8006c44:	e021      	b.n	8006c8a <USBD_StdEPReq+0xfa>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c46:	b158      	cbz	r0, 8006c60 <USBD_StdEPReq+0xd0>
 8006c48:	2880      	cmp	r0, #128	; 0x80
 8006c4a:	d009      	beq.n	8006c60 <USBD_StdEPReq+0xd0>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006c4c:	4601      	mov	r1, r0
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f7fa fdb8 	bl	80017c4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006c54:	2180      	movs	r1, #128	; 0x80
 8006c56:	4620      	mov	r0, r4
 8006c58:	f7fa fdb4 	bl	80017c4 <USBD_LL_StallEP>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006c5c:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
          USBD_CtlError(pdev, req);
 8006c60:	4620      	mov	r0, r4
 8006c62:	f7ff fdbd 	bl	80067e0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006c66:	2000      	movs	r0, #0
 8006c68:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c6a:	884b      	ldrh	r3, [r1, #2]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f040 8095 	bne.w	8006d9c <USBD_StdEPReq+0x20c>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006c72:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8006c76:	d003      	beq.n	8006c80 <USBD_StdEPReq+0xf0>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c78:	4601      	mov	r1, r0
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7fa fdaa 	bl	80017d4 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 f8d7 	bl	8006e34 <USBD_CtlSendStatus>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006c86:	2000      	movs	r0, #0
 8006c88:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlSendStatus(pdev);
        }
        break;

      default:
        USBD_CtlError(pdev, req);
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f7ff fda8 	bl	80067e0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006c90:	2000      	movs	r0, #0
        }
        break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006c94:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d002      	beq.n	8006ca2 <USBD_StdEPReq+0x112>
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d025      	beq.n	8006cec <USBD_StdEPReq+0x15c>
 8006ca0:	e06d      	b.n	8006d7e <USBD_StdEPReq+0x1ee>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ca2:	b130      	cbz	r0, 8006cb2 <USBD_StdEPReq+0x122>
 8006ca4:	2880      	cmp	r0, #128	; 0x80
 8006ca6:	d004      	beq.n	8006cb2 <USBD_StdEPReq+0x122>
        {
          USBD_CtlError(pdev, req);
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7ff fd99 	bl	80067e0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006cae:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_CtlError(pdev, req);
          break;
 8006cb0:	bd38      	pop	{r3, r4, r5, pc}
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006cb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006cb6:	d009      	beq.n	8006ccc <USBD_StdEPReq+0x13c>
 8006cb8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006cbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cc0:	0083      	lsls	r3, r0, #2
 8006cc2:	f103 0110 	add.w	r1, r3, #16
 8006cc6:	4421      	add	r1, r4
 8006cc8:	3104      	adds	r1, #4
 8006cca:	e007      	b.n	8006cdc <USBD_StdEPReq+0x14c>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006ccc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_CtlError(pdev, req);
          break;
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006cd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cd4:	0083      	lsls	r3, r0, #2
 8006cd6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006cda:	18e1      	adds	r1, r4, r3
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;
 8006cdc:	2500      	movs	r5, #0
 8006cde:	600d      	str	r5, [r1, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 f878 	bl	8006dd8 <USBD_CtlSendData>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006ce8:	4628      	mov	r0, r5
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;
 8006cea:	bd38      	pop	{r3, r4, r5, pc}

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006cec:	b252      	sxtb	r2, r2
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	da0c      	bge.n	8006d0c <USBD_StdEPReq+0x17c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cf2:	f000 030f 	and.w	r3, r0, #15
 8006cf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006cfa:	009d      	lsls	r5, r3, #2
 8006cfc:	4425      	add	r5, r4
 8006cfe:	69ab      	ldr	r3, [r5, #24]
 8006d00:	b993      	cbnz	r3, 8006d28 <USBD_StdEPReq+0x198>
          {
            USBD_CtlError(pdev, req);
 8006d02:	4620      	mov	r0, r4
 8006d04:	f7ff fd6c 	bl	80067e0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006d08:	2000      	movs	r0, #0
        if((ep_addr & 0x80U) == 0x80U)
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
          {
            USBD_CtlError(pdev, req);
            break;
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d0c:	f000 030f 	and.w	r3, r0, #15
 8006d10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006d14:	009d      	lsls	r5, r3, #2
 8006d16:	4425      	add	r5, r4
 8006d18:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 8006d1c:	b923      	cbnz	r3, 8006d28 <USBD_StdEPReq+0x198>
          {
            USBD_CtlError(pdev, req);
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff fd5e 	bl	80067e0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006d24:	2000      	movs	r0, #0
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
          {
            USBD_CtlError(pdev, req);
            break;
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006d28:	2a00      	cmp	r2, #0
 8006d2a:	da09      	bge.n	8006d40 <USBD_StdEPReq+0x1b0>
 8006d2c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8006d30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006d34:	0093      	lsls	r3, r2, #2
 8006d36:	f103 0510 	add.w	r5, r3, #16
 8006d3a:	4425      	add	r5, r4
 8006d3c:	3504      	adds	r5, #4
 8006d3e:	e007      	b.n	8006d50 <USBD_StdEPReq+0x1c0>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006d40:	f000 027f 	and.w	r2, r0, #127	; 0x7f
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006d44:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006d48:	0093      	lsls	r3, r2, #2
 8006d4a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006d4e:	18e5      	adds	r5, r4, r3
          &pdev->ep_out[ep_addr & 0x7FU];

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d50:	b108      	cbz	r0, 8006d56 <USBD_StdEPReq+0x1c6>
 8006d52:	2880      	cmp	r0, #128	; 0x80
 8006d54:	d102      	bne.n	8006d5c <USBD_StdEPReq+0x1cc>
          {
            pep->status = 0x0000U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	e009      	b.n	8006d70 <USBD_StdEPReq+0x1e0>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006d5c:	4601      	mov	r1, r0
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7fa fcec 	bl	800173c <USBD_LL_IsStallEP>
 8006d64:	b110      	cbz	r0, 8006d6c <USBD_StdEPReq+0x1dc>
          {
            pep->status = 0x0001U;
 8006d66:	2301      	movs	r3, #1
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	e001      	b.n	8006d70 <USBD_StdEPReq+0x1e0>
          }
          else
          {
            pep->status = 0x0000U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	602b      	str	r3, [r5, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d70:	2202      	movs	r2, #2
 8006d72:	4629      	mov	r1, r5
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 f82f 	bl	8006dd8 <USBD_CtlSendData>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006d7a:	2000      	movs	r0, #0
          {
            pep->status = 0x0000U;
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;
 8006d7c:	bd38      	pop	{r3, r4, r5, pc}

      default:
        USBD_CtlError(pdev, req);
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff fd2e 	bl	80067e0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006d84:	2000      	movs	r0, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f7ff fd29 	bl	80067e0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006d8e:	2000      	movs	r0, #0
      }
      break;

    default:
      USBD_CtlError(pdev, req);
      break;
 8006d90:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8006d92:	4620      	mov	r0, r4
 8006d94:	f7ff fd24 	bl	80067e0 <USBD_CtlError>
    break;
  }

  return ret;
 8006d98:	2000      	movs	r0, #0
    }
    break;

  default:
    USBD_CtlError(pdev, req);
    break;
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
  }

  return ret;
 8006d9c:	2000      	movs	r0, #0
}
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}

08006da0 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8006da0:	b1c8      	cbz	r0, 8006dd6 <USBD_GetString+0x36>
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006da2:	b570      	push	{r4, r5, r6, lr}
 8006da4:	460d      	mov	r5, r1
 8006da6:	4616      	mov	r6, r2
 8006da8:	4604      	mov	r4, r0
  uint8_t idx = 0U;

  if (desc != NULL)
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006daa:	f7ff fcf1 	bl	8006790 <USBD_GetLen>
 8006dae:	3001      	adds	r0, #1
 8006db0:	0040      	lsls	r0, r0, #1
 8006db2:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006db4:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006db6:	2303      	movs	r3, #3
 8006db8:	706b      	strb	r3, [r5, #1]
 8006dba:	2302      	movs	r3, #2

    while (*desc != '\0')
 8006dbc:	e007      	b.n	8006dce <USBD_GetString+0x2e>
    {
      unicode[idx++] = *desc++;
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	3401      	adds	r4, #1
 8006dc4:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2100      	movs	r1, #0
 8006dcc:	54a9      	strb	r1, [r5, r2]
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
    unicode[idx++] = *(uint8_t *)(void *)len;
    unicode[idx++] = USB_DESC_TYPE_STRING;

    while (*desc != '\0')
 8006dce:	7821      	ldrb	r1, [r4, #0]
 8006dd0:	2900      	cmp	r1, #0
 8006dd2:	d1f4      	bne.n	8006dbe <USBD_GetString+0x1e>
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	4770      	bx	lr

08006dd8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ddc:	2202      	movs	r2, #2
 8006dde:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006de2:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8006de4:	6203      	str	r3, [r0, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006de6:	460a      	mov	r2, r1
 8006de8:	2100      	movs	r1, #0
 8006dea:	f7fa fd03 	bl	80017f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006dee:	2000      	movs	r0, #0
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	bf00      	nop

08006df4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006df4:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006df6:	4613      	mov	r3, r2
 8006df8:	460a      	mov	r2, r1
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	f7fa fcfa 	bl	80017f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006e00:	2000      	movs	r0, #0
 8006e02:	bd08      	pop	{r3, pc}

08006e04 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006e04:	b510      	push	{r4, lr}
 8006e06:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e08:	2203      	movs	r2, #3
 8006e0a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006e0e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006e12:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006e16:	460a      	mov	r2, r1
 8006e18:	2100      	movs	r1, #0
 8006e1a:	f7fa fcf3 	bl	8001804 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006e1e:	2000      	movs	r0, #0
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	bf00      	nop

08006e24 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006e24:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e26:	4613      	mov	r3, r2
 8006e28:	460a      	mov	r2, r1
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	f7fa fcea 	bl	8001804 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006e30:	2000      	movs	r0, #0
 8006e32:	bd08      	pop	{r3, pc}

08006e34 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006e34:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e36:	2304      	movs	r3, #4
 8006e38:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	f7fa fcd7 	bl	80017f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006e46:	2000      	movs	r0, #0
 8006e48:	bd08      	pop	{r3, pc}
 8006e4a:	bf00      	nop

08006e4c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006e4c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e4e:	2305      	movs	r3, #5
 8006e50:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006e54:	2300      	movs	r3, #0
 8006e56:	461a      	mov	r2, r3
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f7fa fcd3 	bl	8001804 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006e5e:	2000      	movs	r0, #0
 8006e60:	bd08      	pop	{r3, pc}
 8006e62:	bf00      	nop

08006e64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006e64:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e66:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e6a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006e6e:	b15b      	cbz	r3, 8006e88 <USBD_CDC_EP0_RxReady+0x24>
 8006e70:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006e74:	28ff      	cmp	r0, #255	; 0xff
 8006e76:	d007      	beq.n	8006e88 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8006e7e:	4621      	mov	r1, r4
 8006e80:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8006e82:	23ff      	movs	r3, #255	; 0xff
 8006e84:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8006e88:	2000      	movs	r0, #0
 8006e8a:	bd10      	pop	{r4, pc}

08006e8c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006e8c:	2343      	movs	r3, #67	; 0x43
 8006e8e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8006e90:	4800      	ldr	r0, [pc, #0]	; (8006e94 <USBD_CDC_GetFSCfgDesc+0x8>)
 8006e92:	4770      	bx	lr
 8006e94:	20000074 	.word	0x20000074

08006e98 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006e98:	2343      	movs	r3, #67	; 0x43
 8006e9a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8006e9c:	4800      	ldr	r0, [pc, #0]	; (8006ea0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8006e9e:	4770      	bx	lr
 8006ea0:	20000140 	.word	0x20000140

08006ea4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006ea4:	2343      	movs	r3, #67	; 0x43
 8006ea6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006ea8:	4800      	ldr	r0, [pc, #0]	; (8006eac <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006eaa:	4770      	bx	lr
 8006eac:	200000fc 	.word	0x200000fc

08006eb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006eb0:	230a      	movs	r3, #10
 8006eb2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8006eb4:	4800      	ldr	r0, [pc, #0]	; (8006eb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006eb6:	4770      	bx	lr
 8006eb8:	200000f0 	.word	0x200000f0

08006ebc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ec0:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006ec4:	f7fa fc52 	bl	800176c <USBD_LL_GetRxDataSize>
 8006ec8:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006ecc:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8006ed0:	b14b      	cbz	r3, 8006ee6 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ed2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8006edc:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006ee0:	4798      	blx	r3

    return USBD_OK;
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8006ee6:	2002      	movs	r0, #2
  }
}
 8006ee8:	bd38      	pop	{r3, r4, r5, pc}
 8006eea:	bf00      	nop

08006eec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eec:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006eee:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ef2:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298

  if(pdev->pClassData != NULL)
 8006ef6:	b1fa      	cbz	r2, 8006f38 <USBD_CDC_DataIn+0x4c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ef8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8006efc:	00a3      	lsls	r3, r4, #2
 8006efe:	4403      	add	r3, r0
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	b1ab      	cbz	r3, 8006f30 <USBD_CDC_DataIn+0x44>
 8006f04:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8006f08:	00b4      	lsls	r4, r6, #2
 8006f0a:	442c      	add	r4, r5
 8006f0c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8006f0e:	fbb3 f4f5 	udiv	r4, r3, r5
 8006f12:	fb05 3314 	mls	r3, r5, r4, r3
 8006f16:	b95b      	cbnz	r3, 8006f30 <USBD_CDC_DataIn+0x44>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f18:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8006f1c:	0093      	lsls	r3, r2, #2
 8006f1e:	4403      	add	r3, r0
 8006f20:	2400      	movs	r4, #0
 8006f22:	61dc      	str	r4, [r3, #28]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006f24:	4623      	mov	r3, r4
 8006f26:	4622      	mov	r2, r4
 8006f28:	f7fa fc64 	bl	80017f4 <USBD_LL_Transmit>
    }
    else
    {
      hcdc->TxState = 0U;
    }
    return USBD_OK;
 8006f2c:	4620      	mov	r0, r4
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
      hcdc->TxState = 0U;
 8006f30:	2000      	movs	r0, #0
 8006f32:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8006f38:	2002      	movs	r0, #2
  }
}
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}

08006f3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	4605      	mov	r5, r0
 8006f42:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f44:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8006f4e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f52:	780b      	ldrb	r3, [r1, #0]
 8006f54:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8006f58:	d027      	beq.n	8006faa <USBD_CDC_Setup+0x6e>
 8006f5a:	2a20      	cmp	r2, #32
 8006f5c:	d154      	bne.n	8007008 <USBD_CDC_Setup+0xcc>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006f5e:	88ca      	ldrh	r2, [r1, #6]
 8006f60:	b1da      	cbz	r2, 8006f9a <USBD_CDC_Setup+0x5e>
    {
      if (req->bmRequest & 0x80U)
 8006f62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f66:	d00c      	beq.n	8006f82 <USBD_CDC_Setup+0x46>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f68:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	4631      	mov	r1, r6
 8006f70:	7860      	ldrb	r0, [r4, #1]
 8006f72:	4798      	blx	r3
                                                          (uint8_t *)(void *)hcdc->data,
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f74:	88e2      	ldrh	r2, [r4, #6]
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f7ff ff2d 	bl	8006dd8 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006f7e:	2000      	movs	r0, #0
 8006f80:	e047      	b.n	8007012 <USBD_CDC_Setup+0xd6>

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8006f82:	784b      	ldrb	r3, [r1, #1]
 8006f84:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006f88:	798b      	ldrb	r3, [r1, #6]
 8006f8a:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201

        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f8e:	88ca      	ldrh	r2, [r1, #6]
 8006f90:	4631      	mov	r1, r6
 8006f92:	f7ff ff37 	bl	8006e04 <USBD_CtlPrepareRx>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006f96:	2000      	movs	r0, #0
 8006f98:	e03b      	b.n	8007012 <USBD_CDC_Setup+0xd6>
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f9a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	7848      	ldrb	r0, [r1, #1]
 8006fa4:	4798      	blx	r3
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e033      	b.n	8007012 <USBD_CDC_Setup+0xd6>
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006faa:	784b      	ldrb	r3, [r1, #1]
 8006fac:	2b0a      	cmp	r3, #10
 8006fae:	d010      	beq.n	8006fd2 <USBD_CDC_Setup+0x96>
 8006fb0:	2b0b      	cmp	r3, #11
 8006fb2:	d01d      	beq.n	8006ff0 <USBD_CDC_Setup+0xb4>
 8006fb4:	bb23      	cbnz	r3, 8007000 <USBD_CDC_Setup+0xc4>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d105      	bne.n	8006fca <USBD_CDC_Setup+0x8e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	a901      	add	r1, sp, #4
 8006fc2:	f7ff ff09 	bl	8006dd8 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e023      	b.n	8007012 <USBD_CDC_Setup+0xd6>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 8006fca:	f7ff fc09 	bl	80067e0 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006fce:	2002      	movs	r0, #2
 8006fd0:	e01f      	b.n	8007012 <USBD_CDC_Setup+0xd6>
      }
      break;

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d106      	bne.n	8006fe8 <USBD_CDC_Setup+0xac>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f10d 0107 	add.w	r1, sp, #7
 8006fe0:	f7ff fefa 	bl	8006dd8 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e014      	b.n	8007012 <USBD_CDC_Setup+0xd6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 8006fe8:	f7ff fbfa 	bl	80067e0 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006fec:	2002      	movs	r0, #2
 8006fee:	e010      	b.n	8007012 <USBD_CDC_Setup+0xd6>
      }
      break;

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ff0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d00b      	beq.n	8007010 <USBD_CDC_Setup+0xd4>
      {
        USBD_CtlError (pdev, req);
 8006ff8:	f7ff fbf2 	bl	80067e0 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006ffc:	2002      	movs	r0, #2
 8006ffe:	e008      	b.n	8007012 <USBD_CDC_Setup+0xd6>
      }
      break;

    default:
      USBD_CtlError (pdev, req);
 8007000:	f7ff fbee 	bl	80067e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007004:	2002      	movs	r0, #2
      break;
 8007006:	e004      	b.n	8007012 <USBD_CDC_Setup+0xd6>
    }
    break;

  default:
    USBD_CtlError (pdev, req);
 8007008:	f7ff fbea 	bl	80067e0 <USBD_CtlError>
    ret = USBD_FAIL;
 800700c:	2002      	movs	r0, #2
    break;
 800700e:	e000      	b.n	8007012 <USBD_CDC_Setup+0xd6>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8007010:	2000      	movs	r0, #0
    ret = USBD_FAIL;
    break;
  }

  return ret;
}
 8007012:	b002      	add	sp, #8
 8007014:	bd70      	pop	{r4, r5, r6, pc}
 8007016:	bf00      	nop

08007018 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4604      	mov	r4, r0
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800701c:	2181      	movs	r1, #129	; 0x81
 800701e:	f7fa fbc9 	bl	80017b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007022:	2500      	movs	r5, #0
 8007024:	62e5      	str	r5, [r4, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007026:	2101      	movs	r1, #1
 8007028:	4620      	mov	r0, r4
 800702a:	f7fa fbc3 	bl	80017b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800702e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007032:	2182      	movs	r1, #130	; 0x82
 8007034:	4620      	mov	r0, r4
 8007036:	f7fa fbbd 	bl	80017b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800703a:	6425      	str	r5, [r4, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800703c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8007040:	b14b      	cbz	r3, 8007056 <USBD_CDC_DeInit+0x3e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007042:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800704a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800704e:	f001 f931 	bl	80082b4 <free>
    pdev->pClassData = NULL;
 8007052:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
  }

  return ret;
}
 8007056:	2000      	movs	r0, #0
 8007058:	bd38      	pop	{r3, r4, r5, pc}
 800705a:	bf00      	nop

0800705c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4604      	mov	r4, r0
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007060:	7c03      	ldrb	r3, [r0, #16]
 8007062:	b98b      	cbnz	r3, 8007088 <USBD_CDC_Init+0x2c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007068:	2202      	movs	r2, #2
 800706a:	2181      	movs	r1, #129	; 0x81
 800706c:	f7fa fb96 	bl	800179c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007070:	2501      	movs	r5, #1
 8007072:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007078:	2202      	movs	r2, #2
 800707a:	4629      	mov	r1, r5
 800707c:	4620      	mov	r0, r4
 800707e:	f7fa fb8d 	bl	800179c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007082:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8007086:	e00e      	b.n	80070a6 <USBD_CDC_Init+0x4a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007088:	2340      	movs	r3, #64	; 0x40
 800708a:	2202      	movs	r2, #2
 800708c:	2181      	movs	r1, #129	; 0x81
 800708e:	f7fa fb85 	bl	800179c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007092:	2501      	movs	r5, #1
 8007094:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007096:	2340      	movs	r3, #64	; 0x40
 8007098:	2202      	movs	r2, #2
 800709a:	4629      	mov	r1, r5
 800709c:	4620      	mov	r0, r4
 800709e:	f7fa fb7d 	bl	800179c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070a2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070a6:	2308      	movs	r3, #8
 80070a8:	2203      	movs	r2, #3
 80070aa:	2182      	movs	r1, #130	; 0x82
 80070ac:	4620      	mov	r0, r4
 80070ae:	f7fa fb75 	bl	800179c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80070b2:	2301      	movs	r3, #1
 80070b4:	6423      	str	r3, [r4, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80070b6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070ba:	f001 f8f3 	bl	80082a4 <malloc>
 80070be:	4605      	mov	r5, r0
 80070c0:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80070c4:	b1e8      	cbz	r0, 8007102 <USBD_CDC_Init+0xa6>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80070c6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80070d4:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80070d8:	7c23      	ldrb	r3, [r4, #16]
 80070da:	b94b      	cbnz	r3, 80070f0 <USBD_CDC_Init+0x94>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070e0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80070e4:	2101      	movs	r1, #1
 80070e6:	4620      	mov	r0, r4
 80070e8:	f7fa fb8c 	bl	8001804 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 80070ec:	2000      	movs	r0, #0
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80070f6:	2101      	movs	r1, #1
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7fa fb83 	bl	8001804 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 80070fe:	2000      	movs	r0, #0
 8007100:	bd38      	pop	{r3, r4, r5, pc}

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));

  if(pdev->pClassData == NULL)
  {
    ret = 1U;
 8007102:	2001      	movs	r0, #1
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
}
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop

08007108 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8007108:	b119      	cbz	r1, 8007112 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800710a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 800710e:	2000      	movs	r0, #0
 8007110:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8007112:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;
  }

  return ret;
}
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop

08007118 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007118:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
 800711c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007120:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8007124:	2000      	movs	r0, #0
 8007126:	4770      	bx	lr

08007128 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007128:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->RxBuffer = pbuff;
 800712c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8007130:	2000      	movs	r0, #0
 8007132:	4770      	bx	lr

08007134 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007134:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 8007138:	b192      	cbz	r2, 8007160 <USBD_CDC_TransmitPacket+0x2c>
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800713a:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0U)
 800713c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8007140:	b983      	cbnz	r3, 8007164 <USBD_CDC_TransmitPacket+0x30>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007142:	2301      	movs	r3, #1
 8007144:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007148:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800714c:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800714e:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8007152:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8007156:	2181      	movs	r1, #129	; 0x81
 8007158:	f7fa fb4c 	bl	80017f4 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800715c:	2000      	movs	r0, #0
 800715e:	bd08      	pop	{r3, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8007160:	2002      	movs	r0, #2
  }
}
 8007162:	4770      	bx	lr

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8007164:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8007166:	bd08      	pop	{r3, pc}

08007168 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007168:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800716c:	b19a      	cbz	r2, 8007196 <USBD_CDC_ReceivePacket+0x2e>
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800716e:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007170:	7c03      	ldrb	r3, [r0, #16]
 8007172:	b943      	cbnz	r3, 8007186 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007178:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800717c:	2101      	movs	r1, #1
 800717e:	f7fa fb41 	bl	8001804 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007182:	2000      	movs	r0, #0
 8007184:	bd08      	pop	{r3, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007186:	2340      	movs	r3, #64	; 0x40
 8007188:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800718c:	2101      	movs	r1, #1
 800718e:	f7fa fb39 	bl	8001804 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007192:	2000      	movs	r0, #0
 8007194:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USBD_FAIL;
 8007196:	2002      	movs	r0, #2
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop

0800719c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800719c:	2800      	cmp	r0, #0
 800719e:	d03c      	beq.n	800721a <HAL_SPI_Init+0x7e>
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071a0:	b510      	push	{r4, lr}
 80071a2:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071a8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80071ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80071b0:	d104      	bne.n	80071bc <HAL_SPI_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071b2:	2300      	movs	r3, #0
 80071b4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071b8:	f7fa fc52 	bl	8001a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071bc:	2302      	movs	r3, #2
 80071be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	6813      	ldr	r3, [r2, #0]
 80071c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ca:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80071cc:	6821      	ldr	r1, [r4, #0]
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	68a3      	ldr	r3, [r4, #8]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	68e3      	ldr	r3, [r4, #12]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	6923      	ldr	r3, [r4, #16]
 80071da:	431a      	orrs	r2, r3
 80071dc:	6963      	ldr	r3, [r4, #20]
 80071de:	431a      	orrs	r2, r3
 80071e0:	69a3      	ldr	r3, [r4, #24]
 80071e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071e6:	4313      	orrs	r3, r2
 80071e8:	69e2      	ldr	r2, [r4, #28]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	6a22      	ldr	r2, [r4, #32]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80071f2:	431a      	orrs	r2, r3
 80071f4:	600a      	str	r2, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80071f6:	6821      	ldr	r1, [r4, #0]
 80071f8:	8b63      	ldrh	r3, [r4, #26]
 80071fa:	f003 0204 	and.w	r2, r3, #4
 80071fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007200:	4313      	orrs	r3, r2
 8007202:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007204:	6822      	ldr	r2, [r4, #0]
 8007206:	69d3      	ldr	r3, [r2, #28]
 8007208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800720c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800720e:	2000      	movs	r0, #0
 8007210:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007212:	2301      	movs	r3, #1
 8007214:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8007218:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 800721a:	2001      	movs	r0, #1
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop

08007220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007220:	b510      	push	{r4, lr}
 8007222:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0); 
 8007224:	2200      	movs	r2, #0
 8007226:	4601      	mov	r1, r0
 8007228:	201a      	movs	r0, #26
 800722a:	f7fc fe15 	bl	8003e58 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); 
 800722e:	201a      	movs	r0, #26
 8007230:	f7fc fe44 	bl	8003ebc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8007234:	2400      	movs	r4, #0
 8007236:	9401      	str	r4, [sp, #4]
 8007238:	4b13      	ldr	r3, [pc, #76]	; (8007288 <HAL_InitTick+0x68>)
 800723a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800723c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007240:	645a      	str	r2, [r3, #68]	; 0x44
 8007242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800724c:	a902      	add	r1, sp, #8
 800724e:	a803      	add	r0, sp, #12
 8007250:	f7fc fb3c 	bl	80038cc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007254:	f7fc fb2a 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <HAL_InitTick+0x6c>)
 800725a:	fba3 2300 	umull	r2, r3, r3, r0
 800725e:	0c9b      	lsrs	r3, r3, #18
 8007260:	3b01      	subs	r3, #1
  
  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8007262:	480b      	ldr	r0, [pc, #44]	; (8007290 <HAL_InitTick+0x70>)
 8007264:	4a0b      	ldr	r2, [pc, #44]	; (8007294 <HAL_InitTick+0x74>)
 8007266:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 8007268:	f240 32e7 	movw	r2, #999	; 0x3e7
 800726c:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800726e:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8007270:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007272:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8007274:	f7fc ff82 	bl	800417c <HAL_TIM_Base_Init>
 8007278:	b918      	cbnz	r0, 8007282 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 800727a:	4805      	ldr	r0, [pc, #20]	; (8007290 <HAL_InitTick+0x70>)
 800727c:	f7fc ff1c 	bl	80040b8 <HAL_TIM_Base_Start_IT>
 8007280:	e000      	b.n	8007284 <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007282:	2001      	movs	r0, #1
}
 8007284:	b008      	add	sp, #32
 8007286:	bd10      	pop	{r4, pc}
 8007288:	40023800 	.word	0x40023800
 800728c:	431bde83 	.word	0x431bde83
 8007290:	20006dac 	.word	0x20006dac
 8007294:	40014800 	.word	0x40014800

08007298 <InitRW>:
transceiver_handle_t OpenUsbHostConnection();

/////////////////////////////////////////////////////////////////////////////
// Defs
void InitRW()
{
 8007298:	b508      	push	{r3, lr}
    gHostConnection = OpenUsbHostConnection();
 800729a:	f000 ff37 	bl	800810c <OpenUsbHostConnection>
 800729e:	4b01      	ldr	r3, [pc, #4]	; (80072a4 <InitRW+0xc>)
 80072a0:	6018      	str	r0, [r3, #0]
 80072a2:	bd08      	pop	{r3, pc}
 80072a4:	20006dec 	.word	0x20006dec

080072a8 <InitHW>:
    //! @todo. Implement VBUS detection
    return false;
}

void InitHW()
{
 80072a8:	b508      	push	{r3, lr}
    MX_USB_DEVICE_Init();
 80072aa:	f7fa f933 	bl	8001514 <MX_USB_DEVICE_Init>
    HW_TIMER_INIT();
 80072ae:	f000 fb4f 	bl	8007950 <HW_TIMER_INIT>
 80072b2:	bd08      	pop	{r3, pc}

080072b4 <ring_buffer_init>:
#include "uassert.h"
#include <stdlib.h>

void ring_buffer_init( ring_buffer_t* s, void* buff, size_t buffSz )
{
    s->buff = buff;
 80072b4:	6001      	str	r1, [r0, #0]
    s->cap  = buffSz;
 80072b6:	6042      	str	r2, [r0, #4]
    s->head = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	6083      	str	r3, [r0, #8]
    s->tail = 0;
 80072bc:	60c3      	str	r3, [r0, #12]
 80072be:	4770      	bx	lr

080072c0 <ring_buffer_write>:
}

void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
 80072c0:	b470      	push	{r4, r5, r6}
 80072c2:	b083      	sub	sp, #12
    const size_t nxt[2] = { -1, s->cap - 1 };
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	6843      	ldr	r3, [r0, #4]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	9301      	str	r3, [sp, #4]
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 80072d0:	2500      	movs	r5, #0
 80072d2:	e012      	b.n	80072fa <ring_buffer_write+0x3a>
        s->buff[s->head] = ( (char const*)d )[i];
 80072d4:	6804      	ldr	r4, [r0, #0]
 80072d6:	6883      	ldr	r3, [r0, #8]
 80072d8:	5d4e      	ldrb	r6, [r1, r5]
 80072da:	54e6      	strb	r6, [r4, r3]
void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 80072dc:	3501      	adds	r5, #1
 80072de:	6884      	ldr	r4, [r0, #8]
 80072e0:	6843      	ldr	r3, [r0, #4]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	429c      	cmp	r4, r3
 80072e6:	bf14      	ite	ne
 80072e8:	2300      	movne	r3, #0
 80072ea:	2301      	moveq	r3, #1
 80072ec:	ae02      	add	r6, sp, #8
 80072ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072f2:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80072f6:	1ae4      	subs	r4, r4, r3
 80072f8:	6084      	str	r4, [r0, #8]
 80072fa:	4295      	cmp	r5, r2
 80072fc:	d3ea      	bcc.n	80072d4 <ring_buffer_write+0x14>
        s->buff[s->head] = ( (char const*)d )[i];
    }
}
 80072fe:	b003      	add	sp, #12
 8007300:	bc70      	pop	{r4, r5, r6}
 8007302:	4770      	bx	lr

08007304 <ring_buffer_consume>:

void ring_buffer_consume( ring_buffer_t* s, size_t len )
{
    s->tail += len;
 8007304:	68c3      	ldr	r3, [r0, #12]
 8007306:	4419      	add	r1, r3
 8007308:	60c1      	str	r1, [r0, #12]

    if ( s->tail >= s->cap ) {
 800730a:	6843      	ldr	r3, [r0, #4]
 800730c:	4299      	cmp	r1, r3
 800730e:	d301      	bcc.n	8007314 <ring_buffer_consume+0x10>
        s->tail = s->tail - s->cap;
 8007310:	1ac9      	subs	r1, r1, r3
 8007312:	60c1      	str	r1, [r0, #12]
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop

08007318 <ring_buffer_peek>:
    }
}

void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
 8007318:	b530      	push	{r4, r5, lr}
 800731a:	b083      	sub	sp, #12
    const size_t nxt[2] = { -1, s->cap - 1 };
 800731c:	f04f 33ff 	mov.w	r3, #4294967295
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	6843      	ldr	r3, [r0, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	9301      	str	r3, [sp, #4]
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8007328:	68c5      	ldr	r5, [r0, #12]
 800732a:	2400      	movs	r4, #0
 800732c:	e010      	b.n	8007350 <ring_buffer_peek+0x38>
        ( (char*)b )[i] = s->buff[t];
 800732e:	6803      	ldr	r3, [r0, #0]
 8007330:	5d5b      	ldrb	r3, [r3, r5]
 8007332:	550b      	strb	r3, [r1, r4]
void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8007334:	3401      	adds	r4, #1
 8007336:	6843      	ldr	r3, [r0, #4]
 8007338:	3b01      	subs	r3, #1
 800733a:	429d      	cmp	r5, r3
 800733c:	bf14      	ite	ne
 800733e:	2300      	movne	r3, #0
 8007340:	2301      	moveq	r3, #1
 8007342:	f10d 0e08 	add.w	lr, sp, #8
 8007346:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 800734a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800734e:	1aed      	subs	r5, r5, r3
 8007350:	4294      	cmp	r4, r2
 8007352:	d3ec      	bcc.n	800732e <ring_buffer_peek+0x16>
        ( (char*)b )[i] = s->buff[t];
    }
}
 8007354:	b003      	add	sp, #12
 8007356:	bd30      	pop	{r4, r5, pc}

08007358 <ring_buffer_size>:

size_t ring_buffer_size( ring_buffer_t const* s )
{
    if ( s->head >= s->tail )
 8007358:	6883      	ldr	r3, [r0, #8]
 800735a:	68c2      	ldr	r2, [r0, #12]
 800735c:	4293      	cmp	r3, r2
 800735e:	d301      	bcc.n	8007364 <ring_buffer_size+0xc>
        return s->head - s->tail;
 8007360:	1a98      	subs	r0, r3, r2
 8007362:	4770      	bx	lr
    else
        return s->cap - s->tail + s->head;
 8007364:	6840      	ldr	r0, [r0, #4]
 8007366:	1a80      	subs	r0, r0, r2
 8007368:	4418      	add	r0, r3
}
 800736a:	4770      	bx	lr

0800736c <StartDefaultTask>:
// - Launches host communication process
// - Launches command queue/procedure process
// - Initializes hi-precision hardware timer
// - Initializes motor control logic
extern "C" void StartDefaultTask( void* nouse_ )
{
 800736c:	b508      	push	{r3, lr}
    InitHW();
 800736e:	f7ff ff9b 	bl	80072a8 <InitHW>
    InitRW();
 8007372:	f7ff ff91 	bl	8007298 <InitRW>

    // launch hw timer manager
    //! @todo. implement this
    
    // this function never returns.
    AppProc_HostIO( NULL );
 8007376:	2000      	movs	r0, #0
 8007378:	f000 f8ba 	bl	80074f0 <AppProc_HostIO>

0800737c <_ZL14stringToTokensPcPS_j>:
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
    // Consume all initial spaces
    while ( *str == ' ' )
 800737c:	7803      	ldrb	r3, [r0, #0]
 800737e:	2b20      	cmp	r3, #32
 8007380:	d101      	bne.n	8007386 <_ZL14stringToTokensPcPS_j+0xa>
        ++str;
 8007382:	3001      	adds	r0, #1
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
    // Consume all initial spaces
    while ( *str == ' ' )
 8007384:	e7fa      	b.n	800737c <_ZL14stringToTokensPcPS_j>
        ++str;

    // Ignore space-only string.
    if ( *str == 0 )
 8007386:	b1eb      	cbz	r3, 80073c4 <_ZL14stringToTokensPcPS_j+0x48>

    putstr( "warning: failed to process binary data\n" );
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
 8007388:	b470      	push	{r4, r5, r6}
 800738a:	4603      	mov	r3, r0
 800738c:	2400      	movs	r4, #0
 800738e:	e001      	b.n	8007394 <_ZL14stringToTokensPcPS_j+0x18>

        argv[num_token++] = str;
        if ( *head == 0 )
            break;

        for ( *head = 0; *++head == ' '; ) { }
 8007390:	4603      	mov	r3, r0
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 8007392:	4634      	mov	r4, r6
        return 0;

    int   num_token = 0;
    char* head      = str;

    for ( ; num_token < (int)argv_len; ) {
 8007394:	4294      	cmp	r4, r2
 8007396:	da17      	bge.n	80073c8 <_ZL14stringToTokensPcPS_j+0x4c>
        if ( *head != ' ' && *head != '\0' ) {
 8007398:	781d      	ldrb	r5, [r3, #0]
 800739a:	2d20      	cmp	r5, #32
 800739c:	d002      	beq.n	80073a4 <_ZL14stringToTokensPcPS_j+0x28>
 800739e:	b10d      	cbz	r5, 80073a4 <_ZL14stringToTokensPcPS_j+0x28>
            ++head;
 80073a0:	3301      	adds	r3, #1
            continue;
 80073a2:	e7f7      	b.n	8007394 <_ZL14stringToTokensPcPS_j+0x18>
        }

        argv[num_token++] = str;
 80073a4:	1c66      	adds	r6, r4, #1
 80073a6:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
        if ( *head == 0 )
 80073aa:	781d      	ldrb	r5, [r3, #0]
 80073ac:	b175      	cbz	r5, 80073cc <_ZL14stringToTokensPcPS_j+0x50>
            break;

        for ( *head = 0; *++head == ' '; ) { }
 80073ae:	2000      	movs	r0, #0
 80073b0:	7018      	strb	r0, [r3, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d0fb      	beq.n	80073b4 <_ZL14stringToTokensPcPS_j+0x38>

        if ( *head == 0 )
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e7      	bne.n	8007390 <_ZL14stringToTokensPcPS_j+0x14>
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 80073c0:	4630      	mov	r0, r6
 80073c2:	e004      	b.n	80073ce <_ZL14stringToTokensPcPS_j+0x52>
    while ( *str == ' ' )
        ++str;

    // Ignore space-only string.
    if ( *str == 0 )
        return 0;
 80073c4:	2000      	movs	r0, #0

        str = head; // Non-space character pos
    }

    return num_token;
}
 80073c6:	4770      	bx	lr
 80073c8:	4620      	mov	r0, r4
 80073ca:	e000      	b.n	80073ce <_ZL14stringToTokensPcPS_j+0x52>
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 80073cc:	4630      	mov	r0, r6

        str = head; // Non-space character pos
    }

    return num_token;
}
 80073ce:	bc70      	pop	{r4, r5, r6}
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop

080073d4 <_ZL17flushTransmitDatav>:
    memcpy( s_hostTrBuf + s_hostTrBufHead - len, d, len );
    --s_writingTask;
}

void flushTransmitData()
{
 80073d4:	b538      	push	{r3, r4, r5, lr}
    if ( s_hostTrBufHead == 0 )
 80073d6:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <_ZL17flushTransmitDatav+0x40>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	b1d3      	cbz	r3, 8007412 <_ZL17flushTransmitDatav+0x3e>
        return;

    // Wait for all async write process done
    while ( s_writingTask > 0 )
 80073dc:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <_ZL17flushTransmitDatav+0x44>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dd08      	ble.n	80073f6 <_ZL17flushTransmitDatav+0x22>
        taskYIELD();
 80073e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <_ZL17flushTransmitDatav+0x48>)
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	f3bf 8f6f 	isb	sy
{
    if ( s_hostTrBufHead == 0 )
        return;

    // Wait for all async write process done
    while ( s_writingTask > 0 )
 80073f4:	e7f2      	b.n	80073dc <_ZL17flushTransmitDatav+0x8>
        taskYIELD();

    s_bFlushing = true;
 80073f6:	4c0a      	ldr	r4, [pc, #40]	; (8007420 <_ZL17flushTransmitDatav+0x4c>)
 80073f8:	2301      	movs	r3, #1
 80073fa:	7023      	strb	r3, [r4, #0]
    td_write( gHostConnection, s_hostTrBuf, s_hostTrBufHead );
 80073fc:	4b09      	ldr	r3, [pc, #36]	; (8007424 <_ZL17flushTransmitDatav+0x50>)
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	4d04      	ldr	r5, [pc, #16]	; (8007414 <_ZL17flushTransmitDatav+0x40>)
}

//! Write data into the transceiver
static inline transceiver_result_t td_write( transceiver_handle_t desc, char* buf, size_t wrcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 8007402:	6803      	ldr	r3, [r0, #0]
    return td->write( (void*)desc, buf, wrcnt );
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	682a      	ldr	r2, [r5, #0]
 8007408:	4907      	ldr	r1, [pc, #28]	; (8007428 <_ZL17flushTransmitDatav+0x54>)
 800740a:	4798      	blx	r3
    s_hostTrBufHead = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	602b      	str	r3, [r5, #0]
    s_bFlushing     = false;
 8007410:	7023      	strb	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20003878 	.word	0x20003878
 8007418:	2000487c 	.word	0x2000487c
 800741c:	e000ed04 	.word	0xe000ed04
 8007420:	20003859 	.word	0x20003859
 8007424:	20006dec 	.word	0x20006dec
 8007428:	2000387c 	.word	0x2000387c

0800742c <_ZL12readHostConnPvj>:
}

/////////////////////////////////////////////////////////////////////////////
// Utility defs
bool readHostConn( void* dst, size_t len )
{
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	4606      	mov	r6, r0
 8007430:	460d      	mov	r5, r1
    size_t numRetries = 5;
 8007432:	2705      	movs	r7, #5
    for ( ; numRetries; ) {
 8007434:	b1cf      	cbz	r7, 800746a <_ZL12readHostConnPvj+0x3e>
        // Flush transmit data before try read
        flushTransmitData();
 8007436:	f7ff ffcd 	bl	80073d4 <_ZL17flushTransmitDatav>

        auto result = td_read( gHostConnection, (char*)dst, len );
 800743a:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <_ZL12readHostConnPvj+0x44>)
 800743c:	6818      	ldr	r0, [r3, #0]
typedef intptr_t transceiver_handle_t;

//! Read data from the transceiver.
static inline transceiver_result_t td_read( transceiver_handle_t desc, char* buf, size_t rdcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 800743e:	6803      	ldr	r3, [r0, #0]
    return td->read( (void*)desc, buf, rdcnt );
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	462a      	mov	r2, r5
 8007444:	4631      	mov	r1, r6
 8007446:	4798      	blx	r3

        // If there's nothing to read, sleep for 1 cycle
        if ( result == 0 ) {
 8007448:	4604      	mov	r4, r0
 800744a:	b918      	cbnz	r0, 8007454 <_ZL12readHostConnPvj+0x28>
            vTaskDelay( 1 );
 800744c:	2001      	movs	r0, #1
 800744e:	f7fd ffc7 	bl	80053e0 <vTaskDelay>
            continue;
 8007452:	e7ef      	b.n	8007434 <_ZL12readHostConnPvj+0x8>
        }
        else if ( result < 0 ) {
 8007454:	2800      	cmp	r0, #0
 8007456:	da03      	bge.n	8007460 <_ZL12readHostConnPvj+0x34>
            vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8007458:	200a      	movs	r0, #10
 800745a:	f7fd ffc1 	bl	80053e0 <vTaskDelay>
            --numRetries;
 800745e:	3f01      	subs	r7, #1
        }

        len -= result;
        dst = (char*)dst + result;
 8007460:	4426      	add	r6, r4

        if ( len == 0 ) {
 8007462:	1b2d      	subs	r5, r5, r4
 8007464:	d1e6      	bne.n	8007434 <_ZL12readHostConnPvj+0x8>
            return true;
 8007466:	2001      	movs	r0, #1
 8007468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }
    return false;
 800746a:	2000      	movs	r0, #0
}
 800746c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800746e:	bf00      	nop
 8007470:	20006dec 	.word	0x20006dec

08007474 <_ZL13apndToHostBufPKvj>:

    return num_token;
}

void apndToHostBuf( void const* d, size_t len )
{
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	460a      	mov	r2, r1
    uassert( s_hostTrBufHead + len < sizeof( s_hostTrBuf ) );
 8007478:	4b15      	ldr	r3, [pc, #84]	; (80074d0 <_ZL13apndToHostBufPKvj+0x5c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	440b      	add	r3, r1
 800747e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007482:	d306      	bcc.n	8007492 <_ZL13apndToHostBufPKvj+0x1e>
 8007484:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <_ZL13apndToHostBufPKvj+0x60>)
 8007486:	4a14      	ldr	r2, [pc, #80]	; (80074d8 <_ZL13apndToHostBufPKvj+0x64>)
 8007488:	f240 111f 	movw	r1, #287	; 0x11f
 800748c:	4813      	ldr	r0, [pc, #76]	; (80074dc <_ZL13apndToHostBufPKvj+0x68>)
 800748e:	f000 fea5 	bl	80081dc <__assert_func>

    while ( s_bFlushing )
 8007492:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <_ZL13apndToHostBufPKvj+0x6c>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f013 0fff 	tst.w	r3, #255	; 0xff
 800749a:	d008      	beq.n	80074ae <_ZL13apndToHostBufPKvj+0x3a>
        taskYIELD();
 800749c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 80074a0:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <_ZL13apndToHostBufPKvj+0x70>)
 80074a2:	601c      	str	r4, [r3, #0]
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	f3bf 8f6f 	isb	sy

void apndToHostBuf( void const* d, size_t len )
{
    uassert( s_hostTrBufHead + len < sizeof( s_hostTrBuf ) );

    while ( s_bFlushing )
 80074ac:	e7f1      	b.n	8007492 <_ZL13apndToHostBufPKvj+0x1e>
        taskYIELD();

    ++s_writingTask;
 80074ae:	4c0e      	ldr	r4, [pc, #56]	; (80074e8 <_ZL13apndToHostBufPKvj+0x74>)
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	6023      	str	r3, [r4, #0]
    s_hostTrBufHead += len;
 80074b6:	4906      	ldr	r1, [pc, #24]	; (80074d0 <_ZL13apndToHostBufPKvj+0x5c>)
 80074b8:	680b      	ldr	r3, [r1, #0]
 80074ba:	18d5      	adds	r5, r2, r3
 80074bc:	600d      	str	r5, [r1, #0]
    memcpy( s_hostTrBuf + s_hostTrBufHead - len, d, len );
 80074be:	4601      	mov	r1, r0
 80074c0:	480a      	ldr	r0, [pc, #40]	; (80074ec <_ZL13apndToHostBufPKvj+0x78>)
 80074c2:	4418      	add	r0, r3
 80074c4:	f7f8 feaa 	bl	800021c <memcpy>
    --s_writingTask;
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20003878 	.word	0x20003878
 80074d4:	0800ddec 	.word	0x0800ddec
 80074d8:	0800ddc4 	.word	0x0800ddc4
 80074dc:	0800de1c 	.word	0x0800de1c
 80074e0:	20003859 	.word	0x20003859
 80074e4:	e000ed04 	.word	0xe000ed04
 80074e8:	2000487c 	.word	0x2000487c
 80074ec:	2000387c 	.word	0x2000387c

080074f0 <AppProc_HostIO>:
static bool readHostConn( void* dst, size_t len );

/////////////////////////////////////////////////////////////////////////////
// Primary Procedure
extern "C" _Noreturn void AppProc_HostIO( void* nouse_ )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
        if ( readHostConn( buf, len ) == false )
            continue;

        // Call command procedure
        ( PACKET_IS_STR( packet ) ? stringCmdHandler : binaryCmdHandler )( buf, len );
    }
 80074f6:	466c      	mov	r4, sp
{
    packetinfo_t packet;

    for ( ;; ) {
        // Check if read data has valid protocol.
        if ( readHostConn( &packet, PACKET_SIZE ) == false )
 80074f8:	2104      	movs	r1, #4
 80074fa:	1878      	adds	r0, r7, r1
 80074fc:	f7ff ff96 	bl	800742c <_ZL12readHostConnPvj>
 8007500:	b1f8      	cbz	r0, 8007542 <AppProc_HostIO+0x52>
            continue;

        // Check packet validity
        // If any data was delivered in bad condition, it'll consume all pending bytes.
        if ( PACKET_IS_PACKET( packet ) == false )
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 8007508:	f1b3 4f68 	cmp.w	r3, #3892314112	; 0xe8000000
 800750c:	d119      	bne.n	8007542 <AppProc_HostIO+0x52>
            continue;

        // Should be aware of maximum stack depth!
        // Packet size must be less than 2kByte at once
        // Allocate packet receive memory using VLA
        auto len = PACKET_LENGTH( packet );
 800750e:	f3c1 0516 	ubfx	r5, r1, #0, #23
        char buf[len + 1];
 8007512:	f105 0308 	add.w	r3, r5, #8
 8007516:	f023 0307 	bic.w	r3, r3, #7
 800751a:	ebad 0d03 	sub.w	sp, sp, r3
 800751e:	466e      	mov	r6, sp
        if ( readHostConn( buf, len ) == false )
 8007520:	4629      	mov	r1, r5
 8007522:	4668      	mov	r0, sp
 8007524:	f7ff ff82 	bl	800742c <_ZL12readHostConnPvj>
 8007528:	b158      	cbz	r0, 8007542 <AppProc_HostIO+0x52>
            continue;

        // Call command procedure
        ( PACKET_IS_STR( packet ) ? stringCmdHandler : binaryCmdHandler )( buf, len );
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007530:	d001      	beq.n	8007536 <AppProc_HostIO+0x46>
 8007532:	4b05      	ldr	r3, [pc, #20]	; (8007548 <AppProc_HostIO+0x58>)
 8007534:	e000      	b.n	8007538 <AppProc_HostIO+0x48>
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <AppProc_HostIO+0x5c>)
 8007538:	4629      	mov	r1, r5
 800753a:	4630      	mov	r0, r6
 800753c:	4798      	blx	r3
 800753e:	46a5      	mov	sp, r4
 8007540:	e7d9      	b.n	80074f6 <AppProc_HostIO+0x6>
    packetinfo_t packet;

    for ( ;; ) {
        // Check if read data has valid protocol.
        if ( readHostConn( &packet, PACKET_SIZE ) == false )
            continue;
 8007542:	46a5      	mov	sp, r4
 8007544:	e7d7      	b.n	80074f6 <AppProc_HostIO+0x6>
 8007546:	bf00      	nop
 8007548:	08007671 	.word	0x08007671
 800754c:	080077dd 	.word	0x080077dd

08007550 <API_SendHostBinary>:
}

/////////////////////////////////////////////////////////////////////////////
// Global function defs
void API_SendHostBinary( void const* data, size_t len )
{
 8007550:	b530      	push	{r4, r5, lr}
 8007552:	b083      	sub	sp, #12
 8007554:	4605      	mov	r5, r0
 8007556:	460c      	mov	r4, r1
    packetinfo_t packet = PACKET_MAKE( false, len );
 8007558:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800755c:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
 8007560:	a802      	add	r0, sp, #8
 8007562:	f840 3d04 	str.w	r3, [r0, #-4]!
    apndToHostBuf( &packet, sizeof packet );
 8007566:	2104      	movs	r1, #4
 8007568:	f7ff ff84 	bl	8007474 <_ZL13apndToHostBufPKvj>
    apndToHostBuf( data, len );
 800756c:	4621      	mov	r1, r4
 800756e:	4628      	mov	r0, r5
 8007570:	f7ff ff80 	bl	8007474 <_ZL13apndToHostBufPKvj>
}
 8007574:	b003      	add	sp, #12
 8007576:	bd30      	pop	{r4, r5, pc}

08007578 <API_SendHostString>:

void API_SendHostString( void const* data, size_t len )
{
 8007578:	b530      	push	{r4, r5, lr}
 800757a:	b083      	sub	sp, #12
 800757c:	4605      	mov	r5, r0
 800757e:	460c      	mov	r4, r1
    packetinfo_t packet = PACKET_MAKE( true, len );
 8007580:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8007584:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
 8007588:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800758c:	a802      	add	r0, sp, #8
 800758e:	f840 3d04 	str.w	r3, [r0, #-4]!
    apndToHostBuf( &packet, sizeof packet );
 8007592:	2104      	movs	r1, #4
 8007594:	f7ff ff6e 	bl	8007474 <_ZL13apndToHostBufPKvj>
    apndToHostBuf( data, len );
 8007598:	4621      	mov	r1, r4
 800759a:	4628      	mov	r0, r5
 800759c:	f7ff ff6a 	bl	8007474 <_ZL13apndToHostBufPKvj>
}
 80075a0:	b003      	add	sp, #12
 80075a2:	bd30      	pop	{r4, r5, pc}

080075a4 <print>:
{
    apndToHostBuf( data, len );
}

extern "C" void print( char const* fmt, ... )
{
 80075a4:	b40f      	push	{r0, r1, r2, r3}
 80075a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	f107 0320 	add.w	r3, r7, #32
 80075b0:	f853 5b04 	ldr.w	r5, [r3], #4
    va_list vp;
    va_list vp2;
    va_start( vp, fmt );
 80075b4:	607b      	str	r3, [r7, #4]
    size_t allocsz = vsnprintf( NULL, 0, fmt, vp ) + 1;
 80075b6:	462a      	mov	r2, r5
 80075b8:	2100      	movs	r1, #0
 80075ba:	4608      	mov	r0, r1
 80075bc:	f002 f9fa 	bl	80099b4 <vsnprintf>
 80075c0:	1c46      	adds	r6, r0, #1
    va_end( vp );

    va_copy( vp2, vp );
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	603a      	str	r2, [r7, #0]
    char* buf = (char*)alloca( allocsz );
 80075c6:	300f      	adds	r0, #15
 80075c8:	f020 0007 	bic.w	r0, r0, #7
 80075cc:	ebad 0d00 	sub.w	sp, sp, r0
    vsprintf( buf, fmt, vp2 );
 80075d0:	4629      	mov	r1, r5
 80075d2:	4668      	mov	r0, sp
 80075d4:	f002 fa18 	bl	8009a08 <vsprintf>
    va_end( vp2 );

    API_SendHostString( buf, allocsz );
 80075d8:	4631      	mov	r1, r6
 80075da:	4668      	mov	r0, sp
 80075dc:	f7ff ffcc 	bl	8007578 <API_SendHostString>
}
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80075e8:	b004      	add	sp, #16
 80075ea:	4770      	bx	lr

080075ec <_ZZL16stringCmdHandlerPcjENUlPvE_4_FUNES0_>:
        ti.init  = API_GetTime_us();
        ti.cnt   = 0;
        ti.num   = num;
        ti.delay = delay;

        auto timer_cb = []( void* beg ) {
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	4604      	mov	r4, r0
            auto&    t       = *(TI*)beg;
            uint64_t init    = t.init;
 80075f2:	6806      	ldr	r6, [r0, #0]
            uint64_t now     = API_GetTime_us();
 80075f4:	f000 fa40 	bl	8007a78 <API_GetTime_us>
 80075f8:	4602      	mov	r2, r0
            int      elapsed = now - init;
 80075fa:	1b86      	subs	r6, r0, r6
            print(
                "[%3d] %llu: %d us (error %d us)\n",
                t.cnt,
                now,
                elapsed,
                elapsed - ( t.delay * ( t.cnt + 1 ) ) );
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	68a5      	ldr	r5, [r4, #8]
 8007600:	fb05 3303 	mla	r3, r5, r3, r3
            auto&    t       = *(TI*)beg;
            uint64_t init    = t.init;
            uint64_t now     = API_GetTime_us();
            int      elapsed = now - init;

            print(
 8007604:	1af3      	subs	r3, r6, r3
                "[%3d] %llu: %d us (error %d us)\n",
                t.cnt,
                now,
                elapsed,
                elapsed - ( t.delay * ( t.cnt + 1 ) ) );
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	9600      	str	r6, [sp, #0]
 800760a:	460b      	mov	r3, r1
 800760c:	4629      	mov	r1, r5
 800760e:	4804      	ldr	r0, [pc, #16]	; (8007620 <_ZZL16stringCmdHandlerPcjENUlPvE_4_FUNES0_+0x34>)
 8007610:	f7ff ffc8 	bl	80075a4 <print>

            t.cnt++;
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	3301      	adds	r3, #1
 8007618:	60a3      	str	r3, [r4, #8]
        };
 800761a:	b002      	add	sp, #8
 800761c:	bd70      	pop	{r4, r5, r6, pc}
 800761e:	bf00      	nop
 8007620:	0800de34 	.word	0x0800de34

08007624 <putstr>:

    API_SendHostString( buf, allocsz );
}

extern "C" int putstr( char const* txt )
{
 8007624:	b510      	push	{r4, lr}
 8007626:	4604      	mov	r4, r0
    API_SendHostString( txt, strlen( txt ) + 1 );
 8007628:	f7f8 feaa 	bl	8000380 <strlen>
 800762c:	1c41      	adds	r1, r0, #1
 800762e:	4620      	mov	r0, r4
 8007630:	f7ff ffa2 	bl	8007578 <API_SendHostString>
    return 0;
}
 8007634:	2000      	movs	r0, #0
 8007636:	bd10      	pop	{r4, pc}

08007638 <AppHandler_CaptureCommand>:
    }
}

extern "C" __weak_symbol bool
AppHandler_CaptureCommand( int argc, char* argv[] )
{
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	4605      	mov	r5, r0
 800763c:	460e      	mov	r6, r1
    print( "info: Receiving :: " );
 800763e:	4809      	ldr	r0, [pc, #36]	; (8007664 <AppHandler_CaptureCommand+0x2c>)
 8007640:	f7ff ffb0 	bl	80075a4 <print>
    for ( int i = 0; i < argc; i++ ) {
 8007644:	2400      	movs	r4, #0
 8007646:	42ac      	cmp	r4, r5
 8007648:	da06      	bge.n	8007658 <AppHandler_CaptureCommand+0x20>
        print( "%s ", argv[i] );
 800764a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800764e:	4806      	ldr	r0, [pc, #24]	; (8007668 <AppHandler_CaptureCommand+0x30>)
 8007650:	f7ff ffa8 	bl	80075a4 <print>

extern "C" __weak_symbol bool
AppHandler_CaptureCommand( int argc, char* argv[] )
{
    print( "info: Receiving :: " );
    for ( int i = 0; i < argc; i++ ) {
 8007654:	3401      	adds	r4, #1
 8007656:	e7f6      	b.n	8007646 <AppHandler_CaptureCommand+0xe>
        print( "%s ", argv[i] );
    }
    putstr( "\n" );
 8007658:	4804      	ldr	r0, [pc, #16]	; (800766c <AppHandler_CaptureCommand+0x34>)
 800765a:	f7ff ffe3 	bl	8007624 <putstr>
    return true;
}
 800765e:	2001      	movs	r0, #1
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	bf00      	nop
 8007664:	0800de58 	.word	0x0800de58
 8007668:	0800de6c 	.word	0x0800de6c
 800766c:	0800de70 	.word	0x0800de70

08007670 <_ZL16stringCmdHandlerPcj>:

/////////////////////////////////////////////////////////////////////////////
//

void stringCmdHandler( char* str, size_t len )
{
 8007670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	b097      	sub	sp, #92	; 0x5c
    // Append last byte as null ch
    str[len + 1] = '\0';
 8007676:	3101      	adds	r1, #1
 8007678:	2200      	movs	r2, #0
 800767a:	5442      	strb	r2, [r0, r1]

    // Make tokens from string ... Maximum token = 16
    char* argv[16];
    int   argc = stringToTokens( str, argv, sizeof( argv ) / sizeof( *argv ) );
 800767c:	2210      	movs	r2, #16
 800767e:	a901      	add	r1, sp, #4
 8007680:	f7ff fe7c 	bl	800737c <_ZL14stringToTokensPcPS_j>

    if ( argc == 0 )
 8007684:	2800      	cmp	r0, #0
 8007686:	f000 808c 	beq.w	80077a2 <_ZL16stringCmdHandlerPcj+0x132>
 800768a:	4604      	mov	r4, r0
        return;

#define STRCASE( v ) upp::hash::fnv1a_32_const( v )
    uint32_t cmdidx = upp::hash::fnv1a_32( argv[0] );
 800768c:	9a01      	ldr	r2, [sp, #4]
}

inline const uint32_t fnv1a_32( const void* key )
{
    const char* data  = (char*)key;
    uint32_t    hash  = 0x811c9dc5;
 800768e:	4b46      	ldr	r3, [pc, #280]	; (80077a8 <_ZL16stringCmdHandlerPcj+0x138>)
    uint32_t    prime = 0x1000193;

    for ( ; *data; ++data ) {
 8007690:	7811      	ldrb	r1, [r2, #0]
 8007692:	b129      	cbz	r1, 80076a0 <_ZL16stringCmdHandlerPcj+0x30>
        hash = hash ^ *data;
 8007694:	404b      	eors	r3, r1
        hash *= prime;
 8007696:	4945      	ldr	r1, [pc, #276]	; (80077ac <_ZL16stringCmdHandlerPcj+0x13c>)
 8007698:	fb01 f303 	mul.w	r3, r1, r3
{
    const char* data  = (char*)key;
    uint32_t    hash  = 0x811c9dc5;
    uint32_t    prime = 0x1000193;

    for ( ; *data; ++data ) {
 800769c:	3201      	adds	r2, #1
 800769e:	e7f7      	b.n	8007690 <_ZL16stringCmdHandlerPcj+0x20>

    switch ( cmdidx ) {
 80076a0:	4a43      	ldr	r2, [pc, #268]	; (80077b0 <_ZL16stringCmdHandlerPcj+0x140>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00b      	beq.n	80076be <_ZL16stringCmdHandlerPcj+0x4e>
 80076a6:	d803      	bhi.n	80076b0 <_ZL16stringCmdHandlerPcj+0x40>
 80076a8:	4a42      	ldr	r2, [pc, #264]	; (80077b4 <_ZL16stringCmdHandlerPcj+0x144>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d070      	beq.n	8007790 <_ZL16stringCmdHandlerPcj+0x120>
 80076ae:	e074      	b.n	800779a <_ZL16stringCmdHandlerPcj+0x12a>
 80076b0:	4a41      	ldr	r2, [pc, #260]	; (80077b8 <_ZL16stringCmdHandlerPcj+0x148>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d068      	beq.n	8007788 <_ZL16stringCmdHandlerPcj+0x118>
 80076b6:	4a41      	ldr	r2, [pc, #260]	; (80077bc <_ZL16stringCmdHandlerPcj+0x14c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d072      	beq.n	80077a2 <_ZL16stringCmdHandlerPcj+0x132>
 80076bc:	e06d      	b.n	800779a <_ZL16stringCmdHandlerPcj+0x12a>
        static struct TI {
            uint64_t init;
            int      cnt = 0;
            int      num = 0;
            int      delay;
        } ti;
 80076be:	4b40      	ldr	r3, [pc, #256]	; (80077c0 <_ZL16stringCmdHandlerPcj+0x150>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f013 0f01 	tst.w	r3, #1
 80076c6:	d106      	bne.n	80076d6 <_ZL16stringCmdHandlerPcj+0x66>
    switch ( cmdidx ) {
    case STRCASE( "app-os-report" ): {
    } break;

    case STRCASE( "test-timer" ): {
        static struct TI {
 80076c8:	4b3e      	ldr	r3, [pc, #248]	; (80077c4 <_ZL16stringCmdHandlerPcj+0x154>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	609a      	str	r2, [r3, #8]
 80076ce:	60da      	str	r2, [r3, #12]
            uint64_t init;
            int      cnt = 0;
            int      num = 0;
            int      delay;
        } ti;
 80076d0:	2201      	movs	r2, #1
 80076d2:	4b3b      	ldr	r3, [pc, #236]	; (80077c0 <_ZL16stringCmdHandlerPcj+0x150>)
 80076d4:	601a      	str	r2, [r3, #0]
        int num = 1, delay = 1;

        if ( argc >= 2 )
 80076d6:	2c01      	cmp	r4, #1
 80076d8:	dd15      	ble.n	8007706 <_ZL16stringCmdHandlerPcj+0x96>
            num = std::min( NUM_MAX_HWTIMER_NODE, std::max( 1, atoi( argv[1] ) ) );
 80076da:	2328      	movs	r3, #40	; 0x28
 80076dc:	9311      	str	r3, [sp, #68]	; 0x44
 80076de:	2301      	movs	r3, #1
 80076e0:	9312      	str	r3, [sp, #72]	; 0x48
 80076e2:	9802      	ldr	r0, [sp, #8]
 80076e4:	f000 fd98 	bl	8008218 <atoi>
 80076e8:	9013      	str	r0, [sp, #76]	; 0x4c
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80076ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ec:	4298      	cmp	r0, r3
 80076ee:	dd01      	ble.n	80076f4 <_ZL16stringCmdHandlerPcj+0x84>
	return __b;
 80076f0:	ab13      	add	r3, sp, #76	; 0x4c
 80076f2:	e000      	b.n	80076f6 <_ZL16stringCmdHandlerPcj+0x86>
      return __a;
 80076f4:	ab12      	add	r3, sp, #72	; 0x48
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80076f6:	6819      	ldr	r1, [r3, #0]
 80076f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076fa:	4291      	cmp	r1, r2
 80076fc:	db00      	blt.n	8007700 <_ZL16stringCmdHandlerPcj+0x90>
	return __b;
      return __a;
 80076fe:	ab11      	add	r3, sp, #68	; 0x44
 8007700:	f8d3 a000 	ldr.w	sl, [r3]
 8007704:	e001      	b.n	800770a <_ZL16stringCmdHandlerPcj+0x9a>
            uint64_t init;
            int      cnt = 0;
            int      num = 0;
            int      delay;
        } ti;
        int num = 1, delay = 1;
 8007706:	f04f 0a01 	mov.w	sl, #1

        if ( argc >= 2 )
            num = std::min( NUM_MAX_HWTIMER_NODE, std::max( 1, atoi( argv[1] ) ) );
        if ( argc >= 3 )
 800770a:	2c02      	cmp	r4, #2
 800770c:	dd0e      	ble.n	800772c <_ZL16stringCmdHandlerPcj+0xbc>
            delay = std::max( 100, atoi( argv[2] ) );
 800770e:	2364      	movs	r3, #100	; 0x64
 8007710:	9314      	str	r3, [sp, #80]	; 0x50
 8007712:	9803      	ldr	r0, [sp, #12]
 8007714:	f000 fd80 	bl	8008218 <atoi>
 8007718:	9015      	str	r0, [sp, #84]	; 0x54
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800771a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800771c:	4298      	cmp	r0, r3
 800771e:	dd01      	ble.n	8007724 <_ZL16stringCmdHandlerPcj+0xb4>
	return __b;
 8007720:	ab15      	add	r3, sp, #84	; 0x54
 8007722:	e000      	b.n	8007726 <_ZL16stringCmdHandlerPcj+0xb6>
      return __a;
 8007724:	ab14      	add	r3, sp, #80	; 0x50
 8007726:	f8d3 b000 	ldr.w	fp, [r3]
 800772a:	e001      	b.n	8007730 <_ZL16stringCmdHandlerPcj+0xc0>
            uint64_t init;
            int      cnt = 0;
            int      num = 0;
            int      delay;
        } ti;
        int num = 1, delay = 1;
 800772c:	f04f 0b01 	mov.w	fp, #1
        if ( argc >= 2 )
            num = std::min( NUM_MAX_HWTIMER_NODE, std::max( 1, atoi( argv[1] ) ) );
        if ( argc >= 3 )
            delay = std::max( 100, atoi( argv[2] ) );

        if ( ti.cnt != ti.num ) {
 8007730:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <_ZL16stringCmdHandlerPcj+0x154>)
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	429a      	cmp	r2, r3
 8007738:	d003      	beq.n	8007742 <_ZL16stringCmdHandlerPcj+0xd2>
            putstr( "Yet timer task is running ... \n" );
 800773a:	4823      	ldr	r0, [pc, #140]	; (80077c8 <_ZL16stringCmdHandlerPcj+0x158>)
 800773c:	f7ff ff72 	bl	8007624 <putstr>
 8007740:	e02f      	b.n	80077a2 <_ZL16stringCmdHandlerPcj+0x132>
            break;
        }
        ti.init  = API_GetTime_us();
 8007742:	f000 f999 	bl	8007a78 <API_GetTime_us>
 8007746:	4b1f      	ldr	r3, [pc, #124]	; (80077c4 <_ZL16stringCmdHandlerPcj+0x154>)
 8007748:	e9c3 0100 	strd	r0, r1, [r3]
        ti.cnt   = 0;
 800774c:	2400      	movs	r4, #0
 800774e:	609c      	str	r4, [r3, #8]
        ti.num   = num;
 8007750:	f8c3 a00c 	str.w	sl, [r3, #12]
        ti.delay = delay;
 8007754:	f8c3 b010 	str.w	fp, [r3, #16]
                elapsed - ( t.delay * ( t.cnt + 1 ) ) );

            t.cnt++;
        };

        for ( int i = 0; i < num; i++ ) {
 8007758:	45a2      	cmp	sl, r4
 800775a:	dd22      	ble.n	80077a2 <_ZL16stringCmdHandlerPcj+0x132>
            auto correct_delay = delay * ( i + 1 ) - ( API_GetTime_us() - ti.init );
 800775c:	3401      	adds	r4, #1
 800775e:	fb04 f80b 	mul.w	r8, r4, fp
 8007762:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8007766:	4d17      	ldr	r5, [pc, #92]	; (80077c4 <_ZL16stringCmdHandlerPcj+0x154>)
 8007768:	e9d5 6700 	ldrd	r6, r7, [r5]
 800776c:	f000 f984 	bl	8007a78 <API_GetTime_us>
 8007770:	1a30      	subs	r0, r6, r0
 8007772:	eb67 0101 	sbc.w	r1, r7, r1
            API_SetTimer( correct_delay, &ti, timer_cb );
 8007776:	4b15      	ldr	r3, [pc, #84]	; (80077cc <_ZL16stringCmdHandlerPcj+0x15c>)
 8007778:	462a      	mov	r2, r5
 800777a:	eb10 0008 	adds.w	r0, r0, r8
 800777e:	eb41 0109 	adc.w	r1, r1, r9
 8007782:	f000 fae9 	bl	8007d58 <API_SetTimer>
                elapsed - ( t.delay * ( t.cnt + 1 ) ) );

            t.cnt++;
        };

        for ( int i = 0; i < num; i++ ) {
 8007786:	e7e7      	b.n	8007758 <_ZL16stringCmdHandlerPcj+0xe8>
        }

    } break;

    case STRCASE( "test-input" ): {
        print( "Hello, world!\n" );
 8007788:	4811      	ldr	r0, [pc, #68]	; (80077d0 <_ZL16stringCmdHandlerPcj+0x160>)
 800778a:	f7ff ff0b 	bl	80075a4 <print>
    } break;
 800778e:	e008      	b.n	80077a2 <_ZL16stringCmdHandlerPcj+0x132>

    case STRCASE( "ping" ): {
        API_SendHostBinary( "ping", 4 );
 8007790:	2104      	movs	r1, #4
 8007792:	4810      	ldr	r0, [pc, #64]	; (80077d4 <_ZL16stringCmdHandlerPcj+0x164>)
 8007794:	f7ff fedc 	bl	8007550 <API_SendHostBinary>
    } break;
 8007798:	e003      	b.n	80077a2 <_ZL16stringCmdHandlerPcj+0x132>

    default:
        if ( AppHandler_CaptureCommand( argc, argv ) )
 800779a:	a901      	add	r1, sp, #4
 800779c:	4620      	mov	r0, r4
 800779e:	f7ff ff4b 	bl	8007638 <AppHandler_CaptureCommand>
            break;
        break;
    }
}
 80077a2:	b017      	add	sp, #92	; 0x5c
 80077a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a8:	811c9dc5 	.word	0x811c9dc5
 80077ac:	01000193 	.word	0x01000193
 80077b0:	2dbbb3f9 	.word	0x2dbbb3f9
 80077b4:	165df089 	.word	0x165df089
 80077b8:	4eecbbec 	.word	0x4eecbbec
 80077bc:	c50d20e2 	.word	0xc50d20e2
 80077c0:	2000385c 	.word	0x2000385c
 80077c4:	20003860 	.word	0x20003860
 80077c8:	0800de74 	.word	0x0800de74
 80077cc:	080075ed 	.word	0x080075ed
 80077d0:	0800de94 	.word	0x0800de94
 80077d4:	0800dea4 	.word	0x0800dea4

080077d8 <AppHandler_CaptureBinary>:

extern "C" __weak_symbol bool
AppHandler_CaptureBinary( char* data, size_t len )
{
    return false;
}
 80077d8:	2000      	movs	r0, #0
 80077da:	4770      	bx	lr

080077dc <_ZL16binaryCmdHandlerPcj>:

void binaryCmdHandler( char* data, size_t len )
{
 80077dc:	b508      	push	{r3, lr}
    if ( AppHandler_CaptureBinary( data, len ) ) {
 80077de:	f7ff fffb 	bl	80077d8 <AppHandler_CaptureBinary>
 80077e2:	b910      	cbnz	r0, 80077ea <_ZL16binaryCmdHandlerPcj+0xe>
        return;
    }

    putstr( "warning: failed to process binary data\n" );
 80077e4:	4801      	ldr	r0, [pc, #4]	; (80077ec <_ZL16binaryCmdHandlerPcj+0x10>)
 80077e6:	f7ff ff1d 	bl	8007624 <putstr>
 80077ea:	bd08      	pop	{r3, pc}
 80077ec:	0800deac 	.word	0x0800deac

080077f0 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_>:
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80077f0:	4a02      	ldr	r2, [pc, #8]	; (80077fc <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_+0xc>)
 80077f2:	60c2      	str	r2, [r0, #12]
	    _M_manager = &_My_handler::_M_manager;
 80077f4:	4a02      	ldr	r2, [pc, #8]	; (8007800 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_+0x10>)
 80077f6:	6082      	str	r2, [r0, #8]
	  }
      }
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	08007aa5 	.word	0x08007aa5
 8007800:	08007805 	.word	0x08007805

08007804 <_ZNSt14_Function_base13_Base_managerIZ13HW_TIMER_INITEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8007804:	2a01      	cmp	r2, #1
 8007806:	d100      	bne.n	800780a <_ZNSt14_Function_base13_Base_managerIZ13HW_TIMER_INITEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007808:	6001      	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 800780a:	2000      	movs	r0, #0
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop

08007810 <_Z41__static_initialization_and_destruction_0ii>:
void __throw_bad_function_call()
{
    uassert( false );
    for ( ;; ) { }
}
} // namespace std
 8007810:	2801      	cmp	r0, #1
 8007812:	d13b      	bne.n	800788c <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800781a:	4299      	cmp	r1, r3
 800781c:	d135      	bne.n	800788a <_Z41__static_initialization_and_destruction_0ii+0x7a>
    using size_type       = nty_;
    using difference_type = ptrdiff_t;
    using node_type       = fslist_node<size_type>;
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
 800781e:	4a1c      	ldr	r2, [pc, #112]	; (8007890 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007820:	2300      	movs	r3, #0
 8007822:	7013      	strb	r3, [r2, #0]
 8007824:	2128      	movs	r1, #40	; 0x28
 8007826:	7051      	strb	r1, [r2, #1]
 8007828:	21ff      	movs	r1, #255	; 0xff
 800782a:	7091      	strb	r1, [r2, #2]
 800782c:	70d1      	strb	r1, [r2, #3]
 800782e:	7113      	strb	r3, [r2, #4]
 8007830:	f502 7174 	add.w	r1, r2, #976	; 0x3d0
 8007834:	6091      	str	r1, [r2, #8]
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
 8007836:	2b27      	cmp	r3, #39	; 0x27
 8007838:	d80d      	bhi.n	8007856 <_Z41__static_initialization_and_destruction_0ii+0x46>
            auto p  = narray_ + i;
 800783a:	4a15      	ldr	r2, [pc, #84]	; (8007890 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800783c:	6894      	ldr	r4, [r2, #8]
 800783e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8007842:	1821      	adds	r1, r4, r0
            p->nxt_ = static_cast<size_type>( i + 1 );
 8007844:	b2da      	uxtb	r2, r3
 8007846:	1c55      	adds	r5, r2, #1
 8007848:	5425      	strb	r5, [r4, r0]
            p->cur_ = NODE_NONE;
 800784a:	20ff      	movs	r0, #255	; 0xff
 800784c:	7088      	strb	r0, [r1, #2]
            p->prv_ = static_cast<size_type>( i - 1 );
 800784e:	3a01      	subs	r2, #1
 8007850:	704a      	strb	r2, [r1, #1]
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
 8007852:	3301      	adds	r3, #1
 8007854:	e7ef      	b.n	8007836 <_Z41__static_initialization_and_destruction_0ii+0x26>
            auto p  = narray_ + i;
            p->nxt_ = static_cast<size_type>( i + 1 );
            p->cur_ = NODE_NONE;
            p->prv_ = static_cast<size_type>( i - 1 );
        }
        narray_[0].prv_             = NODE_NONE;
 8007856:	480e      	ldr	r0, [pc, #56]	; (8007890 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007858:	6883      	ldr	r3, [r0, #8]
 800785a:	22ff      	movs	r2, #255	; 0xff
 800785c:	705a      	strb	r2, [r3, #1]
        narray_[capacity_ - 1].nxt_ = NODE_NONE;
 800785e:	7843      	ldrb	r3, [r0, #1]
 8007860:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007864:	3b03      	subs	r3, #3
 8007866:	6881      	ldr	r1, [r0, #8]
 8007868:	54ca      	strb	r2, [r1, r3]
            i      = super::next( i );
            super::dealloc_node( k );
        }
    }

    fslist_base( size_type capacity, pointer varray, node_type* narray ) noexcept : super_type( capacity, narray ), varray_( varray )
 800786a:	f100 0310 	add.w	r3, r0, #16
 800786e:	60c3      	str	r3, [r0, #12]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8007870:	2300      	movs	r3, #0
 8007872:	f8c0 3450 	str.w	r3, [r0, #1104]	; 0x450
    timer_cb_t cb_;
};

template <typename tick_ty__,
          typename list_container__>
class timer_logic {
 8007876:	f500 638b 	add.w	r3, r0, #1112	; 0x458
 800787a:	2400      	movs	r4, #0
 800787c:	2500      	movs	r5, #0
 800787e:	e9c3 4500 	strd	r4, r5, [r3]
extern TIM_HandleTypeDef htim2;

/////////////////////////////////////////////////////////////////////////////
// Statics
using timer_t = upp::static_timer_logic<usec_t, uint8_t, NUM_MAX_HWTIMER_NODE>;
static timer_t            s_tim;
 8007882:	4a04      	ldr	r2, [pc, #16]	; (8007894 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007884:	4904      	ldr	r1, [pc, #16]	; (8007898 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007886:	f000 fca3 	bl	80081d0 <__aeabi_atexit>
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20004880 	.word	0x20004880
 8007894:	20000000 	.word	0x20000000
 8007898:	0800789d 	.word	0x0800789d

0800789c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	4604      	mov	r4, r0

    ~_Function_base()
    {
      if (_M_manager)
 80078a0:	f8d0 3450 	ldr.w	r3, [r0, #1104]	; 0x450
 80078a4:	b123      	cbz	r3, 80078b0 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x14>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80078a6:	f500 6089 	add.w	r0, r0, #1096	; 0x448
 80078aa:	2203      	movs	r2, #3
 80078ac:	4601      	mov	r1, r0
 80078ae:	4798      	blx	r3
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 80078b0:	78a3      	ldrb	r3, [r4, #2]
        clear();
    }

    void clear() noexcept
    {
        for ( size_type i = super::head(); i != NODE_NONE; ) {
 80078b2:	2bff      	cmp	r3, #255	; 0xff
 80078b4:	d041      	beq.n	800793a <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x9e>
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 80078b6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80078ba:	68a1      	ldr	r1, [r4, #8]
 80078bc:	180d      	adds	r5, r1, r0
 80078be:	5c0e      	ldrb	r6, [r1, r0]
    }

    void dealloc_node( size_type i ) noexcept
    {
        auto& n = narray_[i];
        uassert( n.cur_ != NODE_NONE );
 80078c0:	78aa      	ldrb	r2, [r5, #2]
 80078c2:	2aff      	cmp	r2, #255	; 0xff
 80078c4:	d105      	bne.n	80078d2 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x36>
 80078c6:	4b1e      	ldr	r3, [pc, #120]	; (8007940 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xa4>)
 80078c8:	4a1e      	ldr	r2, [pc, #120]	; (8007944 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xa8>)
 80078ca:	216b      	movs	r1, #107	; 0x6b
 80078cc:	481e      	ldr	r0, [pc, #120]	; (8007948 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xac>)
 80078ce:	f000 fc85 	bl	80081dc <__assert_func>
        uassert( i >= 0 && i < capacity_ );
 80078d2:	7862      	ldrb	r2, [r4, #1]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d305      	bcc.n	80078e4 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x48>
 80078d8:	4b1c      	ldr	r3, [pc, #112]	; (800794c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xb0>)
 80078da:	4a1a      	ldr	r2, [pc, #104]	; (8007944 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xa8>)
 80078dc:	216c      	movs	r1, #108	; 0x6c
 80078de:	481a      	ldr	r0, [pc, #104]	; (8007948 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xac>)
 80078e0:	f000 fc7c 	bl	80081dc <__assert_func>

        if ( n.nxt_ != NODE_NONE ) {
 80078e4:	5c0a      	ldrb	r2, [r1, r0]
 80078e6:	2aff      	cmp	r2, #255	; 0xff
 80078e8:	d005      	beq.n	80078f6 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x5a>
            narray_[n.nxt_].prv_ = n.prv_;
 80078ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80078ee:	440a      	add	r2, r1
 80078f0:	786f      	ldrb	r7, [r5, #1]
 80078f2:	7057      	strb	r7, [r2, #1]
 80078f4:	e001      	b.n	80078fa <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x5e>
        }
        else { // It's tail
            tail_ = n.prv_;
 80078f6:	786a      	ldrb	r2, [r5, #1]
 80078f8:	70e2      	strb	r2, [r4, #3]
        }

        if ( n.prv_ != NODE_NONE ) {
 80078fa:	786a      	ldrb	r2, [r5, #1]
 80078fc:	2aff      	cmp	r2, #255	; 0xff
 80078fe:	d007      	beq.n	8007910 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x74>
            narray_[n.prv_].nxt_ = n.nxt_;
 8007900:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007904:	68a7      	ldr	r7, [r4, #8]
 8007906:	f811 e000 	ldrb.w	lr, [r1, r0]
 800790a:	f807 e002 	strb.w	lr, [r7, r2]
 800790e:	e001      	b.n	8007914 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x78>
        }
        else { // It's head
            head_ = n.nxt_;
 8007910:	5c0a      	ldrb	r2, [r1, r0]
 8007912:	70a2      	strb	r2, [r4, #2]
        }

        if ( idle_ != NODE_NONE ) {
 8007914:	7922      	ldrb	r2, [r4, #4]
 8007916:	2aff      	cmp	r2, #255	; 0xff
 8007918:	d004      	beq.n	8007924 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x88>
            narray_[idle_].prv_ = i;
 800791a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800791e:	68a7      	ldr	r7, [r4, #8]
 8007920:	443a      	add	r2, r7
 8007922:	7053      	strb	r3, [r2, #1]
        }
        n.prv_ = NODE_NONE;
 8007924:	22ff      	movs	r2, #255	; 0xff
 8007926:	706a      	strb	r2, [r5, #1]
        n.cur_ = NODE_NONE;
 8007928:	70aa      	strb	r2, [r5, #2]
        n.nxt_ = idle_;
 800792a:	7922      	ldrb	r2, [r4, #4]
 800792c:	540a      	strb	r2, [r1, r0]
        idle_  = i;
 800792e:	7123      	strb	r3, [r4, #4]
        --size_;
 8007930:	7823      	ldrb	r3, [r4, #0]
 8007932:	3b01      	subs	r3, #1
 8007934:	7023      	strb	r3, [r4, #0]
    void clear() noexcept
    {
        for ( size_type i = super::head(); i != NODE_NONE; ) {
            varray_[i].~value_type();
            auto k = i;
            i      = super::next( i );
 8007936:	4633      	mov	r3, r6
 8007938:	e7bb      	b.n	80078b2 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x16>
 800793a:	4620      	mov	r0, r4
 800793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793e:	bf00      	nop
 8007940:	0800e260 	.word	0x0800e260
 8007944:	0800e9e8 	.word	0x0800e9e8
 8007948:	0800e274 	.word	0x0800e274
 800794c:	0800e2a8 	.word	0x0800e2a8

08007950 <HW_TIMER_INIT>:
//

/////////////////////////////////////////////////////////////////////////////
// Defs
extern "C" void HW_TIMER_INIT()
{
 8007950:	b530      	push	{r4, r5, lr}
 8007952:	b08b      	sub	sp, #44	; 0x2c
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8007954:	ac06      	add	r4, sp, #24
 8007956:	f04f 0100 	mov.w	r1, #0
 800795a:	4620      	mov	r0, r4
 800795c:	f7ff ff48 	bl	80077f0 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007960:	ad04      	add	r5, sp, #16
 8007962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007966:	e885 0003 	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <HW_TIMER_INIT+0x88>)
 800796c:	f503 6289 	add.w	r2, r3, #1096	; 0x448
 8007970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007974:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8007978:	e895 0003 	ldmia.w	r5, {r0, r1}
 800797c:	e882 0003 	stmia.w	r2, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007980:	9908      	ldr	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 8007982:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 8007986:	9208      	str	r2, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 8007988:	f8c3 1450 	str.w	r1, [r3, #1104]	; 0x450
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800798c:	9909      	ldr	r1, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 800798e:	f8d3 0454 	ldr.w	r0, [r3, #1108]	; 0x454
 8007992:	9009      	str	r0, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
 8007994:	f8c3 1454 	str.w	r1, [r3, #1108]	; 0x454

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8007998:	b122      	cbz	r2, 80079a4 <HW_TIMER_INIT+0x54>
 800799a:	4613      	mov	r3, r2
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800799c:	2203      	movs	r2, #3
 800799e:	a906      	add	r1, sp, #24
 80079a0:	4608      	mov	r0, r1
 80079a2:	4798      	blx	r3
    s_tim.tick_function( []() { return API_GetTime_us(); } );

    sTimerTask = xTaskCreateStatic(
 80079a4:	4b0d      	ldr	r3, [pc, #52]	; (80079dc <HW_TIMER_INIT+0x8c>)
 80079a6:	9302      	str	r3, [sp, #8]
 80079a8:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <HW_TIMER_INIT+0x90>)
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	2334      	movs	r3, #52	; 0x34
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b6:	490b      	ldr	r1, [pc, #44]	; (80079e4 <HW_TIMER_INIT+0x94>)
 80079b8:	480b      	ldr	r0, [pc, #44]	; (80079e8 <HW_TIMER_INIT+0x98>)
 80079ba:	f7fd fb37 	bl	800502c <xTaskCreateStatic>
        "TIMER",
        sizeof( sTimerStack ) / sizeof( *sTimerStack ),
        NULL,
        osPriorityRealtime4,
        sTimerStack,
        &sTimerTaskStaticCb );
 80079be:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <HW_TIMER_INIT+0x9c>)
 80079c0:	6018      	str	r0, [r3, #0]

    HAL_TIM_Base_Start_IT( &htim );
 80079c2:	4c0b      	ldr	r4, [pc, #44]	; (80079f0 <HW_TIMER_INIT+0xa0>)
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7fc fb77 	bl	80040b8 <HAL_TIM_Base_Start_IT>
    TIM_CCxChannelCmd( htim.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE );
 80079ca:	2201      	movs	r2, #1
 80079cc:	2100      	movs	r1, #0
 80079ce:	6820      	ldr	r0, [r4, #0]
 80079d0:	f7fc fd76 	bl	80044c0 <TIM_CCxChannelCmd>
}
 80079d4:	b00b      	add	sp, #44	; 0x2c
 80079d6:	bd30      	pop	{r4, r5, pc}
 80079d8:	20004880 	.word	0x20004880
 80079dc:	200054e4 	.word	0x200054e4
 80079e0:	20004ce4 	.word	0x20004ce4
 80079e4:	0800e2c0 	.word	0x0800e2c0
 80079e8:	08007ad9 	.word	0x08007ad9
 80079ec:	20004ce0 	.word	0x20004ce0
 80079f0:	200062c4 	.word	0x200062c4
 80079f4:	00000000 	.word	0x00000000

080079f8 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler( void )
{
 80079f8:	b530      	push	{r4, r5, lr}
 80079fa:	b083      	sub	sp, #12
    // If it's update interrupt, accumulates 1000 second to total time
    if ( __HAL_TIM_GET_FLAG( &htim, TIM_FLAG_UPDATE ) != RESET ) {
 80079fc:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <TIM2_IRQHandler+0x70>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691a      	ldr	r2, [r3, #16]
 8007a02:	f012 0f01 	tst.w	r2, #1
 8007a06:	d00c      	beq.n	8007a22 <TIM2_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG( &htim, TIM_FLAG_UPDATE );
 8007a08:	f06f 0201 	mvn.w	r2, #1
 8007a0c:	611a      	str	r2, [r3, #16]
        s_total_us += (int)1e9;
 8007a0e:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <TIM2_IRQHandler+0x74>)
 8007a10:	e9d2 4500 	ldrd	r4, r5, [r2]
 8007a14:	a112      	add	r1, pc, #72	; (adr r1, 8007a60 <TIM2_IRQHandler+0x68>)
 8007a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a1a:	1900      	adds	r0, r0, r4
 8007a1c:	4169      	adcs	r1, r5
 8007a1e:	e9c2 0100 	strd	r0, r1, [r2]
    }

    // If it's oc interrupt, process hwtimer event and switch to timer task
    if ( __HAL_TIM_GET_FLAG( &htim, TIM_FLAG_CC1 ) != RESET ) {
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	f012 0f02 	tst.w	r2, #2
 8007a28:	d001      	beq.n	8007a2e <TIM2_IRQHandler+0x36>
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	e000      	b.n	8007a30 <TIM2_IRQHandler+0x38>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	b1a2      	cbz	r2, 8007a5c <TIM2_IRQHandler+0x64>
        __HAL_TIM_CLEAR_FLAG( &htim, TIM_FLAG_CC1 );
 8007a32:	f06f 0202 	mvn.w	r2, #2
 8007a36:	611a      	str	r2, [r3, #16]
        BaseType_t bHigherTaskPriorityWoken = pdFALSE;
 8007a38:	a902      	add	r1, sp, #8
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f841 3d04 	str.w	r3, [r1, #-4]!
        vTaskNotifyGiveFromISR( sTimerTask, &bHigherTaskPriorityWoken );
 8007a40:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <TIM2_IRQHandler+0x78>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	f7fd ff10 	bl	8005868 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR( bHigherTaskPriorityWoken );
 8007a48:	9b01      	ldr	r3, [sp, #4]
 8007a4a:	b13b      	cbz	r3, 8007a5c <TIM2_IRQHandler+0x64>
 8007a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a50:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <TIM2_IRQHandler+0x7c>)
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	f3bf 8f6f 	isb	sy
    }
}
 8007a5c:	b003      	add	sp, #12
 8007a5e:	bd30      	pop	{r4, r5, pc}
 8007a60:	3b9aca00 	.word	0x3b9aca00
 8007a64:	00000000 	.word	0x00000000
 8007a68:	200062c4 	.word	0x200062c4
 8007a6c:	20000188 	.word	0x20000188
 8007a70:	20004ce0 	.word	0x20004ce0
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <API_GetTime_us>:

extern "C" usec_t API_GetTime_us()
{
 8007a78:	f84d bd04 	str.w	fp, [sp, #-4]!
    return s_total_us + GET_TICK();
 8007a7c:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <API_GetTime_us+0x24>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007a82:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <API_GetTime_us+0x28>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8007a88:	eb12 0b00 	adds.w	fp, r2, r0
 8007a8c:	f143 0c00 	adc.w	ip, r3, #0
 8007a90:	4658      	mov	r0, fp
 8007a92:	4661      	mov	r1, ip
 8007a94:	f85d bb04 	ldr.w	fp, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	200062c4 	.word	0x200062c4
 8007aa0:	20000188 	.word	0x20000188

08007aa4 <_ZNSt17_Function_handlerIFyvEZ13HW_TIMER_INITEUlvE_E9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007aa4:	b508      	push	{r3, lr}

/////////////////////////////////////////////////////////////////////////////
// Defs
extern "C" void HW_TIMER_INIT()
{
    s_tim.tick_function( []() { return API_GetTime_us(); } );
 8007aa6:	f7ff ffe7 	bl	8007a78 <API_GetTime_us>
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 8007aaa:	bd08      	pop	{r3, pc}

08007aac <_ZSt25__throw_bad_function_callv>:
}

// This code is a dummy function to prevent link errors that occur when using the std :: function class.
namespace std {
void __throw_bad_function_call()
{
 8007aac:	b508      	push	{r3, lr}
    uassert( false );
 8007aae:	4b03      	ldr	r3, [pc, #12]	; (8007abc <_ZSt25__throw_bad_function_callv+0x10>)
 8007ab0:	4a03      	ldr	r2, [pc, #12]	; (8007ac0 <_ZSt25__throw_bad_function_callv+0x14>)
 8007ab2:	2186      	movs	r1, #134	; 0x86
 8007ab4:	4803      	ldr	r0, [pc, #12]	; (8007ac4 <_ZSt25__throw_bad_function_callv+0x18>)
 8007ab6:	f000 fb91 	bl	80081dc <__assert_func>
 8007aba:	bf00      	nop
 8007abc:	0800e328 	.word	0x0800e328
 8007ac0:	0800e238 	.word	0x0800e238
 8007ac4:	0800e330 	.word	0x0800e330

08007ac8 <_ZNKSt8functionIFyvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8007ac8:	b508      	push	{r3, lr}
      if (_M_manager)
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }
 8007aca:	6883      	ldr	r3, [r0, #8]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8007acc:	b90b      	cbnz	r3, 8007ad2 <_ZNKSt8functionIFyvEEclEv+0xa>
	__throw_bad_function_call();
 8007ace:	f7ff ffed 	bl	8007aac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007ad2:	68c3      	ldr	r3, [r0, #12]
 8007ad4:	4798      	blx	r3
    }
 8007ad6:	bd08      	pop	{r3, pc}

08007ad8 <_ZL15TimerUpdateTaskPv>:
    s_tim.remove( { h } );
    taskEXIT_CRITICAL();
}

_Noreturn void TimerUpdateTask( void* nouse__ )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08c      	sub	sp, #48	; 0x30
    for ( ;; ) {
        ulTaskNotifyTake( pdTRUE, 100 );
 8007adc:	2164      	movs	r1, #100	; 0x64
 8007ade:	2001      	movs	r0, #1
 8007ae0:	f7fd fe18 	bl	8005714 <ulTaskNotifyTake>

        __HAL_TIM_DISABLE_IT( &htim, TIM_FLAG_CC1 );
 8007ae4:	4b8e      	ldr	r3, [pc, #568]	; (8007d20 <_ZL15TimerUpdateTaskPv+0x248>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68d3      	ldr	r3, [r2, #12]
 8007aea:	f023 0302 	bic.w	r3, r3, #2
 8007aee:	60d3      	str	r3, [r2, #12]
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8007af0:	4b8c      	ldr	r3, [pc, #560]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007af2:	9302      	str	r3, [sp, #8]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007af4:	789b      	ldrb	r3, [r3, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 8007af6:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    iterator begin() noexcept
    {
        auto d = cbegin();
        return static_cast<iterator&>( d );
 8007afa:	aa02      	add	r2, sp, #8
 8007afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b00:	e88d 0003 	stmia.w	sp, {r0, r1}
    fslist_const_iterator<dty_, nty_>& operator--() noexcept;
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
 8007b04:	9a00      	ldr	r2, [sp, #0]
 8007b06:	4b87      	ldr	r3, [pc, #540]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d105      	bne.n	8007b18 <_ZL15TimerUpdateTaskPv+0x40>
 8007b0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007b10:	2bff      	cmp	r3, #255	; 0xff
 8007b12:	d003      	beq.n	8007b1c <_ZL15TimerUpdateTaskPv+0x44>
 8007b14:	2401      	movs	r4, #1
 8007b16:	e002      	b.n	8007b1e <_ZL15TimerUpdateTaskPv+0x46>
 8007b18:	2401      	movs	r4, #1
 8007b1a:	e000      	b.n	8007b1e <_ZL15TimerUpdateTaskPv+0x46>
 8007b1c:	2400      	movs	r4, #0
        return true;
    }

    tick_type update() noexcept
    {
        for ( auto it = node_.begin();
 8007b1e:	b36c      	cbz	r4, 8007b7c <_ZL15TimerUpdateTaskPv+0xa4>

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return c->get_arg( cur_ );
 8007b20:	f89d 3004 	ldrb.w	r3, [sp, #4]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007b24:	2bff      	cmp	r3, #255	; 0xff
 8007b26:	d106      	bne.n	8007b36 <_ZL15TimerUpdateTaskPv+0x5e>
 8007b28:	4b7f      	ldr	r3, [pc, #508]	; (8007d28 <_ZL15TimerUpdateTaskPv+0x250>)
 8007b2a:	4a80      	ldr	r2, [pc, #512]	; (8007d2c <_ZL15TimerUpdateTaskPv+0x254>)
 8007b2c:	f240 11af 	movw	r1, #431	; 0x1af
 8007b30:	487f      	ldr	r0, [pc, #508]	; (8007d30 <_ZL15TimerUpdateTaskPv+0x258>)
 8007b32:	f000 fb53 	bl	80081dc <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007b36:	2bff      	cmp	r3, #255	; 0xff
 8007b38:	d008      	beq.n	8007b4c <_ZL15TimerUpdateTaskPv+0x74>
 8007b3a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007b3e:	6890      	ldr	r0, [r2, #8]
 8007b40:	4401      	add	r1, r0
 8007b42:	7889      	ldrb	r1, [r1, #2]
 8007b44:	29ff      	cmp	r1, #255	; 0xff
 8007b46:	d102      	bne.n	8007b4e <_ZL15TimerUpdateTaskPv+0x76>
 8007b48:	2400      	movs	r4, #0
 8007b4a:	e000      	b.n	8007b4e <_ZL15TimerUpdateTaskPv+0x76>
 8007b4c:	2400      	movs	r4, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8007b4e:	b934      	cbnz	r4, 8007b5e <_ZL15TimerUpdateTaskPv+0x86>
 8007b50:	4b78      	ldr	r3, [pc, #480]	; (8007d34 <_ZL15TimerUpdateTaskPv+0x25c>)
 8007b52:	4a76      	ldr	r2, [pc, #472]	; (8007d2c <_ZL15TimerUpdateTaskPv+0x254>)
 8007b54:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007b58:	4875      	ldr	r0, [pc, #468]	; (8007d30 <_ZL15TimerUpdateTaskPv+0x258>)
 8007b5a:	f000 fb3f 	bl	80081dc <__assert_func>
        return varray_ + node;
 8007b5e:	68d1      	ldr	r1, [r2, #12]
 8007b60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007b64:	00da      	lsls	r2, r3, #3
 8007b66:	440a      	add	r2, r1
              it != node_.end() && it->trigger_at_ <= tick_();
 8007b68:	e9d2 6702 	ldrd	r6, r7, [r2, #8]
 8007b6c:	4872      	ldr	r0, [pc, #456]	; (8007d38 <_ZL15TimerUpdateTaskPv+0x260>)
 8007b6e:	f7ff ffab 	bl	8007ac8 <_ZNKSt8functionIFyvEEclEv>
        return true;
    }

    tick_type update() noexcept
    {
        for ( auto it = node_.begin();
 8007b72:	42b9      	cmp	r1, r7
 8007b74:	bf08      	it	eq
 8007b76:	42b0      	cmpeq	r0, r6
 8007b78:	d200      	bcs.n	8007b7c <_ZL15TimerUpdateTaskPv+0xa4>
 8007b7a:	2400      	movs	r4, #0
 8007b7c:	2c00      	cmp	r4, #0
 8007b7e:	f000 8088 	beq.w	8007c92 <_ZL15TimerUpdateTaskPv+0x1ba>
}

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
 8007b82:	9900      	ldr	r1, [sp, #0]
    return c->get_arg( cur_ );
 8007b84:	f89d 3004 	ldrb.w	r3, [sp, #4]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007b88:	2bff      	cmp	r3, #255	; 0xff
 8007b8a:	d106      	bne.n	8007b9a <_ZL15TimerUpdateTaskPv+0xc2>
 8007b8c:	4b66      	ldr	r3, [pc, #408]	; (8007d28 <_ZL15TimerUpdateTaskPv+0x250>)
 8007b8e:	4a67      	ldr	r2, [pc, #412]	; (8007d2c <_ZL15TimerUpdateTaskPv+0x254>)
 8007b90:	f240 11af 	movw	r1, #431	; 0x1af
 8007b94:	4866      	ldr	r0, [pc, #408]	; (8007d30 <_ZL15TimerUpdateTaskPv+0x258>)
 8007b96:	f000 fb21 	bl	80081dc <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007b9a:	2bff      	cmp	r3, #255	; 0xff
 8007b9c:	d008      	beq.n	8007bb0 <_ZL15TimerUpdateTaskPv+0xd8>
 8007b9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007ba2:	6888      	ldr	r0, [r1, #8]
 8007ba4:	4402      	add	r2, r0
 8007ba6:	7892      	ldrb	r2, [r2, #2]
 8007ba8:	2aff      	cmp	r2, #255	; 0xff
 8007baa:	d102      	bne.n	8007bb2 <_ZL15TimerUpdateTaskPv+0xda>
 8007bac:	2400      	movs	r4, #0
 8007bae:	e000      	b.n	8007bb2 <_ZL15TimerUpdateTaskPv+0xda>
 8007bb0:	2400      	movs	r4, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8007bb2:	b934      	cbnz	r4, 8007bc2 <_ZL15TimerUpdateTaskPv+0xea>
 8007bb4:	4b5f      	ldr	r3, [pc, #380]	; (8007d34 <_ZL15TimerUpdateTaskPv+0x25c>)
 8007bb6:	4a5d      	ldr	r2, [pc, #372]	; (8007d2c <_ZL15TimerUpdateTaskPv+0x254>)
 8007bb8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007bbc:	485c      	ldr	r0, [pc, #368]	; (8007d30 <_ZL15TimerUpdateTaskPv+0x258>)
 8007bbe:	f000 fb0d 	bl	80081dc <__assert_func>
        return varray_ + node;
 8007bc2:	68c9      	ldr	r1, [r1, #12]
 8007bc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007bc8:	00da      	lsls	r2, r3, #3
 8007bca:	188b      	adds	r3, r1, r2
              it != node_.end() && it->trigger_at_ <= tick_();
              it = node_.begin() ) {
            auto cb  = it->cb_;
 8007bcc:	695d      	ldr	r5, [r3, #20]
            auto obj = it->obj_;
 8007bce:	6918      	ldr	r0, [r3, #16]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007bd0:	4b54      	ldr	r3, [pc, #336]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007bd2:	789a      	ldrb	r2, [r3, #2]
    template <typename ty1_, typename ty2_>
    friend class fslist_const_iterator;

    void release( size_type n )
    {
        uassert( n != NODE_NONE );
 8007bd4:	2aff      	cmp	r2, #255	; 0xff
 8007bd6:	d106      	bne.n	8007be6 <_ZL15TimerUpdateTaskPv+0x10e>
 8007bd8:	4b58      	ldr	r3, [pc, #352]	; (8007d3c <_ZL15TimerUpdateTaskPv+0x264>)
 8007bda:	4a59      	ldr	r2, [pc, #356]	; (8007d40 <_ZL15TimerUpdateTaskPv+0x268>)
 8007bdc:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8007be0:	4853      	ldr	r0, [pc, #332]	; (8007d30 <_ZL15TimerUpdateTaskPv+0x258>)
 8007be2:	f000 fafb 	bl	80081dc <__assert_func>
        }
    }

    void dealloc_node( size_type i ) noexcept
    {
        auto& n = narray_[i];
 8007be6:	4b4f      	ldr	r3, [pc, #316]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007be8:	689e      	ldr	r6, [r3, #8]
 8007bea:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8007bee:	19f1      	adds	r1, r6, r7
        uassert( n.cur_ != NODE_NONE );
 8007bf0:	788b      	ldrb	r3, [r1, #2]
 8007bf2:	2bff      	cmp	r3, #255	; 0xff
 8007bf4:	d105      	bne.n	8007c02 <_ZL15TimerUpdateTaskPv+0x12a>
 8007bf6:	4b53      	ldr	r3, [pc, #332]	; (8007d44 <_ZL15TimerUpdateTaskPv+0x26c>)
 8007bf8:	4a53      	ldr	r2, [pc, #332]	; (8007d48 <_ZL15TimerUpdateTaskPv+0x270>)
 8007bfa:	216b      	movs	r1, #107	; 0x6b
 8007bfc:	484c      	ldr	r0, [pc, #304]	; (8007d30 <_ZL15TimerUpdateTaskPv+0x258>)
 8007bfe:	f000 faed 	bl	80081dc <__assert_func>
        uassert( i >= 0 && i < capacity_ );
 8007c02:	4b48      	ldr	r3, [pc, #288]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d305      	bcc.n	8007c16 <_ZL15TimerUpdateTaskPv+0x13e>
 8007c0a:	4b50      	ldr	r3, [pc, #320]	; (8007d4c <_ZL15TimerUpdateTaskPv+0x274>)
 8007c0c:	4a4e      	ldr	r2, [pc, #312]	; (8007d48 <_ZL15TimerUpdateTaskPv+0x270>)
 8007c0e:	216c      	movs	r1, #108	; 0x6c
 8007c10:	4847      	ldr	r0, [pc, #284]	; (8007d30 <_ZL15TimerUpdateTaskPv+0x258>)
 8007c12:	f000 fae3 	bl	80081dc <__assert_func>

        if ( n.nxt_ != NODE_NONE ) {
 8007c16:	5df3      	ldrb	r3, [r6, r7]
 8007c18:	2bff      	cmp	r3, #255	; 0xff
 8007c1a:	d005      	beq.n	8007c28 <_ZL15TimerUpdateTaskPv+0x150>
            narray_[n.nxt_].prv_ = n.prv_;
 8007c1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007c20:	4433      	add	r3, r6
 8007c22:	784c      	ldrb	r4, [r1, #1]
 8007c24:	705c      	strb	r4, [r3, #1]
 8007c26:	e002      	b.n	8007c2e <_ZL15TimerUpdateTaskPv+0x156>
        }
        else { // It's tail
            tail_ = n.prv_;
 8007c28:	784c      	ldrb	r4, [r1, #1]
 8007c2a:	4b3e      	ldr	r3, [pc, #248]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007c2c:	70dc      	strb	r4, [r3, #3]
        }

        if ( n.prv_ != NODE_NONE ) {
 8007c2e:	784b      	ldrb	r3, [r1, #1]
 8007c30:	2bff      	cmp	r3, #255	; 0xff
 8007c32:	d008      	beq.n	8007c46 <_ZL15TimerUpdateTaskPv+0x16e>
            narray_[n.prv_].nxt_ = n.nxt_;
 8007c34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007c38:	4c3a      	ldr	r4, [pc, #232]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007c3a:	68a4      	ldr	r4, [r4, #8]
 8007c3c:	f816 e007 	ldrb.w	lr, [r6, r7]
 8007c40:	f804 e003 	strb.w	lr, [r4, r3]
 8007c44:	e002      	b.n	8007c4c <_ZL15TimerUpdateTaskPv+0x174>
        }
        else { // It's head
            head_ = n.nxt_;
 8007c46:	5df4      	ldrb	r4, [r6, r7]
 8007c48:	4b36      	ldr	r3, [pc, #216]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007c4a:	709c      	strb	r4, [r3, #2]
        }

        if ( idle_ != NODE_NONE ) {
 8007c4c:	4b35      	ldr	r3, [pc, #212]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007c4e:	791b      	ldrb	r3, [r3, #4]
 8007c50:	2bff      	cmp	r3, #255	; 0xff
 8007c52:	d005      	beq.n	8007c60 <_ZL15TimerUpdateTaskPv+0x188>
            narray_[idle_].prv_ = i;
 8007c54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007c58:	4c32      	ldr	r4, [pc, #200]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007c5a:	68a4      	ldr	r4, [r4, #8]
 8007c5c:	4423      	add	r3, r4
 8007c5e:	705a      	strb	r2, [r3, #1]
        }
        n.prv_ = NODE_NONE;
 8007c60:	23ff      	movs	r3, #255	; 0xff
 8007c62:	704b      	strb	r3, [r1, #1]
        n.cur_ = NODE_NONE;
 8007c64:	708b      	strb	r3, [r1, #2]
        n.nxt_ = idle_;
 8007c66:	4c2f      	ldr	r4, [pc, #188]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007c68:	7923      	ldrb	r3, [r4, #4]
 8007c6a:	55f3      	strb	r3, [r6, r7]
        idle_  = i;
 8007c6c:	7122      	strb	r2, [r4, #4]
        --size_;
 8007c6e:	7823      	ldrb	r3, [r4, #0]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	7023      	strb	r3, [r4, #0]

            node_.pop_front();
            cb( obj );
 8007c74:	47a8      	blx	r5
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8007c76:	9402      	str	r4, [sp, #8]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007c78:	78a3      	ldrb	r3, [r4, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 8007c7a:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    iterator begin() noexcept
    {
        auto d = cbegin();
        return static_cast<iterator&>( d );
 8007c7e:	ab0a      	add	r3, sp, #40	; 0x28
 8007c80:	aa02      	add	r2, sp, #8
 8007c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c86:	e883 0003 	stmia.w	r3, {r0, r1}
        return true;
    }

    tick_type update() noexcept
    {
        for ( auto it = node_.begin();
 8007c8a:	9000      	str	r0, [sp, #0]
 8007c8c:	f88d 1004 	strb.w	r1, [sp, #4]
 8007c90:	e738      	b.n	8007b04 <_ZL15TimerUpdateTaskPv+0x2c>

public:
    size_type max_size() const noexcept { return capacity_; }
    size_type capacity() const noexcept { return capacity_ - size_; }
    size_type size() const noexcept { return size_; }
    bool      empty() const noexcept { return size_ == 0; }
 8007c92:	4b24      	ldr	r3, [pc, #144]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
        }
    }

    tick_type next_trig() const noexcept
    {
        if ( empty() ) {
 8007c96:	b323      	cbz	r3, 8007ce2 <_ZL15TimerUpdateTaskPv+0x20a>
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007c98:	4b22      	ldr	r3, [pc, #136]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007c9a:	789b      	ldrb	r3, [r3, #2]
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007c9c:	2bff      	cmp	r3, #255	; 0xff
 8007c9e:	d008      	beq.n	8007cb2 <_ZL15TimerUpdateTaskPv+0x1da>
 8007ca0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007ca4:	491f      	ldr	r1, [pc, #124]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007ca6:	6889      	ldr	r1, [r1, #8]
 8007ca8:	440a      	add	r2, r1
 8007caa:	7892      	ldrb	r2, [r2, #2]
 8007cac:	2aff      	cmp	r2, #255	; 0xff
 8007cae:	d000      	beq.n	8007cb2 <_ZL15TimerUpdateTaskPv+0x1da>
 8007cb0:	2401      	movs	r4, #1
        return static_cast<iterator&>( d );
    }

    const_reference front() const noexcept
    {
        uassert( super::valid_node( super::head() ) );
 8007cb2:	b934      	cbnz	r4, 8007cc2 <_ZL15TimerUpdateTaskPv+0x1ea>
 8007cb4:	4b26      	ldr	r3, [pc, #152]	; (8007d50 <_ZL15TimerUpdateTaskPv+0x278>)
 8007cb6:	4a27      	ldr	r2, [pc, #156]	; (8007d54 <_ZL15TimerUpdateTaskPv+0x27c>)
 8007cb8:	f240 1157 	movw	r1, #343	; 0x157
 8007cbc:	481c      	ldr	r0, [pc, #112]	; (8007d30 <_ZL15TimerUpdateTaskPv+0x258>)
 8007cbe:	f000 fa8d 	bl	80081dc <__assert_func>
        return varray_[super::head()];
 8007cc2:	4a18      	ldr	r2, [pc, #96]	; (8007d24 <_ZL15TimerUpdateTaskPv+0x24c>)
 8007cc4:	68d4      	ldr	r4, [r2, #12]
 8007cc6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007cca:	00d3      	lsls	r3, r2, #3
 8007ccc:	ad04      	add	r5, sp, #16
 8007cce:	441c      	add	r4, r3
 8007cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007cd8:	e885 0003 	stmia.w	r5, {r0, r1}
            return TIMER_INVALID;
        }
        return node_.front().trigger_at_;
 8007cdc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007ce0:	e003      	b.n	8007cea <_ZL15TimerUpdateTaskPv+0x212>
    }

    tick_type next_trig() const noexcept
    {
        if ( empty() ) {
            return TIMER_INVALID;
 8007ce2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ce6:	f04f 35ff 	mov.w	r5, #4294967295
        auto next = s_tim.update();

        if ( next != (usec_t)-1 ) {
 8007cea:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007cee:	bf08      	it	eq
 8007cf0:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8007cf4:	f43f aef2 	beq.w	8007adc <_ZL15TimerUpdateTaskPv+0x4>
            int delay = next - API_GetTime_us();
 8007cf8:	f7ff febe 	bl	8007a78 <API_GetTime_us>
 8007cfc:	1a20      	subs	r0, r4, r0
            int cnt   = htim.Instance->CNT;
 8007cfe:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <_ZL15TimerUpdateTaskPv+0x248>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            int arr   = htim.Instance->ARR;
 8007d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

            if ( cnt + delay > arr )
 8007d06:	4410      	add	r0, r2
 8007d08:	4281      	cmp	r1, r0
 8007d0a:	da02      	bge.n	8007d12 <_ZL15TimerUpdateTaskPv+0x23a>
                htim.Instance->CCR1 = ( cnt + delay ) - arr;
 8007d0c:	1a40      	subs	r0, r0, r1
 8007d0e:	6358      	str	r0, [r3, #52]	; 0x34
 8007d10:	e000      	b.n	8007d14 <_ZL15TimerUpdateTaskPv+0x23c>
            else
                htim.Instance->CCR1 = ( cnt + delay );
 8007d12:	6358      	str	r0, [r3, #52]	; 0x34

            __HAL_TIM_ENABLE_IT( &htim, TIM_FLAG_CC1 );
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	f042 0202 	orr.w	r2, r2, #2
 8007d1a:	60da      	str	r2, [r3, #12]
 8007d1c:	e6de      	b.n	8007adc <_ZL15TimerUpdateTaskPv+0x4>
 8007d1e:	bf00      	nop
 8007d20:	200062c4 	.word	0x200062c4
 8007d24:	20004880 	.word	0x20004880
 8007d28:	0800e2c8 	.word	0x0800e2c8
 8007d2c:	0800ded4 	.word	0x0800ded4
 8007d30:	0800e274 	.word	0x0800e274
 8007d34:	0800e2dc 	.word	0x0800e2dc
 8007d38:	20004cc8 	.word	0x20004cc8
 8007d3c:	0800e318 	.word	0x0800e318
 8007d40:	0800e5f0 	.word	0x0800e5f0
 8007d44:	0800e260 	.word	0x0800e260
 8007d48:	0800e9e8 	.word	0x0800e9e8
 8007d4c:	0800e2a8 	.word	0x0800e2a8
 8007d50:	0800e348 	.word	0x0800e348
 8007d54:	0800e0b0 	.word	0x0800e0b0

08007d58 <API_SetTimer>:
{
    return s_total_us + GET_TICK();
}

extern "C" timer_handle_t API_SetTimer( usec_t delay, void* obj, void ( *cb )( void* ) )
{
 8007d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5c:	b09e      	sub	sp, #120	; 0x78
 8007d5e:	4615      	mov	r5, r2
 8007d60:	4698      	mov	r8, r3
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }

public:
    size_type max_size() const noexcept { return capacity_; }
 8007d62:	4b9e      	ldr	r3, [pc, #632]	; (8007fdc <API_SetTimer+0x284>)
 8007d64:	785a      	ldrb	r2, [r3, #1]
    size_type capacity() const noexcept { return capacity_ - size_; }
    size_type size() const noexcept { return size_; }
 8007d66:	781b      	ldrb	r3, [r3, #0]
    uassert( s_tim.capacity() > 0 );
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d105      	bne.n	8007d78 <API_SetTimer+0x20>
 8007d6c:	4b9c      	ldr	r3, [pc, #624]	; (8007fe0 <API_SetTimer+0x288>)
 8007d6e:	4a9d      	ldr	r2, [pc, #628]	; (8007fe4 <API_SetTimer+0x28c>)
 8007d70:	2150      	movs	r1, #80	; 0x50
 8007d72:	489d      	ldr	r0, [pc, #628]	; (8007fe8 <API_SetTimer+0x290>)
 8007d74:	f000 fa32 	bl	80081dc <__assert_func>
 8007d78:	4606      	mov	r6, r0
 8007d7a:	460f      	mov	r7, r1
    taskENTER_CRITICAL();
 8007d7c:	f7fe fa3a 	bl	80061f4 <vPortEnterCritical>
      if (_M_manager)
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }
 8007d80:	4b96      	ldr	r3, [pc, #600]	; (8007fdc <API_SetTimer+0x284>)
 8007d82:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
    template <class tick_fnc__>
    void tick_function( tick_fnc__&& v ) noexcept { tick_ = std::forward<tick_fnc__>( v ); }

    handle_type add( tick_type delay, void* obj, timer_cb_t callback ) noexcept
    {
        uassert( tick_ );
 8007d86:	b92b      	cbnz	r3, 8007d94 <API_SetTimer+0x3c>
 8007d88:	4b98      	ldr	r3, [pc, #608]	; (8007fec <API_SetTimer+0x294>)
 8007d8a:	4a99      	ldr	r2, [pc, #612]	; (8007ff0 <API_SetTimer+0x298>)
 8007d8c:	212d      	movs	r1, #45	; 0x2d
 8007d8e:	4899      	ldr	r0, [pc, #612]	; (8007ff4 <API_SetTimer+0x29c>)
 8007d90:	f000 fa24 	bl	80081dc <__assert_func>
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }

public:
    size_type max_size() const noexcept { return capacity_; }
 8007d94:	4b91      	ldr	r3, [pc, #580]	; (8007fdc <API_SetTimer+0x284>)
 8007d96:	785a      	ldrb	r2, [r3, #1]
    size_type capacity() const noexcept { return capacity_ - size_; }
    size_type size() const noexcept { return size_; }
 8007d98:	781b      	ldrb	r3, [r3, #0]
        uassert( capacity() );
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d105      	bne.n	8007daa <API_SetTimer+0x52>
 8007d9e:	4b96      	ldr	r3, [pc, #600]	; (8007ff8 <API_SetTimer+0x2a0>)
 8007da0:	4a93      	ldr	r2, [pc, #588]	; (8007ff0 <API_SetTimer+0x298>)
 8007da2:	212e      	movs	r1, #46	; 0x2e
 8007da4:	4893      	ldr	r0, [pc, #588]	; (8007ff4 <API_SetTimer+0x29c>)
 8007da6:	f000 fa19 	bl	80081dc <__assert_func>

        desc_type d;
        d.trigger_at_ = delay + tick_();
 8007daa:	4c8c      	ldr	r4, [pc, #560]	; (8007fdc <API_SetTimer+0x284>)
 8007dac:	f504 6089 	add.w	r0, r4, #1096	; 0x448
 8007db0:	f7ff fe8a 	bl	8007ac8 <_ZNKSt8functionIFyvEEclEv>
 8007db4:	1980      	adds	r0, r0, r6
 8007db6:	4179      	adcs	r1, r7
 8007db8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
        d.cb_         = callback;
 8007dbc:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
        d.obj_        = obj;
 8007dc0:	9518      	str	r5, [sp, #96]	; 0x60
        d.id_         = id_gen_++;
 8007dc2:	f504 618b 	add.w	r1, r4, #1112	; 0x458
 8007dc6:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007dca:	1c56      	adds	r6, r2, #1
 8007dcc:	f143 0700 	adc.w	r7, r3, #0
 8007dd0:	e9c1 6700 	strd	r6, r7, [r1]
 8007dd4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8007dd8:	9412      	str	r4, [sp, #72]	; 0x48
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8007dda:	78a3      	ldrb	r3, [r4, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 8007ddc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    }

    iterator begin() noexcept
    {
        auto d = cbegin();
        return static_cast<iterator&>( d );
 8007de0:	ad1c      	add	r5, sp, #112	; 0x70
 8007de2:	ab12      	add	r3, sp, #72	; 0x48
 8007de4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007de8:	e885 0003 	stmia.w	r5, {r0, r1}

    const_iterator cend() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = NODE_NONE;
 8007dec:	22ff      	movs	r2, #255	; 0xff
 8007dee:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
        return static_cast<iterator&>( d );
    }
    iterator end() noexcept
    {
        auto d = cend();
        return static_cast<iterator&>( d );
 8007df2:	aa1a      	add	r2, sp, #104	; 0x68
 8007df4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007df8:	e882 0003 	stmia.w	r2, {r0, r1}
 8007dfc:	ab06      	add	r3, sp, #24
 8007dfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e02:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e06:	ac08      	add	r4, sp, #32
 8007e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e0c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e10:	aa0c      	add	r2, sp, #48	; 0x30
 8007e12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e16:	e882 0003 	stmia.w	r2, {r0, r1}
 8007e1a:	ab0a      	add	r3, sp, #40	; 0x28
 8007e1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e20:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e24:	ac0e      	add	r4, sp, #56	; 0x38
 8007e26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e2a:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e2e:	aa10      	add	r2, sp, #64	; 0x40
 8007e30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e34:	e882 0003 	stmia.w	r2, {r0, r1}
    fslist_const_iterator<dty_, nty_>& operator--() noexcept;
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
 8007e38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007e3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d107      	bne.n	8007e50 <API_SetTimer+0xf8>
 8007e40:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8007e44:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d003      	beq.n	8007e54 <API_SetTimer+0xfc>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e002      	b.n	8007e56 <API_SetTimer+0xfe>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <API_SetTimer+0xfe>
 8007e54:	2300      	movs	r3, #0
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
	      _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d031      	beq.n	8007ebe <API_SetTimer+0x166>
 8007e5a:	aa12      	add	r2, sp, #72	; 0x48
 8007e5c:	a90e      	add	r1, sp, #56	; 0x38
 8007e5e:	c903      	ldmia	r1, {r0, r1}
 8007e60:	e882 0003 	stmia.w	r2, {r0, r1}

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::reference fslist_const_iterator<dty_, nty_>::operator*() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return *c->get_arg( cur_ );
 8007e64:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8007e68:	2aff      	cmp	r2, #255	; 0xff
 8007e6a:	d106      	bne.n	8007e7a <API_SetTimer+0x122>
 8007e6c:	4b63      	ldr	r3, [pc, #396]	; (8007ffc <API_SetTimer+0x2a4>)
 8007e6e:	4a64      	ldr	r2, [pc, #400]	; (8008000 <API_SetTimer+0x2a8>)
 8007e70:	f240 11af 	movw	r1, #431	; 0x1af
 8007e74:	4863      	ldr	r0, [pc, #396]	; (8008004 <API_SetTimer+0x2ac>)
 8007e76:	f000 f9b1 	bl	80081dc <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8007e7a:	2aff      	cmp	r2, #255	; 0xff
 8007e7c:	d008      	beq.n	8007e90 <API_SetTimer+0x138>
 8007e7e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8007e82:	68a0      	ldr	r0, [r4, #8]
 8007e84:	4401      	add	r1, r0
 8007e86:	7889      	ldrb	r1, [r1, #2]
 8007e88:	29ff      	cmp	r1, #255	; 0xff
 8007e8a:	d102      	bne.n	8007e92 <API_SetTimer+0x13a>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	e000      	b.n	8007e92 <API_SetTimer+0x13a>
 8007e90:	2300      	movs	r3, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8007e92:	b933      	cbnz	r3, 8007ea2 <API_SetTimer+0x14a>
 8007e94:	4b5c      	ldr	r3, [pc, #368]	; (8008008 <API_SetTimer+0x2b0>)
 8007e96:	4a5a      	ldr	r2, [pc, #360]	; (8008000 <API_SetTimer+0x2a8>)
 8007e98:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007e9c:	4859      	ldr	r0, [pc, #356]	; (8008004 <API_SetTimer+0x2ac>)
 8007e9e:	f000 f99d 	bl	80081dc <__assert_func>
        return varray_ + node;
 8007ea2:	68e0      	ldr	r0, [r4, #12]
 8007ea4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007ea8:	00d1      	lsls	r1, r2, #3
 8007eaa:	4401      	add	r1, r0

        auto at = std::find_if(
            node_.begin(), node_.end(),
            [&d]( auto& a ) { return d.trigger_at_ < a.trigger_at_; } );
 8007eac:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8007eb0:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8007eb4:	428d      	cmp	r5, r1
 8007eb6:	bf08      	it	eq
 8007eb8:	4284      	cmpeq	r4, r0
 8007eba:	d200      	bcs.n	8007ebe <API_SetTimer+0x166>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	b19b      	cbz	r3, 8007ee8 <API_SetTimer+0x190>
};

template <typename dty_, typename nty_>
inline fslist_const_iterator<dty_, nty_>& fslist_const_iterator<dty_, nty_>::operator++() noexcept
{
    uassert( container_ && cur_ != NODE_NONE );
 8007ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ec2:	b11a      	cbz	r2, 8007ecc <API_SetTimer+0x174>
 8007ec4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8007ec8:	2bff      	cmp	r3, #255	; 0xff
 8007eca:	d106      	bne.n	8007eda <API_SetTimer+0x182>
 8007ecc:	4b4f      	ldr	r3, [pc, #316]	; (800800c <API_SetTimer+0x2b4>)
 8007ece:	4a50      	ldr	r2, [pc, #320]	; (8008010 <API_SetTimer+0x2b8>)
 8007ed0:	f240 11bb 	movw	r1, #443	; 0x1bb
 8007ed4:	484b      	ldr	r0, [pc, #300]	; (8008004 <API_SetTimer+0x2ac>)
 8007ed6:	f000 f981 	bl	80081dc <__assert_func>
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 8007eda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007ede:	6892      	ldr	r2, [r2, #8]
 8007ee0:	5cd3      	ldrb	r3, [r2, r3]

template <typename dty_, typename nty_>
inline fslist_const_iterator<dty_, nty_>& fslist_const_iterator<dty_, nty_>::operator++() noexcept
{
    uassert( container_ && cur_ != NODE_NONE );
    cur_ = container_->next( cur_ );
 8007ee2:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8007ee6:	e7a7      	b.n	8007e38 <API_SetTimer+0xe0>
	++__first;
      return __first;
 8007ee8:	aa0e      	add	r2, sp, #56	; 0x38
 8007eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007eee:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007ef2:	9002      	str	r0, [sp, #8]
 8007ef4:	f88d 100c 	strb.w	r1, [sp, #12]
 8007ef8:	ab04      	add	r3, sp, #16
 8007efa:	aa02      	add	r2, sp, #8
 8007efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f00:	e883 0003 	stmia.w	r3, {r0, r1}
    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }

public:
    size_type max_size() const noexcept { return capacity_; }
    size_type capacity() const noexcept { return capacity_ - size_; }
    size_type size() const noexcept { return size_; }
 8007f04:	4b35      	ldr	r3, [pc, #212]	; (8007fdc <API_SetTimer+0x284>)
 8007f06:	781a      	ldrb	r2, [r3, #0]
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }

public:
    size_type max_size() const noexcept { return capacity_; }
 8007f08:	785b      	ldrb	r3, [r3, #1]
    }

    template <typename... ty__>
    iterator emplace( const_iterator pos, ty__&&... args ) noexcept
    {
        uassert( super::size() < super::max_size() );
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d306      	bcc.n	8007f1c <API_SetTimer+0x1c4>
 8007f0e:	4b41      	ldr	r3, [pc, #260]	; (8008014 <API_SetTimer+0x2bc>)
 8007f10:	4a41      	ldr	r2, [pc, #260]	; (8008018 <API_SetTimer+0x2c0>)
 8007f12:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8007f16:	483b      	ldr	r0, [pc, #236]	; (8008004 <API_SetTimer+0x2ac>)
 8007f18:	f000 f960 	bl	80081dc <__assert_func>
        narray_[capacity_ - 1].nxt_ = NODE_NONE;
    }

    size_type alloc_node() noexcept
    {
        uassert( size_ < capacity_ );
 8007f1c:	4b2f      	ldr	r3, [pc, #188]	; (8007fdc <API_SetTimer+0x284>)
 8007f1e:	781a      	ldrb	r2, [r3, #0]
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d305      	bcc.n	8007f32 <API_SetTimer+0x1da>
 8007f26:	4b3d      	ldr	r3, [pc, #244]	; (800801c <API_SetTimer+0x2c4>)
 8007f28:	4a3d      	ldr	r2, [pc, #244]	; (8008020 <API_SetTimer+0x2c8>)
 8007f2a:	2142      	movs	r1, #66	; 0x42
 8007f2c:	4835      	ldr	r0, [pc, #212]	; (8008004 <API_SetTimer+0x2ac>)
 8007f2e:	f000 f955 	bl	80081dc <__assert_func>
        auto& n = narray_[idle_];
 8007f32:	4b2a      	ldr	r3, [pc, #168]	; (8007fdc <API_SetTimer+0x284>)
 8007f34:	689c      	ldr	r4, [r3, #8]
 8007f36:	791a      	ldrb	r2, [r3, #4]
 8007f38:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8007f3c:	1821      	adds	r1, r4, r0
        n.cur_  = idle_;
 8007f3e:	708a      	strb	r2, [r1, #2]
        idle_   = n.nxt_;
 8007f40:	5c22      	ldrb	r2, [r4, r0]
 8007f42:	711a      	strb	r2, [r3, #4]
        ++size_;
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	3201      	adds	r2, #1
 8007f48:	701a      	strb	r2, [r3, #0]
        return n.cur_;
 8007f4a:	788a      	ldrb	r2, [r1, #2]
    template <typename... ty__>
    iterator emplace( const_iterator pos, ty__&&... args ) noexcept
    {
        uassert( super::size() < super::max_size() );
        auto n = super::alloc_node();
        super::insert_node( n, pos.cur_ );
 8007f4c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        return n.cur_;
    }

    void insert_node( size_type i, size_type at ) noexcept
    {
        node_type& n = narray_[i];
 8007f50:	6898      	ldr	r0, [r3, #8]
 8007f52:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8007f56:	1944      	adds	r4, r0, r5
        uassert( n.cur_ != NODE_NONE );
 8007f58:	78a3      	ldrb	r3, [r4, #2]
 8007f5a:	2bff      	cmp	r3, #255	; 0xff
 8007f5c:	d105      	bne.n	8007f6a <API_SetTimer+0x212>
 8007f5e:	4b31      	ldr	r3, [pc, #196]	; (8008024 <API_SetTimer+0x2cc>)
 8007f60:	4a31      	ldr	r2, [pc, #196]	; (8008028 <API_SetTimer+0x2d0>)
 8007f62:	214d      	movs	r1, #77	; 0x4d
 8007f64:	4827      	ldr	r0, [pc, #156]	; (8008004 <API_SetTimer+0x2ac>)
 8007f66:	f000 f939 	bl	80081dc <__assert_func>
        if ( at == NODE_NONE ) {
 8007f6a:	29ff      	cmp	r1, #255	; 0xff
 8007f6c:	d112      	bne.n	8007f94 <API_SetTimer+0x23c>
            n.nxt_ = NODE_NONE;
 8007f6e:	23ff      	movs	r3, #255	; 0xff
 8007f70:	5543      	strb	r3, [r0, r5]
            n.prv_ = tail_;
 8007f72:	4b1a      	ldr	r3, [pc, #104]	; (8007fdc <API_SetTimer+0x284>)
 8007f74:	78d9      	ldrb	r1, [r3, #3]
 8007f76:	7061      	strb	r1, [r4, #1]
            if ( tail_ != NODE_NONE ) {
 8007f78:	78db      	ldrb	r3, [r3, #3]
 8007f7a:	2bff      	cmp	r3, #255	; 0xff
 8007f7c:	d005      	beq.n	8007f8a <API_SetTimer+0x232>
                narray_[tail_].nxt_ = i;
 8007f7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007f82:	4916      	ldr	r1, [pc, #88]	; (8007fdc <API_SetTimer+0x284>)
 8007f84:	6889      	ldr	r1, [r1, #8]
 8007f86:	54ca      	strb	r2, [r1, r3]
 8007f88:	e001      	b.n	8007f8e <API_SetTimer+0x236>
            }
            else { // tail is empty == head is empty
                head_ = i;
 8007f8a:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <API_SetTimer+0x284>)
 8007f8c:	709a      	strb	r2, [r3, #2]
            }
            tail_ = i;
 8007f8e:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <API_SetTimer+0x284>)
 8007f90:	70da      	strb	r2, [r3, #3]
 8007f92:	e057      	b.n	8008044 <API_SetTimer+0x2ec>
        }
        else {
            if ( at == head_ ) {
 8007f94:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <API_SetTimer+0x284>)
 8007f96:	789b      	ldrb	r3, [r3, #2]
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	d101      	bne.n	8007fa0 <API_SetTimer+0x248>
                head_ = i;
 8007f9c:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <API_SetTimer+0x284>)
 8007f9e:	709a      	strb	r2, [r3, #2]
            }
            node_type& n_at = narray_[at];
 8007fa0:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8007fa4:	1983      	adds	r3, r0, r6
            uassert( n_at.cur_ != NODE_NONE );
 8007fa6:	789f      	ldrb	r7, [r3, #2]
 8007fa8:	2fff      	cmp	r7, #255	; 0xff
 8007faa:	d105      	bne.n	8007fb8 <API_SetTimer+0x260>
 8007fac:	4b1f      	ldr	r3, [pc, #124]	; (800802c <API_SetTimer+0x2d4>)
 8007fae:	4a1e      	ldr	r2, [pc, #120]	; (8008028 <API_SetTimer+0x2d0>)
 8007fb0:	215e      	movs	r1, #94	; 0x5e
 8007fb2:	4814      	ldr	r0, [pc, #80]	; (8008004 <API_SetTimer+0x2ac>)
 8007fb4:	f000 f912 	bl	80081dc <__assert_func>
            n.nxt_ = at;
 8007fb8:	5541      	strb	r1, [r0, r5]
            n.prv_ = n_at.prv_;
 8007fba:	7859      	ldrb	r1, [r3, #1]
 8007fbc:	7061      	strb	r1, [r4, #1]
            if ( n_at.prv_ != NODE_NONE ) {
 8007fbe:	785c      	ldrb	r4, [r3, #1]
 8007fc0:	2cff      	cmp	r4, #255	; 0xff
 8007fc2:	d03e      	beq.n	8008042 <API_SetTimer+0x2ea>
    fslist_node<nty_>& next() { return by_( nxt_ ); }

private:
    fslist_node<nty_>& by_( int absolute )
    {
        uassert( nxt_ != NODE_NONE && prv_ != NODE_NONE );
 8007fc4:	5d81      	ldrb	r1, [r0, r6]
 8007fc6:	29ff      	cmp	r1, #255	; 0xff
 8007fc8:	d001      	beq.n	8007fce <API_SetTimer+0x276>
 8007fca:	2cff      	cmp	r4, #255	; 0xff
 8007fcc:	d134      	bne.n	8008038 <API_SetTimer+0x2e0>
 8007fce:	4b18      	ldr	r3, [pc, #96]	; (8008030 <API_SetTimer+0x2d8>)
 8007fd0:	4a18      	ldr	r2, [pc, #96]	; (8008034 <API_SetTimer+0x2dc>)
 8007fd2:	2122      	movs	r1, #34	; 0x22
 8007fd4:	480b      	ldr	r0, [pc, #44]	; (8008004 <API_SetTimer+0x2ac>)
 8007fd6:	f000 f901 	bl	80081dc <__assert_func>
 8007fda:	bf00      	nop
 8007fdc:	20004880 	.word	0x20004880
 8007fe0:	0800e36c 	.word	0x0800e36c
 8007fe4:	0800eaa8 	.word	0x0800eaa8
 8007fe8:	0800e330 	.word	0x0800e330
 8007fec:	0800e384 	.word	0x0800e384
 8007ff0:	0800eae4 	.word	0x0800eae4
 8007ff4:	0800e38c 	.word	0x0800e38c
 8007ff8:	0800e3c0 	.word	0x0800e3c0
 8007ffc:	0800e2c8 	.word	0x0800e2c8
 8008000:	0800ded4 	.word	0x0800ded4
 8008004:	0800e274 	.word	0x0800e274
 8008008:	0800e2dc 	.word	0x0800e2dc
 800800c:	0800e2f8 	.word	0x0800e2f8
 8008010:	0800e534 	.word	0x0800e534
 8008014:	0800e3cc 	.word	0x0800e3cc
 8008018:	0800e7a0 	.word	0x0800e7a0
 800801c:	0800e3f0 	.word	0x0800e3f0
 8008020:	0800e6e4 	.word	0x0800e6e4
 8008024:	0800e260 	.word	0x0800e260
 8008028:	0800e444 	.word	0x0800e444
 800802c:	0800e404 	.word	0x0800e404
 8008030:	0800e41c 	.word	0x0800e41c
 8008034:	0800e1d4 	.word	0x0800e1d4
        return *( this + cur_ - absolute );
 8008038:	7899      	ldrb	r1, [r3, #2]
 800803a:	1b09      	subs	r1, r1, r4
 800803c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
            node_type& n_at = narray_[at];
            uassert( n_at.cur_ != NODE_NONE );
            n.nxt_ = at;
            n.prv_ = n_at.prv_;
            if ( n_at.prv_ != NODE_NONE ) {
                n_at.prev().nxt_ = i;
 8008040:	545a      	strb	r2, [r3, r1]
            }
            n_at.prv_ = i;
 8008042:	705a      	strb	r2, [r3, #1]
    {
        uassert( super::size() < super::max_size() );
        auto n = super::alloc_node();
        super::insert_node( n, pos.cur_ );

        new ( varray_ + n ) value_type( std::forward<ty__>( args )... );
 8008044:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <API_SetTimer+0x328>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800804c:	00d4      	lsls	r4, r2, #3
 800804e:	191c      	adds	r4, r3, r4
 8008050:	d006      	beq.n	8008060 <API_SetTimer+0x308>
 8008052:	ad14      	add	r5, sp, #80	; 0x50
 8008054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008058:	e895 0003 	ldmia.w	r5, {r0, r1}
 800805c:	e884 0003 	stmia.w	r4, {r0, r1}

        node_.insert( at, d );

        handle_type ret;
        ret.id_ = d.id_;
 8008060:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
    auto r = s_tim.add( delay, obj, cb );
    // Wake up update task
    xTaskNotifyGive( sTimerTask );
 8008064:	2300      	movs	r3, #0
 8008066:	2202      	movs	r2, #2
 8008068:	4619      	mov	r1, r3
 800806a:	4806      	ldr	r0, [pc, #24]	; (8008084 <API_SetTimer+0x32c>)
 800806c:	6800      	ldr	r0, [r0, #0]
 800806e:	f7fd fb8b 	bl	8005788 <xTaskGenericNotify>
    taskEXIT_CRITICAL();
 8008072:	f7fe f8e1 	bl	8006238 <vPortExitCritical>
    return r.id_;
}
 8008076:	4620      	mov	r0, r4
 8008078:	4629      	mov	r1, r5
 800807a:	b01e      	add	sp, #120	; 0x78
 800807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008080:	20004880 	.word	0x20004880
 8008084:	20004ce0 	.word	0x20004ce0

08008088 <_GLOBAL__sub_I_HW_TIMER_INIT>:
void __throw_bad_function_call()
{
    uassert( false );
    for ( ;; ) { }
}
} // namespace std
 8008088:	b508      	push	{r3, lr}
 800808a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800808e:	2001      	movs	r0, #1
 8008090:	f7ff fbbe 	bl	8007810 <_Z41__static_initialization_and_destruction_0ii>
 8008094:	bd08      	pop	{r3, pc}
 8008096:	bf00      	nop

08008098 <_ZL9cdc_ioctlPvi>:
#include <uEmbedded/transceiver.h>
#include <uEmbedded/uassert.h>
#include <usbd_cdc_if.h>
static transceiver_result_t cdc_read( void* desc, char* buf, size_t len );
static transceiver_result_t cdc_write( void* desc, char const* buf, size_t len );
static transceiver_result_t cdc_ioctl( void* desc, intptr_t cmd ) { return TRANSCEIVER_OK; }
 8008098:	2000      	movs	r0, #0
 800809a:	4770      	bx	lr

0800809c <_Z41__static_initialization_and_destruction_0ii>:
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
    ring_buffer_write( &s_rw.rdqueue_, Buf, len );
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
}
 800809c:	2801      	cmp	r0, #1
 800809e:	d106      	bne.n	80080ae <_Z41__static_initialization_and_destruction_0ii+0x12>
 80080a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080a4:	4299      	cmp	r1, r3
 80080a6:	d102      	bne.n	80080ae <_Z41__static_initialization_and_destruction_0ii+0x12>
    .read  = cdc_read,
    .write = cdc_write,
    .ioctl = cdc_ioctl,
    .close = cdc_close };

static struct usb_rw {
 80080a8:	4a01      	ldr	r2, [pc, #4]	; (80080b0 <_Z41__static_initialization_and_destruction_0ii+0x14>)
 80080aa:	4b02      	ldr	r3, [pc, #8]	; (80080b4 <_Z41__static_initialization_and_destruction_0ii+0x18>)
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	4770      	bx	lr
 80080b0:	0800ed54 	.word	0x0800ed54
 80080b4:	20005540 	.word	0x20005540

080080b8 <_ZL9cdc_closePv>:
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
}

transceiver_result_t cdc_close( void* desc )
{
 80080b8:	b510      	push	{r4, lr}
 80080ba:	4604      	mov	r4, r0
}

static inline void AppFree( void* ptr )
{
    void vPortFree( void* );
    vPortFree( ptr );
 80080bc:	6840      	ldr	r0, [r0, #4]
 80080be:	f7fd fff7 	bl	80060b0 <vPortFree>
    auto td = reinterpret_cast<usb_rw*>( desc );
    AppFree( td->rdqueue_.buff );
    td->rdqueue_.buff = nullptr;
 80080c2:	2000      	movs	r0, #0
 80080c4:	6060      	str	r0, [r4, #4]
    return TRANSCEIVER_OK;
}
 80080c6:	bd10      	pop	{r4, pc}

080080c8 <_ZL9cdc_writePvPKcj>:
    auto rd = ring_buffer_read( &td->rdqueue_, buf, len );
    return rd;
}

transceiver_result_t cdc_write( void* nouse_, char const* buf, size_t len )
{
 80080c8:	b510      	push	{r4, lr}
 80080ca:	4608      	mov	r0, r1
 80080cc:	4614      	mov	r4, r2
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
 80080ce:	b291      	uxth	r1, r2
 80080d0:	f7f9 fc4c 	bl	800196c <CDC_Transmit_FS>
 80080d4:	b908      	cbnz	r0, 80080da <_ZL9cdc_writePvPKcj+0x12>
 80080d6:	4620      	mov	r0, r4
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	2000      	movs	r0, #0
}
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	bf00      	nop

080080e0 <_ZL8cdc_readPvPcj>:
    ring_buffer_init( &ret->rdqueue_, s_rw.rdbuf_, sizeof s_rw.rdbuf_ );
    return reinterpret_cast<transceiver_handle_t>( ret );
}

static transceiver_result_t cdc_read( void* desc, char* buf, size_t len )
{
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	460f      	mov	r7, r1
 80080e4:	4616      	mov	r6, r2
    auto td = reinterpret_cast<usb_rw*>( desc );
    auto rd = ring_buffer_read( &td->rdqueue_, buf, len );
 80080e6:	1d05      	adds	r5, r0, #4

/*! \breif      Do peeking and consuming at once.
    \return     Number of byte actually read. */
static inline size_t ring_buffer_read(ring_buffer_t *s, void *b, size_t len)
{
    size_t sz = ring_buffer_size(s);
 80080e8:	4628      	mov	r0, r5
 80080ea:	f7ff f935 	bl	8007358 <ring_buffer_size>
 80080ee:	4604      	mov	r4, r0
    if (sz < len)
 80080f0:	4286      	cmp	r6, r0
 80080f2:	d800      	bhi.n	80080f6 <_ZL8cdc_readPvPcj+0x16>
 80080f4:	4634      	mov	r4, r6
        len = sz;
    ring_buffer_peek(s, b, len);
 80080f6:	4622      	mov	r2, r4
 80080f8:	4639      	mov	r1, r7
 80080fa:	4628      	mov	r0, r5
 80080fc:	f7ff f90c 	bl	8007318 <ring_buffer_peek>
    ring_buffer_consume(s, len);
 8008100:	4621      	mov	r1, r4
 8008102:	4628      	mov	r0, r5
 8008104:	f7ff f8fe 	bl	8007304 <ring_buffer_consume>
    return rd;
}
 8008108:	4620      	mov	r0, r4
 800810a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800810c <OpenUsbHostConnection>:
    ring_buffer                 rdqueue_;
    char                        rdbuf_[USB_READ_BUF_SIZE];
} s_rw;

extern "C" transceiver_handle_t OpenUsbHostConnection()
{
 800810c:	b510      	push	{r4, lr}
    uassert( s_rw.rdqueue_.buff == nullptr );
 800810e:	4b09      	ldr	r3, [pc, #36]	; (8008134 <OpenUsbHostConnection+0x28>)
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b12b      	cbz	r3, 8008120 <OpenUsbHostConnection+0x14>
 8008114:	4b08      	ldr	r3, [pc, #32]	; (8008138 <OpenUsbHostConnection+0x2c>)
 8008116:	4a09      	ldr	r2, [pc, #36]	; (800813c <OpenUsbHostConnection+0x30>)
 8008118:	2121      	movs	r1, #33	; 0x21
 800811a:	4809      	ldr	r0, [pc, #36]	; (8008140 <OpenUsbHostConnection+0x34>)
 800811c:	f000 f85e 	bl	80081dc <__assert_func>
    auto ret = &s_rw;
    ring_buffer_init( &ret->rdqueue_, s_rw.rdbuf_, sizeof s_rw.rdbuf_ );
 8008120:	4c04      	ldr	r4, [pc, #16]	; (8008134 <OpenUsbHostConnection+0x28>)
 8008122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008126:	f104 0114 	add.w	r1, r4, #20
 800812a:	1d20      	adds	r0, r4, #4
 800812c:	f7ff f8c2 	bl	80072b4 <ring_buffer_init>
    return reinterpret_cast<transceiver_handle_t>( ret );
}
 8008130:	4620      	mov	r0, r4
 8008132:	bd10      	pop	{r4, pc}
 8008134:	20005540 	.word	0x20005540
 8008138:	0800ed1c 	.word	0x0800ed1c
 800813c:	0800ed64 	.word	0x0800ed64
 8008140:	0800ed3c 	.word	0x0800ed3c

08008144 <CdcReceiveHandler>:
    return TRANSCEIVER_OK;
}

// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4605      	mov	r5, r0
    ring_buffer_write( &s_rw.rdqueue_, Buf, len );
 8008148:	460a      	mov	r2, r1
 800814a:	4601      	mov	r1, r0
 800814c:	4805      	ldr	r0, [pc, #20]	; (8008164 <CdcReceiveHandler+0x20>)
 800814e:	f7ff f8b7 	bl	80072c0 <ring_buffer_write>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
 8008152:	4c05      	ldr	r4, [pc, #20]	; (8008168 <CdcReceiveHandler+0x24>)
 8008154:	4629      	mov	r1, r5
 8008156:	4620      	mov	r0, r4
 8008158:	f7fe ffe6 	bl	8007128 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 800815c:	4620      	mov	r0, r4
 800815e:	f7ff f803 	bl	8007168 <USBD_CDC_ReceivePacket>
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	20005544 	.word	0x20005544
 8008168:	200063c4 	.word	0x200063c4

0800816c <_GLOBAL__sub_I_OpenUsbHostConnection>:
}
 800816c:	b508      	push	{r3, lr}
 800816e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008172:	2001      	movs	r0, #1
 8008174:	f7ff ff92 	bl	800809c <_Z41__static_initialization_and_destruction_0ii>
 8008178:	bd08      	pop	{r3, pc}
 800817a:	bf00      	nop

0800817c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800817c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80081b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008180:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008182:	e003      	b.n	800818c <LoopCopyDataInit>

08008184 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008186:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008188:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800818a:	3104      	adds	r1, #4

0800818c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800818c:	480b      	ldr	r0, [pc, #44]	; (80081bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800818e:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008190:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008192:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008194:	d3f6      	bcc.n	8008184 <CopyDataInit>
  ldr  r2, =_sbss
 8008196:	4a0b      	ldr	r2, [pc, #44]	; (80081c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008198:	e002      	b.n	80081a0 <LoopFillZerobss>

0800819a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800819a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800819c:	f842 3b04 	str.w	r3, [r2], #4

080081a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80081a0:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80081a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80081a4:	d3f9      	bcc.n	800819a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80081a6:	f7fc fa05 	bl	80045b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081aa:	f000 f853 	bl	8008254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80081ae:	f7f9 f98b 	bl	80014c8 <main>
  bx  lr    
 80081b2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80081b4:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80081b8:	0800f098 	.word	0x0800f098
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80081bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80081c0:	20000b38 	.word	0x20000b38
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80081c4:	20000b38 	.word	0x20000b38
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80081c8:	20006df4 	.word	0x20006df4

080081cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80081cc:	e7fe      	b.n	80081cc <ADC_IRQHandler>
	...

080081d0 <__aeabi_atexit>:
 80081d0:	460b      	mov	r3, r1
 80081d2:	4601      	mov	r1, r0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 b823 	b.w	8008220 <__cxa_atexit>
 80081da:	bf00      	nop

080081dc <__assert_func>:
 80081dc:	b500      	push	{lr}
 80081de:	4c0a      	ldr	r4, [pc, #40]	; (8008208 <__assert_func+0x2c>)
 80081e0:	6826      	ldr	r6, [r4, #0]
 80081e2:	4605      	mov	r5, r0
 80081e4:	b085      	sub	sp, #20
 80081e6:	461c      	mov	r4, r3
 80081e8:	68f0      	ldr	r0, [r6, #12]
 80081ea:	b152      	cbz	r2, 8008202 <__assert_func+0x26>
 80081ec:	4b07      	ldr	r3, [pc, #28]	; (800820c <__assert_func+0x30>)
 80081ee:	9202      	str	r2, [sp, #8]
 80081f0:	e88d 000a 	stmia.w	sp, {r1, r3}
 80081f4:	4622      	mov	r2, r4
 80081f6:	462b      	mov	r3, r5
 80081f8:	4905      	ldr	r1, [pc, #20]	; (8008210 <__assert_func+0x34>)
 80081fa:	f000 f817 	bl	800822c <fiprintf>
 80081fe:	f001 fccf 	bl	8009ba0 <abort>
 8008202:	4b04      	ldr	r3, [pc, #16]	; (8008214 <__assert_func+0x38>)
 8008204:	461a      	mov	r2, r3
 8008206:	e7f2      	b.n	80081ee <__assert_func+0x12>
 8008208:	200005b8 	.word	0x200005b8
 800820c:	0800ed94 	.word	0x0800ed94
 8008210:	0800eda4 	.word	0x0800eda4
 8008214:	0800de54 	.word	0x0800de54

08008218 <atoi>:
 8008218:	220a      	movs	r2, #10
 800821a:	2100      	movs	r1, #0
 800821c:	f000 bc0a 	b.w	8008a34 <strtol>

08008220 <__cxa_atexit>:
 8008220:	4613      	mov	r3, r2
 8008222:	460a      	mov	r2, r1
 8008224:	4601      	mov	r1, r0
 8008226:	2002      	movs	r0, #2
 8008228:	f001 bc5e 	b.w	8009ae8 <__register_exitproc>

0800822c <fiprintf>:
 800822c:	b40e      	push	{r1, r2, r3}
 800822e:	b510      	push	{r4, lr}
 8008230:	b083      	sub	sp, #12
 8008232:	ab05      	add	r3, sp, #20
 8008234:	4c06      	ldr	r4, [pc, #24]	; (8008250 <fiprintf+0x24>)
 8008236:	f853 2b04 	ldr.w	r2, [r3], #4
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	4601      	mov	r1, r0
 800823e:	6820      	ldr	r0, [r4, #0]
 8008240:	f000 fc4a 	bl	8008ad8 <_vfiprintf_r>
 8008244:	b003      	add	sp, #12
 8008246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800824a:	b003      	add	sp, #12
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	200005b8 	.word	0x200005b8

08008254 <__libc_init_array>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	4e0f      	ldr	r6, [pc, #60]	; (8008294 <__libc_init_array+0x40>)
 8008258:	4d0f      	ldr	r5, [pc, #60]	; (8008298 <__libc_init_array+0x44>)
 800825a:	1b76      	subs	r6, r6, r5
 800825c:	10b6      	asrs	r6, r6, #2
 800825e:	bf18      	it	ne
 8008260:	2400      	movne	r4, #0
 8008262:	d005      	beq.n	8008270 <__libc_init_array+0x1c>
 8008264:	3401      	adds	r4, #1
 8008266:	f855 3b04 	ldr.w	r3, [r5], #4
 800826a:	4798      	blx	r3
 800826c:	42a6      	cmp	r6, r4
 800826e:	d1f9      	bne.n	8008264 <__libc_init_array+0x10>
 8008270:	4e0a      	ldr	r6, [pc, #40]	; (800829c <__libc_init_array+0x48>)
 8008272:	4d0b      	ldr	r5, [pc, #44]	; (80082a0 <__libc_init_array+0x4c>)
 8008274:	1b76      	subs	r6, r6, r5
 8008276:	f005 fd43 	bl	800dd00 <_init>
 800827a:	10b6      	asrs	r6, r6, #2
 800827c:	bf18      	it	ne
 800827e:	2400      	movne	r4, #0
 8008280:	d006      	beq.n	8008290 <__libc_init_array+0x3c>
 8008282:	3401      	adds	r4, #1
 8008284:	f855 3b04 	ldr.w	r3, [r5], #4
 8008288:	4798      	blx	r3
 800828a:	42a6      	cmp	r6, r4
 800828c:	d1f9      	bne.n	8008282 <__libc_init_array+0x2e>
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	bf00      	nop
 8008294:	0800f084 	.word	0x0800f084
 8008298:	0800f084 	.word	0x0800f084
 800829c:	0800f094 	.word	0x0800f094
 80082a0:	0800f084 	.word	0x0800f084

080082a4 <malloc>:
 80082a4:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <malloc+0xc>)
 80082a6:	4601      	mov	r1, r0
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	f000 b80b 	b.w	80082c4 <_malloc_r>
 80082ae:	bf00      	nop
 80082b0:	200005b8 	.word	0x200005b8

080082b4 <free>:
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <free+0xc>)
 80082b6:	4601      	mov	r1, r0
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	f001 be83 	b.w	8009fc4 <_free_r>
 80082be:	bf00      	nop
 80082c0:	200005b8 	.word	0x200005b8

080082c4 <_malloc_r>:
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	f101 050b 	add.w	r5, r1, #11
 80082cc:	2d16      	cmp	r5, #22
 80082ce:	b083      	sub	sp, #12
 80082d0:	4606      	mov	r6, r0
 80082d2:	f240 809f 	bls.w	8008414 <_malloc_r+0x150>
 80082d6:	f035 0507 	bics.w	r5, r5, #7
 80082da:	f100 80bf 	bmi.w	800845c <_malloc_r+0x198>
 80082de:	42a9      	cmp	r1, r5
 80082e0:	f200 80bc 	bhi.w	800845c <_malloc_r+0x198>
 80082e4:	f000 faf4 	bl	80088d0 <__malloc_lock>
 80082e8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80082ec:	f0c0 829c 	bcc.w	8008828 <_malloc_r+0x564>
 80082f0:	0a6b      	lsrs	r3, r5, #9
 80082f2:	f000 80ba 	beq.w	800846a <_malloc_r+0x1a6>
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	f200 8183 	bhi.w	8008602 <_malloc_r+0x33e>
 80082fc:	09a8      	lsrs	r0, r5, #6
 80082fe:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8008302:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008306:	3038      	adds	r0, #56	; 0x38
 8008308:	4fc4      	ldr	r7, [pc, #784]	; (800861c <_malloc_r+0x358>)
 800830a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800830e:	f1a3 0108 	sub.w	r1, r3, #8
 8008312:	685c      	ldr	r4, [r3, #4]
 8008314:	42a1      	cmp	r1, r4
 8008316:	d107      	bne.n	8008328 <_malloc_r+0x64>
 8008318:	e0ac      	b.n	8008474 <_malloc_r+0x1b0>
 800831a:	2a00      	cmp	r2, #0
 800831c:	f280 80ac 	bge.w	8008478 <_malloc_r+0x1b4>
 8008320:	68e4      	ldr	r4, [r4, #12]
 8008322:	42a1      	cmp	r1, r4
 8008324:	f000 80a6 	beq.w	8008474 <_malloc_r+0x1b0>
 8008328:	6863      	ldr	r3, [r4, #4]
 800832a:	f023 0303 	bic.w	r3, r3, #3
 800832e:	1b5a      	subs	r2, r3, r5
 8008330:	2a0f      	cmp	r2, #15
 8008332:	ddf2      	ble.n	800831a <_malloc_r+0x56>
 8008334:	49b9      	ldr	r1, [pc, #740]	; (800861c <_malloc_r+0x358>)
 8008336:	693c      	ldr	r4, [r7, #16]
 8008338:	f101 0e08 	add.w	lr, r1, #8
 800833c:	4574      	cmp	r4, lr
 800833e:	f000 81b3 	beq.w	80086a8 <_malloc_r+0x3e4>
 8008342:	6863      	ldr	r3, [r4, #4]
 8008344:	f023 0303 	bic.w	r3, r3, #3
 8008348:	1b5a      	subs	r2, r3, r5
 800834a:	2a0f      	cmp	r2, #15
 800834c:	f300 8199 	bgt.w	8008682 <_malloc_r+0x3be>
 8008350:	2a00      	cmp	r2, #0
 8008352:	f8c1 e014 	str.w	lr, [r1, #20]
 8008356:	f8c1 e010 	str.w	lr, [r1, #16]
 800835a:	f280 809e 	bge.w	800849a <_malloc_r+0x1d6>
 800835e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008362:	f080 8167 	bcs.w	8008634 <_malloc_r+0x370>
 8008366:	08db      	lsrs	r3, r3, #3
 8008368:	f103 0c01 	add.w	ip, r3, #1
 800836c:	2201      	movs	r2, #1
 800836e:	109b      	asrs	r3, r3, #2
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	684a      	ldr	r2, [r1, #4]
 8008376:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 800837a:	f8c4 8008 	str.w	r8, [r4, #8]
 800837e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8008382:	431a      	orrs	r2, r3
 8008384:	f1a9 0308 	sub.w	r3, r9, #8
 8008388:	60e3      	str	r3, [r4, #12]
 800838a:	604a      	str	r2, [r1, #4]
 800838c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8008390:	f8c8 400c 	str.w	r4, [r8, #12]
 8008394:	1083      	asrs	r3, r0, #2
 8008396:	2401      	movs	r4, #1
 8008398:	409c      	lsls	r4, r3
 800839a:	4294      	cmp	r4, r2
 800839c:	f200 808a 	bhi.w	80084b4 <_malloc_r+0x1f0>
 80083a0:	4214      	tst	r4, r2
 80083a2:	d106      	bne.n	80083b2 <_malloc_r+0xee>
 80083a4:	f020 0003 	bic.w	r0, r0, #3
 80083a8:	0064      	lsls	r4, r4, #1
 80083aa:	4214      	tst	r4, r2
 80083ac:	f100 0004 	add.w	r0, r0, #4
 80083b0:	d0fa      	beq.n	80083a8 <_malloc_r+0xe4>
 80083b2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80083b6:	46cc      	mov	ip, r9
 80083b8:	4680      	mov	r8, r0
 80083ba:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80083be:	458c      	cmp	ip, r1
 80083c0:	d107      	bne.n	80083d2 <_malloc_r+0x10e>
 80083c2:	e173      	b.n	80086ac <_malloc_r+0x3e8>
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	f280 8181 	bge.w	80086cc <_malloc_r+0x408>
 80083ca:	68c9      	ldr	r1, [r1, #12]
 80083cc:	458c      	cmp	ip, r1
 80083ce:	f000 816d 	beq.w	80086ac <_malloc_r+0x3e8>
 80083d2:	684b      	ldr	r3, [r1, #4]
 80083d4:	f023 0303 	bic.w	r3, r3, #3
 80083d8:	1b5a      	subs	r2, r3, r5
 80083da:	2a0f      	cmp	r2, #15
 80083dc:	ddf2      	ble.n	80083c4 <_malloc_r+0x100>
 80083de:	460c      	mov	r4, r1
 80083e0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80083e4:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80083e8:	194b      	adds	r3, r1, r5
 80083ea:	f045 0501 	orr.w	r5, r5, #1
 80083ee:	604d      	str	r5, [r1, #4]
 80083f0:	f042 0101 	orr.w	r1, r2, #1
 80083f4:	f8c8 c00c 	str.w	ip, [r8, #12]
 80083f8:	4630      	mov	r0, r6
 80083fa:	f8cc 8008 	str.w	r8, [ip, #8]
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008406:	f8c3 e008 	str.w	lr, [r3, #8]
 800840a:	6059      	str	r1, [r3, #4]
 800840c:	509a      	str	r2, [r3, r2]
 800840e:	f000 fa61 	bl	80088d4 <__malloc_unlock>
 8008412:	e01f      	b.n	8008454 <_malloc_r+0x190>
 8008414:	2910      	cmp	r1, #16
 8008416:	d821      	bhi.n	800845c <_malloc_r+0x198>
 8008418:	f000 fa5a 	bl	80088d0 <__malloc_lock>
 800841c:	2510      	movs	r5, #16
 800841e:	2306      	movs	r3, #6
 8008420:	2002      	movs	r0, #2
 8008422:	4f7e      	ldr	r7, [pc, #504]	; (800861c <_malloc_r+0x358>)
 8008424:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008428:	f1a3 0208 	sub.w	r2, r3, #8
 800842c:	685c      	ldr	r4, [r3, #4]
 800842e:	4294      	cmp	r4, r2
 8008430:	f000 8145 	beq.w	80086be <_malloc_r+0x3fa>
 8008434:	6863      	ldr	r3, [r4, #4]
 8008436:	68e1      	ldr	r1, [r4, #12]
 8008438:	68a5      	ldr	r5, [r4, #8]
 800843a:	f023 0303 	bic.w	r3, r3, #3
 800843e:	4423      	add	r3, r4
 8008440:	4630      	mov	r0, r6
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	60e9      	str	r1, [r5, #12]
 8008446:	f042 0201 	orr.w	r2, r2, #1
 800844a:	608d      	str	r5, [r1, #8]
 800844c:	605a      	str	r2, [r3, #4]
 800844e:	f000 fa41 	bl	80088d4 <__malloc_unlock>
 8008452:	3408      	adds	r4, #8
 8008454:	4620      	mov	r0, r4
 8008456:	b003      	add	sp, #12
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845c:	2400      	movs	r4, #0
 800845e:	230c      	movs	r3, #12
 8008460:	4620      	mov	r0, r4
 8008462:	6033      	str	r3, [r6, #0]
 8008464:	b003      	add	sp, #12
 8008466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846a:	2380      	movs	r3, #128	; 0x80
 800846c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8008470:	203f      	movs	r0, #63	; 0x3f
 8008472:	e749      	b.n	8008308 <_malloc_r+0x44>
 8008474:	4670      	mov	r0, lr
 8008476:	e75d      	b.n	8008334 <_malloc_r+0x70>
 8008478:	4423      	add	r3, r4
 800847a:	68e1      	ldr	r1, [r4, #12]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	68a5      	ldr	r5, [r4, #8]
 8008480:	f042 0201 	orr.w	r2, r2, #1
 8008484:	60e9      	str	r1, [r5, #12]
 8008486:	4630      	mov	r0, r6
 8008488:	608d      	str	r5, [r1, #8]
 800848a:	605a      	str	r2, [r3, #4]
 800848c:	f000 fa22 	bl	80088d4 <__malloc_unlock>
 8008490:	3408      	adds	r4, #8
 8008492:	4620      	mov	r0, r4
 8008494:	b003      	add	sp, #12
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	4423      	add	r3, r4
 800849c:	4630      	mov	r0, r6
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	f042 0201 	orr.w	r2, r2, #1
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	f000 fa15 	bl	80088d4 <__malloc_unlock>
 80084aa:	3408      	adds	r4, #8
 80084ac:	4620      	mov	r0, r4
 80084ae:	b003      	add	sp, #12
 80084b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	68bc      	ldr	r4, [r7, #8]
 80084b6:	6863      	ldr	r3, [r4, #4]
 80084b8:	f023 0803 	bic.w	r8, r3, #3
 80084bc:	45a8      	cmp	r8, r5
 80084be:	d304      	bcc.n	80084ca <_malloc_r+0x206>
 80084c0:	ebc5 0308 	rsb	r3, r5, r8
 80084c4:	2b0f      	cmp	r3, #15
 80084c6:	f300 808c 	bgt.w	80085e2 <_malloc_r+0x31e>
 80084ca:	4b55      	ldr	r3, [pc, #340]	; (8008620 <_malloc_r+0x35c>)
 80084cc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8008630 <_malloc_r+0x36c>
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	f8d9 3000 	ldr.w	r3, [r9]
 80084d6:	3301      	adds	r3, #1
 80084d8:	442a      	add	r2, r5
 80084da:	eb04 0a08 	add.w	sl, r4, r8
 80084de:	f000 8160 	beq.w	80087a2 <_malloc_r+0x4de>
 80084e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084e6:	320f      	adds	r2, #15
 80084e8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80084ec:	f022 020f 	bic.w	r2, r2, #15
 80084f0:	4611      	mov	r1, r2
 80084f2:	4630      	mov	r0, r6
 80084f4:	9201      	str	r2, [sp, #4]
 80084f6:	f000 f9ef 	bl	80088d8 <_sbrk_r>
 80084fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084fe:	4683      	mov	fp, r0
 8008500:	9a01      	ldr	r2, [sp, #4]
 8008502:	f000 8158 	beq.w	80087b6 <_malloc_r+0x4f2>
 8008506:	4582      	cmp	sl, r0
 8008508:	f200 80fc 	bhi.w	8008704 <_malloc_r+0x440>
 800850c:	4b45      	ldr	r3, [pc, #276]	; (8008624 <_malloc_r+0x360>)
 800850e:	6819      	ldr	r1, [r3, #0]
 8008510:	45da      	cmp	sl, fp
 8008512:	4411      	add	r1, r2
 8008514:	6019      	str	r1, [r3, #0]
 8008516:	f000 8153 	beq.w	80087c0 <_malloc_r+0x4fc>
 800851a:	f8d9 0000 	ldr.w	r0, [r9]
 800851e:	f8df e110 	ldr.w	lr, [pc, #272]	; 8008630 <_malloc_r+0x36c>
 8008522:	3001      	adds	r0, #1
 8008524:	bf1b      	ittet	ne
 8008526:	ebca 0a0b 	rsbne	sl, sl, fp
 800852a:	4451      	addne	r1, sl
 800852c:	f8ce b000 	streq.w	fp, [lr]
 8008530:	6019      	strne	r1, [r3, #0]
 8008532:	f01b 0107 	ands.w	r1, fp, #7
 8008536:	f000 8117 	beq.w	8008768 <_malloc_r+0x4a4>
 800853a:	f1c1 0008 	rsb	r0, r1, #8
 800853e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8008542:	4483      	add	fp, r0
 8008544:	3108      	adds	r1, #8
 8008546:	445a      	add	r2, fp
 8008548:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800854c:	ebc2 0901 	rsb	r9, r2, r1
 8008550:	4649      	mov	r1, r9
 8008552:	4630      	mov	r0, r6
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	f000 f9bf 	bl	80088d8 <_sbrk_r>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	f000 813f 	beq.w	80087e0 <_malloc_r+0x51c>
 8008562:	ebcb 0200 	rsb	r2, fp, r0
 8008566:	444a      	add	r2, r9
 8008568:	f042 0201 	orr.w	r2, r2, #1
 800856c:	6819      	ldr	r1, [r3, #0]
 800856e:	f8c7 b008 	str.w	fp, [r7, #8]
 8008572:	4449      	add	r1, r9
 8008574:	42bc      	cmp	r4, r7
 8008576:	f8cb 2004 	str.w	r2, [fp, #4]
 800857a:	6019      	str	r1, [r3, #0]
 800857c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008624 <_malloc_r+0x360>
 8008580:	d016      	beq.n	80085b0 <_malloc_r+0x2ec>
 8008582:	f1b8 0f0f 	cmp.w	r8, #15
 8008586:	f240 80fd 	bls.w	8008784 <_malloc_r+0x4c0>
 800858a:	6862      	ldr	r2, [r4, #4]
 800858c:	f1a8 030c 	sub.w	r3, r8, #12
 8008590:	f023 0307 	bic.w	r3, r3, #7
 8008594:	18e0      	adds	r0, r4, r3
 8008596:	f002 0201 	and.w	r2, r2, #1
 800859a:	f04f 0e05 	mov.w	lr, #5
 800859e:	431a      	orrs	r2, r3
 80085a0:	2b0f      	cmp	r3, #15
 80085a2:	6062      	str	r2, [r4, #4]
 80085a4:	f8c0 e004 	str.w	lr, [r0, #4]
 80085a8:	f8c0 e008 	str.w	lr, [r0, #8]
 80085ac:	f200 811c 	bhi.w	80087e8 <_malloc_r+0x524>
 80085b0:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <_malloc_r+0x364>)
 80085b2:	68bc      	ldr	r4, [r7, #8]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4291      	cmp	r1, r2
 80085b8:	bf88      	it	hi
 80085ba:	6019      	strhi	r1, [r3, #0]
 80085bc:	4b1b      	ldr	r3, [pc, #108]	; (800862c <_malloc_r+0x368>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	4291      	cmp	r1, r2
 80085c2:	6862      	ldr	r2, [r4, #4]
 80085c4:	bf88      	it	hi
 80085c6:	6019      	strhi	r1, [r3, #0]
 80085c8:	f022 0203 	bic.w	r2, r2, #3
 80085cc:	4295      	cmp	r5, r2
 80085ce:	eba2 0305 	sub.w	r3, r2, r5
 80085d2:	d801      	bhi.n	80085d8 <_malloc_r+0x314>
 80085d4:	2b0f      	cmp	r3, #15
 80085d6:	dc04      	bgt.n	80085e2 <_malloc_r+0x31e>
 80085d8:	4630      	mov	r0, r6
 80085da:	f000 f97b 	bl	80088d4 <__malloc_unlock>
 80085de:	2400      	movs	r4, #0
 80085e0:	e738      	b.n	8008454 <_malloc_r+0x190>
 80085e2:	1962      	adds	r2, r4, r5
 80085e4:	f043 0301 	orr.w	r3, r3, #1
 80085e8:	f045 0501 	orr.w	r5, r5, #1
 80085ec:	6065      	str	r5, [r4, #4]
 80085ee:	4630      	mov	r0, r6
 80085f0:	60ba      	str	r2, [r7, #8]
 80085f2:	6053      	str	r3, [r2, #4]
 80085f4:	f000 f96e 	bl	80088d4 <__malloc_unlock>
 80085f8:	3408      	adds	r4, #8
 80085fa:	4620      	mov	r0, r4
 80085fc:	b003      	add	sp, #12
 80085fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008602:	2b14      	cmp	r3, #20
 8008604:	d971      	bls.n	80086ea <_malloc_r+0x426>
 8008606:	2b54      	cmp	r3, #84	; 0x54
 8008608:	f200 80a4 	bhi.w	8008754 <_malloc_r+0x490>
 800860c:	0b28      	lsrs	r0, r5, #12
 800860e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 8008612:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008616:	306e      	adds	r0, #110	; 0x6e
 8008618:	e676      	b.n	8008308 <_malloc_r+0x44>
 800861a:	bf00      	nop
 800861c:	200005bc 	.word	0x200005bc
 8008620:	2000595c 	.word	0x2000595c
 8008624:	20005960 	.word	0x20005960
 8008628:	20005958 	.word	0x20005958
 800862c:	20005954 	.word	0x20005954
 8008630:	200009c8 	.word	0x200009c8
 8008634:	0a5a      	lsrs	r2, r3, #9
 8008636:	2a04      	cmp	r2, #4
 8008638:	d95e      	bls.n	80086f8 <_malloc_r+0x434>
 800863a:	2a14      	cmp	r2, #20
 800863c:	f200 80b3 	bhi.w	80087a6 <_malloc_r+0x4e2>
 8008640:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8008644:	0049      	lsls	r1, r1, #1
 8008646:	325b      	adds	r2, #91	; 0x5b
 8008648:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 800864c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008650:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8008830 <_malloc_r+0x56c>
 8008654:	f1ac 0c08 	sub.w	ip, ip, #8
 8008658:	458c      	cmp	ip, r1
 800865a:	f000 8088 	beq.w	800876e <_malloc_r+0x4aa>
 800865e:	684a      	ldr	r2, [r1, #4]
 8008660:	f022 0203 	bic.w	r2, r2, #3
 8008664:	4293      	cmp	r3, r2
 8008666:	d202      	bcs.n	800866e <_malloc_r+0x3aa>
 8008668:	6889      	ldr	r1, [r1, #8]
 800866a:	458c      	cmp	ip, r1
 800866c:	d1f7      	bne.n	800865e <_malloc_r+0x39a>
 800866e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	f8c4 c00c 	str.w	ip, [r4, #12]
 8008678:	60a1      	str	r1, [r4, #8]
 800867a:	f8cc 4008 	str.w	r4, [ip, #8]
 800867e:	60cc      	str	r4, [r1, #12]
 8008680:	e688      	b.n	8008394 <_malloc_r+0xd0>
 8008682:	1963      	adds	r3, r4, r5
 8008684:	f042 0701 	orr.w	r7, r2, #1
 8008688:	f045 0501 	orr.w	r5, r5, #1
 800868c:	6065      	str	r5, [r4, #4]
 800868e:	4630      	mov	r0, r6
 8008690:	614b      	str	r3, [r1, #20]
 8008692:	610b      	str	r3, [r1, #16]
 8008694:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008698:	f8c3 e008 	str.w	lr, [r3, #8]
 800869c:	605f      	str	r7, [r3, #4]
 800869e:	509a      	str	r2, [r3, r2]
 80086a0:	3408      	adds	r4, #8
 80086a2:	f000 f917 	bl	80088d4 <__malloc_unlock>
 80086a6:	e6d5      	b.n	8008454 <_malloc_r+0x190>
 80086a8:	684a      	ldr	r2, [r1, #4]
 80086aa:	e673      	b.n	8008394 <_malloc_r+0xd0>
 80086ac:	f108 0801 	add.w	r8, r8, #1
 80086b0:	f018 0f03 	tst.w	r8, #3
 80086b4:	f10c 0c08 	add.w	ip, ip, #8
 80086b8:	f47f ae7f 	bne.w	80083ba <_malloc_r+0xf6>
 80086bc:	e030      	b.n	8008720 <_malloc_r+0x45c>
 80086be:	68dc      	ldr	r4, [r3, #12]
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	bf08      	it	eq
 80086c4:	3002      	addeq	r0, #2
 80086c6:	f43f ae35 	beq.w	8008334 <_malloc_r+0x70>
 80086ca:	e6b3      	b.n	8008434 <_malloc_r+0x170>
 80086cc:	440b      	add	r3, r1
 80086ce:	460c      	mov	r4, r1
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	68c9      	ldr	r1, [r1, #12]
 80086d4:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80086d8:	f042 0201 	orr.w	r2, r2, #1
 80086dc:	605a      	str	r2, [r3, #4]
 80086de:	4630      	mov	r0, r6
 80086e0:	60e9      	str	r1, [r5, #12]
 80086e2:	608d      	str	r5, [r1, #8]
 80086e4:	f000 f8f6 	bl	80088d4 <__malloc_unlock>
 80086e8:	e6b4      	b.n	8008454 <_malloc_r+0x190>
 80086ea:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 80086ee:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 80086f2:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80086f6:	e607      	b.n	8008308 <_malloc_r+0x44>
 80086f8:	099a      	lsrs	r2, r3, #6
 80086fa:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80086fe:	0049      	lsls	r1, r1, #1
 8008700:	3238      	adds	r2, #56	; 0x38
 8008702:	e7a1      	b.n	8008648 <_malloc_r+0x384>
 8008704:	42bc      	cmp	r4, r7
 8008706:	4b4a      	ldr	r3, [pc, #296]	; (8008830 <_malloc_r+0x56c>)
 8008708:	f43f af00 	beq.w	800850c <_malloc_r+0x248>
 800870c:	689c      	ldr	r4, [r3, #8]
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	f022 0203 	bic.w	r2, r2, #3
 8008714:	e75a      	b.n	80085cc <_malloc_r+0x308>
 8008716:	f859 3908 	ldr.w	r3, [r9], #-8
 800871a:	4599      	cmp	r9, r3
 800871c:	f040 8082 	bne.w	8008824 <_malloc_r+0x560>
 8008720:	f010 0f03 	tst.w	r0, #3
 8008724:	f100 30ff 	add.w	r0, r0, #4294967295
 8008728:	d1f5      	bne.n	8008716 <_malloc_r+0x452>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	ea23 0304 	bic.w	r3, r3, r4
 8008730:	607b      	str	r3, [r7, #4]
 8008732:	0064      	lsls	r4, r4, #1
 8008734:	429c      	cmp	r4, r3
 8008736:	f63f aebd 	bhi.w	80084b4 <_malloc_r+0x1f0>
 800873a:	2c00      	cmp	r4, #0
 800873c:	f43f aeba 	beq.w	80084b4 <_malloc_r+0x1f0>
 8008740:	421c      	tst	r4, r3
 8008742:	4640      	mov	r0, r8
 8008744:	f47f ae35 	bne.w	80083b2 <_malloc_r+0xee>
 8008748:	0064      	lsls	r4, r4, #1
 800874a:	421c      	tst	r4, r3
 800874c:	f100 0004 	add.w	r0, r0, #4
 8008750:	d0fa      	beq.n	8008748 <_malloc_r+0x484>
 8008752:	e62e      	b.n	80083b2 <_malloc_r+0xee>
 8008754:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008758:	d818      	bhi.n	800878c <_malloc_r+0x4c8>
 800875a:	0be8      	lsrs	r0, r5, #15
 800875c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8008760:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008764:	3077      	adds	r0, #119	; 0x77
 8008766:	e5cf      	b.n	8008308 <_malloc_r+0x44>
 8008768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800876c:	e6eb      	b.n	8008546 <_malloc_r+0x282>
 800876e:	2101      	movs	r1, #1
 8008770:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008774:	1092      	asrs	r2, r2, #2
 8008776:	fa01 f202 	lsl.w	r2, r1, r2
 800877a:	431a      	orrs	r2, r3
 800877c:	f8c8 2004 	str.w	r2, [r8, #4]
 8008780:	4661      	mov	r1, ip
 8008782:	e777      	b.n	8008674 <_malloc_r+0x3b0>
 8008784:	2301      	movs	r3, #1
 8008786:	f8cb 3004 	str.w	r3, [fp, #4]
 800878a:	e725      	b.n	80085d8 <_malloc_r+0x314>
 800878c:	f240 5254 	movw	r2, #1364	; 0x554
 8008790:	4293      	cmp	r3, r2
 8008792:	d820      	bhi.n	80087d6 <_malloc_r+0x512>
 8008794:	0ca8      	lsrs	r0, r5, #18
 8008796:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800879a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800879e:	307c      	adds	r0, #124	; 0x7c
 80087a0:	e5b2      	b.n	8008308 <_malloc_r+0x44>
 80087a2:	3210      	adds	r2, #16
 80087a4:	e6a4      	b.n	80084f0 <_malloc_r+0x22c>
 80087a6:	2a54      	cmp	r2, #84	; 0x54
 80087a8:	d826      	bhi.n	80087f8 <_malloc_r+0x534>
 80087aa:	0b1a      	lsrs	r2, r3, #12
 80087ac:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 80087b0:	0049      	lsls	r1, r1, #1
 80087b2:	326e      	adds	r2, #110	; 0x6e
 80087b4:	e748      	b.n	8008648 <_malloc_r+0x384>
 80087b6:	68bc      	ldr	r4, [r7, #8]
 80087b8:	6862      	ldr	r2, [r4, #4]
 80087ba:	f022 0203 	bic.w	r2, r2, #3
 80087be:	e705      	b.n	80085cc <_malloc_r+0x308>
 80087c0:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f47f aea8 	bne.w	800851a <_malloc_r+0x256>
 80087ca:	4442      	add	r2, r8
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f042 0201 	orr.w	r2, r2, #1
 80087d2:	605a      	str	r2, [r3, #4]
 80087d4:	e6ec      	b.n	80085b0 <_malloc_r+0x2ec>
 80087d6:	23fe      	movs	r3, #254	; 0xfe
 80087d8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80087dc:	207e      	movs	r0, #126	; 0x7e
 80087de:	e593      	b.n	8008308 <_malloc_r+0x44>
 80087e0:	2201      	movs	r2, #1
 80087e2:	f04f 0900 	mov.w	r9, #0
 80087e6:	e6c1      	b.n	800856c <_malloc_r+0x2a8>
 80087e8:	f104 0108 	add.w	r1, r4, #8
 80087ec:	4630      	mov	r0, r6
 80087ee:	f001 fbe9 	bl	8009fc4 <_free_r>
 80087f2:	f8d9 1000 	ldr.w	r1, [r9]
 80087f6:	e6db      	b.n	80085b0 <_malloc_r+0x2ec>
 80087f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80087fc:	d805      	bhi.n	800880a <_malloc_r+0x546>
 80087fe:	0bda      	lsrs	r2, r3, #15
 8008800:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8008804:	0049      	lsls	r1, r1, #1
 8008806:	3277      	adds	r2, #119	; 0x77
 8008808:	e71e      	b.n	8008648 <_malloc_r+0x384>
 800880a:	f240 5154 	movw	r1, #1364	; 0x554
 800880e:	428a      	cmp	r2, r1
 8008810:	d805      	bhi.n	800881e <_malloc_r+0x55a>
 8008812:	0c9a      	lsrs	r2, r3, #18
 8008814:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8008818:	0049      	lsls	r1, r1, #1
 800881a:	327c      	adds	r2, #124	; 0x7c
 800881c:	e714      	b.n	8008648 <_malloc_r+0x384>
 800881e:	21fe      	movs	r1, #254	; 0xfe
 8008820:	227e      	movs	r2, #126	; 0x7e
 8008822:	e711      	b.n	8008648 <_malloc_r+0x384>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	e784      	b.n	8008732 <_malloc_r+0x46e>
 8008828:	08e8      	lsrs	r0, r5, #3
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	e5f8      	b.n	8008422 <_malloc_r+0x15e>
 8008830:	200005bc 	.word	0x200005bc

08008834 <memset>:
 8008834:	b470      	push	{r4, r5, r6}
 8008836:	0784      	lsls	r4, r0, #30
 8008838:	d046      	beq.n	80088c8 <memset+0x94>
 800883a:	1e54      	subs	r4, r2, #1
 800883c:	2a00      	cmp	r2, #0
 800883e:	d041      	beq.n	80088c4 <memset+0x90>
 8008840:	b2cd      	uxtb	r5, r1
 8008842:	4603      	mov	r3, r0
 8008844:	e002      	b.n	800884c <memset+0x18>
 8008846:	1e62      	subs	r2, r4, #1
 8008848:	b3e4      	cbz	r4, 80088c4 <memset+0x90>
 800884a:	4614      	mov	r4, r2
 800884c:	f803 5b01 	strb.w	r5, [r3], #1
 8008850:	079a      	lsls	r2, r3, #30
 8008852:	d1f8      	bne.n	8008846 <memset+0x12>
 8008854:	2c03      	cmp	r4, #3
 8008856:	d92e      	bls.n	80088b6 <memset+0x82>
 8008858:	b2cd      	uxtb	r5, r1
 800885a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800885e:	2c0f      	cmp	r4, #15
 8008860:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008864:	d919      	bls.n	800889a <memset+0x66>
 8008866:	f103 0210 	add.w	r2, r3, #16
 800886a:	4626      	mov	r6, r4
 800886c:	3e10      	subs	r6, #16
 800886e:	2e0f      	cmp	r6, #15
 8008870:	f842 5c10 	str.w	r5, [r2, #-16]
 8008874:	f842 5c0c 	str.w	r5, [r2, #-12]
 8008878:	f842 5c08 	str.w	r5, [r2, #-8]
 800887c:	f842 5c04 	str.w	r5, [r2, #-4]
 8008880:	f102 0210 	add.w	r2, r2, #16
 8008884:	d8f2      	bhi.n	800886c <memset+0x38>
 8008886:	f1a4 0210 	sub.w	r2, r4, #16
 800888a:	f022 020f 	bic.w	r2, r2, #15
 800888e:	f004 040f 	and.w	r4, r4, #15
 8008892:	3210      	adds	r2, #16
 8008894:	2c03      	cmp	r4, #3
 8008896:	4413      	add	r3, r2
 8008898:	d90d      	bls.n	80088b6 <memset+0x82>
 800889a:	461e      	mov	r6, r3
 800889c:	4622      	mov	r2, r4
 800889e:	3a04      	subs	r2, #4
 80088a0:	2a03      	cmp	r2, #3
 80088a2:	f846 5b04 	str.w	r5, [r6], #4
 80088a6:	d8fa      	bhi.n	800889e <memset+0x6a>
 80088a8:	1f22      	subs	r2, r4, #4
 80088aa:	f022 0203 	bic.w	r2, r2, #3
 80088ae:	3204      	adds	r2, #4
 80088b0:	4413      	add	r3, r2
 80088b2:	f004 0403 	and.w	r4, r4, #3
 80088b6:	b12c      	cbz	r4, 80088c4 <memset+0x90>
 80088b8:	b2c9      	uxtb	r1, r1
 80088ba:	441c      	add	r4, r3
 80088bc:	f803 1b01 	strb.w	r1, [r3], #1
 80088c0:	42a3      	cmp	r3, r4
 80088c2:	d1fb      	bne.n	80088bc <memset+0x88>
 80088c4:	bc70      	pop	{r4, r5, r6}
 80088c6:	4770      	bx	lr
 80088c8:	4614      	mov	r4, r2
 80088ca:	4603      	mov	r3, r0
 80088cc:	e7c2      	b.n	8008854 <memset+0x20>
 80088ce:	bf00      	nop

080088d0 <__malloc_lock>:
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop

080088d4 <__malloc_unlock>:
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop

080088d8 <_sbrk_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4c07      	ldr	r4, [pc, #28]	; (80088f8 <_sbrk_r+0x20>)
 80088dc:	2300      	movs	r3, #0
 80088de:	4605      	mov	r5, r0
 80088e0:	4608      	mov	r0, r1
 80088e2:	6023      	str	r3, [r4, #0]
 80088e4:	f005 f9f4 	bl	800dcd0 <_sbrk>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d000      	beq.n	80088ee <_sbrk_r+0x16>
 80088ec:	bd38      	pop	{r3, r4, r5, pc}
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0fb      	beq.n	80088ec <_sbrk_r+0x14>
 80088f4:	602b      	str	r3, [r5, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	20006df0 	.word	0x20006df0

080088fc <_strtol_l.isra.0>:
 80088fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8008904:	460f      	mov	r7, r1
 8008906:	4680      	mov	r8, r0
 8008908:	4616      	mov	r6, r2
 800890a:	461d      	mov	r5, r3
 800890c:	468b      	mov	fp, r1
 800890e:	e000      	b.n	8008912 <_strtol_l.isra.0+0x16>
 8008910:	46a3      	mov	fp, r4
 8008912:	465c      	mov	r4, fp
 8008914:	4648      	mov	r0, r9
 8008916:	f814 ab01 	ldrb.w	sl, [r4], #1
 800891a:	f001 fdf5 	bl	800a508 <__locale_ctype_ptr_l>
 800891e:	4450      	add	r0, sl
 8008920:	7841      	ldrb	r1, [r0, #1]
 8008922:	f001 0108 	and.w	r1, r1, #8
 8008926:	f001 0cff 	and.w	ip, r1, #255	; 0xff
 800892a:	2900      	cmp	r1, #0
 800892c:	d1f0      	bne.n	8008910 <_strtol_l.isra.0+0x14>
 800892e:	4652      	mov	r2, sl
 8008930:	2a2d      	cmp	r2, #45	; 0x2d
 8008932:	d061      	beq.n	80089f8 <_strtol_l.isra.0+0xfc>
 8008934:	2a2b      	cmp	r2, #43	; 0x2b
 8008936:	bf04      	itt	eq
 8008938:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
 800893c:	f10b 0402 	addeq.w	r4, fp, #2
 8008940:	2d00      	cmp	r5, #0
 8008942:	d043      	beq.n	80089cc <_strtol_l.isra.0+0xd0>
 8008944:	2d10      	cmp	r5, #16
 8008946:	d065      	beq.n	8008a14 <_strtol_l.isra.0+0x118>
 8008948:	46a9      	mov	r9, r5
 800894a:	f1bc 0f00 	cmp.w	ip, #0
 800894e:	bf0c      	ite	eq
 8008950:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
 8008954:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
 8008958:	2100      	movs	r1, #0
 800895a:	fbba fef9 	udiv	lr, sl, r9
 800895e:	4608      	mov	r0, r1
 8008960:	fb09 aa1e 	mls	sl, r9, lr, sl
 8008964:	e005      	b.n	8008972 <_strtol_l.isra.0+0x76>
 8008966:	d029      	beq.n	80089bc <_strtol_l.isra.0+0xc0>
 8008968:	fb09 3000 	mla	r0, r9, r0, r3
 800896c:	2101      	movs	r1, #1
 800896e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8008972:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008976:	2b09      	cmp	r3, #9
 8008978:	d905      	bls.n	8008986 <_strtol_l.isra.0+0x8a>
 800897a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800897e:	2b19      	cmp	r3, #25
 8008980:	d80a      	bhi.n	8008998 <_strtol_l.isra.0+0x9c>
 8008982:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
 8008986:	429d      	cmp	r5, r3
 8008988:	dd0e      	ble.n	80089a8 <_strtol_l.isra.0+0xac>
 800898a:	1c4a      	adds	r2, r1, #1
 800898c:	d0ef      	beq.n	800896e <_strtol_l.isra.0+0x72>
 800898e:	4586      	cmp	lr, r0
 8008990:	d2e9      	bcs.n	8008966 <_strtol_l.isra.0+0x6a>
 8008992:	f04f 31ff 	mov.w	r1, #4294967295
 8008996:	e7ea      	b.n	800896e <_strtol_l.isra.0+0x72>
 8008998:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 800899c:	2b19      	cmp	r3, #25
 800899e:	d803      	bhi.n	80089a8 <_strtol_l.isra.0+0xac>
 80089a0:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
 80089a4:	429d      	cmp	r5, r3
 80089a6:	dcf0      	bgt.n	800898a <_strtol_l.isra.0+0x8e>
 80089a8:	1c4b      	adds	r3, r1, #1
 80089aa:	d015      	beq.n	80089d8 <_strtol_l.isra.0+0xdc>
 80089ac:	f1bc 0f00 	cmp.w	ip, #0
 80089b0:	d110      	bne.n	80089d4 <_strtol_l.isra.0+0xd8>
 80089b2:	b14e      	cbz	r6, 80089c8 <_strtol_l.isra.0+0xcc>
 80089b4:	b9e1      	cbnz	r1, 80089f0 <_strtol_l.isra.0+0xf4>
 80089b6:	6037      	str	r7, [r6, #0]
 80089b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089bc:	459a      	cmp	sl, r3
 80089be:	dad3      	bge.n	8008968 <_strtol_l.isra.0+0x6c>
 80089c0:	4670      	mov	r0, lr
 80089c2:	f04f 31ff 	mov.w	r1, #4294967295
 80089c6:	e7d2      	b.n	800896e <_strtol_l.isra.0+0x72>
 80089c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089cc:	2a30      	cmp	r2, #48	; 0x30
 80089ce:	d01a      	beq.n	8008a06 <_strtol_l.isra.0+0x10a>
 80089d0:	250a      	movs	r5, #10
 80089d2:	e7b9      	b.n	8008948 <_strtol_l.isra.0+0x4c>
 80089d4:	4240      	negs	r0, r0
 80089d6:	e7ec      	b.n	80089b2 <_strtol_l.isra.0+0xb6>
 80089d8:	f1bc 0f00 	cmp.w	ip, #0
 80089dc:	f04f 0322 	mov.w	r3, #34	; 0x22
 80089e0:	bf0c      	ite	eq
 80089e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80089e6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80089ea:	f8c8 3000 	str.w	r3, [r8]
 80089ee:	b1f6      	cbz	r6, 8008a2e <_strtol_l.isra.0+0x132>
 80089f0:	1e67      	subs	r7, r4, #1
 80089f2:	6037      	str	r7, [r6, #0]
 80089f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	f10b 0402 	add.w	r4, fp, #2
 80089fc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008a00:	f04f 0c01 	mov.w	ip, #1
 8008a04:	e79c      	b.n	8008940 <_strtol_l.isra.0+0x44>
 8008a06:	7823      	ldrb	r3, [r4, #0]
 8008a08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a0c:	2b58      	cmp	r3, #88	; 0x58
 8008a0e:	d008      	beq.n	8008a22 <_strtol_l.isra.0+0x126>
 8008a10:	2508      	movs	r5, #8
 8008a12:	e799      	b.n	8008948 <_strtol_l.isra.0+0x4c>
 8008a14:	2a30      	cmp	r2, #48	; 0x30
 8008a16:	d197      	bne.n	8008948 <_strtol_l.isra.0+0x4c>
 8008a18:	7823      	ldrb	r3, [r4, #0]
 8008a1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a1e:	2b58      	cmp	r3, #88	; 0x58
 8008a20:	d192      	bne.n	8008948 <_strtol_l.isra.0+0x4c>
 8008a22:	f04f 0910 	mov.w	r9, #16
 8008a26:	7862      	ldrb	r2, [r4, #1]
 8008a28:	464d      	mov	r5, r9
 8008a2a:	3402      	adds	r4, #2
 8008a2c:	e78d      	b.n	800894a <_strtol_l.isra.0+0x4e>
 8008a2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a32:	bf00      	nop

08008a34 <strtol>:
 8008a34:	b530      	push	{r4, r5, lr}
 8008a36:	4c08      	ldr	r4, [pc, #32]	; (8008a58 <strtol+0x24>)
 8008a38:	4b08      	ldr	r3, [pc, #32]	; (8008a5c <strtol+0x28>)
 8008a3a:	6825      	ldr	r5, [r4, #0]
 8008a3c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008a3e:	b083      	sub	sp, #12
 8008a40:	2c00      	cmp	r4, #0
 8008a42:	bf08      	it	eq
 8008a44:	461c      	moveq	r4, r3
 8008a46:	9400      	str	r4, [sp, #0]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	460a      	mov	r2, r1
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f7ff ff54 	bl	80088fc <_strtol_l.isra.0>
 8008a54:	b003      	add	sp, #12
 8008a56:	bd30      	pop	{r4, r5, pc}
 8008a58:	200005b8 	.word	0x200005b8
 8008a5c:	200009cc 	.word	0x200009cc

08008a60 <__sprint_r.part.0>:
 8008a60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a66:	049c      	lsls	r4, r3, #18
 8008a68:	4692      	mov	sl, r2
 8008a6a:	d52c      	bpl.n	8008ac6 <__sprint_r.part.0+0x66>
 8008a6c:	6893      	ldr	r3, [r2, #8]
 8008a6e:	6812      	ldr	r2, [r2, #0]
 8008a70:	b33b      	cbz	r3, 8008ac2 <__sprint_r.part.0+0x62>
 8008a72:	460f      	mov	r7, r1
 8008a74:	4680      	mov	r8, r0
 8008a76:	f102 0908 	add.w	r9, r2, #8
 8008a7a:	e919 0060 	ldmdb	r9, {r5, r6}
 8008a7e:	08b6      	lsrs	r6, r6, #2
 8008a80:	d017      	beq.n	8008ab2 <__sprint_r.part.0+0x52>
 8008a82:	3d04      	subs	r5, #4
 8008a84:	2400      	movs	r4, #0
 8008a86:	e001      	b.n	8008a8c <__sprint_r.part.0+0x2c>
 8008a88:	42a6      	cmp	r6, r4
 8008a8a:	d010      	beq.n	8008aae <__sprint_r.part.0+0x4e>
 8008a8c:	463a      	mov	r2, r7
 8008a8e:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8008a92:	4640      	mov	r0, r8
 8008a94:	f001 fa34 	bl	8009f00 <_fputwc_r>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	f104 0401 	add.w	r4, r4, #1
 8008a9e:	d1f3      	bne.n	8008a88 <__sprint_r.part.0+0x28>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f8ca 3008 	str.w	r3, [sl, #8]
 8008aa6:	f8ca 3004 	str.w	r3, [sl, #4]
 8008aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aae:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008ab2:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8008ab6:	f8ca 3008 	str.w	r3, [sl, #8]
 8008aba:	f109 0908 	add.w	r9, r9, #8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1db      	bne.n	8008a7a <__sprint_r.part.0+0x1a>
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	e7ec      	b.n	8008aa0 <__sprint_r.part.0+0x40>
 8008ac6:	f001 fb65 	bl	800a194 <__sfvwrite_r>
 8008aca:	2300      	movs	r3, #0
 8008acc:	f8ca 3008 	str.w	r3, [sl, #8]
 8008ad0:	f8ca 3004 	str.w	r3, [sl, #4]
 8008ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008ad8 <_vfiprintf_r>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	b0ab      	sub	sp, #172	; 0xac
 8008ade:	461c      	mov	r4, r3
 8008ae0:	9100      	str	r1, [sp, #0]
 8008ae2:	4690      	mov	r8, r2
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	9005      	str	r0, [sp, #20]
 8008ae8:	b118      	cbz	r0, 8008af2 <_vfiprintf_r+0x1a>
 8008aea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 80de 	beq.w	8008cae <_vfiprintf_r+0x1d6>
 8008af2:	9800      	ldr	r0, [sp, #0]
 8008af4:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8008af8:	b28a      	uxth	r2, r1
 8008afa:	0495      	lsls	r5, r2, #18
 8008afc:	d407      	bmi.n	8008b0e <_vfiprintf_r+0x36>
 8008afe:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008b00:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8008b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b08:	8182      	strh	r2, [r0, #12]
 8008b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8008b0c:	b292      	uxth	r2, r2
 8008b0e:	0711      	lsls	r1, r2, #28
 8008b10:	f140 80b1 	bpl.w	8008c76 <_vfiprintf_r+0x19e>
 8008b14:	9b00      	ldr	r3, [sp, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 80ac 	beq.w	8008c76 <_vfiprintf_r+0x19e>
 8008b1e:	f002 021a 	and.w	r2, r2, #26
 8008b22:	2a0a      	cmp	r2, #10
 8008b24:	f000 80b5 	beq.w	8008c92 <_vfiprintf_r+0x1ba>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8008b2e:	9302      	str	r3, [sp, #8]
 8008b30:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b32:	930e      	str	r3, [sp, #56]	; 0x38
 8008b34:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8008b38:	46da      	mov	sl, fp
 8008b3a:	f898 3000 	ldrb.w	r3, [r8]
 8008b3e:	4644      	mov	r4, r8
 8008b40:	b1fb      	cbz	r3, 8008b82 <_vfiprintf_r+0xaa>
 8008b42:	2b25      	cmp	r3, #37	; 0x25
 8008b44:	d102      	bne.n	8008b4c <_vfiprintf_r+0x74>
 8008b46:	e01c      	b.n	8008b82 <_vfiprintf_r+0xaa>
 8008b48:	2b25      	cmp	r3, #37	; 0x25
 8008b4a:	d003      	beq.n	8008b54 <_vfiprintf_r+0x7c>
 8008b4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f9      	bne.n	8008b48 <_vfiprintf_r+0x70>
 8008b54:	ebc8 0504 	rsb	r5, r8, r4
 8008b58:	b19d      	cbz	r5, 8008b82 <_vfiprintf_r+0xaa>
 8008b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b5e:	f8ca 8000 	str.w	r8, [sl]
 8008b62:	3301      	adds	r3, #1
 8008b64:	442a      	add	r2, r5
 8008b66:	2b07      	cmp	r3, #7
 8008b68:	f8ca 5004 	str.w	r5, [sl, #4]
 8008b6c:	920f      	str	r2, [sp, #60]	; 0x3c
 8008b6e:	930e      	str	r3, [sp, #56]	; 0x38
 8008b70:	dd7b      	ble.n	8008c6a <_vfiprintf_r+0x192>
 8008b72:	2a00      	cmp	r2, #0
 8008b74:	f040 8528 	bne.w	80095c8 <_vfiprintf_r+0xaf0>
 8008b78:	9b02      	ldr	r3, [sp, #8]
 8008b7a:	920e      	str	r2, [sp, #56]	; 0x38
 8008b7c:	442b      	add	r3, r5
 8008b7e:	46da      	mov	sl, fp
 8008b80:	9302      	str	r3, [sp, #8]
 8008b82:	7823      	ldrb	r3, [r4, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 843e 	beq.w	8009406 <_vfiprintf_r+0x92e>
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	f04f 32ff 	mov.w	r2, #4294967295
 8008b94:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8008b98:	f104 0801 	add.w	r8, r4, #1
 8008b9c:	7863      	ldrb	r3, [r4, #1]
 8008b9e:	9201      	str	r2, [sp, #4]
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	460e      	mov	r6, r1
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	f108 0801 	add.w	r8, r8, #1
 8008baa:	f1a3 0220 	sub.w	r2, r3, #32
 8008bae:	2a58      	cmp	r2, #88	; 0x58
 8008bb0:	f200 8393 	bhi.w	80092da <_vfiprintf_r+0x802>
 8008bb4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008bb8:	03910346 	.word	0x03910346
 8008bbc:	034e0391 	.word	0x034e0391
 8008bc0:	03910391 	.word	0x03910391
 8008bc4:	03910391 	.word	0x03910391
 8008bc8:	03910391 	.word	0x03910391
 8008bcc:	02670289 	.word	0x02670289
 8008bd0:	00800391 	.word	0x00800391
 8008bd4:	0391026c 	.word	0x0391026c
 8008bd8:	025901c6 	.word	0x025901c6
 8008bdc:	02590259 	.word	0x02590259
 8008be0:	02590259 	.word	0x02590259
 8008be4:	02590259 	.word	0x02590259
 8008be8:	02590259 	.word	0x02590259
 8008bec:	03910391 	.word	0x03910391
 8008bf0:	03910391 	.word	0x03910391
 8008bf4:	03910391 	.word	0x03910391
 8008bf8:	03910391 	.word	0x03910391
 8008bfc:	03910391 	.word	0x03910391
 8008c00:	039101cb 	.word	0x039101cb
 8008c04:	03910391 	.word	0x03910391
 8008c08:	03910391 	.word	0x03910391
 8008c0c:	03910391 	.word	0x03910391
 8008c10:	03910391 	.word	0x03910391
 8008c14:	02140391 	.word	0x02140391
 8008c18:	03910391 	.word	0x03910391
 8008c1c:	03910391 	.word	0x03910391
 8008c20:	02ee0391 	.word	0x02ee0391
 8008c24:	03910391 	.word	0x03910391
 8008c28:	03910311 	.word	0x03910311
 8008c2c:	03910391 	.word	0x03910391
 8008c30:	03910391 	.word	0x03910391
 8008c34:	03910391 	.word	0x03910391
 8008c38:	03910391 	.word	0x03910391
 8008c3c:	03340391 	.word	0x03340391
 8008c40:	0391038a 	.word	0x0391038a
 8008c44:	03910391 	.word	0x03910391
 8008c48:	038a0367 	.word	0x038a0367
 8008c4c:	03910391 	.word	0x03910391
 8008c50:	0391036c 	.word	0x0391036c
 8008c54:	02950379 	.word	0x02950379
 8008c58:	02e90085 	.word	0x02e90085
 8008c5c:	029b0391 	.word	0x029b0391
 8008c60:	02ba0391 	.word	0x02ba0391
 8008c64:	03910391 	.word	0x03910391
 8008c68:	0353      	.short	0x0353
 8008c6a:	f10a 0a08 	add.w	sl, sl, #8
 8008c6e:	9b02      	ldr	r3, [sp, #8]
 8008c70:	442b      	add	r3, r5
 8008c72:	9302      	str	r3, [sp, #8]
 8008c74:	e785      	b.n	8008b82 <_vfiprintf_r+0xaa>
 8008c76:	9900      	ldr	r1, [sp, #0]
 8008c78:	9805      	ldr	r0, [sp, #20]
 8008c7a:	f000 fed1 	bl	8009a20 <__swsetup_r>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f040 8558 	bne.w	8009734 <_vfiprintf_r+0xc5c>
 8008c84:	9b00      	ldr	r3, [sp, #0]
 8008c86:	899a      	ldrh	r2, [r3, #12]
 8008c88:	f002 021a 	and.w	r2, r2, #26
 8008c8c:	2a0a      	cmp	r2, #10
 8008c8e:	f47f af4b 	bne.w	8008b28 <_vfiprintf_r+0x50>
 8008c92:	9900      	ldr	r1, [sp, #0]
 8008c94:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f6ff af45 	blt.w	8008b28 <_vfiprintf_r+0x50>
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	9805      	ldr	r0, [sp, #20]
 8008ca4:	f000 fe16 	bl	80098d4 <__sbprintf>
 8008ca8:	b02b      	add	sp, #172	; 0xac
 8008caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cae:	f001 f8bd 	bl	8009e2c <__sinit>
 8008cb2:	e71e      	b.n	8008af2 <_vfiprintf_r+0x1a>
 8008cb4:	4264      	negs	r4, r4
 8008cb6:	9304      	str	r3, [sp, #16]
 8008cb8:	f046 0604 	orr.w	r6, r6, #4
 8008cbc:	f898 3000 	ldrb.w	r3, [r8]
 8008cc0:	e771      	b.n	8008ba6 <_vfiprintf_r+0xce>
 8008cc2:	2130      	movs	r1, #48	; 0x30
 8008cc4:	9804      	ldr	r0, [sp, #16]
 8008cc6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8008cca:	9901      	ldr	r1, [sp, #4]
 8008ccc:	9406      	str	r4, [sp, #24]
 8008cce:	f04f 0300 	mov.w	r3, #0
 8008cd2:	2278      	movs	r2, #120	; 0x78
 8008cd4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8008ce0:	6804      	ldr	r4, [r0, #0]
 8008ce2:	f103 0304 	add.w	r3, r3, #4
 8008ce6:	f04f 0500 	mov.w	r5, #0
 8008cea:	f046 0202 	orr.w	r2, r6, #2
 8008cee:	f2c0 8525 	blt.w	800973c <_vfiprintf_r+0xc64>
 8008cf2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8008cf6:	ea54 0205 	orrs.w	r2, r4, r5
 8008cfa:	f046 0602 	orr.w	r6, r6, #2
 8008cfe:	9304      	str	r3, [sp, #16]
 8008d00:	f040 84bf 	bne.w	8009682 <_vfiprintf_r+0xbaa>
 8008d04:	48b3      	ldr	r0, [pc, #716]	; (8008fd4 <_vfiprintf_r+0x4fc>)
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f040 841c 	bne.w	8009546 <_vfiprintf_r+0xa6e>
 8008d0e:	4699      	mov	r9, r3
 8008d10:	2300      	movs	r3, #0
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	9303      	str	r3, [sp, #12]
 8008d16:	465f      	mov	r7, fp
 8008d18:	9b01      	ldr	r3, [sp, #4]
 8008d1a:	9a03      	ldr	r2, [sp, #12]
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	bfb8      	it	lt
 8008d20:	4613      	movlt	r3, r2
 8008d22:	461d      	mov	r5, r3
 8008d24:	f1b9 0f00 	cmp.w	r9, #0
 8008d28:	d000      	beq.n	8008d2c <_vfiprintf_r+0x254>
 8008d2a:	3501      	adds	r5, #1
 8008d2c:	f016 0302 	ands.w	r3, r6, #2
 8008d30:	9307      	str	r3, [sp, #28]
 8008d32:	bf18      	it	ne
 8008d34:	3502      	addne	r5, #2
 8008d36:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 8008d3a:	9308      	str	r3, [sp, #32]
 8008d3c:	f040 82f1 	bne.w	8009322 <_vfiprintf_r+0x84a>
 8008d40:	9b06      	ldr	r3, [sp, #24]
 8008d42:	1b5c      	subs	r4, r3, r5
 8008d44:	2c00      	cmp	r4, #0
 8008d46:	f340 82ec 	ble.w	8009322 <_vfiprintf_r+0x84a>
 8008d4a:	2c10      	cmp	r4, #16
 8008d4c:	f340 8556 	ble.w	80097fc <_vfiprintf_r+0xd24>
 8008d50:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8008fd8 <_vfiprintf_r+0x500>
 8008d54:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8008d58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d5a:	46d4      	mov	ip, sl
 8008d5c:	2310      	movs	r3, #16
 8008d5e:	46c2      	mov	sl, r8
 8008d60:	4670      	mov	r0, lr
 8008d62:	46a8      	mov	r8, r5
 8008d64:	464d      	mov	r5, r9
 8008d66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008d6a:	e007      	b.n	8008d7c <_vfiprintf_r+0x2a4>
 8008d6c:	f100 0e02 	add.w	lr, r0, #2
 8008d70:	f10c 0c08 	add.w	ip, ip, #8
 8008d74:	4608      	mov	r0, r1
 8008d76:	3c10      	subs	r4, #16
 8008d78:	2c10      	cmp	r4, #16
 8008d7a:	dd13      	ble.n	8008da4 <_vfiprintf_r+0x2cc>
 8008d7c:	1c41      	adds	r1, r0, #1
 8008d7e:	3210      	adds	r2, #16
 8008d80:	2907      	cmp	r1, #7
 8008d82:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d84:	f8cc 5000 	str.w	r5, [ip]
 8008d88:	f8cc 3004 	str.w	r3, [ip, #4]
 8008d8c:	910e      	str	r1, [sp, #56]	; 0x38
 8008d8e:	dded      	ble.n	8008d6c <_vfiprintf_r+0x294>
 8008d90:	2a00      	cmp	r2, #0
 8008d92:	f040 82b7 	bne.w	8009304 <_vfiprintf_r+0x82c>
 8008d96:	3c10      	subs	r4, #16
 8008d98:	2c10      	cmp	r4, #16
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f04f 0e01 	mov.w	lr, #1
 8008da0:	46dc      	mov	ip, fp
 8008da2:	dceb      	bgt.n	8008d7c <_vfiprintf_r+0x2a4>
 8008da4:	46a9      	mov	r9, r5
 8008da6:	4670      	mov	r0, lr
 8008da8:	4645      	mov	r5, r8
 8008daa:	46d0      	mov	r8, sl
 8008dac:	46e2      	mov	sl, ip
 8008dae:	4422      	add	r2, r4
 8008db0:	2807      	cmp	r0, #7
 8008db2:	920f      	str	r2, [sp, #60]	; 0x3c
 8008db4:	f8ca 9000 	str.w	r9, [sl]
 8008db8:	f8ca 4004 	str.w	r4, [sl, #4]
 8008dbc:	900e      	str	r0, [sp, #56]	; 0x38
 8008dbe:	f300 8375 	bgt.w	80094ac <_vfiprintf_r+0x9d4>
 8008dc2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008dc6:	f10a 0a08 	add.w	sl, sl, #8
 8008dca:	f100 0e01 	add.w	lr, r0, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f040 82b0 	bne.w	8009334 <_vfiprintf_r+0x85c>
 8008dd4:	9b07      	ldr	r3, [sp, #28]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 82c3 	beq.w	8009362 <_vfiprintf_r+0x88a>
 8008ddc:	3202      	adds	r2, #2
 8008dde:	a90c      	add	r1, sp, #48	; 0x30
 8008de0:	2302      	movs	r3, #2
 8008de2:	f1be 0f07 	cmp.w	lr, #7
 8008de6:	920f      	str	r2, [sp, #60]	; 0x3c
 8008de8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008dec:	e88a 000a 	stmia.w	sl, {r1, r3}
 8008df0:	f340 8378 	ble.w	80094e4 <_vfiprintf_r+0xa0c>
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	f040 840a 	bne.w	800960e <_vfiprintf_r+0xb36>
 8008dfa:	9b08      	ldr	r3, [sp, #32]
 8008dfc:	2b80      	cmp	r3, #128	; 0x80
 8008dfe:	f04f 0e01 	mov.w	lr, #1
 8008e02:	4610      	mov	r0, r2
 8008e04:	46da      	mov	sl, fp
 8008e06:	f040 82b0 	bne.w	800936a <_vfiprintf_r+0x892>
 8008e0a:	9b06      	ldr	r3, [sp, #24]
 8008e0c:	1b5c      	subs	r4, r3, r5
 8008e0e:	2c00      	cmp	r4, #0
 8008e10:	f340 82ab 	ble.w	800936a <_vfiprintf_r+0x892>
 8008e14:	2c10      	cmp	r4, #16
 8008e16:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8008fdc <_vfiprintf_r+0x504>
 8008e1a:	f340 850b 	ble.w	8009834 <_vfiprintf_r+0xd5c>
 8008e1e:	46d6      	mov	lr, sl
 8008e20:	2310      	movs	r3, #16
 8008e22:	46c2      	mov	sl, r8
 8008e24:	46a8      	mov	r8, r5
 8008e26:	464d      	mov	r5, r9
 8008e28:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008e2c:	e007      	b.n	8008e3e <_vfiprintf_r+0x366>
 8008e2e:	f100 0c02 	add.w	ip, r0, #2
 8008e32:	f10e 0e08 	add.w	lr, lr, #8
 8008e36:	4608      	mov	r0, r1
 8008e38:	3c10      	subs	r4, #16
 8008e3a:	2c10      	cmp	r4, #16
 8008e3c:	dd13      	ble.n	8008e66 <_vfiprintf_r+0x38e>
 8008e3e:	1c41      	adds	r1, r0, #1
 8008e40:	3210      	adds	r2, #16
 8008e42:	2907      	cmp	r1, #7
 8008e44:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e46:	f8ce 5000 	str.w	r5, [lr]
 8008e4a:	f8ce 3004 	str.w	r3, [lr, #4]
 8008e4e:	910e      	str	r1, [sp, #56]	; 0x38
 8008e50:	dded      	ble.n	8008e2e <_vfiprintf_r+0x356>
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	f040 8315 	bne.w	8009482 <_vfiprintf_r+0x9aa>
 8008e58:	3c10      	subs	r4, #16
 8008e5a:	2c10      	cmp	r4, #16
 8008e5c:	f04f 0c01 	mov.w	ip, #1
 8008e60:	4610      	mov	r0, r2
 8008e62:	46de      	mov	lr, fp
 8008e64:	dceb      	bgt.n	8008e3e <_vfiprintf_r+0x366>
 8008e66:	46a9      	mov	r9, r5
 8008e68:	4645      	mov	r5, r8
 8008e6a:	46d0      	mov	r8, sl
 8008e6c:	46f2      	mov	sl, lr
 8008e6e:	4422      	add	r2, r4
 8008e70:	f1bc 0f07 	cmp.w	ip, #7
 8008e74:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e76:	f8ca 9000 	str.w	r9, [sl]
 8008e7a:	f8ca 4004 	str.w	r4, [sl, #4]
 8008e7e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8008e82:	f300 83d2 	bgt.w	800962a <_vfiprintf_r+0xb52>
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	9903      	ldr	r1, [sp, #12]
 8008e8a:	1a5c      	subs	r4, r3, r1
 8008e8c:	2c00      	cmp	r4, #0
 8008e8e:	f10a 0a08 	add.w	sl, sl, #8
 8008e92:	f10c 0e01 	add.w	lr, ip, #1
 8008e96:	4660      	mov	r0, ip
 8008e98:	f300 826d 	bgt.w	8009376 <_vfiprintf_r+0x89e>
 8008e9c:	9903      	ldr	r1, [sp, #12]
 8008e9e:	f8ca 7000 	str.w	r7, [sl]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f1be 0f07 	cmp.w	lr, #7
 8008ea8:	920f      	str	r2, [sp, #60]	; 0x3c
 8008eaa:	f8ca 1004 	str.w	r1, [sl, #4]
 8008eae:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008eb2:	f340 82ce 	ble.w	8009452 <_vfiprintf_r+0x97a>
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	f040 833a 	bne.w	8009530 <_vfiprintf_r+0xa58>
 8008ebc:	0770      	lsls	r0, r6, #29
 8008ebe:	920e      	str	r2, [sp, #56]	; 0x38
 8008ec0:	d538      	bpl.n	8008f34 <_vfiprintf_r+0x45c>
 8008ec2:	9b06      	ldr	r3, [sp, #24]
 8008ec4:	1b5c      	subs	r4, r3, r5
 8008ec6:	2c00      	cmp	r4, #0
 8008ec8:	dd34      	ble.n	8008f34 <_vfiprintf_r+0x45c>
 8008eca:	46da      	mov	sl, fp
 8008ecc:	2c10      	cmp	r4, #16
 8008ece:	f340 84ab 	ble.w	8009828 <_vfiprintf_r+0xd50>
 8008ed2:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008fd8 <_vfiprintf_r+0x500>
 8008ed6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008ed8:	464f      	mov	r7, r9
 8008eda:	2610      	movs	r6, #16
 8008edc:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008ee0:	e006      	b.n	8008ef0 <_vfiprintf_r+0x418>
 8008ee2:	1c88      	adds	r0, r1, #2
 8008ee4:	f10a 0a08 	add.w	sl, sl, #8
 8008ee8:	4619      	mov	r1, r3
 8008eea:	3c10      	subs	r4, #16
 8008eec:	2c10      	cmp	r4, #16
 8008eee:	dd13      	ble.n	8008f18 <_vfiprintf_r+0x440>
 8008ef0:	1c4b      	adds	r3, r1, #1
 8008ef2:	3210      	adds	r2, #16
 8008ef4:	2b07      	cmp	r3, #7
 8008ef6:	920f      	str	r2, [sp, #60]	; 0x3c
 8008ef8:	f8ca 7000 	str.w	r7, [sl]
 8008efc:	f8ca 6004 	str.w	r6, [sl, #4]
 8008f00:	930e      	str	r3, [sp, #56]	; 0x38
 8008f02:	ddee      	ble.n	8008ee2 <_vfiprintf_r+0x40a>
 8008f04:	2a00      	cmp	r2, #0
 8008f06:	f040 828e 	bne.w	8009426 <_vfiprintf_r+0x94e>
 8008f0a:	3c10      	subs	r4, #16
 8008f0c:	2c10      	cmp	r4, #16
 8008f0e:	f04f 0001 	mov.w	r0, #1
 8008f12:	4611      	mov	r1, r2
 8008f14:	46da      	mov	sl, fp
 8008f16:	dceb      	bgt.n	8008ef0 <_vfiprintf_r+0x418>
 8008f18:	46b9      	mov	r9, r7
 8008f1a:	4422      	add	r2, r4
 8008f1c:	2807      	cmp	r0, #7
 8008f1e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008f20:	f8ca 9000 	str.w	r9, [sl]
 8008f24:	f8ca 4004 	str.w	r4, [sl, #4]
 8008f28:	900e      	str	r0, [sp, #56]	; 0x38
 8008f2a:	f340 829b 	ble.w	8009464 <_vfiprintf_r+0x98c>
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	f040 8425 	bne.w	800977e <_vfiprintf_r+0xca6>
 8008f34:	9b02      	ldr	r3, [sp, #8]
 8008f36:	9a06      	ldr	r2, [sp, #24]
 8008f38:	42aa      	cmp	r2, r5
 8008f3a:	bfac      	ite	ge
 8008f3c:	189b      	addge	r3, r3, r2
 8008f3e:	195b      	addlt	r3, r3, r5
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	e299      	b.n	8009478 <_vfiprintf_r+0x9a0>
 8008f44:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8008f48:	f898 3000 	ldrb.w	r3, [r8]
 8008f4c:	e62b      	b.n	8008ba6 <_vfiprintf_r+0xce>
 8008f4e:	9406      	str	r4, [sp, #24]
 8008f50:	2900      	cmp	r1, #0
 8008f52:	f040 84af 	bne.w	80098b4 <_vfiprintf_r+0xddc>
 8008f56:	f046 0610 	orr.w	r6, r6, #16
 8008f5a:	06b3      	lsls	r3, r6, #26
 8008f5c:	f140 8312 	bpl.w	8009584 <_vfiprintf_r+0xaac>
 8008f60:	9904      	ldr	r1, [sp, #16]
 8008f62:	3107      	adds	r1, #7
 8008f64:	f021 0107 	bic.w	r1, r1, #7
 8008f68:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008f6c:	3108      	adds	r1, #8
 8008f6e:	9104      	str	r1, [sp, #16]
 8008f70:	4614      	mov	r4, r2
 8008f72:	461d      	mov	r5, r3
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	f173 0300 	sbcs.w	r3, r3, #0
 8008f7a:	f2c0 8386 	blt.w	800968a <_vfiprintf_r+0xbb2>
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f2c0 831a 	blt.w	80095be <_vfiprintf_r+0xae6>
 8008f8a:	ea54 0305 	orrs.w	r3, r4, r5
 8008f8e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8008f92:	f000 80ed 	beq.w	8009170 <_vfiprintf_r+0x698>
 8008f96:	2d00      	cmp	r5, #0
 8008f98:	bf08      	it	eq
 8008f9a:	2c0a      	cmpeq	r4, #10
 8008f9c:	f0c0 80ed 	bcc.w	800917a <_vfiprintf_r+0x6a2>
 8008fa0:	465f      	mov	r7, fp
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	220a      	movs	r2, #10
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f7f7 ff39 	bl	8000e20 <__aeabi_uldivmod>
 8008fae:	3230      	adds	r2, #48	; 0x30
 8008fb0:	f807 2d01 	strb.w	r2, [r7, #-1]!
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	2300      	movs	r3, #0
 8008fba:	220a      	movs	r2, #10
 8008fbc:	f7f7 ff30 	bl	8000e20 <__aeabi_uldivmod>
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	ea54 0305 	orrs.w	r3, r4, r5
 8008fc8:	d1eb      	bne.n	8008fa2 <_vfiprintf_r+0x4ca>
 8008fca:	ebc7 030b 	rsb	r3, r7, fp
 8008fce:	9303      	str	r3, [sp, #12]
 8008fd0:	e6a2      	b.n	8008d18 <_vfiprintf_r+0x240>
 8008fd2:	bf00      	nop
 8008fd4:	0800ee0c 	.word	0x0800ee0c
 8008fd8:	0800ede8 	.word	0x0800ede8
 8008fdc:	0800edd8 	.word	0x0800edd8
 8008fe0:	9406      	str	r4, [sp, #24]
 8008fe2:	2900      	cmp	r1, #0
 8008fe4:	f040 8462 	bne.w	80098ac <_vfiprintf_r+0xdd4>
 8008fe8:	f046 0610 	orr.w	r6, r6, #16
 8008fec:	f016 0320 	ands.w	r3, r6, #32
 8008ff0:	f000 82ae 	beq.w	8009550 <_vfiprintf_r+0xa78>
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	3307      	adds	r3, #7
 8008ff8:	f023 0307 	bic.w	r3, r3, #7
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8009004:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009008:	f103 0208 	add.w	r2, r3, #8
 800900c:	9b01      	ldr	r3, [sp, #4]
 800900e:	9204      	str	r2, [sp, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f2c0 8174 	blt.w	80092fe <_vfiprintf_r+0x826>
 8009016:	ea54 0305 	orrs.w	r3, r4, r5
 800901a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800901e:	f040 816e 	bne.w	80092fe <_vfiprintf_r+0x826>
 8009022:	9b01      	ldr	r3, [sp, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8430 	beq.w	800988a <_vfiprintf_r+0xdb2>
 800902a:	f04f 0900 	mov.w	r9, #0
 800902e:	2400      	movs	r4, #0
 8009030:	2500      	movs	r5, #0
 8009032:	465f      	mov	r7, fp
 8009034:	08e2      	lsrs	r2, r4, #3
 8009036:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800903a:	08e9      	lsrs	r1, r5, #3
 800903c:	f004 0307 	and.w	r3, r4, #7
 8009040:	460d      	mov	r5, r1
 8009042:	4614      	mov	r4, r2
 8009044:	3330      	adds	r3, #48	; 0x30
 8009046:	ea54 0205 	orrs.w	r2, r4, r5
 800904a:	f807 3d01 	strb.w	r3, [r7, #-1]!
 800904e:	d1f1      	bne.n	8009034 <_vfiprintf_r+0x55c>
 8009050:	07f4      	lsls	r4, r6, #31
 8009052:	d5ba      	bpl.n	8008fca <_vfiprintf_r+0x4f2>
 8009054:	2b30      	cmp	r3, #48	; 0x30
 8009056:	d0b8      	beq.n	8008fca <_vfiprintf_r+0x4f2>
 8009058:	2230      	movs	r2, #48	; 0x30
 800905a:	1e7b      	subs	r3, r7, #1
 800905c:	f807 2c01 	strb.w	r2, [r7, #-1]
 8009060:	ebc3 020b 	rsb	r2, r3, fp
 8009064:	9203      	str	r2, [sp, #12]
 8009066:	461f      	mov	r7, r3
 8009068:	e656      	b.n	8008d18 <_vfiprintf_r+0x240>
 800906a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800906e:	2400      	movs	r4, #0
 8009070:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009074:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009078:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800907c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009080:	2a09      	cmp	r2, #9
 8009082:	d9f5      	bls.n	8009070 <_vfiprintf_r+0x598>
 8009084:	e591      	b.n	8008baa <_vfiprintf_r+0xd2>
 8009086:	f898 3000 	ldrb.w	r3, [r8]
 800908a:	2101      	movs	r1, #1
 800908c:	202b      	movs	r0, #43	; 0x2b
 800908e:	e58a      	b.n	8008ba6 <_vfiprintf_r+0xce>
 8009090:	f898 3000 	ldrb.w	r3, [r8]
 8009094:	2b2a      	cmp	r3, #42	; 0x2a
 8009096:	f108 0501 	add.w	r5, r8, #1
 800909a:	f000 83dd 	beq.w	8009858 <_vfiprintf_r+0xd80>
 800909e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80090a2:	2a09      	cmp	r2, #9
 80090a4:	46a8      	mov	r8, r5
 80090a6:	bf98      	it	ls
 80090a8:	2500      	movls	r5, #0
 80090aa:	f200 83ce 	bhi.w	800984a <_vfiprintf_r+0xd72>
 80090ae:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80090b6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80090ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80090be:	2a09      	cmp	r2, #9
 80090c0:	d9f5      	bls.n	80090ae <_vfiprintf_r+0x5d6>
 80090c2:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
 80090c6:	9201      	str	r2, [sp, #4]
 80090c8:	e56f      	b.n	8008baa <_vfiprintf_r+0xd2>
 80090ca:	9a04      	ldr	r2, [sp, #16]
 80090cc:	6814      	ldr	r4, [r2, #0]
 80090ce:	4613      	mov	r3, r2
 80090d0:	2c00      	cmp	r4, #0
 80090d2:	f103 0304 	add.w	r3, r3, #4
 80090d6:	f6ff aded 	blt.w	8008cb4 <_vfiprintf_r+0x1dc>
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	f898 3000 	ldrb.w	r3, [r8]
 80090e0:	e561      	b.n	8008ba6 <_vfiprintf_r+0xce>
 80090e2:	9406      	str	r4, [sp, #24]
 80090e4:	2900      	cmp	r1, #0
 80090e6:	d081      	beq.n	8008fec <_vfiprintf_r+0x514>
 80090e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80090ec:	e77e      	b.n	8008fec <_vfiprintf_r+0x514>
 80090ee:	9a04      	ldr	r2, [sp, #16]
 80090f0:	9406      	str	r4, [sp, #24]
 80090f2:	6817      	ldr	r7, [r2, #0]
 80090f4:	f04f 0300 	mov.w	r3, #0
 80090f8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80090fc:	1d14      	adds	r4, r2, #4
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	2f00      	cmp	r7, #0
 8009102:	f000 8386 	beq.w	8009812 <_vfiprintf_r+0xd3a>
 8009106:	2b00      	cmp	r3, #0
 8009108:	f2c0 835f 	blt.w	80097ca <_vfiprintf_r+0xcf2>
 800910c:	461a      	mov	r2, r3
 800910e:	2100      	movs	r1, #0
 8009110:	4638      	mov	r0, r7
 8009112:	f7f7 f9a5 	bl	8000460 <memchr>
 8009116:	2800      	cmp	r0, #0
 8009118:	f000 838f 	beq.w	800983a <_vfiprintf_r+0xd62>
 800911c:	1bc3      	subs	r3, r0, r7
 800911e:	9303      	str	r3, [sp, #12]
 8009120:	2300      	movs	r3, #0
 8009122:	9404      	str	r4, [sp, #16]
 8009124:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	e5f5      	b.n	8008d18 <_vfiprintf_r+0x240>
 800912c:	9406      	str	r4, [sp, #24]
 800912e:	2900      	cmp	r1, #0
 8009130:	f040 83b9 	bne.w	80098a6 <_vfiprintf_r+0xdce>
 8009134:	f016 0920 	ands.w	r9, r6, #32
 8009138:	d135      	bne.n	80091a6 <_vfiprintf_r+0x6ce>
 800913a:	f016 0310 	ands.w	r3, r6, #16
 800913e:	d103      	bne.n	8009148 <_vfiprintf_r+0x670>
 8009140:	f016 0940 	ands.w	r9, r6, #64	; 0x40
 8009144:	f040 832a 	bne.w	800979c <_vfiprintf_r+0xcc4>
 8009148:	9a04      	ldr	r2, [sp, #16]
 800914a:	4613      	mov	r3, r2
 800914c:	6814      	ldr	r4, [r2, #0]
 800914e:	9a01      	ldr	r2, [sp, #4]
 8009150:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 8009154:	2a00      	cmp	r2, #0
 8009156:	f103 0304 	add.w	r3, r3, #4
 800915a:	f04f 0500 	mov.w	r5, #0
 800915e:	f2c0 8332 	blt.w	80097c6 <_vfiprintf_r+0xcee>
 8009162:	ea54 0205 	orrs.w	r2, r4, r5
 8009166:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	f47f af13 	bne.w	8008f96 <_vfiprintf_r+0x4be>
 8009170:	9b01      	ldr	r3, [sp, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	f43f adcc 	beq.w	8008d10 <_vfiprintf_r+0x238>
 8009178:	2400      	movs	r4, #0
 800917a:	af2a      	add	r7, sp, #168	; 0xa8
 800917c:	3430      	adds	r4, #48	; 0x30
 800917e:	f807 4d41 	strb.w	r4, [r7, #-65]!
 8009182:	ebc7 030b 	rsb	r3, r7, fp
 8009186:	9303      	str	r3, [sp, #12]
 8009188:	e5c6      	b.n	8008d18 <_vfiprintf_r+0x240>
 800918a:	f046 0620 	orr.w	r6, r6, #32
 800918e:	f898 3000 	ldrb.w	r3, [r8]
 8009192:	e508      	b.n	8008ba6 <_vfiprintf_r+0xce>
 8009194:	9406      	str	r4, [sp, #24]
 8009196:	2900      	cmp	r1, #0
 8009198:	f040 836e 	bne.w	8009878 <_vfiprintf_r+0xda0>
 800919c:	f046 0610 	orr.w	r6, r6, #16
 80091a0:	f016 0920 	ands.w	r9, r6, #32
 80091a4:	d0c9      	beq.n	800913a <_vfiprintf_r+0x662>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	3307      	adds	r3, #7
 80091aa:	f023 0307 	bic.w	r3, r3, #7
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 80091b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80091ba:	f103 0208 	add.w	r2, r3, #8
 80091be:	9b01      	ldr	r3, [sp, #4]
 80091c0:	9204      	str	r2, [sp, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f2c0 81f9 	blt.w	80095ba <_vfiprintf_r+0xae2>
 80091c8:	ea54 0305 	orrs.w	r3, r4, r5
 80091cc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80091d0:	f04f 0900 	mov.w	r9, #0
 80091d4:	f47f aedf 	bne.w	8008f96 <_vfiprintf_r+0x4be>
 80091d8:	e7ca      	b.n	8009170 <_vfiprintf_r+0x698>
 80091da:	9406      	str	r4, [sp, #24]
 80091dc:	2900      	cmp	r1, #0
 80091de:	f040 8351 	bne.w	8009884 <_vfiprintf_r+0xdac>
 80091e2:	06b2      	lsls	r2, r6, #26
 80091e4:	48ae      	ldr	r0, [pc, #696]	; (80094a0 <_vfiprintf_r+0x9c8>)
 80091e6:	d541      	bpl.n	800926c <_vfiprintf_r+0x794>
 80091e8:	9a04      	ldr	r2, [sp, #16]
 80091ea:	3207      	adds	r2, #7
 80091ec:	f022 0207 	bic.w	r2, r2, #7
 80091f0:	e9d2 4500 	ldrd	r4, r5, [r2]
 80091f4:	f102 0108 	add.w	r1, r2, #8
 80091f8:	9104      	str	r1, [sp, #16]
 80091fa:	f016 0901 	ands.w	r9, r6, #1
 80091fe:	f000 8177 	beq.w	80094f0 <_vfiprintf_r+0xa18>
 8009202:	ea54 0205 	orrs.w	r2, r4, r5
 8009206:	f040 8226 	bne.w	8009656 <_vfiprintf_r+0xb7e>
 800920a:	f04f 0300 	mov.w	r3, #0
 800920e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	f2c0 8196 	blt.w	8009546 <_vfiprintf_r+0xa6e>
 800921a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800921e:	e572      	b.n	8008d06 <_vfiprintf_r+0x22e>
 8009220:	9a04      	ldr	r2, [sp, #16]
 8009222:	9406      	str	r4, [sp, #24]
 8009224:	6813      	ldr	r3, [r2, #0]
 8009226:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800922a:	4613      	mov	r3, r2
 800922c:	f04f 0100 	mov.w	r1, #0
 8009230:	2501      	movs	r5, #1
 8009232:	3304      	adds	r3, #4
 8009234:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8009238:	9304      	str	r3, [sp, #16]
 800923a:	9503      	str	r5, [sp, #12]
 800923c:	af10      	add	r7, sp, #64	; 0x40
 800923e:	2300      	movs	r3, #0
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	e573      	b.n	8008d2c <_vfiprintf_r+0x254>
 8009244:	f898 3000 	ldrb.w	r3, [r8]
 8009248:	2800      	cmp	r0, #0
 800924a:	f47f acac 	bne.w	8008ba6 <_vfiprintf_r+0xce>
 800924e:	2101      	movs	r1, #1
 8009250:	2020      	movs	r0, #32
 8009252:	e4a8      	b.n	8008ba6 <_vfiprintf_r+0xce>
 8009254:	f046 0601 	orr.w	r6, r6, #1
 8009258:	f898 3000 	ldrb.w	r3, [r8]
 800925c:	e4a3      	b.n	8008ba6 <_vfiprintf_r+0xce>
 800925e:	9406      	str	r4, [sp, #24]
 8009260:	2900      	cmp	r1, #0
 8009262:	f040 830c 	bne.w	800987e <_vfiprintf_r+0xda6>
 8009266:	06b2      	lsls	r2, r6, #26
 8009268:	488e      	ldr	r0, [pc, #568]	; (80094a4 <_vfiprintf_r+0x9cc>)
 800926a:	d4bd      	bmi.n	80091e8 <_vfiprintf_r+0x710>
 800926c:	9904      	ldr	r1, [sp, #16]
 800926e:	06f7      	lsls	r7, r6, #27
 8009270:	460a      	mov	r2, r1
 8009272:	f100 819d 	bmi.w	80095b0 <_vfiprintf_r+0xad8>
 8009276:	0675      	lsls	r5, r6, #25
 8009278:	f140 819a 	bpl.w	80095b0 <_vfiprintf_r+0xad8>
 800927c:	3204      	adds	r2, #4
 800927e:	880c      	ldrh	r4, [r1, #0]
 8009280:	9204      	str	r2, [sp, #16]
 8009282:	2500      	movs	r5, #0
 8009284:	e7b9      	b.n	80091fa <_vfiprintf_r+0x722>
 8009286:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800928a:	f898 3000 	ldrb.w	r3, [r8]
 800928e:	e48a      	b.n	8008ba6 <_vfiprintf_r+0xce>
 8009290:	f898 3000 	ldrb.w	r3, [r8]
 8009294:	2b6c      	cmp	r3, #108	; 0x6c
 8009296:	bf03      	ittte	eq
 8009298:	f898 3001 	ldrbeq.w	r3, [r8, #1]
 800929c:	f046 0620 	orreq.w	r6, r6, #32
 80092a0:	f108 0801 	addeq.w	r8, r8, #1
 80092a4:	f046 0610 	orrne.w	r6, r6, #16
 80092a8:	e47d      	b.n	8008ba6 <_vfiprintf_r+0xce>
 80092aa:	2900      	cmp	r1, #0
 80092ac:	f040 8309 	bne.w	80098c2 <_vfiprintf_r+0xdea>
 80092b0:	06b4      	lsls	r4, r6, #26
 80092b2:	f140 821c 	bpl.w	80096ee <_vfiprintf_r+0xc16>
 80092b6:	9a04      	ldr	r2, [sp, #16]
 80092b8:	9902      	ldr	r1, [sp, #8]
 80092ba:	6813      	ldr	r3, [r2, #0]
 80092bc:	17cd      	asrs	r5, r1, #31
 80092be:	4608      	mov	r0, r1
 80092c0:	3204      	adds	r2, #4
 80092c2:	4629      	mov	r1, r5
 80092c4:	9204      	str	r2, [sp, #16]
 80092c6:	e9c3 0100 	strd	r0, r1, [r3]
 80092ca:	e436      	b.n	8008b3a <_vfiprintf_r+0x62>
 80092cc:	9406      	str	r4, [sp, #24]
 80092ce:	2900      	cmp	r1, #0
 80092d0:	f43f ae43 	beq.w	8008f5a <_vfiprintf_r+0x482>
 80092d4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80092d8:	e63f      	b.n	8008f5a <_vfiprintf_r+0x482>
 80092da:	9406      	str	r4, [sp, #24]
 80092dc:	2900      	cmp	r1, #0
 80092de:	f040 82ed 	bne.w	80098bc <_vfiprintf_r+0xde4>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 808f 	beq.w	8009406 <_vfiprintf_r+0x92e>
 80092e8:	2501      	movs	r5, #1
 80092ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80092f6:	9503      	str	r5, [sp, #12]
 80092f8:	af10      	add	r7, sp, #64	; 0x40
 80092fa:	e7a0      	b.n	800923e <_vfiprintf_r+0x766>
 80092fc:	9304      	str	r3, [sp, #16]
 80092fe:	f04f 0900 	mov.w	r9, #0
 8009302:	e696      	b.n	8009032 <_vfiprintf_r+0x55a>
 8009304:	aa0d      	add	r2, sp, #52	; 0x34
 8009306:	9900      	ldr	r1, [sp, #0]
 8009308:	9309      	str	r3, [sp, #36]	; 0x24
 800930a:	4648      	mov	r0, r9
 800930c:	f7ff fba8 	bl	8008a60 <__sprint_r.part.0>
 8009310:	2800      	cmp	r0, #0
 8009312:	d17f      	bne.n	8009414 <_vfiprintf_r+0x93c>
 8009314:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931a:	f100 0e01 	add.w	lr, r0, #1
 800931e:	46dc      	mov	ip, fp
 8009320:	e529      	b.n	8008d76 <_vfiprintf_r+0x29e>
 8009322:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009326:	f100 0e01 	add.w	lr, r0, #1
 800932a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800932e:	2b00      	cmp	r3, #0
 8009330:	f43f ad50 	beq.w	8008dd4 <_vfiprintf_r+0x2fc>
 8009334:	3201      	adds	r2, #1
 8009336:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800933a:	2301      	movs	r3, #1
 800933c:	f1be 0f07 	cmp.w	lr, #7
 8009340:	920f      	str	r2, [sp, #60]	; 0x3c
 8009342:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8009346:	e88a 000a 	stmia.w	sl, {r1, r3}
 800934a:	f340 80bf 	ble.w	80094cc <_vfiprintf_r+0x9f4>
 800934e:	2a00      	cmp	r2, #0
 8009350:	f040 814e 	bne.w	80095f0 <_vfiprintf_r+0xb18>
 8009354:	9907      	ldr	r1, [sp, #28]
 8009356:	2900      	cmp	r1, #0
 8009358:	f040 80be 	bne.w	80094d8 <_vfiprintf_r+0xa00>
 800935c:	469e      	mov	lr, r3
 800935e:	4610      	mov	r0, r2
 8009360:	46da      	mov	sl, fp
 8009362:	9b08      	ldr	r3, [sp, #32]
 8009364:	2b80      	cmp	r3, #128	; 0x80
 8009366:	f43f ad50 	beq.w	8008e0a <_vfiprintf_r+0x332>
 800936a:	9b01      	ldr	r3, [sp, #4]
 800936c:	9903      	ldr	r1, [sp, #12]
 800936e:	1a5c      	subs	r4, r3, r1
 8009370:	2c00      	cmp	r4, #0
 8009372:	f77f ad93 	ble.w	8008e9c <_vfiprintf_r+0x3c4>
 8009376:	2c10      	cmp	r4, #16
 8009378:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80094a8 <_vfiprintf_r+0x9d0>
 800937c:	dd25      	ble.n	80093ca <_vfiprintf_r+0x8f2>
 800937e:	46d4      	mov	ip, sl
 8009380:	2310      	movs	r3, #16
 8009382:	46c2      	mov	sl, r8
 8009384:	46a8      	mov	r8, r5
 8009386:	464d      	mov	r5, r9
 8009388:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800938c:	e007      	b.n	800939e <_vfiprintf_r+0x8c6>
 800938e:	f100 0e02 	add.w	lr, r0, #2
 8009392:	f10c 0c08 	add.w	ip, ip, #8
 8009396:	4608      	mov	r0, r1
 8009398:	3c10      	subs	r4, #16
 800939a:	2c10      	cmp	r4, #16
 800939c:	dd11      	ble.n	80093c2 <_vfiprintf_r+0x8ea>
 800939e:	1c41      	adds	r1, r0, #1
 80093a0:	3210      	adds	r2, #16
 80093a2:	2907      	cmp	r1, #7
 80093a4:	920f      	str	r2, [sp, #60]	; 0x3c
 80093a6:	f8cc 5000 	str.w	r5, [ip]
 80093aa:	f8cc 3004 	str.w	r3, [ip, #4]
 80093ae:	910e      	str	r1, [sp, #56]	; 0x38
 80093b0:	dded      	ble.n	800938e <_vfiprintf_r+0x8b6>
 80093b2:	b9d2      	cbnz	r2, 80093ea <_vfiprintf_r+0x912>
 80093b4:	3c10      	subs	r4, #16
 80093b6:	2c10      	cmp	r4, #16
 80093b8:	f04f 0e01 	mov.w	lr, #1
 80093bc:	4610      	mov	r0, r2
 80093be:	46dc      	mov	ip, fp
 80093c0:	dced      	bgt.n	800939e <_vfiprintf_r+0x8c6>
 80093c2:	46a9      	mov	r9, r5
 80093c4:	4645      	mov	r5, r8
 80093c6:	46d0      	mov	r8, sl
 80093c8:	46e2      	mov	sl, ip
 80093ca:	4422      	add	r2, r4
 80093cc:	f1be 0f07 	cmp.w	lr, #7
 80093d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80093d2:	f8ca 9000 	str.w	r9, [sl]
 80093d6:	f8ca 4004 	str.w	r4, [sl, #4]
 80093da:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80093de:	dc2e      	bgt.n	800943e <_vfiprintf_r+0x966>
 80093e0:	f10a 0a08 	add.w	sl, sl, #8
 80093e4:	f10e 0e01 	add.w	lr, lr, #1
 80093e8:	e558      	b.n	8008e9c <_vfiprintf_r+0x3c4>
 80093ea:	aa0d      	add	r2, sp, #52	; 0x34
 80093ec:	9900      	ldr	r1, [sp, #0]
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	4648      	mov	r0, r9
 80093f2:	f7ff fb35 	bl	8008a60 <__sprint_r.part.0>
 80093f6:	b968      	cbnz	r0, 8009414 <_vfiprintf_r+0x93c>
 80093f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80093fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	f100 0e01 	add.w	lr, r0, #1
 8009402:	46dc      	mov	ip, fp
 8009404:	e7c8      	b.n	8009398 <_vfiprintf_r+0x8c0>
 8009406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009408:	b123      	cbz	r3, 8009414 <_vfiprintf_r+0x93c>
 800940a:	9805      	ldr	r0, [sp, #20]
 800940c:	9900      	ldr	r1, [sp, #0]
 800940e:	aa0d      	add	r2, sp, #52	; 0x34
 8009410:	f7ff fb26 	bl	8008a60 <__sprint_r.part.0>
 8009414:	9b00      	ldr	r3, [sp, #0]
 8009416:	899b      	ldrh	r3, [r3, #12]
 8009418:	065a      	lsls	r2, r3, #25
 800941a:	f100 818b 	bmi.w	8009734 <_vfiprintf_r+0xc5c>
 800941e:	9802      	ldr	r0, [sp, #8]
 8009420:	b02b      	add	sp, #172	; 0xac
 8009422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009426:	aa0d      	add	r2, sp, #52	; 0x34
 8009428:	9900      	ldr	r1, [sp, #0]
 800942a:	4648      	mov	r0, r9
 800942c:	f7ff fb18 	bl	8008a60 <__sprint_r.part.0>
 8009430:	2800      	cmp	r0, #0
 8009432:	d1ef      	bne.n	8009414 <_vfiprintf_r+0x93c>
 8009434:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009438:	1c48      	adds	r0, r1, #1
 800943a:	46da      	mov	sl, fp
 800943c:	e555      	b.n	8008eea <_vfiprintf_r+0x412>
 800943e:	2a00      	cmp	r2, #0
 8009440:	f040 80fb 	bne.w	800963a <_vfiprintf_r+0xb62>
 8009444:	9a03      	ldr	r2, [sp, #12]
 8009446:	921b      	str	r2, [sp, #108]	; 0x6c
 8009448:	2301      	movs	r3, #1
 800944a:	920f      	str	r2, [sp, #60]	; 0x3c
 800944c:	971a      	str	r7, [sp, #104]	; 0x68
 800944e:	930e      	str	r3, [sp, #56]	; 0x38
 8009450:	46da      	mov	sl, fp
 8009452:	f10a 0a08 	add.w	sl, sl, #8
 8009456:	0771      	lsls	r1, r6, #29
 8009458:	d504      	bpl.n	8009464 <_vfiprintf_r+0x98c>
 800945a:	9b06      	ldr	r3, [sp, #24]
 800945c:	1b5c      	subs	r4, r3, r5
 800945e:	2c00      	cmp	r4, #0
 8009460:	f73f ad34 	bgt.w	8008ecc <_vfiprintf_r+0x3f4>
 8009464:	9b02      	ldr	r3, [sp, #8]
 8009466:	9906      	ldr	r1, [sp, #24]
 8009468:	42a9      	cmp	r1, r5
 800946a:	bfac      	ite	ge
 800946c:	185b      	addge	r3, r3, r1
 800946e:	195b      	addlt	r3, r3, r5
 8009470:	9302      	str	r3, [sp, #8]
 8009472:	2a00      	cmp	r2, #0
 8009474:	f040 80b3 	bne.w	80095de <_vfiprintf_r+0xb06>
 8009478:	2300      	movs	r3, #0
 800947a:	930e      	str	r3, [sp, #56]	; 0x38
 800947c:	46da      	mov	sl, fp
 800947e:	f7ff bb5c 	b.w	8008b3a <_vfiprintf_r+0x62>
 8009482:	aa0d      	add	r2, sp, #52	; 0x34
 8009484:	9900      	ldr	r1, [sp, #0]
 8009486:	9307      	str	r3, [sp, #28]
 8009488:	4648      	mov	r0, r9
 800948a:	f7ff fae9 	bl	8008a60 <__sprint_r.part.0>
 800948e:	2800      	cmp	r0, #0
 8009490:	d1c0      	bne.n	8009414 <_vfiprintf_r+0x93c>
 8009492:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009496:	9b07      	ldr	r3, [sp, #28]
 8009498:	f100 0c01 	add.w	ip, r0, #1
 800949c:	46de      	mov	lr, fp
 800949e:	e4cb      	b.n	8008e38 <_vfiprintf_r+0x360>
 80094a0:	0800edf8 	.word	0x0800edf8
 80094a4:	0800ee0c 	.word	0x0800ee0c
 80094a8:	0800edd8 	.word	0x0800edd8
 80094ac:	2a00      	cmp	r2, #0
 80094ae:	f040 8133 	bne.w	8009718 <_vfiprintf_r+0xc40>
 80094b2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 80f5 	beq.w	80096a6 <_vfiprintf_r+0xbce>
 80094bc:	2301      	movs	r3, #1
 80094be:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80094c2:	461a      	mov	r2, r3
 80094c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80094c6:	469e      	mov	lr, r3
 80094c8:	911a      	str	r1, [sp, #104]	; 0x68
 80094ca:	46da      	mov	sl, fp
 80094cc:	4670      	mov	r0, lr
 80094ce:	f10a 0a08 	add.w	sl, sl, #8
 80094d2:	f10e 0e01 	add.w	lr, lr, #1
 80094d6:	e47d      	b.n	8008dd4 <_vfiprintf_r+0x2fc>
 80094d8:	a90c      	add	r1, sp, #48	; 0x30
 80094da:	2202      	movs	r2, #2
 80094dc:	469e      	mov	lr, r3
 80094de:	911a      	str	r1, [sp, #104]	; 0x68
 80094e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80094e2:	46da      	mov	sl, fp
 80094e4:	4670      	mov	r0, lr
 80094e6:	f10a 0a08 	add.w	sl, sl, #8
 80094ea:	f10e 0e01 	add.w	lr, lr, #1
 80094ee:	e738      	b.n	8009362 <_vfiprintf_r+0x88a>
 80094f0:	9b01      	ldr	r3, [sp, #4]
 80094f2:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f2c0 812a 	blt.w	8009750 <_vfiprintf_r+0xc78>
 80094fc:	ea54 0305 	orrs.w	r3, r4, r5
 8009500:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8009504:	f43f abff 	beq.w	8008d06 <_vfiprintf_r+0x22e>
 8009508:	465f      	mov	r7, fp
 800950a:	0923      	lsrs	r3, r4, #4
 800950c:	f004 010f 	and.w	r1, r4, #15
 8009510:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8009514:	092a      	lsrs	r2, r5, #4
 8009516:	461c      	mov	r4, r3
 8009518:	4615      	mov	r5, r2
 800951a:	5c43      	ldrb	r3, [r0, r1]
 800951c:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8009520:	ea54 0305 	orrs.w	r3, r4, r5
 8009524:	d1f1      	bne.n	800950a <_vfiprintf_r+0xa32>
 8009526:	ebc7 030b 	rsb	r3, r7, fp
 800952a:	9303      	str	r3, [sp, #12]
 800952c:	f7ff bbf4 	b.w	8008d18 <_vfiprintf_r+0x240>
 8009530:	aa0d      	add	r2, sp, #52	; 0x34
 8009532:	9900      	ldr	r1, [sp, #0]
 8009534:	9805      	ldr	r0, [sp, #20]
 8009536:	f7ff fa93 	bl	8008a60 <__sprint_r.part.0>
 800953a:	2800      	cmp	r0, #0
 800953c:	f47f af6a 	bne.w	8009414 <_vfiprintf_r+0x93c>
 8009540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009542:	46da      	mov	sl, fp
 8009544:	e787      	b.n	8009456 <_vfiprintf_r+0x97e>
 8009546:	f04f 0900 	mov.w	r9, #0
 800954a:	2400      	movs	r4, #0
 800954c:	2500      	movs	r5, #0
 800954e:	e7db      	b.n	8009508 <_vfiprintf_r+0xa30>
 8009550:	f016 0210 	ands.w	r2, r6, #16
 8009554:	f000 80b2 	beq.w	80096bc <_vfiprintf_r+0xbe4>
 8009558:	9904      	ldr	r1, [sp, #16]
 800955a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800955e:	460a      	mov	r2, r1
 8009560:	680c      	ldr	r4, [r1, #0]
 8009562:	9901      	ldr	r1, [sp, #4]
 8009564:	2900      	cmp	r1, #0
 8009566:	f102 0204 	add.w	r2, r2, #4
 800956a:	f04f 0500 	mov.w	r5, #0
 800956e:	f2c0 8159 	blt.w	8009824 <_vfiprintf_r+0xd4c>
 8009572:	ea54 0105 	orrs.w	r1, r4, r5
 8009576:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800957a:	9204      	str	r2, [sp, #16]
 800957c:	f43f ad51 	beq.w	8009022 <_vfiprintf_r+0x54a>
 8009580:	4699      	mov	r9, r3
 8009582:	e556      	b.n	8009032 <_vfiprintf_r+0x55a>
 8009584:	06f7      	lsls	r7, r6, #27
 8009586:	d40a      	bmi.n	800959e <_vfiprintf_r+0xac6>
 8009588:	0675      	lsls	r5, r6, #25
 800958a:	d508      	bpl.n	800959e <_vfiprintf_r+0xac6>
 800958c:	9904      	ldr	r1, [sp, #16]
 800958e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8009592:	3104      	adds	r1, #4
 8009594:	17e5      	asrs	r5, r4, #31
 8009596:	4622      	mov	r2, r4
 8009598:	462b      	mov	r3, r5
 800959a:	9104      	str	r1, [sp, #16]
 800959c:	e4ea      	b.n	8008f74 <_vfiprintf_r+0x49c>
 800959e:	9a04      	ldr	r2, [sp, #16]
 80095a0:	6814      	ldr	r4, [r2, #0]
 80095a2:	4613      	mov	r3, r2
 80095a4:	3304      	adds	r3, #4
 80095a6:	17e5      	asrs	r5, r4, #31
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	4622      	mov	r2, r4
 80095ac:	462b      	mov	r3, r5
 80095ae:	e4e1      	b.n	8008f74 <_vfiprintf_r+0x49c>
 80095b0:	6814      	ldr	r4, [r2, #0]
 80095b2:	3204      	adds	r2, #4
 80095b4:	9204      	str	r2, [sp, #16]
 80095b6:	2500      	movs	r5, #0
 80095b8:	e61f      	b.n	80091fa <_vfiprintf_r+0x722>
 80095ba:	f04f 0900 	mov.w	r9, #0
 80095be:	ea54 0305 	orrs.w	r3, r4, r5
 80095c2:	f47f ace8 	bne.w	8008f96 <_vfiprintf_r+0x4be>
 80095c6:	e5d8      	b.n	800917a <_vfiprintf_r+0x6a2>
 80095c8:	aa0d      	add	r2, sp, #52	; 0x34
 80095ca:	9900      	ldr	r1, [sp, #0]
 80095cc:	9805      	ldr	r0, [sp, #20]
 80095ce:	f7ff fa47 	bl	8008a60 <__sprint_r.part.0>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	f47f af1e 	bne.w	8009414 <_vfiprintf_r+0x93c>
 80095d8:	46da      	mov	sl, fp
 80095da:	f7ff bb48 	b.w	8008c6e <_vfiprintf_r+0x196>
 80095de:	aa0d      	add	r2, sp, #52	; 0x34
 80095e0:	9900      	ldr	r1, [sp, #0]
 80095e2:	9805      	ldr	r0, [sp, #20]
 80095e4:	f7ff fa3c 	bl	8008a60 <__sprint_r.part.0>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	f43f af45 	beq.w	8009478 <_vfiprintf_r+0x9a0>
 80095ee:	e711      	b.n	8009414 <_vfiprintf_r+0x93c>
 80095f0:	aa0d      	add	r2, sp, #52	; 0x34
 80095f2:	9900      	ldr	r1, [sp, #0]
 80095f4:	9805      	ldr	r0, [sp, #20]
 80095f6:	f7ff fa33 	bl	8008a60 <__sprint_r.part.0>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f47f af0a 	bne.w	8009414 <_vfiprintf_r+0x93c>
 8009600:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009604:	f100 0e01 	add.w	lr, r0, #1
 8009608:	46da      	mov	sl, fp
 800960a:	f7ff bbe3 	b.w	8008dd4 <_vfiprintf_r+0x2fc>
 800960e:	aa0d      	add	r2, sp, #52	; 0x34
 8009610:	9900      	ldr	r1, [sp, #0]
 8009612:	9805      	ldr	r0, [sp, #20]
 8009614:	f7ff fa24 	bl	8008a60 <__sprint_r.part.0>
 8009618:	2800      	cmp	r0, #0
 800961a:	f47f aefb 	bne.w	8009414 <_vfiprintf_r+0x93c>
 800961e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009622:	f100 0e01 	add.w	lr, r0, #1
 8009626:	46da      	mov	sl, fp
 8009628:	e69b      	b.n	8009362 <_vfiprintf_r+0x88a>
 800962a:	2a00      	cmp	r2, #0
 800962c:	f040 80d8 	bne.w	80097e0 <_vfiprintf_r+0xd08>
 8009630:	f04f 0e01 	mov.w	lr, #1
 8009634:	4610      	mov	r0, r2
 8009636:	46da      	mov	sl, fp
 8009638:	e697      	b.n	800936a <_vfiprintf_r+0x892>
 800963a:	aa0d      	add	r2, sp, #52	; 0x34
 800963c:	9900      	ldr	r1, [sp, #0]
 800963e:	9805      	ldr	r0, [sp, #20]
 8009640:	f7ff fa0e 	bl	8008a60 <__sprint_r.part.0>
 8009644:	2800      	cmp	r0, #0
 8009646:	f47f aee5 	bne.w	8009414 <_vfiprintf_r+0x93c>
 800964a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800964c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800964e:	f103 0e01 	add.w	lr, r3, #1
 8009652:	46da      	mov	sl, fp
 8009654:	e422      	b.n	8008e9c <_vfiprintf_r+0x3c4>
 8009656:	2230      	movs	r2, #48	; 0x30
 8009658:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800965c:	9a01      	ldr	r2, [sp, #4]
 800965e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8009662:	2a00      	cmp	r2, #0
 8009664:	f04f 0300 	mov.w	r3, #0
 8009668:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800966c:	f046 0302 	orr.w	r3, r6, #2
 8009670:	f2c0 80cb 	blt.w	800980a <_vfiprintf_r+0xd32>
 8009674:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8009678:	f046 0602 	orr.w	r6, r6, #2
 800967c:	f04f 0900 	mov.w	r9, #0
 8009680:	e742      	b.n	8009508 <_vfiprintf_r+0xa30>
 8009682:	f04f 0900 	mov.w	r9, #0
 8009686:	4890      	ldr	r0, [pc, #576]	; (80098c8 <_vfiprintf_r+0xdf0>)
 8009688:	e73e      	b.n	8009508 <_vfiprintf_r+0xa30>
 800968a:	9b01      	ldr	r3, [sp, #4]
 800968c:	4264      	negs	r4, r4
 800968e:	f04f 092d 	mov.w	r9, #45	; 0x2d
 8009692:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 800969c:	f6ff ac7b 	blt.w	8008f96 <_vfiprintf_r+0x4be>
 80096a0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80096a4:	e477      	b.n	8008f96 <_vfiprintf_r+0x4be>
 80096a6:	9b07      	ldr	r3, [sp, #28]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d072      	beq.n	8009792 <_vfiprintf_r+0xcba>
 80096ac:	ab0c      	add	r3, sp, #48	; 0x30
 80096ae:	2202      	movs	r2, #2
 80096b0:	931a      	str	r3, [sp, #104]	; 0x68
 80096b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80096b4:	f04f 0e01 	mov.w	lr, #1
 80096b8:	46da      	mov	sl, fp
 80096ba:	e713      	b.n	80094e4 <_vfiprintf_r+0xa0c>
 80096bc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
 80096c0:	d048      	beq.n	8009754 <_vfiprintf_r+0xc7c>
 80096c2:	9904      	ldr	r1, [sp, #16]
 80096c4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 80096c8:	460b      	mov	r3, r1
 80096ca:	880c      	ldrh	r4, [r1, #0]
 80096cc:	9901      	ldr	r1, [sp, #4]
 80096ce:	2900      	cmp	r1, #0
 80096d0:	f103 0304 	add.w	r3, r3, #4
 80096d4:	f04f 0500 	mov.w	r5, #0
 80096d8:	f6ff ae10 	blt.w	80092fc <_vfiprintf_r+0x824>
 80096dc:	ea54 0105 	orrs.w	r1, r4, r5
 80096e0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	f43f ac9c 	beq.w	8009022 <_vfiprintf_r+0x54a>
 80096ea:	4691      	mov	r9, r2
 80096ec:	e4a1      	b.n	8009032 <_vfiprintf_r+0x55a>
 80096ee:	06f0      	lsls	r0, r6, #27
 80096f0:	d40a      	bmi.n	8009708 <_vfiprintf_r+0xc30>
 80096f2:	0671      	lsls	r1, r6, #25
 80096f4:	d508      	bpl.n	8009708 <_vfiprintf_r+0xc30>
 80096f6:	9a04      	ldr	r2, [sp, #16]
 80096f8:	6813      	ldr	r3, [r2, #0]
 80096fa:	3204      	adds	r2, #4
 80096fc:	9204      	str	r2, [sp, #16]
 80096fe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8009702:	801a      	strh	r2, [r3, #0]
 8009704:	f7ff ba19 	b.w	8008b3a <_vfiprintf_r+0x62>
 8009708:	9a04      	ldr	r2, [sp, #16]
 800970a:	6813      	ldr	r3, [r2, #0]
 800970c:	3204      	adds	r2, #4
 800970e:	9204      	str	r2, [sp, #16]
 8009710:	9a02      	ldr	r2, [sp, #8]
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	f7ff ba11 	b.w	8008b3a <_vfiprintf_r+0x62>
 8009718:	aa0d      	add	r2, sp, #52	; 0x34
 800971a:	9900      	ldr	r1, [sp, #0]
 800971c:	9805      	ldr	r0, [sp, #20]
 800971e:	f7ff f99f 	bl	8008a60 <__sprint_r.part.0>
 8009722:	2800      	cmp	r0, #0
 8009724:	f47f ae76 	bne.w	8009414 <_vfiprintf_r+0x93c>
 8009728:	980e      	ldr	r0, [sp, #56]	; 0x38
 800972a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800972c:	f100 0e01 	add.w	lr, r0, #1
 8009730:	46da      	mov	sl, fp
 8009732:	e5fa      	b.n	800932a <_vfiprintf_r+0x852>
 8009734:	f04f 30ff 	mov.w	r0, #4294967295
 8009738:	f7ff bab6 	b.w	8008ca8 <_vfiprintf_r+0x1d0>
 800973c:	4862      	ldr	r0, [pc, #392]	; (80098c8 <_vfiprintf_r+0xdf0>)
 800973e:	4616      	mov	r6, r2
 8009740:	ea54 0205 	orrs.w	r2, r4, r5
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	f04f 0900 	mov.w	r9, #0
 800974a:	f47f aedd 	bne.w	8009508 <_vfiprintf_r+0xa30>
 800974e:	e6fc      	b.n	800954a <_vfiprintf_r+0xa72>
 8009750:	9b04      	ldr	r3, [sp, #16]
 8009752:	e7f5      	b.n	8009740 <_vfiprintf_r+0xc68>
 8009754:	9a04      	ldr	r2, [sp, #16]
 8009756:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 800975a:	4613      	mov	r3, r2
 800975c:	6814      	ldr	r4, [r2, #0]
 800975e:	9a01      	ldr	r2, [sp, #4]
 8009760:	2a00      	cmp	r2, #0
 8009762:	f103 0304 	add.w	r3, r3, #4
 8009766:	f04f 0500 	mov.w	r5, #0
 800976a:	f6ff adc7 	blt.w	80092fc <_vfiprintf_r+0x824>
 800976e:	ea54 0205 	orrs.w	r2, r4, r5
 8009772:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	f47f ac5b 	bne.w	8009032 <_vfiprintf_r+0x55a>
 800977c:	e451      	b.n	8009022 <_vfiprintf_r+0x54a>
 800977e:	aa0d      	add	r2, sp, #52	; 0x34
 8009780:	9900      	ldr	r1, [sp, #0]
 8009782:	9805      	ldr	r0, [sp, #20]
 8009784:	f7ff f96c 	bl	8008a60 <__sprint_r.part.0>
 8009788:	2800      	cmp	r0, #0
 800978a:	f47f ae43 	bne.w	8009414 <_vfiprintf_r+0x93c>
 800978e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009790:	e668      	b.n	8009464 <_vfiprintf_r+0x98c>
 8009792:	4610      	mov	r0, r2
 8009794:	f04f 0e01 	mov.w	lr, #1
 8009798:	46da      	mov	sl, fp
 800979a:	e5e6      	b.n	800936a <_vfiprintf_r+0x892>
 800979c:	9904      	ldr	r1, [sp, #16]
 800979e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80097a2:	460a      	mov	r2, r1
 80097a4:	880c      	ldrh	r4, [r1, #0]
 80097a6:	9901      	ldr	r1, [sp, #4]
 80097a8:	2900      	cmp	r1, #0
 80097aa:	f102 0204 	add.w	r2, r2, #4
 80097ae:	f04f 0500 	mov.w	r5, #0
 80097b2:	db4e      	blt.n	8009852 <_vfiprintf_r+0xd7a>
 80097b4:	ea54 0105 	orrs.w	r1, r4, r5
 80097b8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80097bc:	9204      	str	r2, [sp, #16]
 80097be:	4699      	mov	r9, r3
 80097c0:	f47f abe9 	bne.w	8008f96 <_vfiprintf_r+0x4be>
 80097c4:	e4d4      	b.n	8009170 <_vfiprintf_r+0x698>
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	e6f9      	b.n	80095be <_vfiprintf_r+0xae6>
 80097ca:	4638      	mov	r0, r7
 80097cc:	9404      	str	r4, [sp, #16]
 80097ce:	f7f6 fdd7 	bl	8000380 <strlen>
 80097d2:	2300      	movs	r3, #0
 80097d4:	9003      	str	r0, [sp, #12]
 80097d6:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80097da:	9301      	str	r3, [sp, #4]
 80097dc:	f7ff ba9c 	b.w	8008d18 <_vfiprintf_r+0x240>
 80097e0:	aa0d      	add	r2, sp, #52	; 0x34
 80097e2:	9900      	ldr	r1, [sp, #0]
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	f7ff f93b 	bl	8008a60 <__sprint_r.part.0>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f47f ae12 	bne.w	8009414 <_vfiprintf_r+0x93c>
 80097f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80097f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097f4:	f100 0e01 	add.w	lr, r0, #1
 80097f8:	46da      	mov	sl, fp
 80097fa:	e5b6      	b.n	800936a <_vfiprintf_r+0x892>
 80097fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80097fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009800:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80098d0 <_vfiprintf_r+0xdf8>
 8009804:	3001      	adds	r0, #1
 8009806:	f7ff bad2 	b.w	8008dae <_vfiprintf_r+0x2d6>
 800980a:	461e      	mov	r6, r3
 800980c:	f04f 0900 	mov.w	r9, #0
 8009810:	e67a      	b.n	8009508 <_vfiprintf_r+0xa30>
 8009812:	2b06      	cmp	r3, #6
 8009814:	bf28      	it	cs
 8009816:	2306      	movcs	r3, #6
 8009818:	9303      	str	r3, [sp, #12]
 800981a:	9404      	str	r4, [sp, #16]
 800981c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8009820:	4f2a      	ldr	r7, [pc, #168]	; (80098cc <_vfiprintf_r+0xdf4>)
 8009822:	e50c      	b.n	800923e <_vfiprintf_r+0x766>
 8009824:	9204      	str	r2, [sp, #16]
 8009826:	e56a      	b.n	80092fe <_vfiprintf_r+0x826>
 8009828:	980e      	ldr	r0, [sp, #56]	; 0x38
 800982a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80098d0 <_vfiprintf_r+0xdf8>
 800982e:	3001      	adds	r0, #1
 8009830:	f7ff bb73 	b.w	8008f1a <_vfiprintf_r+0x442>
 8009834:	46f4      	mov	ip, lr
 8009836:	f7ff bb1a 	b.w	8008e6e <_vfiprintf_r+0x396>
 800983a:	9b01      	ldr	r3, [sp, #4]
 800983c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	9404      	str	r4, [sp, #16]
 8009844:	9001      	str	r0, [sp, #4]
 8009846:	f7ff ba67 	b.w	8008d18 <_vfiprintf_r+0x240>
 800984a:	2200      	movs	r2, #0
 800984c:	9201      	str	r2, [sp, #4]
 800984e:	f7ff b9ac 	b.w	8008baa <_vfiprintf_r+0xd2>
 8009852:	9204      	str	r2, [sp, #16]
 8009854:	4699      	mov	r9, r3
 8009856:	e6b2      	b.n	80095be <_vfiprintf_r+0xae6>
 8009858:	9a04      	ldr	r2, [sp, #16]
 800985a:	6813      	ldr	r3, [r2, #0]
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	3204      	adds	r2, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	9204      	str	r2, [sp, #16]
 8009864:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009868:	46a8      	mov	r8, r5
 800986a:	f6bf a99c 	bge.w	8008ba6 <_vfiprintf_r+0xce>
 800986e:	f04f 32ff 	mov.w	r2, #4294967295
 8009872:	9201      	str	r2, [sp, #4]
 8009874:	f7ff b997 	b.w	8008ba6 <_vfiprintf_r+0xce>
 8009878:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800987c:	e48e      	b.n	800919c <_vfiprintf_r+0x6c4>
 800987e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8009882:	e4f0      	b.n	8009266 <_vfiprintf_r+0x78e>
 8009884:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8009888:	e4ab      	b.n	80091e2 <_vfiprintf_r+0x70a>
 800988a:	4699      	mov	r9, r3
 800988c:	07f3      	lsls	r3, r6, #31
 800988e:	d505      	bpl.n	800989c <_vfiprintf_r+0xdc4>
 8009890:	af2a      	add	r7, sp, #168	; 0xa8
 8009892:	2330      	movs	r3, #48	; 0x30
 8009894:	f807 3d41 	strb.w	r3, [r7, #-65]!
 8009898:	f7ff bb97 	b.w	8008fca <_vfiprintf_r+0x4f2>
 800989c:	9b01      	ldr	r3, [sp, #4]
 800989e:	9303      	str	r3, [sp, #12]
 80098a0:	465f      	mov	r7, fp
 80098a2:	f7ff ba39 	b.w	8008d18 <_vfiprintf_r+0x240>
 80098a6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80098aa:	e443      	b.n	8009134 <_vfiprintf_r+0x65c>
 80098ac:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80098b0:	f7ff bb9a 	b.w	8008fe8 <_vfiprintf_r+0x510>
 80098b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80098b8:	f7ff bb4d 	b.w	8008f56 <_vfiprintf_r+0x47e>
 80098bc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80098c0:	e50f      	b.n	80092e2 <_vfiprintf_r+0x80a>
 80098c2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80098c6:	e4f3      	b.n	80092b0 <_vfiprintf_r+0x7d8>
 80098c8:	0800ee0c 	.word	0x0800ee0c
 80098cc:	0800ee20 	.word	0x0800ee20
 80098d0:	0800ede8 	.word	0x0800ede8

080098d4 <__sbprintf>:
 80098d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d6:	460c      	mov	r4, r1
 80098d8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80098dc:	8989      	ldrh	r1, [r1, #12]
 80098de:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80098e0:	89e5      	ldrh	r5, [r4, #14]
 80098e2:	9619      	str	r6, [sp, #100]	; 0x64
 80098e4:	f021 0102 	bic.w	r1, r1, #2
 80098e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098ea:	f8ad 500e 	strh.w	r5, [sp, #14]
 80098ee:	2500      	movs	r5, #0
 80098f0:	69e7      	ldr	r7, [r4, #28]
 80098f2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80098f6:	9609      	str	r6, [sp, #36]	; 0x24
 80098f8:	9506      	str	r5, [sp, #24]
 80098fa:	ae1a      	add	r6, sp, #104	; 0x68
 80098fc:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8009900:	4669      	mov	r1, sp
 8009902:	9600      	str	r6, [sp, #0]
 8009904:	9604      	str	r6, [sp, #16]
 8009906:	9502      	str	r5, [sp, #8]
 8009908:	9505      	str	r5, [sp, #20]
 800990a:	9707      	str	r7, [sp, #28]
 800990c:	4606      	mov	r6, r0
 800990e:	f7ff f8e3 	bl	8008ad8 <_vfiprintf_r>
 8009912:	1e05      	subs	r5, r0, #0
 8009914:	db07      	blt.n	8009926 <__sbprintf+0x52>
 8009916:	4630      	mov	r0, r6
 8009918:	4669      	mov	r1, sp
 800991a:	f000 f9f3 	bl	8009d04 <_fflush_r>
 800991e:	2800      	cmp	r0, #0
 8009920:	bf18      	it	ne
 8009922:	f04f 35ff 	movne.w	r5, #4294967295
 8009926:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800992a:	065b      	lsls	r3, r3, #25
 800992c:	d503      	bpl.n	8009936 <__sbprintf+0x62>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	4628      	mov	r0, r5
 8009938:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800993c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993e:	bf00      	nop

08009940 <_vsnprintf_r>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	2a00      	cmp	r2, #0
 8009944:	b09a      	sub	sp, #104	; 0x68
 8009946:	4605      	mov	r5, r0
 8009948:	db2f      	blt.n	80099aa <_vsnprintf_r+0x6a>
 800994a:	4614      	mov	r4, r2
 800994c:	461a      	mov	r2, r3
 800994e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009952:	9100      	str	r1, [sp, #0]
 8009954:	9104      	str	r1, [sp, #16]
 8009956:	f8ad 300c 	strh.w	r3, [sp, #12]
 800995a:	d011      	beq.n	8009980 <_vsnprintf_r+0x40>
 800995c:	3c01      	subs	r4, #1
 800995e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8009962:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009964:	9402      	str	r4, [sp, #8]
 8009966:	4669      	mov	r1, sp
 8009968:	9405      	str	r4, [sp, #20]
 800996a:	f8ad 600e 	strh.w	r6, [sp, #14]
 800996e:	f001 f93b 	bl	800abe8 <_svfprintf_r>
 8009972:	1c42      	adds	r2, r0, #1
 8009974:	db12      	blt.n	800999c <_vsnprintf_r+0x5c>
 8009976:	9b00      	ldr	r3, [sp, #0]
 8009978:	2200      	movs	r2, #0
 800997a:	701a      	strb	r2, [r3, #0]
 800997c:	b01a      	add	sp, #104	; 0x68
 800997e:	bd70      	pop	{r4, r5, r6, pc}
 8009980:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009982:	9402      	str	r4, [sp, #8]
 8009984:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8009988:	4669      	mov	r1, sp
 800998a:	9405      	str	r4, [sp, #20]
 800998c:	f8ad 600e 	strh.w	r6, [sp, #14]
 8009990:	f001 f92a 	bl	800abe8 <_svfprintf_r>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	db04      	blt.n	80099a2 <_vsnprintf_r+0x62>
 8009998:	b01a      	add	sp, #104	; 0x68
 800999a:	bd70      	pop	{r4, r5, r6, pc}
 800999c:	238b      	movs	r3, #139	; 0x8b
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	e7e9      	b.n	8009976 <_vsnprintf_r+0x36>
 80099a2:	238b      	movs	r3, #139	; 0x8b
 80099a4:	602b      	str	r3, [r5, #0]
 80099a6:	b01a      	add	sp, #104	; 0x68
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
 80099aa:	238b      	movs	r3, #139	; 0x8b
 80099ac:	6003      	str	r3, [r0, #0]
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295
 80099b2:	e7f1      	b.n	8009998 <_vsnprintf_r+0x58>

080099b4 <vsnprintf>:
 80099b4:	b510      	push	{r4, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	4c05      	ldr	r4, [pc, #20]	; (80099d0 <vsnprintf+0x1c>)
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	6824      	ldr	r4, [r4, #0]
 80099be:	4613      	mov	r3, r2
 80099c0:	460a      	mov	r2, r1
 80099c2:	4601      	mov	r1, r0
 80099c4:	4620      	mov	r0, r4
 80099c6:	f7ff ffbb 	bl	8009940 <_vsnprintf_r>
 80099ca:	b002      	add	sp, #8
 80099cc:	bd10      	pop	{r4, pc}
 80099ce:	bf00      	nop
 80099d0:	200005b8 	.word	0x200005b8

080099d4 <_vsprintf_r>:
 80099d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d6:	b09b      	sub	sp, #108	; 0x6c
 80099d8:	460d      	mov	r5, r1
 80099da:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80099de:	f44f 7702 	mov.w	r7, #520	; 0x208
 80099e2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80099e6:	4669      	mov	r1, sp
 80099e8:	9500      	str	r5, [sp, #0]
 80099ea:	9504      	str	r5, [sp, #16]
 80099ec:	f8ad 700c 	strh.w	r7, [sp, #12]
 80099f0:	9402      	str	r4, [sp, #8]
 80099f2:	9405      	str	r4, [sp, #20]
 80099f4:	f8ad 600e 	strh.w	r6, [sp, #14]
 80099f8:	f001 f8f6 	bl	800abe8 <_svfprintf_r>
 80099fc:	9b00      	ldr	r3, [sp, #0]
 80099fe:	2200      	movs	r2, #0
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	b01b      	add	sp, #108	; 0x6c
 8009a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a06:	bf00      	nop

08009a08 <vsprintf>:
 8009a08:	b410      	push	{r4}
 8009a0a:	4c04      	ldr	r4, [pc, #16]	; (8009a1c <vsprintf+0x14>)
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	460a      	mov	r2, r1
 8009a10:	4601      	mov	r1, r0
 8009a12:	6820      	ldr	r0, [r4, #0]
 8009a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a18:	f7ff bfdc 	b.w	80099d4 <_vsprintf_r>
 8009a1c:	200005b8 	.word	0x200005b8

08009a20 <__swsetup_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4b30      	ldr	r3, [pc, #192]	; (8009ae4 <__swsetup_r+0xc4>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4605      	mov	r5, r0
 8009a28:	460c      	mov	r4, r1
 8009a2a:	b113      	cbz	r3, 8009a32 <__swsetup_r+0x12>
 8009a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a2e:	2a00      	cmp	r2, #0
 8009a30:	d038      	beq.n	8009aa4 <__swsetup_r+0x84>
 8009a32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a36:	b293      	uxth	r3, r2
 8009a38:	0718      	lsls	r0, r3, #28
 8009a3a:	d50c      	bpl.n	8009a56 <__swsetup_r+0x36>
 8009a3c:	6920      	ldr	r0, [r4, #16]
 8009a3e:	b1a8      	cbz	r0, 8009a6c <__swsetup_r+0x4c>
 8009a40:	f013 0201 	ands.w	r2, r3, #1
 8009a44:	d01e      	beq.n	8009a84 <__swsetup_r+0x64>
 8009a46:	6963      	ldr	r3, [r4, #20]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	425b      	negs	r3, r3
 8009a4c:	61a3      	str	r3, [r4, #24]
 8009a4e:	60a2      	str	r2, [r4, #8]
 8009a50:	b1f0      	cbz	r0, 8009a90 <__swsetup_r+0x70>
 8009a52:	2000      	movs	r0, #0
 8009a54:	bd38      	pop	{r3, r4, r5, pc}
 8009a56:	06d9      	lsls	r1, r3, #27
 8009a58:	d53c      	bpl.n	8009ad4 <__swsetup_r+0xb4>
 8009a5a:	0758      	lsls	r0, r3, #29
 8009a5c:	d426      	bmi.n	8009aac <__swsetup_r+0x8c>
 8009a5e:	6920      	ldr	r0, [r4, #16]
 8009a60:	f042 0308 	orr.w	r3, r2, #8
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d1e9      	bne.n	8009a40 <__swsetup_r+0x20>
 8009a6c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8009a70:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009a74:	d0e4      	beq.n	8009a40 <__swsetup_r+0x20>
 8009a76:	4628      	mov	r0, r5
 8009a78:	4621      	mov	r1, r4
 8009a7a:	f000 fd79 	bl	800a570 <__smakebuf_r>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	6920      	ldr	r0, [r4, #16]
 8009a82:	e7dd      	b.n	8009a40 <__swsetup_r+0x20>
 8009a84:	0799      	lsls	r1, r3, #30
 8009a86:	bf58      	it	pl
 8009a88:	6962      	ldrpl	r2, [r4, #20]
 8009a8a:	60a2      	str	r2, [r4, #8]
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d1e0      	bne.n	8009a52 <__swsetup_r+0x32>
 8009a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a94:	061a      	lsls	r2, r3, #24
 8009a96:	d5dd      	bpl.n	8009a54 <__swsetup_r+0x34>
 8009a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a9c:	81a3      	strh	r3, [r4, #12]
 8009a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 f9c1 	bl	8009e2c <__sinit>
 8009aaa:	e7c2      	b.n	8009a32 <__swsetup_r+0x12>
 8009aac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009aae:	b151      	cbz	r1, 8009ac6 <__swsetup_r+0xa6>
 8009ab0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009ab4:	4299      	cmp	r1, r3
 8009ab6:	d004      	beq.n	8009ac2 <__swsetup_r+0xa2>
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f000 fa83 	bl	8009fc4 <_free_r>
 8009abe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	6323      	str	r3, [r4, #48]	; 0x30
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	6920      	ldr	r0, [r4, #16]
 8009aca:	6063      	str	r3, [r4, #4]
 8009acc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8009ad0:	6020      	str	r0, [r4, #0]
 8009ad2:	e7c5      	b.n	8009a60 <__swsetup_r+0x40>
 8009ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ad8:	2309      	movs	r3, #9
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	81a2      	strh	r2, [r4, #12]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	200005b8 	.word	0x200005b8

08009ae8 <__register_exitproc>:
 8009ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aec:	4c25      	ldr	r4, [pc, #148]	; (8009b84 <__register_exitproc+0x9c>)
 8009aee:	6825      	ldr	r5, [r4, #0]
 8009af0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8009af4:	4606      	mov	r6, r0
 8009af6:	4688      	mov	r8, r1
 8009af8:	4692      	mov	sl, r2
 8009afa:	4699      	mov	r9, r3
 8009afc:	b3c4      	cbz	r4, 8009b70 <__register_exitproc+0x88>
 8009afe:	6860      	ldr	r0, [r4, #4]
 8009b00:	281f      	cmp	r0, #31
 8009b02:	dc17      	bgt.n	8009b34 <__register_exitproc+0x4c>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	b176      	cbz	r6, 8009b26 <__register_exitproc+0x3e>
 8009b08:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8009b12:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 8009b16:	4082      	lsls	r2, r0
 8009b18:	4311      	orrs	r1, r2
 8009b1a:	2e02      	cmp	r6, #2
 8009b1c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8009b20:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8009b24:	d01e      	beq.n	8009b64 <__register_exitproc+0x7c>
 8009b26:	3002      	adds	r0, #2
 8009b28:	6063      	str	r3, [r4, #4]
 8009b2a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8009b2e:	2000      	movs	r0, #0
 8009b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b34:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <__register_exitproc+0xa0>)
 8009b36:	b303      	cbz	r3, 8009b7a <__register_exitproc+0x92>
 8009b38:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009b3c:	f7fe fbb2 	bl	80082a4 <malloc>
 8009b40:	4604      	mov	r4, r0
 8009b42:	b1d0      	cbz	r0, 8009b7a <__register_exitproc+0x92>
 8009b44:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8009b48:	2700      	movs	r7, #0
 8009b4a:	e880 0088 	stmia.w	r0, {r3, r7}
 8009b4e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8009b52:	4638      	mov	r0, r7
 8009b54:	2301      	movs	r3, #1
 8009b56:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8009b5a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8009b5e:	2e00      	cmp	r6, #0
 8009b60:	d0e1      	beq.n	8009b26 <__register_exitproc+0x3e>
 8009b62:	e7d1      	b.n	8009b08 <__register_exitproc+0x20>
 8009b64:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8009b6e:	e7da      	b.n	8009b26 <__register_exitproc+0x3e>
 8009b70:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8009b74:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8009b78:	e7c1      	b.n	8009afe <__register_exitproc+0x16>
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b82:	bf00      	nop
 8009b84:	0800edd4 	.word	0x0800edd4
 8009b88:	080082a5 	.word	0x080082a5

08009b8c <register_fini>:
 8009b8c:	4b02      	ldr	r3, [pc, #8]	; (8009b98 <register_fini+0xc>)
 8009b8e:	b113      	cbz	r3, 8009b96 <register_fini+0xa>
 8009b90:	4802      	ldr	r0, [pc, #8]	; (8009b9c <register_fini+0x10>)
 8009b92:	f000 b80d 	b.w	8009bb0 <atexit>
 8009b96:	4770      	bx	lr
 8009b98:	00000000 	.word	0x00000000
 8009b9c:	08009e41 	.word	0x08009e41

08009ba0 <abort>:
 8009ba0:	b508      	push	{r3, lr}
 8009ba2:	2006      	movs	r0, #6
 8009ba4:	f000 ffbe 	bl	800ab24 <raise>
 8009ba8:	2001      	movs	r0, #1
 8009baa:	f004 f8a7 	bl	800dcfc <_exit>
 8009bae:	bf00      	nop

08009bb0 <atexit>:
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff bf96 	b.w	8009ae8 <__register_exitproc>

08009bbc <__sflush_r>:
 8009bbc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc6:	460d      	mov	r5, r1
 8009bc8:	0711      	lsls	r1, r2, #28
 8009bca:	4680      	mov	r8, r0
 8009bcc:	d43c      	bmi.n	8009c48 <__sflush_r+0x8c>
 8009bce:	686a      	ldr	r2, [r5, #4]
 8009bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	81ab      	strh	r3, [r5, #12]
 8009bd8:	dd73      	ble.n	8009cc2 <__sflush_r+0x106>
 8009bda:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8009bdc:	2c00      	cmp	r4, #0
 8009bde:	d04b      	beq.n	8009c78 <__sflush_r+0xbc>
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009be6:	2100      	movs	r1, #0
 8009be8:	b292      	uxth	r2, r2
 8009bea:	f8d8 6000 	ldr.w	r6, [r8]
 8009bee:	f8c8 1000 	str.w	r1, [r8]
 8009bf2:	2a00      	cmp	r2, #0
 8009bf4:	d069      	beq.n	8009cca <__sflush_r+0x10e>
 8009bf6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009bf8:	075f      	lsls	r7, r3, #29
 8009bfa:	d505      	bpl.n	8009c08 <__sflush_r+0x4c>
 8009bfc:	6869      	ldr	r1, [r5, #4]
 8009bfe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009c00:	1a52      	subs	r2, r2, r1
 8009c02:	b10b      	cbz	r3, 8009c08 <__sflush_r+0x4c>
 8009c04:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009c06:	1ad2      	subs	r2, r2, r3
 8009c08:	2300      	movs	r3, #0
 8009c0a:	69e9      	ldr	r1, [r5, #28]
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	47a0      	blx	r4
 8009c10:	1c44      	adds	r4, r0, #1
 8009c12:	d03c      	beq.n	8009c8e <__sflush_r+0xd2>
 8009c14:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8009c18:	692a      	ldr	r2, [r5, #16]
 8009c1a:	602a      	str	r2, [r5, #0]
 8009c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c20:	2200      	movs	r2, #0
 8009c22:	81ab      	strh	r3, [r5, #12]
 8009c24:	04db      	lsls	r3, r3, #19
 8009c26:	606a      	str	r2, [r5, #4]
 8009c28:	d449      	bmi.n	8009cbe <__sflush_r+0x102>
 8009c2a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009c2c:	f8c8 6000 	str.w	r6, [r8]
 8009c30:	b311      	cbz	r1, 8009c78 <__sflush_r+0xbc>
 8009c32:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8009c36:	4299      	cmp	r1, r3
 8009c38:	d002      	beq.n	8009c40 <__sflush_r+0x84>
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	f000 f9c2 	bl	8009fc4 <_free_r>
 8009c40:	2000      	movs	r0, #0
 8009c42:	6328      	str	r0, [r5, #48]	; 0x30
 8009c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c48:	692e      	ldr	r6, [r5, #16]
 8009c4a:	b1ae      	cbz	r6, 8009c78 <__sflush_r+0xbc>
 8009c4c:	682c      	ldr	r4, [r5, #0]
 8009c4e:	602e      	str	r6, [r5, #0]
 8009c50:	0790      	lsls	r0, r2, #30
 8009c52:	bf0c      	ite	eq
 8009c54:	696b      	ldreq	r3, [r5, #20]
 8009c56:	2300      	movne	r3, #0
 8009c58:	1ba4      	subs	r4, r4, r6
 8009c5a:	60ab      	str	r3, [r5, #8]
 8009c5c:	e00a      	b.n	8009c74 <__sflush_r+0xb8>
 8009c5e:	4623      	mov	r3, r4
 8009c60:	4632      	mov	r2, r6
 8009c62:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8009c64:	69e9      	ldr	r1, [r5, #28]
 8009c66:	4640      	mov	r0, r8
 8009c68:	47b8      	blx	r7
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	eba4 0400 	sub.w	r4, r4, r0
 8009c70:	4406      	add	r6, r0
 8009c72:	dd04      	ble.n	8009c7e <__sflush_r+0xc2>
 8009c74:	2c00      	cmp	r4, #0
 8009c76:	dcf2      	bgt.n	8009c5e <__sflush_r+0xa2>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c7e:	89ab      	ldrh	r3, [r5, #12]
 8009c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c84:	81ab      	strh	r3, [r5, #12]
 8009c86:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c8e:	f8d8 2000 	ldr.w	r2, [r8]
 8009c92:	2a1d      	cmp	r2, #29
 8009c94:	d8f3      	bhi.n	8009c7e <__sflush_r+0xc2>
 8009c96:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <__sflush_r+0x144>)
 8009c98:	40d3      	lsrs	r3, r2
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	f083 0401 	eor.w	r4, r3, #1
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0eb      	beq.n	8009c7e <__sflush_r+0xc2>
 8009ca6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8009caa:	6929      	ldr	r1, [r5, #16]
 8009cac:	6029      	str	r1, [r5, #0]
 8009cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cb2:	04d9      	lsls	r1, r3, #19
 8009cb4:	606c      	str	r4, [r5, #4]
 8009cb6:	81ab      	strh	r3, [r5, #12]
 8009cb8:	d5b7      	bpl.n	8009c2a <__sflush_r+0x6e>
 8009cba:	2a00      	cmp	r2, #0
 8009cbc:	d1b5      	bne.n	8009c2a <__sflush_r+0x6e>
 8009cbe:	6528      	str	r0, [r5, #80]	; 0x50
 8009cc0:	e7b3      	b.n	8009c2a <__sflush_r+0x6e>
 8009cc2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8009cc4:	2a00      	cmp	r2, #0
 8009cc6:	dc88      	bgt.n	8009bda <__sflush_r+0x1e>
 8009cc8:	e7d6      	b.n	8009c78 <__sflush_r+0xbc>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	69e9      	ldr	r1, [r5, #28]
 8009cce:	4640      	mov	r0, r8
 8009cd0:	47a0      	blx	r4
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	d002      	beq.n	8009cde <__sflush_r+0x122>
 8009cd8:	89ab      	ldrh	r3, [r5, #12]
 8009cda:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8009cdc:	e78c      	b.n	8009bf8 <__sflush_r+0x3c>
 8009cde:	f8d8 3000 	ldr.w	r3, [r8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d0f8      	beq.n	8009cd8 <__sflush_r+0x11c>
 8009ce6:	2b1d      	cmp	r3, #29
 8009ce8:	d001      	beq.n	8009cee <__sflush_r+0x132>
 8009cea:	2b16      	cmp	r3, #22
 8009cec:	d102      	bne.n	8009cf4 <__sflush_r+0x138>
 8009cee:	f8c8 6000 	str.w	r6, [r8]
 8009cf2:	e7c1      	b.n	8009c78 <__sflush_r+0xbc>
 8009cf4:	89ab      	ldrh	r3, [r5, #12]
 8009cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cfa:	81ab      	strh	r3, [r5, #12]
 8009cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d00:	20400001 	.word	0x20400001

08009d04 <_fflush_r>:
 8009d04:	b510      	push	{r4, lr}
 8009d06:	4604      	mov	r4, r0
 8009d08:	b082      	sub	sp, #8
 8009d0a:	b108      	cbz	r0, 8009d10 <_fflush_r+0xc>
 8009d0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009d0e:	b153      	cbz	r3, 8009d26 <_fflush_r+0x22>
 8009d10:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8009d14:	b908      	cbnz	r0, 8009d1a <_fflush_r+0x16>
 8009d16:	b002      	add	sp, #8
 8009d18:	bd10      	pop	{r4, pc}
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	b002      	add	sp, #8
 8009d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d22:	f7ff bf4b 	b.w	8009bbc <__sflush_r>
 8009d26:	9101      	str	r1, [sp, #4]
 8009d28:	f000 f880 	bl	8009e2c <__sinit>
 8009d2c:	9901      	ldr	r1, [sp, #4]
 8009d2e:	e7ef      	b.n	8009d10 <_fflush_r+0xc>

08009d30 <_cleanup_r>:
 8009d30:	4901      	ldr	r1, [pc, #4]	; (8009d38 <_cleanup_r+0x8>)
 8009d32:	f000 bbb1 	b.w	800a498 <_fwalk_reent>
 8009d36:	bf00      	nop
 8009d38:	0800d39d 	.word	0x0800d39d

08009d3c <__sinit.part.1>:
 8009d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d40:	4b35      	ldr	r3, [pc, #212]	; (8009e18 <__sinit.part.1+0xdc>)
 8009d42:	6845      	ldr	r5, [r0, #4]
 8009d44:	63c3      	str	r3, [r0, #60]	; 0x3c
 8009d46:	2400      	movs	r4, #0
 8009d48:	4607      	mov	r7, r0
 8009d4a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8009d4e:	2304      	movs	r3, #4
 8009d50:	2103      	movs	r1, #3
 8009d52:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8009d56:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8009d5a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8009d5e:	b083      	sub	sp, #12
 8009d60:	602c      	str	r4, [r5, #0]
 8009d62:	606c      	str	r4, [r5, #4]
 8009d64:	60ac      	str	r4, [r5, #8]
 8009d66:	666c      	str	r4, [r5, #100]	; 0x64
 8009d68:	81ec      	strh	r4, [r5, #14]
 8009d6a:	612c      	str	r4, [r5, #16]
 8009d6c:	616c      	str	r4, [r5, #20]
 8009d6e:	61ac      	str	r4, [r5, #24]
 8009d70:	81ab      	strh	r3, [r5, #12]
 8009d72:	4621      	mov	r1, r4
 8009d74:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8009d78:	2208      	movs	r2, #8
 8009d7a:	f7fe fd5b 	bl	8008834 <memset>
 8009d7e:	68be      	ldr	r6, [r7, #8]
 8009d80:	f8df b098 	ldr.w	fp, [pc, #152]	; 8009e1c <__sinit.part.1+0xe0>
 8009d84:	f8df a098 	ldr.w	sl, [pc, #152]	; 8009e20 <__sinit.part.1+0xe4>
 8009d88:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8009e24 <__sinit.part.1+0xe8>
 8009d8c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8009e28 <__sinit.part.1+0xec>
 8009d90:	f8c5 b020 	str.w	fp, [r5, #32]
 8009d94:	2301      	movs	r3, #1
 8009d96:	2209      	movs	r2, #9
 8009d98:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8009d9c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8009da0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8009da4:	61ed      	str	r5, [r5, #28]
 8009da6:	4621      	mov	r1, r4
 8009da8:	81f3      	strh	r3, [r6, #14]
 8009daa:	81b2      	strh	r2, [r6, #12]
 8009dac:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8009db0:	6034      	str	r4, [r6, #0]
 8009db2:	6074      	str	r4, [r6, #4]
 8009db4:	60b4      	str	r4, [r6, #8]
 8009db6:	6674      	str	r4, [r6, #100]	; 0x64
 8009db8:	6134      	str	r4, [r6, #16]
 8009dba:	6174      	str	r4, [r6, #20]
 8009dbc:	61b4      	str	r4, [r6, #24]
 8009dbe:	2208      	movs	r2, #8
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	f7fe fd37 	bl	8008834 <memset>
 8009dc6:	68fd      	ldr	r5, [r7, #12]
 8009dc8:	61f6      	str	r6, [r6, #28]
 8009dca:	2012      	movs	r0, #18
 8009dcc:	2202      	movs	r2, #2
 8009dce:	f8c6 b020 	str.w	fp, [r6, #32]
 8009dd2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8009dd6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8009dda:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8009dde:	4621      	mov	r1, r4
 8009de0:	81a8      	strh	r0, [r5, #12]
 8009de2:	81ea      	strh	r2, [r5, #14]
 8009de4:	602c      	str	r4, [r5, #0]
 8009de6:	606c      	str	r4, [r5, #4]
 8009de8:	60ac      	str	r4, [r5, #8]
 8009dea:	666c      	str	r4, [r5, #100]	; 0x64
 8009dec:	612c      	str	r4, [r5, #16]
 8009dee:	616c      	str	r4, [r5, #20]
 8009df0:	61ac      	str	r4, [r5, #24]
 8009df2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8009df6:	2208      	movs	r2, #8
 8009df8:	f7fe fd1c 	bl	8008834 <memset>
 8009dfc:	9b01      	ldr	r3, [sp, #4]
 8009dfe:	61ed      	str	r5, [r5, #28]
 8009e00:	f8c5 b020 	str.w	fp, [r5, #32]
 8009e04:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8009e08:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8009e0c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8009e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e12:	b003      	add	sp, #12
 8009e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e18:	08009d31 	.word	0x08009d31
 8009e1c:	0800ab61 	.word	0x0800ab61
 8009e20:	0800ab85 	.word	0x0800ab85
 8009e24:	0800abc1 	.word	0x0800abc1
 8009e28:	0800abe1 	.word	0x0800abe1

08009e2c <__sinit>:
 8009e2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009e2e:	b103      	cbz	r3, 8009e32 <__sinit+0x6>
 8009e30:	4770      	bx	lr
 8009e32:	f7ff bf83 	b.w	8009d3c <__sinit.part.1>
 8009e36:	bf00      	nop

08009e38 <__sfp_lock_acquire>:
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop

08009e3c <__sfp_lock_release>:
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop

08009e40 <__libc_fini_array>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d07      	ldr	r5, [pc, #28]	; (8009e60 <__libc_fini_array+0x20>)
 8009e44:	4c07      	ldr	r4, [pc, #28]	; (8009e64 <__libc_fini_array+0x24>)
 8009e46:	1b2c      	subs	r4, r5, r4
 8009e48:	10a4      	asrs	r4, r4, #2
 8009e4a:	d005      	beq.n	8009e58 <__libc_fini_array+0x18>
 8009e4c:	3c01      	subs	r4, #1
 8009e4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009e52:	4798      	blx	r3
 8009e54:	2c00      	cmp	r4, #0
 8009e56:	d1f9      	bne.n	8009e4c <__libc_fini_array+0xc>
 8009e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e5c:	f003 bf56 	b.w	800dd0c <_fini>
 8009e60:	0800f098 	.word	0x0800f098
 8009e64:	0800f094 	.word	0x0800f094

08009e68 <__fputwc>:
 8009e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	4680      	mov	r8, r0
 8009e70:	4689      	mov	r9, r1
 8009e72:	4614      	mov	r4, r2
 8009e74:	f000 fb3a 	bl	800a4ec <__locale_mb_cur_max>
 8009e78:	2801      	cmp	r0, #1
 8009e7a:	d033      	beq.n	8009ee4 <__fputwc+0x7c>
 8009e7c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8009e80:	464a      	mov	r2, r9
 8009e82:	a901      	add	r1, sp, #4
 8009e84:	4640      	mov	r0, r8
 8009e86:	f002 fa7f 	bl	800c388 <_wcrtomb_r>
 8009e8a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e8e:	4682      	mov	sl, r0
 8009e90:	d021      	beq.n	8009ed6 <__fputwc+0x6e>
 8009e92:	b388      	cbz	r0, 8009ef8 <__fputwc+0x90>
 8009e94:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8009e98:	2500      	movs	r5, #0
 8009e9a:	e008      	b.n	8009eae <__fputwc+0x46>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	6022      	str	r2, [r4, #0]
 8009ea2:	701e      	strb	r6, [r3, #0]
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	4555      	cmp	r5, sl
 8009ea8:	d226      	bcs.n	8009ef8 <__fputwc+0x90>
 8009eaa:	ab01      	add	r3, sp, #4
 8009eac:	5d5e      	ldrb	r6, [r3, r5]
 8009eae:	68a3      	ldr	r3, [r4, #8]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	60a3      	str	r3, [r4, #8]
 8009eb6:	daf1      	bge.n	8009e9c <__fputwc+0x34>
 8009eb8:	69a7      	ldr	r7, [r4, #24]
 8009eba:	42bb      	cmp	r3, r7
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	db01      	blt.n	8009ec8 <__fputwc+0x60>
 8009ec4:	2e0a      	cmp	r6, #10
 8009ec6:	d1e9      	bne.n	8009e9c <__fputwc+0x34>
 8009ec8:	f002 fa08 	bl	800c2dc <__swbuf_r>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d1e9      	bne.n	8009ea4 <__fputwc+0x3c>
 8009ed0:	b002      	add	sp, #8
 8009ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009edc:	81a3      	strh	r3, [r4, #12]
 8009ede:	b002      	add	sp, #8
 8009ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee4:	f109 33ff 	add.w	r3, r9, #4294967295
 8009ee8:	2bfe      	cmp	r3, #254	; 0xfe
 8009eea:	d8c7      	bhi.n	8009e7c <__fputwc+0x14>
 8009eec:	fa5f f689 	uxtb.w	r6, r9
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	f88d 6004 	strb.w	r6, [sp, #4]
 8009ef6:	e7cf      	b.n	8009e98 <__fputwc+0x30>
 8009ef8:	4648      	mov	r0, r9
 8009efa:	b002      	add	sp, #8
 8009efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009f00 <_fputwc_r>:
 8009f00:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8009f04:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009f08:	d10b      	bne.n	8009f22 <_fputwc_r+0x22>
 8009f0a:	b410      	push	{r4}
 8009f0c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8009f0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009f12:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8009f16:	6654      	str	r4, [r2, #100]	; 0x64
 8009f18:	8193      	strh	r3, [r2, #12]
 8009f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f1e:	f7ff bfa3 	b.w	8009e68 <__fputwc>
 8009f22:	f7ff bfa1 	b.w	8009e68 <__fputwc>
 8009f26:	bf00      	nop

08009f28 <_malloc_trim_r>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	4f23      	ldr	r7, [pc, #140]	; (8009fb8 <_malloc_trim_r+0x90>)
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	4606      	mov	r6, r0
 8009f30:	f7fe fcce 	bl	80088d0 <__malloc_lock>
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	685d      	ldr	r5, [r3, #4]
 8009f38:	f025 0503 	bic.w	r5, r5, #3
 8009f3c:	1b29      	subs	r1, r5, r4
 8009f3e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8009f42:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8009f46:	f021 010f 	bic.w	r1, r1, #15
 8009f4a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8009f4e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8009f52:	db07      	blt.n	8009f64 <_malloc_trim_r+0x3c>
 8009f54:	2100      	movs	r1, #0
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7fe fcbe 	bl	80088d8 <_sbrk_r>
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	442b      	add	r3, r5
 8009f60:	4298      	cmp	r0, r3
 8009f62:	d004      	beq.n	8009f6e <_malloc_trim_r+0x46>
 8009f64:	4630      	mov	r0, r6
 8009f66:	f7fe fcb5 	bl	80088d4 <__malloc_unlock>
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f6e:	4261      	negs	r1, r4
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7fe fcb1 	bl	80088d8 <_sbrk_r>
 8009f76:	3001      	adds	r0, #1
 8009f78:	d00d      	beq.n	8009f96 <_malloc_trim_r+0x6e>
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <_malloc_trim_r+0x94>)
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	6819      	ldr	r1, [r3, #0]
 8009f80:	1b2d      	subs	r5, r5, r4
 8009f82:	f045 0501 	orr.w	r5, r5, #1
 8009f86:	4630      	mov	r0, r6
 8009f88:	1b09      	subs	r1, r1, r4
 8009f8a:	6055      	str	r5, [r2, #4]
 8009f8c:	6019      	str	r1, [r3, #0]
 8009f8e:	f7fe fca1 	bl	80088d4 <__malloc_unlock>
 8009f92:	2001      	movs	r0, #1
 8009f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f96:	2100      	movs	r1, #0
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7fe fc9d 	bl	80088d8 <_sbrk_r>
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	1a83      	subs	r3, r0, r2
 8009fa2:	2b0f      	cmp	r3, #15
 8009fa4:	ddde      	ble.n	8009f64 <_malloc_trim_r+0x3c>
 8009fa6:	4c06      	ldr	r4, [pc, #24]	; (8009fc0 <_malloc_trim_r+0x98>)
 8009fa8:	4904      	ldr	r1, [pc, #16]	; (8009fbc <_malloc_trim_r+0x94>)
 8009faa:	6824      	ldr	r4, [r4, #0]
 8009fac:	f043 0301 	orr.w	r3, r3, #1
 8009fb0:	1b00      	subs	r0, r0, r4
 8009fb2:	6053      	str	r3, [r2, #4]
 8009fb4:	6008      	str	r0, [r1, #0]
 8009fb6:	e7d5      	b.n	8009f64 <_malloc_trim_r+0x3c>
 8009fb8:	200005bc 	.word	0x200005bc
 8009fbc:	20005960 	.word	0x20005960
 8009fc0:	200009c8 	.word	0x200009c8

08009fc4 <_free_r>:
 8009fc4:	2900      	cmp	r1, #0
 8009fc6:	d045      	beq.n	800a054 <_free_r+0x90>
 8009fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fcc:	460d      	mov	r5, r1
 8009fce:	4680      	mov	r8, r0
 8009fd0:	f7fe fc7e 	bl	80088d0 <__malloc_lock>
 8009fd4:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8009fd8:	496a      	ldr	r1, [pc, #424]	; (800a184 <_free_r+0x1c0>)
 8009fda:	f027 0301 	bic.w	r3, r7, #1
 8009fde:	f1a5 0408 	sub.w	r4, r5, #8
 8009fe2:	18e2      	adds	r2, r4, r3
 8009fe4:	688e      	ldr	r6, [r1, #8]
 8009fe6:	6850      	ldr	r0, [r2, #4]
 8009fe8:	42b2      	cmp	r2, r6
 8009fea:	f020 0003 	bic.w	r0, r0, #3
 8009fee:	d062      	beq.n	800a0b6 <_free_r+0xf2>
 8009ff0:	07fe      	lsls	r6, r7, #31
 8009ff2:	6050      	str	r0, [r2, #4]
 8009ff4:	d40b      	bmi.n	800a00e <_free_r+0x4a>
 8009ff6:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8009ffa:	1be4      	subs	r4, r4, r7
 8009ffc:	f101 0e08 	add.w	lr, r1, #8
 800a000:	68a5      	ldr	r5, [r4, #8]
 800a002:	4575      	cmp	r5, lr
 800a004:	443b      	add	r3, r7
 800a006:	d06f      	beq.n	800a0e8 <_free_r+0x124>
 800a008:	68e7      	ldr	r7, [r4, #12]
 800a00a:	60ef      	str	r7, [r5, #12]
 800a00c:	60bd      	str	r5, [r7, #8]
 800a00e:	1815      	adds	r5, r2, r0
 800a010:	686d      	ldr	r5, [r5, #4]
 800a012:	07ed      	lsls	r5, r5, #31
 800a014:	d542      	bpl.n	800a09c <_free_r+0xd8>
 800a016:	f043 0201 	orr.w	r2, r3, #1
 800a01a:	6062      	str	r2, [r4, #4]
 800a01c:	50e3      	str	r3, [r4, r3]
 800a01e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a022:	d218      	bcs.n	800a056 <_free_r+0x92>
 800a024:	08db      	lsrs	r3, r3, #3
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	684d      	ldr	r5, [r1, #4]
 800a02a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800a02e:	60a7      	str	r7, [r4, #8]
 800a030:	2001      	movs	r0, #1
 800a032:	109b      	asrs	r3, r3, #2
 800a034:	fa00 f303 	lsl.w	r3, r0, r3
 800a038:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800a03c:	431d      	orrs	r5, r3
 800a03e:	3808      	subs	r0, #8
 800a040:	60e0      	str	r0, [r4, #12]
 800a042:	604d      	str	r5, [r1, #4]
 800a044:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 800a048:	60fc      	str	r4, [r7, #12]
 800a04a:	4640      	mov	r0, r8
 800a04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a050:	f7fe bc40 	b.w	80088d4 <__malloc_unlock>
 800a054:	4770      	bx	lr
 800a056:	0a5a      	lsrs	r2, r3, #9
 800a058:	2a04      	cmp	r2, #4
 800a05a:	d853      	bhi.n	800a104 <_free_r+0x140>
 800a05c:	099a      	lsrs	r2, r3, #6
 800a05e:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800a062:	007f      	lsls	r7, r7, #1
 800a064:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800a068:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800a06c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800a070:	4944      	ldr	r1, [pc, #272]	; (800a184 <_free_r+0x1c0>)
 800a072:	3808      	subs	r0, #8
 800a074:	4290      	cmp	r0, r2
 800a076:	d04d      	beq.n	800a114 <_free_r+0x150>
 800a078:	6851      	ldr	r1, [r2, #4]
 800a07a:	f021 0103 	bic.w	r1, r1, #3
 800a07e:	428b      	cmp	r3, r1
 800a080:	d202      	bcs.n	800a088 <_free_r+0xc4>
 800a082:	6892      	ldr	r2, [r2, #8]
 800a084:	4290      	cmp	r0, r2
 800a086:	d1f7      	bne.n	800a078 <_free_r+0xb4>
 800a088:	68d0      	ldr	r0, [r2, #12]
 800a08a:	60e0      	str	r0, [r4, #12]
 800a08c:	60a2      	str	r2, [r4, #8]
 800a08e:	6084      	str	r4, [r0, #8]
 800a090:	60d4      	str	r4, [r2, #12]
 800a092:	4640      	mov	r0, r8
 800a094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a098:	f7fe bc1c 	b.w	80088d4 <__malloc_unlock>
 800a09c:	6895      	ldr	r5, [r2, #8]
 800a09e:	4f3a      	ldr	r7, [pc, #232]	; (800a188 <_free_r+0x1c4>)
 800a0a0:	42bd      	cmp	r5, r7
 800a0a2:	4403      	add	r3, r0
 800a0a4:	d03f      	beq.n	800a126 <_free_r+0x162>
 800a0a6:	68d0      	ldr	r0, [r2, #12]
 800a0a8:	60e8      	str	r0, [r5, #12]
 800a0aa:	f043 0201 	orr.w	r2, r3, #1
 800a0ae:	6085      	str	r5, [r0, #8]
 800a0b0:	6062      	str	r2, [r4, #4]
 800a0b2:	50e3      	str	r3, [r4, r3]
 800a0b4:	e7b3      	b.n	800a01e <_free_r+0x5a>
 800a0b6:	07ff      	lsls	r7, r7, #31
 800a0b8:	4403      	add	r3, r0
 800a0ba:	d407      	bmi.n	800a0cc <_free_r+0x108>
 800a0bc:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800a0c0:	1aa4      	subs	r4, r4, r2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	68a0      	ldr	r0, [r4, #8]
 800a0c6:	68e2      	ldr	r2, [r4, #12]
 800a0c8:	60c2      	str	r2, [r0, #12]
 800a0ca:	6090      	str	r0, [r2, #8]
 800a0cc:	4a2f      	ldr	r2, [pc, #188]	; (800a18c <_free_r+0x1c8>)
 800a0ce:	6812      	ldr	r2, [r2, #0]
 800a0d0:	f043 0001 	orr.w	r0, r3, #1
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	6060      	str	r0, [r4, #4]
 800a0d8:	608c      	str	r4, [r1, #8]
 800a0da:	d3b6      	bcc.n	800a04a <_free_r+0x86>
 800a0dc:	4b2c      	ldr	r3, [pc, #176]	; (800a190 <_free_r+0x1cc>)
 800a0de:	4640      	mov	r0, r8
 800a0e0:	6819      	ldr	r1, [r3, #0]
 800a0e2:	f7ff ff21 	bl	8009f28 <_malloc_trim_r>
 800a0e6:	e7b0      	b.n	800a04a <_free_r+0x86>
 800a0e8:	1811      	adds	r1, r2, r0
 800a0ea:	6849      	ldr	r1, [r1, #4]
 800a0ec:	07c9      	lsls	r1, r1, #31
 800a0ee:	d444      	bmi.n	800a17a <_free_r+0x1b6>
 800a0f0:	6891      	ldr	r1, [r2, #8]
 800a0f2:	68d2      	ldr	r2, [r2, #12]
 800a0f4:	60ca      	str	r2, [r1, #12]
 800a0f6:	4403      	add	r3, r0
 800a0f8:	f043 0001 	orr.w	r0, r3, #1
 800a0fc:	6091      	str	r1, [r2, #8]
 800a0fe:	6060      	str	r0, [r4, #4]
 800a100:	50e3      	str	r3, [r4, r3]
 800a102:	e7a2      	b.n	800a04a <_free_r+0x86>
 800a104:	2a14      	cmp	r2, #20
 800a106:	d817      	bhi.n	800a138 <_free_r+0x174>
 800a108:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800a10c:	007f      	lsls	r7, r7, #1
 800a10e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800a112:	e7a9      	b.n	800a068 <_free_r+0xa4>
 800a114:	10aa      	asrs	r2, r5, #2
 800a116:	684b      	ldr	r3, [r1, #4]
 800a118:	2501      	movs	r5, #1
 800a11a:	fa05 f202 	lsl.w	r2, r5, r2
 800a11e:	4313      	orrs	r3, r2
 800a120:	604b      	str	r3, [r1, #4]
 800a122:	4602      	mov	r2, r0
 800a124:	e7b1      	b.n	800a08a <_free_r+0xc6>
 800a126:	f043 0201 	orr.w	r2, r3, #1
 800a12a:	614c      	str	r4, [r1, #20]
 800a12c:	610c      	str	r4, [r1, #16]
 800a12e:	60e5      	str	r5, [r4, #12]
 800a130:	60a5      	str	r5, [r4, #8]
 800a132:	6062      	str	r2, [r4, #4]
 800a134:	50e3      	str	r3, [r4, r3]
 800a136:	e788      	b.n	800a04a <_free_r+0x86>
 800a138:	2a54      	cmp	r2, #84	; 0x54
 800a13a:	d806      	bhi.n	800a14a <_free_r+0x186>
 800a13c:	0b1a      	lsrs	r2, r3, #12
 800a13e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800a142:	007f      	lsls	r7, r7, #1
 800a144:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800a148:	e78e      	b.n	800a068 <_free_r+0xa4>
 800a14a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a14e:	d806      	bhi.n	800a15e <_free_r+0x19a>
 800a150:	0bda      	lsrs	r2, r3, #15
 800a152:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800a156:	007f      	lsls	r7, r7, #1
 800a158:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800a15c:	e784      	b.n	800a068 <_free_r+0xa4>
 800a15e:	f240 5054 	movw	r0, #1364	; 0x554
 800a162:	4282      	cmp	r2, r0
 800a164:	d806      	bhi.n	800a174 <_free_r+0x1b0>
 800a166:	0c9a      	lsrs	r2, r3, #18
 800a168:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800a16c:	007f      	lsls	r7, r7, #1
 800a16e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800a172:	e779      	b.n	800a068 <_free_r+0xa4>
 800a174:	27fe      	movs	r7, #254	; 0xfe
 800a176:	257e      	movs	r5, #126	; 0x7e
 800a178:	e776      	b.n	800a068 <_free_r+0xa4>
 800a17a:	f043 0201 	orr.w	r2, r3, #1
 800a17e:	6062      	str	r2, [r4, #4]
 800a180:	50e3      	str	r3, [r4, r3]
 800a182:	e762      	b.n	800a04a <_free_r+0x86>
 800a184:	200005bc 	.word	0x200005bc
 800a188:	200005c4 	.word	0x200005c4
 800a18c:	200009c4 	.word	0x200009c4
 800a190:	2000595c 	.word	0x2000595c

0800a194 <__sfvwrite_r>:
 800a194:	6893      	ldr	r3, [r2, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d076      	beq.n	800a288 <__sfvwrite_r+0xf4>
 800a19a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19e:	898b      	ldrh	r3, [r1, #12]
 800a1a0:	b085      	sub	sp, #20
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	0719      	lsls	r1, r3, #28
 800a1a6:	9001      	str	r0, [sp, #4]
 800a1a8:	4616      	mov	r6, r2
 800a1aa:	d529      	bpl.n	800a200 <__sfvwrite_r+0x6c>
 800a1ac:	6922      	ldr	r2, [r4, #16]
 800a1ae:	b33a      	cbz	r2, 800a200 <__sfvwrite_r+0x6c>
 800a1b0:	f003 0802 	and.w	r8, r3, #2
 800a1b4:	fa1f f088 	uxth.w	r0, r8
 800a1b8:	6835      	ldr	r5, [r6, #0]
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d02f      	beq.n	800a21e <__sfvwrite_r+0x8a>
 800a1be:	f04f 0900 	mov.w	r9, #0
 800a1c2:	4fb4      	ldr	r7, [pc, #720]	; (800a494 <__sfvwrite_r+0x300>)
 800a1c4:	46c8      	mov	r8, r9
 800a1c6:	46b2      	mov	sl, r6
 800a1c8:	45b8      	cmp	r8, r7
 800a1ca:	4643      	mov	r3, r8
 800a1cc:	464a      	mov	r2, r9
 800a1ce:	bf28      	it	cs
 800a1d0:	463b      	movcs	r3, r7
 800a1d2:	9801      	ldr	r0, [sp, #4]
 800a1d4:	f1b8 0f00 	cmp.w	r8, #0
 800a1d8:	d050      	beq.n	800a27c <__sfvwrite_r+0xe8>
 800a1da:	69e1      	ldr	r1, [r4, #28]
 800a1dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1de:	47b0      	blx	r6
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	dd71      	ble.n	800a2c8 <__sfvwrite_r+0x134>
 800a1e4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a1e8:	1a1b      	subs	r3, r3, r0
 800a1ea:	4481      	add	r9, r0
 800a1ec:	ebc0 0808 	rsb	r8, r0, r8
 800a1f0:	f8ca 3008 	str.w	r3, [sl, #8]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e7      	bne.n	800a1c8 <__sfvwrite_r+0x34>
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	b005      	add	sp, #20
 800a1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a200:	4621      	mov	r1, r4
 800a202:	9801      	ldr	r0, [sp, #4]
 800a204:	f7ff fc0c 	bl	8009a20 <__swsetup_r>
 800a208:	2800      	cmp	r0, #0
 800a20a:	f040 813a 	bne.w	800a482 <__sfvwrite_r+0x2ee>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	6835      	ldr	r5, [r6, #0]
 800a212:	f003 0802 	and.w	r8, r3, #2
 800a216:	fa1f f088 	uxth.w	r0, r8
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d1cf      	bne.n	800a1be <__sfvwrite_r+0x2a>
 800a21e:	f013 0901 	ands.w	r9, r3, #1
 800a222:	d15b      	bne.n	800a2dc <__sfvwrite_r+0x148>
 800a224:	464f      	mov	r7, r9
 800a226:	9602      	str	r6, [sp, #8]
 800a228:	b31f      	cbz	r7, 800a272 <__sfvwrite_r+0xde>
 800a22a:	059a      	lsls	r2, r3, #22
 800a22c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800a230:	d52c      	bpl.n	800a28c <__sfvwrite_r+0xf8>
 800a232:	4547      	cmp	r7, r8
 800a234:	46c2      	mov	sl, r8
 800a236:	f0c0 80a4 	bcc.w	800a382 <__sfvwrite_r+0x1ee>
 800a23a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a23e:	f040 80b1 	bne.w	800a3a4 <__sfvwrite_r+0x210>
 800a242:	6820      	ldr	r0, [r4, #0]
 800a244:	4652      	mov	r2, sl
 800a246:	4649      	mov	r1, r9
 800a248:	f000 f9ec 	bl	800a624 <memmove>
 800a24c:	68a0      	ldr	r0, [r4, #8]
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	ebc8 0000 	rsb	r0, r8, r0
 800a254:	4453      	add	r3, sl
 800a256:	60a0      	str	r0, [r4, #8]
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	4638      	mov	r0, r7
 800a25c:	9a02      	ldr	r2, [sp, #8]
 800a25e:	6893      	ldr	r3, [r2, #8]
 800a260:	1a1b      	subs	r3, r3, r0
 800a262:	4481      	add	r9, r0
 800a264:	1a3f      	subs	r7, r7, r0
 800a266:	6093      	str	r3, [r2, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d0c5      	beq.n	800a1f8 <__sfvwrite_r+0x64>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	2f00      	cmp	r7, #0
 800a270:	d1db      	bne.n	800a22a <__sfvwrite_r+0x96>
 800a272:	f8d5 9000 	ldr.w	r9, [r5]
 800a276:	686f      	ldr	r7, [r5, #4]
 800a278:	3508      	adds	r5, #8
 800a27a:	e7d5      	b.n	800a228 <__sfvwrite_r+0x94>
 800a27c:	f8d5 9000 	ldr.w	r9, [r5]
 800a280:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800a284:	3508      	adds	r5, #8
 800a286:	e79f      	b.n	800a1c8 <__sfvwrite_r+0x34>
 800a288:	2000      	movs	r0, #0
 800a28a:	4770      	bx	lr
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	4298      	cmp	r0, r3
 800a292:	d803      	bhi.n	800a29c <__sfvwrite_r+0x108>
 800a294:	6961      	ldr	r1, [r4, #20]
 800a296:	428f      	cmp	r7, r1
 800a298:	f080 80b7 	bcs.w	800a40a <__sfvwrite_r+0x276>
 800a29c:	45b8      	cmp	r8, r7
 800a29e:	bf28      	it	cs
 800a2a0:	46b8      	movcs	r8, r7
 800a2a2:	4642      	mov	r2, r8
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	f000 f9bd 	bl	800a624 <memmove>
 800a2aa:	68a3      	ldr	r3, [r4, #8]
 800a2ac:	6822      	ldr	r2, [r4, #0]
 800a2ae:	ebc8 0303 	rsb	r3, r8, r3
 800a2b2:	4442      	add	r2, r8
 800a2b4:	60a3      	str	r3, [r4, #8]
 800a2b6:	6022      	str	r2, [r4, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d149      	bne.n	800a350 <__sfvwrite_r+0x1bc>
 800a2bc:	4621      	mov	r1, r4
 800a2be:	9801      	ldr	r0, [sp, #4]
 800a2c0:	f7ff fd20 	bl	8009d04 <_fflush_r>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d043      	beq.n	800a350 <__sfvwrite_r+0x1bc>
 800a2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	b005      	add	sp, #20
 800a2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2dc:	4680      	mov	r8, r0
 800a2de:	9002      	str	r0, [sp, #8]
 800a2e0:	4682      	mov	sl, r0
 800a2e2:	4681      	mov	r9, r0
 800a2e4:	f1b9 0f00 	cmp.w	r9, #0
 800a2e8:	d02a      	beq.n	800a340 <__sfvwrite_r+0x1ac>
 800a2ea:	9b02      	ldr	r3, [sp, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d04c      	beq.n	800a38a <__sfvwrite_r+0x1f6>
 800a2f0:	6820      	ldr	r0, [r4, #0]
 800a2f2:	6923      	ldr	r3, [r4, #16]
 800a2f4:	6962      	ldr	r2, [r4, #20]
 800a2f6:	45c8      	cmp	r8, r9
 800a2f8:	46c3      	mov	fp, r8
 800a2fa:	bf28      	it	cs
 800a2fc:	46cb      	movcs	fp, r9
 800a2fe:	4298      	cmp	r0, r3
 800a300:	465f      	mov	r7, fp
 800a302:	d904      	bls.n	800a30e <__sfvwrite_r+0x17a>
 800a304:	68a3      	ldr	r3, [r4, #8]
 800a306:	4413      	add	r3, r2
 800a308:	459b      	cmp	fp, r3
 800a30a:	f300 8090 	bgt.w	800a42e <__sfvwrite_r+0x29a>
 800a30e:	4593      	cmp	fp, r2
 800a310:	db20      	blt.n	800a354 <__sfvwrite_r+0x1c0>
 800a312:	4613      	mov	r3, r2
 800a314:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800a316:	69e1      	ldr	r1, [r4, #28]
 800a318:	9801      	ldr	r0, [sp, #4]
 800a31a:	4652      	mov	r2, sl
 800a31c:	47b8      	blx	r7
 800a31e:	1e07      	subs	r7, r0, #0
 800a320:	ddd2      	ble.n	800a2c8 <__sfvwrite_r+0x134>
 800a322:	ebb8 0807 	subs.w	r8, r8, r7
 800a326:	d023      	beq.n	800a370 <__sfvwrite_r+0x1dc>
 800a328:	68b3      	ldr	r3, [r6, #8]
 800a32a:	1bdb      	subs	r3, r3, r7
 800a32c:	44ba      	add	sl, r7
 800a32e:	ebc7 0909 	rsb	r9, r7, r9
 800a332:	60b3      	str	r3, [r6, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	f43f af5f 	beq.w	800a1f8 <__sfvwrite_r+0x64>
 800a33a:	f1b9 0f00 	cmp.w	r9, #0
 800a33e:	d1d4      	bne.n	800a2ea <__sfvwrite_r+0x156>
 800a340:	2300      	movs	r3, #0
 800a342:	f8d5 a000 	ldr.w	sl, [r5]
 800a346:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800a34a:	9302      	str	r3, [sp, #8]
 800a34c:	3508      	adds	r5, #8
 800a34e:	e7c9      	b.n	800a2e4 <__sfvwrite_r+0x150>
 800a350:	4640      	mov	r0, r8
 800a352:	e783      	b.n	800a25c <__sfvwrite_r+0xc8>
 800a354:	465a      	mov	r2, fp
 800a356:	4651      	mov	r1, sl
 800a358:	f000 f964 	bl	800a624 <memmove>
 800a35c:	68a2      	ldr	r2, [r4, #8]
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	ebcb 0202 	rsb	r2, fp, r2
 800a364:	445b      	add	r3, fp
 800a366:	ebb8 0807 	subs.w	r8, r8, r7
 800a36a:	60a2      	str	r2, [r4, #8]
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	d1db      	bne.n	800a328 <__sfvwrite_r+0x194>
 800a370:	4621      	mov	r1, r4
 800a372:	9801      	ldr	r0, [sp, #4]
 800a374:	f7ff fcc6 	bl	8009d04 <_fflush_r>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1a5      	bne.n	800a2c8 <__sfvwrite_r+0x134>
 800a37c:	f8cd 8008 	str.w	r8, [sp, #8]
 800a380:	e7d2      	b.n	800a328 <__sfvwrite_r+0x194>
 800a382:	6820      	ldr	r0, [r4, #0]
 800a384:	46b8      	mov	r8, r7
 800a386:	46ba      	mov	sl, r7
 800a388:	e75c      	b.n	800a244 <__sfvwrite_r+0xb0>
 800a38a:	464a      	mov	r2, r9
 800a38c:	210a      	movs	r1, #10
 800a38e:	4650      	mov	r0, sl
 800a390:	f7f6 f866 	bl	8000460 <memchr>
 800a394:	2800      	cmp	r0, #0
 800a396:	d06f      	beq.n	800a478 <__sfvwrite_r+0x2e4>
 800a398:	3001      	adds	r0, #1
 800a39a:	2301      	movs	r3, #1
 800a39c:	ebca 0800 	rsb	r8, sl, r0
 800a3a0:	9302      	str	r3, [sp, #8]
 800a3a2:	e7a5      	b.n	800a2f0 <__sfvwrite_r+0x15c>
 800a3a4:	6962      	ldr	r2, [r4, #20]
 800a3a6:	6820      	ldr	r0, [r4, #0]
 800a3a8:	6921      	ldr	r1, [r4, #16]
 800a3aa:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800a3ae:	ebc1 0a00 	rsb	sl, r1, r0
 800a3b2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800a3b6:	f10a 0001 	add.w	r0, sl, #1
 800a3ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3be:	4438      	add	r0, r7
 800a3c0:	4540      	cmp	r0, r8
 800a3c2:	4642      	mov	r2, r8
 800a3c4:	bf84      	itt	hi
 800a3c6:	4680      	movhi	r8, r0
 800a3c8:	4642      	movhi	r2, r8
 800a3ca:	055b      	lsls	r3, r3, #21
 800a3cc:	d542      	bpl.n	800a454 <__sfvwrite_r+0x2c0>
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	9801      	ldr	r0, [sp, #4]
 800a3d2:	f7fd ff77 	bl	80082c4 <_malloc_r>
 800a3d6:	4683      	mov	fp, r0
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d055      	beq.n	800a488 <__sfvwrite_r+0x2f4>
 800a3dc:	4652      	mov	r2, sl
 800a3de:	6921      	ldr	r1, [r4, #16]
 800a3e0:	f7f5 ff1c 	bl	800021c <memcpy>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	ebca 0308 	rsb	r3, sl, r8
 800a3f4:	eb0b 000a 	add.w	r0, fp, sl
 800a3f8:	f8c4 8014 	str.w	r8, [r4, #20]
 800a3fc:	f8c4 b010 	str.w	fp, [r4, #16]
 800a400:	6020      	str	r0, [r4, #0]
 800a402:	60a3      	str	r3, [r4, #8]
 800a404:	46b8      	mov	r8, r7
 800a406:	46ba      	mov	sl, r7
 800a408:	e71c      	b.n	800a244 <__sfvwrite_r+0xb0>
 800a40a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a40e:	42bb      	cmp	r3, r7
 800a410:	bf28      	it	cs
 800a412:	463b      	movcs	r3, r7
 800a414:	464a      	mov	r2, r9
 800a416:	fb93 f3f1 	sdiv	r3, r3, r1
 800a41a:	9801      	ldr	r0, [sp, #4]
 800a41c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a41e:	fb01 f303 	mul.w	r3, r1, r3
 800a422:	69e1      	ldr	r1, [r4, #28]
 800a424:	47b0      	blx	r6
 800a426:	2800      	cmp	r0, #0
 800a428:	f73f af18 	bgt.w	800a25c <__sfvwrite_r+0xc8>
 800a42c:	e74c      	b.n	800a2c8 <__sfvwrite_r+0x134>
 800a42e:	461a      	mov	r2, r3
 800a430:	4651      	mov	r1, sl
 800a432:	9303      	str	r3, [sp, #12]
 800a434:	f000 f8f6 	bl	800a624 <memmove>
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	9801      	ldr	r0, [sp, #4]
 800a43e:	441a      	add	r2, r3
 800a440:	6022      	str	r2, [r4, #0]
 800a442:	4621      	mov	r1, r4
 800a444:	f7ff fc5e 	bl	8009d04 <_fflush_r>
 800a448:	9b03      	ldr	r3, [sp, #12]
 800a44a:	2800      	cmp	r0, #0
 800a44c:	f47f af3c 	bne.w	800a2c8 <__sfvwrite_r+0x134>
 800a450:	461f      	mov	r7, r3
 800a452:	e766      	b.n	800a322 <__sfvwrite_r+0x18e>
 800a454:	9801      	ldr	r0, [sp, #4]
 800a456:	f000 f949 	bl	800a6ec <_realloc_r>
 800a45a:	4683      	mov	fp, r0
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d1c7      	bne.n	800a3f0 <__sfvwrite_r+0x25c>
 800a460:	9d01      	ldr	r5, [sp, #4]
 800a462:	6921      	ldr	r1, [r4, #16]
 800a464:	4628      	mov	r0, r5
 800a466:	f7ff fdad 	bl	8009fc4 <_free_r>
 800a46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a46e:	220c      	movs	r2, #12
 800a470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a474:	602a      	str	r2, [r5, #0]
 800a476:	e729      	b.n	800a2cc <__sfvwrite_r+0x138>
 800a478:	2301      	movs	r3, #1
 800a47a:	f109 0801 	add.w	r8, r9, #1
 800a47e:	9302      	str	r3, [sp, #8]
 800a480:	e736      	b.n	800a2f0 <__sfvwrite_r+0x15c>
 800a482:	f04f 30ff 	mov.w	r0, #4294967295
 800a486:	e6b8      	b.n	800a1fa <__sfvwrite_r+0x66>
 800a488:	9a01      	ldr	r2, [sp, #4]
 800a48a:	230c      	movs	r3, #12
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a492:	e71b      	b.n	800a2cc <__sfvwrite_r+0x138>
 800a494:	7ffffc00 	.word	0x7ffffc00

0800a498 <_fwalk_reent>:
 800a498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a49c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800a4a0:	d01f      	beq.n	800a4e2 <_fwalk_reent+0x4a>
 800a4a2:	4688      	mov	r8, r1
 800a4a4:	4606      	mov	r6, r0
 800a4a6:	f04f 0900 	mov.w	r9, #0
 800a4aa:	687d      	ldr	r5, [r7, #4]
 800a4ac:	68bc      	ldr	r4, [r7, #8]
 800a4ae:	3d01      	subs	r5, #1
 800a4b0:	d411      	bmi.n	800a4d6 <_fwalk_reent+0x3e>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	f105 35ff 	add.w	r5, r5, #4294967295
 800a4ba:	d908      	bls.n	800a4ce <_fwalk_reent+0x36>
 800a4bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	d002      	beq.n	800a4ce <_fwalk_reent+0x36>
 800a4c8:	47c0      	blx	r8
 800a4ca:	ea49 0900 	orr.w	r9, r9, r0
 800a4ce:	1c6b      	adds	r3, r5, #1
 800a4d0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800a4d4:	d1ed      	bne.n	800a4b2 <_fwalk_reent+0x1a>
 800a4d6:	683f      	ldr	r7, [r7, #0]
 800a4d8:	2f00      	cmp	r7, #0
 800a4da:	d1e6      	bne.n	800a4aa <_fwalk_reent+0x12>
 800a4dc:	4648      	mov	r0, r9
 800a4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4e2:	46b9      	mov	r9, r7
 800a4e4:	4648      	mov	r0, r9
 800a4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ea:	bf00      	nop

0800a4ec <__locale_mb_cur_max>:
 800a4ec:	4b04      	ldr	r3, [pc, #16]	; (800a500 <__locale_mb_cur_max+0x14>)
 800a4ee:	4a05      	ldr	r2, [pc, #20]	; (800a504 <__locale_mb_cur_max+0x18>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	bf08      	it	eq
 800a4f8:	4613      	moveq	r3, r2
 800a4fa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800a4fe:	4770      	bx	lr
 800a500:	200005b8 	.word	0x200005b8
 800a504:	200009cc 	.word	0x200009cc

0800a508 <__locale_ctype_ptr_l>:
 800a508:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop

0800a510 <__swhatbuf_r>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	460d      	mov	r5, r1
 800a514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a518:	2900      	cmp	r1, #0
 800a51a:	b090      	sub	sp, #64	; 0x40
 800a51c:	4614      	mov	r4, r2
 800a51e:	461e      	mov	r6, r3
 800a520:	db14      	blt.n	800a54c <__swhatbuf_r+0x3c>
 800a522:	aa01      	add	r2, sp, #4
 800a524:	f002 ff7c 	bl	800d420 <_fstat_r>
 800a528:	2800      	cmp	r0, #0
 800a52a:	db0f      	blt.n	800a54c <__swhatbuf_r+0x3c>
 800a52c:	9a02      	ldr	r2, [sp, #8]
 800a52e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a532:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800a536:	fab2 f282 	clz	r2, r2
 800a53a:	0952      	lsrs	r2, r2, #5
 800a53c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a540:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a544:	6032      	str	r2, [r6, #0]
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	b010      	add	sp, #64	; 0x40
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	89a8      	ldrh	r0, [r5, #12]
 800a54e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800a552:	b282      	uxth	r2, r0
 800a554:	2000      	movs	r0, #0
 800a556:	6030      	str	r0, [r6, #0]
 800a558:	b11a      	cbz	r2, 800a562 <__swhatbuf_r+0x52>
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	b010      	add	sp, #64	; 0x40
 800a560:	bd70      	pop	{r4, r5, r6, pc}
 800a562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a566:	4610      	mov	r0, r2
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	b010      	add	sp, #64	; 0x40
 800a56c:	bd70      	pop	{r4, r5, r6, pc}
 800a56e:	bf00      	nop

0800a570 <__smakebuf_r>:
 800a570:	898a      	ldrh	r2, [r1, #12]
 800a572:	0792      	lsls	r2, r2, #30
 800a574:	460b      	mov	r3, r1
 800a576:	d506      	bpl.n	800a586 <__smakebuf_r+0x16>
 800a578:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a57c:	2101      	movs	r1, #1
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	611a      	str	r2, [r3, #16]
 800a582:	6159      	str	r1, [r3, #20]
 800a584:	4770      	bx	lr
 800a586:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a588:	b083      	sub	sp, #12
 800a58a:	ab01      	add	r3, sp, #4
 800a58c:	466a      	mov	r2, sp
 800a58e:	460c      	mov	r4, r1
 800a590:	4605      	mov	r5, r0
 800a592:	f7ff ffbd 	bl	800a510 <__swhatbuf_r>
 800a596:	9900      	ldr	r1, [sp, #0]
 800a598:	4606      	mov	r6, r0
 800a59a:	4628      	mov	r0, r5
 800a59c:	f7fd fe92 	bl	80082c4 <_malloc_r>
 800a5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a4:	b1d0      	cbz	r0, 800a5dc <__smakebuf_r+0x6c>
 800a5a6:	9a01      	ldr	r2, [sp, #4]
 800a5a8:	4f12      	ldr	r7, [pc, #72]	; (800a5f4 <__smakebuf_r+0x84>)
 800a5aa:	9900      	ldr	r1, [sp, #0]
 800a5ac:	63ef      	str	r7, [r5, #60]	; 0x3c
 800a5ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	6020      	str	r0, [r4, #0]
 800a5b6:	6120      	str	r0, [r4, #16]
 800a5b8:	6161      	str	r1, [r4, #20]
 800a5ba:	b91a      	cbnz	r2, 800a5c4 <__smakebuf_r+0x54>
 800a5bc:	4333      	orrs	r3, r6
 800a5be:	81a3      	strh	r3, [r4, #12]
 800a5c0:	b003      	add	sp, #12
 800a5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ca:	f002 ff3d 	bl	800d448 <_isatty_r>
 800a5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d0f2      	beq.n	800a5bc <__smakebuf_r+0x4c>
 800a5d6:	f043 0301 	orr.w	r3, r3, #1
 800a5da:	e7ef      	b.n	800a5bc <__smakebuf_r+0x4c>
 800a5dc:	059a      	lsls	r2, r3, #22
 800a5de:	d4ef      	bmi.n	800a5c0 <__smakebuf_r+0x50>
 800a5e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5e4:	f043 0302 	orr.w	r3, r3, #2
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	81a3      	strh	r3, [r4, #12]
 800a5ec:	6022      	str	r2, [r4, #0]
 800a5ee:	6122      	str	r2, [r4, #16]
 800a5f0:	6161      	str	r1, [r4, #20]
 800a5f2:	e7e5      	b.n	800a5c0 <__smakebuf_r+0x50>
 800a5f4:	08009d31 	.word	0x08009d31

0800a5f8 <__ascii_mbtowc>:
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	b149      	cbz	r1, 800a610 <__ascii_mbtowc+0x18>
 800a5fc:	b15a      	cbz	r2, 800a616 <__ascii_mbtowc+0x1e>
 800a5fe:	b16b      	cbz	r3, 800a61c <__ascii_mbtowc+0x24>
 800a600:	7813      	ldrb	r3, [r2, #0]
 800a602:	600b      	str	r3, [r1, #0]
 800a604:	7812      	ldrb	r2, [r2, #0]
 800a606:	1c10      	adds	r0, r2, #0
 800a608:	bf18      	it	ne
 800a60a:	2001      	movne	r0, #1
 800a60c:	b002      	add	sp, #8
 800a60e:	4770      	bx	lr
 800a610:	a901      	add	r1, sp, #4
 800a612:	2a00      	cmp	r2, #0
 800a614:	d1f3      	bne.n	800a5fe <__ascii_mbtowc+0x6>
 800a616:	4610      	mov	r0, r2
 800a618:	b002      	add	sp, #8
 800a61a:	4770      	bx	lr
 800a61c:	f06f 0001 	mvn.w	r0, #1
 800a620:	e7f4      	b.n	800a60c <__ascii_mbtowc+0x14>
 800a622:	bf00      	nop

0800a624 <memmove>:
 800a624:	4288      	cmp	r0, r1
 800a626:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a628:	d90d      	bls.n	800a646 <memmove+0x22>
 800a62a:	188b      	adds	r3, r1, r2
 800a62c:	4298      	cmp	r0, r3
 800a62e:	d20a      	bcs.n	800a646 <memmove+0x22>
 800a630:	1881      	adds	r1, r0, r2
 800a632:	2a00      	cmp	r2, #0
 800a634:	d051      	beq.n	800a6da <memmove+0xb6>
 800a636:	1a9a      	subs	r2, r3, r2
 800a638:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a63c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a640:	4293      	cmp	r3, r2
 800a642:	d1f9      	bne.n	800a638 <memmove+0x14>
 800a644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a646:	2a0f      	cmp	r2, #15
 800a648:	d948      	bls.n	800a6dc <memmove+0xb8>
 800a64a:	ea41 0300 	orr.w	r3, r1, r0
 800a64e:	079b      	lsls	r3, r3, #30
 800a650:	d146      	bne.n	800a6e0 <memmove+0xbc>
 800a652:	f100 0410 	add.w	r4, r0, #16
 800a656:	f101 0310 	add.w	r3, r1, #16
 800a65a:	4615      	mov	r5, r2
 800a65c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800a660:	f844 6c10 	str.w	r6, [r4, #-16]
 800a664:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800a668:	f844 6c0c 	str.w	r6, [r4, #-12]
 800a66c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800a670:	f844 6c08 	str.w	r6, [r4, #-8]
 800a674:	3d10      	subs	r5, #16
 800a676:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800a67a:	f844 6c04 	str.w	r6, [r4, #-4]
 800a67e:	2d0f      	cmp	r5, #15
 800a680:	f103 0310 	add.w	r3, r3, #16
 800a684:	f104 0410 	add.w	r4, r4, #16
 800a688:	d8e8      	bhi.n	800a65c <memmove+0x38>
 800a68a:	f1a2 0310 	sub.w	r3, r2, #16
 800a68e:	f023 030f 	bic.w	r3, r3, #15
 800a692:	f002 0e0f 	and.w	lr, r2, #15
 800a696:	3310      	adds	r3, #16
 800a698:	f1be 0f03 	cmp.w	lr, #3
 800a69c:	4419      	add	r1, r3
 800a69e:	4403      	add	r3, r0
 800a6a0:	d921      	bls.n	800a6e6 <memmove+0xc2>
 800a6a2:	1f1e      	subs	r6, r3, #4
 800a6a4:	460d      	mov	r5, r1
 800a6a6:	4674      	mov	r4, lr
 800a6a8:	3c04      	subs	r4, #4
 800a6aa:	f855 7b04 	ldr.w	r7, [r5], #4
 800a6ae:	f846 7f04 	str.w	r7, [r6, #4]!
 800a6b2:	2c03      	cmp	r4, #3
 800a6b4:	d8f8      	bhi.n	800a6a8 <memmove+0x84>
 800a6b6:	f1ae 0404 	sub.w	r4, lr, #4
 800a6ba:	f024 0403 	bic.w	r4, r4, #3
 800a6be:	3404      	adds	r4, #4
 800a6c0:	4423      	add	r3, r4
 800a6c2:	4421      	add	r1, r4
 800a6c4:	f002 0203 	and.w	r2, r2, #3
 800a6c8:	b162      	cbz	r2, 800a6e4 <memmove+0xc0>
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	440a      	add	r2, r1
 800a6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d6:	428a      	cmp	r2, r1
 800a6d8:	d1f9      	bne.n	800a6ce <memmove+0xaa>
 800a6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6dc:	4603      	mov	r3, r0
 800a6de:	e7f3      	b.n	800a6c8 <memmove+0xa4>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	e7f2      	b.n	800a6ca <memmove+0xa6>
 800a6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6e6:	4672      	mov	r2, lr
 800a6e8:	e7ee      	b.n	800a6c8 <memmove+0xa4>
 800a6ea:	bf00      	nop

0800a6ec <_realloc_r>:
 800a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	4617      	mov	r7, r2
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	f000 80c1 	beq.w	800a87c <_realloc_r+0x190>
 800a6fa:	460e      	mov	r6, r1
 800a6fc:	4681      	mov	r9, r0
 800a6fe:	f107 050b 	add.w	r5, r7, #11
 800a702:	f7fe f8e5 	bl	80088d0 <__malloc_lock>
 800a706:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800a70a:	2d16      	cmp	r5, #22
 800a70c:	f02e 0403 	bic.w	r4, lr, #3
 800a710:	f1a6 0808 	sub.w	r8, r6, #8
 800a714:	d840      	bhi.n	800a798 <_realloc_r+0xac>
 800a716:	2210      	movs	r2, #16
 800a718:	4615      	mov	r5, r2
 800a71a:	42af      	cmp	r7, r5
 800a71c:	d841      	bhi.n	800a7a2 <_realloc_r+0xb6>
 800a71e:	4294      	cmp	r4, r2
 800a720:	da75      	bge.n	800a80e <_realloc_r+0x122>
 800a722:	4bc9      	ldr	r3, [pc, #804]	; (800aa48 <_realloc_r+0x35c>)
 800a724:	6899      	ldr	r1, [r3, #8]
 800a726:	eb08 0004 	add.w	r0, r8, r4
 800a72a:	4288      	cmp	r0, r1
 800a72c:	6841      	ldr	r1, [r0, #4]
 800a72e:	f000 80d9 	beq.w	800a8e4 <_realloc_r+0x1f8>
 800a732:	f021 0301 	bic.w	r3, r1, #1
 800a736:	4403      	add	r3, r0
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	07db      	lsls	r3, r3, #31
 800a73c:	d57d      	bpl.n	800a83a <_realloc_r+0x14e>
 800a73e:	f01e 0f01 	tst.w	lr, #1
 800a742:	d035      	beq.n	800a7b0 <_realloc_r+0xc4>
 800a744:	4639      	mov	r1, r7
 800a746:	4648      	mov	r0, r9
 800a748:	f7fd fdbc 	bl	80082c4 <_malloc_r>
 800a74c:	4607      	mov	r7, r0
 800a74e:	b1e0      	cbz	r0, 800a78a <_realloc_r+0x9e>
 800a750:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a754:	f023 0301 	bic.w	r3, r3, #1
 800a758:	4443      	add	r3, r8
 800a75a:	f1a0 0208 	sub.w	r2, r0, #8
 800a75e:	429a      	cmp	r2, r3
 800a760:	f000 8144 	beq.w	800a9ec <_realloc_r+0x300>
 800a764:	1f22      	subs	r2, r4, #4
 800a766:	2a24      	cmp	r2, #36	; 0x24
 800a768:	f200 8131 	bhi.w	800a9ce <_realloc_r+0x2e2>
 800a76c:	2a13      	cmp	r2, #19
 800a76e:	f200 8104 	bhi.w	800a97a <_realloc_r+0x28e>
 800a772:	4603      	mov	r3, r0
 800a774:	4632      	mov	r2, r6
 800a776:	6811      	ldr	r1, [r2, #0]
 800a778:	6019      	str	r1, [r3, #0]
 800a77a:	6851      	ldr	r1, [r2, #4]
 800a77c:	6059      	str	r1, [r3, #4]
 800a77e:	6892      	ldr	r2, [r2, #8]
 800a780:	609a      	str	r2, [r3, #8]
 800a782:	4631      	mov	r1, r6
 800a784:	4648      	mov	r0, r9
 800a786:	f7ff fc1d 	bl	8009fc4 <_free_r>
 800a78a:	4648      	mov	r0, r9
 800a78c:	f7fe f8a2 	bl	80088d4 <__malloc_unlock>
 800a790:	4638      	mov	r0, r7
 800a792:	b003      	add	sp, #12
 800a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a798:	f025 0507 	bic.w	r5, r5, #7
 800a79c:	2d00      	cmp	r5, #0
 800a79e:	462a      	mov	r2, r5
 800a7a0:	dabb      	bge.n	800a71a <_realloc_r+0x2e>
 800a7a2:	230c      	movs	r3, #12
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	f8c9 3000 	str.w	r3, [r9]
 800a7aa:	b003      	add	sp, #12
 800a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800a7b4:	ebc3 0a08 	rsb	sl, r3, r8
 800a7b8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a7bc:	f023 0c03 	bic.w	ip, r3, #3
 800a7c0:	eb04 030c 	add.w	r3, r4, ip
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	dbbd      	blt.n	800a744 <_realloc_r+0x58>
 800a7c8:	4657      	mov	r7, sl
 800a7ca:	f8da 100c 	ldr.w	r1, [sl, #12]
 800a7ce:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800a7d2:	1f22      	subs	r2, r4, #4
 800a7d4:	2a24      	cmp	r2, #36	; 0x24
 800a7d6:	60c1      	str	r1, [r0, #12]
 800a7d8:	6088      	str	r0, [r1, #8]
 800a7da:	f200 8117 	bhi.w	800aa0c <_realloc_r+0x320>
 800a7de:	2a13      	cmp	r2, #19
 800a7e0:	f240 8112 	bls.w	800aa08 <_realloc_r+0x31c>
 800a7e4:	6831      	ldr	r1, [r6, #0]
 800a7e6:	f8ca 1008 	str.w	r1, [sl, #8]
 800a7ea:	6871      	ldr	r1, [r6, #4]
 800a7ec:	f8ca 100c 	str.w	r1, [sl, #12]
 800a7f0:	2a1b      	cmp	r2, #27
 800a7f2:	f200 812b 	bhi.w	800aa4c <_realloc_r+0x360>
 800a7f6:	3608      	adds	r6, #8
 800a7f8:	f10a 0210 	add.w	r2, sl, #16
 800a7fc:	6831      	ldr	r1, [r6, #0]
 800a7fe:	6011      	str	r1, [r2, #0]
 800a800:	6871      	ldr	r1, [r6, #4]
 800a802:	6051      	str	r1, [r2, #4]
 800a804:	68b1      	ldr	r1, [r6, #8]
 800a806:	6091      	str	r1, [r2, #8]
 800a808:	463e      	mov	r6, r7
 800a80a:	461c      	mov	r4, r3
 800a80c:	46d0      	mov	r8, sl
 800a80e:	1b63      	subs	r3, r4, r5
 800a810:	2b0f      	cmp	r3, #15
 800a812:	d81d      	bhi.n	800a850 <_realloc_r+0x164>
 800a814:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	4323      	orrs	r3, r4
 800a81e:	4444      	add	r4, r8
 800a820:	f8c8 3004 	str.w	r3, [r8, #4]
 800a824:	6863      	ldr	r3, [r4, #4]
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	6063      	str	r3, [r4, #4]
 800a82c:	4648      	mov	r0, r9
 800a82e:	f7fe f851 	bl	80088d4 <__malloc_unlock>
 800a832:	4630      	mov	r0, r6
 800a834:	b003      	add	sp, #12
 800a836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83a:	f021 0103 	bic.w	r1, r1, #3
 800a83e:	4421      	add	r1, r4
 800a840:	4291      	cmp	r1, r2
 800a842:	db21      	blt.n	800a888 <_realloc_r+0x19c>
 800a844:	68c3      	ldr	r3, [r0, #12]
 800a846:	6882      	ldr	r2, [r0, #8]
 800a848:	460c      	mov	r4, r1
 800a84a:	60d3      	str	r3, [r2, #12]
 800a84c:	609a      	str	r2, [r3, #8]
 800a84e:	e7de      	b.n	800a80e <_realloc_r+0x122>
 800a850:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a854:	eb08 0105 	add.w	r1, r8, r5
 800a858:	f002 0201 	and.w	r2, r2, #1
 800a85c:	4315      	orrs	r5, r2
 800a85e:	f043 0201 	orr.w	r2, r3, #1
 800a862:	440b      	add	r3, r1
 800a864:	f8c8 5004 	str.w	r5, [r8, #4]
 800a868:	604a      	str	r2, [r1, #4]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	f042 0201 	orr.w	r2, r2, #1
 800a870:	3108      	adds	r1, #8
 800a872:	605a      	str	r2, [r3, #4]
 800a874:	4648      	mov	r0, r9
 800a876:	f7ff fba5 	bl	8009fc4 <_free_r>
 800a87a:	e7d7      	b.n	800a82c <_realloc_r+0x140>
 800a87c:	4611      	mov	r1, r2
 800a87e:	b003      	add	sp, #12
 800a880:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	f7fd bd1e 	b.w	80082c4 <_malloc_r>
 800a888:	f01e 0f01 	tst.w	lr, #1
 800a88c:	f47f af5a 	bne.w	800a744 <_realloc_r+0x58>
 800a890:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800a894:	ebc3 0a08 	rsb	sl, r3, r8
 800a898:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a89c:	f023 0c03 	bic.w	ip, r3, #3
 800a8a0:	eb01 0e0c 	add.w	lr, r1, ip
 800a8a4:	4596      	cmp	lr, r2
 800a8a6:	db8b      	blt.n	800a7c0 <_realloc_r+0xd4>
 800a8a8:	68c3      	ldr	r3, [r0, #12]
 800a8aa:	6882      	ldr	r2, [r0, #8]
 800a8ac:	4657      	mov	r7, sl
 800a8ae:	60d3      	str	r3, [r2, #12]
 800a8b0:	609a      	str	r2, [r3, #8]
 800a8b2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800a8b6:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a8ba:	60cb      	str	r3, [r1, #12]
 800a8bc:	1f22      	subs	r2, r4, #4
 800a8be:	2a24      	cmp	r2, #36	; 0x24
 800a8c0:	6099      	str	r1, [r3, #8]
 800a8c2:	f200 8099 	bhi.w	800a9f8 <_realloc_r+0x30c>
 800a8c6:	2a13      	cmp	r2, #19
 800a8c8:	d962      	bls.n	800a990 <_realloc_r+0x2a4>
 800a8ca:	6833      	ldr	r3, [r6, #0]
 800a8cc:	f8ca 3008 	str.w	r3, [sl, #8]
 800a8d0:	6873      	ldr	r3, [r6, #4]
 800a8d2:	f8ca 300c 	str.w	r3, [sl, #12]
 800a8d6:	2a1b      	cmp	r2, #27
 800a8d8:	f200 80a0 	bhi.w	800aa1c <_realloc_r+0x330>
 800a8dc:	3608      	adds	r6, #8
 800a8de:	f10a 0310 	add.w	r3, sl, #16
 800a8e2:	e056      	b.n	800a992 <_realloc_r+0x2a6>
 800a8e4:	f021 0b03 	bic.w	fp, r1, #3
 800a8e8:	44a3      	add	fp, r4
 800a8ea:	f105 0010 	add.w	r0, r5, #16
 800a8ee:	4583      	cmp	fp, r0
 800a8f0:	da59      	bge.n	800a9a6 <_realloc_r+0x2ba>
 800a8f2:	f01e 0f01 	tst.w	lr, #1
 800a8f6:	f47f af25 	bne.w	800a744 <_realloc_r+0x58>
 800a8fa:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800a8fe:	ebc1 0a08 	rsb	sl, r1, r8
 800a902:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a906:	f021 0c03 	bic.w	ip, r1, #3
 800a90a:	44e3      	add	fp, ip
 800a90c:	4558      	cmp	r0, fp
 800a90e:	f73f af57 	bgt.w	800a7c0 <_realloc_r+0xd4>
 800a912:	4657      	mov	r7, sl
 800a914:	f8da 100c 	ldr.w	r1, [sl, #12]
 800a918:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800a91c:	1f22      	subs	r2, r4, #4
 800a91e:	2a24      	cmp	r2, #36	; 0x24
 800a920:	60c1      	str	r1, [r0, #12]
 800a922:	6088      	str	r0, [r1, #8]
 800a924:	f200 80b4 	bhi.w	800aa90 <_realloc_r+0x3a4>
 800a928:	2a13      	cmp	r2, #19
 800a92a:	f240 80a5 	bls.w	800aa78 <_realloc_r+0x38c>
 800a92e:	6831      	ldr	r1, [r6, #0]
 800a930:	f8ca 1008 	str.w	r1, [sl, #8]
 800a934:	6871      	ldr	r1, [r6, #4]
 800a936:	f8ca 100c 	str.w	r1, [sl, #12]
 800a93a:	2a1b      	cmp	r2, #27
 800a93c:	f200 80af 	bhi.w	800aa9e <_realloc_r+0x3b2>
 800a940:	3608      	adds	r6, #8
 800a942:	f10a 0210 	add.w	r2, sl, #16
 800a946:	6831      	ldr	r1, [r6, #0]
 800a948:	6011      	str	r1, [r2, #0]
 800a94a:	6871      	ldr	r1, [r6, #4]
 800a94c:	6051      	str	r1, [r2, #4]
 800a94e:	68b1      	ldr	r1, [r6, #8]
 800a950:	6091      	str	r1, [r2, #8]
 800a952:	eb0a 0105 	add.w	r1, sl, r5
 800a956:	ebc5 020b 	rsb	r2, r5, fp
 800a95a:	f042 0201 	orr.w	r2, r2, #1
 800a95e:	6099      	str	r1, [r3, #8]
 800a960:	604a      	str	r2, [r1, #4]
 800a962:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	431d      	orrs	r5, r3
 800a96c:	4648      	mov	r0, r9
 800a96e:	f8ca 5004 	str.w	r5, [sl, #4]
 800a972:	f7fd ffaf 	bl	80088d4 <__malloc_unlock>
 800a976:	4638      	mov	r0, r7
 800a978:	e75c      	b.n	800a834 <_realloc_r+0x148>
 800a97a:	6833      	ldr	r3, [r6, #0]
 800a97c:	6003      	str	r3, [r0, #0]
 800a97e:	6873      	ldr	r3, [r6, #4]
 800a980:	6043      	str	r3, [r0, #4]
 800a982:	2a1b      	cmp	r2, #27
 800a984:	d827      	bhi.n	800a9d6 <_realloc_r+0x2ea>
 800a986:	f100 0308 	add.w	r3, r0, #8
 800a98a:	f106 0208 	add.w	r2, r6, #8
 800a98e:	e6f2      	b.n	800a776 <_realloc_r+0x8a>
 800a990:	463b      	mov	r3, r7
 800a992:	6832      	ldr	r2, [r6, #0]
 800a994:	601a      	str	r2, [r3, #0]
 800a996:	6872      	ldr	r2, [r6, #4]
 800a998:	605a      	str	r2, [r3, #4]
 800a99a:	68b2      	ldr	r2, [r6, #8]
 800a99c:	609a      	str	r2, [r3, #8]
 800a99e:	463e      	mov	r6, r7
 800a9a0:	4674      	mov	r4, lr
 800a9a2:	46d0      	mov	r8, sl
 800a9a4:	e733      	b.n	800a80e <_realloc_r+0x122>
 800a9a6:	eb08 0105 	add.w	r1, r8, r5
 800a9aa:	ebc5 0b0b 	rsb	fp, r5, fp
 800a9ae:	f04b 0201 	orr.w	r2, fp, #1
 800a9b2:	6099      	str	r1, [r3, #8]
 800a9b4:	604a      	str	r2, [r1, #4]
 800a9b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	431d      	orrs	r5, r3
 800a9c0:	4648      	mov	r0, r9
 800a9c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9c6:	f7fd ff85 	bl	80088d4 <__malloc_unlock>
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	e732      	b.n	800a834 <_realloc_r+0x148>
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	f7ff fe28 	bl	800a624 <memmove>
 800a9d4:	e6d5      	b.n	800a782 <_realloc_r+0x96>
 800a9d6:	68b3      	ldr	r3, [r6, #8]
 800a9d8:	6083      	str	r3, [r0, #8]
 800a9da:	68f3      	ldr	r3, [r6, #12]
 800a9dc:	60c3      	str	r3, [r0, #12]
 800a9de:	2a24      	cmp	r2, #36	; 0x24
 800a9e0:	d028      	beq.n	800aa34 <_realloc_r+0x348>
 800a9e2:	f100 0310 	add.w	r3, r0, #16
 800a9e6:	f106 0210 	add.w	r2, r6, #16
 800a9ea:	e6c4      	b.n	800a776 <_realloc_r+0x8a>
 800a9ec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a9f0:	f023 0303 	bic.w	r3, r3, #3
 800a9f4:	441c      	add	r4, r3
 800a9f6:	e70a      	b.n	800a80e <_realloc_r+0x122>
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	4674      	mov	r4, lr
 800a9fe:	46d0      	mov	r8, sl
 800aa00:	f7ff fe10 	bl	800a624 <memmove>
 800aa04:	463e      	mov	r6, r7
 800aa06:	e702      	b.n	800a80e <_realloc_r+0x122>
 800aa08:	463a      	mov	r2, r7
 800aa0a:	e6f7      	b.n	800a7fc <_realloc_r+0x110>
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4638      	mov	r0, r7
 800aa10:	461c      	mov	r4, r3
 800aa12:	46d0      	mov	r8, sl
 800aa14:	f7ff fe06 	bl	800a624 <memmove>
 800aa18:	463e      	mov	r6, r7
 800aa1a:	e6f8      	b.n	800a80e <_realloc_r+0x122>
 800aa1c:	68b3      	ldr	r3, [r6, #8]
 800aa1e:	f8ca 3010 	str.w	r3, [sl, #16]
 800aa22:	68f3      	ldr	r3, [r6, #12]
 800aa24:	f8ca 3014 	str.w	r3, [sl, #20]
 800aa28:	2a24      	cmp	r2, #36	; 0x24
 800aa2a:	d01b      	beq.n	800aa64 <_realloc_r+0x378>
 800aa2c:	3610      	adds	r6, #16
 800aa2e:	f10a 0318 	add.w	r3, sl, #24
 800aa32:	e7ae      	b.n	800a992 <_realloc_r+0x2a6>
 800aa34:	6933      	ldr	r3, [r6, #16]
 800aa36:	6103      	str	r3, [r0, #16]
 800aa38:	6973      	ldr	r3, [r6, #20]
 800aa3a:	6143      	str	r3, [r0, #20]
 800aa3c:	f106 0218 	add.w	r2, r6, #24
 800aa40:	f100 0318 	add.w	r3, r0, #24
 800aa44:	e697      	b.n	800a776 <_realloc_r+0x8a>
 800aa46:	bf00      	nop
 800aa48:	200005bc 	.word	0x200005bc
 800aa4c:	68b1      	ldr	r1, [r6, #8]
 800aa4e:	f8ca 1010 	str.w	r1, [sl, #16]
 800aa52:	68f1      	ldr	r1, [r6, #12]
 800aa54:	f8ca 1014 	str.w	r1, [sl, #20]
 800aa58:	2a24      	cmp	r2, #36	; 0x24
 800aa5a:	d00f      	beq.n	800aa7c <_realloc_r+0x390>
 800aa5c:	3610      	adds	r6, #16
 800aa5e:	f10a 0218 	add.w	r2, sl, #24
 800aa62:	e6cb      	b.n	800a7fc <_realloc_r+0x110>
 800aa64:	6933      	ldr	r3, [r6, #16]
 800aa66:	f8ca 3018 	str.w	r3, [sl, #24]
 800aa6a:	6973      	ldr	r3, [r6, #20]
 800aa6c:	f8ca 301c 	str.w	r3, [sl, #28]
 800aa70:	3618      	adds	r6, #24
 800aa72:	f10a 0320 	add.w	r3, sl, #32
 800aa76:	e78c      	b.n	800a992 <_realloc_r+0x2a6>
 800aa78:	463a      	mov	r2, r7
 800aa7a:	e764      	b.n	800a946 <_realloc_r+0x25a>
 800aa7c:	6932      	ldr	r2, [r6, #16]
 800aa7e:	f8ca 2018 	str.w	r2, [sl, #24]
 800aa82:	6972      	ldr	r2, [r6, #20]
 800aa84:	f8ca 201c 	str.w	r2, [sl, #28]
 800aa88:	3618      	adds	r6, #24
 800aa8a:	f10a 0220 	add.w	r2, sl, #32
 800aa8e:	e6b5      	b.n	800a7fc <_realloc_r+0x110>
 800aa90:	4631      	mov	r1, r6
 800aa92:	4638      	mov	r0, r7
 800aa94:	9301      	str	r3, [sp, #4]
 800aa96:	f7ff fdc5 	bl	800a624 <memmove>
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	e759      	b.n	800a952 <_realloc_r+0x266>
 800aa9e:	68b1      	ldr	r1, [r6, #8]
 800aaa0:	f8ca 1010 	str.w	r1, [sl, #16]
 800aaa4:	68f1      	ldr	r1, [r6, #12]
 800aaa6:	f8ca 1014 	str.w	r1, [sl, #20]
 800aaaa:	2a24      	cmp	r2, #36	; 0x24
 800aaac:	d003      	beq.n	800aab6 <_realloc_r+0x3ca>
 800aaae:	3610      	adds	r6, #16
 800aab0:	f10a 0218 	add.w	r2, sl, #24
 800aab4:	e747      	b.n	800a946 <_realloc_r+0x25a>
 800aab6:	6932      	ldr	r2, [r6, #16]
 800aab8:	f8ca 2018 	str.w	r2, [sl, #24]
 800aabc:	6972      	ldr	r2, [r6, #20]
 800aabe:	f8ca 201c 	str.w	r2, [sl, #28]
 800aac2:	3618      	adds	r6, #24
 800aac4:	f10a 0220 	add.w	r2, sl, #32
 800aac8:	e73d      	b.n	800a946 <_realloc_r+0x25a>
 800aaca:	bf00      	nop

0800aacc <_raise_r>:
 800aacc:	291f      	cmp	r1, #31
 800aace:	b538      	push	{r3, r4, r5, lr}
 800aad0:	d822      	bhi.n	800ab18 <_raise_r+0x4c>
 800aad2:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800aad6:	4605      	mov	r5, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	b19a      	cbz	r2, 800ab04 <_raise_r+0x38>
 800aadc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aae0:	b183      	cbz	r3, 800ab04 <_raise_r+0x38>
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d00c      	beq.n	800ab00 <_raise_r+0x34>
 800aae6:	1c59      	adds	r1, r3, #1
 800aae8:	d006      	beq.n	800aaf8 <_raise_r+0x2c>
 800aaea:	2500      	movs	r5, #0
 800aaec:	4620      	mov	r0, r4
 800aaee:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800aaf2:	4798      	blx	r3
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	2316      	movs	r3, #22
 800aafa:	6003      	str	r3, [r0, #0]
 800aafc:	2001      	movs	r0, #1
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	2000      	movs	r0, #0
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	4628      	mov	r0, r5
 800ab06:	f000 f829 	bl	800ab5c <_getpid_r>
 800ab0a:	4622      	mov	r2, r4
 800ab0c:	4601      	mov	r1, r0
 800ab0e:	4628      	mov	r0, r5
 800ab10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab14:	f000 b80e 	b.w	800ab34 <_kill_r>
 800ab18:	2316      	movs	r3, #22
 800ab1a:	6003      	str	r3, [r0, #0]
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	bd38      	pop	{r3, r4, r5, pc}
 800ab22:	bf00      	nop

0800ab24 <raise>:
 800ab24:	4b02      	ldr	r3, [pc, #8]	; (800ab30 <raise+0xc>)
 800ab26:	4601      	mov	r1, r0
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f7ff bfcf 	b.w	800aacc <_raise_r>
 800ab2e:	bf00      	nop
 800ab30:	200005b8 	.word	0x200005b8

0800ab34 <_kill_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	460b      	mov	r3, r1
 800ab38:	4c07      	ldr	r4, [pc, #28]	; (800ab58 <_kill_r+0x24>)
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	2300      	movs	r3, #0
 800ab42:	6023      	str	r3, [r4, #0]
 800ab44:	f003 f8ac 	bl	800dca0 <_kill>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d000      	beq.n	800ab4e <_kill_r+0x1a>
 800ab4c:	bd38      	pop	{r3, r4, r5, pc}
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0fb      	beq.n	800ab4c <_kill_r+0x18>
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	20006df0 	.word	0x20006df0

0800ab5c <_getpid_r>:
 800ab5c:	f003 b890 	b.w	800dc80 <_getpid>

0800ab60 <__sread>:
 800ab60:	b510      	push	{r4, lr}
 800ab62:	460c      	mov	r4, r1
 800ab64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab68:	f002 ffb4 	bl	800dad4 <_read_r>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	db03      	blt.n	800ab78 <__sread+0x18>
 800ab70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab72:	4403      	add	r3, r0
 800ab74:	6523      	str	r3, [r4, #80]	; 0x50
 800ab76:	bd10      	pop	{r4, pc}
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab7e:	81a3      	strh	r3, [r4, #12]
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	bf00      	nop

0800ab84 <__swrite>:
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	4616      	mov	r6, r2
 800ab8a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab8e:	461f      	mov	r7, r3
 800ab90:	05d3      	lsls	r3, r2, #23
 800ab92:	460c      	mov	r4, r1
 800ab94:	4605      	mov	r5, r0
 800ab96:	d507      	bpl.n	800aba8 <__swrite+0x24>
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba0:	f002 fc72 	bl	800d488 <_lseek_r>
 800aba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800abb0:	81a2      	strh	r2, [r4, #12]
 800abb2:	463b      	mov	r3, r7
 800abb4:	4632      	mov	r2, r6
 800abb6:	4628      	mov	r0, r5
 800abb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abbc:	f001 bc1c 	b.w	800c3f8 <_write_r>

0800abc0 <__sseek>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	460c      	mov	r4, r1
 800abc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc8:	f002 fc5e 	bl	800d488 <_lseek_r>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	1c42      	adds	r2, r0, #1
 800abd0:	bf0e      	itee	eq
 800abd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abda:	6520      	strne	r0, [r4, #80]	; 0x50
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	bd10      	pop	{r4, pc}

0800abe0 <__sclose>:
 800abe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe4:	f001 bc1e 	b.w	800c424 <_close_r>

0800abe8 <_svfprintf_r>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	b0c5      	sub	sp, #276	; 0x114
 800abee:	460c      	mov	r4, r1
 800abf0:	9109      	str	r1, [sp, #36]	; 0x24
 800abf2:	4615      	mov	r5, r2
 800abf4:	930e      	str	r3, [sp, #56]	; 0x38
 800abf6:	900a      	str	r0, [sp, #40]	; 0x28
 800abf8:	f002 fc38 	bl	800d46c <_localeconv_r>
 800abfc:	6803      	ldr	r3, [r0, #0]
 800abfe:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f5 fbbd 	bl	8000380 <strlen>
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	9016      	str	r0, [sp, #88]	; 0x58
 800ac0a:	061e      	lsls	r6, r3, #24
 800ac0c:	d503      	bpl.n	800ac16 <_svfprintf_r+0x2e>
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f001 8133 	beq.w	800be7c <_svfprintf_r+0x1294>
 800ac16:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800aeb0 <_svfprintf_r+0x2c8>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800ac20:	9312      	str	r3, [sp, #72]	; 0x48
 800ac22:	9329      	str	r3, [sp, #164]	; 0xa4
 800ac24:	9328      	str	r3, [sp, #160]	; 0xa0
 800ac26:	9319      	str	r3, [sp, #100]	; 0x64
 800ac28:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac2a:	f8df a290 	ldr.w	sl, [pc, #656]	; 800aebc <_svfprintf_r+0x2d4>
 800ac2e:	ab34      	add	r3, sp, #208	; 0xd0
 800ac30:	9327      	str	r3, [sp, #156]	; 0x9c
 800ac32:	4699      	mov	r9, r3
 800ac34:	46a8      	mov	r8, r5
 800ac36:	f898 3000 	ldrb.w	r3, [r8]
 800ac3a:	4644      	mov	r4, r8
 800ac3c:	b1eb      	cbz	r3, 800ac7a <_svfprintf_r+0x92>
 800ac3e:	2b25      	cmp	r3, #37	; 0x25
 800ac40:	d102      	bne.n	800ac48 <_svfprintf_r+0x60>
 800ac42:	e01a      	b.n	800ac7a <_svfprintf_r+0x92>
 800ac44:	2b25      	cmp	r3, #37	; 0x25
 800ac46:	d003      	beq.n	800ac50 <_svfprintf_r+0x68>
 800ac48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1f9      	bne.n	800ac44 <_svfprintf_r+0x5c>
 800ac50:	ebc8 0504 	rsb	r5, r8, r4
 800ac54:	b18d      	cbz	r5, 800ac7a <_svfprintf_r+0x92>
 800ac56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ac58:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ac5a:	f8c9 8000 	str.w	r8, [r9]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	442a      	add	r2, r5
 800ac62:	2b07      	cmp	r3, #7
 800ac64:	f8c9 5004 	str.w	r5, [r9, #4]
 800ac68:	9229      	str	r2, [sp, #164]	; 0xa4
 800ac6a:	9328      	str	r3, [sp, #160]	; 0xa0
 800ac6c:	f300 80a6 	bgt.w	800adbc <_svfprintf_r+0x1d4>
 800ac70:	f109 0908 	add.w	r9, r9, #8
 800ac74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac76:	442b      	add	r3, r5
 800ac78:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac7a:	7823      	ldrb	r3, [r4, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 80a6 	beq.w	800adce <_svfprintf_r+0x1e6>
 800ac82:	2300      	movs	r3, #0
 800ac84:	461a      	mov	r2, r3
 800ac86:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	930c      	str	r3, [sp, #48]	; 0x30
 800ac8e:	9307      	str	r3, [sp, #28]
 800ac90:	f04f 3bff 	mov.w	fp, #4294967295
 800ac94:	7863      	ldrb	r3, [r4, #1]
 800ac96:	f104 0801 	add.w	r8, r4, #1
 800ac9a:	465d      	mov	r5, fp
 800ac9c:	f108 0801 	add.w	r8, r8, #1
 800aca0:	f1a3 0020 	sub.w	r0, r3, #32
 800aca4:	2858      	cmp	r0, #88	; 0x58
 800aca6:	f200 8434 	bhi.w	800b512 <_svfprintf_r+0x92a>
 800acaa:	e8df f010 	tbh	[pc, r0, lsl #1]
 800acae:	03a0      	.short	0x03a0
 800acb0:	04320432 	.word	0x04320432
 800acb4:	043203a8 	.word	0x043203a8
 800acb8:	04320432 	.word	0x04320432
 800acbc:	04320432 	.word	0x04320432
 800acc0:	03af0432 	.word	0x03af0432
 800acc4:	043203bd 	.word	0x043203bd
 800acc8:	00e2005d 	.word	0x00e2005d
 800accc:	01090432 	.word	0x01090432
 800acd0:	01100110 	.word	0x01100110
 800acd4:	01100110 	.word	0x01100110
 800acd8:	01100110 	.word	0x01100110
 800acdc:	01100110 	.word	0x01100110
 800ace0:	04320110 	.word	0x04320110
 800ace4:	04320432 	.word	0x04320432
 800ace8:	04320432 	.word	0x04320432
 800acec:	04320432 	.word	0x04320432
 800acf0:	04320432 	.word	0x04320432
 800acf4:	01200432 	.word	0x01200432
 800acf8:	04320286 	.word	0x04320286
 800acfc:	04320286 	.word	0x04320286
 800ad00:	04320432 	.word	0x04320432
 800ad04:	02d40432 	.word	0x02d40432
 800ad08:	04320432 	.word	0x04320432
 800ad0c:	043202e5 	.word	0x043202e5
 800ad10:	04320432 	.word	0x04320432
 800ad14:	04320432 	.word	0x04320432
 800ad18:	0432030f 	.word	0x0432030f
 800ad1c:	033d0432 	.word	0x033d0432
 800ad20:	04320432 	.word	0x04320432
 800ad24:	04320432 	.word	0x04320432
 800ad28:	04320432 	.word	0x04320432
 800ad2c:	04320432 	.word	0x04320432
 800ad30:	04320432 	.word	0x04320432
 800ad34:	0391037e 	.word	0x0391037e
 800ad38:	02860286 	.word	0x02860286
 800ad3c:	03990286 	.word	0x03990286
 800ad40:	04320391 	.word	0x04320391
 800ad44:	04070432 	.word	0x04070432
 800ad48:	04120432 	.word	0x04120432
 800ad4c:	006400a3 	.word	0x006400a3
 800ad50:	043203c2 	.word	0x043203c2
 800ad54:	043203c9 	.word	0x043203c9
 800ad58:	043203ea 	.word	0x043203ea
 800ad5c:	03f20432 	.word	0x03f20432
 800ad60:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad62:	930e      	str	r3, [sp, #56]	; 0x38
 800ad64:	4240      	negs	r0, r0
 800ad66:	900c      	str	r0, [sp, #48]	; 0x30
 800ad68:	9b07      	ldr	r3, [sp, #28]
 800ad6a:	f043 0304 	orr.w	r3, r3, #4
 800ad6e:	9307      	str	r3, [sp, #28]
 800ad70:	f898 3000 	ldrb.w	r3, [r8]
 800ad74:	e792      	b.n	800ac9c <_svfprintf_r+0xb4>
 800ad76:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ad78:	46ab      	mov	fp, r5
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	6804      	ldr	r4, [r0, #0]
 800ad7e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800ad82:	1d07      	adds	r7, r0, #4
 800ad84:	9807      	ldr	r0, [sp, #28]
 800ad86:	2330      	movs	r3, #48	; 0x30
 800ad88:	2278      	movs	r2, #120	; 0x78
 800ad8a:	458b      	cmp	fp, r1
 800ad8c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800ad90:	f04f 0500 	mov.w	r5, #0
 800ad94:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800ad98:	f040 0302 	orr.w	r3, r0, #2
 800ad9c:	f2c0 83d6 	blt.w	800b54c <_svfprintf_r+0x964>
 800ada0:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800ada4:	f043 0302 	orr.w	r3, r3, #2
 800ada8:	9307      	str	r3, [sp, #28]
 800adaa:	ea54 0305 	orrs.w	r3, r4, r5
 800adae:	970e      	str	r7, [sp, #56]	; 0x38
 800adb0:	f000 83a2 	beq.w	800b4f8 <_svfprintf_r+0x910>
 800adb4:	460f      	mov	r7, r1
 800adb6:	9211      	str	r2, [sp, #68]	; 0x44
 800adb8:	483f      	ldr	r0, [pc, #252]	; (800aeb8 <_svfprintf_r+0x2d0>)
 800adba:	e2e6      	b.n	800b38a <_svfprintf_r+0x7a2>
 800adbc:	aa27      	add	r2, sp, #156	; 0x9c
 800adbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adc2:	f002 fe9d 	bl	800db00 <__ssprint_r>
 800adc6:	b948      	cbnz	r0, 800addc <_svfprintf_r+0x1f4>
 800adc8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800adcc:	e752      	b.n	800ac74 <_svfprintf_r+0x8c>
 800adce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800add0:	b123      	cbz	r3, 800addc <_svfprintf_r+0x1f4>
 800add2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800add4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800add6:	aa27      	add	r2, sp, #156	; 0x9c
 800add8:	f002 fe92 	bl	800db00 <__ssprint_r>
 800addc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adde:	899b      	ldrh	r3, [r3, #12]
 800ade0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ade4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade6:	bf18      	it	ne
 800ade8:	f04f 33ff 	movne.w	r3, #4294967295
 800adec:	4618      	mov	r0, r3
 800adee:	b045      	add	sp, #276	; 0x114
 800adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf4:	9311      	str	r3, [sp, #68]	; 0x44
 800adf6:	46ab      	mov	fp, r5
 800adf8:	2a00      	cmp	r2, #0
 800adfa:	f041 823b 	bne.w	800c274 <_svfprintf_r+0x168c>
 800adfe:	9a07      	ldr	r2, [sp, #28]
 800ae00:	f012 0320 	ands.w	r3, r2, #32
 800ae04:	f000 8246 	beq.w	800b294 <_svfprintf_r+0x6ac>
 800ae08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ae0a:	3707      	adds	r7, #7
 800ae0c:	f027 0307 	bic.w	r3, r7, #7
 800ae10:	2700      	movs	r7, #0
 800ae12:	f103 0108 	add.w	r1, r3, #8
 800ae16:	45bb      	cmp	fp, r7
 800ae18:	910e      	str	r1, [sp, #56]	; 0x38
 800ae1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ae1e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800ae22:	f2c0 8764 	blt.w	800bcee <_svfprintf_r+0x1106>
 800ae26:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800ae2a:	9307      	str	r3, [sp, #28]
 800ae2c:	ea54 0305 	orrs.w	r3, r4, r5
 800ae30:	f000 8384 	beq.w	800b53c <_svfprintf_r+0x954>
 800ae34:	ae34      	add	r6, sp, #208	; 0xd0
 800ae36:	08e2      	lsrs	r2, r4, #3
 800ae38:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800ae3c:	08e9      	lsrs	r1, r5, #3
 800ae3e:	f004 0307 	and.w	r3, r4, #7
 800ae42:	460d      	mov	r5, r1
 800ae44:	4614      	mov	r4, r2
 800ae46:	3330      	adds	r3, #48	; 0x30
 800ae48:	ea54 0205 	orrs.w	r2, r4, r5
 800ae4c:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800ae50:	d1f1      	bne.n	800ae36 <_svfprintf_r+0x24e>
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	07d1      	lsls	r1, r2, #31
 800ae56:	f140 808f 	bpl.w	800af78 <_svfprintf_r+0x390>
 800ae5a:	2b30      	cmp	r3, #48	; 0x30
 800ae5c:	f000 808c 	beq.w	800af78 <_svfprintf_r+0x390>
 800ae60:	2230      	movs	r2, #48	; 0x30
 800ae62:	1e73      	subs	r3, r6, #1
 800ae64:	f806 2c01 	strb.w	r2, [r6, #-1]
 800ae68:	aa34      	add	r2, sp, #208	; 0xd0
 800ae6a:	1ad2      	subs	r2, r2, r3
 800ae6c:	920d      	str	r2, [sp, #52]	; 0x34
 800ae6e:	461e      	mov	r6, r3
 800ae70:	e085      	b.n	800af7e <_svfprintf_r+0x396>
 800ae72:	f898 3000 	ldrb.w	r3, [r8]
 800ae76:	2b2a      	cmp	r3, #42	; 0x2a
 800ae78:	f108 0401 	add.w	r4, r8, #1
 800ae7c:	f001 81ec 	beq.w	800c258 <_svfprintf_r+0x1670>
 800ae80:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ae84:	2809      	cmp	r0, #9
 800ae86:	bf98      	it	ls
 800ae88:	2500      	movls	r5, #0
 800ae8a:	f201 818e 	bhi.w	800c1aa <_svfprintf_r+0x15c2>
 800ae8e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae92:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ae96:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ae9a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ae9e:	2809      	cmp	r0, #9
 800aea0:	d9f5      	bls.n	800ae8e <_svfprintf_r+0x2a6>
 800aea2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800aea6:	46a0      	mov	r8, r4
 800aea8:	e6fa      	b.n	800aca0 <_svfprintf_r+0xb8>
 800aeaa:	bf00      	nop
 800aeac:	f3af 8000 	nop.w
	...
 800aeb8:	0800ee0c 	.word	0x0800ee0c
 800aebc:	0800ee38 	.word	0x0800ee38
 800aec0:	9b07      	ldr	r3, [sp, #28]
 800aec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec6:	9307      	str	r3, [sp, #28]
 800aec8:	f898 3000 	ldrb.w	r3, [r8]
 800aecc:	e6e6      	b.n	800ac9c <_svfprintf_r+0xb4>
 800aece:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800aed2:	2300      	movs	r3, #0
 800aed4:	461c      	mov	r4, r3
 800aed6:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aeda:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800aede:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800aee2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800aee6:	2809      	cmp	r0, #9
 800aee8:	d9f5      	bls.n	800aed6 <_svfprintf_r+0x2ee>
 800aeea:	940c      	str	r4, [sp, #48]	; 0x30
 800aeec:	e6d8      	b.n	800aca0 <_svfprintf_r+0xb8>
 800aeee:	9311      	str	r3, [sp, #68]	; 0x44
 800aef0:	46ab      	mov	fp, r5
 800aef2:	2a00      	cmp	r2, #0
 800aef4:	f041 81cc 	bne.w	800c290 <_svfprintf_r+0x16a8>
 800aef8:	9b07      	ldr	r3, [sp, #28]
 800aefa:	f043 0310 	orr.w	r3, r3, #16
 800aefe:	9307      	str	r3, [sp, #28]
 800af00:	9b07      	ldr	r3, [sp, #28]
 800af02:	069c      	lsls	r4, r3, #26
 800af04:	f140 8537 	bpl.w	800b976 <_svfprintf_r+0xd8e>
 800af08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800af0a:	3707      	adds	r7, #7
 800af0c:	f027 0707 	bic.w	r7, r7, #7
 800af10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af14:	f107 0108 	add.w	r1, r7, #8
 800af18:	910e      	str	r1, [sp, #56]	; 0x38
 800af1a:	4614      	mov	r4, r2
 800af1c:	461d      	mov	r5, r3
 800af1e:	2a00      	cmp	r2, #0
 800af20:	f173 0300 	sbcs.w	r3, r3, #0
 800af24:	f2c0 8562 	blt.w	800b9ec <_svfprintf_r+0xe04>
 800af28:	f1bb 0f00 	cmp.w	fp, #0
 800af2c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800af30:	f2c0 853f 	blt.w	800b9b2 <_svfprintf_r+0xdca>
 800af34:	9b07      	ldr	r3, [sp, #28]
 800af36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af3a:	9307      	str	r3, [sp, #28]
 800af3c:	ea54 0305 	orrs.w	r3, r4, r5
 800af40:	f000 81e8 	beq.w	800b314 <_svfprintf_r+0x72c>
 800af44:	2d00      	cmp	r5, #0
 800af46:	bf08      	it	eq
 800af48:	2c0a      	cmpeq	r4, #10
 800af4a:	f0c0 81e8 	bcc.w	800b31e <_svfprintf_r+0x736>
 800af4e:	ae34      	add	r6, sp, #208	; 0xd0
 800af50:	4620      	mov	r0, r4
 800af52:	4629      	mov	r1, r5
 800af54:	220a      	movs	r2, #10
 800af56:	2300      	movs	r3, #0
 800af58:	f7f5 ff62 	bl	8000e20 <__aeabi_uldivmod>
 800af5c:	3230      	adds	r2, #48	; 0x30
 800af5e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	2300      	movs	r3, #0
 800af68:	220a      	movs	r2, #10
 800af6a:	f7f5 ff59 	bl	8000e20 <__aeabi_uldivmod>
 800af6e:	4604      	mov	r4, r0
 800af70:	460d      	mov	r5, r1
 800af72:	ea54 0305 	orrs.w	r3, r4, r5
 800af76:	d1eb      	bne.n	800af50 <_svfprintf_r+0x368>
 800af78:	ab34      	add	r3, sp, #208	; 0xd0
 800af7a:	1b9b      	subs	r3, r3, r6
 800af7c:	930d      	str	r3, [sp, #52]	; 0x34
 800af7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af80:	455b      	cmp	r3, fp
 800af82:	bfb8      	it	lt
 800af84:	465b      	movlt	r3, fp
 800af86:	9308      	str	r3, [sp, #32]
 800af88:	2300      	movs	r3, #0
 800af8a:	9313      	str	r3, [sp, #76]	; 0x4c
 800af8c:	b117      	cbz	r7, 800af94 <_svfprintf_r+0x3ac>
 800af8e:	9b08      	ldr	r3, [sp, #32]
 800af90:	3301      	adds	r3, #1
 800af92:	9308      	str	r3, [sp, #32]
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	f013 0302 	ands.w	r3, r3, #2
 800af9a:	930f      	str	r3, [sp, #60]	; 0x3c
 800af9c:	d002      	beq.n	800afa4 <_svfprintf_r+0x3bc>
 800af9e:	9b08      	ldr	r3, [sp, #32]
 800afa0:	3302      	adds	r3, #2
 800afa2:	9308      	str	r3, [sp, #32]
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800afaa:	9310      	str	r3, [sp, #64]	; 0x40
 800afac:	f040 82db 	bne.w	800b566 <_svfprintf_r+0x97e>
 800afb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afb2:	9a08      	ldr	r2, [sp, #32]
 800afb4:	1a9d      	subs	r5, r3, r2
 800afb6:	2d00      	cmp	r5, #0
 800afb8:	f340 82d5 	ble.w	800b566 <_svfprintf_r+0x97e>
 800afbc:	2d10      	cmp	r5, #16
 800afbe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800afc0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800afc2:	4fa8      	ldr	r7, [pc, #672]	; (800b264 <_svfprintf_r+0x67c>)
 800afc4:	dd27      	ble.n	800b016 <_svfprintf_r+0x42e>
 800afc6:	9618      	str	r6, [sp, #96]	; 0x60
 800afc8:	4648      	mov	r0, r9
 800afca:	2410      	movs	r4, #16
 800afcc:	46b9      	mov	r9, r7
 800afce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800afd0:	462f      	mov	r7, r5
 800afd2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800afd4:	e004      	b.n	800afe0 <_svfprintf_r+0x3f8>
 800afd6:	3f10      	subs	r7, #16
 800afd8:	2f10      	cmp	r7, #16
 800afda:	f100 0008 	add.w	r0, r0, #8
 800afde:	dd16      	ble.n	800b00e <_svfprintf_r+0x426>
 800afe0:	3201      	adds	r2, #1
 800afe2:	4ba0      	ldr	r3, [pc, #640]	; (800b264 <_svfprintf_r+0x67c>)
 800afe4:	9228      	str	r2, [sp, #160]	; 0xa0
 800afe6:	3110      	adds	r1, #16
 800afe8:	2a07      	cmp	r2, #7
 800afea:	9129      	str	r1, [sp, #164]	; 0xa4
 800afec:	e880 0018 	stmia.w	r0, {r3, r4}
 800aff0:	ddf1      	ble.n	800afd6 <_svfprintf_r+0x3ee>
 800aff2:	aa27      	add	r2, sp, #156	; 0x9c
 800aff4:	4631      	mov	r1, r6
 800aff6:	4628      	mov	r0, r5
 800aff8:	f002 fd82 	bl	800db00 <__ssprint_r>
 800affc:	2800      	cmp	r0, #0
 800affe:	f47f aeed 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b002:	3f10      	subs	r7, #16
 800b004:	2f10      	cmp	r7, #16
 800b006:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800b008:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800b00a:	a834      	add	r0, sp, #208	; 0xd0
 800b00c:	dce8      	bgt.n	800afe0 <_svfprintf_r+0x3f8>
 800b00e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b010:	463d      	mov	r5, r7
 800b012:	464f      	mov	r7, r9
 800b014:	4681      	mov	r9, r0
 800b016:	3201      	adds	r2, #1
 800b018:	186c      	adds	r4, r5, r1
 800b01a:	2a07      	cmp	r2, #7
 800b01c:	9429      	str	r4, [sp, #164]	; 0xa4
 800b01e:	9228      	str	r2, [sp, #160]	; 0xa0
 800b020:	f8c9 7000 	str.w	r7, [r9]
 800b024:	f8c9 5004 	str.w	r5, [r9, #4]
 800b028:	f300 842d 	bgt.w	800b886 <_svfprintf_r+0xc9e>
 800b02c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800b030:	f109 0908 	add.w	r9, r9, #8
 800b034:	b177      	cbz	r7, 800b054 <_svfprintf_r+0x46c>
 800b036:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b038:	3301      	adds	r3, #1
 800b03a:	3401      	adds	r4, #1
 800b03c:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 800b040:	2201      	movs	r2, #1
 800b042:	2b07      	cmp	r3, #7
 800b044:	9429      	str	r4, [sp, #164]	; 0xa4
 800b046:	9328      	str	r3, [sp, #160]	; 0xa0
 800b048:	e889 0006 	stmia.w	r9, {r1, r2}
 800b04c:	f300 83a5 	bgt.w	800b79a <_svfprintf_r+0xbb2>
 800b050:	f109 0908 	add.w	r9, r9, #8
 800b054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b056:	b16b      	cbz	r3, 800b074 <_svfprintf_r+0x48c>
 800b058:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b05a:	3301      	adds	r3, #1
 800b05c:	3402      	adds	r4, #2
 800b05e:	a920      	add	r1, sp, #128	; 0x80
 800b060:	2202      	movs	r2, #2
 800b062:	2b07      	cmp	r3, #7
 800b064:	9429      	str	r4, [sp, #164]	; 0xa4
 800b066:	9328      	str	r3, [sp, #160]	; 0xa0
 800b068:	e889 0006 	stmia.w	r9, {r1, r2}
 800b06c:	f300 83a1 	bgt.w	800b7b2 <_svfprintf_r+0xbca>
 800b070:	f109 0908 	add.w	r9, r9, #8
 800b074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b076:	2b80      	cmp	r3, #128	; 0x80
 800b078:	f000 82e1 	beq.w	800b63e <_svfprintf_r+0xa56>
 800b07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b07e:	ebc3 070b 	rsb	r7, r3, fp
 800b082:	2f00      	cmp	r7, #0
 800b084:	dd33      	ble.n	800b0ee <_svfprintf_r+0x506>
 800b086:	4a78      	ldr	r2, [pc, #480]	; (800b268 <_svfprintf_r+0x680>)
 800b088:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b08a:	920f      	str	r2, [sp, #60]	; 0x3c
 800b08c:	2f10      	cmp	r7, #16
 800b08e:	dd22      	ble.n	800b0d6 <_svfprintf_r+0x4ee>
 800b090:	4622      	mov	r2, r4
 800b092:	f04f 0b10 	mov.w	fp, #16
 800b096:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b098:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b09a:	e004      	b.n	800b0a6 <_svfprintf_r+0x4be>
 800b09c:	3f10      	subs	r7, #16
 800b09e:	2f10      	cmp	r7, #16
 800b0a0:	f109 0908 	add.w	r9, r9, #8
 800b0a4:	dd16      	ble.n	800b0d4 <_svfprintf_r+0x4ec>
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	3210      	adds	r2, #16
 800b0aa:	2b07      	cmp	r3, #7
 800b0ac:	9229      	str	r2, [sp, #164]	; 0xa4
 800b0ae:	9328      	str	r3, [sp, #160]	; 0xa0
 800b0b0:	e889 0c00 	stmia.w	r9, {sl, fp}
 800b0b4:	ddf2      	ble.n	800b09c <_svfprintf_r+0x4b4>
 800b0b6:	aa27      	add	r2, sp, #156	; 0x9c
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f002 fd20 	bl	800db00 <__ssprint_r>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	f47f ae8b 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b0c6:	3f10      	subs	r7, #16
 800b0c8:	2f10      	cmp	r7, #16
 800b0ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800b0cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b0ce:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b0d2:	dce8      	bgt.n	800b0a6 <_svfprintf_r+0x4be>
 800b0d4:	4614      	mov	r4, r2
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0da:	9328      	str	r3, [sp, #160]	; 0xa0
 800b0dc:	443c      	add	r4, r7
 800b0de:	2b07      	cmp	r3, #7
 800b0e0:	9429      	str	r4, [sp, #164]	; 0xa4
 800b0e2:	e889 0084 	stmia.w	r9, {r2, r7}
 800b0e6:	f300 834c 	bgt.w	800b782 <_svfprintf_r+0xb9a>
 800b0ea:	f109 0908 	add.w	r9, r9, #8
 800b0ee:	9b07      	ldr	r3, [sp, #28]
 800b0f0:	05da      	lsls	r2, r3, #23
 800b0f2:	f100 823a 	bmi.w	800b56a <_svfprintf_r+0x982>
 800b0f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b0f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b0fa:	f8c9 6000 	str.w	r6, [r9]
 800b0fe:	3301      	adds	r3, #1
 800b100:	440c      	add	r4, r1
 800b102:	2b07      	cmp	r3, #7
 800b104:	9429      	str	r4, [sp, #164]	; 0xa4
 800b106:	f8c9 1004 	str.w	r1, [r9, #4]
 800b10a:	9328      	str	r3, [sp, #160]	; 0xa0
 800b10c:	f300 8323 	bgt.w	800b756 <_svfprintf_r+0xb6e>
 800b110:	f109 0908 	add.w	r9, r9, #8
 800b114:	9b07      	ldr	r3, [sp, #28]
 800b116:	0759      	lsls	r1, r3, #29
 800b118:	d53f      	bpl.n	800b19a <_svfprintf_r+0x5b2>
 800b11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b11c:	9a08      	ldr	r2, [sp, #32]
 800b11e:	1a9d      	subs	r5, r3, r2
 800b120:	2d00      	cmp	r5, #0
 800b122:	dd3a      	ble.n	800b19a <_svfprintf_r+0x5b2>
 800b124:	2d10      	cmp	r5, #16
 800b126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b128:	4f4e      	ldr	r7, [pc, #312]	; (800b264 <_svfprintf_r+0x67c>)
 800b12a:	dd23      	ble.n	800b174 <_svfprintf_r+0x58c>
 800b12c:	4622      	mov	r2, r4
 800b12e:	2610      	movs	r6, #16
 800b130:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b134:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b136:	e004      	b.n	800b142 <_svfprintf_r+0x55a>
 800b138:	3d10      	subs	r5, #16
 800b13a:	2d10      	cmp	r5, #16
 800b13c:	f109 0908 	add.w	r9, r9, #8
 800b140:	dd17      	ble.n	800b172 <_svfprintf_r+0x58a>
 800b142:	3301      	adds	r3, #1
 800b144:	4947      	ldr	r1, [pc, #284]	; (800b264 <_svfprintf_r+0x67c>)
 800b146:	9328      	str	r3, [sp, #160]	; 0xa0
 800b148:	3210      	adds	r2, #16
 800b14a:	2b07      	cmp	r3, #7
 800b14c:	9229      	str	r2, [sp, #164]	; 0xa4
 800b14e:	e889 0042 	stmia.w	r9, {r1, r6}
 800b152:	ddf1      	ble.n	800b138 <_svfprintf_r+0x550>
 800b154:	aa27      	add	r2, sp, #156	; 0x9c
 800b156:	4621      	mov	r1, r4
 800b158:	4658      	mov	r0, fp
 800b15a:	f002 fcd1 	bl	800db00 <__ssprint_r>
 800b15e:	2800      	cmp	r0, #0
 800b160:	f47f ae3c 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b164:	3d10      	subs	r5, #16
 800b166:	2d10      	cmp	r5, #16
 800b168:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800b16a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b16c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b170:	dce7      	bgt.n	800b142 <_svfprintf_r+0x55a>
 800b172:	4614      	mov	r4, r2
 800b174:	3301      	adds	r3, #1
 800b176:	442c      	add	r4, r5
 800b178:	2b07      	cmp	r3, #7
 800b17a:	9429      	str	r4, [sp, #164]	; 0xa4
 800b17c:	9328      	str	r3, [sp, #160]	; 0xa0
 800b17e:	f8c9 7000 	str.w	r7, [r9]
 800b182:	f8c9 5004 	str.w	r5, [r9, #4]
 800b186:	dd08      	ble.n	800b19a <_svfprintf_r+0x5b2>
 800b188:	aa27      	add	r2, sp, #156	; 0x9c
 800b18a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b18c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b18e:	f002 fcb7 	bl	800db00 <__ssprint_r>
 800b192:	2800      	cmp	r0, #0
 800b194:	f47f ae22 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b198:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b19c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b19e:	9908      	ldr	r1, [sp, #32]
 800b1a0:	428a      	cmp	r2, r1
 800b1a2:	bfac      	ite	ge
 800b1a4:	189b      	addge	r3, r3, r2
 800b1a6:	185b      	addlt	r3, r3, r1
 800b1a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1aa:	2c00      	cmp	r4, #0
 800b1ac:	f040 82df 	bne.w	800b76e <_svfprintf_r+0xb86>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9328      	str	r3, [sp, #160]	; 0xa0
 800b1b4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b1b8:	e53d      	b.n	800ac36 <_svfprintf_r+0x4e>
 800b1ba:	9311      	str	r3, [sp, #68]	; 0x44
 800b1bc:	46ab      	mov	fp, r5
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	f041 806a 	bne.w	800c298 <_svfprintf_r+0x16b0>
 800b1c4:	9b07      	ldr	r3, [sp, #28]
 800b1c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b1c8:	071a      	lsls	r2, r3, #28
 800b1ca:	f107 0707 	add.w	r7, r7, #7
 800b1ce:	f140 8576 	bpl.w	800bcbe <_svfprintf_r+0x10d6>
 800b1d2:	f027 0307 	bic.w	r3, r7, #7
 800b1d6:	ed93 7b00 	vldr	d7, [r3]
 800b1da:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800b1de:	f103 0208 	add.w	r2, r3, #8
 800b1e2:	920e      	str	r2, [sp, #56]	; 0x38
 800b1e4:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800b1e8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b1ec:	911a      	str	r1, [sp, #104]	; 0x68
 800b1ee:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1f0:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 800b1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	4b1b      	ldr	r3, [pc, #108]	; (800b26c <_svfprintf_r+0x684>)
 800b1fe:	f7f5 fdd1 	bl	8000da4 <__aeabi_dcmpun>
 800b202:	2800      	cmp	r0, #0
 800b204:	f040 84da 	bne.w	800bbbc <_svfprintf_r+0xfd4>
 800b208:	f04f 32ff 	mov.w	r2, #4294967295
 800b20c:	4b17      	ldr	r3, [pc, #92]	; (800b26c <_svfprintf_r+0x684>)
 800b20e:	4620      	mov	r0, r4
 800b210:	4629      	mov	r1, r5
 800b212:	f7f5 fda9 	bl	8000d68 <__aeabi_dcmple>
 800b216:	2800      	cmp	r0, #0
 800b218:	f040 84d0 	bne.w	800bbbc <_svfprintf_r+0xfd4>
 800b21c:	2200      	movs	r2, #0
 800b21e:	2300      	movs	r3, #0
 800b220:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800b224:	f7f5 fd96 	bl	8000d54 <__aeabi_dcmplt>
 800b228:	2800      	cmp	r0, #0
 800b22a:	f040 875a 	bne.w	800c0e2 <_svfprintf_r+0x14fa>
 800b22e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800b232:	4e0f      	ldr	r6, [pc, #60]	; (800b270 <_svfprintf_r+0x688>)
 800b234:	4b0f      	ldr	r3, [pc, #60]	; (800b274 <_svfprintf_r+0x68c>)
 800b236:	9907      	ldr	r1, [sp, #28]
 800b238:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b23c:	9107      	str	r1, [sp, #28]
 800b23e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b240:	2203      	movs	r2, #3
 800b242:	f04f 0b00 	mov.w	fp, #0
 800b246:	9208      	str	r2, [sp, #32]
 800b248:	2947      	cmp	r1, #71	; 0x47
 800b24a:	bfd8      	it	le
 800b24c:	461e      	movle	r6, r3
 800b24e:	920d      	str	r2, [sp, #52]	; 0x34
 800b250:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800b254:	e69a      	b.n	800af8c <_svfprintf_r+0x3a4>
 800b256:	9b07      	ldr	r3, [sp, #28]
 800b258:	f043 0308 	orr.w	r3, r3, #8
 800b25c:	9307      	str	r3, [sp, #28]
 800b25e:	f898 3000 	ldrb.w	r3, [r8]
 800b262:	e51b      	b.n	800ac9c <_svfprintf_r+0xb4>
 800b264:	0800ee5c 	.word	0x0800ee5c
 800b268:	0800ee38 	.word	0x0800ee38
 800b26c:	7fefffff 	.word	0x7fefffff
 800b270:	0800ee4c 	.word	0x0800ee4c
 800b274:	0800ee48 	.word	0x0800ee48
 800b278:	9311      	str	r3, [sp, #68]	; 0x44
 800b27a:	46ab      	mov	fp, r5
 800b27c:	2a00      	cmp	r2, #0
 800b27e:	f041 8017 	bne.w	800c2b0 <_svfprintf_r+0x16c8>
 800b282:	9b07      	ldr	r3, [sp, #28]
 800b284:	f043 0310 	orr.w	r3, r3, #16
 800b288:	9307      	str	r3, [sp, #28]
 800b28a:	9a07      	ldr	r2, [sp, #28]
 800b28c:	f012 0320 	ands.w	r3, r2, #32
 800b290:	f47f adba 	bne.w	800ae08 <_svfprintf_r+0x220>
 800b294:	9907      	ldr	r1, [sp, #28]
 800b296:	f011 0210 	ands.w	r2, r1, #16
 800b29a:	f000 845b 	beq.w	800bb54 <_svfprintf_r+0xf6c>
 800b29e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b2a0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800b2a4:	f1bb 0f00 	cmp.w	fp, #0
 800b2a8:	6804      	ldr	r4, [r0, #0]
 800b2aa:	f100 0704 	add.w	r7, r0, #4
 800b2ae:	f04f 0500 	mov.w	r5, #0
 800b2b2:	f2c0 851b 	blt.w	800bcec <_svfprintf_r+0x1104>
 800b2b6:	460a      	mov	r2, r1
 800b2b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2bc:	9207      	str	r2, [sp, #28]
 800b2be:	ea54 0205 	orrs.w	r2, r4, r5
 800b2c2:	970e      	str	r7, [sp, #56]	; 0x38
 800b2c4:	f000 813a 	beq.w	800b53c <_svfprintf_r+0x954>
 800b2c8:	461f      	mov	r7, r3
 800b2ca:	e5b3      	b.n	800ae34 <_svfprintf_r+0x24c>
 800b2cc:	9311      	str	r3, [sp, #68]	; 0x44
 800b2ce:	46ab      	mov	fp, r5
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	f040 87e9 	bne.w	800c2a8 <_svfprintf_r+0x16c0>
 800b2d6:	9b07      	ldr	r3, [sp, #28]
 800b2d8:	f043 0310 	orr.w	r3, r3, #16
 800b2dc:	9307      	str	r3, [sp, #28]
 800b2de:	9a07      	ldr	r2, [sp, #28]
 800b2e0:	f012 0320 	ands.w	r3, r2, #32
 800b2e4:	f000 832c 	beq.w	800b940 <_svfprintf_r+0xd58>
 800b2e8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b2ea:	3707      	adds	r7, #7
 800b2ec:	f027 0307 	bic.w	r3, r7, #7
 800b2f0:	2700      	movs	r7, #0
 800b2f2:	f103 0108 	add.w	r1, r3, #8
 800b2f6:	45bb      	cmp	fp, r7
 800b2f8:	910e      	str	r1, [sp, #56]	; 0x38
 800b2fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b2fe:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800b302:	f2c0 8356 	blt.w	800b9b2 <_svfprintf_r+0xdca>
 800b306:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800b30a:	9307      	str	r3, [sp, #28]
 800b30c:	ea54 0305 	orrs.w	r3, r4, r5
 800b310:	f47f ae18 	bne.w	800af44 <_svfprintf_r+0x35c>
 800b314:	f1bb 0f00 	cmp.w	fp, #0
 800b318:	f000 80f5 	beq.w	800b506 <_svfprintf_r+0x91e>
 800b31c:	2400      	movs	r4, #0
 800b31e:	ae44      	add	r6, sp, #272	; 0x110
 800b320:	3430      	adds	r4, #48	; 0x30
 800b322:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800b326:	e627      	b.n	800af78 <_svfprintf_r+0x390>
 800b328:	9311      	str	r3, [sp, #68]	; 0x44
 800b32a:	46ab      	mov	fp, r5
 800b32c:	2a00      	cmp	r2, #0
 800b32e:	f040 87b7 	bne.w	800c2a0 <_svfprintf_r+0x16b8>
 800b332:	9b07      	ldr	r3, [sp, #28]
 800b334:	48af      	ldr	r0, [pc, #700]	; (800b5f4 <_svfprintf_r+0xa0c>)
 800b336:	069d      	lsls	r5, r3, #26
 800b338:	f140 80b5 	bpl.w	800b4a6 <_svfprintf_r+0x8be>
 800b33c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b33e:	3707      	adds	r7, #7
 800b340:	f027 0307 	bic.w	r3, r7, #7
 800b344:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b348:	f103 0208 	add.w	r2, r3, #8
 800b34c:	920e      	str	r2, [sp, #56]	; 0x38
 800b34e:	9a07      	ldr	r2, [sp, #28]
 800b350:	f012 0701 	ands.w	r7, r2, #1
 800b354:	f000 8239 	beq.w	800b7ca <_svfprintf_r+0xbe2>
 800b358:	ea54 0305 	orrs.w	r3, r4, r5
 800b35c:	f000 8504 	beq.w	800bd68 <_svfprintf_r+0x1180>
 800b360:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800b364:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800b368:	2700      	movs	r7, #0
 800b36a:	9a07      	ldr	r2, [sp, #28]
 800b36c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800b370:	2330      	movs	r3, #48	; 0x30
 800b372:	45bb      	cmp	fp, r7
 800b374:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800b378:	f042 0302 	orr.w	r3, r2, #2
 800b37c:	f2c0 86b6 	blt.w	800c0ec <_svfprintf_r+0x1504>
 800b380:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800b384:	f043 0302 	orr.w	r3, r3, #2
 800b388:	9307      	str	r3, [sp, #28]
 800b38a:	ae34      	add	r6, sp, #208	; 0xd0
 800b38c:	0923      	lsrs	r3, r4, #4
 800b38e:	f004 010f 	and.w	r1, r4, #15
 800b392:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800b396:	092a      	lsrs	r2, r5, #4
 800b398:	461c      	mov	r4, r3
 800b39a:	4615      	mov	r5, r2
 800b39c:	5c43      	ldrb	r3, [r0, r1]
 800b39e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800b3a2:	ea54 0305 	orrs.w	r3, r4, r5
 800b3a6:	d1f1      	bne.n	800b38c <_svfprintf_r+0x7a4>
 800b3a8:	e5e6      	b.n	800af78 <_svfprintf_r+0x390>
 800b3aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b3ac:	9311      	str	r3, [sp, #68]	; 0x44
 800b3ae:	680a      	ldr	r2, [r1, #0]
 800b3b0:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	460a      	mov	r2, r1
 800b3b8:	461f      	mov	r7, r3
 800b3ba:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800b3be:	3204      	adds	r2, #4
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	9308      	str	r3, [sp, #32]
 800b3c4:	46bb      	mov	fp, r7
 800b3c6:	9713      	str	r7, [sp, #76]	; 0x4c
 800b3c8:	920e      	str	r2, [sp, #56]	; 0x38
 800b3ca:	930d      	str	r3, [sp, #52]	; 0x34
 800b3cc:	ae2a      	add	r6, sp, #168	; 0xa8
 800b3ce:	e5e1      	b.n	800af94 <_svfprintf_r+0x3ac>
 800b3d0:	9311      	str	r3, [sp, #68]	; 0x44
 800b3d2:	46ab      	mov	fp, r5
 800b3d4:	2a00      	cmp	r2, #0
 800b3d6:	f43f ad93 	beq.w	800af00 <_svfprintf_r+0x318>
 800b3da:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800b3de:	e58f      	b.n	800af00 <_svfprintf_r+0x318>
 800b3e0:	9b07      	ldr	r3, [sp, #28]
 800b3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e6:	9307      	str	r3, [sp, #28]
 800b3e8:	f898 3000 	ldrb.w	r3, [r8]
 800b3ec:	e456      	b.n	800ac9c <_svfprintf_r+0xb4>
 800b3ee:	f898 3000 	ldrb.w	r3, [r8]
 800b3f2:	2900      	cmp	r1, #0
 800b3f4:	f47f ac52 	bne.w	800ac9c <_svfprintf_r+0xb4>
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	2120      	movs	r1, #32
 800b3fc:	e44e      	b.n	800ac9c <_svfprintf_r+0xb4>
 800b3fe:	9b07      	ldr	r3, [sp, #28]
 800b400:	f043 0301 	orr.w	r3, r3, #1
 800b404:	9307      	str	r3, [sp, #28]
 800b406:	f898 3000 	ldrb.w	r3, [r8]
 800b40a:	e447      	b.n	800ac9c <_svfprintf_r+0xb4>
 800b40c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	930c      	str	r3, [sp, #48]	; 0x30
 800b412:	4618      	mov	r0, r3
 800b414:	2800      	cmp	r0, #0
 800b416:	4623      	mov	r3, r4
 800b418:	f103 0304 	add.w	r3, r3, #4
 800b41c:	f6ff aca0 	blt.w	800ad60 <_svfprintf_r+0x178>
 800b420:	930e      	str	r3, [sp, #56]	; 0x38
 800b422:	f898 3000 	ldrb.w	r3, [r8]
 800b426:	e439      	b.n	800ac9c <_svfprintf_r+0xb4>
 800b428:	f898 3000 	ldrb.w	r3, [r8]
 800b42c:	2201      	movs	r2, #1
 800b42e:	212b      	movs	r1, #43	; 0x2b
 800b430:	e434      	b.n	800ac9c <_svfprintf_r+0xb4>
 800b432:	9b07      	ldr	r3, [sp, #28]
 800b434:	f043 0320 	orr.w	r3, r3, #32
 800b438:	9307      	str	r3, [sp, #28]
 800b43a:	f898 3000 	ldrb.w	r3, [r8]
 800b43e:	e42d      	b.n	800ac9c <_svfprintf_r+0xb4>
 800b440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b442:	9311      	str	r3, [sp, #68]	; 0x44
 800b444:	6816      	ldr	r6, [r2, #0]
 800b446:	2400      	movs	r4, #0
 800b448:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 800b44c:	1d17      	adds	r7, r2, #4
 800b44e:	2e00      	cmp	r6, #0
 800b450:	f000 8621 	beq.w	800c096 <_svfprintf_r+0x14ae>
 800b454:	2d00      	cmp	r5, #0
 800b456:	f2c0 8566 	blt.w	800bf26 <_svfprintf_r+0x133e>
 800b45a:	462a      	mov	r2, r5
 800b45c:	4621      	mov	r1, r4
 800b45e:	4630      	mov	r0, r6
 800b460:	f7f4 fffe 	bl	8000460 <memchr>
 800b464:	2800      	cmp	r0, #0
 800b466:	f000 866b 	beq.w	800c140 <_svfprintf_r+0x1558>
 800b46a:	1b83      	subs	r3, r0, r6
 800b46c:	930d      	str	r3, [sp, #52]	; 0x34
 800b46e:	46a3      	mov	fp, r4
 800b470:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b474:	970e      	str	r7, [sp, #56]	; 0x38
 800b476:	9308      	str	r3, [sp, #32]
 800b478:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800b47c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800b480:	e584      	b.n	800af8c <_svfprintf_r+0x3a4>
 800b482:	9311      	str	r3, [sp, #68]	; 0x44
 800b484:	46ab      	mov	fp, r5
 800b486:	2a00      	cmp	r2, #0
 800b488:	f43f af29 	beq.w	800b2de <_svfprintf_r+0x6f6>
 800b48c:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800b490:	e725      	b.n	800b2de <_svfprintf_r+0x6f6>
 800b492:	9311      	str	r3, [sp, #68]	; 0x44
 800b494:	46ab      	mov	fp, r5
 800b496:	2a00      	cmp	r2, #0
 800b498:	f040 8716 	bne.w	800c2c8 <_svfprintf_r+0x16e0>
 800b49c:	9b07      	ldr	r3, [sp, #28]
 800b49e:	4856      	ldr	r0, [pc, #344]	; (800b5f8 <_svfprintf_r+0xa10>)
 800b4a0:	069d      	lsls	r5, r3, #26
 800b4a2:	f53f af4b 	bmi.w	800b33c <_svfprintf_r+0x754>
 800b4a6:	9b07      	ldr	r3, [sp, #28]
 800b4a8:	06dc      	lsls	r4, r3, #27
 800b4aa:	f140 8440 	bpl.w	800bd2e <_svfprintf_r+0x1146>
 800b4ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	6814      	ldr	r4, [r2, #0]
 800b4b6:	930e      	str	r3, [sp, #56]	; 0x38
 800b4b8:	2500      	movs	r5, #0
 800b4ba:	e748      	b.n	800b34e <_svfprintf_r+0x766>
 800b4bc:	f898 3000 	ldrb.w	r3, [r8]
 800b4c0:	2b6c      	cmp	r3, #108	; 0x6c
 800b4c2:	f000 84c4 	beq.w	800be4e <_svfprintf_r+0x1266>
 800b4c6:	9807      	ldr	r0, [sp, #28]
 800b4c8:	f040 0010 	orr.w	r0, r0, #16
 800b4cc:	9007      	str	r0, [sp, #28]
 800b4ce:	f7ff bbe5 	b.w	800ac9c <_svfprintf_r+0xb4>
 800b4d2:	2a00      	cmp	r2, #0
 800b4d4:	f040 86f4 	bne.w	800c2c0 <_svfprintf_r+0x16d8>
 800b4d8:	9b07      	ldr	r3, [sp, #28]
 800b4da:	069b      	lsls	r3, r3, #26
 800b4dc:	f140 8357 	bpl.w	800bb8e <_svfprintf_r+0xfa6>
 800b4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4e4:	6813      	ldr	r3, [r2, #0]
 800b4e6:	17cd      	asrs	r5, r1, #31
 800b4e8:	4608      	mov	r0, r1
 800b4ea:	3204      	adds	r2, #4
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	920e      	str	r2, [sp, #56]	; 0x38
 800b4f0:	e9c3 0100 	strd	r0, r1, [r3]
 800b4f4:	f7ff bb9f 	b.w	800ac36 <_svfprintf_r+0x4e>
 800b4f8:	483f      	ldr	r0, [pc, #252]	; (800b5f8 <_svfprintf_r+0xa10>)
 800b4fa:	9211      	str	r2, [sp, #68]	; 0x44
 800b4fc:	f1bb 0f00 	cmp.w	fp, #0
 800b500:	f040 8174 	bne.w	800b7ec <_svfprintf_r+0xc04>
 800b504:	465f      	mov	r7, fp
 800b506:	f04f 0b00 	mov.w	fp, #0
 800b50a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800b50e:	ae34      	add	r6, sp, #208	; 0xd0
 800b510:	e535      	b.n	800af7e <_svfprintf_r+0x396>
 800b512:	9311      	str	r3, [sp, #68]	; 0x44
 800b514:	2a00      	cmp	r2, #0
 800b516:	f040 86cf 	bne.w	800c2b8 <_svfprintf_r+0x16d0>
 800b51a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b51c:	2a00      	cmp	r2, #0
 800b51e:	f43f ac56 	beq.w	800adce <_svfprintf_r+0x1e6>
 800b522:	2300      	movs	r3, #0
 800b524:	2101      	movs	r1, #1
 800b526:	461f      	mov	r7, r3
 800b528:	9108      	str	r1, [sp, #32]
 800b52a:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800b52e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800b532:	469b      	mov	fp, r3
 800b534:	9313      	str	r3, [sp, #76]	; 0x4c
 800b536:	910d      	str	r1, [sp, #52]	; 0x34
 800b538:	ae2a      	add	r6, sp, #168	; 0xa8
 800b53a:	e52b      	b.n	800af94 <_svfprintf_r+0x3ac>
 800b53c:	f1bb 0f00 	cmp.w	fp, #0
 800b540:	f000 8616 	beq.w	800c170 <_svfprintf_r+0x1588>
 800b544:	2700      	movs	r7, #0
 800b546:	2400      	movs	r4, #0
 800b548:	2500      	movs	r5, #0
 800b54a:	e473      	b.n	800ae34 <_svfprintf_r+0x24c>
 800b54c:	482a      	ldr	r0, [pc, #168]	; (800b5f8 <_svfprintf_r+0xa10>)
 800b54e:	9307      	str	r3, [sp, #28]
 800b550:	9211      	str	r2, [sp, #68]	; 0x44
 800b552:	ea54 0305 	orrs.w	r3, r4, r5
 800b556:	970e      	str	r7, [sp, #56]	; 0x38
 800b558:	f04f 0700 	mov.w	r7, #0
 800b55c:	f47f af15 	bne.w	800b38a <_svfprintf_r+0x7a2>
 800b560:	2400      	movs	r4, #0
 800b562:	2500      	movs	r5, #0
 800b564:	e711      	b.n	800b38a <_svfprintf_r+0x7a2>
 800b566:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b568:	e564      	b.n	800b034 <_svfprintf_r+0x44c>
 800b56a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b56c:	2b65      	cmp	r3, #101	; 0x65
 800b56e:	f340 80aa 	ble.w	800b6c6 <_svfprintf_r+0xade>
 800b572:	2200      	movs	r2, #0
 800b574:	2300      	movs	r3, #0
 800b576:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800b57a:	f7f5 fbe1 	bl	8000d40 <__aeabi_dcmpeq>
 800b57e:	2800      	cmp	r0, #0
 800b580:	f000 8136 	beq.w	800b7f0 <_svfprintf_r+0xc08>
 800b584:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b586:	4a1d      	ldr	r2, [pc, #116]	; (800b5fc <_svfprintf_r+0xa14>)
 800b588:	f8c9 2000 	str.w	r2, [r9]
 800b58c:	3301      	adds	r3, #1
 800b58e:	3401      	adds	r4, #1
 800b590:	2201      	movs	r2, #1
 800b592:	2b07      	cmp	r3, #7
 800b594:	9429      	str	r4, [sp, #164]	; 0xa4
 800b596:	9328      	str	r3, [sp, #160]	; 0xa0
 800b598:	f8c9 2004 	str.w	r2, [r9, #4]
 800b59c:	f300 83f0 	bgt.w	800bd80 <_svfprintf_r+0x1198>
 800b5a0:	f109 0908 	add.w	r9, r9, #8
 800b5a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	db03      	blt.n	800b5b4 <_svfprintf_r+0x9cc>
 800b5ac:	9b07      	ldr	r3, [sp, #28]
 800b5ae:	07db      	lsls	r3, r3, #31
 800b5b0:	f57f adb0 	bpl.w	800b114 <_svfprintf_r+0x52c>
 800b5b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b5b6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b5ba:	f8c9 2000 	str.w	r2, [r9]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	440c      	add	r4, r1
 800b5c2:	2b07      	cmp	r3, #7
 800b5c4:	9429      	str	r4, [sp, #164]	; 0xa4
 800b5c6:	f8c9 1004 	str.w	r1, [r9, #4]
 800b5ca:	9328      	str	r3, [sp, #160]	; 0xa0
 800b5cc:	f300 8449 	bgt.w	800be62 <_svfprintf_r+0x127a>
 800b5d0:	f109 0908 	add.w	r9, r9, #8
 800b5d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5d6:	1e5d      	subs	r5, r3, #1
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	f77f ad9b 	ble.w	800b114 <_svfprintf_r+0x52c>
 800b5de:	4a08      	ldr	r2, [pc, #32]	; (800b600 <_svfprintf_r+0xa18>)
 800b5e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b5e2:	920f      	str	r2, [sp, #60]	; 0x3c
 800b5e4:	2d10      	cmp	r5, #16
 800b5e6:	f340 81e9 	ble.w	800b9bc <_svfprintf_r+0xdd4>
 800b5ea:	2610      	movs	r6, #16
 800b5ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b5ee:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800b5f2:	e00d      	b.n	800b610 <_svfprintf_r+0xa28>
 800b5f4:	0800edf8 	.word	0x0800edf8
 800b5f8:	0800ee0c 	.word	0x0800ee0c
 800b5fc:	0800ee58 	.word	0x0800ee58
 800b600:	0800ee38 	.word	0x0800ee38
 800b604:	f109 0908 	add.w	r9, r9, #8
 800b608:	3d10      	subs	r5, #16
 800b60a:	2d10      	cmp	r5, #16
 800b60c:	f340 81d6 	ble.w	800b9bc <_svfprintf_r+0xdd4>
 800b610:	3301      	adds	r3, #1
 800b612:	3410      	adds	r4, #16
 800b614:	2b07      	cmp	r3, #7
 800b616:	9429      	str	r4, [sp, #164]	; 0xa4
 800b618:	9328      	str	r3, [sp, #160]	; 0xa0
 800b61a:	f8c9 a000 	str.w	sl, [r9]
 800b61e:	f8c9 6004 	str.w	r6, [r9, #4]
 800b622:	ddef      	ble.n	800b604 <_svfprintf_r+0xa1c>
 800b624:	aa27      	add	r2, sp, #156	; 0x9c
 800b626:	4659      	mov	r1, fp
 800b628:	4638      	mov	r0, r7
 800b62a:	f002 fa69 	bl	800db00 <__ssprint_r>
 800b62e:	2800      	cmp	r0, #0
 800b630:	f47f abd4 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b634:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b636:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b638:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b63c:	e7e4      	b.n	800b608 <_svfprintf_r+0xa20>
 800b63e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b640:	9a08      	ldr	r2, [sp, #32]
 800b642:	1a9f      	subs	r7, r3, r2
 800b644:	2f00      	cmp	r7, #0
 800b646:	f77f ad19 	ble.w	800b07c <_svfprintf_r+0x494>
 800b64a:	4abc      	ldr	r2, [pc, #752]	; (800b93c <_svfprintf_r+0xd54>)
 800b64c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b64e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b650:	2f10      	cmp	r7, #16
 800b652:	dd2b      	ble.n	800b6ac <_svfprintf_r+0xac4>
 800b654:	464a      	mov	r2, r9
 800b656:	4621      	mov	r1, r4
 800b658:	46b9      	mov	r9, r7
 800b65a:	2510      	movs	r5, #16
 800b65c:	4637      	mov	r7, r6
 800b65e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b660:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b662:	e006      	b.n	800b672 <_svfprintf_r+0xa8a>
 800b664:	f1a9 0910 	sub.w	r9, r9, #16
 800b668:	f1b9 0f10 	cmp.w	r9, #16
 800b66c:	f102 0208 	add.w	r2, r2, #8
 800b670:	dd18      	ble.n	800b6a4 <_svfprintf_r+0xabc>
 800b672:	3301      	adds	r3, #1
 800b674:	3110      	adds	r1, #16
 800b676:	2b07      	cmp	r3, #7
 800b678:	9129      	str	r1, [sp, #164]	; 0xa4
 800b67a:	9328      	str	r3, [sp, #160]	; 0xa0
 800b67c:	f8c2 a000 	str.w	sl, [r2]
 800b680:	6055      	str	r5, [r2, #4]
 800b682:	ddef      	ble.n	800b664 <_svfprintf_r+0xa7c>
 800b684:	aa27      	add	r2, sp, #156	; 0x9c
 800b686:	4631      	mov	r1, r6
 800b688:	4620      	mov	r0, r4
 800b68a:	f002 fa39 	bl	800db00 <__ssprint_r>
 800b68e:	2800      	cmp	r0, #0
 800b690:	f47f aba4 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b694:	f1a9 0910 	sub.w	r9, r9, #16
 800b698:	f1b9 0f10 	cmp.w	r9, #16
 800b69c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800b69e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b6a0:	aa34      	add	r2, sp, #208	; 0xd0
 800b6a2:	dce6      	bgt.n	800b672 <_svfprintf_r+0xa8a>
 800b6a4:	463e      	mov	r6, r7
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	464f      	mov	r7, r9
 800b6aa:	4691      	mov	r9, r2
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6b0:	9328      	str	r3, [sp, #160]	; 0xa0
 800b6b2:	443c      	add	r4, r7
 800b6b4:	2b07      	cmp	r3, #7
 800b6b6:	9429      	str	r4, [sp, #164]	; 0xa4
 800b6b8:	e889 0084 	stmia.w	r9, {r2, r7}
 800b6bc:	f300 823d 	bgt.w	800bb3a <_svfprintf_r+0xf52>
 800b6c0:	f109 0908 	add.w	r9, r9, #8
 800b6c4:	e4da      	b.n	800b07c <_svfprintf_r+0x494>
 800b6c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6c8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	f340 820a 	ble.w	800bae4 <_svfprintf_r+0xefc>
 800b6d0:	3501      	adds	r5, #1
 800b6d2:	3401      	adds	r4, #1
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	2d07      	cmp	r5, #7
 800b6d8:	9429      	str	r4, [sp, #164]	; 0xa4
 800b6da:	9528      	str	r5, [sp, #160]	; 0xa0
 800b6dc:	f8c9 6000 	str.w	r6, [r9]
 800b6e0:	f8c9 3004 	str.w	r3, [r9, #4]
 800b6e4:	f300 820f 	bgt.w	800bb06 <_svfprintf_r+0xf1e>
 800b6e8:	f109 0908 	add.w	r9, r9, #8
 800b6ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6f0:	f8c9 3000 	str.w	r3, [r9]
 800b6f4:	3501      	adds	r5, #1
 800b6f6:	4414      	add	r4, r2
 800b6f8:	2d07      	cmp	r5, #7
 800b6fa:	9429      	str	r4, [sp, #164]	; 0xa4
 800b6fc:	9528      	str	r5, [sp, #160]	; 0xa0
 800b6fe:	f8c9 2004 	str.w	r2, [r9, #4]
 800b702:	f300 820d 	bgt.w	800bb20 <_svfprintf_r+0xf38>
 800b706:	f109 0908 	add.w	r9, r9, #8
 800b70a:	2300      	movs	r3, #0
 800b70c:	2200      	movs	r2, #0
 800b70e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800b712:	f7f5 fb15 	bl	8000d40 <__aeabi_dcmpeq>
 800b716:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b718:	2800      	cmp	r0, #0
 800b71a:	f040 80c3 	bne.w	800b8a4 <_svfprintf_r+0xcbc>
 800b71e:	3b01      	subs	r3, #1
 800b720:	3501      	adds	r5, #1
 800b722:	3601      	adds	r6, #1
 800b724:	441c      	add	r4, r3
 800b726:	2d07      	cmp	r5, #7
 800b728:	9528      	str	r5, [sp, #160]	; 0xa0
 800b72a:	9429      	str	r4, [sp, #164]	; 0xa4
 800b72c:	f8c9 6000 	str.w	r6, [r9]
 800b730:	f8c9 3004 	str.w	r3, [r9, #4]
 800b734:	f300 80f5 	bgt.w	800b922 <_svfprintf_r+0xd3a>
 800b738:	f109 0908 	add.w	r9, r9, #8
 800b73c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b73e:	f8c9 2004 	str.w	r2, [r9, #4]
 800b742:	3501      	adds	r5, #1
 800b744:	4414      	add	r4, r2
 800b746:	ab23      	add	r3, sp, #140	; 0x8c
 800b748:	2d07      	cmp	r5, #7
 800b74a:	9429      	str	r4, [sp, #164]	; 0xa4
 800b74c:	9528      	str	r5, [sp, #160]	; 0xa0
 800b74e:	f8c9 3000 	str.w	r3, [r9]
 800b752:	f77f acdd 	ble.w	800b110 <_svfprintf_r+0x528>
 800b756:	aa27      	add	r2, sp, #156	; 0x9c
 800b758:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b75a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b75c:	f002 f9d0 	bl	800db00 <__ssprint_r>
 800b760:	2800      	cmp	r0, #0
 800b762:	f47f ab3b 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b766:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b768:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b76c:	e4d2      	b.n	800b114 <_svfprintf_r+0x52c>
 800b76e:	aa27      	add	r2, sp, #156	; 0x9c
 800b770:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b772:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b774:	f002 f9c4 	bl	800db00 <__ssprint_r>
 800b778:	2800      	cmp	r0, #0
 800b77a:	f43f ad19 	beq.w	800b1b0 <_svfprintf_r+0x5c8>
 800b77e:	f7ff bb2d 	b.w	800addc <_svfprintf_r+0x1f4>
 800b782:	aa27      	add	r2, sp, #156	; 0x9c
 800b784:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b786:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b788:	f002 f9ba 	bl	800db00 <__ssprint_r>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	f47f ab25 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b792:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b794:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b798:	e4a9      	b.n	800b0ee <_svfprintf_r+0x506>
 800b79a:	aa27      	add	r2, sp, #156	; 0x9c
 800b79c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b79e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b7a0:	f002 f9ae 	bl	800db00 <__ssprint_r>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	f47f ab19 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b7aa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b7ac:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b7b0:	e450      	b.n	800b054 <_svfprintf_r+0x46c>
 800b7b2:	aa27      	add	r2, sp, #156	; 0x9c
 800b7b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b7b8:	f002 f9a2 	bl	800db00 <__ssprint_r>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	f47f ab0d 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b7c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b7c4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b7c8:	e454      	b.n	800b074 <_svfprintf_r+0x48c>
 800b7ca:	f1bb 0f00 	cmp.w	fp, #0
 800b7ce:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800b7d2:	f2c0 82e1 	blt.w	800bd98 <_svfprintf_r+0x11b0>
 800b7d6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800b7da:	9307      	str	r3, [sp, #28]
 800b7dc:	ea54 0305 	orrs.w	r3, r4, r5
 800b7e0:	f47f add3 	bne.w	800b38a <_svfprintf_r+0x7a2>
 800b7e4:	f1bb 0f00 	cmp.w	fp, #0
 800b7e8:	f43f ae8c 	beq.w	800b504 <_svfprintf_r+0x91c>
 800b7ec:	2700      	movs	r7, #0
 800b7ee:	e6b7      	b.n	800b560 <_svfprintf_r+0x978>
 800b7f0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800b7f2:	2d00      	cmp	r5, #0
 800b7f4:	f340 82d3 	ble.w	800bd9e <_svfprintf_r+0x11b6>
 800b7f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	bfa8      	it	ge
 800b800:	4613      	movge	r3, r2
 800b802:	2b00      	cmp	r3, #0
 800b804:	461d      	mov	r5, r3
 800b806:	dd0d      	ble.n	800b824 <_svfprintf_r+0xc3c>
 800b808:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b80a:	f8c9 6000 	str.w	r6, [r9]
 800b80e:	3301      	adds	r3, #1
 800b810:	442c      	add	r4, r5
 800b812:	2b07      	cmp	r3, #7
 800b814:	9429      	str	r4, [sp, #164]	; 0xa4
 800b816:	f8c9 5004 	str.w	r5, [r9, #4]
 800b81a:	9328      	str	r3, [sp, #160]	; 0xa0
 800b81c:	f300 83ae 	bgt.w	800bf7c <_svfprintf_r+0x1394>
 800b820:	f109 0908 	add.w	r9, r9, #8
 800b824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b826:	2d00      	cmp	r5, #0
 800b828:	bfa8      	it	ge
 800b82a:	1b5b      	subge	r3, r3, r5
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	461d      	mov	r5, r3
 800b830:	f340 80f8 	ble.w	800ba24 <_svfprintf_r+0xe3c>
 800b834:	4a41      	ldr	r2, [pc, #260]	; (800b93c <_svfprintf_r+0xd54>)
 800b836:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b838:	920f      	str	r2, [sp, #60]	; 0x3c
 800b83a:	2d10      	cmp	r5, #16
 800b83c:	f340 8285 	ble.w	800bd4a <_svfprintf_r+0x1162>
 800b840:	4622      	mov	r2, r4
 800b842:	2710      	movs	r7, #16
 800b844:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b848:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b84a:	e005      	b.n	800b858 <_svfprintf_r+0xc70>
 800b84c:	f109 0908 	add.w	r9, r9, #8
 800b850:	3d10      	subs	r5, #16
 800b852:	2d10      	cmp	r5, #16
 800b854:	f340 8278 	ble.w	800bd48 <_svfprintf_r+0x1160>
 800b858:	3301      	adds	r3, #1
 800b85a:	3210      	adds	r2, #16
 800b85c:	2b07      	cmp	r3, #7
 800b85e:	9229      	str	r2, [sp, #164]	; 0xa4
 800b860:	9328      	str	r3, [sp, #160]	; 0xa0
 800b862:	f8c9 a000 	str.w	sl, [r9]
 800b866:	f8c9 7004 	str.w	r7, [r9, #4]
 800b86a:	ddef      	ble.n	800b84c <_svfprintf_r+0xc64>
 800b86c:	aa27      	add	r2, sp, #156	; 0x9c
 800b86e:	4621      	mov	r1, r4
 800b870:	4658      	mov	r0, fp
 800b872:	f002 f945 	bl	800db00 <__ssprint_r>
 800b876:	2800      	cmp	r0, #0
 800b878:	f47f aab0 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b87c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800b87e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b880:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b884:	e7e4      	b.n	800b850 <_svfprintf_r+0xc68>
 800b886:	aa27      	add	r2, sp, #156	; 0x9c
 800b888:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b88a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b88c:	f002 f938 	bl	800db00 <__ssprint_r>
 800b890:	2800      	cmp	r0, #0
 800b892:	f47f aaa3 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b896:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800b89a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b89c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b8a0:	f7ff bbc8 	b.w	800b034 <_svfprintf_r+0x44c>
 800b8a4:	1e5e      	subs	r6, r3, #1
 800b8a6:	2e00      	cmp	r6, #0
 800b8a8:	f77f af48 	ble.w	800b73c <_svfprintf_r+0xb54>
 800b8ac:	4b23      	ldr	r3, [pc, #140]	; (800b93c <_svfprintf_r+0xd54>)
 800b8ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8b0:	2e10      	cmp	r6, #16
 800b8b2:	dd2c      	ble.n	800b90e <_svfprintf_r+0xd26>
 800b8b4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800b8b8:	2710      	movs	r7, #16
 800b8ba:	46b0      	mov	r8, r6
 800b8bc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b8c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b8c2:	e006      	b.n	800b8d2 <_svfprintf_r+0xcea>
 800b8c4:	f1a8 0810 	sub.w	r8, r8, #16
 800b8c8:	f1b8 0f10 	cmp.w	r8, #16
 800b8cc:	f109 0908 	add.w	r9, r9, #8
 800b8d0:	dd1a      	ble.n	800b908 <_svfprintf_r+0xd20>
 800b8d2:	3501      	adds	r5, #1
 800b8d4:	3410      	adds	r4, #16
 800b8d6:	2d07      	cmp	r5, #7
 800b8d8:	9429      	str	r4, [sp, #164]	; 0xa4
 800b8da:	9528      	str	r5, [sp, #160]	; 0xa0
 800b8dc:	f8c9 a000 	str.w	sl, [r9]
 800b8e0:	f8c9 7004 	str.w	r7, [r9, #4]
 800b8e4:	ddee      	ble.n	800b8c4 <_svfprintf_r+0xcdc>
 800b8e6:	aa27      	add	r2, sp, #156	; 0x9c
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4658      	mov	r0, fp
 800b8ec:	f002 f908 	bl	800db00 <__ssprint_r>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	f47f aa73 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b8f6:	f1a8 0810 	sub.w	r8, r8, #16
 800b8fa:	f1b8 0f10 	cmp.w	r8, #16
 800b8fe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b900:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800b902:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b906:	dce4      	bgt.n	800b8d2 <_svfprintf_r+0xcea>
 800b908:	4646      	mov	r6, r8
 800b90a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800b90e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b910:	3501      	adds	r5, #1
 800b912:	4434      	add	r4, r6
 800b914:	2d07      	cmp	r5, #7
 800b916:	9429      	str	r4, [sp, #164]	; 0xa4
 800b918:	9528      	str	r5, [sp, #160]	; 0xa0
 800b91a:	e889 0048 	stmia.w	r9, {r3, r6}
 800b91e:	f77f af0b 	ble.w	800b738 <_svfprintf_r+0xb50>
 800b922:	aa27      	add	r2, sp, #156	; 0x9c
 800b924:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b926:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b928:	f002 f8ea 	bl	800db00 <__ssprint_r>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	f47f aa55 	bne.w	800addc <_svfprintf_r+0x1f4>
 800b932:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800b934:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800b936:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800b93a:	e6ff      	b.n	800b73c <_svfprintf_r+0xb54>
 800b93c:	0800ee38 	.word	0x0800ee38
 800b940:	9907      	ldr	r1, [sp, #28]
 800b942:	f011 0210 	ands.w	r2, r1, #16
 800b946:	f000 81d5 	beq.w	800bcf4 <_svfprintf_r+0x110c>
 800b94a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b94c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800b950:	f1bb 0f00 	cmp.w	fp, #0
 800b954:	6804      	ldr	r4, [r0, #0]
 800b956:	f100 0704 	add.w	r7, r0, #4
 800b95a:	f04f 0500 	mov.w	r5, #0
 800b95e:	db26      	blt.n	800b9ae <_svfprintf_r+0xdc6>
 800b960:	460a      	mov	r2, r1
 800b962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b966:	9207      	str	r2, [sp, #28]
 800b968:	ea54 0205 	orrs.w	r2, r4, r5
 800b96c:	970e      	str	r7, [sp, #56]	; 0x38
 800b96e:	461f      	mov	r7, r3
 800b970:	f47f aae8 	bne.w	800af44 <_svfprintf_r+0x35c>
 800b974:	e4ce      	b.n	800b314 <_svfprintf_r+0x72c>
 800b976:	9b07      	ldr	r3, [sp, #28]
 800b978:	06d8      	lsls	r0, r3, #27
 800b97a:	d42a      	bmi.n	800b9d2 <_svfprintf_r+0xdea>
 800b97c:	9b07      	ldr	r3, [sp, #28]
 800b97e:	0659      	lsls	r1, r3, #25
 800b980:	d527      	bpl.n	800b9d2 <_svfprintf_r+0xdea>
 800b982:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b984:	f9b1 4000 	ldrsh.w	r4, [r1]
 800b988:	3104      	adds	r1, #4
 800b98a:	17e5      	asrs	r5, r4, #31
 800b98c:	4622      	mov	r2, r4
 800b98e:	462b      	mov	r3, r5
 800b990:	910e      	str	r1, [sp, #56]	; 0x38
 800b992:	f7ff bac4 	b.w	800af1e <_svfprintf_r+0x336>
 800b996:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b998:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800b99c:	f1bb 0f00 	cmp.w	fp, #0
 800b9a0:	680c      	ldr	r4, [r1, #0]
 800b9a2:	f101 0704 	add.w	r7, r1, #4
 800b9a6:	f04f 0500 	mov.w	r5, #0
 800b9aa:	f280 824e 	bge.w	800be4a <_svfprintf_r+0x1262>
 800b9ae:	970e      	str	r7, [sp, #56]	; 0x38
 800b9b0:	461f      	mov	r7, r3
 800b9b2:	ea54 0305 	orrs.w	r3, r4, r5
 800b9b6:	f47f aac5 	bne.w	800af44 <_svfprintf_r+0x35c>
 800b9ba:	e4b0      	b.n	800b31e <_svfprintf_r+0x736>
 800b9bc:	3301      	adds	r3, #1
 800b9be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9c0:	9328      	str	r3, [sp, #160]	; 0xa0
 800b9c2:	442c      	add	r4, r5
 800b9c4:	2b07      	cmp	r3, #7
 800b9c6:	9429      	str	r4, [sp, #164]	; 0xa4
 800b9c8:	e889 0024 	stmia.w	r9, {r2, r5}
 800b9cc:	f77f aba0 	ble.w	800b110 <_svfprintf_r+0x528>
 800b9d0:	e6c1      	b.n	800b756 <_svfprintf_r+0xb6e>
 800b9d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9d4:	6814      	ldr	r4, [r2, #0]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	3304      	adds	r3, #4
 800b9da:	17e5      	asrs	r5, r4, #31
 800b9dc:	4622      	mov	r2, r4
 800b9de:	930e      	str	r3, [sp, #56]	; 0x38
 800b9e0:	2a00      	cmp	r2, #0
 800b9e2:	462b      	mov	r3, r5
 800b9e4:	f173 0300 	sbcs.w	r3, r3, #0
 800b9e8:	f6bf aa9e 	bge.w	800af28 <_svfprintf_r+0x340>
 800b9ec:	4264      	negs	r4, r4
 800b9ee:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800b9f2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b9f6:	f1bb 0f00 	cmp.w	fp, #0
 800b9fa:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800b9fe:	f6ff aaa1 	blt.w	800af44 <_svfprintf_r+0x35c>
 800ba02:	9b07      	ldr	r3, [sp, #28]
 800ba04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba08:	9307      	str	r3, [sp, #28]
 800ba0a:	f7ff ba9b 	b.w	800af44 <_svfprintf_r+0x35c>
 800ba0e:	aa27      	add	r2, sp, #156	; 0x9c
 800ba10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba14:	f002 f874 	bl	800db00 <__ssprint_r>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	f47f a9df 	bne.w	800addc <_svfprintf_r+0x1f4>
 800ba1e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800ba20:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800ba24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba28:	4432      	add	r2, r6
 800ba2a:	4617      	mov	r7, r2
 800ba2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	db47      	blt.n	800bac2 <_svfprintf_r+0xeda>
 800ba32:	9a07      	ldr	r2, [sp, #28]
 800ba34:	07d5      	lsls	r5, r2, #31
 800ba36:	d444      	bmi.n	800bac2 <_svfprintf_r+0xeda>
 800ba38:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ba3a:	440e      	add	r6, r1
 800ba3c:	1bf5      	subs	r5, r6, r7
 800ba3e:	1acb      	subs	r3, r1, r3
 800ba40:	429d      	cmp	r5, r3
 800ba42:	bfa8      	it	ge
 800ba44:	461d      	movge	r5, r3
 800ba46:	2d00      	cmp	r5, #0
 800ba48:	462e      	mov	r6, r5
 800ba4a:	dd0d      	ble.n	800ba68 <_svfprintf_r+0xe80>
 800ba4c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800ba4e:	f8c9 7000 	str.w	r7, [r9]
 800ba52:	3201      	adds	r2, #1
 800ba54:	442c      	add	r4, r5
 800ba56:	2a07      	cmp	r2, #7
 800ba58:	9429      	str	r4, [sp, #164]	; 0xa4
 800ba5a:	f8c9 5004 	str.w	r5, [r9, #4]
 800ba5e:	9228      	str	r2, [sp, #160]	; 0xa0
 800ba60:	f300 830a 	bgt.w	800c078 <_svfprintf_r+0x1490>
 800ba64:	f109 0908 	add.w	r9, r9, #8
 800ba68:	2e00      	cmp	r6, #0
 800ba6a:	bfac      	ite	ge
 800ba6c:	1b9d      	subge	r5, r3, r6
 800ba6e:	461d      	movlt	r5, r3
 800ba70:	2d00      	cmp	r5, #0
 800ba72:	f77f ab4f 	ble.w	800b114 <_svfprintf_r+0x52c>
 800ba76:	4abb      	ldr	r2, [pc, #748]	; (800bd64 <_svfprintf_r+0x117c>)
 800ba78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ba7a:	920f      	str	r2, [sp, #60]	; 0x3c
 800ba7c:	2d10      	cmp	r5, #16
 800ba7e:	dd9d      	ble.n	800b9bc <_svfprintf_r+0xdd4>
 800ba80:	2610      	movs	r6, #16
 800ba82:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ba84:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800ba88:	e004      	b.n	800ba94 <_svfprintf_r+0xeac>
 800ba8a:	f109 0908 	add.w	r9, r9, #8
 800ba8e:	3d10      	subs	r5, #16
 800ba90:	2d10      	cmp	r5, #16
 800ba92:	dd93      	ble.n	800b9bc <_svfprintf_r+0xdd4>
 800ba94:	3301      	adds	r3, #1
 800ba96:	3410      	adds	r4, #16
 800ba98:	2b07      	cmp	r3, #7
 800ba9a:	9429      	str	r4, [sp, #164]	; 0xa4
 800ba9c:	9328      	str	r3, [sp, #160]	; 0xa0
 800ba9e:	f8c9 a000 	str.w	sl, [r9]
 800baa2:	f8c9 6004 	str.w	r6, [r9, #4]
 800baa6:	ddf0      	ble.n	800ba8a <_svfprintf_r+0xea2>
 800baa8:	aa27      	add	r2, sp, #156	; 0x9c
 800baaa:	4659      	mov	r1, fp
 800baac:	4638      	mov	r0, r7
 800baae:	f002 f827 	bl	800db00 <__ssprint_r>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f47f a992 	bne.w	800addc <_svfprintf_r+0x1f4>
 800bab8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800baba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800babc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800bac0:	e7e5      	b.n	800ba8e <_svfprintf_r+0xea6>
 800bac2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800bac4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bac6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bac8:	f8c9 1000 	str.w	r1, [r9]
 800bacc:	3201      	adds	r2, #1
 800bace:	4404      	add	r4, r0
 800bad0:	2a07      	cmp	r2, #7
 800bad2:	9429      	str	r4, [sp, #164]	; 0xa4
 800bad4:	f8c9 0004 	str.w	r0, [r9, #4]
 800bad8:	9228      	str	r2, [sp, #160]	; 0xa0
 800bada:	f300 82b9 	bgt.w	800c050 <_svfprintf_r+0x1468>
 800bade:	f109 0908 	add.w	r9, r9, #8
 800bae2:	e7a9      	b.n	800ba38 <_svfprintf_r+0xe50>
 800bae4:	9b07      	ldr	r3, [sp, #28]
 800bae6:	07d8      	lsls	r0, r3, #31
 800bae8:	f53f adf2 	bmi.w	800b6d0 <_svfprintf_r+0xae8>
 800baec:	3501      	adds	r5, #1
 800baee:	3401      	adds	r4, #1
 800baf0:	2301      	movs	r3, #1
 800baf2:	2d07      	cmp	r5, #7
 800baf4:	9429      	str	r4, [sp, #164]	; 0xa4
 800baf6:	9528      	str	r5, [sp, #160]	; 0xa0
 800baf8:	f8c9 6000 	str.w	r6, [r9]
 800bafc:	f8c9 3004 	str.w	r3, [r9, #4]
 800bb00:	f77f ae1a 	ble.w	800b738 <_svfprintf_r+0xb50>
 800bb04:	e70d      	b.n	800b922 <_svfprintf_r+0xd3a>
 800bb06:	aa27      	add	r2, sp, #156	; 0x9c
 800bb08:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bb0c:	f001 fff8 	bl	800db00 <__ssprint_r>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	f47f a963 	bne.w	800addc <_svfprintf_r+0x1f4>
 800bb16:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800bb18:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800bb1a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800bb1e:	e5e5      	b.n	800b6ec <_svfprintf_r+0xb04>
 800bb20:	aa27      	add	r2, sp, #156	; 0x9c
 800bb22:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bb26:	f001 ffeb 	bl	800db00 <__ssprint_r>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	f47f a956 	bne.w	800addc <_svfprintf_r+0x1f4>
 800bb30:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800bb32:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800bb34:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800bb38:	e5e7      	b.n	800b70a <_svfprintf_r+0xb22>
 800bb3a:	aa27      	add	r2, sp, #156	; 0x9c
 800bb3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bb40:	f001 ffde 	bl	800db00 <__ssprint_r>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	f47f a949 	bne.w	800addc <_svfprintf_r+0x1f4>
 800bb4a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800bb4c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800bb50:	f7ff ba94 	b.w	800b07c <_svfprintf_r+0x494>
 800bb54:	9907      	ldr	r1, [sp, #28]
 800bb56:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800bb5a:	f000 80bb 	beq.w	800bcd4 <_svfprintf_r+0x10ec>
 800bb5e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bb60:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800bb64:	4603      	mov	r3, r0
 800bb66:	f1bb 0f00 	cmp.w	fp, #0
 800bb6a:	f103 0304 	add.w	r3, r3, #4
 800bb6e:	8804      	ldrh	r4, [r0, #0]
 800bb70:	f04f 0500 	mov.w	r5, #0
 800bb74:	f2c0 81c5 	blt.w	800bf02 <_svfprintf_r+0x131a>
 800bb78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bb7c:	9107      	str	r1, [sp, #28]
 800bb7e:	ea54 0105 	orrs.w	r1, r4, r5
 800bb82:	930e      	str	r3, [sp, #56]	; 0x38
 800bb84:	f43f acda 	beq.w	800b53c <_svfprintf_r+0x954>
 800bb88:	4617      	mov	r7, r2
 800bb8a:	f7ff b953 	b.w	800ae34 <_svfprintf_r+0x24c>
 800bb8e:	9b07      	ldr	r3, [sp, #28]
 800bb90:	06df      	lsls	r7, r3, #27
 800bb92:	d40b      	bmi.n	800bbac <_svfprintf_r+0xfc4>
 800bb94:	9b07      	ldr	r3, [sp, #28]
 800bb96:	065e      	lsls	r6, r3, #25
 800bb98:	d508      	bpl.n	800bbac <_svfprintf_r+0xfc4>
 800bb9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb9c:	6813      	ldr	r3, [r2, #0]
 800bb9e:	3204      	adds	r2, #4
 800bba0:	920e      	str	r2, [sp, #56]	; 0x38
 800bba2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800bba6:	801a      	strh	r2, [r3, #0]
 800bba8:	f7ff b845 	b.w	800ac36 <_svfprintf_r+0x4e>
 800bbac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbae:	6813      	ldr	r3, [r2, #0]
 800bbb0:	3204      	adds	r2, #4
 800bbb2:	920e      	str	r2, [sp, #56]	; 0x38
 800bbb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	f7ff b83d 	b.w	800ac36 <_svfprintf_r+0x4e>
 800bbbc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	f7f5 f8ee 	bl	8000da4 <__aeabi_dcmpun>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	f040 8305 	bne.w	800c1d8 <_svfprintf_r+0x15f0>
 800bbce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbd0:	f1bb 3fff 	cmp.w	fp, #4294967295
 800bbd4:	f023 0720 	bic.w	r7, r3, #32
 800bbd8:	f000 826c 	beq.w	800c0b4 <_svfprintf_r+0x14cc>
 800bbdc:	2f47      	cmp	r7, #71	; 0x47
 800bbde:	f000 8187 	beq.w	800bef0 <_svfprintf_r+0x1308>
 800bbe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbe4:	9a07      	ldr	r2, [sp, #28]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbec:	920f      	str	r2, [sp, #60]	; 0x3c
 800bbee:	f2c0 8280 	blt.w	800c0f2 <_svfprintf_r+0x150a>
 800bbf2:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800bbf6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9308      	str	r3, [sp, #32]
 800bbfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc00:	2b66      	cmp	r3, #102	; 0x66
 800bc02:	f000 825a 	beq.w	800c0ba <_svfprintf_r+0x14d2>
 800bc06:	2b46      	cmp	r3, #70	; 0x46
 800bc08:	f000 8147 	beq.w	800be9a <_svfprintf_r+0x12b2>
 800bc0c:	2f45      	cmp	r7, #69	; 0x45
 800bc0e:	bf0c      	ite	eq
 800bc10:	f10b 0501 	addeq.w	r5, fp, #1
 800bc14:	465d      	movne	r5, fp
 800bc16:	a825      	add	r0, sp, #148	; 0x94
 800bc18:	a922      	add	r1, sp, #136	; 0x88
 800bc1a:	aa21      	add	r2, sp, #132	; 0x84
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	9004      	str	r0, [sp, #16]
 800bc20:	9202      	str	r2, [sp, #8]
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	9501      	str	r5, [sp, #4]
 800bc26:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800bc2a:	9103      	str	r1, [sp, #12]
 800bc2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc2e:	f000 fc9f 	bl	800c570 <_dtoa_r>
 800bc32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc34:	2b67      	cmp	r3, #103	; 0x67
 800bc36:	4606      	mov	r6, r0
 800bc38:	f040 8271 	bne.w	800c11e <_svfprintf_r+0x1536>
 800bc3c:	9b07      	ldr	r3, [sp, #28]
 800bc3e:	07da      	lsls	r2, r3, #31
 800bc40:	f140 82bf 	bpl.w	800c1c2 <_svfprintf_r+0x15da>
 800bc44:	1974      	adds	r4, r6, r5
 800bc46:	2200      	movs	r2, #0
 800bc48:	2300      	movs	r3, #0
 800bc4a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800bc4e:	f7f5 f877 	bl	8000d40 <__aeabi_dcmpeq>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f040 8190 	bne.w	800bf78 <_svfprintf_r+0x1390>
 800bc58:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bc5a:	429c      	cmp	r4, r3
 800bc5c:	d906      	bls.n	800bc6c <_svfprintf_r+0x1084>
 800bc5e:	2130      	movs	r1, #48	; 0x30
 800bc60:	1c5a      	adds	r2, r3, #1
 800bc62:	9225      	str	r2, [sp, #148]	; 0x94
 800bc64:	7019      	strb	r1, [r3, #0]
 800bc66:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bc68:	429c      	cmp	r4, r3
 800bc6a:	d8f9      	bhi.n	800bc60 <_svfprintf_r+0x1078>
 800bc6c:	1b9b      	subs	r3, r3, r6
 800bc6e:	2f47      	cmp	r7, #71	; 0x47
 800bc70:	9312      	str	r3, [sp, #72]	; 0x48
 800bc72:	f000 817a 	beq.w	800bf6a <_svfprintf_r+0x1382>
 800bc76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc78:	2b65      	cmp	r3, #101	; 0x65
 800bc7a:	f340 825f 	ble.w	800c13c <_svfprintf_r+0x1554>
 800bc7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc80:	2b66      	cmp	r3, #102	; 0x66
 800bc82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc84:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc86:	f000 8266 	beq.w	800c156 <_svfprintf_r+0x156e>
 800bc8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bc8e:	428a      	cmp	r2, r1
 800bc90:	f2c0 8238 	blt.w	800c104 <_svfprintf_r+0x151c>
 800bc94:	9b07      	ldr	r3, [sp, #28]
 800bc96:	07d9      	lsls	r1, r3, #31
 800bc98:	f100 8295 	bmi.w	800c1c6 <_svfprintf_r+0x15de>
 800bc9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bca0:	920d      	str	r2, [sp, #52]	; 0x34
 800bca2:	2267      	movs	r2, #103	; 0x67
 800bca4:	9211      	str	r2, [sp, #68]	; 0x44
 800bca6:	9a08      	ldr	r2, [sp, #32]
 800bca8:	2a00      	cmp	r2, #0
 800bcaa:	f040 8132 	bne.w	800bf12 <_svfprintf_r+0x132a>
 800bcae:	9308      	str	r3, [sp, #32]
 800bcb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcb2:	9307      	str	r3, [sp, #28]
 800bcb4:	4693      	mov	fp, r2
 800bcb6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800bcba:	f7ff b967 	b.w	800af8c <_svfprintf_r+0x3a4>
 800bcbe:	f027 0707 	bic.w	r7, r7, #7
 800bcc2:	ed97 7b00 	vldr	d7, [r7]
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800bcce:	930e      	str	r3, [sp, #56]	; 0x38
 800bcd0:	f7ff ba88 	b.w	800b1e4 <_svfprintf_r+0x5fc>
 800bcd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bcd6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800bcda:	f1bb 0f00 	cmp.w	fp, #0
 800bcde:	680c      	ldr	r4, [r1, #0]
 800bce0:	f101 0704 	add.w	r7, r1, #4
 800bce4:	f04f 0500 	mov.w	r5, #0
 800bce8:	f280 80ac 	bge.w	800be44 <_svfprintf_r+0x125c>
 800bcec:	970e      	str	r7, [sp, #56]	; 0x38
 800bcee:	2700      	movs	r7, #0
 800bcf0:	f7ff b8a0 	b.w	800ae34 <_svfprintf_r+0x24c>
 800bcf4:	9907      	ldr	r1, [sp, #28]
 800bcf6:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800bcfa:	f43f ae4c 	beq.w	800b996 <_svfprintf_r+0xdae>
 800bcfe:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bd00:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800bd04:	4603      	mov	r3, r0
 800bd06:	f1bb 0f00 	cmp.w	fp, #0
 800bd0a:	f103 0304 	add.w	r3, r3, #4
 800bd0e:	8804      	ldrh	r4, [r0, #0]
 800bd10:	f04f 0500 	mov.w	r5, #0
 800bd14:	f2c0 80f2 	blt.w	800befc <_svfprintf_r+0x1314>
 800bd18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bd1c:	9107      	str	r1, [sp, #28]
 800bd1e:	ea54 0105 	orrs.w	r1, r4, r5
 800bd22:	930e      	str	r3, [sp, #56]	; 0x38
 800bd24:	4617      	mov	r7, r2
 800bd26:	f47f a90d 	bne.w	800af44 <_svfprintf_r+0x35c>
 800bd2a:	f7ff baf3 	b.w	800b314 <_svfprintf_r+0x72c>
 800bd2e:	9b07      	ldr	r3, [sp, #28]
 800bd30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd32:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bd36:	4613      	mov	r3, r2
 800bd38:	f000 80e5 	beq.w	800bf06 <_svfprintf_r+0x131e>
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	8814      	ldrh	r4, [r2, #0]
 800bd40:	930e      	str	r3, [sp, #56]	; 0x38
 800bd42:	2500      	movs	r5, #0
 800bd44:	f7ff bb03 	b.w	800b34e <_svfprintf_r+0x766>
 800bd48:	4614      	mov	r4, r2
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd4e:	9328      	str	r3, [sp, #160]	; 0xa0
 800bd50:	442c      	add	r4, r5
 800bd52:	2b07      	cmp	r3, #7
 800bd54:	9429      	str	r4, [sp, #164]	; 0xa4
 800bd56:	e889 0024 	stmia.w	r9, {r2, r5}
 800bd5a:	f73f ae58 	bgt.w	800ba0e <_svfprintf_r+0xe26>
 800bd5e:	f109 0908 	add.w	r9, r9, #8
 800bd62:	e65f      	b.n	800ba24 <_svfprintf_r+0xe3c>
 800bd64:	0800ee38 	.word	0x0800ee38
 800bd68:	2700      	movs	r7, #0
 800bd6a:	45bb      	cmp	fp, r7
 800bd6c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800bd70:	f6ff abf6 	blt.w	800b560 <_svfprintf_r+0x978>
 800bd74:	9b07      	ldr	r3, [sp, #28]
 800bd76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd7a:	9307      	str	r3, [sp, #28]
 800bd7c:	f7ff bbbe 	b.w	800b4fc <_svfprintf_r+0x914>
 800bd80:	aa27      	add	r2, sp, #156	; 0x9c
 800bd82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd84:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd86:	f001 febb 	bl	800db00 <__ssprint_r>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f47f a826 	bne.w	800addc <_svfprintf_r+0x1f4>
 800bd90:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800bd92:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800bd96:	e405      	b.n	800b5a4 <_svfprintf_r+0x9bc>
 800bd98:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800bd9a:	f7ff bbda 	b.w	800b552 <_svfprintf_r+0x96a>
 800bd9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bda0:	4ab2      	ldr	r2, [pc, #712]	; (800c06c <_svfprintf_r+0x1484>)
 800bda2:	f8c9 2000 	str.w	r2, [r9]
 800bda6:	3301      	adds	r3, #1
 800bda8:	3401      	adds	r4, #1
 800bdaa:	2201      	movs	r2, #1
 800bdac:	2b07      	cmp	r3, #7
 800bdae:	9429      	str	r4, [sp, #164]	; 0xa4
 800bdb0:	9328      	str	r3, [sp, #160]	; 0xa0
 800bdb2:	f8c9 2004 	str.w	r2, [r9, #4]
 800bdb6:	f300 808e 	bgt.w	800bed6 <_svfprintf_r+0x12ee>
 800bdba:	f109 0908 	add.w	r9, r9, #8
 800bdbe:	b92d      	cbnz	r5, 800bdcc <_svfprintf_r+0x11e4>
 800bdc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdc2:	b91b      	cbnz	r3, 800bdcc <_svfprintf_r+0x11e4>
 800bdc4:	9b07      	ldr	r3, [sp, #28]
 800bdc6:	07df      	lsls	r7, r3, #31
 800bdc8:	f57f a9a4 	bpl.w	800b114 <_svfprintf_r+0x52c>
 800bdcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bdce:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bdd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bdd2:	f8c9 2000 	str.w	r2, [r9]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	440c      	add	r4, r1
 800bdda:	2b07      	cmp	r3, #7
 800bddc:	9429      	str	r4, [sp, #164]	; 0xa4
 800bdde:	f8c9 1004 	str.w	r1, [r9, #4]
 800bde2:	9328      	str	r3, [sp, #160]	; 0xa0
 800bde4:	f300 81d3 	bgt.w	800c18e <_svfprintf_r+0x15a6>
 800bde8:	f109 0908 	add.w	r9, r9, #8
 800bdec:	426d      	negs	r5, r5
 800bdee:	2d00      	cmp	r5, #0
 800bdf0:	f340 80ad 	ble.w	800bf4e <_svfprintf_r+0x1366>
 800bdf4:	4a9e      	ldr	r2, [pc, #632]	; (800c070 <_svfprintf_r+0x1488>)
 800bdf6:	920f      	str	r2, [sp, #60]	; 0x3c
 800bdf8:	2d10      	cmp	r5, #16
 800bdfa:	f340 80cc 	ble.w	800bf96 <_svfprintf_r+0x13ae>
 800bdfe:	4622      	mov	r2, r4
 800be00:	2710      	movs	r7, #16
 800be02:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800be06:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800be08:	e005      	b.n	800be16 <_svfprintf_r+0x122e>
 800be0a:	f109 0908 	add.w	r9, r9, #8
 800be0e:	3d10      	subs	r5, #16
 800be10:	2d10      	cmp	r5, #16
 800be12:	f340 80bf 	ble.w	800bf94 <_svfprintf_r+0x13ac>
 800be16:	3301      	adds	r3, #1
 800be18:	3210      	adds	r2, #16
 800be1a:	2b07      	cmp	r3, #7
 800be1c:	9229      	str	r2, [sp, #164]	; 0xa4
 800be1e:	9328      	str	r3, [sp, #160]	; 0xa0
 800be20:	f8c9 a000 	str.w	sl, [r9]
 800be24:	f8c9 7004 	str.w	r7, [r9, #4]
 800be28:	ddef      	ble.n	800be0a <_svfprintf_r+0x1222>
 800be2a:	aa27      	add	r2, sp, #156	; 0x9c
 800be2c:	4621      	mov	r1, r4
 800be2e:	4658      	mov	r0, fp
 800be30:	f001 fe66 	bl	800db00 <__ssprint_r>
 800be34:	2800      	cmp	r0, #0
 800be36:	f47e afd1 	bne.w	800addc <_svfprintf_r+0x1f4>
 800be3a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800be3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800be3e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800be42:	e7e4      	b.n	800be0e <_svfprintf_r+0x1226>
 800be44:	9a07      	ldr	r2, [sp, #28]
 800be46:	f7ff ba37 	b.w	800b2b8 <_svfprintf_r+0x6d0>
 800be4a:	9a07      	ldr	r2, [sp, #28]
 800be4c:	e589      	b.n	800b962 <_svfprintf_r+0xd7a>
 800be4e:	9b07      	ldr	r3, [sp, #28]
 800be50:	f043 0320 	orr.w	r3, r3, #32
 800be54:	9307      	str	r3, [sp, #28]
 800be56:	f108 0801 	add.w	r8, r8, #1
 800be5a:	f898 3000 	ldrb.w	r3, [r8]
 800be5e:	f7fe bf1d 	b.w	800ac9c <_svfprintf_r+0xb4>
 800be62:	aa27      	add	r2, sp, #156	; 0x9c
 800be64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be66:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be68:	f001 fe4a 	bl	800db00 <__ssprint_r>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	f47e afb5 	bne.w	800addc <_svfprintf_r+0x1f4>
 800be72:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800be74:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800be78:	f7ff bbac 	b.w	800b5d4 <_svfprintf_r+0x9ec>
 800be7c:	2140      	movs	r1, #64	; 0x40
 800be7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be80:	f7fc fa20 	bl	80082c4 <_malloc_r>
 800be84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be86:	6010      	str	r0, [r2, #0]
 800be88:	6110      	str	r0, [r2, #16]
 800be8a:	2800      	cmp	r0, #0
 800be8c:	f000 81f9 	beq.w	800c282 <_svfprintf_r+0x169a>
 800be90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be92:	2340      	movs	r3, #64	; 0x40
 800be94:	6153      	str	r3, [r2, #20]
 800be96:	f7fe bebe 	b.w	800ac16 <_svfprintf_r+0x2e>
 800be9a:	a825      	add	r0, sp, #148	; 0x94
 800be9c:	a922      	add	r1, sp, #136	; 0x88
 800be9e:	aa21      	add	r2, sp, #132	; 0x84
 800bea0:	2303      	movs	r3, #3
 800bea2:	9004      	str	r0, [sp, #16]
 800bea4:	9202      	str	r2, [sp, #8]
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	f8cd b004 	str.w	fp, [sp, #4]
 800beac:	9103      	str	r1, [sp, #12]
 800beae:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800beb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800beb4:	f000 fb5c 	bl	800c570 <_dtoa_r>
 800beb8:	465d      	mov	r5, fp
 800beba:	4606      	mov	r6, r0
 800bebc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bebe:	2b46      	cmp	r3, #70	; 0x46
 800bec0:	eb06 0405 	add.w	r4, r6, r5
 800bec4:	f47f aebf 	bne.w	800bc46 <_svfprintf_r+0x105e>
 800bec8:	7833      	ldrb	r3, [r6, #0]
 800beca:	2b30      	cmp	r3, #48	; 0x30
 800becc:	f000 818a 	beq.w	800c1e4 <_svfprintf_r+0x15fc>
 800bed0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800bed2:	442c      	add	r4, r5
 800bed4:	e6b7      	b.n	800bc46 <_svfprintf_r+0x105e>
 800bed6:	aa27      	add	r2, sp, #156	; 0x9c
 800bed8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800beda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bedc:	f001 fe10 	bl	800db00 <__ssprint_r>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	f47e af7b 	bne.w	800addc <_svfprintf_r+0x1f4>
 800bee6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800bee8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800beea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800beee:	e766      	b.n	800bdbe <_svfprintf_r+0x11d6>
 800bef0:	f1bb 0f00 	cmp.w	fp, #0
 800bef4:	bf08      	it	eq
 800bef6:	f04f 0b01 	moveq.w	fp, #1
 800befa:	e672      	b.n	800bbe2 <_svfprintf_r+0xffa>
 800befc:	930e      	str	r3, [sp, #56]	; 0x38
 800befe:	4617      	mov	r7, r2
 800bf00:	e557      	b.n	800b9b2 <_svfprintf_r+0xdca>
 800bf02:	930e      	str	r3, [sp, #56]	; 0x38
 800bf04:	e6f3      	b.n	800bcee <_svfprintf_r+0x1106>
 800bf06:	3304      	adds	r3, #4
 800bf08:	6814      	ldr	r4, [r2, #0]
 800bf0a:	930e      	str	r3, [sp, #56]	; 0x38
 800bf0c:	2500      	movs	r5, #0
 800bf0e:	f7ff ba1e 	b.w	800b34e <_svfprintf_r+0x766>
 800bf12:	272d      	movs	r7, #45	; 0x2d
 800bf14:	9308      	str	r3, [sp, #32]
 800bf16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf18:	9307      	str	r3, [sp, #28]
 800bf1a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800bf1e:	f04f 0b00 	mov.w	fp, #0
 800bf22:	f7ff b834 	b.w	800af8e <_svfprintf_r+0x3a6>
 800bf26:	4630      	mov	r0, r6
 800bf28:	f7f4 fa2a 	bl	8000380 <strlen>
 800bf2c:	46a3      	mov	fp, r4
 800bf2e:	4603      	mov	r3, r0
 800bf30:	900d      	str	r0, [sp, #52]	; 0x34
 800bf32:	f7ff ba9d 	b.w	800b470 <_svfprintf_r+0x888>
 800bf36:	aa27      	add	r2, sp, #156	; 0x9c
 800bf38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf3c:	f001 fde0 	bl	800db00 <__ssprint_r>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	f47e af4b 	bne.w	800addc <_svfprintf_r+0x1f4>
 800bf46:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800bf48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bf4a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800bf4e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bf50:	f8c9 6000 	str.w	r6, [r9]
 800bf54:	3301      	adds	r3, #1
 800bf56:	440c      	add	r4, r1
 800bf58:	2b07      	cmp	r3, #7
 800bf5a:	9429      	str	r4, [sp, #164]	; 0xa4
 800bf5c:	9328      	str	r3, [sp, #160]	; 0xa0
 800bf5e:	f8c9 1004 	str.w	r1, [r9, #4]
 800bf62:	f77f a8d5 	ble.w	800b110 <_svfprintf_r+0x528>
 800bf66:	f7ff bbf6 	b.w	800b756 <_svfprintf_r+0xb6e>
 800bf6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf6c:	1cdd      	adds	r5, r3, #3
 800bf6e:	db1e      	blt.n	800bfae <_svfprintf_r+0x13c6>
 800bf70:	459b      	cmp	fp, r3
 800bf72:	db1c      	blt.n	800bfae <_svfprintf_r+0x13c6>
 800bf74:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf76:	e688      	b.n	800bc8a <_svfprintf_r+0x10a2>
 800bf78:	4623      	mov	r3, r4
 800bf7a:	e677      	b.n	800bc6c <_svfprintf_r+0x1084>
 800bf7c:	aa27      	add	r2, sp, #156	; 0x9c
 800bf7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf82:	f001 fdbd 	bl	800db00 <__ssprint_r>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	f47e af28 	bne.w	800addc <_svfprintf_r+0x1f4>
 800bf8c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800bf8e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800bf92:	e447      	b.n	800b824 <_svfprintf_r+0xc3c>
 800bf94:	4614      	mov	r4, r2
 800bf96:	3301      	adds	r3, #1
 800bf98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf9a:	9328      	str	r3, [sp, #160]	; 0xa0
 800bf9c:	442c      	add	r4, r5
 800bf9e:	2b07      	cmp	r3, #7
 800bfa0:	9429      	str	r4, [sp, #164]	; 0xa4
 800bfa2:	e889 0024 	stmia.w	r9, {r2, r5}
 800bfa6:	dcc6      	bgt.n	800bf36 <_svfprintf_r+0x134e>
 800bfa8:	f109 0908 	add.w	r9, r9, #8
 800bfac:	e7cf      	b.n	800bf4e <_svfprintf_r+0x1366>
 800bfae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bfb0:	3a02      	subs	r2, #2
 800bfb2:	9211      	str	r2, [sp, #68]	; 0x44
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800bfbc:	9321      	str	r3, [sp, #132]	; 0x84
 800bfbe:	bfb8      	it	lt
 800bfc0:	425b      	neglt	r3, r3
 800bfc2:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 800bfc6:	bfb4      	ite	lt
 800bfc8:	222d      	movlt	r2, #45	; 0x2d
 800bfca:	222b      	movge	r2, #43	; 0x2b
 800bfcc:	2b09      	cmp	r3, #9
 800bfce:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 800bfd2:	f340 80ee 	ble.w	800c1b2 <_svfprintf_r+0x15ca>
 800bfd6:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 800bfda:	4604      	mov	r4, r0
 800bfdc:	4a25      	ldr	r2, [pc, #148]	; (800c074 <_svfprintf_r+0x148c>)
 800bfde:	fb82 2103 	smull	r2, r1, r2, r3
 800bfe2:	17da      	asrs	r2, r3, #31
 800bfe4:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800bfe8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800bfec:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800bff0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bff4:	2a09      	cmp	r2, #9
 800bff6:	4613      	mov	r3, r2
 800bff8:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800bffc:	dcee      	bgt.n	800bfdc <_svfprintf_r+0x13f4>
 800bffe:	4621      	mov	r1, r4
 800c000:	3330      	adds	r3, #48	; 0x30
 800c002:	b2da      	uxtb	r2, r3
 800c004:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800c008:	4288      	cmp	r0, r1
 800c00a:	f240 8137 	bls.w	800c27c <_svfprintf_r+0x1694>
 800c00e:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 800c012:	4623      	mov	r3, r4
 800c014:	e001      	b.n	800c01a <_svfprintf_r+0x1432>
 800c016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c01a:	f801 2b01 	strb.w	r2, [r1], #1
 800c01e:	4298      	cmp	r0, r3
 800c020:	d1f9      	bne.n	800c016 <_svfprintf_r+0x142e>
 800c022:	1c43      	adds	r3, r0, #1
 800c024:	1b1b      	subs	r3, r3, r4
 800c026:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 800c02a:	4413      	add	r3, r2
 800c02c:	aa23      	add	r2, sp, #140	; 0x8c
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c032:	9319      	str	r3, [sp, #100]	; 0x64
 800c034:	2a01      	cmp	r2, #1
 800c036:	4413      	add	r3, r2
 800c038:	930d      	str	r3, [sp, #52]	; 0x34
 800c03a:	f340 80ea 	ble.w	800c212 <_svfprintf_r+0x162a>
 800c03e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c040:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c042:	4413      	add	r3, r2
 800c044:	2200      	movs	r2, #0
 800c046:	930d      	str	r3, [sp, #52]	; 0x34
 800c048:	9213      	str	r2, [sp, #76]	; 0x4c
 800c04a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c04e:	e62a      	b.n	800bca6 <_svfprintf_r+0x10be>
 800c050:	aa27      	add	r2, sp, #156	; 0x9c
 800c052:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c054:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c056:	f001 fd53 	bl	800db00 <__ssprint_r>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f47e aebe 	bne.w	800addc <_svfprintf_r+0x1f4>
 800c060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c062:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800c064:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800c068:	e4e6      	b.n	800ba38 <_svfprintf_r+0xe50>
 800c06a:	bf00      	nop
 800c06c:	0800ee58 	.word	0x0800ee58
 800c070:	0800ee38 	.word	0x0800ee38
 800c074:	66666667 	.word	0x66666667
 800c078:	aa27      	add	r2, sp, #156	; 0x9c
 800c07a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c07c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c07e:	f001 fd3f 	bl	800db00 <__ssprint_r>
 800c082:	2800      	cmp	r0, #0
 800c084:	f47e aeaa 	bne.w	800addc <_svfprintf_r+0x1f4>
 800c088:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c08a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c08c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800c094:	e4e8      	b.n	800ba68 <_svfprintf_r+0xe80>
 800c096:	2d06      	cmp	r5, #6
 800c098:	462b      	mov	r3, r5
 800c09a:	bf28      	it	cs
 800c09c:	2306      	movcs	r3, #6
 800c09e:	930d      	str	r3, [sp, #52]	; 0x34
 800c0a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c0a4:	46b3      	mov	fp, r6
 800c0a6:	970e      	str	r7, [sp, #56]	; 0x38
 800c0a8:	9613      	str	r6, [sp, #76]	; 0x4c
 800c0aa:	4637      	mov	r7, r6
 800c0ac:	9308      	str	r3, [sp, #32]
 800c0ae:	4e88      	ldr	r6, [pc, #544]	; (800c2d0 <_svfprintf_r+0x16e8>)
 800c0b0:	f7fe bf6c 	b.w	800af8c <_svfprintf_r+0x3a4>
 800c0b4:	f04f 0b06 	mov.w	fp, #6
 800c0b8:	e593      	b.n	800bbe2 <_svfprintf_r+0xffa>
 800c0ba:	a825      	add	r0, sp, #148	; 0x94
 800c0bc:	a922      	add	r1, sp, #136	; 0x88
 800c0be:	aa21      	add	r2, sp, #132	; 0x84
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	9004      	str	r0, [sp, #16]
 800c0c4:	9202      	str	r2, [sp, #8]
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	f8cd b004 	str.w	fp, [sp, #4]
 800c0cc:	9103      	str	r1, [sp, #12]
 800c0ce:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c0d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0d4:	f000 fa4c 	bl	800c570 <_dtoa_r>
 800c0d8:	465d      	mov	r5, fp
 800c0da:	4606      	mov	r6, r0
 800c0dc:	eb00 040b 	add.w	r4, r0, fp
 800c0e0:	e6f2      	b.n	800bec8 <_svfprintf_r+0x12e0>
 800c0e2:	272d      	movs	r7, #45	; 0x2d
 800c0e4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800c0e8:	f7ff b8a3 	b.w	800b232 <_svfprintf_r+0x64a>
 800c0ec:	9307      	str	r3, [sp, #28]
 800c0ee:	f7ff b94c 	b.w	800b38a <_svfprintf_r+0x7a2>
 800c0f2:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800c0f6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800c0fa:	931d      	str	r3, [sp, #116]	; 0x74
 800c0fc:	232d      	movs	r3, #45	; 0x2d
 800c0fe:	911c      	str	r1, [sp, #112]	; 0x70
 800c100:	9308      	str	r3, [sp, #32]
 800c102:	e57c      	b.n	800bbfe <_svfprintf_r+0x1016>
 800c104:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c106:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c108:	4413      	add	r3, r2
 800c10a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c10c:	930d      	str	r3, [sp, #52]	; 0x34
 800c10e:	2a00      	cmp	r2, #0
 800c110:	f340 8089 	ble.w	800c226 <_svfprintf_r+0x163e>
 800c114:	2267      	movs	r2, #103	; 0x67
 800c116:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c11a:	9211      	str	r2, [sp, #68]	; 0x44
 800c11c:	e5c3      	b.n	800bca6 <_svfprintf_r+0x10be>
 800c11e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c120:	2b47      	cmp	r3, #71	; 0x47
 800c122:	f47f ad8f 	bne.w	800bc44 <_svfprintf_r+0x105c>
 800c126:	9b07      	ldr	r3, [sp, #28]
 800c128:	07db      	lsls	r3, r3, #31
 800c12a:	f53f aec7 	bmi.w	800bebc <_svfprintf_r+0x12d4>
 800c12e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c130:	2f47      	cmp	r7, #71	; 0x47
 800c132:	eba3 0306 	sub.w	r3, r3, r6
 800c136:	9312      	str	r3, [sp, #72]	; 0x48
 800c138:	f43f af17 	beq.w	800bf6a <_svfprintf_r+0x1382>
 800c13c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c13e:	e739      	b.n	800bfb4 <_svfprintf_r+0x13cc>
 800c140:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800c144:	970e      	str	r7, [sp, #56]	; 0x38
 800c146:	9308      	str	r3, [sp, #32]
 800c148:	950d      	str	r5, [sp, #52]	; 0x34
 800c14a:	4683      	mov	fp, r0
 800c14c:	9013      	str	r0, [sp, #76]	; 0x4c
 800c14e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800c152:	f7fe bf1b 	b.w	800af8c <_svfprintf_r+0x3a4>
 800c156:	2b00      	cmp	r3, #0
 800c158:	dd6d      	ble.n	800c236 <_svfprintf_r+0x164e>
 800c15a:	f1bb 0f00 	cmp.w	fp, #0
 800c15e:	d14f      	bne.n	800c200 <_svfprintf_r+0x1618>
 800c160:	9a07      	ldr	r2, [sp, #28]
 800c162:	07d4      	lsls	r4, r2, #31
 800c164:	d44c      	bmi.n	800c200 <_svfprintf_r+0x1618>
 800c166:	461a      	mov	r2, r3
 800c168:	920d      	str	r2, [sp, #52]	; 0x34
 800c16a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c16e:	e59a      	b.n	800bca6 <_svfprintf_r+0x10be>
 800c170:	9b07      	ldr	r3, [sp, #28]
 800c172:	07db      	lsls	r3, r3, #31
 800c174:	465f      	mov	r7, fp
 800c176:	d505      	bpl.n	800c184 <_svfprintf_r+0x159c>
 800c178:	ae44      	add	r6, sp, #272	; 0x110
 800c17a:	2330      	movs	r3, #48	; 0x30
 800c17c:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800c180:	f7fe befa 	b.w	800af78 <_svfprintf_r+0x390>
 800c184:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800c188:	ae34      	add	r6, sp, #208	; 0xd0
 800c18a:	f7fe bef8 	b.w	800af7e <_svfprintf_r+0x396>
 800c18e:	aa27      	add	r2, sp, #156	; 0x9c
 800c190:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c192:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c194:	f001 fcb4 	bl	800db00 <__ssprint_r>
 800c198:	2800      	cmp	r0, #0
 800c19a:	f47e ae1f 	bne.w	800addc <_svfprintf_r+0x1f4>
 800c19e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800c1a0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800c1a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c1a4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800c1a8:	e620      	b.n	800bdec <_svfprintf_r+0x1204>
 800c1aa:	46a0      	mov	r8, r4
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	f7fe bd77 	b.w	800aca0 <_svfprintf_r+0xb8>
 800c1b2:	3330      	adds	r3, #48	; 0x30
 800c1b4:	2230      	movs	r2, #48	; 0x30
 800c1b6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 800c1ba:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 800c1be:	ab24      	add	r3, sp, #144	; 0x90
 800c1c0:	e734      	b.n	800c02c <_svfprintf_r+0x1444>
 800c1c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c1c4:	e552      	b.n	800bc6c <_svfprintf_r+0x1084>
 800c1c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c1c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1ca:	4413      	add	r3, r2
 800c1cc:	2267      	movs	r2, #103	; 0x67
 800c1ce:	930d      	str	r3, [sp, #52]	; 0x34
 800c1d0:	9211      	str	r2, [sp, #68]	; 0x44
 800c1d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c1d6:	e566      	b.n	800bca6 <_svfprintf_r+0x10be>
 800c1d8:	4e3e      	ldr	r6, [pc, #248]	; (800c2d4 <_svfprintf_r+0x16ec>)
 800c1da:	4b3f      	ldr	r3, [pc, #252]	; (800c2d8 <_svfprintf_r+0x16f0>)
 800c1dc:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800c1e0:	f7ff b829 	b.w	800b236 <_svfprintf_r+0x64e>
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800c1ec:	f7f4 fda8 	bl	8000d40 <__aeabi_dcmpeq>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	f47f ae6d 	bne.w	800bed0 <_svfprintf_r+0x12e8>
 800c1f6:	f1c5 0501 	rsb	r5, r5, #1
 800c1fa:	9521      	str	r5, [sp, #132]	; 0x84
 800c1fc:	442c      	add	r4, r5
 800c1fe:	e522      	b.n	800bc46 <_svfprintf_r+0x105e>
 800c200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c202:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c204:	189d      	adds	r5, r3, r2
 800c206:	eb05 030b 	add.w	r3, r5, fp
 800c20a:	930d      	str	r3, [sp, #52]	; 0x34
 800c20c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c210:	e549      	b.n	800bca6 <_svfprintf_r+0x10be>
 800c212:	9b07      	ldr	r3, [sp, #28]
 800c214:	f013 0301 	ands.w	r3, r3, #1
 800c218:	f47f af11 	bne.w	800c03e <_svfprintf_r+0x1456>
 800c21c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c21e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c220:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c224:	e53f      	b.n	800bca6 <_svfprintf_r+0x10be>
 800c226:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c22a:	f1c3 0301 	rsb	r3, r3, #1
 800c22e:	441a      	add	r2, r3
 800c230:	4613      	mov	r3, r2
 800c232:	920d      	str	r2, [sp, #52]	; 0x34
 800c234:	e76e      	b.n	800c114 <_svfprintf_r+0x152c>
 800c236:	f1bb 0f00 	cmp.w	fp, #0
 800c23a:	d102      	bne.n	800c242 <_svfprintf_r+0x165a>
 800c23c:	9b07      	ldr	r3, [sp, #28]
 800c23e:	07d8      	lsls	r0, r3, #31
 800c240:	d507      	bpl.n	800c252 <_svfprintf_r+0x166a>
 800c242:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c244:	1c5d      	adds	r5, r3, #1
 800c246:	eb05 030b 	add.w	r3, r5, fp
 800c24a:	930d      	str	r3, [sp, #52]	; 0x34
 800c24c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c250:	e529      	b.n	800bca6 <_svfprintf_r+0x10be>
 800c252:	2301      	movs	r3, #1
 800c254:	930d      	str	r3, [sp, #52]	; 0x34
 800c256:	e526      	b.n	800bca6 <_svfprintf_r+0x10be>
 800c258:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c25a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c25e:	6805      	ldr	r5, [r0, #0]
 800c260:	3004      	adds	r0, #4
 800c262:	2d00      	cmp	r5, #0
 800c264:	900e      	str	r0, [sp, #56]	; 0x38
 800c266:	46a0      	mov	r8, r4
 800c268:	f6be ad18 	bge.w	800ac9c <_svfprintf_r+0xb4>
 800c26c:	f04f 35ff 	mov.w	r5, #4294967295
 800c270:	f7fe bd14 	b.w	800ac9c <_svfprintf_r+0xb4>
 800c274:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800c278:	f7fe bdc1 	b.w	800adfe <_svfprintf_r+0x216>
 800c27c:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800c280:	e6d4      	b.n	800c02c <_svfprintf_r+0x1444>
 800c282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c284:	230c      	movs	r3, #12
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	f7fe bdaf 	b.w	800adee <_svfprintf_r+0x206>
 800c290:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800c294:	f7fe be30 	b.w	800aef8 <_svfprintf_r+0x310>
 800c298:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800c29c:	f7fe bf92 	b.w	800b1c4 <_svfprintf_r+0x5dc>
 800c2a0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800c2a4:	f7ff b845 	b.w	800b332 <_svfprintf_r+0x74a>
 800c2a8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800c2ac:	f7ff b813 	b.w	800b2d6 <_svfprintf_r+0x6ee>
 800c2b0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800c2b4:	f7fe bfe5 	b.w	800b282 <_svfprintf_r+0x69a>
 800c2b8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800c2bc:	f7ff b92d 	b.w	800b51a <_svfprintf_r+0x932>
 800c2c0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800c2c4:	f7ff b908 	b.w	800b4d8 <_svfprintf_r+0x8f0>
 800c2c8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800c2cc:	f7ff b8e6 	b.w	800b49c <_svfprintf_r+0x8b4>
 800c2d0:	0800ee20 	.word	0x0800ee20
 800c2d4:	0800ee54 	.word	0x0800ee54
 800c2d8:	0800ee50 	.word	0x0800ee50

0800c2dc <__swbuf_r>:
 800c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2de:	460d      	mov	r5, r1
 800c2e0:	4614      	mov	r4, r2
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	b110      	cbz	r0, 800c2ec <__swbuf_r+0x10>
 800c2e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d04a      	beq.n	800c382 <__swbuf_r+0xa6>
 800c2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2f0:	69a3      	ldr	r3, [r4, #24]
 800c2f2:	60a3      	str	r3, [r4, #8]
 800c2f4:	b291      	uxth	r1, r2
 800c2f6:	0708      	lsls	r0, r1, #28
 800c2f8:	d538      	bpl.n	800c36c <__swbuf_r+0x90>
 800c2fa:	6923      	ldr	r3, [r4, #16]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d035      	beq.n	800c36c <__swbuf_r+0x90>
 800c300:	0489      	lsls	r1, r1, #18
 800c302:	b2ef      	uxtb	r7, r5
 800c304:	d515      	bpl.n	800c332 <__swbuf_r+0x56>
 800c306:	6822      	ldr	r2, [r4, #0]
 800c308:	6961      	ldr	r1, [r4, #20]
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	428b      	cmp	r3, r1
 800c30e:	da1c      	bge.n	800c34a <__swbuf_r+0x6e>
 800c310:	3301      	adds	r3, #1
 800c312:	68a1      	ldr	r1, [r4, #8]
 800c314:	1c50      	adds	r0, r2, #1
 800c316:	3901      	subs	r1, #1
 800c318:	60a1      	str	r1, [r4, #8]
 800c31a:	6020      	str	r0, [r4, #0]
 800c31c:	7015      	strb	r5, [r2, #0]
 800c31e:	6962      	ldr	r2, [r4, #20]
 800c320:	429a      	cmp	r2, r3
 800c322:	d01a      	beq.n	800c35a <__swbuf_r+0x7e>
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	07db      	lsls	r3, r3, #31
 800c328:	d501      	bpl.n	800c32e <__swbuf_r+0x52>
 800c32a:	2f0a      	cmp	r7, #10
 800c32c:	d015      	beq.n	800c35a <__swbuf_r+0x7e>
 800c32e:	4638      	mov	r0, r7
 800c330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c332:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c338:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800c33c:	81a2      	strh	r2, [r4, #12]
 800c33e:	6822      	ldr	r2, [r4, #0]
 800c340:	6661      	str	r1, [r4, #100]	; 0x64
 800c342:	6961      	ldr	r1, [r4, #20]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	428b      	cmp	r3, r1
 800c348:	dbe2      	blt.n	800c310 <__swbuf_r+0x34>
 800c34a:	4621      	mov	r1, r4
 800c34c:	4630      	mov	r0, r6
 800c34e:	f7fd fcd9 	bl	8009d04 <_fflush_r>
 800c352:	b940      	cbnz	r0, 800c366 <__swbuf_r+0x8a>
 800c354:	6822      	ldr	r2, [r4, #0]
 800c356:	2301      	movs	r3, #1
 800c358:	e7db      	b.n	800c312 <__swbuf_r+0x36>
 800c35a:	4621      	mov	r1, r4
 800c35c:	4630      	mov	r0, r6
 800c35e:	f7fd fcd1 	bl	8009d04 <_fflush_r>
 800c362:	2800      	cmp	r0, #0
 800c364:	d0e3      	beq.n	800c32e <__swbuf_r+0x52>
 800c366:	f04f 37ff 	mov.w	r7, #4294967295
 800c36a:	e7e0      	b.n	800c32e <__swbuf_r+0x52>
 800c36c:	4621      	mov	r1, r4
 800c36e:	4630      	mov	r0, r6
 800c370:	f7fd fb56 	bl	8009a20 <__swsetup_r>
 800c374:	2800      	cmp	r0, #0
 800c376:	d1f6      	bne.n	800c366 <__swbuf_r+0x8a>
 800c378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c37c:	6923      	ldr	r3, [r4, #16]
 800c37e:	b291      	uxth	r1, r2
 800c380:	e7be      	b.n	800c300 <__swbuf_r+0x24>
 800c382:	f7fd fd53 	bl	8009e2c <__sinit>
 800c386:	e7b1      	b.n	800c2ec <__swbuf_r+0x10>

0800c388 <_wcrtomb_r>:
 800c388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38a:	4606      	mov	r6, r0
 800c38c:	b085      	sub	sp, #20
 800c38e:	461f      	mov	r7, r3
 800c390:	b189      	cbz	r1, 800c3b6 <_wcrtomb_r+0x2e>
 800c392:	4c10      	ldr	r4, [pc, #64]	; (800c3d4 <_wcrtomb_r+0x4c>)
 800c394:	4d10      	ldr	r5, [pc, #64]	; (800c3d8 <_wcrtomb_r+0x50>)
 800c396:	6824      	ldr	r4, [r4, #0]
 800c398:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800c39a:	2c00      	cmp	r4, #0
 800c39c:	bf08      	it	eq
 800c39e:	462c      	moveq	r4, r5
 800c3a0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800c3a4:	47a0      	blx	r4
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	d103      	bne.n	800c3b2 <_wcrtomb_r+0x2a>
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	238a      	movs	r3, #138	; 0x8a
 800c3ae:	603a      	str	r2, [r7, #0]
 800c3b0:	6033      	str	r3, [r6, #0]
 800c3b2:	b005      	add	sp, #20
 800c3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	4906      	ldr	r1, [pc, #24]	; (800c3d4 <_wcrtomb_r+0x4c>)
 800c3ba:	4a07      	ldr	r2, [pc, #28]	; (800c3d8 <_wcrtomb_r+0x50>)
 800c3bc:	6809      	ldr	r1, [r1, #0]
 800c3be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c3c0:	2900      	cmp	r1, #0
 800c3c2:	bf08      	it	eq
 800c3c4:	4611      	moveq	r1, r2
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800c3cc:	a901      	add	r1, sp, #4
 800c3ce:	47a0      	blx	r4
 800c3d0:	e7e9      	b.n	800c3a6 <_wcrtomb_r+0x1e>
 800c3d2:	bf00      	nop
 800c3d4:	200005b8 	.word	0x200005b8
 800c3d8:	200009cc 	.word	0x200009cc

0800c3dc <__ascii_wctomb>:
 800c3dc:	b121      	cbz	r1, 800c3e8 <__ascii_wctomb+0xc>
 800c3de:	2aff      	cmp	r2, #255	; 0xff
 800c3e0:	d804      	bhi.n	800c3ec <__ascii_wctomb+0x10>
 800c3e2:	700a      	strb	r2, [r1, #0]
 800c3e4:	2001      	movs	r0, #1
 800c3e6:	4770      	bx	lr
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	4770      	bx	lr
 800c3ec:	238a      	movs	r3, #138	; 0x8a
 800c3ee:	6003      	str	r3, [r0, #0]
 800c3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop

0800c3f8 <_write_r>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	460d      	mov	r5, r1
 800c3fc:	4c08      	ldr	r4, [pc, #32]	; (800c420 <_write_r+0x28>)
 800c3fe:	4611      	mov	r1, r2
 800c400:	4606      	mov	r6, r0
 800c402:	461a      	mov	r2, r3
 800c404:	4628      	mov	r0, r5
 800c406:	2300      	movs	r3, #0
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	f001 fc6f 	bl	800dcec <_write>
 800c40e:	1c43      	adds	r3, r0, #1
 800c410:	d000      	beq.n	800c414 <_write_r+0x1c>
 800c412:	bd70      	pop	{r4, r5, r6, pc}
 800c414:	6823      	ldr	r3, [r4, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d0fb      	beq.n	800c412 <_write_r+0x1a>
 800c41a:	6033      	str	r3, [r6, #0]
 800c41c:	bd70      	pop	{r4, r5, r6, pc}
 800c41e:	bf00      	nop
 800c420:	20006df0 	.word	0x20006df0

0800c424 <_close_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4c07      	ldr	r4, [pc, #28]	; (800c444 <_close_r+0x20>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4605      	mov	r5, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	f001 fc16 	bl	800dc60 <_close>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d000      	beq.n	800c43a <_close_r+0x16>
 800c438:	bd38      	pop	{r3, r4, r5, pc}
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d0fb      	beq.n	800c438 <_close_r+0x14>
 800c440:	602b      	str	r3, [r5, #0]
 800c442:	bd38      	pop	{r3, r4, r5, pc}
 800c444:	20006df0 	.word	0x20006df0

0800c448 <quorem>:
 800c448:	6902      	ldr	r2, [r0, #16]
 800c44a:	690b      	ldr	r3, [r1, #16]
 800c44c:	4293      	cmp	r3, r2
 800c44e:	f300 808d 	bgt.w	800c56c <quorem+0x124>
 800c452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c456:	f103 38ff 	add.w	r8, r3, #4294967295
 800c45a:	f101 0714 	add.w	r7, r1, #20
 800c45e:	f100 0b14 	add.w	fp, r0, #20
 800c462:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800c466:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800c46a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800c46e:	b083      	sub	sp, #12
 800c470:	3201      	adds	r2, #1
 800c472:	fbb3 f9f2 	udiv	r9, r3, r2
 800c476:	eb0b 0304 	add.w	r3, fp, r4
 800c47a:	9400      	str	r4, [sp, #0]
 800c47c:	eb07 0a04 	add.w	sl, r7, r4
 800c480:	9301      	str	r3, [sp, #4]
 800c482:	f1b9 0f00 	cmp.w	r9, #0
 800c486:	d039      	beq.n	800c4fc <quorem+0xb4>
 800c488:	2500      	movs	r5, #0
 800c48a:	46bc      	mov	ip, r7
 800c48c:	46de      	mov	lr, fp
 800c48e:	462b      	mov	r3, r5
 800c490:	f85c 6b04 	ldr.w	r6, [ip], #4
 800c494:	f8de 2000 	ldr.w	r2, [lr]
 800c498:	b2b4      	uxth	r4, r6
 800c49a:	fb09 5504 	mla	r5, r9, r4, r5
 800c49e:	0c36      	lsrs	r6, r6, #16
 800c4a0:	0c2c      	lsrs	r4, r5, #16
 800c4a2:	fb09 4406 	mla	r4, r9, r6, r4
 800c4a6:	b2ad      	uxth	r5, r5
 800c4a8:	1b5b      	subs	r3, r3, r5
 800c4aa:	b2a6      	uxth	r6, r4
 800c4ac:	fa13 f382 	uxtah	r3, r3, r2
 800c4b0:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800c4b4:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800c4be:	45e2      	cmp	sl, ip
 800c4c0:	f84e 3b04 	str.w	r3, [lr], #4
 800c4c4:	ea4f 4514 	mov.w	r5, r4, lsr #16
 800c4c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 800c4cc:	d2e0      	bcs.n	800c490 <quorem+0x48>
 800c4ce:	9b00      	ldr	r3, [sp, #0]
 800c4d0:	f85b 3003 	ldr.w	r3, [fp, r3]
 800c4d4:	b993      	cbnz	r3, 800c4fc <quorem+0xb4>
 800c4d6:	9c01      	ldr	r4, [sp, #4]
 800c4d8:	1f23      	subs	r3, r4, #4
 800c4da:	459b      	cmp	fp, r3
 800c4dc:	d20c      	bcs.n	800c4f8 <quorem+0xb0>
 800c4de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c4e2:	b94b      	cbnz	r3, 800c4f8 <quorem+0xb0>
 800c4e4:	f1a4 0308 	sub.w	r3, r4, #8
 800c4e8:	e002      	b.n	800c4f0 <quorem+0xa8>
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	3b04      	subs	r3, #4
 800c4ee:	b91a      	cbnz	r2, 800c4f8 <quorem+0xb0>
 800c4f0:	459b      	cmp	fp, r3
 800c4f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4f6:	d3f8      	bcc.n	800c4ea <quorem+0xa2>
 800c4f8:	f8c0 8010 	str.w	r8, [r0, #16]
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	f001 f9e1 	bl	800d8c4 <__mcmp>
 800c502:	2800      	cmp	r0, #0
 800c504:	db2e      	blt.n	800c564 <quorem+0x11c>
 800c506:	f109 0901 	add.w	r9, r9, #1
 800c50a:	465d      	mov	r5, fp
 800c50c:	2300      	movs	r3, #0
 800c50e:	f857 1b04 	ldr.w	r1, [r7], #4
 800c512:	6828      	ldr	r0, [r5, #0]
 800c514:	b28a      	uxth	r2, r1
 800c516:	1a9a      	subs	r2, r3, r2
 800c518:	0c09      	lsrs	r1, r1, #16
 800c51a:	fa12 f280 	uxtah	r2, r2, r0
 800c51e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800c522:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800c526:	b291      	uxth	r1, r2
 800c528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c52c:	45ba      	cmp	sl, r7
 800c52e:	f845 1b04 	str.w	r1, [r5], #4
 800c532:	ea4f 4323 	mov.w	r3, r3, asr #16
 800c536:	d2ea      	bcs.n	800c50e <quorem+0xc6>
 800c538:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800c53c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 800c540:	b982      	cbnz	r2, 800c564 <quorem+0x11c>
 800c542:	1f1a      	subs	r2, r3, #4
 800c544:	4593      	cmp	fp, r2
 800c546:	d20b      	bcs.n	800c560 <quorem+0x118>
 800c548:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800c54c:	b942      	cbnz	r2, 800c560 <quorem+0x118>
 800c54e:	3b08      	subs	r3, #8
 800c550:	e002      	b.n	800c558 <quorem+0x110>
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	3b04      	subs	r3, #4
 800c556:	b91a      	cbnz	r2, 800c560 <quorem+0x118>
 800c558:	459b      	cmp	fp, r3
 800c55a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c55e:	d3f8      	bcc.n	800c552 <quorem+0x10a>
 800c560:	f8c4 8010 	str.w	r8, [r4, #16]
 800c564:	4648      	mov	r0, r9
 800c566:	b003      	add	sp, #12
 800c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56c:	2000      	movs	r0, #0
 800c56e:	4770      	bx	lr

0800c570 <_dtoa_r>:
 800c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800c576:	b099      	sub	sp, #100	; 0x64
 800c578:	4681      	mov	r9, r0
 800c57a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c57c:	4692      	mov	sl, r2
 800c57e:	469b      	mov	fp, r3
 800c580:	b149      	cbz	r1, 800c596 <_dtoa_r+0x26>
 800c582:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c584:	604a      	str	r2, [r1, #4]
 800c586:	2301      	movs	r3, #1
 800c588:	4093      	lsls	r3, r2
 800c58a:	608b      	str	r3, [r1, #8]
 800c58c:	f000 ffb8 	bl	800d500 <_Bfree>
 800c590:	2300      	movs	r3, #0
 800c592:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800c596:	f1bb 0f00 	cmp.w	fp, #0
 800c59a:	46d8      	mov	r8, fp
 800c59c:	db33      	blt.n	800c606 <_dtoa_r+0x96>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	4ba3      	ldr	r3, [pc, #652]	; (800c830 <_dtoa_r+0x2c0>)
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	ea08 0303 	and.w	r3, r8, r3
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d014      	beq.n	800c5d8 <_dtoa_r+0x68>
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	4650      	mov	r0, sl
 800c5b4:	4659      	mov	r1, fp
 800c5b6:	f7f4 fbc3 	bl	8000d40 <__aeabi_dcmpeq>
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	b348      	cbz	r0, 800c612 <_dtoa_r+0xa2>
 800c5be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f000 80c2 	beq.w	800c750 <_dtoa_r+0x1e0>
 800c5cc:	4899      	ldr	r0, [pc, #612]	; (800c834 <_dtoa_r+0x2c4>)
 800c5ce:	6018      	str	r0, [r3, #0]
 800c5d0:	3801      	subs	r0, #1
 800c5d2:	b019      	add	sp, #100	; 0x64
 800c5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c5da:	f242 730f 	movw	r3, #9999	; 0x270f
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	f1ba 0f00 	cmp.w	sl, #0
 800c5e4:	f000 809f 	beq.w	800c726 <_dtoa_r+0x1b6>
 800c5e8:	4893      	ldr	r0, [pc, #588]	; (800c838 <_dtoa_r+0x2c8>)
 800c5ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d0f0      	beq.n	800c5d2 <_dtoa_r+0x62>
 800c5f0:	78c3      	ldrb	r3, [r0, #3]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f000 80ae 	beq.w	800c754 <_dtoa_r+0x1e4>
 800c5f8:	f100 0308 	add.w	r3, r0, #8
 800c5fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c5fe:	6013      	str	r3, [r2, #0]
 800c600:	b019      	add	sp, #100	; 0x64
 800c602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c606:	2301      	movs	r3, #1
 800c608:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	46c3      	mov	fp, r8
 800c610:	e7c7      	b.n	800c5a2 <_dtoa_r+0x32>
 800c612:	aa16      	add	r2, sp, #88	; 0x58
 800c614:	ab17      	add	r3, sp, #92	; 0x5c
 800c616:	9201      	str	r2, [sp, #4]
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	4652      	mov	r2, sl
 800c61c:	465b      	mov	r3, fp
 800c61e:	4648      	mov	r0, r9
 800c620:	f001 f9fc 	bl	800da1c <__d2b>
 800c624:	ea5f 5418 	movs.w	r4, r8, lsr #20
 800c628:	9008      	str	r0, [sp, #32]
 800c62a:	f040 8085 	bne.w	800c738 <_dtoa_r+0x1c8>
 800c62e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800c630:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c632:	442c      	add	r4, r5
 800c634:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c638:	2b20      	cmp	r3, #32
 800c63a:	f340 8289 	ble.w	800cb50 <_dtoa_r+0x5e0>
 800c63e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800c642:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800c646:	fa08 f803 	lsl.w	r8, r8, r3
 800c64a:	fa2a f000 	lsr.w	r0, sl, r0
 800c64e:	ea40 0008 	orr.w	r0, r0, r8
 800c652:	f7f4 f897 	bl	8000784 <__aeabi_ui2d>
 800c656:	2301      	movs	r3, #1
 800c658:	3c01      	subs	r4, #1
 800c65a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c65e:	930d      	str	r3, [sp, #52]	; 0x34
 800c660:	2200      	movs	r2, #0
 800c662:	4b76      	ldr	r3, [pc, #472]	; (800c83c <_dtoa_r+0x2cc>)
 800c664:	f7f3 ff50 	bl	8000508 <__aeabi_dsub>
 800c668:	a36b      	add	r3, pc, #428	; (adr r3, 800c818 <_dtoa_r+0x2a8>)
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	f7f4 f8ff 	bl	8000870 <__aeabi_dmul>
 800c672:	a36b      	add	r3, pc, #428	; (adr r3, 800c820 <_dtoa_r+0x2b0>)
 800c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c678:	f7f3 ff48 	bl	800050c <__adddf3>
 800c67c:	4606      	mov	r6, r0
 800c67e:	4620      	mov	r0, r4
 800c680:	460f      	mov	r7, r1
 800c682:	f7f4 f88f 	bl	80007a4 <__aeabi_i2d>
 800c686:	a368      	add	r3, pc, #416	; (adr r3, 800c828 <_dtoa_r+0x2b8>)
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	f7f4 f8f0 	bl	8000870 <__aeabi_dmul>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	4630      	mov	r0, r6
 800c696:	4639      	mov	r1, r7
 800c698:	f7f3 ff38 	bl	800050c <__adddf3>
 800c69c:	4606      	mov	r6, r0
 800c69e:	460f      	mov	r7, r1
 800c6a0:	f7f4 fb96 	bl	8000dd0 <__aeabi_d2iz>
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	9004      	str	r0, [sp, #16]
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	4639      	mov	r1, r7
 800c6ae:	f7f4 fb51 	bl	8000d54 <__aeabi_dcmplt>
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	f040 8227 	bne.w	800cb06 <_dtoa_r+0x596>
 800c6b8:	9e04      	ldr	r6, [sp, #16]
 800c6ba:	2e16      	cmp	r6, #22
 800c6bc:	f200 8220 	bhi.w	800cb00 <_dtoa_r+0x590>
 800c6c0:	4b5f      	ldr	r3, [pc, #380]	; (800c840 <_dtoa_r+0x2d0>)
 800c6c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c6c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6ca:	4652      	mov	r2, sl
 800c6cc:	465b      	mov	r3, fp
 800c6ce:	f7f4 fb5f 	bl	8000d90 <__aeabi_dcmpgt>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	f000 8241 	beq.w	800cb5a <_dtoa_r+0x5ea>
 800c6d8:	1e73      	subs	r3, r6, #1
 800c6da:	9304      	str	r3, [sp, #16]
 800c6dc:	2300      	movs	r3, #0
 800c6de:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6e0:	1b2c      	subs	r4, r5, r4
 800c6e2:	f1b4 0801 	subs.w	r8, r4, #1
 800c6e6:	f100 8229 	bmi.w	800cb3c <_dtoa_r+0x5cc>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	9305      	str	r3, [sp, #20]
 800c6ee:	9b04      	ldr	r3, [sp, #16]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f2c0 821a 	blt.w	800cb2a <_dtoa_r+0x5ba>
 800c6f6:	4498      	add	r8, r3
 800c6f8:	930a      	str	r3, [sp, #40]	; 0x28
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	9302      	str	r3, [sp, #8]
 800c6fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c700:	2b09      	cmp	r3, #9
 800c702:	d829      	bhi.n	800c758 <_dtoa_r+0x1e8>
 800c704:	2b05      	cmp	r3, #5
 800c706:	f340 8643 	ble.w	800d390 <_dtoa_r+0xe20>
 800c70a:	3b04      	subs	r3, #4
 800c70c:	9322      	str	r3, [sp, #136]	; 0x88
 800c70e:	2500      	movs	r5, #0
 800c710:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c712:	3b02      	subs	r3, #2
 800c714:	2b03      	cmp	r3, #3
 800c716:	f200 8622 	bhi.w	800d35e <_dtoa_r+0xdee>
 800c71a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c71e:	032a      	.short	0x032a
 800c720:	03350223 	.word	0x03350223
 800c724:	044f      	.short	0x044f
 800c726:	4b44      	ldr	r3, [pc, #272]	; (800c838 <_dtoa_r+0x2c8>)
 800c728:	4a46      	ldr	r2, [pc, #280]	; (800c844 <_dtoa_r+0x2d4>)
 800c72a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c72e:	2800      	cmp	r0, #0
 800c730:	bf14      	ite	ne
 800c732:	4618      	movne	r0, r3
 800c734:	4610      	moveq	r0, r2
 800c736:	e758      	b.n	800c5ea <_dtoa_r+0x7a>
 800c738:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c73c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c740:	950d      	str	r5, [sp, #52]	; 0x34
 800c742:	4650      	mov	r0, sl
 800c744:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c748:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c74c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800c74e:	e787      	b.n	800c660 <_dtoa_r+0xf0>
 800c750:	483d      	ldr	r0, [pc, #244]	; (800c848 <_dtoa_r+0x2d8>)
 800c752:	e73e      	b.n	800c5d2 <_dtoa_r+0x62>
 800c754:	1cc3      	adds	r3, r0, #3
 800c756:	e751      	b.n	800c5fc <_dtoa_r+0x8c>
 800c758:	2100      	movs	r1, #0
 800c75a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800c75e:	4648      	mov	r0, r9
 800c760:	9122      	str	r1, [sp, #136]	; 0x88
 800c762:	f000 fea7 	bl	800d4b4 <_Balloc>
 800c766:	f04f 33ff 	mov.w	r3, #4294967295
 800c76a:	9306      	str	r3, [sp, #24]
 800c76c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c76e:	930c      	str	r3, [sp, #48]	; 0x30
 800c770:	2301      	movs	r3, #1
 800c772:	9007      	str	r0, [sp, #28]
 800c774:	9223      	str	r2, [sp, #140]	; 0x8c
 800c776:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800c77a:	9309      	str	r3, [sp, #36]	; 0x24
 800c77c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f2c0 80d0 	blt.w	800c924 <_dtoa_r+0x3b4>
 800c784:	9a04      	ldr	r2, [sp, #16]
 800c786:	2a0e      	cmp	r2, #14
 800c788:	f300 80cc 	bgt.w	800c924 <_dtoa_r+0x3b4>
 800c78c:	4b2c      	ldr	r3, [pc, #176]	; (800c840 <_dtoa_r+0x2d0>)
 800c78e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c792:	ed93 7b00 	vldr	d7, [r3]
 800c796:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c79e:	f2c0 82fe 	blt.w	800cd9e <_dtoa_r+0x82e>
 800c7a2:	4656      	mov	r6, sl
 800c7a4:	465f      	mov	r7, fp
 800c7a6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	4652      	mov	r2, sl
 800c7ae:	465b      	mov	r3, fp
 800c7b0:	4639      	mov	r1, r7
 800c7b2:	f7f4 f987 	bl	8000ac4 <__aeabi_ddiv>
 800c7b6:	f7f4 fb0b 	bl	8000dd0 <__aeabi_d2iz>
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	f7f3 fff2 	bl	80007a4 <__aeabi_i2d>
 800c7c0:	4652      	mov	r2, sl
 800c7c2:	465b      	mov	r3, fp
 800c7c4:	f7f4 f854 	bl	8000870 <__aeabi_dmul>
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	4639      	mov	r1, r7
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f7f3 fe9a 	bl	8000508 <__aeabi_dsub>
 800c7d4:	9d07      	ldr	r5, [sp, #28]
 800c7d6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800c7da:	702b      	strb	r3, [r5, #0]
 800c7dc:	9b06      	ldr	r3, [sp, #24]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	4606      	mov	r6, r0
 800c7e2:	460f      	mov	r7, r1
 800c7e4:	f105 0501 	add.w	r5, r5, #1
 800c7e8:	d061      	beq.n	800c8ae <_dtoa_r+0x33e>
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	4b17      	ldr	r3, [pc, #92]	; (800c84c <_dtoa_r+0x2dc>)
 800c7ee:	f7f4 f83f 	bl	8000870 <__aeabi_dmul>
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	460f      	mov	r7, r1
 800c7fa:	f7f4 faa1 	bl	8000d40 <__aeabi_dcmpeq>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d17d      	bne.n	800c8fe <_dtoa_r+0x38e>
 800c802:	f8cd 9014 	str.w	r9, [sp, #20]
 800c806:	f8dd a018 	ldr.w	sl, [sp, #24]
 800c80a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800c80e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c812:	e028      	b.n	800c866 <_dtoa_r+0x2f6>
 800c814:	f3af 8000 	nop.w
 800c818:	636f4361 	.word	0x636f4361
 800c81c:	3fd287a7 	.word	0x3fd287a7
 800c820:	8b60c8b3 	.word	0x8b60c8b3
 800c824:	3fc68a28 	.word	0x3fc68a28
 800c828:	509f79fb 	.word	0x509f79fb
 800c82c:	3fd34413 	.word	0x3fd34413
 800c830:	7ff00000 	.word	0x7ff00000
 800c834:	0800ee59 	.word	0x0800ee59
 800c838:	0800ef7c 	.word	0x0800ef7c
 800c83c:	3ff80000 	.word	0x3ff80000
 800c840:	0800ef80 	.word	0x0800ef80
 800c844:	0800ef70 	.word	0x0800ef70
 800c848:	0800ee58 	.word	0x0800ee58
 800c84c:	40240000 	.word	0x40240000
 800c850:	f7f4 f80e 	bl	8000870 <__aeabi_dmul>
 800c854:	2200      	movs	r2, #0
 800c856:	2300      	movs	r3, #0
 800c858:	4606      	mov	r6, r0
 800c85a:	460f      	mov	r7, r1
 800c85c:	f7f4 fa70 	bl	8000d40 <__aeabi_dcmpeq>
 800c860:	2800      	cmp	r0, #0
 800c862:	f040 83ae 	bne.w	800cfc2 <_dtoa_r+0xa52>
 800c866:	4642      	mov	r2, r8
 800c868:	464b      	mov	r3, r9
 800c86a:	4630      	mov	r0, r6
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f4 f929 	bl	8000ac4 <__aeabi_ddiv>
 800c872:	f7f4 faad 	bl	8000dd0 <__aeabi_d2iz>
 800c876:	4604      	mov	r4, r0
 800c878:	f7f3 ff94 	bl	80007a4 <__aeabi_i2d>
 800c87c:	4642      	mov	r2, r8
 800c87e:	464b      	mov	r3, r9
 800c880:	f7f3 fff6 	bl	8000870 <__aeabi_dmul>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4630      	mov	r0, r6
 800c88a:	4639      	mov	r1, r7
 800c88c:	f7f3 fe3c 	bl	8000508 <__aeabi_dsub>
 800c890:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800c894:	f805 eb01 	strb.w	lr, [r5], #1
 800c898:	ebcb 0e05 	rsb	lr, fp, r5
 800c89c:	45d6      	cmp	lr, sl
 800c89e:	4606      	mov	r6, r0
 800c8a0:	460f      	mov	r7, r1
 800c8a2:	f04f 0200 	mov.w	r2, #0
 800c8a6:	4bae      	ldr	r3, [pc, #696]	; (800cb60 <_dtoa_r+0x5f0>)
 800c8a8:	d1d2      	bne.n	800c850 <_dtoa_r+0x2e0>
 800c8aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c8ae:	4632      	mov	r2, r6
 800c8b0:	463b      	mov	r3, r7
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	4639      	mov	r1, r7
 800c8b6:	f7f3 fe29 	bl	800050c <__adddf3>
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460f      	mov	r7, r1
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8c6:	f7f4 fa45 	bl	8000d54 <__aeabi_dcmplt>
 800c8ca:	b940      	cbnz	r0, 800c8de <_dtoa_r+0x36e>
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	463b      	mov	r3, r7
 800c8d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8d4:	f7f4 fa34 	bl	8000d40 <__aeabi_dcmpeq>
 800c8d8:	b188      	cbz	r0, 800c8fe <_dtoa_r+0x38e>
 800c8da:	07e3      	lsls	r3, r4, #31
 800c8dc:	d50f      	bpl.n	800c8fe <_dtoa_r+0x38e>
 800c8de:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800c8e2:	9a07      	ldr	r2, [sp, #28]
 800c8e4:	1e6b      	subs	r3, r5, #1
 800c8e6:	e004      	b.n	800c8f2 <_dtoa_r+0x382>
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	f000 83fc 	beq.w	800d0e6 <_dtoa_r+0xb76>
 800c8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8f2:	2c39      	cmp	r4, #57	; 0x39
 800c8f4:	f103 0501 	add.w	r5, r3, #1
 800c8f8:	d0f6      	beq.n	800c8e8 <_dtoa_r+0x378>
 800c8fa:	3401      	adds	r4, #1
 800c8fc:	701c      	strb	r4, [r3, #0]
 800c8fe:	9908      	ldr	r1, [sp, #32]
 800c900:	4648      	mov	r0, r9
 800c902:	f000 fdfd 	bl	800d500 <_Bfree>
 800c906:	2200      	movs	r2, #0
 800c908:	9b04      	ldr	r3, [sp, #16]
 800c90a:	702a      	strb	r2, [r5, #0]
 800c90c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c90e:	3301      	adds	r3, #1
 800c910:	6013      	str	r3, [r2, #0]
 800c912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c914:	2b00      	cmp	r3, #0
 800c916:	f000 839b 	beq.w	800d050 <_dtoa_r+0xae0>
 800c91a:	9807      	ldr	r0, [sp, #28]
 800c91c:	601d      	str	r5, [r3, #0]
 800c91e:	b019      	add	sp, #100	; 0x64
 800c920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c926:	2a00      	cmp	r2, #0
 800c928:	f000 810e 	beq.w	800cb48 <_dtoa_r+0x5d8>
 800c92c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c92e:	2a01      	cmp	r2, #1
 800c930:	f340 8257 	ble.w	800cde2 <_dtoa_r+0x872>
 800c934:	9b06      	ldr	r3, [sp, #24]
 800c936:	9a02      	ldr	r2, [sp, #8]
 800c938:	1e5f      	subs	r7, r3, #1
 800c93a:	42ba      	cmp	r2, r7
 800c93c:	f2c0 838b 	blt.w	800d056 <_dtoa_r+0xae6>
 800c940:	1bd7      	subs	r7, r2, r7
 800c942:	9b06      	ldr	r3, [sp, #24]
 800c944:	2b00      	cmp	r3, #0
 800c946:	f2c0 8480 	blt.w	800d24a <_dtoa_r+0xcda>
 800c94a:	9d05      	ldr	r5, [sp, #20]
 800c94c:	9b06      	ldr	r3, [sp, #24]
 800c94e:	9a05      	ldr	r2, [sp, #20]
 800c950:	2101      	movs	r1, #1
 800c952:	441a      	add	r2, r3
 800c954:	4648      	mov	r0, r9
 800c956:	9205      	str	r2, [sp, #20]
 800c958:	4498      	add	r8, r3
 800c95a:	f000 fe69 	bl	800d630 <__i2b>
 800c95e:	4606      	mov	r6, r0
 800c960:	b165      	cbz	r5, 800c97c <_dtoa_r+0x40c>
 800c962:	f1b8 0f00 	cmp.w	r8, #0
 800c966:	dd09      	ble.n	800c97c <_dtoa_r+0x40c>
 800c968:	4545      	cmp	r5, r8
 800c96a:	9a05      	ldr	r2, [sp, #20]
 800c96c:	462b      	mov	r3, r5
 800c96e:	bfa8      	it	ge
 800c970:	4643      	movge	r3, r8
 800c972:	1ad2      	subs	r2, r2, r3
 800c974:	9205      	str	r2, [sp, #20]
 800c976:	1aed      	subs	r5, r5, r3
 800c978:	ebc3 0808 	rsb	r8, r3, r8
 800c97c:	9b02      	ldr	r3, [sp, #8]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f340 82f5 	ble.w	800cf6e <_dtoa_r+0x9fe>
 800c984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c986:	2a00      	cmp	r2, #0
 800c988:	f000 8202 	beq.w	800cd90 <_dtoa_r+0x820>
 800c98c:	2f00      	cmp	r7, #0
 800c98e:	f000 81ff 	beq.w	800cd90 <_dtoa_r+0x820>
 800c992:	4631      	mov	r1, r6
 800c994:	463a      	mov	r2, r7
 800c996:	4648      	mov	r0, r9
 800c998:	f000 feec 	bl	800d774 <__pow5mult>
 800c99c:	9a08      	ldr	r2, [sp, #32]
 800c99e:	4601      	mov	r1, r0
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	4648      	mov	r0, r9
 800c9a4:	f000 fe4e 	bl	800d644 <__multiply>
 800c9a8:	9908      	ldr	r1, [sp, #32]
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	4648      	mov	r0, r9
 800c9ae:	f000 fda7 	bl	800d500 <_Bfree>
 800c9b2:	9b02      	ldr	r3, [sp, #8]
 800c9b4:	1bdb      	subs	r3, r3, r7
 800c9b6:	9302      	str	r3, [sp, #8]
 800c9b8:	f040 81e9 	bne.w	800cd8e <_dtoa_r+0x81e>
 800c9bc:	2101      	movs	r1, #1
 800c9be:	4648      	mov	r0, r9
 800c9c0:	f000 fe36 	bl	800d630 <__i2b>
 800c9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9c6:	9002      	str	r0, [sp, #8]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 8215 	beq.w	800cdf8 <_dtoa_r+0x888>
 800c9ce:	4601      	mov	r1, r0
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	4648      	mov	r0, r9
 800c9d4:	f000 fece 	bl	800d774 <__pow5mult>
 800c9d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9da:	9002      	str	r0, [sp, #8]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	f340 82f3 	ble.w	800cfc8 <_dtoa_r+0xa58>
 800c9e2:	2700      	movs	r7, #0
 800c9e4:	9a02      	ldr	r2, [sp, #8]
 800c9e6:	6913      	ldr	r3, [r2, #16]
 800c9e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9ec:	6918      	ldr	r0, [r3, #16]
 800c9ee:	f000 fdd1 	bl	800d594 <__hi0bits>
 800c9f2:	f1c0 0020 	rsb	r0, r0, #32
 800c9f6:	4440      	add	r0, r8
 800c9f8:	f010 001f 	ands.w	r0, r0, #31
 800c9fc:	f000 81fa 	beq.w	800cdf4 <_dtoa_r+0x884>
 800ca00:	f1c0 0320 	rsb	r3, r0, #32
 800ca04:	2b04      	cmp	r3, #4
 800ca06:	f340 84bd 	ble.w	800d384 <_dtoa_r+0xe14>
 800ca0a:	f1c0 001c 	rsb	r0, r0, #28
 800ca0e:	9b05      	ldr	r3, [sp, #20]
 800ca10:	4403      	add	r3, r0
 800ca12:	9305      	str	r3, [sp, #20]
 800ca14:	4405      	add	r5, r0
 800ca16:	4480      	add	r8, r0
 800ca18:	9b05      	ldr	r3, [sp, #20]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	dd05      	ble.n	800ca2a <_dtoa_r+0x4ba>
 800ca1e:	4621      	mov	r1, r4
 800ca20:	461a      	mov	r2, r3
 800ca22:	4648      	mov	r0, r9
 800ca24:	f000 fef6 	bl	800d814 <__lshift>
 800ca28:	4604      	mov	r4, r0
 800ca2a:	f1b8 0f00 	cmp.w	r8, #0
 800ca2e:	dd05      	ble.n	800ca3c <_dtoa_r+0x4cc>
 800ca30:	4642      	mov	r2, r8
 800ca32:	9902      	ldr	r1, [sp, #8]
 800ca34:	4648      	mov	r0, r9
 800ca36:	f000 feed 	bl	800d814 <__lshift>
 800ca3a:	9002      	str	r0, [sp, #8]
 800ca3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f040 827a 	bne.w	800cf38 <_dtoa_r+0x9c8>
 800ca44:	9b06      	ldr	r3, [sp, #24]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f340 8293 	ble.w	800cf72 <_dtoa_r+0xa02>
 800ca4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f040 81f4 	bne.w	800ce3c <_dtoa_r+0x8cc>
 800ca54:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800ca58:	9f06      	ldr	r7, [sp, #24]
 800ca5a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ca5e:	465d      	mov	r5, fp
 800ca60:	e002      	b.n	800ca68 <_dtoa_r+0x4f8>
 800ca62:	f000 fd57 	bl	800d514 <__multadd>
 800ca66:	4604      	mov	r4, r0
 800ca68:	4641      	mov	r1, r8
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f7ff fcec 	bl	800c448 <quorem>
 800ca70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ca74:	f805 ab01 	strb.w	sl, [r5], #1
 800ca78:	ebcb 0305 	rsb	r3, fp, r5
 800ca7c:	42bb      	cmp	r3, r7
 800ca7e:	f04f 020a 	mov.w	r2, #10
 800ca82:	f04f 0300 	mov.w	r3, #0
 800ca86:	4621      	mov	r1, r4
 800ca88:	4648      	mov	r0, r9
 800ca8a:	dbea      	blt.n	800ca62 <_dtoa_r+0x4f2>
 800ca8c:	9b07      	ldr	r3, [sp, #28]
 800ca8e:	9a06      	ldr	r2, [sp, #24]
 800ca90:	2a01      	cmp	r2, #1
 800ca92:	bfac      	ite	ge
 800ca94:	189b      	addge	r3, r3, r2
 800ca96:	3301      	addlt	r3, #1
 800ca98:	461d      	mov	r5, r3
 800ca9a:	f04f 0b00 	mov.w	fp, #0
 800ca9e:	4621      	mov	r1, r4
 800caa0:	2201      	movs	r2, #1
 800caa2:	4648      	mov	r0, r9
 800caa4:	f000 feb6 	bl	800d814 <__lshift>
 800caa8:	9902      	ldr	r1, [sp, #8]
 800caaa:	9008      	str	r0, [sp, #32]
 800caac:	f000 ff0a 	bl	800d8c4 <__mcmp>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	f340 8305 	ble.w	800d0c0 <_dtoa_r+0xb50>
 800cab6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800caba:	9907      	ldr	r1, [sp, #28]
 800cabc:	1e6b      	subs	r3, r5, #1
 800cabe:	e004      	b.n	800caca <_dtoa_r+0x55a>
 800cac0:	428b      	cmp	r3, r1
 800cac2:	f000 8274 	beq.w	800cfae <_dtoa_r+0xa3e>
 800cac6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800caca:	2a39      	cmp	r2, #57	; 0x39
 800cacc:	f103 0501 	add.w	r5, r3, #1
 800cad0:	d0f6      	beq.n	800cac0 <_dtoa_r+0x550>
 800cad2:	3201      	adds	r2, #1
 800cad4:	701a      	strb	r2, [r3, #0]
 800cad6:	9902      	ldr	r1, [sp, #8]
 800cad8:	4648      	mov	r0, r9
 800cada:	f000 fd11 	bl	800d500 <_Bfree>
 800cade:	2e00      	cmp	r6, #0
 800cae0:	f43f af0d 	beq.w	800c8fe <_dtoa_r+0x38e>
 800cae4:	f1bb 0f00 	cmp.w	fp, #0
 800cae8:	d005      	beq.n	800caf6 <_dtoa_r+0x586>
 800caea:	45b3      	cmp	fp, r6
 800caec:	d003      	beq.n	800caf6 <_dtoa_r+0x586>
 800caee:	4659      	mov	r1, fp
 800caf0:	4648      	mov	r0, r9
 800caf2:	f000 fd05 	bl	800d500 <_Bfree>
 800caf6:	4631      	mov	r1, r6
 800caf8:	4648      	mov	r0, r9
 800cafa:	f000 fd01 	bl	800d500 <_Bfree>
 800cafe:	e6fe      	b.n	800c8fe <_dtoa_r+0x38e>
 800cb00:	2301      	movs	r3, #1
 800cb02:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb04:	e5ec      	b.n	800c6e0 <_dtoa_r+0x170>
 800cb06:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	f7f3 fe4a 	bl	80007a4 <__aeabi_i2d>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	4630      	mov	r0, r6
 800cb16:	4639      	mov	r1, r7
 800cb18:	f7f4 f912 	bl	8000d40 <__aeabi_dcmpeq>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f47f adcb 	bne.w	800c6b8 <_dtoa_r+0x148>
 800cb22:	f108 33ff 	add.w	r3, r8, #4294967295
 800cb26:	9304      	str	r3, [sp, #16]
 800cb28:	e5c6      	b.n	800c6b8 <_dtoa_r+0x148>
 800cb2a:	9a05      	ldr	r2, [sp, #20]
 800cb2c:	9b04      	ldr	r3, [sp, #16]
 800cb2e:	1ad2      	subs	r2, r2, r3
 800cb30:	425b      	negs	r3, r3
 800cb32:	9302      	str	r3, [sp, #8]
 800cb34:	2300      	movs	r3, #0
 800cb36:	9205      	str	r2, [sp, #20]
 800cb38:	930a      	str	r3, [sp, #40]	; 0x28
 800cb3a:	e5e0      	b.n	800c6fe <_dtoa_r+0x18e>
 800cb3c:	f1c8 0300 	rsb	r3, r8, #0
 800cb40:	9305      	str	r3, [sp, #20]
 800cb42:	f04f 0800 	mov.w	r8, #0
 800cb46:	e5d2      	b.n	800c6ee <_dtoa_r+0x17e>
 800cb48:	9f02      	ldr	r7, [sp, #8]
 800cb4a:	9d05      	ldr	r5, [sp, #20]
 800cb4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cb4e:	e707      	b.n	800c960 <_dtoa_r+0x3f0>
 800cb50:	f1c3 0820 	rsb	r8, r3, #32
 800cb54:	fa0a f008 	lsl.w	r0, sl, r8
 800cb58:	e57b      	b.n	800c652 <_dtoa_r+0xe2>
 800cb5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800cb5c:	e5c0      	b.n	800c6e0 <_dtoa_r+0x170>
 800cb5e:	bf00      	nop
 800cb60:	40240000 	.word	0x40240000
 800cb64:	2300      	movs	r3, #0
 800cb66:	9309      	str	r3, [sp, #36]	; 0x24
 800cb68:	9b04      	ldr	r3, [sp, #16]
 800cb6a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cb6c:	4413      	add	r3, r2
 800cb6e:	930c      	str	r3, [sp, #48]	; 0x30
 800cb70:	3301      	adds	r3, #1
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	9306      	str	r3, [sp, #24]
 800cb76:	f340 827d 	ble.w	800d074 <_dtoa_r+0xb04>
 800cb7a:	9c06      	ldr	r4, [sp, #24]
 800cb7c:	4626      	mov	r6, r4
 800cb7e:	2100      	movs	r1, #0
 800cb80:	2e17      	cmp	r6, #23
 800cb82:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800cb86:	d90b      	bls.n	800cba0 <_dtoa_r+0x630>
 800cb88:	2201      	movs	r2, #1
 800cb8a:	2304      	movs	r3, #4
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	f103 0014 	add.w	r0, r3, #20
 800cb92:	42b0      	cmp	r0, r6
 800cb94:	4611      	mov	r1, r2
 800cb96:	f102 0201 	add.w	r2, r2, #1
 800cb9a:	d9f7      	bls.n	800cb8c <_dtoa_r+0x61c>
 800cb9c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800cba0:	4648      	mov	r0, r9
 800cba2:	f000 fc87 	bl	800d4b4 <_Balloc>
 800cba6:	2c0e      	cmp	r4, #14
 800cba8:	9007      	str	r0, [sp, #28]
 800cbaa:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800cbae:	f63f ade5 	bhi.w	800c77c <_dtoa_r+0x20c>
 800cbb2:	2d00      	cmp	r5, #0
 800cbb4:	f43f ade2 	beq.w	800c77c <_dtoa_r+0x20c>
 800cbb8:	9904      	ldr	r1, [sp, #16]
 800cbba:	2900      	cmp	r1, #0
 800cbbc:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 800cbc0:	f340 829a 	ble.w	800d0f8 <_dtoa_r+0xb88>
 800cbc4:	4b90      	ldr	r3, [pc, #576]	; (800ce08 <_dtoa_r+0x898>)
 800cbc6:	f001 020f 	and.w	r2, r1, #15
 800cbca:	110e      	asrs	r6, r1, #4
 800cbcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbd0:	06f0      	lsls	r0, r6, #27
 800cbd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cbd6:	f140 8246 	bpl.w	800d066 <_dtoa_r+0xaf6>
 800cbda:	4b8c      	ldr	r3, [pc, #560]	; (800ce0c <_dtoa_r+0x89c>)
 800cbdc:	4650      	mov	r0, sl
 800cbde:	4659      	mov	r1, fp
 800cbe0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbe4:	f7f3 ff6e 	bl	8000ac4 <__aeabi_ddiv>
 800cbe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cbec:	f006 060f 	and.w	r6, r6, #15
 800cbf0:	f04f 0a03 	mov.w	sl, #3
 800cbf4:	b186      	cbz	r6, 800cc18 <_dtoa_r+0x6a8>
 800cbf6:	4f85      	ldr	r7, [pc, #532]	; (800ce0c <_dtoa_r+0x89c>)
 800cbf8:	07f1      	lsls	r1, r6, #31
 800cbfa:	d509      	bpl.n	800cc10 <_dtoa_r+0x6a0>
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	4629      	mov	r1, r5
 800cc00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc04:	f7f3 fe34 	bl	8000870 <__aeabi_dmul>
 800cc08:	f10a 0a01 	add.w	sl, sl, #1
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	460d      	mov	r5, r1
 800cc10:	1076      	asrs	r6, r6, #1
 800cc12:	f107 0708 	add.w	r7, r7, #8
 800cc16:	d1ef      	bne.n	800cbf8 <_dtoa_r+0x688>
 800cc18:	4622      	mov	r2, r4
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc20:	f7f3 ff50 	bl	8000ac4 <__aeabi_ddiv>
 800cc24:	4606      	mov	r6, r0
 800cc26:	460f      	mov	r7, r1
 800cc28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc2a:	b143      	cbz	r3, 800cc3e <_dtoa_r+0x6ce>
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4b78      	ldr	r3, [pc, #480]	; (800ce10 <_dtoa_r+0x8a0>)
 800cc30:	4630      	mov	r0, r6
 800cc32:	4639      	mov	r1, r7
 800cc34:	f7f4 f88e 	bl	8000d54 <__aeabi_dcmplt>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	f040 831a 	bne.w	800d272 <_dtoa_r+0xd02>
 800cc3e:	4650      	mov	r0, sl
 800cc40:	f7f3 fdb0 	bl	80007a4 <__aeabi_i2d>
 800cc44:	4632      	mov	r2, r6
 800cc46:	463b      	mov	r3, r7
 800cc48:	f7f3 fe12 	bl	8000870 <__aeabi_dmul>
 800cc4c:	4b71      	ldr	r3, [pc, #452]	; (800ce14 <_dtoa_r+0x8a4>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f7f3 fc5c 	bl	800050c <__adddf3>
 800cc54:	9b06      	ldr	r3, [sp, #24]
 800cc56:	4604      	mov	r4, r0
 800cc58:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f000 81db 	beq.w	800d018 <_dtoa_r+0xaa8>
 800cc62:	9b04      	ldr	r3, [sp, #16]
 800cc64:	9314      	str	r3, [sp, #80]	; 0x50
 800cc66:	9b06      	ldr	r3, [sp, #24]
 800cc68:	9310      	str	r3, [sp, #64]	; 0x40
 800cc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	f000 8294 	beq.w	800d19a <_dtoa_r+0xc2a>
 800cc72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc74:	4b64      	ldr	r3, [pc, #400]	; (800ce08 <_dtoa_r+0x898>)
 800cc76:	4968      	ldr	r1, [pc, #416]	; (800ce18 <_dtoa_r+0x8a8>)
 800cc78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc7c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc80:	2000      	movs	r0, #0
 800cc82:	f7f3 ff1f 	bl	8000ac4 <__aeabi_ddiv>
 800cc86:	4622      	mov	r2, r4
 800cc88:	462b      	mov	r3, r5
 800cc8a:	f7f3 fc3d 	bl	8000508 <__aeabi_dsub>
 800cc8e:	4682      	mov	sl, r0
 800cc90:	468b      	mov	fp, r1
 800cc92:	4630      	mov	r0, r6
 800cc94:	4639      	mov	r1, r7
 800cc96:	f7f4 f89b 	bl	8000dd0 <__aeabi_d2iz>
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	f7f3 fd82 	bl	80007a4 <__aeabi_i2d>
 800cca0:	4602      	mov	r2, r0
 800cca2:	460b      	mov	r3, r1
 800cca4:	4630      	mov	r0, r6
 800cca6:	4639      	mov	r1, r7
 800cca8:	f7f3 fc2e 	bl	8000508 <__aeabi_dsub>
 800ccac:	3430      	adds	r4, #48	; 0x30
 800ccae:	9d07      	ldr	r5, [sp, #28]
 800ccb0:	b2e4      	uxtb	r4, r4
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	702c      	strb	r4, [r5, #0]
 800ccb8:	4602      	mov	r2, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	4659      	mov	r1, fp
 800ccc0:	3501      	adds	r5, #1
 800ccc2:	f7f4 f865 	bl	8000d90 <__aeabi_dcmpgt>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d150      	bne.n	800cd6c <_dtoa_r+0x7fc>
 800ccca:	4632      	mov	r2, r6
 800cccc:	463b      	mov	r3, r7
 800ccce:	2000      	movs	r0, #0
 800ccd0:	494f      	ldr	r1, [pc, #316]	; (800ce10 <_dtoa_r+0x8a0>)
 800ccd2:	f7f3 fc19 	bl	8000508 <__aeabi_dsub>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	4650      	mov	r0, sl
 800ccdc:	4659      	mov	r1, fp
 800ccde:	f7f4 f857 	bl	8000d90 <__aeabi_dcmpgt>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	f040 8308 	bne.w	800d2f8 <_dtoa_r+0xd88>
 800cce8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ccea:	2a01      	cmp	r2, #1
 800ccec:	f340 81f7 	ble.w	800d0de <_dtoa_r+0xb6e>
 800ccf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccf2:	9a07      	ldr	r2, [sp, #28]
 800ccf4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ccf8:	4413      	add	r3, r2
 800ccfa:	4698      	mov	r8, r3
 800ccfc:	e00d      	b.n	800cd1a <_dtoa_r+0x7aa>
 800ccfe:	2000      	movs	r0, #0
 800cd00:	4943      	ldr	r1, [pc, #268]	; (800ce10 <_dtoa_r+0x8a0>)
 800cd02:	f7f3 fc01 	bl	8000508 <__aeabi_dsub>
 800cd06:	4652      	mov	r2, sl
 800cd08:	465b      	mov	r3, fp
 800cd0a:	f7f4 f823 	bl	8000d54 <__aeabi_dcmplt>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	f040 82f2 	bne.w	800d2f8 <_dtoa_r+0xd88>
 800cd14:	4545      	cmp	r5, r8
 800cd16:	f000 81e0 	beq.w	800d0da <_dtoa_r+0xb6a>
 800cd1a:	4650      	mov	r0, sl
 800cd1c:	4659      	mov	r1, fp
 800cd1e:	2200      	movs	r2, #0
 800cd20:	4b3e      	ldr	r3, [pc, #248]	; (800ce1c <_dtoa_r+0x8ac>)
 800cd22:	f7f3 fda5 	bl	8000870 <__aeabi_dmul>
 800cd26:	2200      	movs	r2, #0
 800cd28:	4b3c      	ldr	r3, [pc, #240]	; (800ce1c <_dtoa_r+0x8ac>)
 800cd2a:	4682      	mov	sl, r0
 800cd2c:	468b      	mov	fp, r1
 800cd2e:	4630      	mov	r0, r6
 800cd30:	4639      	mov	r1, r7
 800cd32:	f7f3 fd9d 	bl	8000870 <__aeabi_dmul>
 800cd36:	460f      	mov	r7, r1
 800cd38:	4606      	mov	r6, r0
 800cd3a:	f7f4 f849 	bl	8000dd0 <__aeabi_d2iz>
 800cd3e:	4604      	mov	r4, r0
 800cd40:	f7f3 fd30 	bl	80007a4 <__aeabi_i2d>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	4630      	mov	r0, r6
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	f7f3 fbdc 	bl	8000508 <__aeabi_dsub>
 800cd50:	3430      	adds	r4, #48	; 0x30
 800cd52:	b2e4      	uxtb	r4, r4
 800cd54:	4652      	mov	r2, sl
 800cd56:	465b      	mov	r3, fp
 800cd58:	f805 4b01 	strb.w	r4, [r5], #1
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	460f      	mov	r7, r1
 800cd60:	f7f3 fff8 	bl	8000d54 <__aeabi_dcmplt>
 800cd64:	4632      	mov	r2, r6
 800cd66:	463b      	mov	r3, r7
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d0c8      	beq.n	800ccfe <_dtoa_r+0x78e>
 800cd6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd6e:	9304      	str	r3, [sp, #16]
 800cd70:	e5c5      	b.n	800c8fe <_dtoa_r+0x38e>
 800cd72:	2300      	movs	r3, #0
 800cd74:	9309      	str	r3, [sp, #36]	; 0x24
 800cd76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f340 8180 	ble.w	800d07e <_dtoa_r+0xb0e>
 800cd7e:	461e      	mov	r6, r3
 800cd80:	461c      	mov	r4, r3
 800cd82:	930c      	str	r3, [sp, #48]	; 0x30
 800cd84:	9306      	str	r3, [sp, #24]
 800cd86:	e6fa      	b.n	800cb7e <_dtoa_r+0x60e>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd8c:	e7f3      	b.n	800cd76 <_dtoa_r+0x806>
 800cd8e:	9408      	str	r4, [sp, #32]
 800cd90:	9a02      	ldr	r2, [sp, #8]
 800cd92:	9908      	ldr	r1, [sp, #32]
 800cd94:	4648      	mov	r0, r9
 800cd96:	f000 fced 	bl	800d774 <__pow5mult>
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	e60e      	b.n	800c9bc <_dtoa_r+0x44c>
 800cd9e:	9b06      	ldr	r3, [sp, #24]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f73f acfe 	bgt.w	800c7a2 <_dtoa_r+0x232>
 800cda6:	f040 814f 	bne.w	800d048 <_dtoa_r+0xad8>
 800cdaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	4b1b      	ldr	r3, [pc, #108]	; (800ce20 <_dtoa_r+0x8b0>)
 800cdb2:	f7f3 fd5d 	bl	8000870 <__aeabi_dmul>
 800cdb6:	465b      	mov	r3, fp
 800cdb8:	4652      	mov	r2, sl
 800cdba:	f7f3 ffdf 	bl	8000d7c <__aeabi_dcmpge>
 800cdbe:	9b06      	ldr	r3, [sp, #24]
 800cdc0:	9302      	str	r3, [sp, #8]
 800cdc2:	461e      	mov	r6, r3
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	f000 80ea 	beq.w	800cf9e <_dtoa_r+0xa2e>
 800cdca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cdcc:	9d07      	ldr	r5, [sp, #28]
 800cdce:	43db      	mvns	r3, r3
 800cdd0:	9304      	str	r3, [sp, #16]
 800cdd2:	9902      	ldr	r1, [sp, #8]
 800cdd4:	4648      	mov	r0, r9
 800cdd6:	f000 fb93 	bl	800d500 <_Bfree>
 800cdda:	2e00      	cmp	r6, #0
 800cddc:	f43f ad8f 	beq.w	800c8fe <_dtoa_r+0x38e>
 800cde0:	e689      	b.n	800caf6 <_dtoa_r+0x586>
 800cde2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cde4:	2a00      	cmp	r2, #0
 800cde6:	f000 8238 	beq.w	800d25a <_dtoa_r+0xcea>
 800cdea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdee:	9f02      	ldr	r7, [sp, #8]
 800cdf0:	9d05      	ldr	r5, [sp, #20]
 800cdf2:	e5ac      	b.n	800c94e <_dtoa_r+0x3de>
 800cdf4:	201c      	movs	r0, #28
 800cdf6:	e60a      	b.n	800ca0e <_dtoa_r+0x49e>
 800cdf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	f340 8280 	ble.w	800d300 <_dtoa_r+0xd90>
 800ce00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ce02:	2001      	movs	r0, #1
 800ce04:	e5f7      	b.n	800c9f6 <_dtoa_r+0x486>
 800ce06:	bf00      	nop
 800ce08:	0800ef80 	.word	0x0800ef80
 800ce0c:	0800f048 	.word	0x0800f048
 800ce10:	3ff00000 	.word	0x3ff00000
 800ce14:	401c0000 	.word	0x401c0000
 800ce18:	3fe00000 	.word	0x3fe00000
 800ce1c:	40240000 	.word	0x40240000
 800ce20:	40140000 	.word	0x40140000
 800ce24:	4631      	mov	r1, r6
 800ce26:	2300      	movs	r3, #0
 800ce28:	220a      	movs	r2, #10
 800ce2a:	4648      	mov	r0, r9
 800ce2c:	f000 fb72 	bl	800d514 <__multadd>
 800ce30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	4606      	mov	r6, r0
 800ce36:	f340 828d 	ble.w	800d354 <_dtoa_r+0xde4>
 800ce3a:	9306      	str	r3, [sp, #24]
 800ce3c:	2d00      	cmp	r5, #0
 800ce3e:	dd05      	ble.n	800ce4c <_dtoa_r+0x8dc>
 800ce40:	4631      	mov	r1, r6
 800ce42:	462a      	mov	r2, r5
 800ce44:	4648      	mov	r0, r9
 800ce46:	f000 fce5 	bl	800d814 <__lshift>
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	2f00      	cmp	r7, #0
 800ce4e:	f040 817c 	bne.w	800d14a <_dtoa_r+0xbda>
 800ce52:	46b0      	mov	r8, r6
 800ce54:	9b06      	ldr	r3, [sp, #24]
 800ce56:	9a07      	ldr	r2, [sp, #28]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	18d3      	adds	r3, r2, r3
 800ce5c:	9308      	str	r3, [sp, #32]
 800ce5e:	f00a 0301 	and.w	r3, sl, #1
 800ce62:	9309      	str	r3, [sp, #36]	; 0x24
 800ce64:	4617      	mov	r7, r2
 800ce66:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	4659      	mov	r1, fp
 800ce6e:	f7ff faeb 	bl	800c448 <quorem>
 800ce72:	4631      	mov	r1, r6
 800ce74:	4605      	mov	r5, r0
 800ce76:	4620      	mov	r0, r4
 800ce78:	f000 fd24 	bl	800d8c4 <__mcmp>
 800ce7c:	4642      	mov	r2, r8
 800ce7e:	4659      	mov	r1, fp
 800ce80:	4682      	mov	sl, r0
 800ce82:	4648      	mov	r0, r9
 800ce84:	f000 fd40 	bl	800d908 <__mdiff>
 800ce88:	68c2      	ldr	r2, [r0, #12]
 800ce8a:	4683      	mov	fp, r0
 800ce8c:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800ce90:	2a00      	cmp	r2, #0
 800ce92:	d149      	bne.n	800cf28 <_dtoa_r+0x9b8>
 800ce94:	4601      	mov	r1, r0
 800ce96:	4620      	mov	r0, r4
 800ce98:	9306      	str	r3, [sp, #24]
 800ce9a:	f000 fd13 	bl	800d8c4 <__mcmp>
 800ce9e:	4659      	mov	r1, fp
 800cea0:	9005      	str	r0, [sp, #20]
 800cea2:	4648      	mov	r0, r9
 800cea4:	f000 fb2c 	bl	800d500 <_Bfree>
 800cea8:	9a05      	ldr	r2, [sp, #20]
 800ceaa:	9b06      	ldr	r3, [sp, #24]
 800ceac:	b92a      	cbnz	r2, 800ceba <_dtoa_r+0x94a>
 800ceae:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ceb0:	b919      	cbnz	r1, 800ceba <_dtoa_r+0x94a>
 800ceb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ceb4:	2900      	cmp	r1, #0
 800ceb6:	f000 8235 	beq.w	800d324 <_dtoa_r+0xdb4>
 800ceba:	f1ba 0f00 	cmp.w	sl, #0
 800cebe:	f2c0 80e3 	blt.w	800d088 <_dtoa_r+0xb18>
 800cec2:	d105      	bne.n	800ced0 <_dtoa_r+0x960>
 800cec4:	9922      	ldr	r1, [sp, #136]	; 0x88
 800cec6:	b919      	cbnz	r1, 800ced0 <_dtoa_r+0x960>
 800cec8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ceca:	2900      	cmp	r1, #0
 800cecc:	f000 80dc 	beq.w	800d088 <_dtoa_r+0xb18>
 800ced0:	2a00      	cmp	r2, #0
 800ced2:	f300 814e 	bgt.w	800d172 <_dtoa_r+0xc02>
 800ced6:	9a08      	ldr	r2, [sp, #32]
 800ced8:	703b      	strb	r3, [r7, #0]
 800ceda:	f107 0a01 	add.w	sl, r7, #1
 800cede:	4297      	cmp	r7, r2
 800cee0:	4655      	mov	r5, sl
 800cee2:	f000 8152 	beq.w	800d18a <_dtoa_r+0xc1a>
 800cee6:	4621      	mov	r1, r4
 800cee8:	2300      	movs	r3, #0
 800ceea:	220a      	movs	r2, #10
 800ceec:	4648      	mov	r0, r9
 800ceee:	f000 fb11 	bl	800d514 <__multadd>
 800cef2:	4546      	cmp	r6, r8
 800cef4:	4604      	mov	r4, r0
 800cef6:	4631      	mov	r1, r6
 800cef8:	f04f 0300 	mov.w	r3, #0
 800cefc:	f04f 020a 	mov.w	r2, #10
 800cf00:	4648      	mov	r0, r9
 800cf02:	d00b      	beq.n	800cf1c <_dtoa_r+0x9ac>
 800cf04:	f000 fb06 	bl	800d514 <__multadd>
 800cf08:	4641      	mov	r1, r8
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	220a      	movs	r2, #10
 800cf10:	4648      	mov	r0, r9
 800cf12:	f000 faff 	bl	800d514 <__multadd>
 800cf16:	4657      	mov	r7, sl
 800cf18:	4680      	mov	r8, r0
 800cf1a:	e7a4      	b.n	800ce66 <_dtoa_r+0x8f6>
 800cf1c:	f000 fafa 	bl	800d514 <__multadd>
 800cf20:	4657      	mov	r7, sl
 800cf22:	4606      	mov	r6, r0
 800cf24:	4680      	mov	r8, r0
 800cf26:	e79e      	b.n	800ce66 <_dtoa_r+0x8f6>
 800cf28:	4601      	mov	r1, r0
 800cf2a:	4648      	mov	r0, r9
 800cf2c:	9305      	str	r3, [sp, #20]
 800cf2e:	f000 fae7 	bl	800d500 <_Bfree>
 800cf32:	2201      	movs	r2, #1
 800cf34:	9b05      	ldr	r3, [sp, #20]
 800cf36:	e7c0      	b.n	800ceba <_dtoa_r+0x94a>
 800cf38:	9902      	ldr	r1, [sp, #8]
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f000 fcc2 	bl	800d8c4 <__mcmp>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	f6bf ad7f 	bge.w	800ca44 <_dtoa_r+0x4d4>
 800cf46:	4621      	mov	r1, r4
 800cf48:	9c04      	ldr	r4, [sp, #16]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	3c01      	subs	r4, #1
 800cf4e:	220a      	movs	r2, #10
 800cf50:	4648      	mov	r0, r9
 800cf52:	9404      	str	r4, [sp, #16]
 800cf54:	f000 fade 	bl	800d514 <__multadd>
 800cf58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f47f af61 	bne.w	800ce24 <_dtoa_r+0x8b4>
 800cf62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f340 81ed 	ble.w	800d344 <_dtoa_r+0xdd4>
 800cf6a:	9306      	str	r3, [sp, #24]
 800cf6c:	e572      	b.n	800ca54 <_dtoa_r+0x4e4>
 800cf6e:	9c08      	ldr	r4, [sp, #32]
 800cf70:	e524      	b.n	800c9bc <_dtoa_r+0x44c>
 800cf72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	f77f ad69 	ble.w	800ca4c <_dtoa_r+0x4dc>
 800cf7a:	9b06      	ldr	r3, [sp, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f040 819d 	bne.w	800d2bc <_dtoa_r+0xd4c>
 800cf82:	9902      	ldr	r1, [sp, #8]
 800cf84:	2205      	movs	r2, #5
 800cf86:	4648      	mov	r0, r9
 800cf88:	f000 fac4 	bl	800d514 <__multadd>
 800cf8c:	4601      	mov	r1, r0
 800cf8e:	9002      	str	r0, [sp, #8]
 800cf90:	4620      	mov	r0, r4
 800cf92:	f000 fc97 	bl	800d8c4 <__mcmp>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	9408      	str	r4, [sp, #32]
 800cf9a:	f77f af16 	ble.w	800cdca <_dtoa_r+0x85a>
 800cf9e:	9a04      	ldr	r2, [sp, #16]
 800cfa0:	9907      	ldr	r1, [sp, #28]
 800cfa2:	2331      	movs	r3, #49	; 0x31
 800cfa4:	3201      	adds	r2, #1
 800cfa6:	9204      	str	r2, [sp, #16]
 800cfa8:	700b      	strb	r3, [r1, #0]
 800cfaa:	1c4d      	adds	r5, r1, #1
 800cfac:	e711      	b.n	800cdd2 <_dtoa_r+0x862>
 800cfae:	9a04      	ldr	r2, [sp, #16]
 800cfb0:	3201      	adds	r2, #1
 800cfb2:	9204      	str	r2, [sp, #16]
 800cfb4:	9a07      	ldr	r2, [sp, #28]
 800cfb6:	2331      	movs	r3, #49	; 0x31
 800cfb8:	7013      	strb	r3, [r2, #0]
 800cfba:	e58c      	b.n	800cad6 <_dtoa_r+0x566>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc0:	e5d2      	b.n	800cb68 <_dtoa_r+0x5f8>
 800cfc2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800cfc6:	e49a      	b.n	800c8fe <_dtoa_r+0x38e>
 800cfc8:	f1ba 0f00 	cmp.w	sl, #0
 800cfcc:	f47f ad09 	bne.w	800c9e2 <_dtoa_r+0x472>
 800cfd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f040 813e 	bne.w	800d256 <_dtoa_r+0xce6>
 800cfda:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800cfde:	0d3f      	lsrs	r7, r7, #20
 800cfe0:	053f      	lsls	r7, r7, #20
 800cfe2:	b12f      	cbz	r7, 800cff0 <_dtoa_r+0xa80>
 800cfe4:	9b05      	ldr	r3, [sp, #20]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	9305      	str	r3, [sp, #20]
 800cfea:	f108 0801 	add.w	r8, r8, #1
 800cfee:	2701      	movs	r7, #1
 800cff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cff2:	2001      	movs	r0, #1
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f43f acfe 	beq.w	800c9f6 <_dtoa_r+0x486>
 800cffa:	e4f3      	b.n	800c9e4 <_dtoa_r+0x474>
 800cffc:	4650      	mov	r0, sl
 800cffe:	f7f3 fbd1 	bl	80007a4 <__aeabi_i2d>
 800d002:	4632      	mov	r2, r6
 800d004:	463b      	mov	r3, r7
 800d006:	f7f3 fc33 	bl	8000870 <__aeabi_dmul>
 800d00a:	2200      	movs	r2, #0
 800d00c:	4bbf      	ldr	r3, [pc, #764]	; (800d30c <_dtoa_r+0xd9c>)
 800d00e:	f7f3 fa7d 	bl	800050c <__adddf3>
 800d012:	4604      	mov	r4, r0
 800d014:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d018:	4630      	mov	r0, r6
 800d01a:	4639      	mov	r1, r7
 800d01c:	2200      	movs	r2, #0
 800d01e:	4bbc      	ldr	r3, [pc, #752]	; (800d310 <_dtoa_r+0xda0>)
 800d020:	f7f3 fa72 	bl	8000508 <__aeabi_dsub>
 800d024:	4622      	mov	r2, r4
 800d026:	462b      	mov	r3, r5
 800d028:	4606      	mov	r6, r0
 800d02a:	460f      	mov	r7, r1
 800d02c:	f7f3 feb0 	bl	8000d90 <__aeabi_dcmpgt>
 800d030:	2800      	cmp	r0, #0
 800d032:	f040 80ae 	bne.w	800d192 <_dtoa_r+0xc22>
 800d036:	4622      	mov	r2, r4
 800d038:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d03c:	4630      	mov	r0, r6
 800d03e:	4639      	mov	r1, r7
 800d040:	f7f3 fe88 	bl	8000d54 <__aeabi_dcmplt>
 800d044:	2800      	cmp	r0, #0
 800d046:	d04a      	beq.n	800d0de <_dtoa_r+0xb6e>
 800d048:	2300      	movs	r3, #0
 800d04a:	9302      	str	r3, [sp, #8]
 800d04c:	461e      	mov	r6, r3
 800d04e:	e6bc      	b.n	800cdca <_dtoa_r+0x85a>
 800d050:	9807      	ldr	r0, [sp, #28]
 800d052:	f7ff babe 	b.w	800c5d2 <_dtoa_r+0x62>
 800d056:	9b02      	ldr	r3, [sp, #8]
 800d058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d05a:	9702      	str	r7, [sp, #8]
 800d05c:	1afb      	subs	r3, r7, r3
 800d05e:	441a      	add	r2, r3
 800d060:	920a      	str	r2, [sp, #40]	; 0x28
 800d062:	2700      	movs	r7, #0
 800d064:	e46d      	b.n	800c942 <_dtoa_r+0x3d2>
 800d066:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800d06a:	f04f 0a02 	mov.w	sl, #2
 800d06e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d072:	e5bf      	b.n	800cbf4 <_dtoa_r+0x684>
 800d074:	461c      	mov	r4, r3
 800d076:	2100      	movs	r1, #0
 800d078:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800d07c:	e590      	b.n	800cba0 <_dtoa_r+0x630>
 800d07e:	2401      	movs	r4, #1
 800d080:	9423      	str	r4, [sp, #140]	; 0x8c
 800d082:	940c      	str	r4, [sp, #48]	; 0x30
 800d084:	9406      	str	r4, [sp, #24]
 800d086:	e7f6      	b.n	800d076 <_dtoa_r+0xb06>
 800d088:	2a00      	cmp	r2, #0
 800d08a:	469a      	mov	sl, r3
 800d08c:	dd11      	ble.n	800d0b2 <_dtoa_r+0xb42>
 800d08e:	4621      	mov	r1, r4
 800d090:	2201      	movs	r2, #1
 800d092:	4648      	mov	r0, r9
 800d094:	f000 fbbe 	bl	800d814 <__lshift>
 800d098:	9902      	ldr	r1, [sp, #8]
 800d09a:	4604      	mov	r4, r0
 800d09c:	f000 fc12 	bl	800d8c4 <__mcmp>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	f340 8148 	ble.w	800d336 <_dtoa_r+0xdc6>
 800d0a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0aa:	f000 8109 	beq.w	800d2c0 <_dtoa_r+0xd50>
 800d0ae:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800d0b2:	46b3      	mov	fp, r6
 800d0b4:	f887 a000 	strb.w	sl, [r7]
 800d0b8:	1c7d      	adds	r5, r7, #1
 800d0ba:	4646      	mov	r6, r8
 800d0bc:	9408      	str	r4, [sp, #32]
 800d0be:	e50a      	b.n	800cad6 <_dtoa_r+0x566>
 800d0c0:	d104      	bne.n	800d0cc <_dtoa_r+0xb5c>
 800d0c2:	f01a 0f01 	tst.w	sl, #1
 800d0c6:	d001      	beq.n	800d0cc <_dtoa_r+0xb5c>
 800d0c8:	e4f5      	b.n	800cab6 <_dtoa_r+0x546>
 800d0ca:	4615      	mov	r5, r2
 800d0cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d0d0:	2b30      	cmp	r3, #48	; 0x30
 800d0d2:	f105 32ff 	add.w	r2, r5, #4294967295
 800d0d6:	d0f8      	beq.n	800d0ca <_dtoa_r+0xb5a>
 800d0d8:	e4fd      	b.n	800cad6 <_dtoa_r+0x566>
 800d0da:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800d0de:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800d0e2:	f7ff bb4b 	b.w	800c77c <_dtoa_r+0x20c>
 800d0e6:	9907      	ldr	r1, [sp, #28]
 800d0e8:	2230      	movs	r2, #48	; 0x30
 800d0ea:	700a      	strb	r2, [r1, #0]
 800d0ec:	9a04      	ldr	r2, [sp, #16]
 800d0ee:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800d0f2:	3201      	adds	r2, #1
 800d0f4:	9204      	str	r2, [sp, #16]
 800d0f6:	e400      	b.n	800c8fa <_dtoa_r+0x38a>
 800d0f8:	9b04      	ldr	r3, [sp, #16]
 800d0fa:	425c      	negs	r4, r3
 800d0fc:	2c00      	cmp	r4, #0
 800d0fe:	f000 80b3 	beq.w	800d268 <_dtoa_r+0xcf8>
 800d102:	4b84      	ldr	r3, [pc, #528]	; (800d314 <_dtoa_r+0xda4>)
 800d104:	f004 020f 	and.w	r2, r4, #15
 800d108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d110:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d114:	f7f3 fbac 	bl	8000870 <__aeabi_dmul>
 800d118:	1124      	asrs	r4, r4, #4
 800d11a:	4606      	mov	r6, r0
 800d11c:	460f      	mov	r7, r1
 800d11e:	f000 8116 	beq.w	800d34e <_dtoa_r+0xdde>
 800d122:	4d7d      	ldr	r5, [pc, #500]	; (800d318 <_dtoa_r+0xda8>)
 800d124:	f04f 0a02 	mov.w	sl, #2
 800d128:	07e2      	lsls	r2, r4, #31
 800d12a:	d509      	bpl.n	800d140 <_dtoa_r+0xbd0>
 800d12c:	4630      	mov	r0, r6
 800d12e:	4639      	mov	r1, r7
 800d130:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d134:	f7f3 fb9c 	bl	8000870 <__aeabi_dmul>
 800d138:	f10a 0a01 	add.w	sl, sl, #1
 800d13c:	4606      	mov	r6, r0
 800d13e:	460f      	mov	r7, r1
 800d140:	1064      	asrs	r4, r4, #1
 800d142:	f105 0508 	add.w	r5, r5, #8
 800d146:	d1ef      	bne.n	800d128 <_dtoa_r+0xbb8>
 800d148:	e56e      	b.n	800cc28 <_dtoa_r+0x6b8>
 800d14a:	6871      	ldr	r1, [r6, #4]
 800d14c:	4648      	mov	r0, r9
 800d14e:	f000 f9b1 	bl	800d4b4 <_Balloc>
 800d152:	6933      	ldr	r3, [r6, #16]
 800d154:	1c9a      	adds	r2, r3, #2
 800d156:	4605      	mov	r5, r0
 800d158:	0092      	lsls	r2, r2, #2
 800d15a:	f106 010c 	add.w	r1, r6, #12
 800d15e:	300c      	adds	r0, #12
 800d160:	f7f3 f85c 	bl	800021c <memcpy>
 800d164:	4629      	mov	r1, r5
 800d166:	2201      	movs	r2, #1
 800d168:	4648      	mov	r0, r9
 800d16a:	f000 fb53 	bl	800d814 <__lshift>
 800d16e:	4680      	mov	r8, r0
 800d170:	e670      	b.n	800ce54 <_dtoa_r+0x8e4>
 800d172:	2b39      	cmp	r3, #57	; 0x39
 800d174:	f000 80a4 	beq.w	800d2c0 <_dtoa_r+0xd50>
 800d178:	f103 0a01 	add.w	sl, r3, #1
 800d17c:	46b3      	mov	fp, r6
 800d17e:	f887 a000 	strb.w	sl, [r7]
 800d182:	1c7d      	adds	r5, r7, #1
 800d184:	4646      	mov	r6, r8
 800d186:	9408      	str	r4, [sp, #32]
 800d188:	e4a5      	b.n	800cad6 <_dtoa_r+0x566>
 800d18a:	46b3      	mov	fp, r6
 800d18c:	469a      	mov	sl, r3
 800d18e:	4646      	mov	r6, r8
 800d190:	e485      	b.n	800ca9e <_dtoa_r+0x52e>
 800d192:	2300      	movs	r3, #0
 800d194:	9302      	str	r3, [sp, #8]
 800d196:	461e      	mov	r6, r3
 800d198:	e701      	b.n	800cf9e <_dtoa_r+0xa2e>
 800d19a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d19c:	495d      	ldr	r1, [pc, #372]	; (800d314 <_dtoa_r+0xda4>)
 800d19e:	1e5a      	subs	r2, r3, #1
 800d1a0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d1a4:	462b      	mov	r3, r5
 800d1a6:	9215      	str	r2, [sp, #84]	; 0x54
 800d1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	f7f3 fb5f 	bl	8000870 <__aeabi_dmul>
 800d1b2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800d1b6:	4639      	mov	r1, r7
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7f3 fe09 	bl	8000dd0 <__aeabi_d2iz>
 800d1be:	4604      	mov	r4, r0
 800d1c0:	f7f3 faf0 	bl	80007a4 <__aeabi_i2d>
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	4639      	mov	r1, r7
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	f7f3 f99c 	bl	8000508 <__aeabi_dsub>
 800d1d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1d2:	460f      	mov	r7, r1
 800d1d4:	9907      	ldr	r1, [sp, #28]
 800d1d6:	3430      	adds	r4, #48	; 0x30
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	4606      	mov	r6, r0
 800d1dc:	700c      	strb	r4, [r1, #0]
 800d1de:	f101 0501 	add.w	r5, r1, #1
 800d1e2:	d020      	beq.n	800d226 <_dtoa_r+0xcb6>
 800d1e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1e6:	9a07      	ldr	r2, [sp, #28]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	469a      	mov	sl, r3
 800d1ec:	46ab      	mov	fp, r5
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	4b4a      	ldr	r3, [pc, #296]	; (800d31c <_dtoa_r+0xdac>)
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	4639      	mov	r1, r7
 800d1f6:	f7f3 fb3b 	bl	8000870 <__aeabi_dmul>
 800d1fa:	460f      	mov	r7, r1
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	f7f3 fde7 	bl	8000dd0 <__aeabi_d2iz>
 800d202:	4604      	mov	r4, r0
 800d204:	f7f3 face 	bl	80007a4 <__aeabi_i2d>
 800d208:	3430      	adds	r4, #48	; 0x30
 800d20a:	4602      	mov	r2, r0
 800d20c:	460b      	mov	r3, r1
 800d20e:	4630      	mov	r0, r6
 800d210:	4639      	mov	r1, r7
 800d212:	f7f3 f979 	bl	8000508 <__aeabi_dsub>
 800d216:	f80b 4b01 	strb.w	r4, [fp], #1
 800d21a:	45da      	cmp	sl, fp
 800d21c:	4606      	mov	r6, r0
 800d21e:	460f      	mov	r7, r1
 800d220:	d1e5      	bne.n	800d1ee <_dtoa_r+0xc7e>
 800d222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d224:	441d      	add	r5, r3
 800d226:	2200      	movs	r2, #0
 800d228:	4b3d      	ldr	r3, [pc, #244]	; (800d320 <_dtoa_r+0xdb0>)
 800d22a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800d22e:	f7f3 f96d 	bl	800050c <__adddf3>
 800d232:	4632      	mov	r2, r6
 800d234:	463b      	mov	r3, r7
 800d236:	f7f3 fd8d 	bl	8000d54 <__aeabi_dcmplt>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d048      	beq.n	800d2d0 <_dtoa_r+0xd60>
 800d23e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d240:	9304      	str	r3, [sp, #16]
 800d242:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800d246:	f7ff bb4c 	b.w	800c8e2 <_dtoa_r+0x372>
 800d24a:	9b05      	ldr	r3, [sp, #20]
 800d24c:	9a06      	ldr	r2, [sp, #24]
 800d24e:	1a9d      	subs	r5, r3, r2
 800d250:	2300      	movs	r3, #0
 800d252:	f7ff bb7c 	b.w	800c94e <_dtoa_r+0x3de>
 800d256:	2700      	movs	r7, #0
 800d258:	e6ca      	b.n	800cff0 <_dtoa_r+0xa80>
 800d25a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d25c:	9f02      	ldr	r7, [sp, #8]
 800d25e:	9d05      	ldr	r5, [sp, #20]
 800d260:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d264:	f7ff bb73 	b.w	800c94e <_dtoa_r+0x3de>
 800d268:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800d26c:	f04f 0a02 	mov.w	sl, #2
 800d270:	e4da      	b.n	800cc28 <_dtoa_r+0x6b8>
 800d272:	9b06      	ldr	r3, [sp, #24]
 800d274:	2b00      	cmp	r3, #0
 800d276:	f43f aec1 	beq.w	800cffc <_dtoa_r+0xa8c>
 800d27a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f77f af2e 	ble.w	800d0de <_dtoa_r+0xb6e>
 800d282:	2200      	movs	r2, #0
 800d284:	4b25      	ldr	r3, [pc, #148]	; (800d31c <_dtoa_r+0xdac>)
 800d286:	4630      	mov	r0, r6
 800d288:	4639      	mov	r1, r7
 800d28a:	f7f3 faf1 	bl	8000870 <__aeabi_dmul>
 800d28e:	4606      	mov	r6, r0
 800d290:	460f      	mov	r7, r1
 800d292:	f10a 0001 	add.w	r0, sl, #1
 800d296:	f7f3 fa85 	bl	80007a4 <__aeabi_i2d>
 800d29a:	4632      	mov	r2, r6
 800d29c:	463b      	mov	r3, r7
 800d29e:	f7f3 fae7 	bl	8000870 <__aeabi_dmul>
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	4b19      	ldr	r3, [pc, #100]	; (800d30c <_dtoa_r+0xd9c>)
 800d2a6:	f7f3 f931 	bl	800050c <__adddf3>
 800d2aa:	9a04      	ldr	r2, [sp, #16]
 800d2ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2ae:	9310      	str	r3, [sp, #64]	; 0x40
 800d2b0:	3a01      	subs	r2, #1
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d2b8:	9214      	str	r2, [sp, #80]	; 0x50
 800d2ba:	e4d6      	b.n	800cc6a <_dtoa_r+0x6fa>
 800d2bc:	9408      	str	r4, [sp, #32]
 800d2be:	e584      	b.n	800cdca <_dtoa_r+0x85a>
 800d2c0:	2239      	movs	r2, #57	; 0x39
 800d2c2:	46b3      	mov	fp, r6
 800d2c4:	9408      	str	r4, [sp, #32]
 800d2c6:	4646      	mov	r6, r8
 800d2c8:	703a      	strb	r2, [r7, #0]
 800d2ca:	1c7d      	adds	r5, r7, #1
 800d2cc:	f7ff bbf5 	b.w	800caba <_dtoa_r+0x54a>
 800d2d0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	4912      	ldr	r1, [pc, #72]	; (800d320 <_dtoa_r+0xdb0>)
 800d2d8:	f7f3 f916 	bl	8000508 <__aeabi_dsub>
 800d2dc:	4632      	mov	r2, r6
 800d2de:	463b      	mov	r3, r7
 800d2e0:	f7f3 fd56 	bl	8000d90 <__aeabi_dcmpgt>
 800d2e4:	b908      	cbnz	r0, 800d2ea <_dtoa_r+0xd7a>
 800d2e6:	e6fa      	b.n	800d0de <_dtoa_r+0xb6e>
 800d2e8:	4615      	mov	r5, r2
 800d2ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d2ee:	2b30      	cmp	r3, #48	; 0x30
 800d2f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d2f4:	d0f8      	beq.n	800d2e8 <_dtoa_r+0xd78>
 800d2f6:	e539      	b.n	800cd6c <_dtoa_r+0x7fc>
 800d2f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2fa:	9304      	str	r3, [sp, #16]
 800d2fc:	f7ff baf1 	b.w	800c8e2 <_dtoa_r+0x372>
 800d300:	f1ba 0f00 	cmp.w	sl, #0
 800d304:	f47f ad7c 	bne.w	800ce00 <_dtoa_r+0x890>
 800d308:	e662      	b.n	800cfd0 <_dtoa_r+0xa60>
 800d30a:	bf00      	nop
 800d30c:	401c0000 	.word	0x401c0000
 800d310:	40140000 	.word	0x40140000
 800d314:	0800ef80 	.word	0x0800ef80
 800d318:	0800f048 	.word	0x0800f048
 800d31c:	40240000 	.word	0x40240000
 800d320:	3fe00000 	.word	0x3fe00000
 800d324:	2b39      	cmp	r3, #57	; 0x39
 800d326:	46d3      	mov	fp, sl
 800d328:	469a      	mov	sl, r3
 800d32a:	d0c9      	beq.n	800d2c0 <_dtoa_r+0xd50>
 800d32c:	f1bb 0f00 	cmp.w	fp, #0
 800d330:	f73f aebd 	bgt.w	800d0ae <_dtoa_r+0xb3e>
 800d334:	e6bd      	b.n	800d0b2 <_dtoa_r+0xb42>
 800d336:	f47f aebc 	bne.w	800d0b2 <_dtoa_r+0xb42>
 800d33a:	f01a 0f01 	tst.w	sl, #1
 800d33e:	f43f aeb8 	beq.w	800d0b2 <_dtoa_r+0xb42>
 800d342:	e6b0      	b.n	800d0a6 <_dtoa_r+0xb36>
 800d344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d346:	2b02      	cmp	r3, #2
 800d348:	dc25      	bgt.n	800d396 <_dtoa_r+0xe26>
 800d34a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d34c:	e60d      	b.n	800cf6a <_dtoa_r+0x9fa>
 800d34e:	f04f 0a02 	mov.w	sl, #2
 800d352:	e469      	b.n	800cc28 <_dtoa_r+0x6b8>
 800d354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d356:	2b02      	cmp	r3, #2
 800d358:	dc1d      	bgt.n	800d396 <_dtoa_r+0xe26>
 800d35a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d35c:	e56d      	b.n	800ce3a <_dtoa_r+0x8ca>
 800d35e:	2400      	movs	r4, #0
 800d360:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800d364:	4621      	mov	r1, r4
 800d366:	4648      	mov	r0, r9
 800d368:	f000 f8a4 	bl	800d4b4 <_Balloc>
 800d36c:	f04f 33ff 	mov.w	r3, #4294967295
 800d370:	9306      	str	r3, [sp, #24]
 800d372:	930c      	str	r3, [sp, #48]	; 0x30
 800d374:	2301      	movs	r3, #1
 800d376:	9007      	str	r0, [sp, #28]
 800d378:	9423      	str	r4, [sp, #140]	; 0x8c
 800d37a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800d37e:	9309      	str	r3, [sp, #36]	; 0x24
 800d380:	f7ff b9fc 	b.w	800c77c <_dtoa_r+0x20c>
 800d384:	f43f ab48 	beq.w	800ca18 <_dtoa_r+0x4a8>
 800d388:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800d38c:	f7ff bb3f 	b.w	800ca0e <_dtoa_r+0x49e>
 800d390:	2501      	movs	r5, #1
 800d392:	f7ff b9bd 	b.w	800c710 <_dtoa_r+0x1a0>
 800d396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d398:	9306      	str	r3, [sp, #24]
 800d39a:	e5ee      	b.n	800cf7a <_dtoa_r+0xa0a>

0800d39c <_fclose_r>:
 800d39c:	2900      	cmp	r1, #0
 800d39e:	d03d      	beq.n	800d41c <_fclose_r+0x80>
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	4605      	mov	r5, r0
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	b108      	cbz	r0, 800d3ac <_fclose_r+0x10>
 800d3a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d3aa:	b37b      	cbz	r3, 800d40c <_fclose_r+0x70>
 800d3ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3b0:	b90b      	cbnz	r3, 800d3b6 <_fclose_r+0x1a>
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	bd70      	pop	{r4, r5, r6, pc}
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f7fc fbff 	bl	8009bbc <__sflush_r>
 800d3be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	b133      	cbz	r3, 800d3d2 <_fclose_r+0x36>
 800d3c4:	69e1      	ldr	r1, [r4, #28]
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	4798      	blx	r3
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	bfb8      	it	lt
 800d3ce:	f04f 36ff 	movlt.w	r6, #4294967295
 800d3d2:	89a3      	ldrh	r3, [r4, #12]
 800d3d4:	061b      	lsls	r3, r3, #24
 800d3d6:	d41c      	bmi.n	800d412 <_fclose_r+0x76>
 800d3d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d3da:	b141      	cbz	r1, 800d3ee <_fclose_r+0x52>
 800d3dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d3e0:	4299      	cmp	r1, r3
 800d3e2:	d002      	beq.n	800d3ea <_fclose_r+0x4e>
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	f7fc fded 	bl	8009fc4 <_free_r>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	6323      	str	r3, [r4, #48]	; 0x30
 800d3ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d3f0:	b121      	cbz	r1, 800d3fc <_fclose_r+0x60>
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f7fc fde6 	bl	8009fc4 <_free_r>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	6463      	str	r3, [r4, #68]	; 0x44
 800d3fc:	f7fc fd1c 	bl	8009e38 <__sfp_lock_acquire>
 800d400:	2300      	movs	r3, #0
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	f7fc fd1a 	bl	8009e3c <__sfp_lock_release>
 800d408:	4630      	mov	r0, r6
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	f7fc fd0e 	bl	8009e2c <__sinit>
 800d410:	e7cc      	b.n	800d3ac <_fclose_r+0x10>
 800d412:	6921      	ldr	r1, [r4, #16]
 800d414:	4628      	mov	r0, r5
 800d416:	f7fc fdd5 	bl	8009fc4 <_free_r>
 800d41a:	e7dd      	b.n	800d3d8 <_fclose_r+0x3c>
 800d41c:	2000      	movs	r0, #0
 800d41e:	4770      	bx	lr

0800d420 <_fstat_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	460b      	mov	r3, r1
 800d424:	4c07      	ldr	r4, [pc, #28]	; (800d444 <_fstat_r+0x24>)
 800d426:	4605      	mov	r5, r0
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	2300      	movs	r3, #0
 800d42e:	6023      	str	r3, [r4, #0]
 800d430:	f000 fc1e 	bl	800dc70 <_fstat>
 800d434:	1c43      	adds	r3, r0, #1
 800d436:	d000      	beq.n	800d43a <_fstat_r+0x1a>
 800d438:	bd38      	pop	{r3, r4, r5, pc}
 800d43a:	6823      	ldr	r3, [r4, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d0fb      	beq.n	800d438 <_fstat_r+0x18>
 800d440:	602b      	str	r3, [r5, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	20006df0 	.word	0x20006df0

0800d448 <_isatty_r>:
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4c07      	ldr	r4, [pc, #28]	; (800d468 <_isatty_r+0x20>)
 800d44c:	2300      	movs	r3, #0
 800d44e:	4605      	mov	r5, r0
 800d450:	4608      	mov	r0, r1
 800d452:	6023      	str	r3, [r4, #0]
 800d454:	f000 fc1c 	bl	800dc90 <_isatty>
 800d458:	1c43      	adds	r3, r0, #1
 800d45a:	d000      	beq.n	800d45e <_isatty_r+0x16>
 800d45c:	bd38      	pop	{r3, r4, r5, pc}
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d0fb      	beq.n	800d45c <_isatty_r+0x14>
 800d464:	602b      	str	r3, [r5, #0]
 800d466:	bd38      	pop	{r3, r4, r5, pc}
 800d468:	20006df0 	.word	0x20006df0

0800d46c <_localeconv_r>:
 800d46c:	4a04      	ldr	r2, [pc, #16]	; (800d480 <_localeconv_r+0x14>)
 800d46e:	4b05      	ldr	r3, [pc, #20]	; (800d484 <_localeconv_r+0x18>)
 800d470:	6812      	ldr	r2, [r2, #0]
 800d472:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800d474:	2800      	cmp	r0, #0
 800d476:	bf08      	it	eq
 800d478:	4618      	moveq	r0, r3
 800d47a:	30f0      	adds	r0, #240	; 0xf0
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	200005b8 	.word	0x200005b8
 800d484:	200009cc 	.word	0x200009cc

0800d488 <_lseek_r>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	460d      	mov	r5, r1
 800d48c:	4c08      	ldr	r4, [pc, #32]	; (800d4b0 <_lseek_r+0x28>)
 800d48e:	4611      	mov	r1, r2
 800d490:	4606      	mov	r6, r0
 800d492:	461a      	mov	r2, r3
 800d494:	4628      	mov	r0, r5
 800d496:	2300      	movs	r3, #0
 800d498:	6023      	str	r3, [r4, #0]
 800d49a:	f000 fc09 	bl	800dcb0 <_lseek>
 800d49e:	1c43      	adds	r3, r0, #1
 800d4a0:	d000      	beq.n	800d4a4 <_lseek_r+0x1c>
 800d4a2:	bd70      	pop	{r4, r5, r6, pc}
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d0fb      	beq.n	800d4a2 <_lseek_r+0x1a>
 800d4aa:	6033      	str	r3, [r6, #0]
 800d4ac:	bd70      	pop	{r4, r5, r6, pc}
 800d4ae:	bf00      	nop
 800d4b0:	20006df0 	.word	0x20006df0

0800d4b4 <_Balloc>:
 800d4b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d4b6:	b570      	push	{r4, r5, r6, lr}
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	b14b      	cbz	r3, 800d4d2 <_Balloc+0x1e>
 800d4be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d4c2:	b180      	cbz	r0, 800d4e6 <_Balloc+0x32>
 800d4c4:	6802      	ldr	r2, [r0, #0]
 800d4c6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	6103      	str	r3, [r0, #16]
 800d4ce:	60c3      	str	r3, [r0, #12]
 800d4d0:	bd70      	pop	{r4, r5, r6, pc}
 800d4d2:	2221      	movs	r2, #33	; 0x21
 800d4d4:	2104      	movs	r1, #4
 800d4d6:	f000 fb93 	bl	800dc00 <_calloc_r>
 800d4da:	64e8      	str	r0, [r5, #76]	; 0x4c
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d1ed      	bne.n	800d4be <_Balloc+0xa>
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	bd70      	pop	{r4, r5, r6, pc}
 800d4e6:	2101      	movs	r1, #1
 800d4e8:	fa01 f604 	lsl.w	r6, r1, r4
 800d4ec:	1d72      	adds	r2, r6, #5
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	0092      	lsls	r2, r2, #2
 800d4f2:	f000 fb85 	bl	800dc00 <_calloc_r>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0f3      	beq.n	800d4e2 <_Balloc+0x2e>
 800d4fa:	6044      	str	r4, [r0, #4]
 800d4fc:	6086      	str	r6, [r0, #8]
 800d4fe:	e7e4      	b.n	800d4ca <_Balloc+0x16>

0800d500 <_Bfree>:
 800d500:	b131      	cbz	r1, 800d510 <_Bfree+0x10>
 800d502:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d504:	684a      	ldr	r2, [r1, #4]
 800d506:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d50a:	6008      	str	r0, [r1, #0]
 800d50c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop

0800d514 <__multadd>:
 800d514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d516:	690c      	ldr	r4, [r1, #16]
 800d518:	b083      	sub	sp, #12
 800d51a:	460d      	mov	r5, r1
 800d51c:	4606      	mov	r6, r0
 800d51e:	f101 0e14 	add.w	lr, r1, #20
 800d522:	2700      	movs	r7, #0
 800d524:	f8de 0000 	ldr.w	r0, [lr]
 800d528:	b281      	uxth	r1, r0
 800d52a:	fb02 3101 	mla	r1, r2, r1, r3
 800d52e:	0c0b      	lsrs	r3, r1, #16
 800d530:	0c00      	lsrs	r0, r0, #16
 800d532:	fb02 3300 	mla	r3, r2, r0, r3
 800d536:	b289      	uxth	r1, r1
 800d538:	3701      	adds	r7, #1
 800d53a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d53e:	42bc      	cmp	r4, r7
 800d540:	f84e 1b04 	str.w	r1, [lr], #4
 800d544:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d548:	dcec      	bgt.n	800d524 <__multadd+0x10>
 800d54a:	b13b      	cbz	r3, 800d55c <__multadd+0x48>
 800d54c:	68aa      	ldr	r2, [r5, #8]
 800d54e:	4294      	cmp	r4, r2
 800d550:	da07      	bge.n	800d562 <__multadd+0x4e>
 800d552:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800d556:	3401      	adds	r4, #1
 800d558:	6153      	str	r3, [r2, #20]
 800d55a:	612c      	str	r4, [r5, #16]
 800d55c:	4628      	mov	r0, r5
 800d55e:	b003      	add	sp, #12
 800d560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d562:	6869      	ldr	r1, [r5, #4]
 800d564:	9301      	str	r3, [sp, #4]
 800d566:	3101      	adds	r1, #1
 800d568:	4630      	mov	r0, r6
 800d56a:	f7ff ffa3 	bl	800d4b4 <_Balloc>
 800d56e:	692a      	ldr	r2, [r5, #16]
 800d570:	3202      	adds	r2, #2
 800d572:	f105 010c 	add.w	r1, r5, #12
 800d576:	4607      	mov	r7, r0
 800d578:	0092      	lsls	r2, r2, #2
 800d57a:	300c      	adds	r0, #12
 800d57c:	f7f2 fe4e 	bl	800021c <memcpy>
 800d580:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800d582:	6869      	ldr	r1, [r5, #4]
 800d584:	9b01      	ldr	r3, [sp, #4]
 800d586:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800d58a:	6028      	str	r0, [r5, #0]
 800d58c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800d590:	463d      	mov	r5, r7
 800d592:	e7de      	b.n	800d552 <__multadd+0x3e>

0800d594 <__hi0bits>:
 800d594:	0c03      	lsrs	r3, r0, #16
 800d596:	041b      	lsls	r3, r3, #16
 800d598:	b9b3      	cbnz	r3, 800d5c8 <__hi0bits+0x34>
 800d59a:	0400      	lsls	r0, r0, #16
 800d59c:	2310      	movs	r3, #16
 800d59e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d5a2:	bf04      	itt	eq
 800d5a4:	0200      	lsleq	r0, r0, #8
 800d5a6:	3308      	addeq	r3, #8
 800d5a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d5ac:	bf04      	itt	eq
 800d5ae:	0100      	lsleq	r0, r0, #4
 800d5b0:	3304      	addeq	r3, #4
 800d5b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d5b6:	bf04      	itt	eq
 800d5b8:	0080      	lsleq	r0, r0, #2
 800d5ba:	3302      	addeq	r3, #2
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	db07      	blt.n	800d5d0 <__hi0bits+0x3c>
 800d5c0:	0042      	lsls	r2, r0, #1
 800d5c2:	d403      	bmi.n	800d5cc <__hi0bits+0x38>
 800d5c4:	2020      	movs	r0, #32
 800d5c6:	4770      	bx	lr
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	e7e8      	b.n	800d59e <__hi0bits+0xa>
 800d5cc:	1c58      	adds	r0, r3, #1
 800d5ce:	4770      	bx	lr
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	4770      	bx	lr

0800d5d4 <__lo0bits>:
 800d5d4:	6803      	ldr	r3, [r0, #0]
 800d5d6:	f013 0207 	ands.w	r2, r3, #7
 800d5da:	d007      	beq.n	800d5ec <__lo0bits+0x18>
 800d5dc:	07d9      	lsls	r1, r3, #31
 800d5de:	d420      	bmi.n	800d622 <__lo0bits+0x4e>
 800d5e0:	079a      	lsls	r2, r3, #30
 800d5e2:	d420      	bmi.n	800d626 <__lo0bits+0x52>
 800d5e4:	089b      	lsrs	r3, r3, #2
 800d5e6:	6003      	str	r3, [r0, #0]
 800d5e8:	2002      	movs	r0, #2
 800d5ea:	4770      	bx	lr
 800d5ec:	b299      	uxth	r1, r3
 800d5ee:	b909      	cbnz	r1, 800d5f4 <__lo0bits+0x20>
 800d5f0:	0c1b      	lsrs	r3, r3, #16
 800d5f2:	2210      	movs	r2, #16
 800d5f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d5f8:	bf04      	itt	eq
 800d5fa:	0a1b      	lsreq	r3, r3, #8
 800d5fc:	3208      	addeq	r2, #8
 800d5fe:	0719      	lsls	r1, r3, #28
 800d600:	bf04      	itt	eq
 800d602:	091b      	lsreq	r3, r3, #4
 800d604:	3204      	addeq	r2, #4
 800d606:	0799      	lsls	r1, r3, #30
 800d608:	bf04      	itt	eq
 800d60a:	089b      	lsreq	r3, r3, #2
 800d60c:	3202      	addeq	r2, #2
 800d60e:	07d9      	lsls	r1, r3, #31
 800d610:	d404      	bmi.n	800d61c <__lo0bits+0x48>
 800d612:	085b      	lsrs	r3, r3, #1
 800d614:	d101      	bne.n	800d61a <__lo0bits+0x46>
 800d616:	2020      	movs	r0, #32
 800d618:	4770      	bx	lr
 800d61a:	3201      	adds	r2, #1
 800d61c:	6003      	str	r3, [r0, #0]
 800d61e:	4610      	mov	r0, r2
 800d620:	4770      	bx	lr
 800d622:	2000      	movs	r0, #0
 800d624:	4770      	bx	lr
 800d626:	085b      	lsrs	r3, r3, #1
 800d628:	6003      	str	r3, [r0, #0]
 800d62a:	2001      	movs	r0, #1
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop

0800d630 <__i2b>:
 800d630:	b510      	push	{r4, lr}
 800d632:	460c      	mov	r4, r1
 800d634:	2101      	movs	r1, #1
 800d636:	f7ff ff3d 	bl	800d4b4 <_Balloc>
 800d63a:	2201      	movs	r2, #1
 800d63c:	6144      	str	r4, [r0, #20]
 800d63e:	6102      	str	r2, [r0, #16]
 800d640:	bd10      	pop	{r4, pc}
 800d642:	bf00      	nop

0800d644 <__multiply>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	690d      	ldr	r5, [r1, #16]
 800d64a:	6917      	ldr	r7, [r2, #16]
 800d64c:	42bd      	cmp	r5, r7
 800d64e:	b083      	sub	sp, #12
 800d650:	460c      	mov	r4, r1
 800d652:	4616      	mov	r6, r2
 800d654:	da04      	bge.n	800d660 <__multiply+0x1c>
 800d656:	462a      	mov	r2, r5
 800d658:	4634      	mov	r4, r6
 800d65a:	463d      	mov	r5, r7
 800d65c:	460e      	mov	r6, r1
 800d65e:	4617      	mov	r7, r2
 800d660:	68a3      	ldr	r3, [r4, #8]
 800d662:	6861      	ldr	r1, [r4, #4]
 800d664:	eb05 0807 	add.w	r8, r5, r7
 800d668:	4598      	cmp	r8, r3
 800d66a:	bfc8      	it	gt
 800d66c:	3101      	addgt	r1, #1
 800d66e:	f7ff ff21 	bl	800d4b4 <_Balloc>
 800d672:	f100 0c14 	add.w	ip, r0, #20
 800d676:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800d67a:	45cc      	cmp	ip, r9
 800d67c:	9000      	str	r0, [sp, #0]
 800d67e:	d205      	bcs.n	800d68c <__multiply+0x48>
 800d680:	4663      	mov	r3, ip
 800d682:	2100      	movs	r1, #0
 800d684:	f843 1b04 	str.w	r1, [r3], #4
 800d688:	4599      	cmp	r9, r3
 800d68a:	d8fb      	bhi.n	800d684 <__multiply+0x40>
 800d68c:	f106 0214 	add.w	r2, r6, #20
 800d690:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800d694:	f104 0314 	add.w	r3, r4, #20
 800d698:	4552      	cmp	r2, sl
 800d69a:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 800d69e:	d254      	bcs.n	800d74a <__multiply+0x106>
 800d6a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d6a4:	4699      	mov	r9, r3
 800d6a6:	f852 3b04 	ldr.w	r3, [r2], #4
 800d6aa:	fa1f fb83 	uxth.w	fp, r3
 800d6ae:	f1bb 0f00 	cmp.w	fp, #0
 800d6b2:	d020      	beq.n	800d6f6 <__multiply+0xb2>
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	464f      	mov	r7, r9
 800d6b8:	4666      	mov	r6, ip
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	e000      	b.n	800d6c0 <__multiply+0x7c>
 800d6be:	461e      	mov	r6, r3
 800d6c0:	f857 4b04 	ldr.w	r4, [r7], #4
 800d6c4:	6830      	ldr	r0, [r6, #0]
 800d6c6:	b2a1      	uxth	r1, r4
 800d6c8:	b283      	uxth	r3, r0
 800d6ca:	fb0b 3101 	mla	r1, fp, r1, r3
 800d6ce:	0c24      	lsrs	r4, r4, #16
 800d6d0:	0c00      	lsrs	r0, r0, #16
 800d6d2:	194b      	adds	r3, r1, r5
 800d6d4:	fb0b 0004 	mla	r0, fp, r4, r0
 800d6d8:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800d6dc:	b299      	uxth	r1, r3
 800d6de:	4633      	mov	r3, r6
 800d6e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d6e4:	45be      	cmp	lr, r7
 800d6e6:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800d6ea:	f843 1b04 	str.w	r1, [r3], #4
 800d6ee:	d8e6      	bhi.n	800d6be <__multiply+0x7a>
 800d6f0:	6075      	str	r5, [r6, #4]
 800d6f2:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800d6f6:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800d6fa:	d020      	beq.n	800d73e <__multiply+0xfa>
 800d6fc:	f8dc 3000 	ldr.w	r3, [ip]
 800d700:	4667      	mov	r7, ip
 800d702:	4618      	mov	r0, r3
 800d704:	464d      	mov	r5, r9
 800d706:	2100      	movs	r1, #0
 800d708:	e000      	b.n	800d70c <__multiply+0xc8>
 800d70a:	4637      	mov	r7, r6
 800d70c:	882c      	ldrh	r4, [r5, #0]
 800d70e:	0c00      	lsrs	r0, r0, #16
 800d710:	fb0b 0004 	mla	r0, fp, r4, r0
 800d714:	4401      	add	r1, r0
 800d716:	b29c      	uxth	r4, r3
 800d718:	463e      	mov	r6, r7
 800d71a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800d71e:	f846 3b04 	str.w	r3, [r6], #4
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f855 4b04 	ldr.w	r4, [r5], #4
 800d728:	b283      	uxth	r3, r0
 800d72a:	0c24      	lsrs	r4, r4, #16
 800d72c:	fb0b 3404 	mla	r4, fp, r4, r3
 800d730:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800d734:	45ae      	cmp	lr, r5
 800d736:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800d73a:	d8e6      	bhi.n	800d70a <__multiply+0xc6>
 800d73c:	607b      	str	r3, [r7, #4]
 800d73e:	4592      	cmp	sl, r2
 800d740:	f10c 0c04 	add.w	ip, ip, #4
 800d744:	d8af      	bhi.n	800d6a6 <__multiply+0x62>
 800d746:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d74a:	f1b8 0f00 	cmp.w	r8, #0
 800d74e:	dd0b      	ble.n	800d768 <__multiply+0x124>
 800d750:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800d754:	f1a9 0904 	sub.w	r9, r9, #4
 800d758:	b11b      	cbz	r3, 800d762 <__multiply+0x11e>
 800d75a:	e005      	b.n	800d768 <__multiply+0x124>
 800d75c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800d760:	b913      	cbnz	r3, 800d768 <__multiply+0x124>
 800d762:	f1b8 0801 	subs.w	r8, r8, #1
 800d766:	d1f9      	bne.n	800d75c <__multiply+0x118>
 800d768:	9800      	ldr	r0, [sp, #0]
 800d76a:	f8c0 8010 	str.w	r8, [r0, #16]
 800d76e:	b003      	add	sp, #12
 800d770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d774 <__pow5mult>:
 800d774:	f012 0303 	ands.w	r3, r2, #3
 800d778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d77c:	4614      	mov	r4, r2
 800d77e:	4607      	mov	r7, r0
 800d780:	d12e      	bne.n	800d7e0 <__pow5mult+0x6c>
 800d782:	460e      	mov	r6, r1
 800d784:	10a4      	asrs	r4, r4, #2
 800d786:	d01c      	beq.n	800d7c2 <__pow5mult+0x4e>
 800d788:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800d78a:	b395      	cbz	r5, 800d7f2 <__pow5mult+0x7e>
 800d78c:	07e3      	lsls	r3, r4, #31
 800d78e:	f04f 0800 	mov.w	r8, #0
 800d792:	d406      	bmi.n	800d7a2 <__pow5mult+0x2e>
 800d794:	1064      	asrs	r4, r4, #1
 800d796:	d014      	beq.n	800d7c2 <__pow5mult+0x4e>
 800d798:	6828      	ldr	r0, [r5, #0]
 800d79a:	b1a8      	cbz	r0, 800d7c8 <__pow5mult+0x54>
 800d79c:	4605      	mov	r5, r0
 800d79e:	07e3      	lsls	r3, r4, #31
 800d7a0:	d5f8      	bpl.n	800d794 <__pow5mult+0x20>
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	4631      	mov	r1, r6
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	f7ff ff4c 	bl	800d644 <__multiply>
 800d7ac:	b1b6      	cbz	r6, 800d7dc <__pow5mult+0x68>
 800d7ae:	6872      	ldr	r2, [r6, #4]
 800d7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b2:	1064      	asrs	r4, r4, #1
 800d7b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7b8:	6031      	str	r1, [r6, #0]
 800d7ba:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800d7be:	4606      	mov	r6, r0
 800d7c0:	d1ea      	bne.n	800d798 <__pow5mult+0x24>
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c8:	462a      	mov	r2, r5
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	f7ff ff39 	bl	800d644 <__multiply>
 800d7d2:	6028      	str	r0, [r5, #0]
 800d7d4:	f8c0 8000 	str.w	r8, [r0]
 800d7d8:	4605      	mov	r5, r0
 800d7da:	e7e0      	b.n	800d79e <__pow5mult+0x2a>
 800d7dc:	4606      	mov	r6, r0
 800d7de:	e7d9      	b.n	800d794 <__pow5mult+0x20>
 800d7e0:	1e5a      	subs	r2, r3, #1
 800d7e2:	4d0b      	ldr	r5, [pc, #44]	; (800d810 <__pow5mult+0x9c>)
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800d7ea:	f7ff fe93 	bl	800d514 <__multadd>
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	e7c8      	b.n	800d784 <__pow5mult+0x10>
 800d7f2:	2101      	movs	r1, #1
 800d7f4:	4638      	mov	r0, r7
 800d7f6:	f7ff fe5d 	bl	800d4b4 <_Balloc>
 800d7fa:	f240 2171 	movw	r1, #625	; 0x271
 800d7fe:	2201      	movs	r2, #1
 800d800:	2300      	movs	r3, #0
 800d802:	6141      	str	r1, [r0, #20]
 800d804:	6102      	str	r2, [r0, #16]
 800d806:	4605      	mov	r5, r0
 800d808:	64b8      	str	r0, [r7, #72]	; 0x48
 800d80a:	6003      	str	r3, [r0, #0]
 800d80c:	e7be      	b.n	800d78c <__pow5mult+0x18>
 800d80e:	bf00      	nop
 800d810:	0800f070 	.word	0x0800f070

0800d814 <__lshift>:
 800d814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d818:	4691      	mov	r9, r2
 800d81a:	690a      	ldr	r2, [r1, #16]
 800d81c:	688b      	ldr	r3, [r1, #8]
 800d81e:	ea4f 1469 	mov.w	r4, r9, asr #5
 800d822:	eb04 0802 	add.w	r8, r4, r2
 800d826:	f108 0501 	add.w	r5, r8, #1
 800d82a:	429d      	cmp	r5, r3
 800d82c:	460e      	mov	r6, r1
 800d82e:	4682      	mov	sl, r0
 800d830:	6849      	ldr	r1, [r1, #4]
 800d832:	dd04      	ble.n	800d83e <__lshift+0x2a>
 800d834:	005b      	lsls	r3, r3, #1
 800d836:	429d      	cmp	r5, r3
 800d838:	f101 0101 	add.w	r1, r1, #1
 800d83c:	dcfa      	bgt.n	800d834 <__lshift+0x20>
 800d83e:	4650      	mov	r0, sl
 800d840:	f7ff fe38 	bl	800d4b4 <_Balloc>
 800d844:	2c00      	cmp	r4, #0
 800d846:	f100 0214 	add.w	r2, r0, #20
 800d84a:	dd38      	ble.n	800d8be <__lshift+0xaa>
 800d84c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800d850:	2100      	movs	r1, #0
 800d852:	f842 1b04 	str.w	r1, [r2], #4
 800d856:	4293      	cmp	r3, r2
 800d858:	d1fb      	bne.n	800d852 <__lshift+0x3e>
 800d85a:	6934      	ldr	r4, [r6, #16]
 800d85c:	f106 0114 	add.w	r1, r6, #20
 800d860:	f019 091f 	ands.w	r9, r9, #31
 800d864:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800d868:	d021      	beq.n	800d8ae <__lshift+0x9a>
 800d86a:	f1c9 0220 	rsb	r2, r9, #32
 800d86e:	2400      	movs	r4, #0
 800d870:	680f      	ldr	r7, [r1, #0]
 800d872:	fa07 fc09 	lsl.w	ip, r7, r9
 800d876:	ea4c 0404 	orr.w	r4, ip, r4
 800d87a:	469c      	mov	ip, r3
 800d87c:	f843 4b04 	str.w	r4, [r3], #4
 800d880:	f851 4b04 	ldr.w	r4, [r1], #4
 800d884:	458e      	cmp	lr, r1
 800d886:	fa24 f402 	lsr.w	r4, r4, r2
 800d88a:	d8f1      	bhi.n	800d870 <__lshift+0x5c>
 800d88c:	f8cc 4004 	str.w	r4, [ip, #4]
 800d890:	b10c      	cbz	r4, 800d896 <__lshift+0x82>
 800d892:	f108 0502 	add.w	r5, r8, #2
 800d896:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800d89a:	6872      	ldr	r2, [r6, #4]
 800d89c:	3d01      	subs	r5, #1
 800d89e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8a2:	6105      	str	r5, [r0, #16]
 800d8a4:	6031      	str	r1, [r6, #0]
 800d8a6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800d8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ae:	3b04      	subs	r3, #4
 800d8b0:	f851 2b04 	ldr.w	r2, [r1], #4
 800d8b4:	f843 2f04 	str.w	r2, [r3, #4]!
 800d8b8:	458e      	cmp	lr, r1
 800d8ba:	d8f9      	bhi.n	800d8b0 <__lshift+0x9c>
 800d8bc:	e7eb      	b.n	800d896 <__lshift+0x82>
 800d8be:	4613      	mov	r3, r2
 800d8c0:	e7cb      	b.n	800d85a <__lshift+0x46>
 800d8c2:	bf00      	nop

0800d8c4 <__mcmp>:
 800d8c4:	6902      	ldr	r2, [r0, #16]
 800d8c6:	690b      	ldr	r3, [r1, #16]
 800d8c8:	1ad2      	subs	r2, r2, r3
 800d8ca:	d113      	bne.n	800d8f4 <__mcmp+0x30>
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	3014      	adds	r0, #20
 800d8d0:	3114      	adds	r1, #20
 800d8d2:	4419      	add	r1, r3
 800d8d4:	b410      	push	{r4}
 800d8d6:	4403      	add	r3, r0
 800d8d8:	e001      	b.n	800d8de <__mcmp+0x1a>
 800d8da:	4298      	cmp	r0, r3
 800d8dc:	d20c      	bcs.n	800d8f8 <__mcmp+0x34>
 800d8de:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800d8e2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d8e6:	4294      	cmp	r4, r2
 800d8e8:	d0f7      	beq.n	800d8da <__mcmp+0x16>
 800d8ea:	d309      	bcc.n	800d900 <__mcmp+0x3c>
 800d8ec:	2001      	movs	r0, #1
 800d8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8f2:	4770      	bx	lr
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	4770      	bx	lr
 800d8f8:	2000      	movs	r0, #0
 800d8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8fe:	4770      	bx	lr
 800d900:	f04f 30ff 	mov.w	r0, #4294967295
 800d904:	e7f3      	b.n	800d8ee <__mcmp+0x2a>
 800d906:	bf00      	nop

0800d908 <__mdiff>:
 800d908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d90c:	690b      	ldr	r3, [r1, #16]
 800d90e:	460f      	mov	r7, r1
 800d910:	6911      	ldr	r1, [r2, #16]
 800d912:	1a5b      	subs	r3, r3, r1
 800d914:	2b00      	cmp	r3, #0
 800d916:	4690      	mov	r8, r2
 800d918:	d117      	bne.n	800d94a <__mdiff+0x42>
 800d91a:	0089      	lsls	r1, r1, #2
 800d91c:	f107 0214 	add.w	r2, r7, #20
 800d920:	f108 0514 	add.w	r5, r8, #20
 800d924:	1853      	adds	r3, r2, r1
 800d926:	4429      	add	r1, r5
 800d928:	e001      	b.n	800d92e <__mdiff+0x26>
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d25e      	bcs.n	800d9ec <__mdiff+0xe4>
 800d92e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800d932:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d936:	42a6      	cmp	r6, r4
 800d938:	d0f7      	beq.n	800d92a <__mdiff+0x22>
 800d93a:	d260      	bcs.n	800d9fe <__mdiff+0xf6>
 800d93c:	463b      	mov	r3, r7
 800d93e:	4614      	mov	r4, r2
 800d940:	4647      	mov	r7, r8
 800d942:	f04f 0901 	mov.w	r9, #1
 800d946:	4698      	mov	r8, r3
 800d948:	e006      	b.n	800d958 <__mdiff+0x50>
 800d94a:	db5d      	blt.n	800da08 <__mdiff+0x100>
 800d94c:	f107 0514 	add.w	r5, r7, #20
 800d950:	f102 0414 	add.w	r4, r2, #20
 800d954:	f04f 0900 	mov.w	r9, #0
 800d958:	6879      	ldr	r1, [r7, #4]
 800d95a:	f7ff fdab 	bl	800d4b4 <_Balloc>
 800d95e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d962:	693e      	ldr	r6, [r7, #16]
 800d964:	f8c0 900c 	str.w	r9, [r0, #12]
 800d968:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800d96c:	46a6      	mov	lr, r4
 800d96e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d972:	f100 0414 	add.w	r4, r0, #20
 800d976:	2300      	movs	r3, #0
 800d978:	f85e 1b04 	ldr.w	r1, [lr], #4
 800d97c:	f855 8b04 	ldr.w	r8, [r5], #4
 800d980:	b28a      	uxth	r2, r1
 800d982:	fa13 f388 	uxtah	r3, r3, r8
 800d986:	0c09      	lsrs	r1, r1, #16
 800d988:	1a9a      	subs	r2, r3, r2
 800d98a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800d98e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800d992:	b292      	uxth	r2, r2
 800d994:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d998:	45f4      	cmp	ip, lr
 800d99a:	f844 2b04 	str.w	r2, [r4], #4
 800d99e:	ea4f 4323 	mov.w	r3, r3, asr #16
 800d9a2:	d8e9      	bhi.n	800d978 <__mdiff+0x70>
 800d9a4:	42af      	cmp	r7, r5
 800d9a6:	d917      	bls.n	800d9d8 <__mdiff+0xd0>
 800d9a8:	46a4      	mov	ip, r4
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	f851 eb04 	ldr.w	lr, [r1], #4
 800d9b0:	fa13 f28e 	uxtah	r2, r3, lr
 800d9b4:	1413      	asrs	r3, r2, #16
 800d9b6:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800d9ba:	b292      	uxth	r2, r2
 800d9bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d9c0:	428f      	cmp	r7, r1
 800d9c2:	f84c 2b04 	str.w	r2, [ip], #4
 800d9c6:	ea4f 4323 	mov.w	r3, r3, asr #16
 800d9ca:	d8ef      	bhi.n	800d9ac <__mdiff+0xa4>
 800d9cc:	43ed      	mvns	r5, r5
 800d9ce:	443d      	add	r5, r7
 800d9d0:	f025 0503 	bic.w	r5, r5, #3
 800d9d4:	3504      	adds	r5, #4
 800d9d6:	442c      	add	r4, r5
 800d9d8:	3c04      	subs	r4, #4
 800d9da:	b922      	cbnz	r2, 800d9e6 <__mdiff+0xde>
 800d9dc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800d9e0:	3e01      	subs	r6, #1
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d0fa      	beq.n	800d9dc <__mdiff+0xd4>
 800d9e6:	6106      	str	r6, [r0, #16]
 800d9e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	f7ff fd61 	bl	800d4b4 <_Balloc>
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	6102      	str	r2, [r0, #16]
 800d9f8:	6143      	str	r3, [r0, #20]
 800d9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9fe:	462c      	mov	r4, r5
 800da00:	f04f 0900 	mov.w	r9, #0
 800da04:	4615      	mov	r5, r2
 800da06:	e7a7      	b.n	800d958 <__mdiff+0x50>
 800da08:	463b      	mov	r3, r7
 800da0a:	f107 0414 	add.w	r4, r7, #20
 800da0e:	f108 0514 	add.w	r5, r8, #20
 800da12:	4647      	mov	r7, r8
 800da14:	f04f 0901 	mov.w	r9, #1
 800da18:	4698      	mov	r8, r3
 800da1a:	e79d      	b.n	800d958 <__mdiff+0x50>

0800da1c <__d2b>:
 800da1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da20:	b083      	sub	sp, #12
 800da22:	2101      	movs	r1, #1
 800da24:	461c      	mov	r4, r3
 800da26:	f3c3 550a 	ubfx	r5, r3, #20, #11
 800da2a:	4617      	mov	r7, r2
 800da2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800da2e:	f7ff fd41 	bl	800d4b4 <_Balloc>
 800da32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800da36:	4681      	mov	r9, r0
 800da38:	b10d      	cbz	r5, 800da3e <__d2b+0x22>
 800da3a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800da3e:	9401      	str	r4, [sp, #4]
 800da40:	b31f      	cbz	r7, 800da8a <__d2b+0x6e>
 800da42:	a802      	add	r0, sp, #8
 800da44:	f840 7d08 	str.w	r7, [r0, #-8]!
 800da48:	f7ff fdc4 	bl	800d5d4 <__lo0bits>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d135      	bne.n	800dabc <__d2b+0xa0>
 800da50:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800da54:	f8c9 2014 	str.w	r2, [r9, #20]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	bf0c      	ite	eq
 800da5c:	2101      	moveq	r1, #1
 800da5e:	2102      	movne	r1, #2
 800da60:	f8c9 3018 	str.w	r3, [r9, #24]
 800da64:	f8c9 1010 	str.w	r1, [r9, #16]
 800da68:	b9dd      	cbnz	r5, 800daa2 <__d2b+0x86>
 800da6a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800da6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da72:	6030      	str	r0, [r6, #0]
 800da74:	6918      	ldr	r0, [r3, #16]
 800da76:	f7ff fd8d 	bl	800d594 <__hi0bits>
 800da7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800da80:	6018      	str	r0, [r3, #0]
 800da82:	4648      	mov	r0, r9
 800da84:	b003      	add	sp, #12
 800da86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da8a:	a801      	add	r0, sp, #4
 800da8c:	f7ff fda2 	bl	800d5d4 <__lo0bits>
 800da90:	9b01      	ldr	r3, [sp, #4]
 800da92:	f8c9 3014 	str.w	r3, [r9, #20]
 800da96:	2101      	movs	r1, #1
 800da98:	3020      	adds	r0, #32
 800da9a:	f8c9 1010 	str.w	r1, [r9, #16]
 800da9e:	2d00      	cmp	r5, #0
 800daa0:	d0e3      	beq.n	800da6a <__d2b+0x4e>
 800daa2:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 800daa6:	eb08 0300 	add.w	r3, r8, r0
 800daaa:	6033      	str	r3, [r6, #0]
 800daac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dab2:	6018      	str	r0, [r3, #0]
 800dab4:	4648      	mov	r0, r9
 800dab6:	b003      	add	sp, #12
 800dab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dabc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800dac0:	f1c0 0120 	rsb	r1, r0, #32
 800dac4:	fa03 f101 	lsl.w	r1, r3, r1
 800dac8:	430a      	orrs	r2, r1
 800daca:	40c3      	lsrs	r3, r0
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	f8c9 2014 	str.w	r2, [r9, #20]
 800dad2:	e7c1      	b.n	800da58 <__d2b+0x3c>

0800dad4 <_read_r>:
 800dad4:	b570      	push	{r4, r5, r6, lr}
 800dad6:	460d      	mov	r5, r1
 800dad8:	4c08      	ldr	r4, [pc, #32]	; (800dafc <_read_r+0x28>)
 800dada:	4611      	mov	r1, r2
 800dadc:	4606      	mov	r6, r0
 800dade:	461a      	mov	r2, r3
 800dae0:	4628      	mov	r0, r5
 800dae2:	2300      	movs	r3, #0
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	f000 f8eb 	bl	800dcc0 <_read>
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	d000      	beq.n	800daf0 <_read_r+0x1c>
 800daee:	bd70      	pop	{r4, r5, r6, pc}
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d0fb      	beq.n	800daee <_read_r+0x1a>
 800daf6:	6033      	str	r3, [r6, #0]
 800daf8:	bd70      	pop	{r4, r5, r6, pc}
 800dafa:	bf00      	nop
 800dafc:	20006df0 	.word	0x20006df0

0800db00 <__ssprint_r>:
 800db00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db04:	6893      	ldr	r3, [r2, #8]
 800db06:	b083      	sub	sp, #12
 800db08:	4690      	mov	r8, r2
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d072      	beq.n	800dbf4 <__ssprint_r+0xf4>
 800db0e:	4683      	mov	fp, r0
 800db10:	f04f 0900 	mov.w	r9, #0
 800db14:	6816      	ldr	r6, [r2, #0]
 800db16:	6808      	ldr	r0, [r1, #0]
 800db18:	688b      	ldr	r3, [r1, #8]
 800db1a:	460d      	mov	r5, r1
 800db1c:	464c      	mov	r4, r9
 800db1e:	2c00      	cmp	r4, #0
 800db20:	d045      	beq.n	800dbae <__ssprint_r+0xae>
 800db22:	429c      	cmp	r4, r3
 800db24:	461f      	mov	r7, r3
 800db26:	469a      	mov	sl, r3
 800db28:	d346      	bcc.n	800dbb8 <__ssprint_r+0xb8>
 800db2a:	89ab      	ldrh	r3, [r5, #12]
 800db2c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800db30:	d02d      	beq.n	800db8e <__ssprint_r+0x8e>
 800db32:	696f      	ldr	r7, [r5, #20]
 800db34:	6929      	ldr	r1, [r5, #16]
 800db36:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800db3a:	ebc1 0a00 	rsb	sl, r1, r0
 800db3e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800db42:	1c60      	adds	r0, r4, #1
 800db44:	107f      	asrs	r7, r7, #1
 800db46:	4450      	add	r0, sl
 800db48:	42b8      	cmp	r0, r7
 800db4a:	463a      	mov	r2, r7
 800db4c:	bf84      	itt	hi
 800db4e:	4607      	movhi	r7, r0
 800db50:	463a      	movhi	r2, r7
 800db52:	055b      	lsls	r3, r3, #21
 800db54:	d533      	bpl.n	800dbbe <__ssprint_r+0xbe>
 800db56:	4611      	mov	r1, r2
 800db58:	4658      	mov	r0, fp
 800db5a:	f7fa fbb3 	bl	80082c4 <_malloc_r>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d037      	beq.n	800dbd2 <__ssprint_r+0xd2>
 800db62:	4652      	mov	r2, sl
 800db64:	6929      	ldr	r1, [r5, #16]
 800db66:	9001      	str	r0, [sp, #4]
 800db68:	f7f2 fb58 	bl	800021c <memcpy>
 800db6c:	89aa      	ldrh	r2, [r5, #12]
 800db6e:	9b01      	ldr	r3, [sp, #4]
 800db70:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800db74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800db78:	81aa      	strh	r2, [r5, #12]
 800db7a:	ebca 0207 	rsb	r2, sl, r7
 800db7e:	eb03 000a 	add.w	r0, r3, sl
 800db82:	616f      	str	r7, [r5, #20]
 800db84:	612b      	str	r3, [r5, #16]
 800db86:	6028      	str	r0, [r5, #0]
 800db88:	60aa      	str	r2, [r5, #8]
 800db8a:	4627      	mov	r7, r4
 800db8c:	46a2      	mov	sl, r4
 800db8e:	4652      	mov	r2, sl
 800db90:	4649      	mov	r1, r9
 800db92:	f7fc fd47 	bl	800a624 <memmove>
 800db96:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800db9a:	68ab      	ldr	r3, [r5, #8]
 800db9c:	6828      	ldr	r0, [r5, #0]
 800db9e:	1bdb      	subs	r3, r3, r7
 800dba0:	4450      	add	r0, sl
 800dba2:	1b14      	subs	r4, r2, r4
 800dba4:	60ab      	str	r3, [r5, #8]
 800dba6:	6028      	str	r0, [r5, #0]
 800dba8:	f8c8 4008 	str.w	r4, [r8, #8]
 800dbac:	b314      	cbz	r4, 800dbf4 <__ssprint_r+0xf4>
 800dbae:	f8d6 9000 	ldr.w	r9, [r6]
 800dbb2:	6874      	ldr	r4, [r6, #4]
 800dbb4:	3608      	adds	r6, #8
 800dbb6:	e7b2      	b.n	800db1e <__ssprint_r+0x1e>
 800dbb8:	4627      	mov	r7, r4
 800dbba:	46a2      	mov	sl, r4
 800dbbc:	e7e7      	b.n	800db8e <__ssprint_r+0x8e>
 800dbbe:	4658      	mov	r0, fp
 800dbc0:	f7fc fd94 	bl	800a6ec <_realloc_r>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d1d7      	bne.n	800db7a <__ssprint_r+0x7a>
 800dbca:	6929      	ldr	r1, [r5, #16]
 800dbcc:	4658      	mov	r0, fp
 800dbce:	f7fc f9f9 	bl	8009fc4 <_free_r>
 800dbd2:	230c      	movs	r3, #12
 800dbd4:	f8cb 3000 	str.w	r3, [fp]
 800dbd8:	89ab      	ldrh	r3, [r5, #12]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe4:	81ab      	strh	r3, [r5, #12]
 800dbe6:	f8c8 2008 	str.w	r2, [r8, #8]
 800dbea:	f8c8 2004 	str.w	r2, [r8, #4]
 800dbee:	b003      	add	sp, #12
 800dbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	f8c8 0004 	str.w	r0, [r8, #4]
 800dbfa:	b003      	add	sp, #12
 800dbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc00 <_calloc_r>:
 800dc00:	b510      	push	{r4, lr}
 800dc02:	fb02 f101 	mul.w	r1, r2, r1
 800dc06:	f7fa fb5d 	bl	80082c4 <_malloc_r>
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	b1d8      	cbz	r0, 800dc46 <_calloc_r+0x46>
 800dc0e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800dc12:	f022 0203 	bic.w	r2, r2, #3
 800dc16:	3a04      	subs	r2, #4
 800dc18:	2a24      	cmp	r2, #36	; 0x24
 800dc1a:	d818      	bhi.n	800dc4e <_calloc_r+0x4e>
 800dc1c:	2a13      	cmp	r2, #19
 800dc1e:	d914      	bls.n	800dc4a <_calloc_r+0x4a>
 800dc20:	2300      	movs	r3, #0
 800dc22:	2a1b      	cmp	r2, #27
 800dc24:	6003      	str	r3, [r0, #0]
 800dc26:	6043      	str	r3, [r0, #4]
 800dc28:	d916      	bls.n	800dc58 <_calloc_r+0x58>
 800dc2a:	2a24      	cmp	r2, #36	; 0x24
 800dc2c:	6083      	str	r3, [r0, #8]
 800dc2e:	60c3      	str	r3, [r0, #12]
 800dc30:	bf11      	iteee	ne
 800dc32:	f100 0210 	addne.w	r2, r0, #16
 800dc36:	6103      	streq	r3, [r0, #16]
 800dc38:	6143      	streq	r3, [r0, #20]
 800dc3a:	f100 0218 	addeq.w	r2, r0, #24
 800dc3e:	2300      	movs	r3, #0
 800dc40:	6013      	str	r3, [r2, #0]
 800dc42:	6053      	str	r3, [r2, #4]
 800dc44:	6093      	str	r3, [r2, #8]
 800dc46:	4620      	mov	r0, r4
 800dc48:	bd10      	pop	{r4, pc}
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	e7f7      	b.n	800dc3e <_calloc_r+0x3e>
 800dc4e:	2100      	movs	r1, #0
 800dc50:	f7fa fdf0 	bl	8008834 <memset>
 800dc54:	4620      	mov	r0, r4
 800dc56:	bd10      	pop	{r4, pc}
 800dc58:	f100 0208 	add.w	r2, r0, #8
 800dc5c:	e7ef      	b.n	800dc3e <_calloc_r+0x3e>
 800dc5e:	bf00      	nop

0800dc60 <_close>:
 800dc60:	4b02      	ldr	r3, [pc, #8]	; (800dc6c <_close+0xc>)
 800dc62:	2258      	movs	r2, #88	; 0x58
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6a:	4770      	bx	lr
 800dc6c:	20006df0 	.word	0x20006df0

0800dc70 <_fstat>:
 800dc70:	4b02      	ldr	r3, [pc, #8]	; (800dc7c <_fstat+0xc>)
 800dc72:	2258      	movs	r2, #88	; 0x58
 800dc74:	601a      	str	r2, [r3, #0]
 800dc76:	f04f 30ff 	mov.w	r0, #4294967295
 800dc7a:	4770      	bx	lr
 800dc7c:	20006df0 	.word	0x20006df0

0800dc80 <_getpid>:
 800dc80:	4b02      	ldr	r3, [pc, #8]	; (800dc8c <_getpid+0xc>)
 800dc82:	2258      	movs	r2, #88	; 0x58
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8a:	4770      	bx	lr
 800dc8c:	20006df0 	.word	0x20006df0

0800dc90 <_isatty>:
 800dc90:	4b02      	ldr	r3, [pc, #8]	; (800dc9c <_isatty+0xc>)
 800dc92:	2258      	movs	r2, #88	; 0x58
 800dc94:	601a      	str	r2, [r3, #0]
 800dc96:	2000      	movs	r0, #0
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	20006df0 	.word	0x20006df0

0800dca0 <_kill>:
 800dca0:	4b02      	ldr	r3, [pc, #8]	; (800dcac <_kill+0xc>)
 800dca2:	2258      	movs	r2, #88	; 0x58
 800dca4:	601a      	str	r2, [r3, #0]
 800dca6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcaa:	4770      	bx	lr
 800dcac:	20006df0 	.word	0x20006df0

0800dcb0 <_lseek>:
 800dcb0:	4b02      	ldr	r3, [pc, #8]	; (800dcbc <_lseek+0xc>)
 800dcb2:	2258      	movs	r2, #88	; 0x58
 800dcb4:	601a      	str	r2, [r3, #0]
 800dcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcba:	4770      	bx	lr
 800dcbc:	20006df0 	.word	0x20006df0

0800dcc0 <_read>:
 800dcc0:	4b02      	ldr	r3, [pc, #8]	; (800dccc <_read+0xc>)
 800dcc2:	2258      	movs	r2, #88	; 0x58
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcca:	4770      	bx	lr
 800dccc:	20006df0 	.word	0x20006df0

0800dcd0 <_sbrk>:
 800dcd0:	4a04      	ldr	r2, [pc, #16]	; (800dce4 <_sbrk+0x14>)
 800dcd2:	4905      	ldr	r1, [pc, #20]	; (800dce8 <_sbrk+0x18>)
 800dcd4:	6813      	ldr	r3, [r2, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bf08      	it	eq
 800dcda:	460b      	moveq	r3, r1
 800dcdc:	4418      	add	r0, r3
 800dcde:	6010      	str	r0, [r2, #0]
 800dce0:	4618      	mov	r0, r3
 800dce2:	4770      	bx	lr
 800dce4:	20005988 	.word	0x20005988
 800dce8:	20006df8 	.word	0x20006df8

0800dcec <_write>:
 800dcec:	4b02      	ldr	r3, [pc, #8]	; (800dcf8 <_write+0xc>)
 800dcee:	2258      	movs	r2, #88	; 0x58
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf6:	4770      	bx	lr
 800dcf8:	20006df0 	.word	0x20006df0

0800dcfc <_exit>:
 800dcfc:	e7fe      	b.n	800dcfc <_exit>
 800dcfe:	bf00      	nop

0800dd00 <_init>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	bf00      	nop
 800dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd06:	bc08      	pop	{r3}
 800dd08:	469e      	mov	lr, r3
 800dd0a:	4770      	bx	lr

0800dd0c <_fini>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr
