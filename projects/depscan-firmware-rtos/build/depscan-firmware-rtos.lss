
build/depscan-firmware-rtos.elf:     file format elf32-littlearm
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08006a91


Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ed0 	.word	0x08007ed0

080001c4 <frame_dummy>:
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <frame_dummy+0x24>)
 80001c6:	b510      	push	{r4, lr}
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <frame_dummy+0x28>)
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <frame_dummy+0x2c>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	4808      	ldr	r0, [pc, #32]	; (80001f4 <frame_dummy+0x30>)
 80001d4:	6803      	ldr	r3, [r0, #0]
 80001d6:	b903      	cbnz	r3, 80001da <frame_dummy+0x16>
 80001d8:	bd10      	pop	{r4, pc}
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <frame_dummy+0x34>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d0fb      	beq.n	80001d8 <frame_dummy+0x14>
 80001e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001e4:	4718      	bx	r3
 80001e6:	bf00      	nop
 80001e8:	00000000 	.word	0x00000000
 80001ec:	200001e8 	.word	0x200001e8
 80001f0:	08007ed0 	.word	0x08007ed0
 80001f4:	200001e4 	.word	0x200001e4
 80001f8:	00000000 	.word	0x00000000

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr
 800020c:	0000      	movs	r0, r0
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97e 	b.w	80005c4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460e      	mov	r6, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9d08      	ldr	r5, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d150      	bne.n	8000392 <__udivmoddi4+0xb2>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96c      	bls.n	80003d0 <__udivmoddi4+0xf0>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0420 	rsb	r4, lr, #32
 8000304:	fa20 f404 	lsr.w	r4, r0, r4
 8000308:	fa01 f60e 	lsl.w	r6, r1, lr
 800030c:	ea44 0c06 	orr.w	ip, r4, r6
 8000310:	fa02 f70e 	lsl.w	r7, r2, lr
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	fbbc f0f9 	udiv	r0, ip, r9
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb09 c610 	mls	r6, r9, r0, ip
 800032a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800032e:	fb00 f308 	mul.w	r3, r0, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x6a>
 8000336:	19f6      	adds	r6, r6, r7
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	f080 8122 	bcs.w	8000584 <__udivmoddi4+0x2a4>
 8000340:	42b3      	cmp	r3, r6
 8000342:	f240 811f 	bls.w	8000584 <__udivmoddi4+0x2a4>
 8000346:	3802      	subs	r0, #2
 8000348:	443e      	add	r6, r7
 800034a:	1af6      	subs	r6, r6, r3
 800034c:	b2a2      	uxth	r2, r4
 800034e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000352:	fb09 6613 	mls	r6, r9, r3, r6
 8000356:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800035a:	fb03 f808 	mul.w	r8, r3, r8
 800035e:	45a0      	cmp	r8, r4
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x96>
 8000362:	19e4      	adds	r4, r4, r7
 8000364:	f103 32ff 	add.w	r2, r3, #4294967295
 8000368:	f080 810a 	bcs.w	8000580 <__udivmoddi4+0x2a0>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f240 8107 	bls.w	8000580 <__udivmoddi4+0x2a0>
 8000372:	3b02      	subs	r3, #2
 8000374:	443c      	add	r4, r7
 8000376:	ebc8 0404 	rsb	r4, r8, r4
 800037a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037e:	2100      	movs	r1, #0
 8000380:	2d00      	cmp	r5, #0
 8000382:	d062      	beq.n	800044a <__udivmoddi4+0x16a>
 8000384:	fa24 f40e 	lsr.w	r4, r4, lr
 8000388:	2300      	movs	r3, #0
 800038a:	602c      	str	r4, [r5, #0]
 800038c:	606b      	str	r3, [r5, #4]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d907      	bls.n	80003a6 <__udivmoddi4+0xc6>
 8000396:	2d00      	cmp	r5, #0
 8000398:	d055      	beq.n	8000446 <__udivmoddi4+0x166>
 800039a:	2100      	movs	r1, #0
 800039c:	e885 0041 	stmia.w	r5, {r0, r6}
 80003a0:	4608      	mov	r0, r1
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x1f0>
 80003b0:	42b3      	cmp	r3, r6
 80003b2:	d302      	bcc.n	80003ba <__udivmoddi4+0xda>
 80003b4:	4282      	cmp	r2, r0
 80003b6:	f200 80f8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 80003ba:	1a84      	subs	r4, r0, r2
 80003bc:	eb66 0603 	sbc.w	r6, r6, r3
 80003c0:	2001      	movs	r0, #1
 80003c2:	46b4      	mov	ip, r6
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d040      	beq.n	800044a <__udivmoddi4+0x16a>
 80003c8:	e885 1010 	stmia.w	r5, {r4, ip}
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	b912      	cbnz	r2, 80003d8 <__udivmoddi4+0xf8>
 80003d2:	2701      	movs	r7, #1
 80003d4:	fbb7 f7f2 	udiv	r7, r7, r2
 80003d8:	fab7 fe87 	clz	lr, r7
 80003dc:	f1be 0f00 	cmp.w	lr, #0
 80003e0:	d135      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e2:	1bf3      	subs	r3, r6, r7
 80003e4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f2:	0c22      	lsrs	r2, r4, #16
 80003f4:	fb08 3610 	mls	r6, r8, r0, r3
 80003f8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80003fc:	fb0c f300 	mul.w	r3, ip, r0
 8000400:	42b3      	cmp	r3, r6
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19f6      	adds	r6, r6, r7
 8000406:	f100 32ff 	add.w	r2, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42b3      	cmp	r3, r6
 800040e:	f200 80ce 	bhi.w	80005ae <__udivmoddi4+0x2ce>
 8000412:	4610      	mov	r0, r2
 8000414:	1af6      	subs	r6, r6, r3
 8000416:	b2a2      	uxth	r2, r4
 8000418:	fbb6 f3f8 	udiv	r3, r6, r8
 800041c:	fb08 6613 	mls	r6, r8, r3, r6
 8000420:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000424:	fb0c fc03 	mul.w	ip, ip, r3
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b5 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 800043a:	4613      	mov	r3, r2
 800043c:	ebcc 0404 	rsb	r4, ip, r4
 8000440:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000444:	e79c      	b.n	8000380 <__udivmoddi4+0xa0>
 8000446:	4629      	mov	r1, r5
 8000448:	4628      	mov	r0, r5
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0120 	rsb	r1, lr, #32
 8000452:	fa06 f30e 	lsl.w	r3, r6, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f901 	lsr.w	r9, r0, r1
 800045e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000462:	40ce      	lsrs	r6, r1
 8000464:	ea49 0903 	orr.w	r9, r9, r3
 8000468:	fbb6 faf8 	udiv	sl, r6, r8
 800046c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000470:	fb08 661a 	mls	r6, r8, sl, r6
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800047c:	fb0a f20c 	mul.w	r2, sl, ip
 8000480:	429a      	cmp	r2, r3
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d90a      	bls.n	800049e <__udivmoddi4+0x1be>
 8000488:	19db      	adds	r3, r3, r7
 800048a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800048e:	f080 8087 	bcs.w	80005a0 <__udivmoddi4+0x2c0>
 8000492:	429a      	cmp	r2, r3
 8000494:	f240 8084 	bls.w	80005a0 <__udivmoddi4+0x2c0>
 8000498:	f1aa 0a02 	sub.w	sl, sl, #2
 800049c:	443b      	add	r3, r7
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fa1f f989 	uxth.w	r9, r9
 80004a4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ac:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80004b0:	fb01 f60c 	mul.w	r6, r1, ip
 80004b4:	429e      	cmp	r6, r3
 80004b6:	d907      	bls.n	80004c8 <__udivmoddi4+0x1e8>
 80004b8:	19db      	adds	r3, r3, r7
 80004ba:	f101 32ff 	add.w	r2, r1, #4294967295
 80004be:	d26b      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d969      	bls.n	8000598 <__udivmoddi4+0x2b8>
 80004c4:	3902      	subs	r1, #2
 80004c6:	443b      	add	r3, r7
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80004ce:	e78e      	b.n	80003ee <__udivmoddi4+0x10e>
 80004d0:	f1c1 0e20 	rsb	lr, r1, #32
 80004d4:	fa22 f40e 	lsr.w	r4, r2, lr
 80004d8:	408b      	lsls	r3, r1
 80004da:	4323      	orrs	r3, r4
 80004dc:	fa20 f70e 	lsr.w	r7, r0, lr
 80004e0:	fa06 f401 	lsl.w	r4, r6, r1
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	fa26 f60e 	lsr.w	r6, r6, lr
 80004ec:	433c      	orrs	r4, r7
 80004ee:	fbb6 f9fc 	udiv	r9, r6, ip
 80004f2:	0c27      	lsrs	r7, r4, #16
 80004f4:	fb0c 6619 	mls	r6, ip, r9, r6
 80004f8:	fa1f f883 	uxth.w	r8, r3
 80004fc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000500:	fb09 f708 	mul.w	r7, r9, r8
 8000504:	42b7      	cmp	r7, r6
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	fa00 fa01 	lsl.w	sl, r0, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x242>
 8000510:	18f6      	adds	r6, r6, r3
 8000512:	f109 30ff 	add.w	r0, r9, #4294967295
 8000516:	d241      	bcs.n	800059c <__udivmoddi4+0x2bc>
 8000518:	42b7      	cmp	r7, r6
 800051a:	d93f      	bls.n	800059c <__udivmoddi4+0x2bc>
 800051c:	f1a9 0902 	sub.w	r9, r9, #2
 8000520:	441e      	add	r6, r3
 8000522:	1bf6      	subs	r6, r6, r7
 8000524:	b2a0      	uxth	r0, r4
 8000526:	fbb6 f4fc 	udiv	r4, r6, ip
 800052a:	fb0c 6614 	mls	r6, ip, r4, r6
 800052e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000532:	fb04 f808 	mul.w	r8, r4, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x26a>
 800053a:	18ff      	adds	r7, r7, r3
 800053c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000540:	d228      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d926      	bls.n	8000594 <__udivmoddi4+0x2b4>
 8000546:	3c02      	subs	r4, #2
 8000548:	441f      	add	r7, r3
 800054a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800054e:	ebc8 0707 	rsb	r7, r8, r7
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	4644      	mov	r4, r8
 800055a:	464e      	mov	r6, r9
 800055c:	d314      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	d029      	beq.n	80005b4 <__udivmoddi4+0x2d4>
 8000560:	b365      	cbz	r5, 80005bc <__udivmoddi4+0x2dc>
 8000562:	ebba 0304 	subs.w	r3, sl, r4
 8000566:	eb67 0706 	sbc.w	r7, r7, r6
 800056a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800056e:	40cb      	lsrs	r3, r1
 8000570:	40cf      	lsrs	r7, r1
 8000572:	ea4e 0303 	orr.w	r3, lr, r3
 8000576:	e885 0088 	stmia.w	r5, {r3, r7}
 800057a:	2100      	movs	r1, #0
 800057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000580:	4613      	mov	r3, r2
 8000582:	e6f8      	b.n	8000376 <__udivmoddi4+0x96>
 8000584:	4610      	mov	r0, r2
 8000586:	e6e0      	b.n	800034a <__udivmoddi4+0x6a>
 8000588:	ebb8 0402 	subs.w	r4, r8, r2
 800058c:	eb69 0603 	sbc.w	r6, r9, r3
 8000590:	3801      	subs	r0, #1
 8000592:	e7e5      	b.n	8000560 <__udivmoddi4+0x280>
 8000594:	4604      	mov	r4, r0
 8000596:	e7d8      	b.n	800054a <__udivmoddi4+0x26a>
 8000598:	4611      	mov	r1, r2
 800059a:	e795      	b.n	80004c8 <__udivmoddi4+0x1e8>
 800059c:	4681      	mov	r9, r0
 800059e:	e7c0      	b.n	8000522 <__udivmoddi4+0x242>
 80005a0:	468a      	mov	sl, r1
 80005a2:	e77c      	b.n	800049e <__udivmoddi4+0x1be>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e748      	b.n	800043c <__udivmoddi4+0x15c>
 80005aa:	4608      	mov	r0, r1
 80005ac:	e70a      	b.n	80003c4 <__udivmoddi4+0xe4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	443e      	add	r6, r7
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x134>
 80005b4:	45c2      	cmp	sl, r8
 80005b6:	d3e7      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80005b8:	463e      	mov	r6, r7
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x280>
 80005bc:	4629      	mov	r1, r5
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	2400      	movs	r4, #0
 80005ce:	9405      	str	r4, [sp, #20]
 80005d0:	9406      	str	r4, [sp, #24]
 80005d2:	9407      	str	r4, [sp, #28]
 80005d4:	9408      	str	r4, [sp, #32]
 80005d6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d8:	9401      	str	r4, [sp, #4]
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <MX_GPIO_Init+0xb8>)
 80005dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005e2:	631a      	str	r2, [r3, #48]	; 0x30
 80005e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	9402      	str	r4, [sp, #8]
 80005f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f2:	f042 0204 	orr.w	r2, r2, #4
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	f002 0204 	and.w	r2, r2, #4
 80005fe:	9202      	str	r2, [sp, #8]
 8000600:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	9403      	str	r4, [sp, #12]
 8000604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000606:	f042 0201 	orr.w	r2, r2, #1
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
 800060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060e:	f002 0201 	and.w	r2, r2, #1
 8000612:	9203      	str	r2, [sp, #12]
 8000614:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	9404      	str	r4, [sp, #16]
 8000618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061a:	f042 0202 	orr.w	r2, r2, #2
 800061e:	631a      	str	r2, [r3, #48]	; 0x30
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	9304      	str	r3, [sp, #16]
 8000628:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 800062a:	4e16      	ldr	r6, [pc, #88]	; (8000684 <MX_GPIO_Init+0xbc>)
 800062c:	4622      	mov	r2, r4
 800062e:	2101      	movs	r1, #1
 8000630:	4630      	mov	r0, r6
 8000632:	f002 fc83 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);
 8000636:	4f14      	ldr	r7, [pc, #80]	; (8000688 <MX_GPIO_Init+0xc0>)
 8000638:	4622      	mov	r2, r4
 800063a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800063e:	4638      	mov	r0, r7
 8000640:	f002 fc7c 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
 8000644:	2501      	movs	r5, #1
 8000646:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);
 800064e:	a905      	add	r1, sp, #20
 8000650:	4630      	mov	r0, r6
 8000652:	f002 fb9d 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
 8000656:	2302      	movs	r3, #2
 8000658:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_GPIO_Init+0xc4>)
 800065c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000660:	a905      	add	r1, sp, #20
 8000662:	4630      	mov	r0, r6
 8000664:	f002 fb94 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
  GPIO_InitStruct.Pin = MOT_DIR_1_Pin|MOT_DIR_2_Pin;
 8000668:	f44f 7340 	mov.w	r3, #768	; 0x300
 800066c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	a905      	add	r1, sp, #20
 8000676:	4638      	mov	r0, r7
 8000678:	f002 fb8a 	bl	8002d90 <HAL_GPIO_Init>

}
 800067c:	b00b      	add	sp, #44	; 0x2c
 800067e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020800 	.word	0x40020800
 8000688:	40020400 	.word	0x40020400
 800068c:	10110000 	.word	0x10110000

08000690 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000690:	b510      	push	{r4, lr}
 8000692:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000694:	2400      	movs	r4, #0
 8000696:	9401      	str	r4, [sp, #4]
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_DMA_Init+0x40>)
 800069a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80006ac:	4622      	mov	r2, r4
 80006ae:	2105      	movs	r1, #5
 80006b0:	203a      	movs	r0, #58	; 0x3a
 80006b2:	f002 fe15 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006b6:	203a      	movs	r0, #58	; 0x3a
 80006b8:	f002 fe44 	bl	8003344 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80006bc:	4622      	mov	r2, r4
 80006be:	2105      	movs	r1, #5
 80006c0:	203b      	movs	r0, #59	; 0x3b
 80006c2:	f002 fe0d 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006c6:	203b      	movs	r0, #59	; 0x3b
 80006c8:	f002 fe3c 	bl	8003344 <HAL_NVIC_EnableIRQ>

}
 80006cc:	b002      	add	sp, #8
 80006ce:	bd10      	pop	{r4, pc}
 80006d0:	40023800 	.word	0x40023800

080006d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	b097      	sub	sp, #92	; 0x5c

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d8:	2400      	movs	r4, #0
 80006da:	9412      	str	r4, [sp, #72]	; 0x48
 80006dc:	9413      	str	r4, [sp, #76]	; 0x4c
 80006de:	9414      	str	r4, [sp, #80]	; 0x50
 80006e0:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	9410      	str	r4, [sp, #64]	; 0x40
 80006e4:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e6:	9409      	str	r4, [sp, #36]	; 0x24
 80006e8:	940a      	str	r4, [sp, #40]	; 0x28
 80006ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80006ec:	940c      	str	r4, [sp, #48]	; 0x30
 80006ee:	940d      	str	r4, [sp, #52]	; 0x34
 80006f0:	940e      	str	r4, [sp, #56]	; 0x38
 80006f2:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f4:	2220      	movs	r2, #32
 80006f6:	4621      	mov	r1, r4
 80006f8:	a801      	add	r0, sp, #4
 80006fa:	f006 fa64 	bl	8006bc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006fe:	4d1e      	ldr	r5, [pc, #120]	; (8000778 <MX_TIM1_Init+0xa4>)
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM1_Init+0xa8>)
 8000702:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8000704:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8000708:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800070c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000710:	4628      	mov	r0, r5
 8000712:	f002 ff77 	bl	8003604 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800071c:	a912      	add	r1, sp, #72	; 0x48
 800071e:	4628      	mov	r0, r5
 8000720:	f003 f8a0 	bl	8003864 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000724:	4628      	mov	r0, r5
 8000726:	f002 ffa5 	bl	8003674 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072a:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072e:	a910      	add	r1, sp, #64	; 0x40
 8000730:	4628      	mov	r0, r5
 8000732:	f003 f909 	bl	8003948 <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000736:	2360      	movs	r3, #96	; 0x60
 8000738:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800073a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800073c:	2302      	movs	r3, #2
 800073e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000740:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000742:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000744:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000746:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000748:	4622      	mov	r2, r4
 800074a:	a909      	add	r1, sp, #36	; 0x24
 800074c:	4628      	mov	r0, r5
 800074e:	f003 f80d 	bl	800376c <HAL_TIM_PWM_ConfigChannel>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000752:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000754:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000756:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000758:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075a:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000762:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000764:	a901      	add	r1, sp, #4
 8000766:	4628      	mov	r0, r5
 8000768:	f003 f92c 	bl	80039c4 <HAL_TIMEx_ConfigBreakDeadTime>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800076c:	4628      	mov	r0, r5
 800076e:	f000 fc85 	bl	800107c <HAL_TIM_MspPostInit>

}
 8000772:	b017      	add	sp, #92	; 0x5c
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop
 8000778:	20004f74 	.word	0x20004f74
 800077c:	40010000 	.word	0x40010000

08000780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000784:	2400      	movs	r4, #0
 8000786:	940a      	str	r4, [sp, #40]	; 0x28
 8000788:	940b      	str	r4, [sp, #44]	; 0x2c
 800078a:	940c      	str	r4, [sp, #48]	; 0x30
 800078c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078e:	9408      	str	r4, [sp, #32]
 8000790:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000792:	9401      	str	r4, [sp, #4]
 8000794:	9402      	str	r4, [sp, #8]
 8000796:	9403      	str	r4, [sp, #12]
 8000798:	9404      	str	r4, [sp, #16]
 800079a:	9405      	str	r4, [sp, #20]
 800079c:	9406      	str	r4, [sp, #24]
 800079e:	9407      	str	r4, [sp, #28]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a0:	4d15      	ldr	r5, [pc, #84]	; (80007f8 <MX_TIM3_Init+0x78>)
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_TIM3_Init+0x7c>)
 80007a4:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 80007a6:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
 80007aa:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b0:	4628      	mov	r0, r5
 80007b2:	f002 ff27 	bl	8003604 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007bc:	a90a      	add	r1, sp, #40	; 0x28
 80007be:	4628      	mov	r0, r5
 80007c0:	f003 f850 	bl	8003864 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007c4:	4628      	mov	r0, r5
 80007c6:	f002 ff55 	bl	8003674 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ce:	a908      	add	r1, sp, #32
 80007d0:	4628      	mov	r0, r5
 80007d2:	f003 f8b9 	bl	8003948 <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	; 0x60
 80007d8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80007da:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80007dc:	2302      	movs	r3, #2
 80007de:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e0:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e2:	4622      	mov	r2, r4
 80007e4:	a901      	add	r1, sp, #4
 80007e6:	4628      	mov	r0, r5
 80007e8:	f002 ffc0 	bl	800376c <HAL_TIM_PWM_ConfigChannel>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ec:	4628      	mov	r0, r5
 80007ee:	f000 fc45 	bl	800107c <HAL_TIM_MspPostInit>

}
 80007f2:	b00f      	add	sp, #60	; 0x3c
 80007f4:	bd30      	pop	{r4, r5, pc}
 80007f6:	bf00      	nop
 80007f8:	20004f30 	.word	0x20004f30
 80007fc:	40000400 	.word	0x40000400

08000800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000800:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_SPI1_Init+0x38>)
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_SPI1_Init+0x3c>)
 8000806:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000808:	f44f 7382 	mov.w	r3, #260	; 0x104
 800080c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	2300      	movs	r3, #0
 8000810:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000812:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000814:	2202      	movs	r2, #2
 8000816:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000818:	2201      	movs	r2, #1
 800081a:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000822:	2208      	movs	r2, #8
 8000824:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000826:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000828:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082c:	230a      	movs	r3, #10
 800082e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	f005 fdd4 	bl	80063dc <HAL_SPI_Init>
 8000834:	bd08      	pop	{r3, pc}
 8000836:	bf00      	nop
 8000838:	200057b4 	.word	0x200057b4
 800083c:	40013000 	.word	0x40013000

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000844:	2400      	movs	r4, #0
 8000846:	940a      	str	r4, [sp, #40]	; 0x28
 8000848:	940b      	str	r4, [sp, #44]	; 0x2c
 800084a:	940c      	str	r4, [sp, #48]	; 0x30
 800084c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	9408      	str	r4, [sp, #32]
 8000850:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	9401      	str	r4, [sp, #4]
 8000854:	9402      	str	r4, [sp, #8]
 8000856:	9403      	str	r4, [sp, #12]
 8000858:	9404      	str	r4, [sp, #16]
 800085a:	9405      	str	r4, [sp, #20]
 800085c:	9406      	str	r4, [sp, #24]
 800085e:	9407      	str	r4, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000860:	4d14      	ldr	r5, [pc, #80]	; (80008b4 <MX_TIM2_Init+0x74>)
 8000862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000866:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 83;
 8000868:	2353      	movs	r3, #83	; 0x53
 800086a:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 999999999;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_TIM2_Init+0x78>)
 8000870:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000872:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000876:	4628      	mov	r0, r5
 8000878:	f002 fec4 	bl	8003604 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000880:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000882:	a90a      	add	r1, sp, #40	; 0x28
 8000884:	4628      	mov	r0, r5
 8000886:	f002 ffed 	bl	8003864 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800088a:	4628      	mov	r0, r5
 800088c:	f002 fed6 	bl	800363c <HAL_TIM_OC_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	a908      	add	r1, sp, #32
 8000896:	4628      	mov	r0, r5
 8000898:	f003 f856 	bl	8003948 <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800089c:	9401      	str	r4, [sp, #4]
  sConfigOC.Pulse = 0;
 800089e:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a0:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a2:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a4:	4622      	mov	r2, r4
 80008a6:	a901      	add	r1, sp, #4
 80008a8:	4628      	mov	r0, r5
 80008aa:	f002 ff2f 	bl	800370c <HAL_TIM_OC_ConfigChannel>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ae:	b00f      	add	sp, #60	; 0x3c
 80008b0:	bd30      	pop	{r4, r5, pc}
 80008b2:	bf00      	nop
 80008b4:	20005868 	.word	0x20005868
 80008b8:	3b9ac9ff 	.word	0x3b9ac9ff

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b530      	push	{r4, r5, lr}
 80008be:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c0:	2230      	movs	r2, #48	; 0x30
 80008c2:	2100      	movs	r1, #0
 80008c4:	a808      	add	r0, sp, #32
 80008c6:	f006 f97e 	bl	8006bc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ca:	2400      	movs	r4, #0
 80008cc:	9403      	str	r4, [sp, #12]
 80008ce:	9404      	str	r4, [sp, #16]
 80008d0:	9405      	str	r4, [sp, #20]
 80008d2:	9406      	str	r4, [sp, #24]
 80008d4:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	9401      	str	r4, [sp, #4]
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <SystemClock_Config+0x94>)
 80008da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ec:	9402      	str	r4, [sp, #8]
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <SystemClock_Config+0x98>)
 80008f0:	6813      	ldr	r3, [r2, #0]
 80008f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	6813      	ldr	r3, [r2, #0]
 80008fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000906:	2301      	movs	r3, #1
 8000908:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2502      	movs	r5, #2
 8000912:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000914:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000918:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800091a:	2308      	movs	r3, #8
 800091c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800091e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000922:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000924:	2304      	movs	r3, #4
 8000926:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000928:	2307      	movs	r3, #7
 800092a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	a808      	add	r0, sp, #32
 800092e:	f001 fed5 	bl	80026dc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000942:	4629      	mov	r1, r5
 8000944:	a803      	add	r0, sp, #12
 8000946:	f002 f93b 	bl	8002bc0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800094a:	b015      	add	sp, #84	; 0x54
 800094c:	bd30      	pop	{r4, r5, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b508      	push	{r3, lr}
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f002 fd01 	bl	8003360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f7ff ffad 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f7ff fe31 	bl	80005c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000966:	f7ff fe93 	bl	8000690 <MX_DMA_Init>
  MX_TIM1_Init();
 800096a:	f7ff feb3 	bl	80006d4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800096e:	f7ff ff07 	bl	8000780 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000972:	f7ff ff45 	bl	8000800 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000976:	f7ff ff63 	bl	8000840 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 800097a:	f004 fb05 	bl	8004f88 <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HostIO */
  HostIOHandle = osThreadNew(StartDefaultTask, NULL, &HostIO_attributes);
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <main+0x3c>)
 8000980:	2100      	movs	r1, #0
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <main+0x40>)
 8000984:	f004 fb48 	bl	8005018 <osThreadNew>
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <main+0x44>)
 800098a:	6018      	str	r0, [r3, #0]
    /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800098c:	f004 fb1e 	bl	8004fcc <osKernelStart>
 8000990:	e7fe      	b.n	8000990 <main+0x38>
 8000992:	bf00      	nop
 8000994:	08007ee8 	.word	0x08007ee8
 8000998:	080065ad 	.word	0x080065ad
 800099c:	20004f70 	.word	0x20004f70

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80009a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80009a6:	2200      	movs	r2, #0
 80009a8:	490d      	ldr	r1, [pc, #52]	; (80009e0 <MX_USB_DEVICE_Init+0x3c>)
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <MX_USB_DEVICE_Init+0x40>)
 80009ac:	f004 fe9a 	bl	80056e4 <USBD_Init>
 80009b0:	b108      	cbz	r0, 80009b6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80009b2:	f7ff fff5 	bl	80009a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80009b6:	490c      	ldr	r1, [pc, #48]	; (80009e8 <MX_USB_DEVICE_Init+0x44>)
 80009b8:	480a      	ldr	r0, [pc, #40]	; (80009e4 <MX_USB_DEVICE_Init+0x40>)
 80009ba:	f004 feab 	bl	8005714 <USBD_RegisterClass>
 80009be:	b108      	cbz	r0, 80009c4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80009c0:	f7ff ffee 	bl	80009a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80009c4:	4909      	ldr	r1, [pc, #36]	; (80009ec <MX_USB_DEVICE_Init+0x48>)
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_USB_DEVICE_Init+0x40>)
 80009c8:	f005 fcbe 	bl	8006348 <USBD_CDC_RegisterInterface>
 80009cc:	b108      	cbz	r0, 80009d2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80009ce:	f7ff ffe7 	bl	80009a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_USB_DEVICE_Init+0x40>)
 80009d4:	f004 fea6 	bl	8005724 <USBD_Start>
 80009d8:	b108      	cbz	r0, 80009de <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80009da:	f7ff ffe1 	bl	80009a0 <Error_Handler>
 80009de:	bd08      	pop	{r3, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20005968 	.word	0x20005968
 80009e8:	200000b4 	.word	0x200000b4
 80009ec:	20000050 	.word	0x20000050

080009f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	2300      	movs	r3, #0
 80009f6:	9303      	str	r3, [sp, #12]
 80009f8:	9304      	str	r3, [sp, #16]
 80009fa:	9305      	str	r3, [sp, #20]
 80009fc:	9306      	str	r3, [sp, #24]
 80009fe:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000a00:	6803      	ldr	r3, [r0, #0]
 8000a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a06:	d139      	bne.n	8000a7c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	2500      	movs	r5, #0
 8000a0a:	9501      	str	r5, [sp, #4]
 8000a0c:	4c1c      	ldr	r4, [pc, #112]	; (8000a80 <HAL_PCD_MspInit+0x90>)
 8000a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6323      	str	r3, [r4, #48]	; 0x30
 8000a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	9b01      	ldr	r3, [sp, #4]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a20:	ae08      	add	r6, sp, #32
 8000a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a26:	f846 3d14 	str.w	r3, [r6, #-20]!
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	4f16      	ldr	r7, [pc, #88]	; (8000a84 <HAL_PCD_MspInit+0x94>)
 8000a2c:	4631      	mov	r1, r6
 8000a2e:	4638      	mov	r0, r7
 8000a30:	f002 f9ae 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a44:	230a      	movs	r3, #10
 8000a46:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	4631      	mov	r1, r6
 8000a4a:	4638      	mov	r0, r7
 8000a4c:	f002 f9a0 	bl	8002d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a56:	6363      	str	r3, [r4, #52]	; 0x34
 8000a58:	9502      	str	r5, [sp, #8]
 8000a5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6463      	str	r3, [r4, #68]	; 0x44
 8000a62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a68:	9302      	str	r3, [sp, #8]
 8000a6a:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000a6c:	462a      	mov	r2, r5
 8000a6e:	4629      	mov	r1, r5
 8000a70:	2043      	movs	r0, #67	; 0x43
 8000a72:	f002 fc35 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000a76:	2043      	movs	r0, #67	; 0x43
 8000a78:	f002 fc64 	bl	8003344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000a7c:	b009      	add	sp, #36	; 0x24
 8000a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000

08000a88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000a88:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000a8a:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8000a8e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a92:	f004 fe63 	bl	800575c <USBD_LL_SetupStage>
 8000a96:	bd08      	pop	{r3, pc}

08000a98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000a98:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000a9a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000a9e:	0093      	lsls	r3, r2, #2
 8000aa0:	4403      	add	r3, r0
 8000aa2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000aa6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000aaa:	f004 fe85 	bl	80057b8 <USBD_LL_DataOutStage>
 8000aae:	bd08      	pop	{r3, pc}

08000ab0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ab0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000ab2:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000ab6:	0093      	lsls	r3, r2, #2
 8000ab8:	4403      	add	r3, r0
 8000aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000abc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ac0:	f004 fec4 	bl	800584c <USBD_LL_DataInStage>
 8000ac4:	bd08      	pop	{r3, pc}
 8000ac6:	bf00      	nop

08000ac8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ac8:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000aca:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ace:	f004 ff61 	bl	8005994 <USBD_LL_SOF>
 8000ad2:	bd08      	pop	{r3, pc}

08000ad4 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8000ad4:	b510      	push	{r4, lr}
 8000ad6:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000ad8:	68c3      	ldr	r3, [r0, #12]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d001      	beq.n	8000ae2 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8000ade:	f7ff ff5f 	bl	80009a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000ae8:	f004 ff40 	bl	800596c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000aec:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000af0:	f004 ff14 	bl	800591c <USBD_LL_Reset>
 8000af4:	bd10      	pop	{r4, pc}
 8000af6:	bf00      	nop

08000af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000af8:	b510      	push	{r4, lr}
 8000afa:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000afc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b00:	f004 ff38 	bl	8005974 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8000b04:	6822      	ldr	r2, [r4, #0]
 8000b06:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000b12:	6a23      	ldr	r3, [r4, #32]
 8000b14:	b123      	cbz	r3, 8000b20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000b16:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <HAL_PCD_SuspendCallback+0x2c>)
 8000b18:	6913      	ldr	r3, [r2, #16]
 8000b1a:	f043 0306 	orr.w	r3, r3, #6
 8000b1e:	6113      	str	r3, [r2, #16]
 8000b20:	bd10      	pop	{r4, pc}
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000b2a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b2e:	f004 ff2b 	bl	8005988 <USBD_LL_Resume>
 8000b32:	bd08      	pop	{r3, pc}

08000b34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b34:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000b36:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b3a:	f004 ff39 	bl	80059b0 <USBD_LL_IsoOUTIncomplete>
 8000b3e:	bd08      	pop	{r3, pc}

08000b40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b40:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000b42:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b46:	f004 ff31 	bl	80059ac <USBD_LL_IsoINIncomplete>
 8000b4a:	bd08      	pop	{r3, pc}

08000b4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b4c:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8000b4e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b52:	f004 ff2f 	bl	80059b4 <USBD_LL_DevConnected>
 8000b56:	bd08      	pop	{r3, pc}

08000b58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b58:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8000b5a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b5e:	f004 ff2b 	bl	80059b8 <USBD_LL_DevDisconnected>
 8000b62:	bd08      	pop	{r3, pc}

08000b64 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8000b64:	7803      	ldrb	r3, [r0, #0]
 8000b66:	bb63      	cbnz	r3, 8000bc2 <USBD_LL_Init+0x5e>
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4603      	mov	r3, r0
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000b6c:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <USBD_LL_Init+0x64>)
 8000b6e:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8000b72:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b7a:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b80:	2202      	movs	r2, #2
 8000b82:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b88:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b8a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b8c:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b8e:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b90:	2201      	movs	r2, #1
 8000b92:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b94:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b96:	f000 fb25 	bl	80011e4 <HAL_PCD_Init>
 8000b9a:	b108      	cbz	r0, 8000ba0 <USBD_LL_Init+0x3c>
  {
    Error_Handler( );
 8000b9c:	f7ff ff00 	bl	80009a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8000ba0:	4c09      	ldr	r4, [pc, #36]	; (8000bc8 <USBD_LL_Init+0x64>)
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f001 f831 	bl	8001c0c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8000baa:	2240      	movs	r2, #64	; 0x40
 8000bac:	2100      	movs	r1, #0
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f001 f808 	bl	8001bc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f001 f803 	bl	8001bc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	bd10      	pop	{r4, pc}
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20005c04 	.word	0x20005c04

08000bcc <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000bcc:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
  
  if((ep_addr & 0x80) == 0x80)
 8000bd0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000bd4:	d008      	beq.n	8000be8 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000bd6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000bda:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000bde:	008b      	lsls	r3, r1, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8000be6:	4770      	bx	lr
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000be8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000bec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000bf0:	008b      	lsls	r3, r1, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000bfc:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000bfe:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c02:	f000 ff33 	bl	8001a6c <HAL_PCD_EP_GetRxCount>
}
 8000c06:	bd08      	pop	{r3, pc}

08000c08 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8000c08:	b110      	cbz	r0, 8000c10 <USBD_Get_USB_Status+0x8>
 8000c0a:	2802      	cmp	r0, #2
 8000c0c:	d002      	beq.n	8000c14 <USBD_Get_USB_Status+0xc>
 8000c0e:	e003      	b.n	8000c18 <USBD_Get_USB_Status+0x10>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8000c10:	2000      	movs	r0, #0
 8000c12:	4770      	bx	lr
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000c14:	2001      	movs	r0, #1
    break;
 8000c16:	4770      	bx	lr
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000c18:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8000c1a:	4770      	bx	lr

08000c1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000c1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8000c1e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c22:	f000 fb73 	bl	800130c <HAL_PCD_Start>
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8000c26:	f7ff ffef 	bl	8000c08 <USBD_Get_USB_Status>
  
  return usb_status;
}
 8000c2a:	bd08      	pop	{r3, pc}

08000c2c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000c2c:	b510      	push	{r4, lr}
 8000c2e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000c30:	4613      	mov	r3, r2
 8000c32:	4622      	mov	r2, r4
 8000c34:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c38:	f000 fe72 	bl	8001920 <HAL_PCD_EP_Open>

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000c3c:	f7ff ffe4 	bl	8000c08 <USBD_Get_USB_Status>
  
  return usb_status;
}
 8000c40:	bd10      	pop	{r4, pc}
 8000c42:	bf00      	nop

08000c44 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000c46:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c4a:	f000 fea9 	bl	80019a0 <HAL_PCD_EP_Close>
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8000c4e:	f7ff ffdb 	bl	8000c08 <USBD_Get_USB_Status>
 
  return usb_status;  
}
 8000c52:	bd08      	pop	{r3, pc}

08000c54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c54:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000c56:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c5a:	f000 ff3b 	bl	8001ad4 <HAL_PCD_EP_SetStall>

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000c5e:	f7ff ffd3 	bl	8000c08 <USBD_Get_USB_Status>
  
  return usb_status;  
}
 8000c62:	bd08      	pop	{r3, pc}

08000c64 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000c66:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c6a:	f000 ff73 	bl	8001b54 <HAL_PCD_EP_ClrStall>
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8000c6e:	f7ff ffcb 	bl	8000c08 <USBD_Get_USB_Status>
  
  return usb_status; 
}
 8000c72:	bd08      	pop	{r3, pc}

08000c74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000c74:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000c76:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c7a:	f000 fe3d 	bl	80018f8 <HAL_PCD_SetAddress>
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000c7e:	f7ff ffc3 	bl	8000c08 <USBD_Get_USB_Status>
  
  return usb_status;  
}
 8000c82:	bd08      	pop	{r3, pc}

08000c84 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000c84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000c86:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c8a:	f000 fef9 	bl	8001a80 <HAL_PCD_EP_Transmit>
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8000c8e:	f7ff ffbb 	bl	8000c08 <USBD_Get_USB_Status>
  
  return usb_status;    
}
 8000c92:	bd08      	pop	{r3, pc}

08000c94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000c94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000c96:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c9a:	f000 feb9 	bl	8001a10 <HAL_PCD_EP_Receive>
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8000c9e:	f7ff ffb3 	bl	8000c08 <USBD_Get_USB_Status>
  
  return usb_status; 
}
 8000ca2:	bd08      	pop	{r3, pc}

08000ca4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000ca4:	2312      	movs	r3, #18
 8000ca6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8000ca8:	4800      	ldr	r0, [pc, #0]	; (8000cac <USBD_FS_DeviceDescriptor+0x8>)
 8000caa:	4770      	bx	lr
 8000cac:	2000003c 	.word	0x2000003c

08000cb0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8000cb4:	4800      	ldr	r0, [pc, #0]	; (8000cb8 <USBD_FS_LangIDStrDescriptor+0x8>)
 8000cb6:	4770      	bx	lr
 8000cb8:	2000001c 	.word	0x2000001c

08000cbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000cbc:	b430      	push	{r4, r5}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e010      	b.n	8000ce4 <IntToUnicode+0x28>
  {
    if (((value >> 28)) < 0xA)
 8000cc2:	0f04      	lsrs	r4, r0, #28
 8000cc4:	2c09      	cmp	r4, #9
 8000cc6:	d803      	bhi.n	8000cd0 <IntToUnicode+0x14>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000cc8:	3430      	adds	r4, #48	; 0x30
 8000cca:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8000cce:	e002      	b.n	8000cd6 <IntToUnicode+0x1a>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000cd0:	3437      	adds	r4, #55	; 0x37
 8000cd2:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8000cd6:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8000cd8:	005c      	lsls	r4, r3, #1
 8000cda:	3401      	adds	r4, #1
 8000cdc:	2500      	movs	r5, #0
 8000cde:	550d      	strb	r5, [r1, r4]
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d3ec      	bcc.n	8000cc2 <IntToUnicode+0x6>

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
  }
}
 8000ce8:	bc30      	pop	{r4, r5}
 8000cea:	4770      	bx	lr

08000cec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000cec:	b538      	push	{r3, r4, r5, lr}
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <Get_SerialNum+0x2c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <Get_SerialNum+0x30>)
 8000cf4:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000cf6:	3204      	adds	r2, #4
 8000cf8:	6810      	ldr	r0, [r2, #0]

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
 8000cfa:	1818      	adds	r0, r3, r0
 8000cfc:	d00a      	beq.n	8000d14 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000cfe:	4d08      	ldr	r5, [pc, #32]	; (8000d20 <Get_SerialNum+0x34>)
 8000d00:	2208      	movs	r2, #8
 8000d02:	1ca9      	adds	r1, r5, #2
 8000d04:	f7ff ffda 	bl	8000cbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000d08:	2204      	movs	r2, #4
 8000d0a:	f105 0112 	add.w	r1, r5, #18
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff ffd4 	bl	8000cbc <IntToUnicode>
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop
 8000d18:	1fff7a10 	.word	0x1fff7a10
 8000d1c:	1fff7a14 	.word	0x1fff7a14
 8000d20:	20000020 	.word	0x20000020

08000d24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d24:	b508      	push	{r3, lr}
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000d26:	231a      	movs	r3, #26
 8000d28:	800b      	strh	r3, [r1, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000d2a:	f7ff ffdf 	bl	8000cec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
}
 8000d2e:	4801      	ldr	r0, [pc, #4]	; (8000d34 <USBD_FS_SerialStrDescriptor+0x10>)
 8000d30:	bd08      	pop	{r3, pc}
 8000d32:	bf00      	nop
 8000d34:	20000020 	.word	0x20000020

08000d38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d38:	b508      	push	{r3, lr}
 8000d3a:	460a      	mov	r2, r1
  if(speed == 0)
 8000d3c:	b920      	cbnz	r0, 8000d48 <USBD_FS_ProductStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000d3e:	4905      	ldr	r1, [pc, #20]	; (8000d54 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <USBD_FS_ProductStrDescriptor+0x20>)
 8000d42:	f005 f94d 	bl	8005fe0 <USBD_GetString>
 8000d46:	e003      	b.n	8000d50 <USBD_FS_ProductStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000d48:	4902      	ldr	r1, [pc, #8]	; (8000d54 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <USBD_FS_ProductStrDescriptor+0x20>)
 8000d4c:	f005 f948 	bl	8005fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000d50:	4800      	ldr	r0, [pc, #0]	; (8000d54 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000d52:	bd08      	pop	{r3, pc}
 8000d54:	2000600c 	.word	0x2000600c
 8000d58:	08007f14 	.word	0x08007f14

08000d5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d5c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000d5e:	4c04      	ldr	r4, [pc, #16]	; (8000d70 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8000d60:	460a      	mov	r2, r1
 8000d62:	4621      	mov	r1, r4
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8000d66:	f005 f93b 	bl	8005fe0 <USBD_GetString>
  return USBD_StrDesc;
}
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000600c 	.word	0x2000600c
 8000d74:	08007f2c 	.word	0x08007f2c

08000d78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d78:	b508      	push	{r3, lr}
 8000d7a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8000d7c:	b920      	cbnz	r0, 8000d88 <USBD_FS_ConfigStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000d7e:	4905      	ldr	r1, [pc, #20]	; (8000d94 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <USBD_FS_ConfigStrDescriptor+0x20>)
 8000d82:	f005 f92d 	bl	8005fe0 <USBD_GetString>
 8000d86:	e003      	b.n	8000d90 <USBD_FS_ConfigStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000d88:	4902      	ldr	r1, [pc, #8]	; (8000d94 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8000d8a:	4803      	ldr	r0, [pc, #12]	; (8000d98 <USBD_FS_ConfigStrDescriptor+0x20>)
 8000d8c:	f005 f928 	bl	8005fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000d90:	4800      	ldr	r0, [pc, #0]	; (8000d94 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8000d92:	bd08      	pop	{r3, pc}
 8000d94:	2000600c 	.word	0x2000600c
 8000d98:	08007f40 	.word	0x08007f40

08000d9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d9c:	b508      	push	{r3, lr}
 8000d9e:	460a      	mov	r2, r1
  if(speed == 0)
 8000da0:	b920      	cbnz	r0, 8000dac <USBD_FS_InterfaceStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000da2:	4905      	ldr	r1, [pc, #20]	; (8000db8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <USBD_FS_InterfaceStrDescriptor+0x20>)
 8000da6:	f005 f91b 	bl	8005fe0 <USBD_GetString>
 8000daa:	e003      	b.n	8000db4 <USBD_FS_InterfaceStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000dac:	4902      	ldr	r1, [pc, #8]	; (8000db8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <USBD_FS_InterfaceStrDescriptor+0x20>)
 8000db0:	f005 f916 	bl	8005fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000db4:	4800      	ldr	r0, [pc, #0]	; (8000db8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000db6:	bd08      	pop	{r3, pc}
 8000db8:	2000600c 	.word	0x2000600c
 8000dbc:	08007f4c 	.word	0x08007f4c

08000dc0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
    return ( USBD_OK );
  /* USER CODE END 4 */
}
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	4770      	bx	lr

08000dc4 <CDC_Control_FS>:
        break;
    }

    return ( USBD_OK );
  /* USER CODE END 5 */
}
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	4770      	bx	lr

08000dc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000dc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
    void CdcReceiveHandler( char* Buf, size_t len );
    CdcReceiveHandler( (char*)Buf, (size_t)*Len );
 8000dca:	6809      	ldr	r1, [r1, #0]
 8000dcc:	f005 fe44 	bl	8006a58 <CdcReceiveHandler>
    return ( USBD_OK );
  /* USER CODE END 6 */
}
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	bd08      	pop	{r3, pc}

08000dd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000dd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, UserTxBufferFS, 0 );
 8000dd6:	4c06      	ldr	r4, [pc, #24]	; (8000df0 <CDC_Init_FS+0x1c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4906      	ldr	r1, [pc, #24]	; (8000df4 <CDC_Init_FS+0x20>)
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f005 fabb 	bl	8006358 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, UserRxBufferFS );
 8000de2:	4905      	ldr	r1, [pc, #20]	; (8000df8 <CDC_Init_FS+0x24>)
 8000de4:	4620      	mov	r0, r4
 8000de6:	f005 fabf 	bl	8006368 <USBD_CDC_SetRxBuffer>
    return ( USBD_OK );
  /* USER CODE END 3 */
}
 8000dea:	2000      	movs	r0, #0
 8000dec:	bd10      	pop	{r4, pc}
 8000dee:	bf00      	nop
 8000df0:	20005968 	.word	0x20005968
 8000df4:	2000630c 	.word	0x2000630c
 8000df8:	2000620c 	.word	0x2000620c

08000dfc <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <CDC_Transmit_FS+0x28>)
 8000dfe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
    if ( hcdc->TxState != 0 ) {
 8000e02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000e06:	b953      	cbnz	r3, 8000e1e <CDC_Transmit_FS+0x22>
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	460a      	mov	r2, r1
 8000e0c:	4601      	mov	r1, r0
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
 8000e0e:	4c05      	ldr	r4, [pc, #20]	; (8000e24 <CDC_Transmit_FS+0x28>)
 8000e10:	4620      	mov	r0, r4
 8000e12:	f005 faa1 	bl	8006358 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8000e16:	4620      	mov	r0, r4
 8000e18:	f005 faac 	bl	8006374 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
 8000e1c:	bd10      	pop	{r4, pc}
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
 8000e1e:	2001      	movs	r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20005968 	.word	0x20005968

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler( void )
{
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler( void )
{
 8000e2c:	b508      	push	{r3, lr}
    /* USER CODE BEGIN HardFault_IRQn 0 */
    *(volatile int*)0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	681b      	ldr	r3, [r3, #0]
    raise( SIGINT );
 8000e32:	2002      	movs	r0, #2
 8000e34:	f006 fa98 	bl	8007368 <raise>
 8000e38:	e7fe      	b.n	8000e38 <HardFault_Handler+0xc>
 8000e3a:	bf00      	nop

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler( void )
{
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler>
 8000e3e:	bf00      	nop

08000e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler( void )
{
 8000e40:	e7fe      	b.n	8000e40 <BusFault_Handler>
 8000e42:	bf00      	nop

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler( void )
{
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler>
 8000e46:	bf00      	nop

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler( void )
{
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <TIM1_UP_TIM10_IRQHandler>:
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler( void )
{
    /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim1, TIM_IT_UPDATE );
 8000e4c:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f06f 0201 	mvn.w	r2, #1
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	4770      	bx	lr
 8000e58:	20004f74 	.word	0x20004f74

08000e5c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler( void )
{
 8000e5c:	b508      	push	{r3, lr}
    /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
    HAL_IncTick();
 8000e5e:	f002 fa99 	bl	8003394 <HAL_IncTick>
    __HAL_TIM_CLEAR_FLAG( &htim11, TIM_IT_UPDATE );
 8000e62:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f06f 0201 	mvn.w	r2, #1
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	bd08      	pop	{r3, pc}
 8000e6e:	bf00      	nop
 8000e70:	20006350 	.word	0x20006350

08000e74 <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler( void )
{
    /* USER CODE BEGIN TIM3_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim3, TIM_IT_UPDATE );
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <TIM3_IRQHandler+0xc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f06f 0201 	mvn.w	r2, #1
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	4770      	bx	lr
 8000e80:	20004f30 	.word	0x20004f30

08000e84 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler( void )
{
 8000e84:	b508      	push	{r3, lr}
    /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

    /* USER CODE END DMA2_Stream2_IRQn 0 */
    HAL_DMA_IRQHandler( &hdma_spi1_rx );
 8000e86:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA2_Stream2_IRQHandler+0xc>)
 8000e88:	f002 f92c 	bl	80030e4 <HAL_DMA_IRQHandler>
 8000e8c:	bd08      	pop	{r3, pc}
 8000e8e:	bf00      	nop
 8000e90:	200058a8 	.word	0x200058a8

08000e94 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler( void )
{
 8000e94:	b508      	push	{r3, lr}
    /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

    /* USER CODE END DMA2_Stream3_IRQn 0 */
    HAL_DMA_IRQHandler( &hdma_spi1_tx );
 8000e96:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA2_Stream3_IRQHandler+0xc>)
 8000e98:	f002 f924 	bl	80030e4 <HAL_DMA_IRQHandler>
 8000e9c:	bd08      	pop	{r3, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20005908 	.word	0x20005908

08000ea4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler( void )
{
 8000ea4:	b508      	push	{r3, lr}
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler( &hpcd_USB_OTG_FS );
 8000ea6:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <OTG_FS_IRQHandler+0xc>)
 8000ea8:	f000 fb00 	bl	80014ac <HAL_PCD_IRQHandler>
 8000eac:	bd08      	pop	{r3, pc}
 8000eae:	bf00      	nop
 8000eb0:	20005c04 	.word	0x20005c04

08000eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b500      	push	{lr}
 8000eb6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	2200      	movs	r2, #0
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_MspInit+0x40>)
 8000ebe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000ec0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000ec4:	6459      	str	r1, [r3, #68]	; 0x44
 8000ec6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000ec8:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000ecc:	9100      	str	r1, [sp, #0]
 8000ece:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed0:	9201      	str	r2, [sp, #4]
 8000ed2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ed4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000ed8:	6419      	str	r1, [r3, #64]	; 0x40
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	f06f 0001 	mvn.w	r0, #1
 8000eea:	f002 f9f9 	bl	80032e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	b003      	add	sp, #12
 8000ef0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef8:	b530      	push	{r4, r5, lr}
 8000efa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	2300      	movs	r3, #0
 8000efe:	9303      	str	r3, [sp, #12]
 8000f00:	9304      	str	r3, [sp, #16]
 8000f02:	9305      	str	r3, [sp, #20]
 8000f04:	9306      	str	r3, [sp, #24]
 8000f06:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000f08:	6802      	ldr	r2, [r0, #0]
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HAL_SPI_MspInit+0xc8>)
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d155      	bne.n	8000fbc <HAL_SPI_MspInit+0xc4>
 8000f10:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f12:	2500      	movs	r5, #0
 8000f14:	9501      	str	r5, [sp, #4]
 8000f16:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f20:	645a      	str	r2, [r3, #68]	; 0x44
 8000f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000f28:	9201      	str	r2, [sp, #4]
 8000f2a:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	9502      	str	r5, [sp, #8]
 8000f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	631a      	str	r2, [r3, #48]	; 0x30
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f40:	23e0      	movs	r3, #224	; 0xe0
 8000f42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	a903      	add	r1, sp, #12
 8000f52:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <HAL_SPI_MspInit+0xcc>)
 8000f54:	f001 ff1c 	bl	8002d90 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000f58:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <HAL_SPI_MspInit+0xd0>)
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_SPI_MspInit+0xd4>)
 8000f5c:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f5e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000f62:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f64:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f66:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6c:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6e:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f70:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f72:	61c5      	str	r5, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	6205      	str	r5, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f76:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f78:	f002 f84c 	bl	8003014 <HAL_DMA_Init>
 8000f7c:	b108      	cbz	r0, 8000f82 <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
 8000f7e:	f7ff fd0f 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0xd0>)
 8000f84:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000f86:	639c      	str	r4, [r3, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <HAL_SPI_MspInit+0xd8>)
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_SPI_MspInit+0xdc>)
 8000f8c:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f8e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000f92:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f94:	2340      	movs	r3, #64	; 0x40
 8000f96:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa0:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa2:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa4:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000fa6:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000faa:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fac:	f002 f832 	bl	8003014 <HAL_DMA_Init>
 8000fb0:	b108      	cbz	r0, 8000fb6 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000fb2:	f7ff fcf5 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_SPI_MspInit+0xd8>)
 8000fb8:	64a3      	str	r3, [r4, #72]	; 0x48
 8000fba:	639c      	str	r4, [r3, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fbc:	b009      	add	sp, #36	; 0x24
 8000fbe:	bd30      	pop	{r4, r5, pc}
 8000fc0:	40013000 	.word	0x40013000
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	200058a8 	.word	0x200058a8
 8000fcc:	40026440 	.word	0x40026440
 8000fd0:	20005908 	.word	0x20005908
 8000fd4:	40026458 	.word	0x40026458

08000fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8000fdc:	6803      	ldr	r3, [r0, #0]
 8000fde:	4a24      	ldr	r2, [pc, #144]	; (8001070 <HAL_TIM_Base_MspInit+0x98>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d11c      	bne.n	800101e <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	9401      	str	r4, [sp, #4]
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_TIM_Base_MspInit+0x9c>)
 8000fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fec:	f042 0201 	orr.w	r2, r2, #1
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
 8000ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	2105      	movs	r1, #5
 8001000:	2019      	movs	r0, #25
 8001002:	f002 f96d 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001006:	2019      	movs	r0, #25
 8001008:	f002 f99c 	bl	8003344 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800100c:	4622      	mov	r2, r4
 800100e:	4621      	mov	r1, r4
 8001010:	201a      	movs	r0, #26
 8001012:	f002 f965 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001016:	201a      	movs	r0, #26
 8001018:	f002 f994 	bl	8003344 <HAL_NVIC_EnableIRQ>
 800101c:	e025      	b.n	800106a <HAL_TIM_Base_MspInit+0x92>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800101e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001022:	d10c      	bne.n	800103e <HAL_TIM_Base_MspInit+0x66>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_TIM_Base_MspInit+0x9c>)
 800102a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102c:	f042 0201 	orr.w	r2, r2, #1
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	9b02      	ldr	r3, [sp, #8]
 800103c:	e015      	b.n	800106a <HAL_TIM_Base_MspInit+0x92>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_TIM_Base_MspInit+0xa0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d112      	bne.n	800106a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001044:	2100      	movs	r1, #0
 8001046:	9103      	str	r1, [sp, #12]
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_TIM_Base_MspInit+0x9c>)
 800104a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104c:	f042 0202 	orr.w	r2, r2, #2
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	9303      	str	r3, [sp, #12]
 800105a:	9b03      	ldr	r3, [sp, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800105c:	460a      	mov	r2, r1
 800105e:	201d      	movs	r0, #29
 8001060:	f002 f93e 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001064:	201d      	movs	r0, #29
 8001066:	f002 f96d 	bl	8003344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800106a:	b004      	add	sp, #16
 800106c:	bd10      	pop	{r4, pc}
 800106e:	bf00      	nop
 8001070:	40010000 	.word	0x40010000
 8001074:	40023800 	.word	0x40023800
 8001078:	40000400 	.word	0x40000400

0800107c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800107c:	b500      	push	{lr}
 800107e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	2300      	movs	r3, #0
 8001082:	9303      	str	r3, [sp, #12]
 8001084:	9304      	str	r3, [sp, #16]
 8001086:	9305      	str	r3, [sp, #20]
 8001088:	9306      	str	r3, [sp, #24]
 800108a:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 800108c:	6803      	ldr	r3, [r0, #0]
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_TIM_MspPostInit+0x80>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d117      	bne.n	80010c4 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_TIM_MspPostInit+0x84>)
 800109a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109c:	f042 0201 	orr.w	r2, r2, #1
 80010a0:	631a      	str	r2, [r3, #48]	; 0x30
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP1_Pin;
 80010ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP1_GPIO_Port, &GPIO_InitStruct);
 80010ba:	a903      	add	r1, sp, #12
 80010bc:	4811      	ldr	r0, [pc, #68]	; (8001104 <HAL_TIM_MspPostInit+0x88>)
 80010be:	f001 fe67 	bl	8002d90 <HAL_GPIO_Init>
 80010c2:	e017      	b.n	80010f4 <HAL_TIM_MspPostInit+0x78>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_TIM_MspPostInit+0x8c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d114      	bne.n	80010f4 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_TIM_MspPostInit+0x84>)
 80010d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d2:	f042 0202 	orr.w	r2, r2, #2
 80010d6:	631a      	str	r2, [r3, #48]	; 0x30
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	9b02      	ldr	r3, [sp, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP2_Pin;
 80010e2:	2310      	movs	r3, #16
 80010e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP2_GPIO_Port, &GPIO_InitStruct);
 80010ec:	a903      	add	r1, sp, #12
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <HAL_TIM_MspPostInit+0x90>)
 80010f0:	f001 fe4e 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010f4:	b009      	add	sp, #36	; 0x24
 80010f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010fa:	bf00      	nop
 80010fc:	40010000 	.word	0x40010000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40000400 	.word	0x40000400
 800110c:	40020400 	.word	0x40020400

08001110 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001116:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800111a:	00ca      	lsls	r2, r1, #3
 800111c:	1a52      	subs	r2, r2, r1
 800111e:	0093      	lsls	r3, r2, #2
 8001120:	4403      	add	r3, r0
 8001122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001126:	429a      	cmp	r2, r3
 8001128:	d856      	bhi.n	80011d8 <PCD_WriteEmptyTxFifo+0xc8>
 800112a:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800112c:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 800112e:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8001132:	00a2      	lsls	r2, r4, #2
 8001134:	4402      	add	r2, r0
 8001136:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001138:	4293      	cmp	r3, r2
 800113a:	d800      	bhi.n	800113e <PCD_WriteEmptyTxFifo+0x2e>
  if (ep->xfer_count > ep->xfer_len)
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800113c:	461a      	mov	r2, r3
 800113e:	460c      	mov	r4, r1
 8001140:	4607      	mov	r7, r0
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001142:	f102 0a03 	add.w	sl, r2, #3
 8001146:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800114a:	e01e      	b.n	800118a <PCD_WriteEmptyTxFifo+0x7a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800114c:	1a5b      	subs	r3, r3, r1

    if (len > ep->maxpacket)
 800114e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001152:	008a      	lsls	r2, r1, #2
 8001154:	443a      	add	r2, r7
 8001156:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8001158:	42b3      	cmp	r3, r6
 800115a:	d800      	bhi.n	800115e <PCD_WriteEmptyTxFifo+0x4e>

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800115c:	461e      	mov	r6, r3

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800115e:	f106 0a03 	add.w	sl, r6, #3
 8001162:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001166:	00e3      	lsls	r3, r4, #3
 8001168:	1b1b      	subs	r3, r3, r4
 800116a:	009d      	lsls	r5, r3, #2
 800116c:	443d      	add	r5, r7
 800116e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001170:	7c3b      	ldrb	r3, [r7, #16]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	b2b3      	uxth	r3, r6
 8001176:	b2e2      	uxtb	r2, r4
 8001178:	4640      	mov	r0, r8
 800117a:	f001 f87b 	bl	8002274 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800117e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001180:	4433      	add	r3, r6
 8001182:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001184:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001186:	441e      	add	r6, r3
 8001188:	656e      	str	r6, [r5, #84]	; 0x54
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800118a:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 800118e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	b29b      	uxth	r3, r3
 8001196:	459a      	cmp	sl, r3
 8001198:	d809      	bhi.n	80011ae <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800119a:	00e3      	lsls	r3, r4, #3
 800119c:	1b1b      	subs	r3, r3, r4
 800119e:	009a      	lsls	r2, r3, #2
 80011a0:	443a      	add	r2, r7
 80011a2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80011a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011a6:	4299      	cmp	r1, r3
 80011a8:	d201      	bcs.n	80011ae <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ce      	bne.n	800114c <PCD_WriteEmptyTxFifo+0x3c>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if (ep->xfer_len <= ep->xfer_count)
 80011ae:	00e3      	lsls	r3, r4, #3
 80011b0:	1b1b      	subs	r3, r3, r4
 80011b2:	0098      	lsls	r0, r3, #2
 80011b4:	4407      	add	r7, r0
 80011b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d80e      	bhi.n	80011dc <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80011be:	f004 040f 	and.w	r4, r4, #15
 80011c2:	2301      	movs	r3, #1
 80011c4:	fa03 f404 	lsl.w	r4, r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80011c8:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 80011cc:	ea23 0404 	bic.w	r4, r3, r4
 80011d0:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 80011d4:	2000      	movs	r0, #0
 80011d6:	e002      	b.n	80011de <PCD_WriteEmptyTxFifo+0xce>

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
  {
    return HAL_ERROR;
 80011d8:	2001      	movs	r0, #1
 80011da:	e000      	b.n	80011de <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
  }

  return HAL_OK;
 80011dc:	2000      	movs	r0, #0
}
 80011de:	b002      	add	sp, #8
 80011e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080011e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011e8:	2800      	cmp	r0, #0
 80011ea:	f000 808a 	beq.w	8001302 <HAL_PCD_Init+0x11e>
 80011ee:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011f0:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011f2:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80011f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80011fa:	d104      	bne.n	8001206 <HAL_PCD_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001202:	f7ff fbf5 	bl	80009f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001206:	2303      	movs	r3, #3
 8001208:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800120c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800120e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001212:	d101      	bne.n	8001218 <HAL_PCD_Init+0x34>
  {
    hpcd->Init.dma_enable = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001218:	6820      	ldr	r0, [r4, #0]
 800121a:	f000 fddb 	bl	8001dd4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800121e:	4625      	mov	r5, r4
 8001220:	f855 7b10 	ldr.w	r7, [r5], #16
 8001224:	466e      	mov	r6, sp
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800122a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800122e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001232:	e886 0003 	stmia.w	r6, {r0, r1}
 8001236:	1d23      	adds	r3, r4, #4
 8001238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123a:	4638      	mov	r0, r7
 800123c:	f000 fd0a 	bl	8001c54 <USB_CoreInit>
 8001240:	b120      	cbz	r0, 800124c <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001242:	2302      	movs	r3, #2
 8001244:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001248:	2501      	movs	r5, #1
 800124a:	e05b      	b.n	8001304 <HAL_PCD_Init+0x120>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800124c:	2100      	movs	r1, #0
 800124e:	6820      	ldr	r0, [r4, #0]
 8001250:	f000 fdc6 	bl	8001de0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	e015      	b.n	8001284 <HAL_PCD_Init+0xa0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001258:	00d9      	lsls	r1, r3, #3
 800125a:	1ac8      	subs	r0, r1, r3
 800125c:	0082      	lsls	r2, r0, #2
 800125e:	4422      	add	r2, r4
 8001260:	2001      	movs	r0, #1
 8001262:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001266:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800126a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800126e:	2000      	movs	r0, #0
 8001270:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001274:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001276:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001278:	1aca      	subs	r2, r1, r3
 800127a:	0091      	lsls	r1, r2, #2
 800127c:	4421      	add	r1, r4
 800127e:	6508      	str	r0, [r1, #80]	; 0x50

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001280:	3301      	adds	r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	6865      	ldr	r5, [r4, #4]
 8001286:	42ab      	cmp	r3, r5
 8001288:	d3e6      	bcc.n	8001258 <HAL_PCD_Init+0x74>
 800128a:	2300      	movs	r3, #0
 800128c:	e015      	b.n	80012ba <HAL_PCD_Init+0xd6>
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800128e:	00d8      	lsls	r0, r3, #3
 8001290:	1ac1      	subs	r1, r0, r3
 8001292:	008a      	lsls	r2, r1, #2
 8001294:	4422      	add	r2, r4
 8001296:	2100      	movs	r1, #0
 8001298:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800129c:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012a0:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012a4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012a8:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012ac:	1ac2      	subs	r2, r0, r3
 80012ae:	0090      	lsls	r0, r2, #2
 80012b0:	4420      	add	r0, r4
 80012b2:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	429d      	cmp	r5, r3
 80012bc:	d8e7      	bhi.n	800128e <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012be:	4625      	mov	r5, r4
 80012c0:	f855 7b10 	ldr.w	r7, [r5], #16
 80012c4:	466e      	mov	r6, sp
 80012c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012d2:	e886 0003 	stmia.w	r6, {r0, r1}
 80012d6:	1d23      	adds	r3, r4, #4
 80012d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012da:	4638      	mov	r0, r7
 80012dc:	f000 fdc6 	bl	8001e6c <USB_DevInit>
 80012e0:	4605      	mov	r5, r0
 80012e2:	b120      	cbz	r0, 80012ee <HAL_PCD_Init+0x10a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80012ea:	2501      	movs	r5, #1
 80012ec:	e00a      	b.n	8001304 <HAL_PCD_Init+0x120>
  }

  hpcd->USB_Address = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012f4:	2301      	movs	r3, #1
 80012f6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012fa:	6820      	ldr	r0, [r4, #0]
 80012fc:	f001 f960 	bl	80025c0 <USB_DevDisconnect>

  return HAL_OK;
 8001300:	e000      	b.n	8001304 <HAL_PCD_Init+0x120>
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8001302:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001304:	4628      	mov	r0, r5
 8001306:	b00b      	add	sp, #44	; 0x2c
 8001308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130a:	bf00      	nop

0800130c <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800130c:	6802      	ldr	r2, [r0, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800130e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001312:	2b01      	cmp	r3, #1
 8001314:	d018      	beq.n	8001348 <HAL_PCD_Start+0x3c>
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001316:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001318:	2301      	movs	r3, #1
 800131a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800131e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001320:	2b01      	cmp	r3, #1
 8001322:	d106      	bne.n	8001332 <HAL_PCD_Start+0x26>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001324:	6983      	ldr	r3, [r0, #24]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001326:	2b01      	cmp	r3, #1
 8001328:	d003      	beq.n	8001332 <HAL_PCD_Start+0x26>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800132a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	6393      	str	r3, [r2, #56]	; 0x38
 8001332:	4604      	mov	r4, r0
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001334:	6800      	ldr	r0, [r0, #0]
 8001336:	f001 f937 	bl	80025a8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800133a:	6820      	ldr	r0, [r4, #0]
 800133c:	f000 fd44 	bl	8001dc8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001340:	2000      	movs	r0, #0
 8001342:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001346:	bd10      	pop	{r4, pc}
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001348:	2002      	movs	r0, #2
 800134a:	4770      	bx	lr

0800134c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800134c:	b570      	push	{r4, r5, r6, lr}
 800134e:	4605      	mov	r5, r0
 8001350:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001352:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001354:	6c19      	ldr	r1, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001356:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 800135a:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 800135e:	68a3      	ldr	r3, [r4, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001360:	6902      	ldr	r2, [r0, #16]
 8001362:	2a01      	cmp	r2, #1
 8001364:	d150      	bne.n	8001408 <PCD_EP_OutXfrComplete_int+0xbc>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001366:	f013 0f08 	tst.w	r3, #8
 800136a:	d014      	beq.n	8001396 <PCD_EP_OutXfrComplete_int+0x4a>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800136c:	4a33      	ldr	r2, [pc, #204]	; (800143c <PCD_EP_OutXfrComplete_int+0xf0>)
 800136e:	4291      	cmp	r1, r2
 8001370:	d905      	bls.n	800137e <PCD_EP_OutXfrComplete_int+0x32>
 8001372:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001376:	d002      	beq.n	800137e <PCD_EP_OutXfrComplete_int+0x32>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800137c:	60a3      	str	r3, [r4, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800137e:	4628      	mov	r0, r5
 8001380:	f7ff fb82 	bl	8000a88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001384:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8001388:	2101      	movs	r1, #1
 800138a:	6828      	ldr	r0, [r5, #0]
 800138c:	f001 f978 	bl	8002680 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001390:	2308      	movs	r3, #8
 8001392:	60a3      	str	r3, [r4, #8]
 8001394:	e04f      	b.n	8001436 <PCD_EP_OutXfrComplete_int+0xea>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001396:	f013 0f20 	tst.w	r3, #32
 800139a:	d002      	beq.n	80013a2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800139c:	2320      	movs	r3, #32
 800139e:	60a3      	str	r3, [r4, #8]
 80013a0:	e049      	b.n	8001436 <PCD_EP_OutXfrComplete_int+0xea>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80013a2:	f013 0f28 	tst.w	r3, #40	; 0x28
 80013a6:	d146      	bne.n	8001436 <PCD_EP_OutXfrComplete_int+0xea>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80013a8:	4a24      	ldr	r2, [pc, #144]	; (800143c <PCD_EP_OutXfrComplete_int+0xf0>)
 80013aa:	4291      	cmp	r1, r2
 80013ac:	d906      	bls.n	80013bc <PCD_EP_OutXfrComplete_int+0x70>
 80013ae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80013b2:	d003      	beq.n	80013bc <PCD_EP_OutXfrComplete_int+0x70>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80013b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b8:	60a3      	str	r3, [r4, #8]
 80013ba:	e03c      	b.n	8001436 <PCD_EP_OutXfrComplete_int+0xea>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80013bc:	00f2      	lsls	r2, r6, #3
 80013be:	1b92      	subs	r2, r2, r6
 80013c0:	0093      	lsls	r3, r2, #2
 80013c2:	442b      	add	r3, r5
 80013c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80013c8:	6921      	ldr	r1, [r4, #16]
 80013ca:	f3c1 0112 	ubfx	r1, r1, #0, #19
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80013ce:	1a52      	subs	r2, r2, r1
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
 80013d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80013d4:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80013d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013dc:	440a      	add	r2, r1
 80013de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80013e2:	b2f1      	uxtb	r1, r6
 80013e4:	4628      	mov	r0, r5
 80013e6:	f7ff fb57 	bl	8000a98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80013ea:	bb26      	cbnz	r6, 8001436 <PCD_EP_OutXfrComplete_int+0xea>
 80013ec:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80013f0:	00b3      	lsls	r3, r6, #2
 80013f2:	442b      	add	r3, r5
 80013f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80013f8:	b9eb      	cbnz	r3, 8001436 <PCD_EP_OutXfrComplete_int+0xea>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013fa:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 80013fe:	2101      	movs	r1, #1
 8001400:	6828      	ldr	r0, [r5, #0]
 8001402:	f001 f93d 	bl	8002680 <USB_EP0_OutStart>
 8001406:	e016      	b.n	8001436 <PCD_EP_OutXfrComplete_int+0xea>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <PCD_EP_OutXfrComplete_int+0xf4>)
 800140a:	4291      	cmp	r1, r2
 800140c:	d110      	bne.n	8001430 <PCD_EP_OutXfrComplete_int+0xe4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800140e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001412:	d003      	beq.n	800141c <PCD_EP_OutXfrComplete_int+0xd0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001418:	60a3      	str	r3, [r4, #8]
 800141a:	e00c      	b.n	8001436 <PCD_EP_OutXfrComplete_int+0xea>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800141c:	f013 0f20 	tst.w	r3, #32
 8001420:	d001      	beq.n	8001426 <PCD_EP_OutXfrComplete_int+0xda>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001422:	2320      	movs	r3, #32
 8001424:	60a3      	str	r3, [r4, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001426:	b2f1      	uxtb	r1, r6
 8001428:	4628      	mov	r0, r5
 800142a:	f7ff fb35 	bl	8000a98 <HAL_PCD_DataOutStageCallback>
 800142e:	e002      	b.n	8001436 <PCD_EP_OutXfrComplete_int+0xea>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001430:	b2f1      	uxtb	r1, r6
 8001432:	f7ff fb31 	bl	8000a98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001436:	2000      	movs	r0, #0
 8001438:	bd70      	pop	{r4, r5, r6, pc}
 800143a:	bf00      	nop
 800143c:	4f54300a 	.word	0x4f54300a
 8001440:	4f54310a 	.word	0x4f54310a

08001444 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001448:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800144a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800144c:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8001450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8001454:	688a      	ldr	r2, [r1, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001456:	6903      	ldr	r3, [r0, #16]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d109      	bne.n	8001470 <PCD_EP_OutSetupPacket_int+0x2c>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <PCD_EP_OutSetupPacket_int+0x60>)
 800145e:	429d      	cmp	r5, r3
 8001460:	d90f      	bls.n	8001482 <PCD_EP_OutSetupPacket_int+0x3e>
 8001462:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001466:	d00c      	beq.n	8001482 <PCD_EP_OutSetupPacket_int+0x3e>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800146c:	608b      	str	r3, [r1, #8]
 800146e:	e008      	b.n	8001482 <PCD_EP_OutSetupPacket_int+0x3e>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <PCD_EP_OutSetupPacket_int+0x64>)
 8001472:	429d      	cmp	r5, r3
 8001474:	d105      	bne.n	8001482 <PCD_EP_OutSetupPacket_int+0x3e>
 8001476:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800147a:	d002      	beq.n	8001482 <PCD_EP_OutSetupPacket_int+0x3e>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800147c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001480:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001482:	4620      	mov	r0, r4
 8001484:	f7ff fb00 	bl	8000a88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <PCD_EP_OutSetupPacket_int+0x60>)
 800148a:	429d      	cmp	r5, r3
 800148c:	d908      	bls.n	80014a0 <PCD_EP_OutSetupPacket_int+0x5c>
 800148e:	6923      	ldr	r3, [r4, #16]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d105      	bne.n	80014a0 <PCD_EP_OutSetupPacket_int+0x5c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001494:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001498:	2101      	movs	r1, #1
 800149a:	6820      	ldr	r0, [r4, #0]
 800149c:	f001 f8f0 	bl	8002680 <USB_EP0_OutStart>
  }

  return HAL_OK;
}
 80014a0:	2000      	movs	r0, #0
 80014a2:	bd38      	pop	{r3, r4, r5, pc}
 80014a4:	4f54300a 	.word	0x4f54300a
 80014a8:	4f54310a 	.word	0x4f54310a

080014ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b0:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014b2:	6805      	ldr	r5, [r0, #0]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014b4:	4628      	mov	r0, r5
 80014b6:	f001 f8c3 	bl	8002640 <USB_GetMode>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	f040 8219 	bne.w	80018f2 <HAL_PCD_IRQHandler+0x446>
 80014c0:	462e      	mov	r6, r5
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014c2:	6820      	ldr	r0, [r4, #0]
 80014c4:	f001 f888 	bl	80025d8 <USB_ReadInterrupts>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	f000 8212 	beq.w	80018f2 <HAL_PCD_IRQHandler+0x446>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014ce:	6820      	ldr	r0, [r4, #0]
 80014d0:	f001 f882 	bl	80025d8 <USB_ReadInterrupts>
 80014d4:	f010 0f02 	tst.w	r0, #2
 80014d8:	d004      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014da:	6822      	ldr	r2, [r4, #0]
 80014dc:	6953      	ldr	r3, [r2, #20]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	6153      	str	r3, [r2, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014e4:	6820      	ldr	r0, [r4, #0]
 80014e6:	f001 f877 	bl	80025d8 <USB_ReadInterrupts>
 80014ea:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80014ee:	d04e      	beq.n	800158e <HAL_PCD_IRQHandler+0xe2>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014f0:	6820      	ldr	r0, [r4, #0]
 80014f2:	f001 f875 	bl	80025e0 <USB_ReadDevAllOutEpInterrupt>
 80014f6:	4607      	mov	r7, r0
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 80014f8:	f04f 0800 	mov.w	r8, #0

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 80014fc:	e045      	b.n	800158a <HAL_PCD_IRQHandler+0xde>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014fe:	f017 0f01 	tst.w	r7, #1
 8001502:	d03f      	beq.n	8001584 <HAL_PCD_IRQHandler+0xd8>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001504:	fa5f f188 	uxtb.w	r1, r8
 8001508:	6820      	ldr	r0, [r4, #0]
 800150a:	f001 f879 	bl	8002600 <USB_ReadDevOutEPInterrupt>
 800150e:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001510:	f010 0f01 	tst.w	r0, #1
 8001514:	d008      	beq.n	8001528 <HAL_PCD_IRQHandler+0x7c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001516:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 800151a:	2201      	movs	r2, #1
 800151c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001520:	4641      	mov	r1, r8
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff ff12 	bl	800134c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001528:	f019 0f08 	tst.w	r9, #8
 800152c:	d008      	beq.n	8001540 <HAL_PCD_IRQHandler+0x94>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800152e:	4641      	mov	r1, r8
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff ff87 	bl	8001444 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001536:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 800153a:	2208      	movs	r2, #8
 800153c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001540:	f019 0f10 	tst.w	r9, #16
 8001544:	d004      	beq.n	8001550 <HAL_PCD_IRQHandler+0xa4>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001546:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 800154a:	2210      	movs	r2, #16
 800154c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001550:	f019 0f20 	tst.w	r9, #32
 8001554:	d00d      	beq.n	8001572 <HAL_PCD_IRQHandler+0xc6>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001556:	6923      	ldr	r3, [r4, #16]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_PCD_IRQHandler+0xbc>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800155c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001560:	2101      	movs	r1, #1
 8001562:	6820      	ldr	r0, [r4, #0]
 8001564:	f001 f88c 	bl	8002680 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001568:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 800156c:	2220      	movs	r2, #32
 800156e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001572:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8001576:	d005      	beq.n	8001584 <HAL_PCD_IRQHandler+0xd8>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001578:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 800157c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001580:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }
        }
        epnum++;
 8001584:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8001588:	087f      	lsrs	r7, r7, #1
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 800158a:	2f00      	cmp	r7, #0
 800158c:	d1b7      	bne.n	80014fe <HAL_PCD_IRQHandler+0x52>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800158e:	6820      	ldr	r0, [r4, #0]
 8001590:	f001 f822 	bl	80025d8 <USB_ReadInterrupts>
 8001594:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8001598:	d071      	beq.n	800167e <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800159a:	6820      	ldr	r0, [r4, #0]
 800159c:	f001 f828 	bl	80025f0 <USB_ReadDevAllInEpInterrupt>
 80015a0:	4607      	mov	r7, r0

      epnum = 0U;
 80015a2:	f04f 0800 	mov.w	r8, #0

      while (ep_intr != 0U)
 80015a6:	e068      	b.n	800167a <HAL_PCD_IRQHandler+0x1ce>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015a8:	f017 0f01 	tst.w	r7, #1
 80015ac:	d062      	beq.n	8001674 <HAL_PCD_IRQHandler+0x1c8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015ae:	fa5f fa88 	uxtb.w	sl, r8
 80015b2:	4651      	mov	r1, sl
 80015b4:	6820      	ldr	r0, [r4, #0]
 80015b6:	f001 f82d 	bl	8002614 <USB_ReadDevInEPInterrupt>
 80015ba:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015bc:	f010 0f01 	tst.w	r0, #1
 80015c0:	d031      	beq.n	8001626 <HAL_PCD_IRQHandler+0x17a>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015c2:	f008 030f 	and.w	r3, r8, #15
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015cc:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 80015d0:	ea23 0302 	bic.w	r3, r3, r2
 80015d4:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015d8:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80015dc:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908

            if (hpcd->Init.dma_enable == 1U)
 80015e0:	6923      	ldr	r3, [r4, #16]
 80015e2:	428b      	cmp	r3, r1
 80015e4:	d109      	bne.n	80015fa <HAL_PCD_IRQHandler+0x14e>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015ea:	ebc8 0202 	rsb	r2, r8, r2
 80015ee:	0093      	lsls	r3, r2, #2
 80015f0:	4423      	add	r3, r4
 80015f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80015f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015f6:	440a      	add	r2, r1
 80015f8:	649a      	str	r2, [r3, #72]	; 0x48
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015fa:	4651      	mov	r1, sl
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7ff fa57 	bl	8000ab0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001602:	6923      	ldr	r3, [r4, #16]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d10e      	bne.n	8001626 <HAL_PCD_IRQHandler+0x17a>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001608:	f1b8 0f00 	cmp.w	r8, #0
 800160c:	d10b      	bne.n	8001626 <HAL_PCD_IRQHandler+0x17a>
 800160e:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 8001612:	0093      	lsls	r3, r2, #2
 8001614:	4423      	add	r3, r4
 8001616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001618:	b92b      	cbnz	r3, 8001626 <HAL_PCD_IRQHandler+0x17a>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800161a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800161e:	2101      	movs	r1, #1
 8001620:	6820      	ldr	r0, [r4, #0]
 8001622:	f001 f82d 	bl	8002680 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001626:	f019 0f08 	tst.w	r9, #8
 800162a:	d004      	beq.n	8001636 <HAL_PCD_IRQHandler+0x18a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800162c:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001630:	2208      	movs	r2, #8
 8001632:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001636:	f019 0f10 	tst.w	r9, #16
 800163a:	d004      	beq.n	8001646 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800163c:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001640:	2210      	movs	r2, #16
 8001642:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001646:	f019 0f40 	tst.w	r9, #64	; 0x40
 800164a:	d004      	beq.n	8001656 <HAL_PCD_IRQHandler+0x1aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800164c:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001650:	2240      	movs	r2, #64	; 0x40
 8001652:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001656:	f019 0f02 	tst.w	r9, #2
 800165a:	d004      	beq.n	8001666 <HAL_PCD_IRQHandler+0x1ba>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800165c:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001660:	2202      	movs	r2, #2
 8001662:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001666:	f019 0f80 	tst.w	r9, #128	; 0x80
 800166a:	d003      	beq.n	8001674 <HAL_PCD_IRQHandler+0x1c8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800166c:	4641      	mov	r1, r8
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fd4e 	bl	8001110 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001674:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8001678:	087f      	lsrs	r7, r7, #1
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);

      epnum = 0U;

      while (ep_intr != 0U)
 800167a:	2f00      	cmp	r7, #0
 800167c:	d194      	bne.n	80015a8 <HAL_PCD_IRQHandler+0xfc>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800167e:	6820      	ldr	r0, [r4, #0]
 8001680:	f000 ffaa 	bl	80025d8 <USB_ReadInterrupts>
 8001684:	2800      	cmp	r0, #0
 8001686:	da18      	bge.n	80016ba <HAL_PCD_IRQHandler+0x20e>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001688:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8001694:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_PCD_IRQHandler+0x1fe>
      {
        hpcd->LPM_State = LPM_L0;
 800169c:	2100      	movs	r1, #0
 800169e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f000 fab6 	bl	8001c14 <HAL_PCDEx_LPM_Callback>
 80016a8:	e002      	b.n	80016b0 <HAL_PCD_IRQHandler+0x204>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016aa:	4620      	mov	r0, r4
 80016ac:	f7ff fa3c 	bl	8000b28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	6953      	ldr	r3, [r2, #20]
 80016b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016b8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016ba:	6820      	ldr	r0, [r4, #0]
 80016bc:	f000 ff8c 	bl	80025d8 <USB_ReadInterrupts>
 80016c0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80016c4:	d00c      	beq.n	80016e0 <HAL_PCD_IRQHandler+0x234>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016c6:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80016ca:	f013 0f01 	tst.w	r3, #1
 80016ce:	d002      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x22a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7ff fa11 	bl	8000af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016d6:	6822      	ldr	r2, [r4, #0]
 80016d8:	6953      	ldr	r3, [r2, #20]
 80016da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016de:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016e0:	6820      	ldr	r0, [r4, #0]
 80016e2:	f000 ff79 	bl	80025d8 <USB_ReadInterrupts>
 80016e6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80016ea:	d04f      	beq.n	800178c <HAL_PCD_IRQHandler+0x2e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016ec:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016f8:	2110      	movs	r1, #16
 80016fa:	6820      	ldr	r0, [r4, #0]
 80016fc:	f000 fb88 	bl	8001e10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001700:	2200      	movs	r2, #0
 8001702:	e014      	b.n	800172e <HAL_PCD_IRQHandler+0x282>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001704:	eb06 1342 	add.w	r3, r6, r2, lsl #5
 8001708:	f64f 307f 	movw	r0, #64383	; 0xfb7f
 800170c:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001710:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8001714:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8001718:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800171c:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001720:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8001724:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8001728:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172c:	3201      	adds	r2, #1
 800172e:	6863      	ldr	r3, [r4, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	d3e7      	bcc.n	8001704 <HAL_PCD_IRQHandler+0x258>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800173a:	61fb      	str	r3, [r7, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800173c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800173e:	b153      	cbz	r3, 8001756 <HAL_PCD_IRQHandler+0x2aa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001744:	f043 030b 	orr.w	r3, r3, #11
 8001748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800174c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174e:	f043 030b 	orr.w	r3, r3, #11
 8001752:	647b      	str	r3, [r7, #68]	; 0x44
 8001754:	e009      	b.n	800176a <HAL_PCD_IRQHandler+0x2be>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800175c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001760:	617b      	str	r3, [r7, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f043 030b 	orr.w	r3, r3, #11
 8001768:	613b      	str	r3, [r7, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800176a:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800176e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001772:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001776:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800177a:	7c21      	ldrb	r1, [r4, #16]
 800177c:	6820      	ldr	r0, [r4, #0]
 800177e:	f000 ff7f 	bl	8002680 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001782:	6822      	ldr	r2, [r4, #0]
 8001784:	6953      	ldr	r3, [r2, #20]
 8001786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	f000 ff23 	bl	80025d8 <USB_ReadInterrupts>
 8001792:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001796:	d016      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x31a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	f000 ff55 	bl	8002648 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800179e:	6820      	ldr	r0, [r4, #0]
 80017a0:	f000 fc34 	bl	800200c <USB_GetDevSpeed>
 80017a4:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017a6:	6826      	ldr	r6, [r4, #0]
 80017a8:	f001 fabe 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 80017ac:	7b22      	ldrb	r2, [r4, #12]
 80017ae:	4601      	mov	r1, r0
 80017b0:	4630      	mov	r0, r6
 80017b2:	f000 fa93 	bl	8001cdc <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff f98c 	bl	8000ad4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017bc:	6822      	ldr	r2, [r4, #0]
 80017be:	6953      	ldr	r3, [r2, #20]
 80017c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c4:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017c6:	6820      	ldr	r0, [r4, #0]
 80017c8:	f000 ff06 	bl	80025d8 <USB_ReadInterrupts>
 80017cc:	f010 0f10 	tst.w	r0, #16
 80017d0:	d043      	beq.n	800185a <HAL_PCD_IRQHandler+0x3ae>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017d2:	6822      	ldr	r2, [r4, #0]
 80017d4:	6993      	ldr	r3, [r2, #24]
 80017d6:	f023 0310 	bic.w	r3, r3, #16
 80017da:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 80017dc:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017de:	f006 070f 	and.w	r7, r6, #15

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017e2:	f3c6 4343 	ubfx	r3, r6, #17, #4
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d11f      	bne.n	800182a <HAL_PCD_IRQHandler+0x37e>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017ee:	421e      	tst	r6, r3
 80017f0:	d02e      	beq.n	8001850 <HAL_PCD_IRQHandler+0x3a4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017f2:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 80017f6:	ebc7 0309 	rsb	r3, r7, r9
 80017fa:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80017fe:	44a0      	add	r8, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001800:	0936      	lsrs	r6, r6, #4

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001802:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8001806:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 800180a:	4628      	mov	r0, r5
 800180c:	f000 fe4e 	bl	80024ac <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001810:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001814:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8001818:	4433      	add	r3, r6
 800181a:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800181e:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 8001822:	441e      	add	r6, r3
 8001824:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
 8001828:	e012      	b.n	8001850 <HAL_PCD_IRQHandler+0x3a4>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800182a:	2b06      	cmp	r3, #6
 800182c:	d110      	bne.n	8001850 <HAL_PCD_IRQHandler+0x3a4>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800182e:	2208      	movs	r2, #8
 8001830:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001834:	4628      	mov	r0, r5
 8001836:	f000 fe39 	bl	80024ac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800183a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800183e:	00fb      	lsls	r3, r7, #3
 8001840:	1bd9      	subs	r1, r3, r7
 8001842:	008a      	lsls	r2, r1, #2
 8001844:	4422      	add	r2, r4
 8001846:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800184a:	4433      	add	r3, r6
 800184c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001850:	6822      	ldr	r2, [r4, #0]
 8001852:	6993      	ldr	r3, [r2, #24]
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800185a:	6820      	ldr	r0, [r4, #0]
 800185c:	f000 febc 	bl	80025d8 <USB_ReadInterrupts>
 8001860:	f010 0f08 	tst.w	r0, #8
 8001864:	d007      	beq.n	8001876 <HAL_PCD_IRQHandler+0x3ca>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001866:	4620      	mov	r0, r4
 8001868:	f7ff f92e 	bl	8000ac8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800186c:	6822      	ldr	r2, [r4, #0]
 800186e:	6953      	ldr	r3, [r2, #20]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001876:	6820      	ldr	r0, [r4, #0]
 8001878:	f000 feae 	bl	80025d8 <USB_ReadInterrupts>
 800187c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001880:	d008      	beq.n	8001894 <HAL_PCD_IRQHandler+0x3e8>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001882:	2100      	movs	r1, #0
 8001884:	4620      	mov	r0, r4
 8001886:	f7ff f95b 	bl	8000b40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	6953      	ldr	r3, [r2, #20]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001892:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001894:	6820      	ldr	r0, [r4, #0]
 8001896:	f000 fe9f 	bl	80025d8 <USB_ReadInterrupts>
 800189a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800189e:	d008      	beq.n	80018b2 <HAL_PCD_IRQHandler+0x406>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018a0:	2100      	movs	r1, #0
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff f946 	bl	8000b34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018a8:	6822      	ldr	r2, [r4, #0]
 80018aa:	6953      	ldr	r3, [r2, #20]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	f000 fe90 	bl	80025d8 <USB_ReadInterrupts>
 80018b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80018bc:	d007      	beq.n	80018ce <HAL_PCD_IRQHandler+0x422>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff f944 	bl	8000b4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	6953      	ldr	r3, [r2, #20]
 80018c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018cc:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018ce:	6820      	ldr	r0, [r4, #0]
 80018d0:	f000 fe82 	bl	80025d8 <USB_ReadInterrupts>
 80018d4:	f010 0f04 	tst.w	r0, #4
 80018d8:	d00b      	beq.n	80018f2 <HAL_PCD_IRQHandler+0x446>
    {
      temp = hpcd->Instance->GOTGINT;
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80018de:	f015 0f04 	tst.w	r5, #4
 80018e2:	d002      	beq.n	80018ea <HAL_PCD_IRQHandler+0x43e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff f937 	bl	8000b58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	6853      	ldr	r3, [r2, #4]
 80018ee:	432b      	orrs	r3, r5
 80018f0:	6053      	str	r3, [r2, #4]
 80018f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018f6:	bf00      	nop

080018f8 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80018f8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d00d      	beq.n	800191c <HAL_PCD_SetAddress+0x24>
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001900:	b510      	push	{r4, lr}
 8001902:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001904:	2301      	movs	r3, #1
 8001906:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800190a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800190e:	6800      	ldr	r0, [r0, #0]
 8001910:	f000 fe3a 	bl	8002588 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001914:	2000      	movs	r0, #0
 8001916:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800191a:	bd10      	pop	{r4, pc}
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800191c:	2002      	movs	r0, #2
 800191e:	4770      	bx	lr

08001920 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001922:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001926:	d00e      	beq.n	8001946 <HAL_PCD_EP_Open+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001928:	f001 060f 	and.w	r6, r1, #15
 800192c:	00f5      	lsls	r5, r6, #3
 800192e:	1baf      	subs	r7, r5, r6
 8001930:	00bc      	lsls	r4, r7, #2
 8001932:	4627      	mov	r7, r4
 8001934:	3438      	adds	r4, #56	; 0x38
 8001936:	4404      	add	r4, r0
 8001938:	3404      	adds	r4, #4
    ep->is_in = 1U;
 800193a:	463e      	mov	r6, r7
 800193c:	4406      	add	r6, r0
 800193e:	2501      	movs	r5, #1
 8001940:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 8001944:	e00e      	b.n	8001964 <HAL_PCD_EP_Open+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001946:	f001 060f 	and.w	r6, r1, #15
 800194a:	00f5      	lsls	r5, r6, #3
 800194c:	1baf      	subs	r7, r5, r6
 800194e:	00bc      	lsls	r4, r7, #2
 8001950:	4627      	mov	r7, r4
 8001952:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001956:	4404      	add	r4, r0
 8001958:	3404      	adds	r4, #4
    ep->is_in = 0U;
 800195a:	463e      	mov	r6, r7
 800195c:	4406      	add	r6, r0
 800195e:	2500      	movs	r5, #0
 8001960:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001964:	f001 010f 	and.w	r1, r1, #15
 8001968:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 800196a:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 800196c:	70e3      	strb	r3, [r4, #3]

  if (ep->is_in != 0U)
 800196e:	7862      	ldrb	r2, [r4, #1]
 8001970:	b102      	cbz	r2, 8001974 <HAL_PCD_EP_Open+0x54>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001972:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001974:	2b02      	cmp	r3, #2
 8001976:	d101      	bne.n	800197c <HAL_PCD_EP_Open+0x5c>
  {
    ep->data_pid_start = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	7123      	strb	r3, [r4, #4]
  }

  __HAL_LOCK(hpcd);
 800197c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001980:	2b01      	cmp	r3, #1
 8001982:	d00b      	beq.n	800199c <HAL_PCD_EP_Open+0x7c>
 8001984:	4605      	mov	r5, r0
 8001986:	2301      	movs	r3, #1
 8001988:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800198c:	4621      	mov	r1, r4
 800198e:	6800      	ldr	r0, [r0, #0]
 8001990:	f000 fb4e 	bl	8002030 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001994:	2000      	movs	r0, #0
 8001996:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc

  return ret;
 800199a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ep_type == EP_TYPE_BULK)
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 800199c:	2002      	movs	r0, #2
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return ret;
}
 800199e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a0:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019a6:	d00e      	beq.n	80019c6 <HAL_PCD_EP_Close+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a8:	f001 040f 	and.w	r4, r1, #15
 80019ac:	00e2      	lsls	r2, r4, #3
 80019ae:	1b15      	subs	r5, r2, r4
 80019b0:	00ab      	lsls	r3, r5, #2
 80019b2:	461d      	mov	r5, r3
 80019b4:	3338      	adds	r3, #56	; 0x38
 80019b6:	4403      	add	r3, r0
 80019b8:	3304      	adds	r3, #4
    ep->is_in = 1U;
 80019ba:	462c      	mov	r4, r5
 80019bc:	4404      	add	r4, r0
 80019be:	2201      	movs	r2, #1
 80019c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80019c4:	e00e      	b.n	80019e4 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019c6:	f001 040f 	and.w	r4, r1, #15
 80019ca:	00e2      	lsls	r2, r4, #3
 80019cc:	1b15      	subs	r5, r2, r4
 80019ce:	00ab      	lsls	r3, r5, #2
 80019d0:	461d      	mov	r5, r3
 80019d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019d6:	4403      	add	r3, r0
 80019d8:	3304      	adds	r3, #4
    ep->is_in = 0U;
 80019da:	462c      	mov	r4, r5
 80019dc:	4404      	add	r4, r0
 80019de:	2200      	movs	r2, #0
 80019e0:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019e4:	f001 010f 	and.w	r1, r1, #15
 80019e8:	7019      	strb	r1, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ea:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80019ee:	2a01      	cmp	r2, #1
 80019f0:	d00b      	beq.n	8001a0a <HAL_PCD_EP_Close+0x6a>
 80019f2:	4604      	mov	r4, r0
 80019f4:	2201      	movs	r2, #1
 80019f6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019fa:	4619      	mov	r1, r3
 80019fc:	6800      	ldr	r0, [r0, #0]
 80019fe:	f000 fb63 	bl	80020c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001a08:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001a0a:	2002      	movs	r0, #2
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001a0c:	bd38      	pop	{r3, r4, r5, pc}
 8001a0e:	bf00      	nop

08001a10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	00ee      	lsls	r6, r5, #3
 8001a18:	1b71      	subs	r1, r6, r5
 8001a1a:	008c      	lsls	r4, r1, #2
 8001a1c:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001a20:	4404      	add	r4, r0
 8001a22:	1d21      	adds	r1, r4, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a24:	1b76      	subs	r6, r6, r5
 8001a26:	00b4      	lsls	r4, r6, #2
 8001a28:	4404      	add	r4, r0
 8001a2a:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8001a2e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001a38:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a3c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc

  if (hpcd->Init.dma_enable == 1U)
 8001a40:	6903      	ldr	r3, [r0, #16]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_PCD_EP_Receive+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a46:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001a4a:	00b4      	lsls	r4, r6, #2
 8001a4c:	4404      	add	r4, r0
 8001a4e:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a52:	b925      	cbnz	r5, 8001a5e <HAL_PCD_EP_Receive+0x4e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	6800      	ldr	r0, [r0, #0]
 8001a58:	f000 fb7e 	bl	8002158 <USB_EP0StartXfer>
 8001a5c:	e003      	b.n	8001a66 <HAL_PCD_EP_Receive+0x56>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	6800      	ldr	r0, [r0, #0]
 8001a62:	f000 fc1d 	bl	80022a0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001a66:	2000      	movs	r0, #0
 8001a68:	bd70      	pop	{r4, r5, r6, pc}
 8001a6a:	bf00      	nop

08001a6c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a6c:	f001 010f 	and.w	r1, r1, #15
 8001a70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001a74:	008b      	lsls	r3, r1, #2
 8001a76:	4418      	add	r0, r3
}
 8001a78:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a80:	b570      	push	{r4, r5, r6, lr}
 8001a82:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a86:	00ee      	lsls	r6, r5, #3
 8001a88:	1b71      	subs	r1, r6, r5
 8001a8a:	008c      	lsls	r4, r1, #2
 8001a8c:	3438      	adds	r4, #56	; 0x38
 8001a8e:	4404      	add	r4, r0
 8001a90:	1d21      	adds	r1, r4, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a92:	1b76      	subs	r6, r6, r5
 8001a94:	00b4      	lsls	r4, r6, #2
 8001a96:	4404      	add	r4, r0
 8001a98:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8001a9a:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c

  if (hpcd->Init.dma_enable == 1U)
 8001aaa:	6903      	ldr	r3, [r0, #16]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d104      	bne.n	8001aba <HAL_PCD_EP_Transmit+0x3a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ab0:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001ab4:	00b4      	lsls	r4, r6, #2
 8001ab6:	4404      	add	r4, r0
 8001ab8:	64e2      	str	r2, [r4, #76]	; 0x4c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aba:	b925      	cbnz	r5, 8001ac6 <HAL_PCD_EP_Transmit+0x46>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	6800      	ldr	r0, [r0, #0]
 8001ac0:	f000 fb4a 	bl	8002158 <USB_EP0StartXfer>
 8001ac4:	e003      	b.n	8001ace <HAL_PCD_EP_Transmit+0x4e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	6800      	ldr	r0, [r0, #0]
 8001aca:	f000 fbe9 	bl	80022a0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001ace:	2000      	movs	r0, #0
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
 8001ad2:	bf00      	nop

08001ad4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad4:	b538      	push	{r3, r4, r5, lr}
 8001ad6:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ada:	6843      	ldr	r3, [r0, #4]
 8001adc:	429d      	cmp	r5, r3
 8001ade:	d835      	bhi.n	8001b4c <HAL_PCD_EP_SetStall+0x78>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ae0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ae4:	d00b      	beq.n	8001afe <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	00ea      	lsls	r2, r5, #3
 8001ae8:	1b51      	subs	r1, r2, r5
 8001aea:	008b      	lsls	r3, r1, #2
 8001aec:	4619      	mov	r1, r3
 8001aee:	3338      	adds	r3, #56	; 0x38
 8001af0:	4403      	add	r3, r0
 8001af2:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8001af4:	4401      	add	r1, r0
 8001af6:	2201      	movs	r2, #1
 8001af8:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 8001afc:	e00c      	b.n	8001b18 <HAL_PCD_EP_SetStall+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001afe:	00ca      	lsls	r2, r1, #3
 8001b00:	1a54      	subs	r4, r2, r1
 8001b02:	00a3      	lsls	r3, r4, #2
 8001b04:	461c      	mov	r4, r3
 8001b06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b0a:	4403      	add	r3, r0
 8001b0c:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001b0e:	4622      	mov	r2, r4
 8001b10:	4402      	add	r2, r0
 8001b12:	2100      	movs	r1, #0
 8001b14:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  }

  ep->is_stall = 1U;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b1c:	701d      	strb	r5, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b1e:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001b22:	2a01      	cmp	r2, #1
 8001b24:	d014      	beq.n	8001b50 <HAL_PCD_EP_SetStall+0x7c>
 8001b26:	4604      	mov	r4, r0
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6800      	ldr	r0, [r0, #0]
 8001b32:	f000 fccd 	bl	80024d0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b36:	b92d      	cbnz	r5, 8001b44 <HAL_PCD_EP_SetStall+0x70>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b38:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001b3c:	7c21      	ldrb	r1, [r4, #16]
 8001b3e:	6820      	ldr	r0, [r4, #0]
 8001b40:	f000 fd9e 	bl	8002680 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001b4a:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
  }

  ep->is_stall = 1U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001b50:	2002      	movs	r0, #2
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001b52:	bd38      	pop	{r3, r4, r5, pc}

08001b54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b54:	f001 030f 	and.w	r3, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b58:	6842      	ldr	r2, [r0, #4]
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d82d      	bhi.n	8001bba <HAL_PCD_EP_ClrStall+0x66>
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b5e:	b510      	push	{r4, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b60:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b64:	d00b      	beq.n	8001b7e <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b66:	00da      	lsls	r2, r3, #3
 8001b68:	1ad4      	subs	r4, r2, r3
 8001b6a:	00a1      	lsls	r1, r4, #2
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	3138      	adds	r1, #56	; 0x38
 8001b70:	4401      	add	r1, r0
 8001b72:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001b74:	4404      	add	r4, r0
 8001b76:	2201      	movs	r2, #1
 8001b78:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001b7c:	e00b      	b.n	8001b96 <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b7e:	00da      	lsls	r2, r3, #3
 8001b80:	1ad4      	subs	r4, r2, r3
 8001b82:	00a1      	lsls	r1, r4, #2
 8001b84:	460c      	mov	r4, r1
 8001b86:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001b8a:	4401      	add	r1, r0
 8001b8c:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001b8e:	4404      	add	r4, r0
 8001b90:	2200      	movs	r2, #0
 8001b92:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  }

  ep->is_stall = 0U;
 8001b96:	2200      	movs	r2, #0
 8001b98:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b9a:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8001b9c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d00c      	beq.n	8001bbe <HAL_PCD_EP_ClrStall+0x6a>
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bac:	6800      	ldr	r0, [r0, #0]
 8001bae:	f000 fcbd 	bl	800252c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001bb8:	bd10      	pop	{r4, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001bba:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001bbc:	4770      	bx	lr
  }

  ep->is_stall = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001bbe:	2002      	movs	r0, #2
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001bc0:	bd10      	pop	{r4, pc}
 8001bc2:	bf00      	nop

08001bc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001bc4:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001bc6:	6804      	ldr	r4, [r0, #0]
 8001bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001bca:	b919      	cbnz	r1, 8001bd4 <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001bcc:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8001bd0:	62a0      	str	r0, [r4, #40]	; 0x28
 8001bd2:	e018      	b.n	8001c06 <HAL_PCDEx_SetTxFiFo+0x42>
 8001bd4:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001bd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001bd8:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e008      	b.n	8001bf2 <HAL_PCDEx_SetTxFiFo+0x2e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001be0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001be4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001be8:	6849      	ldr	r1, [r1, #4]
 8001bea:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
    for (i = 0U; i < (fifo - 1U); i++)
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	1e69      	subs	r1, r5, #1
 8001bf4:	428b      	cmp	r3, r1
 8001bf6:	d3f3      	bcc.n	8001be0 <HAL_PCDEx_SetTxFiFo+0x1c>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001bf8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001bfc:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8001c00:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001c04:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8001c06:	2000      	movs	r0, #0
 8001c08:	bc30      	pop	{r4, r5}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001c0c:	6803      	ldr	r3, [r0, #0]
 8001c0e:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001c10:	2000      	movs	r0, #0
 8001c12:	4770      	bx	lr

08001c14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8001c18:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <USB_CoreReset+0x38>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d811      	bhi.n	8001c46 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001c22:	6902      	ldr	r2, [r0, #16]
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	daf8      	bge.n	8001c1a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001c28:	6903      	ldr	r3, [r0, #16]
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6103      	str	r3, [r0, #16]
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);

  /* Core Soft Reset */
  count = 0U;
 8001c30:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <USB_CoreReset+0x38>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d807      	bhi.n	8001c4a <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001c3a:	6902      	ldr	r2, [r0, #16]
 8001c3c:	f012 0f01 	tst.w	r2, #1
 8001c40:	d1f7      	bne.n	8001c32 <USB_CoreReset+0x1a>

  return HAL_OK;
 8001c42:	2000      	movs	r0, #0
 8001c44:	4770      	bx	lr
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001c46:	2003      	movs	r0, #3
 8001c48:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	00030d40 	.word	0x00030d40

08001c54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001c54:	b084      	sub	sp, #16
 8001c56:	b510      	push	{r4, lr}
 8001c58:	4604      	mov	r4, r0
 8001c5a:	a803      	add	r0, sp, #12
 8001c5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c60:	9b08      	ldr	r3, [sp, #32]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d118      	bne.n	8001c98 <USB_CoreInit+0x44>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	63a3      	str	r3, [r4, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001c6e:	68e3      	ldr	r3, [r4, #12]
 8001c70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c78:	60e3      	str	r3, [r4, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001c7a:	68e3      	ldr	r3, [r4, #12]
 8001c7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c80:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8001c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d103      	bne.n	8001c90 <USB_CoreInit+0x3c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001c88:	68e3      	ldr	r3, [r4, #12]
 8001c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c8e:	60e3      	str	r3, [r4, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7ff ffc1 	bl	8001c18 <USB_CoreReset>
 8001c96:	e011      	b.n	8001cbc <USB_CoreInit+0x68>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001c98:	68e3      	ldr	r3, [r4, #12]
 8001c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c9e:	60e3      	str	r3, [r4, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff ffb9 	bl	8001c18 <USB_CoreReset>

    if (cfg.battery_charging_enable == 0U)
 8001ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ca8:	b923      	cbnz	r3, 8001cb4 <USB_CoreInit+0x60>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001caa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	63a3      	str	r3, [r4, #56]	; 0x38
 8001cb2:	e003      	b.n	8001cbc <USB_CoreInit+0x68>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001cb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cba:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8001cbc:	9b06      	ldr	r3, [sp, #24]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <USB_CoreInit+0x7e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001cc2:	68a3      	ldr	r3, [r4, #8]
 8001cc4:	f043 0306 	orr.w	r3, r3, #6
 8001cc8:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001cca:	68a3      	ldr	r3, [r4, #8]
 8001ccc:	f043 0320 	orr.w	r3, r3, #32
 8001cd0:	60a3      	str	r3, [r4, #8]
  }

  return ret;
}
 8001cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd6:	b004      	add	sp, #16
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop

08001cdc <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8001cdc:	2a02      	cmp	r2, #2
 8001cde:	d142      	bne.n	8001d66 <USB_SetTurnaroundTime+0x8a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <USB_SetTurnaroundTime+0xc4>)
 8001ce2:	440b      	add	r3, r1
 8001ce4:	4a2f      	ldr	r2, [pc, #188]	; (8001da4 <USB_SetTurnaroundTime+0xc8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d93f      	bls.n	8001d6a <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001cea:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <USB_SetTurnaroundTime+0xcc>)
 8001cec:	440b      	add	r3, r1
 8001cee:	4a2f      	ldr	r2, [pc, #188]	; (8001dac <USB_SetTurnaroundTime+0xd0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d93c      	bls.n	8001d6e <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8001cf4:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8001cf8:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8001cfc:	4a2c      	ldr	r2, [pc, #176]	; (8001db0 <USB_SetTurnaroundTime+0xd4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d937      	bls.n	8001d72 <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8001d02:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8001d06:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8001d0a:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8001d0e:	32a0      	adds	r2, #160	; 0xa0
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d930      	bls.n	8001d76 <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <USB_SetTurnaroundTime+0xd8>)
 8001d16:	440b      	add	r3, r1
 8001d18:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <USB_SetTurnaroundTime+0xdc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d92d      	bls.n	8001d7a <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8001d1e:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <USB_SetTurnaroundTime+0xe0>)
 8001d20:	440b      	add	r3, r1
 8001d22:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8001d26:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d927      	bls.n	8001d7e <USB_SetTurnaroundTime+0xa2>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <USB_SetTurnaroundTime+0xe4>)
 8001d30:	440b      	add	r3, r1
 8001d32:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8001d36:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d921      	bls.n	8001d82 <USB_SetTurnaroundTime+0xa6>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8001d3e:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8001d42:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8001d46:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8001d4a:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d919      	bls.n	8001d86 <USB_SetTurnaroundTime+0xaa>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <USB_SetTurnaroundTime+0xe8>)
 8001d54:	440b      	add	r3, r1
 8001d56:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8001d5a:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d813      	bhi.n	8001d8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8001d62:	2107      	movs	r1, #7
 8001d64:	e012      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
      UsbTrd = 0x6U;
    }
  }
  else if (speed == USBD_HS_SPEED)
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8001d66:	2109      	movs	r1, #9
 8001d68:	e010      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
  if (speed == USBD_FS_SPEED)
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	e00e      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8001d6e:	210e      	movs	r1, #14
 8001d70:	e00c      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8001d72:	210d      	movs	r1, #13
 8001d74:	e00a      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8001d76:	210c      	movs	r1, #12
 8001d78:	e008      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8001d7a:	210b      	movs	r1, #11
 8001d7c:	e006      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8001d7e:	210a      	movs	r1, #10
 8001d80:	e004      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8001d82:	2109      	movs	r1, #9
 8001d84:	e002      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8001d86:	2108      	movs	r1, #8
 8001d88:	e000      	b.n	8001d8c <USB_SetTurnaroundTime+0xb0>
      UsbTrd = 0x7U;
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8001d8a:	2106      	movs	r1, #6
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001d8c:	68c2      	ldr	r2, [r0, #12]
 8001d8e:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001d92:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8001d94:	68c3      	ldr	r3, [r0, #12]
 8001d96:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001d9a:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	4770      	bx	lr
 8001da0:	ff275340 	.word	0xff275340
 8001da4:	000c34ff 	.word	0x000c34ff
 8001da8:	ff1b1e40 	.word	0xff1b1e40
 8001dac:	000f423f 	.word	0x000f423f
 8001db0:	00124f7f 	.word	0x00124f7f
 8001db4:	fee5b660 	.word	0xfee5b660
 8001db8:	0016e35f 	.word	0x0016e35f
 8001dbc:	feced300 	.word	0xfeced300
 8001dc0:	feb35bc0 	.word	0xfeb35bc0
 8001dc4:	fe5954e0 	.word	0xfe5954e0

08001dc8 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001dc8:	6883      	ldr	r3, [r0, #8]
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	4770      	bx	lr

08001dd4 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001dd4:	6883      	ldr	r3, [r0, #8]
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001ddc:	2000      	movs	r0, #0
 8001dde:	4770      	bx	lr

08001de0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001de0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001de2:	68c3      	ldr	r3, [r0, #12]
 8001de4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001de8:	60c3      	str	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 8001dea:	2901      	cmp	r1, #1
 8001dec:	d104      	bne.n	8001df8 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001dee:	68c3      	ldr	r3, [r0, #12]
 8001df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001df4:	60c3      	str	r3, [r0, #12]
 8001df6:	e004      	b.n	8001e02 <USB_SetCurrentMode+0x22>
  }
  else if (mode == USB_DEVICE_MODE)
 8001df8:	b941      	cbnz	r1, 8001e0c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001dfa:	68c3      	ldr	r3, [r0, #12]
 8001dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e00:	60c3      	str	r3, [r0, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  HAL_Delay(50U);
 8001e02:	2032      	movs	r0, #50	; 0x32
 8001e04:	f001 fad8 	bl	80033b8 <HAL_Delay>

  return HAL_OK;
 8001e08:	2000      	movs	r0, #0
 8001e0a:	bd08      	pop	{r3, pc}
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
  }
  else
  {
    return HAL_ERROR;
 8001e0c:	2001      	movs	r0, #1
  }
  HAL_Delay(50U);

  return HAL_OK;
}
 8001e0e:	bd08      	pop	{r3, pc}

08001e10 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001e10:	0189      	lsls	r1, r1, #6
 8001e12:	f041 0120 	orr.w	r1, r1, #32
 8001e16:	6101      	str	r1, [r0, #16]
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;
 8001e18:	2300      	movs	r3, #0

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));

  do
  {
    if (++count > 200000U)
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <USB_FlushTxFifo+0x24>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d805      	bhi.n	8001e2e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001e22:	6902      	ldr	r2, [r0, #16]
 8001e24:	f012 0f20 	tst.w	r2, #32
 8001e28:	d1f7      	bne.n	8001e1a <USB_FlushTxFifo+0xa>

  return HAL_OK;
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001e2e:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);

  return HAL_OK;
}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	00030d40 	.word	0x00030d40

08001e38 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001e38:	2310      	movs	r3, #16
 8001e3a:	6103      	str	r3, [r0, #16]
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
 8001e3c:	2300      	movs	r3, #0

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;

  do
  {
    if (++count > 200000U)
 8001e3e:	3301      	adds	r3, #1
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <USB_FlushRxFifo+0x20>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d805      	bhi.n	8001e52 <USB_FlushRxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001e46:	6902      	ldr	r2, [r0, #16]
 8001e48:	f012 0f10 	tst.w	r2, #16
 8001e4c:	d1f7      	bne.n	8001e3e <USB_FlushRxFifo+0x6>

  return HAL_OK;
 8001e4e:	2000      	movs	r0, #0
 8001e50:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001e52:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);

  return HAL_OK;
}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	00030d40 	.word	0x00030d40

08001e5c <USB_SetDevSpeed>:
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG |= speed;
 8001e5c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001e60:	4319      	orrs	r1, r3
 8001e62:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001e66:	2000      	movs	r0, #0
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e72:	4604      	mov	r4, r0
 8001e74:	a807      	add	r0, sp, #28
 8001e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e7a:	4625      	mov	r5, r4
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e006      	b.n	8001e8e <USB_DevInit+0x22>
  {
    USBx->DIEPTXF[i] = 0U;
 8001e80:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001e84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e88:	2100      	movs	r1, #0
 8001e8a:	6051      	str	r1, [r2, #4]
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	2b0e      	cmp	r3, #14
 8001e90:	d9f6      	bls.n	8001e80 <USB_DevInit+0x14>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8001e92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001e94:	b963      	cbnz	r3, 8001eb0 <USB_DevInit+0x44>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001e96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001e9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ea0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ea4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eac:	63a3      	str	r3, [r4, #56]	; 0x38
 8001eae:	e007      	b.n	8001ec0 <USB_DevInit+0x54>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eb6:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001eb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ebe:	63a3      	str	r3, [r4, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001ec6:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8001eca:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001ece:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10b      	bne.n	8001ef0 <USB_DevInit+0x84>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8001ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eda:	b923      	cbnz	r3, 8001ee6 <USB_DevInit+0x7a>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8001edc:	2100      	movs	r1, #0
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f7ff ffbc 	bl	8001e5c <USB_SetDevSpeed>
 8001ee4:	e008      	b.n	8001ef8 <USB_DevInit+0x8c>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7ff ffb7 	bl	8001e5c <USB_SetDevSpeed>
 8001eee:	e003      	b.n	8001ef8 <USB_DevInit+0x8c>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001ef0:	2103      	movs	r1, #3
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7ff ffb2 	bl	8001e5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001ef8:	2110      	movs	r1, #16
 8001efa:	4620      	mov	r0, r4
 8001efc:	f7ff ff88 	bl	8001e10 <USB_FlushTxFifo>
 8001f00:	b910      	cbnz	r0, 8001f08 <USB_DevInit+0x9c>
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret = HAL_OK;
 8001f02:	f04f 0800 	mov.w	r8, #0
 8001f06:	e001      	b.n	8001f0c <USB_DevInit+0xa0>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
  {
    ret = HAL_ERROR;
 8001f08:	f04f 0801 	mov.w	r8, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff ff93 	bl	8001e38 <USB_FlushRxFifo>
 8001f12:	b108      	cbz	r0, 8001f18 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8001f14:	f04f 0801 	mov.w	r8, #1
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8001f1c:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001f1e:	61f3      	str	r3, [r6, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f20:	e01b      	b.n	8001f5a <USB_DevInit+0xee>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001f22:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001f26:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8001f2a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	da0a      	bge.n	8001f48 <USB_DevInit+0xdc>
    {
      if (i == 0U)
 8001f32:	b923      	cbnz	r3, 8001f3e <USB_DevInit+0xd2>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001f34:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f38:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8001f3c:	e007      	b.n	8001f4e <USB_DevInit+0xe2>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f42:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8001f46:	e002      	b.n	8001f4e <USB_DevInit+0xe2>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001f4e:	2200      	movs	r2, #0
 8001f50:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001f52:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8001f56:	608a      	str	r2, [r1, #8]
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f58:	3301      	adds	r3, #1
 8001f5a:	9907      	ldr	r1, [sp, #28]
 8001f5c:	428b      	cmp	r3, r1
 8001f5e:	d3e0      	bcc.n	8001f22 <USB_DevInit+0xb6>
 8001f60:	2300      	movs	r3, #0
 8001f62:	e01b      	b.n	8001f9c <USB_DevInit+0x130>
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001f64:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001f68:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8001f6c:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 8001f70:	2f00      	cmp	r7, #0
 8001f72:	da0a      	bge.n	8001f8a <USB_DevInit+0x11e>
    {
      if (i == 0U)
 8001f74:	b923      	cbnz	r3, 8001f80 <USB_DevInit+0x114>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001f76:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8001f7a:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8001f7e:	e007      	b.n	8001f90 <USB_DevInit+0x124>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001f80:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8001f84:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8001f88:	e002      	b.n	8001f90 <USB_DevInit+0x124>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001f8a:	2700      	movs	r7, #0
 8001f8c:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001f90:	2200      	movs	r2, #0
 8001f92:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001f94:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8001f98:	6082      	str	r2, [r0, #8]

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	d3e1      	bcc.n	8001f64 <USB_DevInit+0xf8>

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001fa0:	6933      	ldr	r3, [r6, #16]
 8001fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa6:	6133      	str	r3, [r6, #16]

  if (cfg.dma_enable == 1U)
 8001fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d107      	bne.n	8001fbe <USB_DevInit+0x152>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001fae:	4a15      	ldr	r2, [pc, #84]	; (8002004 <USB_DevInit+0x198>)
 8001fb0:	6332      	str	r2, [r6, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001fb2:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8001fb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fb8:	f042 0203 	orr.w	r2, r2, #3
 8001fbc:	6332      	str	r2, [r6, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61a2      	str	r2, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001fc2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8001fc6:	6162      	str	r2, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8001fc8:	b91b      	cbnz	r3, 8001fd2 <USB_DevInit+0x166>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001fca:	69a3      	ldr	r3, [r4, #24]
 8001fcc:	f043 0310 	orr.w	r3, r3, #16
 8001fd0:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001fd2:	69a2      	ldr	r2, [r4, #24]
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <USB_DevInit+0x19c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61a3      	str	r3, [r4, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8001fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001fdc:	b11b      	cbz	r3, 8001fe6 <USB_DevInit+0x17a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001fde:	69a3      	ldr	r3, [r4, #24]
 8001fe0:	f043 0308 	orr.w	r3, r3, #8
 8001fe4:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8001fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <USB_DevInit+0x18c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001fec:	69a3      	ldr	r3, [r4, #24]
 8001fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	61a3      	str	r3, [r4, #24]
  }

  return ret;
}
 8001ff8:	4640      	mov	r0, r8
 8001ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffe:	b004      	add	sp, #16
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	00800100 	.word	0x00800100
 8002008:	803c3800 	.word	0x803c3800

0800200c <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800200c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002010:	f013 0306 	ands.w	r3, r3, #6
 8002014:	d005      	beq.n	8002022 <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002016:	2b02      	cmp	r3, #2
 8002018:	d005      	beq.n	8002026 <USB_GetDevSpeed+0x1a>
 800201a:	2b06      	cmp	r3, #6
 800201c:	d105      	bne.n	800202a <USB_GetDevSpeed+0x1e>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800201e:	2002      	movs	r0, #2
 8002020:	4770      	bx	lr
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USBD_HS_SPEED;
 8002022:	2000      	movs	r0, #0
 8002024:	4770      	bx	lr
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002026:	2002      	movs	r0, #2
 8002028:	4770      	bx	lr
  }
  else
  {
    speed = 0xFU;
 800202a:	200f      	movs	r0, #15
  }

  return speed;
}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002030:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002032:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8002034:	784a      	ldrb	r2, [r1, #1]
 8002036:	2a01      	cmp	r2, #1
 8002038:	d123      	bne.n	8002082 <USB_ActivateEndpoint+0x52>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800203a:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	2401      	movs	r4, #1
 8002044:	fa04 f202 	lsl.w	r2, r4, r2
 8002048:	b292      	uxth	r2, r2
 800204a:	4332      	orrs	r2, r6
 800204c:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002050:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002054:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002058:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800205c:	d131      	bne.n	80020c2 <USB_ActivateEndpoint+0x92>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800205e:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8002062:	688a      	ldr	r2, [r1, #8]
 8002064:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002068:	78c9      	ldrb	r1, [r1, #3]
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800206a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800206e:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002072:	4323      	orrs	r3, r4
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002080:	e01f      	b.n	80020c2 <USB_ActivateEndpoint+0x92>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002082:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8002086:	f003 060f 	and.w	r6, r3, #15
 800208a:	2201      	movs	r2, #1
 800208c:	40b2      	lsls	r2, r6
 800208e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8002092:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002096:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800209a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800209e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80020a2:	d10e      	bne.n	80020c2 <USB_ActivateEndpoint+0x92>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80020a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80020a8:	688a      	ldr	r2, [r1, #8]
 80020aa:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80020ae:	78c9      	ldrb	r1, [r1, #3]
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80020b0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020be:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 80020c2:	2000      	movs	r0, #0
 80020c4:	bc70      	pop	{r4, r5, r6}
 80020c6:	4770      	bx	lr

080020c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80020c8:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80020ca:	780c      	ldrb	r4, [r1, #0]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80020cc:	784b      	ldrb	r3, [r1, #1]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d11e      	bne.n	8002110 <USB_DeactivateEndpoint+0x48>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80020d2:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 80020d6:	f004 020f 	and.w	r2, r4, #15
 80020da:	fa03 f202 	lsl.w	r2, r3, r2
 80020de:	b292      	uxth	r2, r2
 80020e0:	ea26 0202 	bic.w	r2, r6, r2
 80020e4:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80020e8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80020ec:	7809      	ldrb	r1, [r1, #0]
 80020ee:	f001 010f 	and.w	r1, r1, #15
 80020f2:	408b      	lsls	r3, r1
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	ea22 0303 	bic.w	r3, r2, r3
 80020fa:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80020fe:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002102:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <USB_DeactivateEndpoint+0x88>)
 8002108:	4013      	ands	r3, r2
 800210a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800210e:	e01c      	b.n	800214a <USB_DeactivateEndpoint+0x82>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002110:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 8002114:	f004 050f 	and.w	r5, r4, #15
 8002118:	2201      	movs	r2, #1
 800211a:	fa02 f505 	lsl.w	r5, r2, r5
 800211e:	ea26 4505 	bic.w	r5, r6, r5, lsl #16
 8002122:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002126:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800212a:	7809      	ldrb	r1, [r1, #0]
 800212c:	f001 010f 	and.w	r1, r1, #15
 8002130:	408a      	lsls	r2, r1
 8002132:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8002136:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800213a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800213e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <USB_DeactivateEndpoint+0x8c>)
 8002144:	4013      	ands	r3, r2
 8002146:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
}
 800214a:	2000      	movs	r0, #0
 800214c:	bc70      	pop	{r4, r5, r6}
 800214e:	4770      	bx	lr
 8002150:	ec337800 	.word	0xec337800
 8002154:	eff37800 	.word	0xeff37800

08002158 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002158:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800215a:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800215c:	784c      	ldrb	r4, [r1, #1]
 800215e:	2c01      	cmp	r4, #1
 8002160:	d15d      	bne.n	800221e <USB_EP0StartXfer+0xc6>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002162:	694c      	ldr	r4, [r1, #20]
 8002164:	b9b4      	cbnz	r4, 8002194 <USB_EP0StartXfer+0x3c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002166:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800216a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800216e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002172:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002176:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800217a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800217e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002182:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002186:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800218a:	0ced      	lsrs	r5, r5, #19
 800218c:	04ed      	lsls	r5, r5, #19
 800218e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8002192:	e01c      	b.n	80021ce <USB_EP0StartXfer+0x76>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002194:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002198:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800219c:	6925      	ldr	r5, [r4, #16]
 800219e:	0ced      	lsrs	r5, r5, #19
 80021a0:	04ed      	lsls	r5, r5, #19
 80021a2:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80021a4:	6925      	ldr	r5, [r4, #16]
 80021a6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80021aa:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80021ae:	6125      	str	r5, [r4, #16]

      if (ep->xfer_len > ep->maxpacket)
 80021b0:	694e      	ldr	r6, [r1, #20]
 80021b2:	688d      	ldr	r5, [r1, #8]
 80021b4:	42ae      	cmp	r6, r5
 80021b6:	d900      	bls.n	80021ba <USB_EP0StartXfer+0x62>
      {
        ep->xfer_len = ep->maxpacket;
 80021b8:	614d      	str	r5, [r1, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80021ba:	6925      	ldr	r5, [r4, #16]
 80021bc:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80021c0:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80021c2:	6926      	ldr	r6, [r4, #16]
 80021c4:	694d      	ldr	r5, [r1, #20]
 80021c6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80021ca:	4335      	orrs	r5, r6
 80021cc:	6125      	str	r5, [r4, #16]
    }

    if (dma == 1U)
 80021ce:	2a01      	cmp	r2, #1
 80021d0:	d10e      	bne.n	80021f0 <USB_EP0StartXfer+0x98>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80021d2:	690a      	ldr	r2, [r1, #16]
 80021d4:	b11a      	cbz	r2, 80021de <USB_EP0StartXfer+0x86>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80021d6:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80021da:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80021de:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80021e2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80021e6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80021ea:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 80021ee:	e03d      	b.n	800226c <USB_EP0StartXfer+0x114>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80021f0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80021f4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80021f8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80021fc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8002200:	694b      	ldr	r3, [r1, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d032      	beq.n	800226c <USB_EP0StartXfer+0x114>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002206:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800220a:	780a      	ldrb	r2, [r1, #0]
 800220c:	f002 020f 	and.w	r2, r2, #15
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	431a      	orrs	r2, r3
 8002218:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 800221c:	e026      	b.n	800226c <USB_EP0StartXfer+0x114>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800221e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002222:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002226:	691c      	ldr	r4, [r3, #16]
 8002228:	0ce4      	lsrs	r4, r4, #19
 800222a:	04e4      	lsls	r4, r4, #19
 800222c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800222e:	691c      	ldr	r4, [r3, #16]
 8002230:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002234:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002238:	611c      	str	r4, [r3, #16]

    if (ep->xfer_len > 0U)
 800223a:	694c      	ldr	r4, [r1, #20]
 800223c:	b10c      	cbz	r4, 8002242 <USB_EP0StartXfer+0xea>
    {
      ep->xfer_len = ep->maxpacket;
 800223e:	688c      	ldr	r4, [r1, #8]
 8002240:	614c      	str	r4, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002242:	691c      	ldr	r4, [r3, #16]
 8002244:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002248:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800224a:	691d      	ldr	r5, [r3, #16]
 800224c:	688c      	ldr	r4, [r1, #8]
 800224e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002252:	432c      	orrs	r4, r5
 8002254:	611c      	str	r4, [r3, #16]

    if (dma == 1U)
 8002256:	2a01      	cmp	r2, #1
 8002258:	d102      	bne.n	8002260 <USB_EP0StartXfer+0x108>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800225a:	68ca      	ldr	r2, [r1, #12]
 800225c:	b102      	cbz	r2, 8002260 <USB_EP0StartXfer+0x108>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800225e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002260:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002264:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002268:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800226c:	2000      	movs	r0, #0
 800226e:	bc70      	pop	{r4, r5, r6}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop

08002274 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002274:	b470      	push	{r4, r5, r6}
 8002276:	f89d 400c 	ldrb.w	r4, [sp, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 800227a:	b96c      	cbnz	r4, 8002298 <USB_WritePacket+0x24>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800227c:	3303      	adds	r3, #3
 800227e:	089b      	lsrs	r3, r3, #2
    for (i = 0U; i < count32b; i++)
 8002280:	2500      	movs	r5, #0
 8002282:	e007      	b.n	8002294 <USB_WritePacket+0x20>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002284:	eb00 3402 	add.w	r4, r0, r2, lsl #12
 8002288:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800228c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002290:	6026      	str	r6, [r4, #0]
  uint32_t count32b, i;

  if (dma == 0U)
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
 8002292:	3501      	adds	r5, #1
 8002294:	429d      	cmp	r5, r3
 8002296:	d3f5      	bcc.n	8002284 <USB_WritePacket+0x10>
      pSrc++;
    }
  }

  return HAL_OK;
}
 8002298:	2000      	movs	r0, #0
 800229a:	bc70      	pop	{r4, r5, r6}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a2:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80022a4:	780c      	ldrb	r4, [r1, #0]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80022a6:	784b      	ldrb	r3, [r1, #1]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f040 80ab 	bne.w	8002404 <USB_EPStartXfer+0x164>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80022ae:	694b      	ldr	r3, [r1, #20]
 80022b0:	b9b3      	cbnz	r3, 80022e0 <USB_EPStartXfer+0x40>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80022b2:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80022b6:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80022ba:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80022be:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80022c2:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80022c6:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80022ca:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80022ce:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80022d2:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80022d6:	0ced      	lsrs	r5, r5, #19
 80022d8:	04ed      	lsls	r5, r5, #19
 80022da:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
 80022de:	e032      	b.n	8002346 <USB_EPStartXfer+0xa6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80022e0:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80022e4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80022e8:	0ced      	lsrs	r5, r5, #19
 80022ea:	04ed      	lsls	r5, r5, #19
 80022ec:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80022f0:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80022f4:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80022f8:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80022fc:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002300:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8002304:	694d      	ldr	r5, [r1, #20]
 8002306:	688e      	ldr	r6, [r1, #8]
 8002308:	4435      	add	r5, r6
 800230a:	3d01      	subs	r5, #1
 800230c:	fbb5 f5f6 	udiv	r5, r5, r6
 8002310:	4e65      	ldr	r6, [pc, #404]	; (80024a8 <USB_EPStartXfer+0x208>)
 8002312:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8002316:	433d      	orrs	r5, r7
 8002318:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800231c:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8002320:	694d      	ldr	r5, [r1, #20]
 8002322:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002326:	4335      	orrs	r5, r6
 8002328:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800232c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);

      if (ep->type == EP_TYPE_ISOC)
 8002330:	78cd      	ldrb	r5, [r1, #3]
 8002332:	2d01      	cmp	r5, #1
 8002334:	d107      	bne.n	8002346 <USB_EPStartXfer+0xa6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002336:	691d      	ldr	r5, [r3, #16]
 8002338:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800233c:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800233e:	691d      	ldr	r5, [r3, #16]
 8002340:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002344:	611d      	str	r5, [r3, #16]
      }
    }

    if (dma == 1U)
 8002346:	2a01      	cmp	r2, #1
 8002348:	d127      	bne.n	800239a <USB_EPStartXfer+0xfa>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800234a:	690b      	ldr	r3, [r1, #16]
 800234c:	b11b      	cbz	r3, 8002356 <USB_EPStartXfer+0xb6>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800234e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002352:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
      }

      if (ep->type == EP_TYPE_ISOC)
 8002356:	78cb      	ldrb	r3, [r1, #3]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d115      	bne.n	8002388 <USB_EPStartXfer+0xe8>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800235c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002360:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002364:	d108      	bne.n	8002378 <USB_EPStartXfer+0xd8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002366:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800236a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800236e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002372:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 8002376:	e007      	b.n	8002388 <USB_EPStartXfer+0xe8>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002378:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800237c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002388:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800238c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002390:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002394:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8002398:	e083      	b.n	80024a2 <USB_EPStartXfer+0x202>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800239a:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800239e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80023a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80023a6:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900

      if (ep->type != EP_TYPE_ISOC)
 80023aa:	78cb      	ldrb	r3, [r1, #3]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d00e      	beq.n	80023ce <USB_EPStartXfer+0x12e>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80023b0:	694b      	ldr	r3, [r1, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d075      	beq.n	80024a2 <USB_EPStartXfer+0x202>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80023b6:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80023ba:	780b      	ldrb	r3, [r1, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	2201      	movs	r2, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	4323      	orrs	r3, r4
 80023c8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80023cc:	e069      	b.n	80024a2 <USB_EPStartXfer+0x202>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80023ce:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80023d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023d6:	d106      	bne.n	80023e6 <USB_EPStartXfer+0x146>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80023d8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80023dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023e0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 80023e4:	e005      	b.n	80023f2 <USB_EPStartXfer+0x152>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80023e6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80023ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ee:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 80023f2:	4614      	mov	r4, r2
 80023f4:	460b      	mov	r3, r1
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80023f6:	68c9      	ldr	r1, [r1, #12]
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	8a9b      	ldrh	r3, [r3, #20]
 80023fc:	9400      	str	r4, [sp, #0]
 80023fe:	f7ff ff39 	bl	8002274 <USB_WritePacket>
 8002402:	e04e      	b.n	80024a2 <USB_EPStartXfer+0x202>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002404:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002408:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800240c:	691d      	ldr	r5, [r3, #16]
 800240e:	0ced      	lsrs	r5, r5, #19
 8002410:	04ed      	lsls	r5, r5, #19
 8002412:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002414:	691d      	ldr	r5, [r3, #16]
 8002416:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800241a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800241e:	611d      	str	r5, [r3, #16]

    if (ep->xfer_len == 0U)
 8002420:	694d      	ldr	r5, [r1, #20]
 8002422:	b955      	cbnz	r5, 800243a <USB_EPStartXfer+0x19a>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002424:	691e      	ldr	r6, [r3, #16]
 8002426:	688d      	ldr	r5, [r1, #8]
 8002428:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800242c:	4335      	orrs	r5, r6
 800242e:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002430:	691d      	ldr	r5, [r3, #16]
 8002432:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002436:	611d      	str	r5, [r3, #16]
 8002438:	e013      	b.n	8002462 <USB_EPStartXfer+0x1c2>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800243a:	688e      	ldr	r6, [r1, #8]
 800243c:	4435      	add	r5, r6
 800243e:	3d01      	subs	r5, #1
 8002440:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002444:	691f      	ldr	r7, [r3, #16]
 8002446:	4e18      	ldr	r6, [pc, #96]	; (80024a8 <USB_EPStartXfer+0x208>)
 8002448:	ea06 46c5 	and.w	r6, r6, r5, lsl #19
 800244c:	433e      	orrs	r6, r7
 800244e:	611e      	str	r6, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002450:	691f      	ldr	r7, [r3, #16]
 8002452:	688e      	ldr	r6, [r1, #8]
 8002454:	b2ad      	uxth	r5, r5
 8002456:	fb06 f505 	mul.w	r5, r6, r5
 800245a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800245e:	433d      	orrs	r5, r7
 8002460:	611d      	str	r5, [r3, #16]
    }

    if (dma == 1U)
 8002462:	2a01      	cmp	r2, #1
 8002464:	d102      	bne.n	800246c <USB_EPStartXfer+0x1cc>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002466:	68ca      	ldr	r2, [r1, #12]
 8002468:	b102      	cbz	r2, 800246c <USB_EPStartXfer+0x1cc>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800246a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800246c:	78cb      	ldrb	r3, [r1, #3]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d111      	bne.n	8002496 <USB_EPStartXfer+0x1f6>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002472:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002476:	f413 7f80 	tst.w	r3, #256	; 0x100
 800247a:	d106      	bne.n	800248a <USB_EPStartXfer+0x1ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800247c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002484:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8002488:	e005      	b.n	8002496 <USB_EPStartXfer+0x1f6>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800248a:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800248e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002492:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002496:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800249a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800249e:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  }

  return HAL_OK;
}
 80024a2:	2000      	movs	r0, #0
 80024a4:	b003      	add	sp, #12
 80024a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a8:	1ff80000 	.word	0x1ff80000

080024ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80024ac:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80024ae:	3203      	adds	r2, #3
 80024b0:	0892      	lsrs	r2, r2, #2

  for (i = 0U; i < count32b; i++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	e005      	b.n	80024c2 <USB_ReadPacket+0x16>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80024b6:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80024ba:	6824      	ldr	r4, [r4, #0]
 80024bc:	f841 4b04 	str.w	r4, [r1], #4
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
 80024c0:	3301      	adds	r3, #1
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d3f7      	bcc.n	80024b6 <USB_ReadPacket+0xa>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
    pDest++;
  }

  return ((void *)pDest);
}
 80024c6:	4608      	mov	r0, r1
 80024c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <USB_EPSetStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80024d0:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 80024d2:	784a      	ldrb	r2, [r1, #1]
 80024d4:	2a01      	cmp	r2, #1
 80024d6:	d113      	bne.n	8002500 <USB_EPSetStall+0x30>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80024d8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80024dc:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	db06      	blt.n	80024f2 <USB_EPSetStall+0x22>
 80024e4:	b12b      	cbz	r3, 80024f2 <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80024e6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80024ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024ee:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80024f2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80024f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024fa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80024fe:	e012      	b.n	8002526 <USB_EPSetStall+0x56>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002500:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002504:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002508:	2a00      	cmp	r2, #0
 800250a:	db06      	blt.n	800251a <USB_EPSetStall+0x4a>
 800250c:	b12b      	cbz	r3, 800251a <USB_EPSetStall+0x4a>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800250e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002516:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800251a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800251e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002522:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8002526:	2000      	movs	r0, #0
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <USB_EPClearStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800252c:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 800252e:	784a      	ldrb	r2, [r1, #1]
 8002530:	2a01      	cmp	r2, #1
 8002532:	d113      	bne.n	800255c <USB_EPClearStall+0x30>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002534:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002538:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800253c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002540:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002544:	78cb      	ldrb	r3, [r1, #3]
 8002546:	3b02      	subs	r3, #2
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d819      	bhi.n	8002582 <USB_EPClearStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800254e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002556:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800255a:	e012      	b.n	8002582 <USB_EPClearStall+0x56>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800255c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002560:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002564:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002568:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800256c:	78cb      	ldrb	r3, [r1, #3]
 800256e:	3b02      	subs	r3, #2
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d805      	bhi.n	8002582 <USB_EPClearStall+0x56>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002576:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
  }
  return HAL_OK;
}
 8002582:	2000      	movs	r0, #0
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop

08002588 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002588:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800258c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002590:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002594:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002598:	0109      	lsls	r1, r1, #4
 800259a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800259e:	4319      	orrs	r1, r3
 80025a0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800

  return HAL_OK;
}
 80025a4:	2000      	movs	r0, #0
 80025a6:	4770      	bx	lr

080025a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80025a8:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80025aa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80025ae:	f023 0302 	bic.w	r3, r3, #2
 80025b2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80025b6:	2003      	movs	r0, #3
 80025b8:	f000 fefe 	bl	80033b8 <HAL_Delay>

  return HAL_OK;
}
 80025bc:	2000      	movs	r0, #0
 80025be:	bd08      	pop	{r3, pc}

080025c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80025c0:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80025c2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80025c6:	f043 0302 	orr.w	r3, r3, #2
 80025ca:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80025ce:	2003      	movs	r0, #3
 80025d0:	f000 fef2 	bl	80033b8 <HAL_Delay>

  return HAL_OK;
}
 80025d4:	2000      	movs	r0, #0
 80025d6:	bd08      	pop	{r3, pc}

080025d8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80025d8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80025da:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 80025dc:	4010      	ands	r0, r2
 80025de:	4770      	bx	lr

080025e0 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80025e0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80025e4:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
 80025ec:	0c00      	lsrs	r0, r0, #16
 80025ee:	4770      	bx	lr

080025f0 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80025f0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80025f4:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
 80025fc:	b280      	uxth	r0, r0
 80025fe:	4770      	bx	lr

08002600 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002600:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002604:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002608:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800260c:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 800260e:	4010      	ands	r0, r2
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop

08002614 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8002614:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8002616:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800261a:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800261e:	f001 030f 	and.w	r3, r1, #15
 8002622:	fa22 f303 	lsr.w	r3, r2, r3
 8002626:	01db      	lsls	r3, r3, #7
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800262c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8002630:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002634:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
}
 8002636:	4018      	ands	r0, r3
 8002638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8002640:	6940      	ldr	r0, [r0, #20]
}
 8002642:	f000 0001 	and.w	r0, r0, #1
 8002646:	4770      	bx	lr

08002648 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002648:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800264c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002650:	f023 0307 	bic.w	r3, r3, #7
 8002654:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002658:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	f002 0206 	and.w	r2, r2, #6
 8002662:	2a04      	cmp	r2, #4
 8002664:	d105      	bne.n	8002672 <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002666:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800266a:	f042 0203 	orr.w	r2, r2, #3
 800266e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002678:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 800267a:	2000      	movs	r0, #0
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop

08002680 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002680:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002682:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <USB_EP0_OutStart+0x58>)
 8002686:	429c      	cmp	r4, r3
 8002688:	d903      	bls.n	8002692 <USB_EP0_OutStart+0x12>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800268a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800268e:	2b00      	cmp	r3, #0
 8002690:	db1e      	blt.n	80026d0 <USB_EP0_OutStart+0x50>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002692:	2400      	movs	r4, #0
 8002694:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002698:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800269c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80026a0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80026a4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80026a8:	f044 0418 	orr.w	r4, r4, #24
 80026ac:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80026b0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80026b4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80026b8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
 80026bc:	2901      	cmp	r1, #1
 80026be:	d107      	bne.n	80026d0 <USB_EP0_OutStart+0x50>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80026c0:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80026c4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80026c8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80026cc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 80026d0:	2000      	movs	r0, #0
 80026d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	4f54300a 	.word	0x4f54300a

080026dc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026dc:	2800      	cmp	r0, #0
 80026de:	f000 81d7 	beq.w	8002a90 <HAL_RCC_OscConfig+0x3b4>
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e2:	b570      	push	{r4, r5, r6, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e8:	6803      	ldr	r3, [r0, #0]
 80026ea:	f013 0f01 	tst.w	r3, #1
 80026ee:	d05a      	beq.n	80027a6 <HAL_RCC_OscConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026f0:	4ba0      	ldr	r3, [pc, #640]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d00a      	beq.n	8002712 <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fc:	4b9d      	ldr	r3, [pc, #628]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002704:	2b08      	cmp	r3, #8
 8002706:	d10d      	bne.n	8002724 <HAL_RCC_OscConfig+0x48>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002708:	4b9a      	ldr	r3, [pc, #616]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002710:	d008      	beq.n	8002724 <HAL_RCC_OscConfig+0x48>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002712:	4b98      	ldr	r3, [pc, #608]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800271a:	d044      	beq.n	80027a6 <HAL_RCC_OscConfig+0xca>
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d141      	bne.n	80027a6 <HAL_RCC_OscConfig+0xca>
 8002722:	e1b7      	b.n	8002a94 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	6863      	ldr	r3, [r4, #4]
 8002726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
 800272c:	4a91      	ldr	r2, [pc, #580]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800272e:	6813      	ldr	r3, [r2, #0]
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0x88>
 8002738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800273c:	d109      	bne.n	8002752 <HAL_RCC_OscConfig+0x76>
 800273e:	4b8d      	ldr	r3, [pc, #564]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x88>
 8002752:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002762:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002764:	6863      	ldr	r3, [r4, #4]
 8002766:	b17b      	cbz	r3, 8002788 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f000 fe20 	bl	80033ac <HAL_GetTick>
 800276c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	e005      	b.n	800277c <HAL_RCC_OscConfig+0xa0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002770:	f000 fe1c 	bl	80033ac <HAL_GetTick>
 8002774:	1b40      	subs	r0, r0, r5
 8002776:	2864      	cmp	r0, #100	; 0x64
 8002778:	f200 818e 	bhi.w	8002a98 <HAL_RCC_OscConfig+0x3bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277c:	4b7d      	ldr	r3, [pc, #500]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002784:	d0f4      	beq.n	8002770 <HAL_RCC_OscConfig+0x94>
 8002786:	e00e      	b.n	80027a6 <HAL_RCC_OscConfig+0xca>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f000 fe10 	bl	80033ac <HAL_GetTick>
 800278c:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e005      	b.n	800279c <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f000 fe0c 	bl	80033ac <HAL_GetTick>
 8002794:	1b40      	subs	r0, r0, r5
 8002796:	2864      	cmp	r0, #100	; 0x64
 8002798:	f200 8180 	bhi.w	8002a9c <HAL_RCC_OscConfig+0x3c0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279c:	4b75      	ldr	r3, [pc, #468]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027a4:	d1f4      	bne.n	8002790 <HAL_RCC_OscConfig+0xb4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	f013 0f02 	tst.w	r3, #2
 80027ac:	d050      	beq.n	8002850 <HAL_RCC_OscConfig+0x174>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ae:	4b71      	ldr	r3, [pc, #452]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f013 0f0c 	tst.w	r3, #12
 80027b6:	d00a      	beq.n	80027ce <HAL_RCC_OscConfig+0xf2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b8:	4b6e      	ldr	r3, [pc, #440]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d116      	bne.n	80027f2 <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c4:	4b6b      	ldr	r3, [pc, #428]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80027cc:	d111      	bne.n	80027f2 <HAL_RCC_OscConfig+0x116>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ce:	4b69      	ldr	r3, [pc, #420]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f013 0f02 	tst.w	r3, #2
 80027d6:	d003      	beq.n	80027e0 <HAL_RCC_OscConfig+0x104>
 80027d8:	68e3      	ldr	r3, [r4, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	f040 8160 	bne.w	8002aa0 <HAL_RCC_OscConfig+0x3c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4a64      	ldr	r2, [pc, #400]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027e8:	6921      	ldr	r1, [r4, #16]
 80027ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027ee:	6013      	str	r3, [r2, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f0:	e02e      	b.n	8002850 <HAL_RCC_OscConfig+0x174>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027f2:	68e3      	ldr	r3, [r4, #12]
 80027f4:	b1d3      	cbz	r3, 800282c <HAL_RCC_OscConfig+0x150>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f6:	2201      	movs	r2, #1
 80027f8:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_RCC_OscConfig+0x29c>)
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f000 fdd6 	bl	80033ac <HAL_GetTick>
 8002800:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	e005      	b.n	8002810 <HAL_RCC_OscConfig+0x134>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002804:	f000 fdd2 	bl	80033ac <HAL_GetTick>
 8002808:	1b40      	subs	r0, r0, r5
 800280a:	2802      	cmp	r0, #2
 800280c:	f200 814a 	bhi.w	8002aa4 <HAL_RCC_OscConfig+0x3c8>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f013 0f02 	tst.w	r3, #2
 8002818:	d0f4      	beq.n	8002804 <HAL_RCC_OscConfig+0x128>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4a56      	ldr	r2, [pc, #344]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800281c:	6813      	ldr	r3, [r2, #0]
 800281e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002822:	6921      	ldr	r1, [r4, #16]
 8002824:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e011      	b.n	8002850 <HAL_RCC_OscConfig+0x174>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282c:	2200      	movs	r2, #0
 800282e:	4b52      	ldr	r3, [pc, #328]	; (8002978 <HAL_RCC_OscConfig+0x29c>)
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f000 fdbb 	bl	80033ac <HAL_GetTick>
 8002836:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002838:	e005      	b.n	8002846 <HAL_RCC_OscConfig+0x16a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283a:	f000 fdb7 	bl	80033ac <HAL_GetTick>
 800283e:	1b40      	subs	r0, r0, r5
 8002840:	2802      	cmp	r0, #2
 8002842:	f200 8131 	bhi.w	8002aa8 <HAL_RCC_OscConfig+0x3cc>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f013 0f02 	tst.w	r3, #2
 800284e:	d1f4      	bne.n	800283a <HAL_RCC_OscConfig+0x15e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	f013 0f08 	tst.w	r3, #8
 8002856:	d026      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002858:	6963      	ldr	r3, [r4, #20]
 800285a:	b193      	cbz	r3, 8002882 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285c:	2201      	movs	r2, #1
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_OscConfig+0x2a0>)
 8002860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f000 fda3 	bl	80033ac <HAL_GetTick>
 8002866:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002868:	e005      	b.n	8002876 <HAL_RCC_OscConfig+0x19a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286a:	f000 fd9f 	bl	80033ac <HAL_GetTick>
 800286e:	1b40      	subs	r0, r0, r5
 8002870:	2802      	cmp	r0, #2
 8002872:	f200 811b 	bhi.w	8002aac <HAL_RCC_OscConfig+0x3d0>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287a:	f013 0f02 	tst.w	r3, #2
 800287e:	d0f4      	beq.n	800286a <HAL_RCC_OscConfig+0x18e>
 8002880:	e011      	b.n	80028a6 <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002882:	2200      	movs	r2, #0
 8002884:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_RCC_OscConfig+0x2a0>)
 8002886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f000 fd90 	bl	80033ac <HAL_GetTick>
 800288c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288e:	e005      	b.n	800289c <HAL_RCC_OscConfig+0x1c0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002890:	f000 fd8c 	bl	80033ac <HAL_GetTick>
 8002894:	1b40      	subs	r0, r0, r5
 8002896:	2802      	cmp	r0, #2
 8002898:	f200 810a 	bhi.w	8002ab0 <HAL_RCC_OscConfig+0x3d4>

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b35      	ldr	r3, [pc, #212]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a0:	f013 0f02 	tst.w	r3, #2
 80028a4:	d1f4      	bne.n	8002890 <HAL_RCC_OscConfig+0x1b4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	f013 0f04 	tst.w	r3, #4
 80028ac:	d07d      	beq.n	80029aa <HAL_RCC_OscConfig+0x2ce>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80028b6:	d10d      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80028be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028d0:	2501      	movs	r5, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x1fa>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d4:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_OscConfig+0x2a4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028de:	d113      	bne.n	8002908 <HAL_RCC_OscConfig+0x22c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <HAL_RCC_OscConfig+0x2a4>)
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f000 fd5f 	bl	80033ac <HAL_GetTick>
 80028ee:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	e005      	b.n	80028fe <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f2:	f000 fd5b 	bl	80033ac <HAL_GetTick>
 80028f6:	1b80      	subs	r0, r0, r6
 80028f8:	2802      	cmp	r0, #2
 80028fa:	f200 80db 	bhi.w	8002ab4 <HAL_RCC_OscConfig+0x3d8>
      SET_BIT(PWR->CR, PWR_CR_DBP);

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_OscConfig+0x2a4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002906:	d0f4      	beq.n	80028f2 <HAL_RCC_OscConfig+0x216>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	68a3      	ldr	r3, [r4, #8]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <HAL_RCC_OscConfig+0x23e>
 800290e:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002910:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	e014      	b.n	8002944 <HAL_RCC_OscConfig+0x268>
 800291a:	2b05      	cmp	r3, #5
 800291c:	d109      	bne.n	8002932 <HAL_RCC_OscConfig+0x256>
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002922:	f042 0204 	orr.w	r2, r2, #4
 8002926:	671a      	str	r2, [r3, #112]	; 0x70
 8002928:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	671a      	str	r2, [r3, #112]	; 0x70
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x268>
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	671a      	str	r2, [r3, #112]	; 0x70
 800293c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800293e:	f022 0204 	bic.w	r2, r2, #4
 8002942:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002944:	68a3      	ldr	r3, [r4, #8]
 8002946:	b18b      	cbz	r3, 800296c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f000 fd30 	bl	80033ac <HAL_GetTick>
 800294c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	e007      	b.n	8002960 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f000 fd2c 	bl	80033ac <HAL_GetTick>
 8002954:	1b80      	subs	r0, r0, r6
 8002956:	f241 3388 	movw	r3, #5000	; 0x1388
 800295a:	4298      	cmp	r0, r3
 800295c:	f200 80ac 	bhi.w	8002ab8 <HAL_RCC_OscConfig+0x3dc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	f013 0f02 	tst.w	r3, #2
 8002968:	d0f2      	beq.n	8002950 <HAL_RCC_OscConfig+0x274>
 800296a:	e018      	b.n	800299e <HAL_RCC_OscConfig+0x2c2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f000 fd1e 	bl	80033ac <HAL_GetTick>
 8002970:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002972:	e00f      	b.n	8002994 <HAL_RCC_OscConfig+0x2b8>
 8002974:	40023800 	.word	0x40023800
 8002978:	42470000 	.word	0x42470000
 800297c:	42470e80 	.word	0x42470e80
 8002980:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f000 fd12 	bl	80033ac <HAL_GetTick>
 8002988:	1b80      	subs	r0, r0, r6
 800298a:	f241 3388 	movw	r3, #5000	; 0x1388
 800298e:	4298      	cmp	r0, r3
 8002990:	f200 8094 	bhi.w	8002abc <HAL_RCC_OscConfig+0x3e0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002994:	4b55      	ldr	r3, [pc, #340]	; (8002aec <HAL_RCC_OscConfig+0x410>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	f013 0f02 	tst.w	r3, #2
 800299c:	d1f2      	bne.n	8002984 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299e:	b125      	cbz	r5, 80029aa <HAL_RCC_OscConfig+0x2ce>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_OscConfig+0x410>)
 80029a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029aa:	69a3      	ldr	r3, [r4, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8087 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x3e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b2:	4a4e      	ldr	r2, [pc, #312]	; (8002aec <HAL_RCC_OscConfig+0x410>)
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	f002 020c 	and.w	r2, r2, #12
 80029ba:	2a08      	cmp	r2, #8
 80029bc:	d048      	beq.n	8002a50 <HAL_RCC_OscConfig+0x374>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d133      	bne.n	8002a2a <HAL_RCC_OscConfig+0x34e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	2200      	movs	r2, #0
 80029c4:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x414>)
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f000 fcf0 	bl	80033ac <HAL_GetTick>
 80029cc:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e004      	b.n	80029da <HAL_RCC_OscConfig+0x2fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f000 fcec 	bl	80033ac <HAL_GetTick>
 80029d4:	1b40      	subs	r0, r0, r5
 80029d6:	2802      	cmp	r0, #2
 80029d8:	d874      	bhi.n	8002ac4 <HAL_RCC_OscConfig+0x3e8>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_RCC_OscConfig+0x410>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029e2:	d1f5      	bne.n	80029d0 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e4:	69e2      	ldr	r2, [r4, #28]
 80029e6:	6a23      	ldr	r3, [r4, #32]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029ec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80029f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029f2:	0852      	lsrs	r2, r2, #1
 80029f4:	3a01      	subs	r2, #1
 80029f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80029fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a00:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <HAL_RCC_OscConfig+0x410>)
 8002a02:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	2201      	movs	r2, #1
 8002a06:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <HAL_RCC_OscConfig+0x414>)
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f000 fccf 	bl	80033ac <HAL_GetTick>
 8002a0e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a10:	e004      	b.n	8002a1c <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a12:	f000 fccb 	bl	80033ac <HAL_GetTick>
 8002a16:	1b00      	subs	r0, r0, r4
 8002a18:	2802      	cmp	r0, #2
 8002a1a:	d855      	bhi.n	8002ac8 <HAL_RCC_OscConfig+0x3ec>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1c:	4b33      	ldr	r3, [pc, #204]	; (8002aec <HAL_RCC_OscConfig+0x410>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a24:	d0f5      	beq.n	8002a12 <HAL_RCC_OscConfig+0x336>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002a26:	2000      	movs	r0, #0
 8002a28:	e05d      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x414>)
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f000 fcbc 	bl	80033ac <HAL_GetTick>
 8002a34:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	e004      	b.n	8002a42 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a38:	f000 fcb8 	bl	80033ac <HAL_GetTick>
 8002a3c:	1b00      	subs	r0, r0, r4
 8002a3e:	2802      	cmp	r0, #2
 8002a40:	d844      	bhi.n	8002acc <HAL_RCC_OscConfig+0x3f0>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_RCC_OscConfig+0x410>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a4a:	d1f5      	bne.n	8002a38 <HAL_RCC_OscConfig+0x35c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	e04a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d03d      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCC_OscConfig+0x410>)
 8002a56:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a58:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002a5c:	69e2      	ldr	r2, [r4, #28]
 8002a5e:	4291      	cmp	r1, r2
 8002a60:	d138      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3f8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a66:	6a21      	ldr	r1, [r4, #32]
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a68:	428a      	cmp	r2, r1
 8002a6a:	d135      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x3fc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002a72:	401a      	ands	r2, r3
 8002a74:	428a      	cmp	r2, r1
 8002a76:	d131      	bne.n	8002adc <HAL_RCC_OscConfig+0x400>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a7e:	428a      	cmp	r2, r1
 8002a80:	d12e      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x404>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a82:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002a86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d02b      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x408>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
        {
          return HAL_ERROR;
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	e02a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002a92:	4770      	bx	lr
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
 8002a96:	e026      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002a98:	2003      	movs	r0, #3
 8002a9a:	e024      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002a9c:	2003      	movs	r0, #3
 8002a9e:	e022      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	e020      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	e01e      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002aa8:	2003      	movs	r0, #3
 8002aaa:	e01c      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002aac:	2003      	movs	r0, #3
 8002aae:	e01a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	e018      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	e016      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002ab8:	2003      	movs	r0, #3
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002abc:	2003      	movs	r0, #3
 8002abe:	e012      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	e010      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	e00e      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002ac8:	2003      	movs	r0, #3
 8002aca:	e00c      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002acc:	2003      	movs	r0, #3
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
        {
          return HAL_ERROR;
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	e006      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
 8002ad8:	2001      	movs	r0, #1
 8002ada:	e004      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
 8002adc:	2001      	movs	r0, #1
 8002ade:	e002      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  return HAL_OK;
 8002ae4:	2000      	movs	r0, #0
}
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd70      	pop	{r4, r5, r6, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	42470060 	.word	0x42470060

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	b538      	push	{r3, r4, r5, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d055      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0xba>
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b06:	482c      	ldr	r0, [pc, #176]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b18:	d020      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x68>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002b22:	00dc      	lsls	r4, r3, #3
 8002b24:	2500      	movs	r5, #0
 8002b26:	0169      	lsls	r1, r5, #5
 8002b28:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 8002b2c:	0160      	lsls	r0, r4, #5
 8002b2e:	1b04      	subs	r4, r0, r4
 8002b30:	eb61 0505 	sbc.w	r5, r1, r5
 8002b34:	01a9      	lsls	r1, r5, #6
 8002b36:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002b3a:	01a0      	lsls	r0, r4, #6
 8002b3c:	1b00      	subs	r0, r0, r4
 8002b3e:	eb61 0105 	sbc.w	r1, r1, r5
 8002b42:	18c0      	adds	r0, r0, r3
 8002b44:	f141 0100 	adc.w	r1, r1, #0
 8002b48:	024b      	lsls	r3, r1, #9
 8002b4a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002b4e:	0244      	lsls	r4, r0, #9
 8002b50:	4620      	mov	r0, r4
 8002b52:	4619      	mov	r1, r3
 8002b54:	2300      	movs	r3, #0
 8002b56:	f7fd fbab 	bl	80002b0 <__aeabi_uldivmod>
 8002b5a:	e01f      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002b64:	00dc      	lsls	r4, r3, #3
 8002b66:	2500      	movs	r5, #0
 8002b68:	0169      	lsls	r1, r5, #5
 8002b6a:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 8002b6e:	0160      	lsls	r0, r4, #5
 8002b70:	1b04      	subs	r4, r0, r4
 8002b72:	eb61 0505 	sbc.w	r5, r1, r5
 8002b76:	01a9      	lsls	r1, r5, #6
 8002b78:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002b7c:	01a0      	lsls	r0, r4, #6
 8002b7e:	1b00      	subs	r0, r0, r4
 8002b80:	eb61 0105 	sbc.w	r1, r1, r5
 8002b84:	18c0      	adds	r0, r0, r3
 8002b86:	f141 0100 	adc.w	r1, r1, #0
 8002b8a:	028b      	lsls	r3, r1, #10
 8002b8c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002b90:	0284      	lsls	r4, r0, #10
 8002b92:	4620      	mov	r0, r4
 8002b94:	4619      	mov	r1, r3
 8002b96:	2300      	movs	r3, #0
 8002b98:	f7fd fb8a 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002ba8:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002bac:	bd38      	pop	{r3, r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bae:	4803      	ldr	r0, [pc, #12]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002bb0:	bd38      	pop	{r3, r4, r5, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	007a1200 	.word	0x007a1200

08002bc0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	f000 8098 	beq.w	8002cf6 <HAL_RCC_ClockConfig+0x136>
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc6:	b570      	push	{r4, r5, r6, lr}
 8002bc8:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bca:	4b52      	ldr	r3, [pc, #328]	; (8002d14 <HAL_RCC_ClockConfig+0x154>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	428b      	cmp	r3, r1
 8002bd4:	d208      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	b2cb      	uxtb	r3, r1
 8002bd8:	4a4e      	ldr	r2, [pc, #312]	; (8002d14 <HAL_RCC_ClockConfig+0x154>)
 8002bda:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bdc:	6813      	ldr	r3, [r2, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	4299      	cmp	r1, r3
 8002be4:	f040 8089 	bne.w	8002cfa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	f013 0f02 	tst.w	r3, #2
 8002bee:	d017      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x60>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	f013 0f04 	tst.w	r3, #4
 8002bf4:	d004      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf6:	4a48      	ldr	r2, [pc, #288]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002bf8:	6893      	ldr	r3, [r2, #8]
 8002bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	f013 0f08 	tst.w	r3, #8
 8002c06:	d004      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x52>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c08:	4a43      	ldr	r2, [pc, #268]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002c0a:	6893      	ldr	r3, [r2, #8]
 8002c0c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c10:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c12:	4841      	ldr	r0, [pc, #260]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002c14:	6883      	ldr	r3, [r0, #8]
 8002c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c1a:	68a3      	ldr	r3, [r4, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	6083      	str	r3, [r0, #8]
 8002c20:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	f013 0f01 	tst.w	r3, #1
 8002c28:	d02f      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2a:	6862      	ldr	r2, [r4, #4]
 8002c2c:	2a01      	cmp	r2, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x7c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c38:	d10e      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x98>
 8002c3a:	e060      	b.n	8002cfe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3c:	1e93      	subs	r3, r2, #2
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d805      	bhi.n	8002c4e <HAL_RCC_ClockConfig+0x8e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c42:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x98>
 8002c4c:	e059      	b.n	8002d02 <HAL_RCC_ClockConfig+0x142>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f013 0f02 	tst.w	r3, #2
 8002c56:	d056      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x146>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c58:	492f      	ldr	r1, [pc, #188]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002c5a:	688b      	ldr	r3, [r1, #8]
 8002c5c:	f023 0303 	bic.w	r3, r3, #3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c64:	f000 fba2 	bl	80033ac <HAL_GetTick>
 8002c68:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e006      	b.n	8002c7a <HAL_RCC_ClockConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f000 fb9e 	bl	80033ac <HAL_GetTick>
 8002c70:	1b80      	subs	r0, r0, r6
 8002c72:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c76:	4298      	cmp	r0, r3
 8002c78:	d847      	bhi.n	8002d0a <HAL_RCC_ClockConfig+0x14a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	6862      	ldr	r2, [r4, #4]
 8002c84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_RCC_ClockConfig+0x154>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	429d      	cmp	r5, r3
 8002c94:	d207      	bcs.n	8002ca6 <HAL_RCC_ClockConfig+0xe6>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	b2ea      	uxtb	r2, r5
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCC_ClockConfig+0x154>)
 8002c9a:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	429d      	cmp	r5, r3
 8002ca4:	d133      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x14e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	f013 0f04 	tst.w	r3, #4
 8002cac:	d006      	beq.n	8002cbc <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cae:	491a      	ldr	r1, [pc, #104]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002cb0:	688b      	ldr	r3, [r1, #8]
 8002cb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cb6:	68e3      	ldr	r3, [r4, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	f013 0f08 	tst.w	r3, #8
 8002cc2:	d007      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002cc6:	6893      	ldr	r3, [r2, #8]
 8002cc8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ccc:	6921      	ldr	r1, [r4, #16]
 8002cce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cd2:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd4:	f7ff ff0e 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_RCC_ClockConfig+0x158>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_RCC_ClockConfig+0x15c>)
 8002ce2:	5cd3      	ldrb	r3, [r2, r3]
 8002ce4:	40d8      	lsrs	r0, r3
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x160>)
 8002ce8:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_RCC_ClockConfig+0x164>)
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	f003 fbb7 	bl	8006460 <HAL_InitTick>

  return HAL_OK;
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 8002cf6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002cf8:	4770      	bx	lr

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8002cfe:	2001      	movs	r0, #1
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 8002d02:	2001      	movs	r0, #1
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 8002d06:	2001      	movs	r0, #1
 8002d08:	bd70      	pop	{r4, r5, r6, pc}

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8002d0a:	2003      	movs	r0, #3
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8002d0e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002d10:	bd70      	pop	{r4, r5, r6, pc}
 8002d12:	bf00      	nop
 8002d14:	40023c00 	.word	0x40023c00
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	08007f64 	.word	0x08007f64
 8002d20:	20000068 	.word	0x20000068
 8002d24:	20000060 	.word	0x20000060

08002d28 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002d28:	4b01      	ldr	r3, [pc, #4]	; (8002d30 <HAL_RCC_GetHCLKFreq+0x8>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000068 	.word	0x20000068

08002d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d34:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d36:	f7ff fff7 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002d42:	4a03      	ldr	r2, [pc, #12]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002d44:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d46:	40d8      	lsrs	r0, r3
 8002d48:	bd08      	pop	{r3, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	08007f74 	.word	0x08007f74

08002d54 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d54:	230f      	movs	r3, #15
 8002d56:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_GetClockConfig+0x34>)
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	f002 0203 	and.w	r2, r2, #3
 8002d60:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002d68:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002d70:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002d7a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_GetClockConfig+0x38>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	600b      	str	r3, [r1, #0]
 8002d86:	4770      	bx	lr
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40023c00 	.word	0x40023c00

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d94:	b082      	sub	sp, #8
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	e0c1      	b.n	8002f1e <HAL_GPIO_Init+0x18e>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9e:	680c      	ldr	r4, [r1, #0]
 8002da0:	ea02 0504 	and.w	r5, r2, r4

    if(iocurrent == ioposition)
 8002da4:	42aa      	cmp	r2, r5
 8002da6:	f040 80b9 	bne.w	8002f1c <HAL_GPIO_Init+0x18c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002daa:	684c      	ldr	r4, [r1, #4]
 8002dac:	1e66      	subs	r6, r4, #1
 8002dae:	2e01      	cmp	r6, #1
 8002db0:	d903      	bls.n	8002dba <HAL_GPIO_Init+0x2a>
 8002db2:	2c11      	cmp	r4, #17
 8002db4:	d001      	beq.n	8002dba <HAL_GPIO_Init+0x2a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db6:	2c12      	cmp	r4, #18
 8002db8:	d115      	bne.n	8002de6 <HAL_GPIO_Init+0x56>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dbc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002dc0:	2603      	movs	r6, #3
 8002dc2:	fa06 f60e 	lsl.w	r6, r6, lr
 8002dc6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dca:	68cc      	ldr	r4, [r1, #12]
 8002dcc:	fa04 f40e 	lsl.w	r4, r4, lr
 8002dd0:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002dd2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd6:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dda:	684c      	ldr	r4, [r1, #4]
 8002ddc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002de0:	409c      	lsls	r4, r3
 8002de2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002de4:	6042      	str	r2, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002de6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002de8:	005f      	lsls	r7, r3, #1
 8002dea:	2403      	movs	r4, #3
 8002dec:	40bc      	lsls	r4, r7
 8002dee:	43e4      	mvns	r4, r4
 8002df0:	ea06 0204 	and.w	r2, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df4:	688e      	ldr	r6, [r1, #8]
 8002df6:	40be      	lsls	r6, r7
 8002df8:	4316      	orrs	r6, r2
      GPIOx->PUPDR = temp;
 8002dfa:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dfc:	684a      	ldr	r2, [r1, #4]
 8002dfe:	2a02      	cmp	r2, #2
 8002e00:	d001      	beq.n	8002e06 <HAL_GPIO_Init+0x76>
 8002e02:	2a12      	cmp	r2, #18
 8002e04:	d113      	bne.n	8002e2e <HAL_GPIO_Init+0x9e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e06:	08de      	lsrs	r6, r3, #3
 8002e08:	3608      	adds	r6, #8
 8002e0a:	f850 8026 	ldr.w	r8, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0e:	f003 0207 	and.w	r2, r3, #7
 8002e12:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f20e 	lsl.w	r2, r2, lr
 8002e1c:	ea28 0c02 	bic.w	ip, r8, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e20:	690a      	ldr	r2, [r1, #16]
 8002e22:	fa02 f20e 	lsl.w	r2, r2, lr
 8002e26:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3U] = temp;
 8002e2a:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e30:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e32:	684a      	ldr	r2, [r1, #4]
 8002e34:	f002 0403 	and.w	r4, r2, #3
 8002e38:	fa04 f207 	lsl.w	r2, r4, r7
 8002e3c:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 8002e3e:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e40:	684a      	ldr	r2, [r1, #4]
 8002e42:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002e46:	d069      	beq.n	8002f1c <HAL_GPIO_Init+0x18c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e48:	2200      	movs	r2, #0
 8002e4a:	9201      	str	r2, [sp, #4]
 8002e4c:	4a37      	ldr	r2, [pc, #220]	; (8002f2c <HAL_GPIO_Init+0x19c>)
 8002e4e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002e50:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002e54:	6454      	str	r4, [r2, #68]	; 0x44
 8002e56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e58:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e5c:	9201      	str	r2, [sp, #4]
 8002e5e:	9a01      	ldr	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e60:	089e      	lsrs	r6, r3, #2
 8002e62:	1cb4      	adds	r4, r6, #2
 8002e64:	4a32      	ldr	r2, [pc, #200]	; (8002f30 <HAL_GPIO_Init+0x1a0>)
 8002e66:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e6a:	f003 0203 	and.w	r2, r3, #3
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	270f      	movs	r7, #15
 8002e72:	4097      	lsls	r7, r2
 8002e74:	ea24 0707 	bic.w	r7, r4, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e78:	4c2e      	ldr	r4, [pc, #184]	; (8002f34 <HAL_GPIO_Init+0x1a4>)
 8002e7a:	42a0      	cmp	r0, r4
 8002e7c:	d011      	beq.n	8002ea2 <HAL_GPIO_Init+0x112>
 8002e7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e82:	42a0      	cmp	r0, r4
 8002e84:	d00f      	beq.n	8002ea6 <HAL_GPIO_Init+0x116>
 8002e86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e8a:	42a0      	cmp	r0, r4
 8002e8c:	d00d      	beq.n	8002eaa <HAL_GPIO_Init+0x11a>
 8002e8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e92:	42a0      	cmp	r0, r4
 8002e94:	d00b      	beq.n	8002eae <HAL_GPIO_Init+0x11e>
 8002e96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e9a:	42a0      	cmp	r0, r4
 8002e9c:	d109      	bne.n	8002eb2 <HAL_GPIO_Init+0x122>
 8002e9e:	2404      	movs	r4, #4
 8002ea0:	e008      	b.n	8002eb4 <HAL_GPIO_Init+0x124>
 8002ea2:	2400      	movs	r4, #0
 8002ea4:	e006      	b.n	8002eb4 <HAL_GPIO_Init+0x124>
 8002ea6:	2401      	movs	r4, #1
 8002ea8:	e004      	b.n	8002eb4 <HAL_GPIO_Init+0x124>
 8002eaa:	2402      	movs	r4, #2
 8002eac:	e002      	b.n	8002eb4 <HAL_GPIO_Init+0x124>
 8002eae:	2403      	movs	r4, #3
 8002eb0:	e000      	b.n	8002eb4 <HAL_GPIO_Init+0x124>
 8002eb2:	2407      	movs	r4, #7
 8002eb4:	fa04 f202 	lsl.w	r2, r4, r2
 8002eb8:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eba:	3602      	adds	r6, #2
 8002ebc:	4c1c      	ldr	r4, [pc, #112]	; (8002f30 <HAL_GPIO_Init+0x1a0>)
 8002ebe:	f844 2026 	str.w	r2, [r4, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_GPIO_Init+0x1a8>)
 8002ec4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	43ea      	mvns	r2, r5
 8002ec8:	ea04 0602 	and.w	r6, r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ecc:	684f      	ldr	r7, [r1, #4]
 8002ece:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002ed2:	d001      	beq.n	8002ed8 <HAL_GPIO_Init+0x148>
        {
          temp |= iocurrent;
 8002ed4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002ed8:	4c17      	ldr	r4, [pc, #92]	; (8002f38 <HAL_GPIO_Init+0x1a8>)
 8002eda:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002edc:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002ede:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee2:	684f      	ldr	r7, [r1, #4]
 8002ee4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002ee8:	d001      	beq.n	8002eee <HAL_GPIO_Init+0x15e>
        {
          temp |= iocurrent;
 8002eea:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002eee:	4c12      	ldr	r4, [pc, #72]	; (8002f38 <HAL_GPIO_Init+0x1a8>)
 8002ef0:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ef8:	684f      	ldr	r7, [r1, #4]
 8002efa:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002efe:	d001      	beq.n	8002f04 <HAL_GPIO_Init+0x174>
        {
          temp |= iocurrent;
 8002f00:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002f04:	4c0c      	ldr	r4, [pc, #48]	; (8002f38 <HAL_GPIO_Init+0x1a8>)
 8002f06:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002f08:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f0c:	684e      	ldr	r6, [r1, #4]
 8002f0e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002f12:	d001      	beq.n	8002f18 <HAL_GPIO_Init+0x188>
        {
          temp |= iocurrent;
 8002f14:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002f18:	4c07      	ldr	r4, [pc, #28]	; (8002f38 <HAL_GPIO_Init+0x1a8>)
 8002f1a:	60e2      	str	r2, [r4, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	f67f af3b 	bls.w	8002d9a <HAL_GPIO_Init+0xa>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8002f24:	b002      	add	sp, #8
 8002f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40013c00 	.word	0x40013c00

08002f3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	b10a      	cbz	r2, 8002f42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3e:	6181      	str	r1, [r0, #24]
 8002f40:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f42:	0409      	lsls	r1, r1, #16
 8002f44:	6181      	str	r1, [r0, #24]
 8002f46:	4770      	bx	lr

08002f48 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f48:	6802      	ldr	r2, [r0, #0]
 8002f4a:	b2d3      	uxtb	r3, r2
 8002f4c:	3b10      	subs	r3, #16
 8002f4e:	490b      	ldr	r1, [pc, #44]	; (8002f7c <DMA_CalcBaseAndBitshift+0x34>)
 8002f50:	fba1 1303 	umull	r1, r3, r1, r3
 8002f54:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f56:	490a      	ldr	r1, [pc, #40]	; (8002f80 <DMA_CalcBaseAndBitshift+0x38>)
 8002f58:	5cc9      	ldrb	r1, [r1, r3]
 8002f5a:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d906      	bls.n	8002f6e <DMA_CalcBaseAndBitshift+0x26>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f60:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002f64:	f022 0203 	bic.w	r2, r2, #3
 8002f68:	3204      	adds	r2, #4
 8002f6a:	6582      	str	r2, [r0, #88]	; 0x58
 8002f6c:	e004      	b.n	8002f78 <DMA_CalcBaseAndBitshift+0x30>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f6e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002f72:	f022 0203 	bic.w	r2, r2, #3
 8002f76:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002f78:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002f7a:	4770      	bx	lr
 8002f7c:	aaaaaaab 	.word	0xaaaaaaab
 8002f80:	08007f5c 	.word	0x08007f5c

08002f84 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f84:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f86:	6982      	ldr	r2, [r0, #24]
 8002f88:	b982      	cbnz	r2, 8002fac <DMA_CheckFifoParam+0x28>
  {
    switch (tmp)
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d008      	beq.n	8002fa0 <DMA_CheckFifoParam+0x1c>
 8002f8e:	b10b      	cbz	r3, 8002f94 <DMA_CheckFifoParam+0x10>
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d12e      	bne.n	8002ff2 <DMA_CheckFifoParam+0x6e>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f96:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002f9a:	d12c      	bne.n	8002ff6 <DMA_CheckFifoParam+0x72>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fa0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002fa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa6:	d028      	beq.n	8002ffa <DMA_CheckFifoParam+0x76>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002fa8:	2000      	movs	r0, #0
 8002faa:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002fb0:	d113      	bne.n	8002fda <DMA_CheckFifoParam+0x56>
  {
    switch (tmp)
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d803      	bhi.n	8002fbe <DMA_CheckFifoParam+0x3a>
 8002fb6:	e8df f003 	tbb	[pc, r3]
 8002fba:	0422      	.short	0x0422
 8002fbc:	0a22      	.short	0x0a22
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002fc4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002fc8:	d11b      	bne.n	8003002 <DMA_CheckFifoParam+0x7e>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2000      	movs	r0, #0
 8002fcc:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fd4:	d017      	beq.n	8003006 <DMA_CheckFifoParam+0x82>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	4770      	bx	lr
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d915      	bls.n	800300a <DMA_CheckFifoParam+0x86>
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d001      	beq.n	8002fe6 <DMA_CheckFifoParam+0x62>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002fe8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002fec:	d10f      	bne.n	800300e <DMA_CheckFifoParam+0x8a>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2000      	movs	r0, #0
 8002ff0:	4770      	bx	lr
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	4770      	bx	lr
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ffe:	2001      	movs	r0, #1
 8003000:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8003002:	2001      	movs	r0, #1
 8003004:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 8003006:	2001      	movs	r0, #1
 8003008:	4770      	bx	lr
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800300a:	2001      	movs	r0, #1
 800300c:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 800300e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop

08003014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003018:	f000 f9c8 	bl	80033ac <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800301c:	2c00      	cmp	r4, #0
 800301e:	d05c      	beq.n	80030da <HAL_DMA_Init+0xc6>
 8003020:	4605      	mov	r5, r0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003022:	2300      	movs	r3, #0
 8003024:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003028:	2302      	movs	r3, #2
 800302a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800302e:	6822      	ldr	r2, [r4, #0]
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003038:	e00a      	b.n	8003050 <HAL_DMA_Init+0x3c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303a:	f000 f9b7 	bl	80033ac <HAL_GetTick>
 800303e:	1b40      	subs	r0, r0, r5
 8003040:	2805      	cmp	r0, #5
 8003042:	d905      	bls.n	8003050 <HAL_DMA_Init+0x3c>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003044:	2320      	movs	r3, #32
 8003046:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003048:	2003      	movs	r0, #3
 800304a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800304e:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	f012 0f01 	tst.w	r2, #1
 8003058:	d1ef      	bne.n	800303a <HAL_DMA_Init+0x26>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800305a:	681a      	ldr	r2, [r3, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800305c:	4820      	ldr	r0, [pc, #128]	; (80030e0 <HAL_DMA_Init+0xcc>)
 800305e:	4010      	ands	r0, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003060:	6861      	ldr	r1, [r4, #4]
 8003062:	68a2      	ldr	r2, [r4, #8]
 8003064:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003066:	68e2      	ldr	r2, [r4, #12]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003068:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	6922      	ldr	r2, [r4, #16]
 800306c:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306e:	6962      	ldr	r2, [r4, #20]
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	69a2      	ldr	r2, [r4, #24]
 8003074:	4311      	orrs	r1, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003076:	69e2      	ldr	r2, [r4, #28]
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003078:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800307a:	6a21      	ldr	r1, [r4, #32]
 800307c:	4311      	orrs	r1, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307e:	ea40 0201 	orr.w	r2, r0, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003082:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003084:	2904      	cmp	r1, #4
 8003086:	d103      	bne.n	8003090 <HAL_DMA_Init+0x7c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003088:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800308a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800308c:	4301      	orrs	r1, r0
 800308e:	430a      	orrs	r2, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003090:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003092:	6826      	ldr	r6, [r4, #0]
 8003094:	6975      	ldr	r5, [r6, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003096:	f025 0507 	bic.w	r5, r5, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800309a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800309c:	431d      	orrs	r5, r3

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d10d      	bne.n	80030be <HAL_DMA_Init+0xaa>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030a4:	431d      	orrs	r5, r3
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030a8:	b14b      	cbz	r3, 80030be <HAL_DMA_Init+0xaa>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7ff ff6a 	bl	8002f84 <DMA_CheckFifoParam>
 80030b0:	b128      	cbz	r0, 80030be <HAL_DMA_Init+0xaa>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030b2:	2340      	movs	r3, #64	; 0x40
 80030b4:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030b6:	2001      	movs	r0, #1
 80030b8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_ERROR; 
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030be:	6175      	str	r5, [r6, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030c0:	4620      	mov	r0, r4
 80030c2:	f7ff ff41 	bl	8002f48 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80030c8:	233f      	movs	r3, #63	; 0x3f
 80030ca:	4093      	lsls	r3, r2
 80030cc:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ce:	2000      	movs	r0, #0
 80030d0:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80030da:	2001      	movs	r0, #1
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	bf00      	nop
 80030e0:	f010803f 	.word	0xf010803f

080030e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e6:	b083      	sub	sp, #12
 80030e8:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030ee:	4b71      	ldr	r3, [pc, #452]	; (80032b4 <HAL_DMA_IRQHandler+0x1d0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4d71      	ldr	r5, [pc, #452]	; (80032b8 <HAL_DMA_IRQHandler+0x1d4>)
 80030f4:	fba5 3503 	umull	r3, r5, r5, r3
 80030f8:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fa:	6d87      	ldr	r7, [r0, #88]	; 0x58

  tmpisr = regs->ISR;
 80030fc:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003100:	2308      	movs	r3, #8
 8003102:	4093      	lsls	r3, r2
 8003104:	421e      	tst	r6, r3
 8003106:	d010      	beq.n	800312a <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003108:	6803      	ldr	r3, [r0, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f012 0f04 	tst.w	r2, #4
 8003110:	d00b      	beq.n	800312a <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	f022 0204 	bic.w	r2, r2, #4
 8003118:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800311a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800311c:	2308      	movs	r3, #8
 800311e:	4093      	lsls	r3, r2
 8003120:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003122:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6543      	str	r3, [r0, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800312a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800312c:	2301      	movs	r3, #1
 800312e:	4093      	lsls	r3, r2
 8003130:	421e      	tst	r6, r3
 8003132:	d009      	beq.n	8003148 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003134:	6822      	ldr	r2, [r4, #0]
 8003136:	6952      	ldr	r2, [r2, #20]
 8003138:	f012 0f80 	tst.w	r2, #128	; 0x80
 800313c:	d004      	beq.n	8003148 <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800313e:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003140:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003142:	f043 0302 	orr.w	r3, r3, #2
 8003146:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003148:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800314a:	2304      	movs	r3, #4
 800314c:	4093      	lsls	r3, r2
 800314e:	421e      	tst	r6, r3
 8003150:	d009      	beq.n	8003166 <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003152:	6822      	ldr	r2, [r4, #0]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	f012 0f02 	tst.w	r2, #2
 800315a:	d004      	beq.n	8003166 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800315c:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800315e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003166:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003168:	2310      	movs	r3, #16
 800316a:	4093      	lsls	r3, r2
 800316c:	421e      	tst	r6, r3
 800316e:	d024      	beq.n	80031ba <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003170:	6822      	ldr	r2, [r4, #0]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	f012 0f08 	tst.w	r2, #8
 8003178:	d01f      	beq.n	80031ba <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800317a:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003184:	d00d      	beq.n	80031a2 <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800318c:	d104      	bne.n	8003198 <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800318e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003190:	b19b      	cbz	r3, 80031ba <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003192:	4620      	mov	r0, r4
 8003194:	4798      	blx	r3
 8003196:	e010      	b.n	80031ba <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003198:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800319a:	b173      	cbz	r3, 80031ba <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800319c:	4620      	mov	r0, r4
 800319e:	4798      	blx	r3
 80031a0:	e00b      	b.n	80031ba <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80031a8:	d103      	bne.n	80031b2 <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	f022 0208 	bic.w	r2, r2, #8
 80031b0:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b4:	b10b      	cbz	r3, 80031ba <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031b6:	4620      	mov	r0, r4
 80031b8:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80031bc:	2320      	movs	r3, #32
 80031be:	4093      	lsls	r3, r2
 80031c0:	421e      	tst	r6, r3
 80031c2:	d052      	beq.n	800326a <HAL_DMA_IRQHandler+0x186>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031c4:	6822      	ldr	r2, [r4, #0]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	f012 0f10 	tst.w	r2, #16
 80031cc:	d04d      	beq.n	800326a <HAL_DMA_IRQHandler+0x186>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ce:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d122      	bne.n	8003220 <HAL_DMA_IRQHandler+0x13c>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	6813      	ldr	r3, [r2, #0]
 80031de:	f023 0316 	bic.w	r3, r3, #22
 80031e2:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031e4:	6822      	ldr	r2, [r4, #0]
 80031e6:	6953      	ldr	r3, [r2, #20]
 80031e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ec:	6153      	str	r3, [r2, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031f0:	b90b      	cbnz	r3, 80031f6 <HAL_DMA_IRQHandler+0x112>
 80031f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80031f4:	b123      	cbz	r3, 8003200 <HAL_DMA_IRQHandler+0x11c>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f6:	6822      	ldr	r2, [r4, #0]
 80031f8:	6813      	ldr	r3, [r2, #0]
 80031fa:	f023 0308 	bic.w	r3, r3, #8
 80031fe:	6013      	str	r3, [r2, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003200:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003202:	233f      	movs	r3, #63	; 0x3f
 8003204:	4093      	lsls	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003208:	2300      	movs	r3, #0
 800320a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320e:	2301      	movs	r3, #1
 8003210:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003214:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003216:	2b00      	cmp	r3, #0
 8003218:	d049      	beq.n	80032ae <HAL_DMA_IRQHandler+0x1ca>
        {
          hdma->XferAbortCallback(hdma);
 800321a:	4620      	mov	r0, r4
 800321c:	4798      	blx	r3
 800321e:	e046      	b.n	80032ae <HAL_DMA_IRQHandler+0x1ca>
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003228:	d00d      	beq.n	8003246 <HAL_DMA_IRQHandler+0x162>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003230:	d104      	bne.n	800323c <HAL_DMA_IRQHandler+0x158>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003232:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003234:	b1cb      	cbz	r3, 800326a <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003236:	4620      	mov	r0, r4
 8003238:	4798      	blx	r3
 800323a:	e016      	b.n	800326a <HAL_DMA_IRQHandler+0x186>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800323c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800323e:	b1a3      	cbz	r3, 800326a <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003240:	4620      	mov	r0, r4
 8003242:	4798      	blx	r3
 8003244:	e011      	b.n	800326a <HAL_DMA_IRQHandler+0x186>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	f412 7f80 	tst.w	r2, #256	; 0x100
 800324c:	d109      	bne.n	8003262 <HAL_DMA_IRQHandler+0x17e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	f022 0210 	bic.w	r2, r2, #16
 8003254:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003256:	2300      	movs	r3, #0
 8003258:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800325c:	2301      	movs	r3, #1
 800325e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003264:	b10b      	cbz	r3, 800326a <HAL_DMA_IRQHandler+0x186>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003266:	4620      	mov	r0, r4
 8003268:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800326a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800326c:	b1fb      	cbz	r3, 80032ae <HAL_DMA_IRQHandler+0x1ca>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800326e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003270:	f013 0f01 	tst.w	r3, #1
 8003274:	d017      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x1c2>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003276:	2305      	movs	r3, #5
 8003278:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 8003286:	9b01      	ldr	r3, [sp, #4]
 8003288:	3301      	adds	r3, #1
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	429d      	cmp	r5, r3
 800328e:	d304      	bcc.n	800329a <HAL_DMA_IRQHandler+0x1b6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f013 0f01 	tst.w	r3, #1
 8003298:	d1f5      	bne.n	8003286 <HAL_DMA_IRQHandler+0x1a2>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800329a:	2300      	movs	r3, #0
 800329c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80032a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032a8:	b10b      	cbz	r3, 80032ae <HAL_DMA_IRQHandler+0x1ca>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032aa:	4620      	mov	r0, r4
 80032ac:	4798      	blx	r3
    }
  }
}
 80032ae:	b003      	add	sp, #12
 80032b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000068 	.word	0x20000068
 80032b8:	1b4e81b5 	.word	0x1b4e81b5

080032bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80032be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c8:	0200      	lsls	r0, r0, #8
 80032ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ce:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80032d0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80032d4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80032d8:	60d0      	str	r0, [r2, #12]
 80032da:	4770      	bx	lr
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_NVIC_SetPriority+0x5c>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ea:	f1c3 0407 	rsb	r4, r3, #7
 80032ee:	2c04      	cmp	r4, #4
 80032f0:	bf28      	it	cs
 80032f2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f4:	1d1d      	adds	r5, r3, #4
 80032f6:	2d06      	cmp	r5, #6
 80032f8:	d901      	bls.n	80032fe <HAL_NVIC_SetPriority+0x1e>
 80032fa:	1edd      	subs	r5, r3, #3
 80032fc:	e000      	b.n	8003300 <HAL_NVIC_SetPriority+0x20>
 80032fe:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	2301      	movs	r3, #1
 8003302:	fa03 f404 	lsl.w	r4, r3, r4
 8003306:	3c01      	subs	r4, #1
 8003308:	4021      	ands	r1, r4
 800330a:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800330c:	40ab      	lsls	r3, r5
 800330e:	3b01      	subs	r3, #1
 8003310:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003312:	430a      	orrs	r2, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003314:	2800      	cmp	r0, #0
 8003316:	db08      	blt.n	800332a <HAL_NVIC_SetPriority+0x4a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003318:	0112      	lsls	r2, r2, #4
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003320:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003324:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8003328:	e005      	b.n	8003336 <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332a:	f000 000f 	and.w	r0, r0, #15
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_NVIC_SetPriority+0x60>)
 8003334:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003336:	bc30      	pop	{r4, r5}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	e000ed14 	.word	0xe000ed14

08003344 <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003344:	2800      	cmp	r0, #0
 8003346:	db08      	blt.n	800335a <HAL_NVIC_EnableIRQ+0x16>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003348:	0942      	lsrs	r2, r0, #5
 800334a:	f000 001f 	and.w	r0, r0, #31
 800334e:	2301      	movs	r3, #1
 8003350:	fa03 f000 	lsl.w	r0, r3, r0
 8003354:	4b01      	ldr	r3, [pc, #4]	; (800335c <HAL_NVIC_EnableIRQ+0x18>)
 8003356:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800335a:	4770      	bx	lr
 800335c:	e000e100 	.word	0xe000e100

08003360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003360:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_Init+0x30>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003372:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800337a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337c:	2003      	movs	r0, #3
 800337e:	f7ff ff9d 	bl	80032bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003382:	2000      	movs	r0, #0
 8003384:	f003 f86c 	bl	8006460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003388:	f7fd fd94 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800338c:	2000      	movs	r0, #0
 800338e:	bd08      	pop	{r3, pc}
 8003390:	40023c00 	.word	0x40023c00

08003394 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003394:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <HAL_IncTick+0x10>)
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	4903      	ldr	r1, [pc, #12]	; (80033a8 <HAL_IncTick+0x14>)
 800339a:	7809      	ldrb	r1, [r1, #0]
 800339c:	440b      	add	r3, r1
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	2000630c 	.word	0x2000630c
 80033a8:	20000064 	.word	0x20000064

080033ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80033ac:	4b01      	ldr	r3, [pc, #4]	; (80033b4 <HAL_GetTick+0x8>)
 80033ae:	6818      	ldr	r0, [r3, #0]
}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	2000630c 	.word	0x2000630c

080033b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7ff fff6 	bl	80033ac <HAL_GetTick>
 80033c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80033c6:	d002      	beq.n	80033ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <HAL_Delay+0x24>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033ce:	f7ff ffed 	bl	80033ac <HAL_GetTick>
 80033d2:	1b40      	subs	r0, r0, r5
 80033d4:	4284      	cmp	r4, r0
 80033d6:	d8fa      	bhi.n	80033ce <HAL_Delay+0x16>
  {
  }
}
 80033d8:	bd38      	pop	{r3, r4, r5, pc}
 80033da:	bf00      	nop
 80033dc:	20000064 	.word	0x20000064

080033e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e2:	6a03      	ldr	r3, [r0, #32]
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ee:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f4:	680c      	ldr	r4, [r1, #0]
 80033f6:	ea42 0504 	orr.w	r5, r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033fa:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033fe:	688b      	ldr	r3, [r1, #8]
 8003400:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003402:	4c0c      	ldr	r4, [pc, #48]	; (8003434 <TIM_OC1_SetConfig+0x54>)
 8003404:	42a0      	cmp	r0, r4
 8003406:	d105      	bne.n	8003414 <TIM_OC1_SetConfig+0x34>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003408:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800340c:	68ca      	ldr	r2, [r1, #12]
 800340e:	4313      	orrs	r3, r2
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003410:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003414:	4c07      	ldr	r4, [pc, #28]	; (8003434 <TIM_OC1_SetConfig+0x54>)
 8003416:	42a0      	cmp	r0, r4
 8003418:	d105      	bne.n	8003426 <TIM_OC1_SetConfig+0x46>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800341a:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800341e:	694a      	ldr	r2, [r1, #20]
 8003420:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003422:	698e      	ldr	r6, [r1, #24]
 8003424:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003426:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003428:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800342a:	684a      	ldr	r2, [r1, #4]
 800342c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	6203      	str	r3, [r0, #32]
}
 8003430:	bc70      	pop	{r4, r5, r6}
 8003432:	4770      	bx	lr
 8003434:	40010000 	.word	0x40010000

08003438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800343a:	6a03      	ldr	r3, [r0, #32]
 800343c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003440:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003444:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003446:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003448:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800344c:	680c      	ldr	r4, [r1, #0]
 800344e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003454:	688c      	ldr	r4, [r1, #8]
 8003456:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800345a:	4c0e      	ldr	r4, [pc, #56]	; (8003494 <TIM_OC3_SetConfig+0x5c>)
 800345c:	42a0      	cmp	r0, r4
 800345e:	d106      	bne.n	800346e <TIM_OC3_SetConfig+0x36>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003464:	68cc      	ldr	r4, [r1, #12]
 8003466:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800346a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346e:	4c09      	ldr	r4, [pc, #36]	; (8003494 <TIM_OC3_SetConfig+0x5c>)
 8003470:	42a0      	cmp	r0, r4
 8003472:	d107      	bne.n	8003484 <TIM_OC3_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003474:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003478:	694c      	ldr	r4, [r1, #20]
 800347a:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800347e:	698c      	ldr	r4, [r1, #24]
 8003480:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003484:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003486:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003488:	684a      	ldr	r2, [r1, #4]
 800348a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	6203      	str	r3, [r0, #32]
}
 800348e:	bc30      	pop	{r4, r5}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40010000 	.word	0x40010000

08003498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800349a:	6a03      	ldr	r3, [r0, #32]
 800349c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034a8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ac:	680d      	ldr	r5, [r1, #0]
 80034ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b6:	688d      	ldr	r5, [r1, #8]
 80034b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034bc:	4d07      	ldr	r5, [pc, #28]	; (80034dc <TIM_OC4_SetConfig+0x44>)
 80034be:	42a8      	cmp	r0, r5
 80034c0:	d104      	bne.n	80034cc <TIM_OC4_SetConfig+0x34>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034c6:	694d      	ldr	r5, [r1, #20]
 80034c8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034cc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ce:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034d0:	684a      	ldr	r2, [r1, #4]
 80034d2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	6203      	str	r3, [r0, #32]
}
 80034d6:	bc30      	pop	{r4, r5}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40010000 	.word	0x40010000

080034e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034e4:	6a04      	ldr	r4, [r0, #32]
 80034e6:	f024 0401 	bic.w	r4, r4, #1
 80034ea:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ec:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ee:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034f6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80034fa:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034fc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80034fe:	6201      	str	r1, [r0, #32]
}
 8003500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop

08003508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003508:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800350a:	6a03      	ldr	r3, [r0, #32]
 800350c:	f023 0310 	bic.w	r3, r3, #16
 8003510:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003512:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003514:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003516:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800351a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800351e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003522:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003526:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003528:	6201      	str	r1, [r0, #32]
}
 800352a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800352e:	4770      	bx	lr

08003530 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003530:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003536:	4319      	orrs	r1, r3
 8003538:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353c:	6081      	str	r1, [r0, #8]
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003540:	6802      	ldr	r2, [r0, #0]
 8003542:	68d3      	ldr	r3, [r2, #12]
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354a:	6802      	ldr	r2, [r0, #0]
 800354c:	6893      	ldr	r3, [r2, #8]
 800354e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	2b06      	cmp	r3, #6
 8003554:	d003      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8003556:	6813      	ldr	r3, [r2, #0]
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800355e:	2000      	movs	r0, #0
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop

08003564 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop

0800356c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356e:	4a24      	ldr	r2, [pc, #144]	; (8003600 <TIM_Base_SetConfig+0x94>)
 8003570:	4290      	cmp	r0, r2
 8003572:	d00e      	beq.n	8003592 <TIM_Base_SetConfig+0x26>
 8003574:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003578:	d00b      	beq.n	8003592 <TIM_Base_SetConfig+0x26>
 800357a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800357e:	4290      	cmp	r0, r2
 8003580:	d007      	beq.n	8003592 <TIM_Base_SetConfig+0x26>
 8003582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003586:	4290      	cmp	r0, r2
 8003588:	d003      	beq.n	8003592 <TIM_Base_SetConfig+0x26>
 800358a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800358e:	4290      	cmp	r0, r2
 8003590:	d103      	bne.n	800359a <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003596:	684a      	ldr	r2, [r1, #4]
 8003598:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359a:	4a19      	ldr	r2, [pc, #100]	; (8003600 <TIM_Base_SetConfig+0x94>)
 800359c:	4290      	cmp	r0, r2
 800359e:	d01a      	beq.n	80035d6 <TIM_Base_SetConfig+0x6a>
 80035a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80035a4:	d017      	beq.n	80035d6 <TIM_Base_SetConfig+0x6a>
 80035a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80035aa:	4290      	cmp	r0, r2
 80035ac:	d013      	beq.n	80035d6 <TIM_Base_SetConfig+0x6a>
 80035ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035b2:	4290      	cmp	r0, r2
 80035b4:	d00f      	beq.n	80035d6 <TIM_Base_SetConfig+0x6a>
 80035b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035ba:	4290      	cmp	r0, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0x6a>
 80035be:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80035c2:	4290      	cmp	r0, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x6a>
 80035c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035ca:	4290      	cmp	r0, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x6a>
 80035ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035d2:	4290      	cmp	r0, r2
 80035d4:	d103      	bne.n	80035de <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035da:	68ca      	ldr	r2, [r1, #12]
 80035dc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e2:	694a      	ldr	r2, [r1, #20]
 80035e4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80035e6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	688b      	ldr	r3, [r1, #8]
 80035ea:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ec:	680b      	ldr	r3, [r1, #0]
 80035ee:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <TIM_Base_SetConfig+0x94>)
 80035f2:	4298      	cmp	r0, r3
 80035f4:	d101      	bne.n	80035fa <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f6:	690b      	ldr	r3, [r1, #16]
 80035f8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035fa:	2301      	movs	r3, #1
 80035fc:	6143      	str	r3, [r0, #20]
 80035fe:	4770      	bx	lr
 8003600:	40010000 	.word	0x40010000

08003604 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003604:	b1b8      	cbz	r0, 8003636 <HAL_TIM_Base_Init+0x32>
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003606:	b510      	push	{r4, lr}
 8003608:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800360e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003612:	d104      	bne.n	800361e <HAL_TIM_Base_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003614:	2300      	movs	r3, #0
 8003616:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	f7fd fcdd 	bl	8000fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361e:	2302      	movs	r3, #2
 8003620:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003624:	1d21      	adds	r1, r4, #4
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	f7ff ffa0 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	2301      	movs	r3, #1
 800362e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8003632:	2000      	movs	r0, #0
 8003634:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8003636:	2001      	movs	r0, #1
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop

0800363c <HAL_TIM_OC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	b1b8      	cbz	r0, 800366e <HAL_TIM_OC_Init+0x32>
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800363e:	b510      	push	{r4, lr}
 8003640:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003642:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003646:	f013 0fff 	tst.w	r3, #255	; 0xff
 800364a:	d104      	bne.n	8003656 <HAL_TIM_OC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364c:	2300      	movs	r3, #0
 800364e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003652:	f7ff ff87 	bl	8003564 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003656:	2302      	movs	r3, #2
 8003658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800365c:	1d21      	adds	r1, r4, #4
 800365e:	6820      	ldr	r0, [r4, #0]
 8003660:	f7ff ff84 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003664:	2301      	movs	r3, #1
 8003666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 800366a:	2000      	movs	r0, #0
 800366c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 800366e:	2001      	movs	r0, #1
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop

08003674 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	b1b8      	cbz	r0, 80036a6 <HAL_TIM_PWM_Init+0x32>
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003676:	b510      	push	{r4, lr}
 8003678:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800367e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003682:	d104      	bne.n	800368e <HAL_TIM_PWM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003684:	2300      	movs	r3, #0
 8003686:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800368a:	f7ff ff6d 	bl	8003568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368e:	2302      	movs	r3, #2
 8003690:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	1d21      	adds	r1, r4, #4
 8003696:	6820      	ldr	r0, [r4, #0]
 8003698:	f7ff ff68 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800369c:	2301      	movs	r3, #1
 800369e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 80036a2:	2000      	movs	r0, #0
 80036a4:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 80036a6:	2001      	movs	r0, #1
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop

080036ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ae:	6a03      	ldr	r3, [r0, #32]
 80036b0:	f023 0310 	bic.w	r3, r3, #16
 80036b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036bc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	680d      	ldr	r5, [r1, #0]
 80036c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036c6:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036ca:	688d      	ldr	r5, [r1, #8]
 80036cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d0:	4d0d      	ldr	r5, [pc, #52]	; (8003708 <TIM_OC2_SetConfig+0x5c>)
 80036d2:	42a8      	cmp	r0, r5
 80036d4:	d106      	bne.n	80036e4 <TIM_OC2_SetConfig+0x38>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036da:	68cd      	ldr	r5, [r1, #12]
 80036dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	4d08      	ldr	r5, [pc, #32]	; (8003708 <TIM_OC2_SetConfig+0x5c>)
 80036e6:	42a8      	cmp	r0, r5
 80036e8:	d107      	bne.n	80036fa <TIM_OC2_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036ea:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036ee:	694d      	ldr	r5, [r1, #20]
 80036f0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f4:	698d      	ldr	r5, [r1, #24]
 80036f6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036fe:	684a      	ldr	r2, [r1, #4]
 8003700:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003702:	6203      	str	r3, [r0, #32]
}
 8003704:	bc30      	pop	{r4, r5}
 8003706:	4770      	bx	lr
 8003708:	40010000 	.word	0x40010000

0800370c <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800370c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d028      	beq.n	8003766 <HAL_TIM_OC_ConfigChannel+0x5a>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003714:	b510      	push	{r4, lr}
 8003716:	4604      	mov	r4, r0
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003718:	2301      	movs	r3, #1
 800371a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 8003724:	2a0c      	cmp	r2, #12
 8003726:	d817      	bhi.n	8003758 <HAL_TIM_OC_ConfigChannel+0x4c>
 8003728:	e8df f002 	tbb	[pc, r2]
 800372c:	16161607 	.word	0x16161607
 8003730:	1616160b 	.word	0x1616160b
 8003734:	1616160f 	.word	0x1616160f
 8003738:	13          	.byte	0x13
 8003739:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	f7ff fe50 	bl	80033e0 <TIM_OC1_SetConfig>
      break;
 8003740:	e00a      	b.n	8003758 <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003742:	6800      	ldr	r0, [r0, #0]
 8003744:	f7ff ffb2 	bl	80036ac <TIM_OC2_SetConfig>
      break;
 8003748:	e006      	b.n	8003758 <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800374a:	6800      	ldr	r0, [r0, #0]
 800374c:	f7ff fe74 	bl	8003438 <TIM_OC3_SetConfig>
      break;
 8003750:	e002      	b.n	8003758 <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003752:	6800      	ldr	r0, [r0, #0]
 8003754:	f7ff fea0 	bl	8003498 <TIM_OC4_SetConfig>

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8003758:	2301      	movs	r3, #1
 800375a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800375e:	2000      	movs	r0, #0
 8003760:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8003764:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003766:	2002      	movs	r0, #2
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop

0800376c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800376c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800376e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d066      	beq.n	8003844 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003776:	460d      	mov	r5, r1
 8003778:	4604      	mov	r4, r0
 800377a:	2301      	movs	r3, #1
 800377c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	2302      	movs	r3, #2
 8003782:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 8003786:	2a0c      	cmp	r2, #12
 8003788:	d855      	bhi.n	8003836 <HAL_TIM_PWM_ConfigChannel+0xca>
 800378a:	e8df f002 	tbb	[pc, r2]
 800378e:	5407      	.short	0x5407
 8003790:	541a5454 	.word	0x541a5454
 8003794:	542e5454 	.word	0x542e5454
 8003798:	5454      	.short	0x5454
 800379a:	41          	.byte	0x41
 800379b:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800379c:	6800      	ldr	r0, [r0, #0]
 800379e:	f7ff fe1f 	bl	80033e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	6993      	ldr	r3, [r2, #24]
 80037a6:	f043 0308 	orr.w	r3, r3, #8
 80037aa:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037ac:	6822      	ldr	r2, [r4, #0]
 80037ae:	6993      	ldr	r3, [r2, #24]
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	6991      	ldr	r1, [r2, #24]
 80037ba:	692b      	ldr	r3, [r5, #16]
 80037bc:	430b      	orrs	r3, r1
 80037be:	6193      	str	r3, [r2, #24]
      break;
 80037c0:	e039      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037c2:	6800      	ldr	r0, [r0, #0]
 80037c4:	f7ff ff72 	bl	80036ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c8:	6822      	ldr	r2, [r4, #0]
 80037ca:	6993      	ldr	r3, [r2, #24]
 80037cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037d0:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	6993      	ldr	r3, [r2, #24]
 80037d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037dc:	6822      	ldr	r2, [r4, #0]
 80037de:	6993      	ldr	r3, [r2, #24]
 80037e0:	6929      	ldr	r1, [r5, #16]
 80037e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037e6:	6193      	str	r3, [r2, #24]
      break;
 80037e8:	e025      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	f7ff fe24 	bl	8003438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	69d3      	ldr	r3, [r2, #28]
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	61d3      	str	r3, [r2, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	69d3      	ldr	r3, [r2, #28]
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	69d1      	ldr	r1, [r2, #28]
 8003808:	692b      	ldr	r3, [r5, #16]
 800380a:	430b      	orrs	r3, r1
 800380c:	61d3      	str	r3, [r2, #28]
      break;
 800380e:	e012      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003810:	6800      	ldr	r0, [r0, #0]
 8003812:	f7ff fe41 	bl	8003498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003816:	6822      	ldr	r2, [r4, #0]
 8003818:	69d3      	ldr	r3, [r2, #28]
 800381a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800381e:	61d3      	str	r3, [r2, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	69d3      	ldr	r3, [r2, #28]
 8003824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003828:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	69d3      	ldr	r3, [r2, #28]
 800382e:	6929      	ldr	r1, [r5, #16]
 8003830:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003834:	61d3      	str	r3, [r2, #28]

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8003836:	2301      	movs	r3, #1
 8003838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800383c:	2000      	movs	r0, #0
 800383e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8003842:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003844:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8003846:	bd38      	pop	{r3, r4, r5, pc}

08003848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003848:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800384a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800384c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003850:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003854:	4319      	orrs	r1, r3
 8003856:	ea44 0301 	orr.w	r3, r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385a:	6083      	str	r3, [r0, #8]
}
 800385c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop

08003864 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003864:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d06a      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0xde>
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800386c:	b510      	push	{r4, lr}
 800386e:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003870:	2301      	movs	r3, #1
 8003872:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003876:	2302      	movs	r3, #2
 8003878:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	6802      	ldr	r2, [r0, #0]
 800387e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003880:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003884:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003888:	6093      	str	r3, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 800388a:	680b      	ldr	r3, [r1, #0]
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d043      	beq.n	8003918 <HAL_TIM_ConfigClockSource+0xb4>
 8003890:	d80a      	bhi.n	80038a8 <HAL_TIM_ConfigClockSource+0x44>
 8003892:	2b10      	cmp	r3, #16
 8003894:	d04a      	beq.n	800392c <HAL_TIM_ConfigClockSource+0xc8>
 8003896:	d802      	bhi.n	800389e <HAL_TIM_ConfigClockSource+0x3a>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d047      	beq.n	800392c <HAL_TIM_ConfigClockSource+0xc8>
 800389c:	e04a      	b.n	8003934 <HAL_TIM_ConfigClockSource+0xd0>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d044      	beq.n	800392c <HAL_TIM_ConfigClockSource+0xc8>
 80038a2:	2b30      	cmp	r3, #48	; 0x30
 80038a4:	d042      	beq.n	800392c <HAL_TIM_ConfigClockSource+0xc8>
 80038a6:	e045      	b.n	8003934 <HAL_TIM_ConfigClockSource+0xd0>
 80038a8:	2b60      	cmp	r3, #96	; 0x60
 80038aa:	d02b      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0xa0>
 80038ac:	d802      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x50>
 80038ae:	2b50      	cmp	r3, #80	; 0x50
 80038b0:	d01e      	beq.n	80038f0 <HAL_TIM_ConfigClockSource+0x8c>
 80038b2:	e03f      	b.n	8003934 <HAL_TIM_ConfigClockSource+0xd0>
 80038b4:	2b70      	cmp	r3, #112	; 0x70
 80038b6:	d003      	beq.n	80038c0 <HAL_TIM_ConfigClockSource+0x5c>
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x74>
 80038be:	e039      	b.n	8003934 <HAL_TIM_ConfigClockSource+0xd0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c0:	68cb      	ldr	r3, [r1, #12]
 80038c2:	684a      	ldr	r2, [r1, #4]
 80038c4:	6889      	ldr	r1, [r1, #8]
 80038c6:	6800      	ldr	r0, [r0, #0]
 80038c8:	f7ff ffbe 	bl	8003848 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038d4:	6093      	str	r3, [r2, #8]
      break;
 80038d6:	e02d      	b.n	8003934 <HAL_TIM_ConfigClockSource+0xd0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d8:	68cb      	ldr	r3, [r1, #12]
 80038da:	684a      	ldr	r2, [r1, #4]
 80038dc:	6889      	ldr	r1, [r1, #8]
 80038de:	6800      	ldr	r0, [r0, #0]
 80038e0:	f7ff ffb2 	bl	8003848 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	6893      	ldr	r3, [r2, #8]
 80038e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ec:	6093      	str	r3, [r2, #8]
      break;
 80038ee:	e021      	b.n	8003934 <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f0:	68ca      	ldr	r2, [r1, #12]
 80038f2:	6849      	ldr	r1, [r1, #4]
 80038f4:	6800      	ldr	r0, [r0, #0]
 80038f6:	f7ff fdf3 	bl	80034e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038fa:	2150      	movs	r1, #80	; 0x50
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	f7ff fe17 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8003902:	e017      	b.n	8003934 <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003904:	68ca      	ldr	r2, [r1, #12]
 8003906:	6849      	ldr	r1, [r1, #4]
 8003908:	6800      	ldr	r0, [r0, #0]
 800390a:	f7ff fdfd 	bl	8003508 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800390e:	2160      	movs	r1, #96	; 0x60
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	f7ff fe0d 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8003916:	e00d      	b.n	8003934 <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003918:	68ca      	ldr	r2, [r1, #12]
 800391a:	6849      	ldr	r1, [r1, #4]
 800391c:	6800      	ldr	r0, [r0, #0]
 800391e:	f7ff fddf 	bl	80034e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003922:	2140      	movs	r1, #64	; 0x40
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	f7ff fe03 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 800392a:	e003      	b.n	8003934 <HAL_TIM_ConfigClockSource+0xd0>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392c:	4619      	mov	r1, r3
 800392e:	6820      	ldr	r0, [r4, #0]
 8003930:	f7ff fdfe 	bl	8003530 <TIM_ITRx_SetConfig>
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8003934:	2301      	movs	r3, #1
 8003936:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800393a:	2000      	movs	r0, #0
 800393c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8003940:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003942:	2002      	movs	r0, #2
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop

08003948 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003948:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d032      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003950:	b430      	push	{r4, r5}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003952:	2301      	movs	r3, #1
 8003954:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	2302      	movs	r3, #2
 800395a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800395e:	6803      	ldr	r3, [r0, #0]
 8003960:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003962:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003964:	f022 0470 	bic.w	r4, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003968:	680a      	ldr	r2, [r1, #0]
 800396a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800396c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396e:	6803      	ldr	r3, [r0, #0]
 8003970:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d012      	beq.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d00f      	beq.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800397c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003980:	4293      	cmp	r3, r2
 8003982:	d00b      	beq.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003988:	4293      	cmp	r3, r2
 800398a:	d007      	beq.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800398c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003994:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003998:	4293      	cmp	r3, r2
 800399a:	d104      	bne.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800399c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a0:	684a      	ldr	r2, [r1, #4]
 80039a2:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a4:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ac:	2300      	movs	r3, #0
 80039ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80039b2:	4618      	mov	r0, r3
 80039b4:	e001      	b.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	2002      	movs	r0, #2
 80039b8:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80039ba:	bc30      	pop	{r4, r5}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40010000 	.word	0x40010000

080039c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d022      	beq.n	8003a12 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80039cc:	2301      	movs	r3, #1
 80039ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039d2:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d8:	688b      	ldr	r3, [r1, #8]
 80039da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039e0:	684b      	ldr	r3, [r1, #4]
 80039e2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039e8:	680b      	ldr	r3, [r1, #0]
 80039ea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039f0:	690b      	ldr	r3, [r1, #16]
 80039f2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039f8:	694b      	ldr	r3, [r1, #20]
 80039fa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a00:	69ca      	ldr	r2, [r1, #28]
 8003a02:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a04:	6802      	ldr	r2, [r0, #0]
 8003a06:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003a0e:	4618      	mov	r0, r3
 8003a10:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a12:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop

08003a18 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <SystemInit+0x18>)
 8003a1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a1e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a34:	f100 0308 	add.w	r3, r0, #8
 8003a38:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a40:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a42:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	6003      	str	r3, [r0, #0]
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop

08003a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6103      	str	r3, [r0, #16]
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop

08003a54 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a54:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a56:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a60:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a62:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003a64:	6803      	ldr	r3, [r0, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	6003      	str	r3, [r0, #0]
 8003a6a:	4770      	bx	lr

08003a6c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a6c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a6e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a70:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a74:	d101      	bne.n	8003a7a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a76:	6902      	ldr	r2, [r0, #16]
 8003a78:	e007      	b.n	8003a8a <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a7a:	f100 0208 	add.w	r2, r0, #8
 8003a7e:	e000      	b.n	8003a82 <vListInsert+0x16>
 8003a80:	461a      	mov	r2, r3
 8003a82:	6853      	ldr	r3, [r2, #4]
 8003a84:	681c      	ldr	r4, [r3, #0]
 8003a86:	42a5      	cmp	r5, r4
 8003a88:	d2fa      	bcs.n	8003a80 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a8a:	6853      	ldr	r3, [r2, #4]
 8003a8c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a8e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a90:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a92:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a94:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003a96:	6803      	ldr	r3, [r0, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	6003      	str	r3, [r0, #0]
}
 8003a9c:	bc30      	pop	{r4, r5}
 8003a9e:	4770      	bx	lr

08003aa0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003aa0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003aa2:	6842      	ldr	r2, [r0, #4]
 8003aa4:	6881      	ldr	r1, [r0, #8]
 8003aa6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003aa8:	6882      	ldr	r2, [r0, #8]
 8003aaa:	6841      	ldr	r1, [r0, #4]
 8003aac:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4290      	cmp	r0, r2
 8003ab2:	d101      	bne.n	8003ab8 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ab4:	6882      	ldr	r2, [r0, #8]
 8003ab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ab8:	2200      	movs	r2, #0
 8003aba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ac2:	6818      	ldr	r0, [r3, #0]
}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop

08003ac8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003acc:	f001 fcb2 	bl	8005434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ad0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ad2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d101      	bne.n	8003adc <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
 8003ad8:	2401      	movs	r4, #1
 8003ada:	e000      	b.n	8003ade <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
 8003adc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003ade:	f001 fccb 	bl	8005478 <vPortExitCritical>

	return xReturn;
}
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	bd10      	pop	{r4, pc}
 8003ae6:	bf00      	nop

08003ae8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aec:	f001 fca2 	bl	8005434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003af2:	b90b      	cbnz	r3, 8003af8 <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
 8003af4:	2401      	movs	r4, #1
 8003af6:	e000      	b.n	8003afa <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
 8003af8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003afa:	f001 fcbd 	bl	8005478 <vPortExitCritical>

	return xReturn;
}
 8003afe:	4620      	mov	r0, r4
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	bf00      	nop

08003b04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4604      	mov	r4, r0
 8003b08:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b0a:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003b0e:	b93a      	cbnz	r2, 8003b20 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b10:	6803      	ldr	r3, [r0, #0]
 8003b12:	bb43      	cbnz	r3, 8003b66 <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b14:	6840      	ldr	r0, [r0, #4]
 8003b16:	f000 ffe5 	bl	8004ae4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	6063      	str	r3, [r4, #4]
 8003b1e:	e029      	b.n	8003b74 <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b20:	b96e      	cbnz	r6, 8003b3e <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b22:	6880      	ldr	r0, [r0, #8]
 8003b24:	f003 f844 	bl	8006bb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b28:	68a2      	ldr	r2, [r4, #8]
 8003b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b30:	6862      	ldr	r2, [r4, #4]
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d319      	bcc.n	8003b6a <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	e01a      	b.n	8003b74 <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b3e:	68c0      	ldr	r0, [r0, #12]
 8003b40:	f003 f836 	bl	8006bb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b46:	425b      	negs	r3, r3
 8003b48:	68e2      	ldr	r2, [r4, #12]
 8003b4a:	441a      	add	r2, r3
 8003b4c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b4e:	6821      	ldr	r1, [r4, #0]
 8003b50:	428a      	cmp	r2, r1
 8003b52:	d202      	bcs.n	8003b5a <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b54:	6862      	ldr	r2, [r4, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b5a:	2e02      	cmp	r6, #2
 8003b5c:	d107      	bne.n	8003b6e <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b5e:	b145      	cbz	r5, 8003b72 <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b60:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8003b62:	2000      	movs	r0, #0
 8003b64:	e006      	b.n	8003b74 <prvCopyDataToQueue+0x70>
 8003b66:	2000      	movs	r0, #0
 8003b68:	e004      	b.n	8003b74 <prvCopyDataToQueue+0x70>
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	e002      	b.n	8003b74 <prvCopyDataToQueue+0x70>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e000      	b.n	8003b74 <prvCopyDataToQueue+0x70>
 8003b72:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b74:	3501      	adds	r5, #1
 8003b76:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 8003b78:	bd70      	pop	{r4, r5, r6, pc}
 8003b7a:	bf00      	nop

08003b7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003b7e:	b172      	cbz	r2, 8003b9e <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b80:	b510      	push	{r4, lr}
 8003b82:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b84:	68c4      	ldr	r4, [r0, #12]
 8003b86:	4414      	add	r4, r2
 8003b88:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b8a:	6840      	ldr	r0, [r0, #4]
 8003b8c:	4284      	cmp	r4, r0
 8003b8e:	d301      	bcc.n	8003b94 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	60d8      	str	r0, [r3, #12]
 8003b94:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b96:	68d9      	ldr	r1, [r3, #12]
 8003b98:	f003 f80a 	bl	8006bb0 <memcpy>
 8003b9c:	bd10      	pop	{r4, pc}
 8003b9e:	4770      	bx	lr

08003ba0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ba4:	f001 fc46 	bl	8005434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ba8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003bac:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bae:	e00a      	b.n	8003bc6 <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bb2:	b153      	cbz	r3, 8003bca <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003bb8:	f000 feec 	bl	8004994 <xTaskRemoveFromEventList>
 8003bbc:	b108      	cbz	r0, 8003bc2 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bbe:	f000 ff7b 	bl	8004ab8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bc2:	3c01      	subs	r4, #1
 8003bc4:	b264      	sxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bc6:	2c00      	cmp	r4, #0
 8003bc8:	dcf2      	bgt.n	8003bb0 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bca:	23ff      	movs	r3, #255	; 0xff
 8003bcc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003bd0:	f001 fc52 	bl	8005478 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bd4:	f001 fc2e 	bl	8005434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bd8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8003bdc:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bde:	e00a      	b.n	8003bf6 <prvUnlockQueue+0x56>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003be0:	692b      	ldr	r3, [r5, #16]
 8003be2:	b153      	cbz	r3, 8003bfa <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003be4:	f105 0010 	add.w	r0, r5, #16
 8003be8:	f000 fed4 	bl	8004994 <xTaskRemoveFromEventList>
 8003bec:	b108      	cbz	r0, 8003bf2 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 8003bee:	f000 ff63 	bl	8004ab8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bf2:	3c01      	subs	r4, #1
 8003bf4:	b264      	sxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bf6:	2c00      	cmp	r4, #0
 8003bf8:	dcf2      	bgt.n	8003be0 <prvUnlockQueue+0x40>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003bfa:	23ff      	movs	r3, #255	; 0xff
 8003bfc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c00:	f001 fc3a 	bl	8005478 <vPortExitCritical>
 8003c04:	bd38      	pop	{r3, r4, r5, pc}
 8003c06:	bf00      	nop

08003c08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c08:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003c0a:	b940      	cbnz	r0, 8003c1e <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	e7fe      	b.n	8003c1c <xQueueGenericReset+0x14>
 8003c1e:	4604      	mov	r4, r0
 8003c20:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 8003c22:	f001 fc07 	bl	8005434 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c26:	6821      	ldr	r1, [r4, #0]
 8003c28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c2c:	fb03 1002 	mla	r0, r3, r2, r1
 8003c30:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c32:	2000      	movs	r0, #0
 8003c34:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c36:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c38:	3a01      	subs	r2, #1
 8003c3a:	fb02 1303 	mla	r3, r2, r3, r1
 8003c3e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c40:	23ff      	movs	r3, #255	; 0xff
 8003c42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c4a:	b97d      	cbnz	r5, 8003c6c <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	b1ab      	cbz	r3, 8003c7c <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c50:	f104 0010 	add.w	r0, r4, #16
 8003c54:	f000 fe9e 	bl	8004994 <xTaskRemoveFromEventList>
 8003c58:	b180      	cbz	r0, 8003c7c <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <xQueueGenericReset+0x7c>)
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	e007      	b.n	8003c7c <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c6c:	f104 0010 	add.w	r0, r4, #16
 8003c70:	f7ff fee0 	bl	8003a34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c78:	f7ff fedc 	bl	8003a34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c7c:	f001 fbfc 	bl	8005478 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8003c80:	2001      	movs	r0, #1
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	461d      	mov	r5, r3
 8003c8c:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c8e:	460b      	mov	r3, r1
 8003c90:	b909      	cbnz	r1, 8003c96 <prvInitialiseNewQueue+0xe>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c92:	6024      	str	r4, [r4, #0]
 8003c94:	e000      	b.n	8003c98 <prvInitialiseNewQueue+0x10>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c96:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c98:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c9a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f7ff ffb2 	bl	8003c08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ca4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8003ca8:	bd38      	pop	{r3, r4, r5, pc}
 8003caa:	bf00      	nop

08003cac <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cac:	b940      	cbnz	r0, 8003cc0 <xQueueGenericCreateStatic+0x14>
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	e7fe      	b.n	8003cbe <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cc6:	b943      	cbnz	r3, 8003cda <xQueueGenericCreateStatic+0x2e>
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	e7fe      	b.n	8003cd8 <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cda:	b112      	cbz	r2, 8003ce2 <xQueueGenericCreateStatic+0x36>
 8003cdc:	b119      	cbz	r1, 8003ce6 <xQueueGenericCreateStatic+0x3a>
 8003cde:	2001      	movs	r0, #1
 8003ce0:	e002      	b.n	8003ce8 <xQueueGenericCreateStatic+0x3c>
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	e000      	b.n	8003ce8 <xQueueGenericCreateStatic+0x3c>
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	b940      	cbnz	r0, 8003cfc <xQueueGenericCreateStatic+0x50>
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	e7fe      	b.n	8003cfa <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cfc:	b912      	cbnz	r2, 8003d04 <xQueueGenericCreateStatic+0x58>
 8003cfe:	b919      	cbnz	r1, 8003d08 <xQueueGenericCreateStatic+0x5c>
 8003d00:	2001      	movs	r0, #1
 8003d02:	e002      	b.n	8003d0a <xQueueGenericCreateStatic+0x5e>
 8003d04:	2001      	movs	r0, #1
 8003d06:	e000      	b.n	8003d0a <xQueueGenericCreateStatic+0x5e>
 8003d08:	2000      	movs	r0, #0
 8003d0a:	b940      	cbnz	r0, 8003d1e <xQueueGenericCreateStatic+0x72>
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	e7fe      	b.n	8003d1c <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d1e:	2050      	movs	r0, #80	; 0x50
 8003d20:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d22:	9803      	ldr	r0, [sp, #12]
 8003d24:	2850      	cmp	r0, #80	; 0x50
 8003d26:	d008      	beq.n	8003d3a <xQueueGenericCreateStatic+0x8e>
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	e7fe      	b.n	8003d38 <xQueueGenericCreateStatic+0x8c>
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
 8003d3e:	b13b      	cbz	r3, 8003d50 <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d46:	9400      	str	r4, [sp, #0]
 8003d48:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003d4c:	f7ff ff9c 	bl	8003c88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
 8003d50:	4620      	mov	r0, r4
 8003d52:	b004      	add	sp, #16
 8003d54:	bd10      	pop	{r4, pc}
 8003d56:	bf00      	nop

08003d58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003d5e:	b940      	cbnz	r0, 8003d72 <xQueueGenericSend+0x1a>
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	e7fe      	b.n	8003d70 <xQueueGenericSend+0x18>
 8003d72:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d74:	b919      	cbnz	r1, 8003d7e <xQueueGenericSend+0x26>
 8003d76:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d78:	b91a      	cbnz	r2, 8003d82 <xQueueGenericSend+0x2a>
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	e002      	b.n	8003d84 <xQueueGenericSend+0x2c>
 8003d7e:	2201      	movs	r2, #1
 8003d80:	e000      	b.n	8003d84 <xQueueGenericSend+0x2c>
 8003d82:	2200      	movs	r2, #0
 8003d84:	b942      	cbnz	r2, 8003d98 <xQueueGenericSend+0x40>
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	e7fe      	b.n	8003d96 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d103      	bne.n	8003da4 <xQueueGenericSend+0x4c>
 8003d9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003d9e:	2a01      	cmp	r2, #1
 8003da0:	d102      	bne.n	8003da8 <xQueueGenericSend+0x50>
 8003da2:	e002      	b.n	8003daa <xQueueGenericSend+0x52>
 8003da4:	2201      	movs	r2, #1
 8003da6:	e000      	b.n	8003daa <xQueueGenericSend+0x52>
 8003da8:	2200      	movs	r2, #0
 8003daa:	b942      	cbnz	r2, 8003dbe <xQueueGenericSend+0x66>
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	e7fe      	b.n	8003dbc <xQueueGenericSend+0x64>
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc2:	f000 fe7f 	bl	8004ac4 <xTaskGetSchedulerState>
 8003dc6:	b918      	cbnz	r0, 8003dd0 <xQueueGenericSend+0x78>
 8003dc8:	9b01      	ldr	r3, [sp, #4]
 8003dca:	b91b      	cbnz	r3, 8003dd4 <xQueueGenericSend+0x7c>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e002      	b.n	8003dd6 <xQueueGenericSend+0x7e>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <xQueueGenericSend+0x7e>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	b943      	cbnz	r3, 8003dea <xQueueGenericSend+0x92>
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	e7fe      	b.n	8003de8 <xQueueGenericSend+0x90>
 8003dea:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dec:	f001 fb22 	bl	8005434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003df0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003df2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d301      	bcc.n	8003dfc <xQueueGenericSend+0xa4>
 8003df8:	2d02      	cmp	r5, #2
 8003dfa:	d121      	bne.n	8003e40 <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dfc:	462a      	mov	r2, r5
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4620      	mov	r0, r4
 8003e02:	f7ff fe7f 	bl	8003b04 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e08:	b16b      	cbz	r3, 8003e26 <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e0e:	f000 fdc1 	bl	8004994 <xTaskRemoveFromEventList>
 8003e12:	b188      	cbz	r0, 8003e38 <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e18:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <xQueueGenericSend+0x18c>)
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	e008      	b.n	8003e38 <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e26:	b138      	cbz	r0, 8003e38 <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <xQueueGenericSend+0x18c>)
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e38:	f001 fb1e 	bl	8005478 <vPortExitCritical>
				return pdPASS;
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	e04e      	b.n	8003ede <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e40:	9b01      	ldr	r3, [sp, #4]
 8003e42:	b91b      	cbnz	r3, 8003e4c <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e44:	f001 fb18 	bl	8005478 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e048      	b.n	8003ede <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e4c:	b91f      	cbnz	r7, 8003e56 <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e4e:	a802      	add	r0, sp, #8
 8003e50:	f000 fde6 	bl	8004a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e54:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e56:	f001 fb0f 	bl	8005478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e5a:	f000 fbd7 	bl	800460c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e5e:	f001 fae9 	bl	8005434 <vPortEnterCritical>
 8003e62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d102      	bne.n	8003e74 <xQueueGenericSend+0x11c>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e74:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d102      	bne.n	8003e86 <xQueueGenericSend+0x12e>
 8003e80:	2300      	movs	r3, #0
 8003e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e86:	f001 faf7 	bl	8005478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e8a:	a901      	add	r1, sp, #4
 8003e8c:	a802      	add	r0, sp, #8
 8003e8e:	f000 fdd3 	bl	8004a38 <xTaskCheckForTimeOut>
 8003e92:	b9f0      	cbnz	r0, 8003ed2 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7ff fe17 	bl	8003ac8 <prvIsQueueFull>
 8003e9a:	b1a0      	cbz	r0, 8003ec6 <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e9c:	9901      	ldr	r1, [sp, #4]
 8003e9e:	f104 0010 	add.w	r0, r4, #16
 8003ea2:	f000 fd43 	bl	800492c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f7ff fe7a 	bl	8003ba0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003eac:	f000 fc4e 	bl	800474c <xTaskResumeAll>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d19b      	bne.n	8003dec <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
 8003eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <xQueueGenericSend+0x18c>)
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	e792      	b.n	8003dec <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7ff fe6a 	bl	8003ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ecc:	f000 fc3e 	bl	800474c <xTaskResumeAll>
 8003ed0:	e78c      	b.n	8003dec <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7ff fe64 	bl	8003ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ed8:	f000 fc38 	bl	800474c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003edc:	2000      	movs	r0, #0
		}
	}
}
 8003ede:	b005      	add	sp, #20
 8003ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	e000ed04 	.word	0xe000ed04

08003ee8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003eec:	b940      	cbnz	r0, 8003f00 <xQueueGenericSendFromISR+0x18>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	e7fe      	b.n	8003efe <xQueueGenericSendFromISR+0x16>
 8003f00:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f02:	b919      	cbnz	r1, 8003f0c <xQueueGenericSendFromISR+0x24>
 8003f04:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003f06:	b918      	cbnz	r0, 8003f10 <xQueueGenericSendFromISR+0x28>
 8003f08:	2001      	movs	r0, #1
 8003f0a:	e002      	b.n	8003f12 <xQueueGenericSendFromISR+0x2a>
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	e000      	b.n	8003f12 <xQueueGenericSendFromISR+0x2a>
 8003f10:	2000      	movs	r0, #0
 8003f12:	b940      	cbnz	r0, 8003f26 <xQueueGenericSendFromISR+0x3e>
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	e7fe      	b.n	8003f24 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d103      	bne.n	8003f32 <xQueueGenericSendFromISR+0x4a>
 8003f2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003f2c:	2801      	cmp	r0, #1
 8003f2e:	d102      	bne.n	8003f36 <xQueueGenericSendFromISR+0x4e>
 8003f30:	e002      	b.n	8003f38 <xQueueGenericSendFromISR+0x50>
 8003f32:	2001      	movs	r0, #1
 8003f34:	e000      	b.n	8003f38 <xQueueGenericSendFromISR+0x50>
 8003f36:	2000      	movs	r0, #0
 8003f38:	b940      	cbnz	r0, 8003f4c <xQueueGenericSendFromISR+0x64>
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	e7fe      	b.n	8003f4a <xQueueGenericSendFromISR+0x62>
 8003f4c:	461f      	mov	r7, r3
 8003f4e:	4690      	mov	r8, r2
 8003f50:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f52:	f001 fb99 	bl	8005688 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f56:	f3ef 8611 	mrs	r6, BASEPRI
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d301      	bcc.n	8003f76 <xQueueGenericSendFromISR+0x8e>
 8003f72:	2f02      	cmp	r7, #2
 8003f74:	d11e      	bne.n	8003fb4 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f76:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003f7a:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f7c:	463a      	mov	r2, r7
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4620      	mov	r0, r4
 8003f82:	f7ff fdbf 	bl	8003b04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f86:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f8a:	d10d      	bne.n	8003fa8 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f8e:	b19b      	cbz	r3, 8003fb8 <xQueueGenericSendFromISR+0xd0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f94:	f000 fcfe 	bl	8004994 <xTaskRemoveFromEventList>
 8003f98:	b180      	cbz	r0, 8003fbc <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f9a:	f1b8 0f00 	cmp.w	r8, #0
 8003f9e:	d00f      	beq.n	8003fc0 <xQueueGenericSendFromISR+0xd8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f8c8 0000 	str.w	r0, [r8]
 8003fa6:	e00c      	b.n	8003fc2 <xQueueGenericSendFromISR+0xda>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fa8:	1c6b      	adds	r3, r5, #1
 8003faa:	b25b      	sxtb	r3, r3
 8003fac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	e006      	b.n	8003fc2 <xQueueGenericSendFromISR+0xda>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	e004      	b.n	8003fc2 <xQueueGenericSendFromISR+0xda>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
 8003fb8:	2001      	movs	r0, #1
 8003fba:	e002      	b.n	8003fc2 <xQueueGenericSendFromISR+0xda>
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	e000      	b.n	8003fc2 <xQueueGenericSendFromISR+0xda>
 8003fc0:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fc2:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8003fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fca:	bf00      	nop

08003fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fd2:	b940      	cbnz	r0, 8003fe6 <xQueueReceive+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	e7fe      	b.n	8003fe4 <xQueueReceive+0x18>
 8003fe6:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fe8:	b919      	cbnz	r1, 8003ff2 <xQueueReceive+0x26>
 8003fea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003fec:	b91b      	cbnz	r3, 8003ff6 <xQueueReceive+0x2a>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e002      	b.n	8003ff8 <xQueueReceive+0x2c>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <xQueueReceive+0x2c>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	b943      	cbnz	r3, 800400c <xQueueReceive+0x40>
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	e7fe      	b.n	800400a <xQueueReceive+0x3e>
 800400c:	460e      	mov	r6, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800400e:	f000 fd59 	bl	8004ac4 <xTaskGetSchedulerState>
 8004012:	b918      	cbnz	r0, 800401c <xQueueReceive+0x50>
 8004014:	9b01      	ldr	r3, [sp, #4]
 8004016:	b91b      	cbnz	r3, 8004020 <xQueueReceive+0x54>
 8004018:	2301      	movs	r3, #1
 800401a:	e002      	b.n	8004022 <xQueueReceive+0x56>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <xQueueReceive+0x56>
 8004020:	2300      	movs	r3, #0
 8004022:	b943      	cbnz	r3, 8004036 <xQueueReceive+0x6a>
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	e7fe      	b.n	8004034 <xQueueReceive+0x68>
 8004036:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004038:	f001 f9fc 	bl	8005434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800403c:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800403e:	b1c5      	cbz	r5, 8004072 <xQueueReceive+0xa6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004040:	4631      	mov	r1, r6
 8004042:	4620      	mov	r0, r4
 8004044:	f7ff fd9a 	bl	8003b7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004048:	3d01      	subs	r5, #1
 800404a:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800404c:	6923      	ldr	r3, [r4, #16]
 800404e:	b163      	cbz	r3, 800406a <xQueueReceive+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004050:	f104 0010 	add.w	r0, r4, #16
 8004054:	f000 fc9e 	bl	8004994 <xTaskRemoveFromEventList>
 8004058:	b138      	cbz	r0, 800406a <xQueueReceive+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800405a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <xQueueReceive+0x154>)
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800406a:	f001 fa05 	bl	8005478 <vPortExitCritical>
				return pdPASS;
 800406e:	2001      	movs	r0, #1
 8004070:	e053      	b.n	800411a <xQueueReceive+0x14e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004072:	9b01      	ldr	r3, [sp, #4]
 8004074:	b91b      	cbnz	r3, 800407e <xQueueReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004076:	f001 f9ff 	bl	8005478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800407a:	2000      	movs	r0, #0
 800407c:	e04d      	b.n	800411a <xQueueReceive+0x14e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800407e:	b91f      	cbnz	r7, 8004088 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004080:	a802      	add	r0, sp, #8
 8004082:	f000 fccd 	bl	8004a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004086:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004088:	f001 f9f6 	bl	8005478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800408c:	f000 fabe 	bl	800460c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004090:	f001 f9d0 	bl	8005434 <vPortEnterCritical>
 8004094:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004098:	b25b      	sxtb	r3, r3
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d102      	bne.n	80040a6 <xQueueReceive+0xda>
 80040a0:	2300      	movs	r3, #0
 80040a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80040a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80040aa:	b25b      	sxtb	r3, r3
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d102      	bne.n	80040b8 <xQueueReceive+0xec>
 80040b2:	2300      	movs	r3, #0
 80040b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040b8:	f001 f9de 	bl	8005478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040bc:	a901      	add	r1, sp, #4
 80040be:	a802      	add	r0, sp, #8
 80040c0:	f000 fcba 	bl	8004a38 <xTaskCheckForTimeOut>
 80040c4:	b9f0      	cbnz	r0, 8004104 <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7ff fd0e 	bl	8003ae8 <prvIsQueueEmpty>
 80040cc:	b1a0      	cbz	r0, 80040f8 <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040ce:	9901      	ldr	r1, [sp, #4]
 80040d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040d4:	f000 fc2a 	bl	800492c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff fd61 	bl	8003ba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040de:	f000 fb35 	bl	800474c <xTaskResumeAll>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d1a8      	bne.n	8004038 <xQueueReceive+0x6c>
				{
					portYIELD_WITHIN_API();
 80040e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ea:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <xQueueReceive+0x154>)
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	e79f      	b.n	8004038 <xQueueReceive+0x6c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff fd51 	bl	8003ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040fe:	f000 fb25 	bl	800474c <xTaskResumeAll>
 8004102:	e799      	b.n	8004038 <xQueueReceive+0x6c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004104:	4620      	mov	r0, r4
 8004106:	f7ff fd4b 	bl	8003ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800410a:	f000 fb1f 	bl	800474c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800410e:	4620      	mov	r0, r4
 8004110:	f7ff fcea 	bl	8003ae8 <prvIsQueueEmpty>
 8004114:	2800      	cmp	r0, #0
 8004116:	d08f      	beq.n	8004038 <xQueueReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004118:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800411a:	b005      	add	sp, #20
 800411c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411e:	bf00      	nop
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004124:	2300      	movs	r3, #0
 8004126:	e00b      	b.n	8004140 <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004128:	4a07      	ldr	r2, [pc, #28]	; (8004148 <vQueueAddToRegistry+0x24>)
 800412a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800412e:	b932      	cbnz	r2, 800413e <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004130:	4a05      	ldr	r2, [pc, #20]	; (8004148 <vQueueAddToRegistry+0x24>)
 8004132:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004136:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800413a:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800413c:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800413e:	3301      	adds	r3, #1
 8004140:	2b07      	cmp	r3, #7
 8004142:	d9f1      	bls.n	8004128 <vQueueAddToRegistry+0x4>
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20006310 	.word	0x20006310

0800414c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	4604      	mov	r4, r0
 8004150:	460d      	mov	r5, r1
 8004152:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004154:	f001 f96e 	bl	8005434 <vPortEnterCritical>
 8004158:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800415c:	b25b      	sxtb	r3, r3
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d102      	bne.n	800416a <vQueueWaitForMessageRestricted+0x1e>
 8004164:	2300      	movs	r3, #0
 8004166:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800416a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800416e:	b25b      	sxtb	r3, r3
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d102      	bne.n	800417c <vQueueWaitForMessageRestricted+0x30>
 8004176:	2300      	movs	r3, #0
 8004178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800417c:	f001 f97c 	bl	8005478 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004182:	b92b      	cbnz	r3, 8004190 <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004184:	4632      	mov	r2, r6
 8004186:	4629      	mov	r1, r5
 8004188:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800418c:	f000 fbe6 	bl	800495c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004190:	4620      	mov	r0, r4
 8004192:	f7ff fd05 	bl	8003ba0 <prvUnlockQueue>
 8004196:	bd70      	pop	{r4, r5, r6, pc}

08004198 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <prvResetNextTaskUnblockTime+0x2c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	b90b      	cbnz	r3, 80041a4 <prvResetNextTaskUnblockTime+0xc>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <prvResetNextTaskUnblockTime+0xe>
 80041a4:	2300      	movs	r3, #0
 80041a6:	b123      	cbz	r3, 80041b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041a8:	f04f 32ff 	mov.w	r2, #4294967295
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <prvResetNextTaskUnblockTime+0x30>)
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041b2:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <prvResetNextTaskUnblockTime+0x2c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	4b02      	ldr	r3, [pc, #8]	; (80041c8 <prvResetNextTaskUnblockTime+0x30>)
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000200 	.word	0x20000200
 80041c8:	200006b0 	.word	0x200006b0

080041cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	4681      	mov	r9, r0
 80041d2:	460d      	mov	r5, r1
 80041d4:	4617      	mov	r7, r2
 80041d6:	469a      	mov	sl, r3
 80041d8:	9e08      	ldr	r6, [sp, #32]
 80041da:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80041de:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041e0:	0092      	lsls	r2, r2, #2
 80041e2:	21a5      	movs	r1, #165	; 0xa5
 80041e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80041e6:	f002 fcee 	bl	8006bc6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80041ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041ec:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80041f0:	3a01      	subs	r2, #1
 80041f2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041f6:	f027 0707 	bic.w	r7, r7, #7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041fa:	2300      	movs	r3, #0
 80041fc:	e006      	b.n	800420c <prvInitialiseNewTask+0x40>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041fe:	5ce9      	ldrb	r1, [r5, r3]
 8004200:	18e2      	adds	r2, r4, r3
 8004202:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004206:	5cea      	ldrb	r2, [r5, r3]
 8004208:	b112      	cbz	r2, 8004210 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800420a:	3301      	adds	r3, #1
 800420c:	2b0f      	cmp	r3, #15
 800420e:	d9f6      	bls.n	80041fe <prvInitialiseNewTask+0x32>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004210:	2300      	movs	r3, #0
 8004212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004216:	2e37      	cmp	r6, #55	; 0x37
 8004218:	d900      	bls.n	800421c <prvInitialiseNewTask+0x50>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800421a:	2637      	movs	r6, #55	; 0x37
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800421c:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800421e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004220:	2500      	movs	r5, #0
 8004222:	6525      	str	r5, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004224:	1d20      	adds	r0, r4, #4
 8004226:	f7ff fc11 	bl	8003a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800422a:	f104 0018 	add.w	r0, r4, #24
 800422e:	f7ff fc0d 	bl	8003a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004232:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004234:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8004238:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800423a:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800423c:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800423e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004242:	4652      	mov	r2, sl
 8004244:	4649      	mov	r1, r9
 8004246:	4638      	mov	r0, r7
 8004248:	f001 f8cc 	bl	80053e4 <pxPortInitialiseStack>
 800424c:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800424e:	f1b8 0f00 	cmp.w	r8, #0
 8004252:	d001      	beq.n	8004258 <prvInitialiseNewTask+0x8c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004254:	f8c8 4000 	str.w	r4, [r8]
 8004258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800425c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800425c:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800425e:	2400      	movs	r4, #0
 8004260:	e007      	b.n	8004272 <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004262:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004266:	0093      	lsls	r3, r2, #2
 8004268:	480e      	ldr	r0, [pc, #56]	; (80042a4 <prvInitialiseTaskLists+0x48>)
 800426a:	4418      	add	r0, r3
 800426c:	f7ff fbe2 	bl	8003a34 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004270:	3401      	adds	r4, #1
 8004272:	2c37      	cmp	r4, #55	; 0x37
 8004274:	d9f5      	bls.n	8004262 <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8004276:	4d0c      	ldr	r5, [pc, #48]	; (80042a8 <prvInitialiseTaskLists+0x4c>)
 8004278:	4628      	mov	r0, r5
 800427a:	f7ff fbdb 	bl	8003a34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800427e:	4c0b      	ldr	r4, [pc, #44]	; (80042ac <prvInitialiseTaskLists+0x50>)
 8004280:	4620      	mov	r0, r4
 8004282:	f7ff fbd7 	bl	8003a34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004286:	480a      	ldr	r0, [pc, #40]	; (80042b0 <prvInitialiseTaskLists+0x54>)
 8004288:	f7ff fbd4 	bl	8003a34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800428c:	4809      	ldr	r0, [pc, #36]	; (80042b4 <prvInitialiseTaskLists+0x58>)
 800428e:	f7ff fbd1 	bl	8003a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004292:	4809      	ldr	r0, [pc, #36]	; (80042b8 <prvInitialiseTaskLists+0x5c>)
 8004294:	f7ff fbce 	bl	8003a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <prvInitialiseTaskLists+0x60>)
 800429a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <prvInitialiseTaskLists+0x64>)
 800429e:	601c      	str	r4, [r3, #0]
 80042a0:	bd38      	pop	{r3, r4, r5, pc}
 80042a2:	bf00      	nop
 80042a4:	20000224 	.word	0x20000224
 80042a8:	200006b8 	.word	0x200006b8
 80042ac:	200006cc 	.word	0x200006cc
 80042b0:	20000694 	.word	0x20000694
 80042b4:	20000208 	.word	0x20000208
 80042b8:	200006e0 	.word	0x200006e0
 80042bc:	20000200 	.word	0x20000200
 80042c0:	2000021c 	.word	0x2000021c

080042c4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042c4:	b510      	push	{r4, lr}
 80042c6:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042c8:	f001 f8b4 	bl	8005434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <prvAddNewTaskToReadyList+0x8c>)
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042d4:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <prvAddNewTaskToReadyList+0x90>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	b93b      	cbnz	r3, 80042ea <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042da:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <prvAddNewTaskToReadyList+0x90>)
 80042dc:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d10d      	bne.n	8004300 <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042e4:	f7ff ffba 	bl	800425c <prvInitialiseTaskLists>
 80042e8:	e00a      	b.n	8004300 <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <prvAddNewTaskToReadyList+0x94>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	b93b      	cbnz	r3, 8004300 <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042f0:	4b18      	ldr	r3, [pc, #96]	; (8004354 <prvAddNewTaskToReadyList+0x90>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d801      	bhi.n	8004300 <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
 80042fc:	4b15      	ldr	r3, [pc, #84]	; (8004354 <prvAddNewTaskToReadyList+0x90>)
 80042fe:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004300:	4a16      	ldr	r2, [pc, #88]	; (800435c <prvAddNewTaskToReadyList+0x98>)
 8004302:	6813      	ldr	r3, [r2, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004308:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800430a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800430c:	4a14      	ldr	r2, [pc, #80]	; (8004360 <prvAddNewTaskToReadyList+0x9c>)
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	4293      	cmp	r3, r2
 8004312:	d901      	bls.n	8004318 <prvAddNewTaskToReadyList+0x54>
 8004314:	4a12      	ldr	r2, [pc, #72]	; (8004360 <prvAddNewTaskToReadyList+0x9c>)
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800431c:	009a      	lsls	r2, r3, #2
 800431e:	1d21      	adds	r1, r4, #4
 8004320:	4810      	ldr	r0, [pc, #64]	; (8004364 <prvAddNewTaskToReadyList+0xa0>)
 8004322:	4410      	add	r0, r2
 8004324:	f7ff fb96 	bl	8003a54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004328:	f001 f8a6 	bl	8005478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <prvAddNewTaskToReadyList+0x94>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	b16b      	cbz	r3, 800434e <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <prvAddNewTaskToReadyList+0x90>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800433a:	429a      	cmp	r2, r3
 800433c:	d207      	bcs.n	800434e <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <prvAddNewTaskToReadyList+0xa4>)
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	bd10      	pop	{r4, pc}
 8004350:	2000068c 	.word	0x2000068c
 8004354:	20000690 	.word	0x20000690
 8004358:	20000204 	.word	0x20000204
 800435c:	200006b4 	.word	0x200006b4
 8004360:	200006f4 	.word	0x200006f4
 8004364:	20000224 	.word	0x20000224
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800436c:	b510      	push	{r4, lr}
 800436e:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004370:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8004374:	b933      	cbnz	r3, 8004384 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004376:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004378:	f000 ffba 	bl	80052f0 <vPortFree>
				vPortFree( pxTCB );
 800437c:	4620      	mov	r0, r4
 800437e:	f000 ffb7 	bl	80052f0 <vPortFree>
 8004382:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004384:	2b01      	cmp	r3, #1
 8004386:	d102      	bne.n	800438e <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 8004388:	f000 ffb2 	bl	80052f0 <vPortFree>
 800438c:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800438e:	2b02      	cmp	r3, #2
 8004390:	d008      	beq.n	80043a4 <prvDeleteTCB+0x38>
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	e7fe      	b.n	80043a2 <prvDeleteTCB+0x36>
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	bf00      	nop

080043a8 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043a8:	b510      	push	{r4, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043aa:	e014      	b.n	80043d6 <prvCheckTasksWaitingTermination+0x2e>
		{
			taskENTER_CRITICAL();
 80043ac:	f001 f842 	bl	8005434 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <prvCheckTasksWaitingTermination+0x38>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b6:	1d20      	adds	r0, r4, #4
 80043b8:	f7ff fb72 	bl	8003aa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043bc:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <prvCheckTasksWaitingTermination+0x3c>)
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043c4:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <prvCheckTasksWaitingTermination+0x40>)
 80043c6:	6813      	ldr	r3, [r2, #0]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043cc:	f001 f854 	bl	8005478 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7ff ffcb 	bl	800436c <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043d6:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <prvCheckTasksWaitingTermination+0x40>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e6      	bne.n	80043ac <prvCheckTasksWaitingTermination+0x4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043de:	bd10      	pop	{r4, pc}
 80043e0:	20000208 	.word	0x20000208
 80043e4:	2000068c 	.word	0x2000068c
 80043e8:	20000688 	.word	0x20000688

080043ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043ec:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043ee:	f7ff ffdb 	bl	80043a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <prvIdleTask+0x20>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d9f9      	bls.n	80043ee <prvIdleTask+0x2>
			{
				taskYIELD();
 80043fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <prvIdleTask+0x24>)
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	e7f0      	b.n	80043ee <prvIdleTask+0x2>
 800440c:	20000224 	.word	0x20000224
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	4604      	mov	r4, r0
 8004418:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800441a:	4b17      	ldr	r3, [pc, #92]	; (8004478 <prvAddCurrentTaskToDelayedList+0x64>)
 800441c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800441e:	4b17      	ldr	r3, [pc, #92]	; (800447c <prvAddCurrentTaskToDelayedList+0x68>)
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	3004      	adds	r0, #4
 8004424:	f7ff fb3c 	bl	8003aa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004428:	f1b4 3fff 	cmp.w	r4, #4294967295
 800442c:	d107      	bne.n	800443e <prvAddCurrentTaskToDelayedList+0x2a>
 800442e:	b136      	cbz	r6, 800443e <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <prvAddCurrentTaskToDelayedList+0x68>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	3104      	adds	r1, #4
 8004436:	4812      	ldr	r0, [pc, #72]	; (8004480 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004438:	f7ff fb0c 	bl	8003a54 <vListInsertEnd>
 800443c:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800443e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <prvAddCurrentTaskToDelayedList+0x68>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004446:	42a5      	cmp	r5, r4
 8004448:	d907      	bls.n	800445a <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800444a:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <prvAddCurrentTaskToDelayedList+0x70>)
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <prvAddCurrentTaskToDelayedList+0x68>)
 8004450:	6819      	ldr	r1, [r3, #0]
 8004452:	3104      	adds	r1, #4
 8004454:	f7ff fb0a 	bl	8003a6c <vListInsert>
 8004458:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <prvAddCurrentTaskToDelayedList+0x74>)
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <prvAddCurrentTaskToDelayedList+0x68>)
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	3104      	adds	r1, #4
 8004464:	f7ff fb02 	bl	8003a6c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <prvAddCurrentTaskToDelayedList+0x78>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	429c      	cmp	r4, r3
 800446e:	d201      	bcs.n	8004474 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <prvAddCurrentTaskToDelayedList+0x78>)
 8004472:	601c      	str	r4, [r3, #0]
 8004474:	bd70      	pop	{r4, r5, r6, pc}
 8004476:	bf00      	nop
 8004478:	200006ac 	.word	0x200006ac
 800447c:	20000690 	.word	0x20000690
 8004480:	200006e0 	.word	0x200006e0
 8004484:	2000021c 	.word	0x2000021c
 8004488:	20000200 	.word	0x20000200
 800448c:	200006b0 	.word	0x200006b0

08004490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004496:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004498:	b945      	cbnz	r5, 80044ac <xTaskCreateStatic+0x1c>
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	e7fe      	b.n	80044aa <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80044ac:	b944      	cbnz	r4, 80044c0 <xTaskCreateStatic+0x30>
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	e7fe      	b.n	80044be <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044c0:	265c      	movs	r6, #92	; 0x5c
 80044c2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044c4:	9e04      	ldr	r6, [sp, #16]
 80044c6:	2e5c      	cmp	r6, #92	; 0x5c
 80044c8:	d008      	beq.n	80044dc <xTaskCreateStatic+0x4c>
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	e7fe      	b.n	80044da <xTaskCreateStatic+0x4a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044dc:	b18c      	cbz	r4, 8004502 <xTaskCreateStatic+0x72>
 80044de:	b185      	cbz	r5, 8004502 <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044e0:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044e2:	2502      	movs	r5, #2
 80044e4:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044e8:	2500      	movs	r5, #0
 80044ea:	9503      	str	r5, [sp, #12]
 80044ec:	9402      	str	r4, [sp, #8]
 80044ee:	ad05      	add	r5, sp, #20
 80044f0:	9501      	str	r5, [sp, #4]
 80044f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80044f4:	9500      	str	r5, [sp, #0]
 80044f6:	f7ff fe69 	bl	80041cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044fa:	4620      	mov	r0, r4
 80044fc:	f7ff fee2 	bl	80042c4 <prvAddNewTaskToReadyList>
 8004500:	e001      	b.n	8004506 <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
 8004506:	9805      	ldr	r0, [sp, #20]
 8004508:	b006      	add	sp, #24
 800450a:	bd70      	pop	{r4, r5, r6, pc}

0800450c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800450c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004510:	b085      	sub	sp, #20
 8004512:	4606      	mov	r6, r0
 8004514:	460f      	mov	r7, r1
 8004516:	4615      	mov	r5, r2
 8004518:	4698      	mov	r8, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800451a:	0090      	lsls	r0, r2, #2
 800451c:	f000 fe66 	bl	80051ec <pvPortMalloc>

			if( pxStack != NULL )
 8004520:	b160      	cbz	r0, 800453c <xTaskCreate+0x30>
 8004522:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004524:	205c      	movs	r0, #92	; 0x5c
 8004526:	f000 fe61 	bl	80051ec <pvPortMalloc>

				if( pxNewTCB != NULL )
 800452a:	4604      	mov	r4, r0
 800452c:	b110      	cbz	r0, 8004534 <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800452e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
 8004532:	e004      	b.n	800453e <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004534:	4648      	mov	r0, r9
 8004536:	f000 fedb 	bl	80052f0 <vPortFree>
 800453a:	e000      	b.n	800453e <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800453c:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800453e:	b19c      	cbz	r4, 8004568 <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004540:	2300      	movs	r3, #0
 8004542:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004546:	9303      	str	r3, [sp, #12]
 8004548:	9402      	str	r4, [sp, #8]
 800454a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	4643      	mov	r3, r8
 8004554:	462a      	mov	r2, r5
 8004556:	4639      	mov	r1, r7
 8004558:	4630      	mov	r0, r6
 800455a:	f7ff fe37 	bl	80041cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800455e:	4620      	mov	r0, r4
 8004560:	f7ff feb0 	bl	80042c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004564:	2001      	movs	r0, #1
 8004566:	e001      	b.n	800456c <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 800456c:	b005      	add	sp, #20
 800456e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004572:	bf00      	nop

08004574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004574:	b510      	push	{r4, lr}
 8004576:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004578:	2400      	movs	r4, #0
 800457a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800457c:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800457e:	aa07      	add	r2, sp, #28
 8004580:	a906      	add	r1, sp, #24
 8004582:	a805      	add	r0, sp, #20
 8004584:	f000 fdbc 	bl	8005100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004588:	9b05      	ldr	r3, [sp, #20]
 800458a:	9302      	str	r3, [sp, #8]
 800458c:	9b06      	ldr	r3, [sp, #24]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	9400      	str	r4, [sp, #0]
 8004592:	4623      	mov	r3, r4
 8004594:	9a07      	ldr	r2, [sp, #28]
 8004596:	4918      	ldr	r1, [pc, #96]	; (80045f8 <vTaskStartScheduler+0x84>)
 8004598:	4818      	ldr	r0, [pc, #96]	; (80045fc <vTaskStartScheduler+0x88>)
 800459a:	f7ff ff79 	bl	8004490 <xTaskCreateStatic>
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800459e:	b108      	cbz	r0, 80045a4 <vTaskStartScheduler+0x30>
		{
			xReturn = pdPASS;
 80045a0:	2001      	movs	r0, #1
 80045a2:	e000      	b.n	80045a6 <vTaskStartScheduler+0x32>
		}
		else
		{
			xReturn = pdFAIL;
 80045a4:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045a6:	2801      	cmp	r0, #1
 80045a8:	d101      	bne.n	80045ae <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
 80045aa:	f000 fb4f 	bl	8004c4c <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045ae:	2801      	cmp	r0, #1
 80045b0:	d114      	bne.n	80045dc <vTaskStartScheduler+0x68>
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045c2:	f04f 32ff 	mov.w	r2, #4294967295
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <vTaskStartScheduler+0x8c>)
 80045c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045ca:	2201      	movs	r2, #1
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <vTaskStartScheduler+0x90>)
 80045ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80045d0:	2200      	movs	r2, #0
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <vTaskStartScheduler+0x94>)
 80045d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045d6:	f000 ffcf 	bl	8005578 <xPortStartScheduler>
 80045da:	e00b      	b.n	80045f4 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045e0:	d108      	bne.n	80045f4 <vTaskStartScheduler+0x80>
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	e7fe      	b.n	80045f2 <vTaskStartScheduler+0x7e>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045f4:	b008      	add	sp, #32
 80045f6:	bd10      	pop	{r4, pc}
 80045f8:	08007f7c 	.word	0x08007f7c
 80045fc:	080043ed 	.word	0x080043ed
 8004600:	200006b0 	.word	0x200006b0
 8004604:	20000204 	.word	0x20000204
 8004608:	200006ac 	.word	0x200006ac

0800460c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800460c:	4a02      	ldr	r2, [pc, #8]	; (8004618 <vTaskSuspendAll+0xc>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	3301      	adds	r3, #1
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20000684 	.word	0x20000684

0800461c <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800461c:	4b01      	ldr	r3, [pc, #4]	; (8004624 <xTaskGetTickCount+0x8>)
 800461e:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	200006ac 	.word	0x200006ac

08004628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800462a:	4b3d      	ldr	r3, [pc, #244]	; (8004720 <xTaskIncrementTick+0xf8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d168      	bne.n	8004704 <xTaskIncrementTick+0xdc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004632:	4b3c      	ldr	r3, [pc, #240]	; (8004724 <xTaskIncrementTick+0xfc>)
 8004634:	681d      	ldr	r5, [r3, #0]
 8004636:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004638:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800463a:	b9c5      	cbnz	r5, 800466e <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 800463c:	4b3a      	ldr	r3, [pc, #232]	; (8004728 <xTaskIncrementTick+0x100>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	b143      	cbz	r3, 8004656 <xTaskIncrementTick+0x2e>
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	e7fe      	b.n	8004654 <xTaskIncrementTick+0x2c>
 8004656:	4a34      	ldr	r2, [pc, #208]	; (8004728 <xTaskIncrementTick+0x100>)
 8004658:	6811      	ldr	r1, [r2, #0]
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <xTaskIncrementTick+0x104>)
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	6010      	str	r0, [r2, #0]
 8004660:	6019      	str	r1, [r3, #0]
 8004662:	4a33      	ldr	r2, [pc, #204]	; (8004730 <xTaskIncrementTick+0x108>)
 8004664:	6813      	ldr	r3, [r2, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	f7ff fd95 	bl	8004198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <xTaskIncrementTick+0x10c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	429d      	cmp	r5, r3
 8004674:	d203      	bcs.n	800467e <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004676:	2400      	movs	r4, #0
 8004678:	e039      	b.n	80046ee <xTaskIncrementTick+0xc6>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
 800467a:	2401      	movs	r4, #1
 800467c:	e000      	b.n	8004680 <xTaskIncrementTick+0x58>
 800467e:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004680:	4b29      	ldr	r3, [pc, #164]	; (8004728 <xTaskIncrementTick+0x100>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	b90b      	cbnz	r3, 800468c <xTaskIncrementTick+0x64>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <xTaskIncrementTick+0x66>
 800468c:	2300      	movs	r3, #0
 800468e:	b123      	cbz	r3, 800469a <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004690:	f04f 32ff 	mov.w	r2, #4294967295
 8004694:	4b27      	ldr	r3, [pc, #156]	; (8004734 <xTaskIncrementTick+0x10c>)
 8004696:	601a      	str	r2, [r3, #0]
					break;
 8004698:	e029      	b.n	80046ee <xTaskIncrementTick+0xc6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <xTaskIncrementTick+0x100>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046a2:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
 80046a4:	429d      	cmp	r5, r3
 80046a6:	d202      	bcs.n	80046ae <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046a8:	4a22      	ldr	r2, [pc, #136]	; (8004734 <xTaskIncrementTick+0x10c>)
 80046aa:	6013      	str	r3, [r2, #0]
						break;
 80046ac:	e01f      	b.n	80046ee <xTaskIncrementTick+0xc6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ae:	1d37      	adds	r7, r6, #4
 80046b0:	4638      	mov	r0, r7
 80046b2:	f7ff f9f5 	bl	8003aa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80046b8:	b11b      	cbz	r3, 80046c2 <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ba:	f106 0018 	add.w	r0, r6, #24
 80046be:	f7ff f9ef 	bl	8003aa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046c2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80046c4:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <xTaskIncrementTick+0x110>)
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d901      	bls.n	80046d0 <xTaskIncrementTick+0xa8>
 80046cc:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <xTaskIncrementTick+0x110>)
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046d4:	009a      	lsls	r2, r3, #2
 80046d6:	4639      	mov	r1, r7
 80046d8:	4818      	ldr	r0, [pc, #96]	; (800473c <xTaskIncrementTick+0x114>)
 80046da:	4410      	add	r0, r2
 80046dc:	f7ff f9ba 	bl	8003a54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80046e2:	4b17      	ldr	r3, [pc, #92]	; (8004740 <xTaskIncrementTick+0x118>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d2c6      	bcs.n	800467a <xTaskIncrementTick+0x52>
 80046ec:	e7c8      	b.n	8004680 <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <xTaskIncrementTick+0x118>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046f8:	009a      	lsls	r2, r3, #2
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <xTaskIncrementTick+0x114>)
 80046fc:	589b      	ldr	r3, [r3, r2]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d806      	bhi.n	8004710 <xTaskIncrementTick+0xe8>
 8004702:	e006      	b.n	8004712 <xTaskIncrementTick+0xea>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004704:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <xTaskIncrementTick+0x11c>)
 8004706:	6813      	ldr	r3, [r2, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800470c:	2400      	movs	r4, #0
 800470e:	e000      	b.n	8004712 <xTaskIncrementTick+0xea>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 8004710:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004712:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <xTaskIncrementTick+0x120>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b103      	cbz	r3, 800471a <xTaskIncrementTick+0xf2>
		{
			xSwitchRequired = pdTRUE;
 8004718:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 800471a:	4620      	mov	r0, r4
 800471c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800471e:	bf00      	nop
 8004720:	20000684 	.word	0x20000684
 8004724:	200006ac 	.word	0x200006ac
 8004728:	20000200 	.word	0x20000200
 800472c:	2000021c 	.word	0x2000021c
 8004730:	200006a8 	.word	0x200006a8
 8004734:	200006b0 	.word	0x200006b0
 8004738:	200006f4 	.word	0x200006f4
 800473c:	20000224 	.word	0x20000224
 8004740:	20000690 	.word	0x20000690
 8004744:	20000220 	.word	0x20000220
 8004748:	200006f8 	.word	0x200006f8

0800474c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800474c:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800474e:	4b34      	ldr	r3, [pc, #208]	; (8004820 <xTaskResumeAll+0xd4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	b943      	cbnz	r3, 8004766 <xTaskResumeAll+0x1a>
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	e7fe      	b.n	8004764 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004766:	f000 fe65 	bl	8005434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800476a:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <xTaskResumeAll+0xd4>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	3a01      	subs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d14b      	bne.n	8004810 <xTaskResumeAll+0xc4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004778:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <xTaskResumeAll+0xd8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	bb2b      	cbnz	r3, 80047ca <xTaskResumeAll+0x7e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 800477e:	2400      	movs	r4, #0
 8004780:	e049      	b.n	8004816 <xTaskResumeAll+0xca>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004782:	4b29      	ldr	r3, [pc, #164]	; (8004828 <xTaskResumeAll+0xdc>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004788:	f104 0018 	add.w	r0, r4, #24
 800478c:	f7ff f988 	bl	8003aa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004790:	1d25      	adds	r5, r4, #4
 8004792:	4628      	mov	r0, r5
 8004794:	f7ff f984 	bl	8003aa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800479a:	4a24      	ldr	r2, [pc, #144]	; (800482c <xTaskResumeAll+0xe0>)
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <xTaskResumeAll+0x5a>
 80047a2:	4a22      	ldr	r2, [pc, #136]	; (800482c <xTaskResumeAll+0xe0>)
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047aa:	009a      	lsls	r2, r3, #2
 80047ac:	4629      	mov	r1, r5
 80047ae:	4820      	ldr	r0, [pc, #128]	; (8004830 <xTaskResumeAll+0xe4>)
 80047b0:	4410      	add	r0, r2
 80047b2:	f7ff f94f 	bl	8003a54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <xTaskResumeAll+0xe8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	429a      	cmp	r2, r3
 80047c0:	d304      	bcc.n	80047cc <xTaskResumeAll+0x80>
					{
						xYieldPending = pdTRUE;
 80047c2:	2201      	movs	r2, #1
 80047c4:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <xTaskResumeAll+0xec>)
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e000      	b.n	80047cc <xTaskResumeAll+0x80>
 80047ca:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047cc:	4b16      	ldr	r3, [pc, #88]	; (8004828 <xTaskResumeAll+0xdc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1d6      	bne.n	8004782 <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047d4:	b10c      	cbz	r4, 80047da <xTaskResumeAll+0x8e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047d6:	f7ff fcdf 	bl	8004198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047da:	4b18      	ldr	r3, [pc, #96]	; (800483c <xTaskResumeAll+0xf0>)
 80047dc:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047de:	b154      	cbz	r4, 80047f6 <xTaskResumeAll+0xaa>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047e0:	f7ff ff22 	bl	8004628 <xTaskIncrementTick>
 80047e4:	b110      	cbz	r0, 80047ec <xTaskResumeAll+0xa0>
							{
								xYieldPending = pdTRUE;
 80047e6:	2201      	movs	r2, #1
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <xTaskResumeAll+0xec>)
 80047ea:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047ec:	3c01      	subs	r4, #1
 80047ee:	d1f7      	bne.n	80047e0 <xTaskResumeAll+0x94>

						uxPendedTicks = 0;
 80047f0:	2200      	movs	r2, #0
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <xTaskResumeAll+0xf0>)
 80047f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <xTaskResumeAll+0xec>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b15b      	cbz	r3, 8004814 <xTaskResumeAll+0xc8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <xTaskResumeAll+0xf4>)
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800480c:	2401      	movs	r4, #1
 800480e:	e002      	b.n	8004816 <xTaskResumeAll+0xca>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8004810:	2400      	movs	r4, #0
 8004812:	e000      	b.n	8004816 <xTaskResumeAll+0xca>
 8004814:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004816:	f000 fe2f 	bl	8005478 <vPortExitCritical>

	return xAlreadyYielded;
}
 800481a:	4620      	mov	r0, r4
 800481c:	bd38      	pop	{r3, r4, r5, pc}
 800481e:	bf00      	nop
 8004820:	20000684 	.word	0x20000684
 8004824:	2000068c 	.word	0x2000068c
 8004828:	20000694 	.word	0x20000694
 800482c:	200006f4 	.word	0x200006f4
 8004830:	20000224 	.word	0x20000224
 8004834:	20000690 	.word	0x20000690
 8004838:	200006f8 	.word	0x200006f8
 800483c:	20000220 	.word	0x20000220
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004844:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004846:	b1a8      	cbz	r0, 8004874 <vTaskDelay+0x30>
 8004848:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <vTaskDelay+0x48>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b143      	cbz	r3, 8004862 <vTaskDelay+0x1e>
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	e7fe      	b.n	8004860 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004862:	f7ff fed3 	bl	800460c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004866:	2100      	movs	r1, #0
 8004868:	4620      	mov	r0, r4
 800486a:	f7ff fdd3 	bl	8004414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800486e:	f7ff ff6d 	bl	800474c <xTaskResumeAll>
 8004872:	e000      	b.n	8004876 <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
 8004874:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004876:	b938      	cbnz	r0, 8004888 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 8004878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <vTaskDelay+0x4c>)
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	bd10      	pop	{r4, pc}
 800488a:	bf00      	nop
 800488c:	20000684 	.word	0x20000684
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004894:	4b20      	ldr	r3, [pc, #128]	; (8004918 <vTaskSwitchContext+0x84>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	b11b      	cbz	r3, 80048a2 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800489a:	2201      	movs	r2, #1
 800489c:	4b1f      	ldr	r3, [pc, #124]	; (800491c <vTaskSwitchContext+0x88>)
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
 80048a2:	2200      	movs	r2, #0
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <vTaskSwitchContext+0x88>)
 80048a6:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80048a8:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <vTaskSwitchContext+0x8c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	e00a      	b.n	80048c4 <vTaskSwitchContext+0x30>
 80048ae:	b943      	cbnz	r3, 80048c2 <vTaskSwitchContext+0x2e>
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	e7fe      	b.n	80048c0 <vTaskSwitchContext+0x2c>
 80048c2:	3b01      	subs	r3, #1
 80048c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80048c8:	008a      	lsls	r2, r1, #2
 80048ca:	4916      	ldr	r1, [pc, #88]	; (8004924 <vTaskSwitchContext+0x90>)
 80048cc:	588a      	ldr	r2, [r1, r2]
 80048ce:	2a00      	cmp	r2, #0
 80048d0:	d0ed      	beq.n	80048ae <vTaskSwitchContext+0x1a>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048d2:	b430      	push	{r4, r5}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80048d4:	460d      	mov	r5, r1
 80048d6:	0099      	lsls	r1, r3, #2
 80048d8:	18ca      	adds	r2, r1, r3
 80048da:	0090      	lsls	r0, r2, #2
 80048dc:	4428      	add	r0, r5
 80048de:	6842      	ldr	r2, [r0, #4]
 80048e0:	6854      	ldr	r4, [r2, #4]
 80048e2:	6044      	str	r4, [r0, #4]
 80048e4:	4419      	add	r1, r3
 80048e6:	008a      	lsls	r2, r1, #2
 80048e8:	3208      	adds	r2, #8
 80048ea:	442a      	add	r2, r5
 80048ec:	4294      	cmp	r4, r2
 80048ee:	d105      	bne.n	80048fc <vTaskSwitchContext+0x68>
 80048f0:	6860      	ldr	r0, [r4, #4]
 80048f2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80048f6:	008a      	lsls	r2, r1, #2
 80048f8:	442a      	add	r2, r5
 80048fa:	6050      	str	r0, [r2, #4]
 80048fc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004900:	008a      	lsls	r2, r1, #2
 8004902:	4908      	ldr	r1, [pc, #32]	; (8004924 <vTaskSwitchContext+0x90>)
 8004904:	440a      	add	r2, r1
 8004906:	6852      	ldr	r2, [r2, #4]
 8004908:	68d1      	ldr	r1, [r2, #12]
 800490a:	4a07      	ldr	r2, [pc, #28]	; (8004928 <vTaskSwitchContext+0x94>)
 800490c:	6011      	str	r1, [r2, #0]
 800490e:	4a04      	ldr	r2, [pc, #16]	; (8004920 <vTaskSwitchContext+0x8c>)
 8004910:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004912:	bc30      	pop	{r4, r5}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000684 	.word	0x20000684
 800491c:	200006f8 	.word	0x200006f8
 8004920:	200006f4 	.word	0x200006f4
 8004924:	20000224 	.word	0x20000224
 8004928:	20000690 	.word	0x20000690

0800492c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
 800492c:	b940      	cbnz	r0, 8004940 <vTaskPlaceOnEventList+0x14>
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	e7fe      	b.n	800493e <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004940:	b510      	push	{r4, lr}
 8004942:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <vTaskPlaceOnEventList+0x2c>)
 8004946:	6819      	ldr	r1, [r3, #0]
 8004948:	3118      	adds	r1, #24
 800494a:	f7ff f88f 	bl	8003a6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800494e:	2101      	movs	r1, #1
 8004950:	4620      	mov	r0, r4
 8004952:	f7ff fd5f 	bl	8004414 <prvAddCurrentTaskToDelayedList>
 8004956:	bd10      	pop	{r4, pc}
 8004958:	20000690 	.word	0x20000690

0800495c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800495c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800495e:	b940      	cbnz	r0, 8004972 <vTaskPlaceOnEventListRestricted+0x16>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	e7fe      	b.n	8004970 <vTaskPlaceOnEventListRestricted+0x14>
 8004972:	460c      	mov	r4, r1
 8004974:	4615      	mov	r5, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004976:	4a06      	ldr	r2, [pc, #24]	; (8004990 <vTaskPlaceOnEventListRestricted+0x34>)
 8004978:	6811      	ldr	r1, [r2, #0]
 800497a:	3118      	adds	r1, #24
 800497c:	f7ff f86a 	bl	8003a54 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004980:	b10d      	cbz	r5, 8004986 <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
 8004982:	f04f 34ff 	mov.w	r4, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004986:	4629      	mov	r1, r5
 8004988:	4620      	mov	r0, r4
 800498a:	f7ff fd43 	bl	8004414 <prvAddCurrentTaskToDelayedList>
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	20000690 	.word	0x20000690

08004994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004994:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004996:	68c3      	ldr	r3, [r0, #12]
 8004998:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800499a:	b944      	cbnz	r4, 80049ae <xTaskRemoveFromEventList+0x1a>
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	e7fe      	b.n	80049ac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049ae:	f104 0518 	add.w	r5, r4, #24
 80049b2:	4628      	mov	r0, r5
 80049b4:	f7ff f874 	bl	8003aa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <xTaskRemoveFromEventList+0x74>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	b99b      	cbnz	r3, 80049e6 <xTaskRemoveFromEventList+0x52>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049be:	1d25      	adds	r5, r4, #4
 80049c0:	4628      	mov	r0, r5
 80049c2:	f7ff f86d 	bl	8003aa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049c8:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <xTaskRemoveFromEventList+0x78>)
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <xTaskRemoveFromEventList+0x40>
 80049d0:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <xTaskRemoveFromEventList+0x78>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049d8:	009a      	lsls	r2, r3, #2
 80049da:	4629      	mov	r1, r5
 80049dc:	480c      	ldr	r0, [pc, #48]	; (8004a10 <xTaskRemoveFromEventList+0x7c>)
 80049de:	4410      	add	r0, r2
 80049e0:	f7ff f838 	bl	8003a54 <vListInsertEnd>
 80049e4:	e003      	b.n	80049ee <xTaskRemoveFromEventList+0x5a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049e6:	4629      	mov	r1, r5
 80049e8:	480a      	ldr	r0, [pc, #40]	; (8004a14 <xTaskRemoveFromEventList+0x80>)
 80049ea:	f7ff f833 	bl	8003a54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049f0:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <xTaskRemoveFromEventList+0x84>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d903      	bls.n	8004a02 <xTaskRemoveFromEventList+0x6e>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049fa:	2001      	movs	r0, #1
 80049fc:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <xTaskRemoveFromEventList+0x88>)
 80049fe:	6018      	str	r0, [r3, #0]
 8004a00:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
 8004a02:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8004a04:	bd38      	pop	{r3, r4, r5, pc}
 8004a06:	bf00      	nop
 8004a08:	20000684 	.word	0x20000684
 8004a0c:	200006f4 	.word	0x200006f4
 8004a10:	20000224 	.word	0x20000224
 8004a14:	20000694 	.word	0x20000694
 8004a18:	20000690 	.word	0x20000690
 8004a1c:	200006f8 	.word	0x200006f8

08004a20 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <vTaskInternalSetTimeOutState+0x10>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a26:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <vTaskInternalSetTimeOutState+0x14>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6043      	str	r3, [r0, #4]
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	200006a8 	.word	0x200006a8
 8004a34:	200006ac 	.word	0x200006ac

08004a38 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a3a:	b940      	cbnz	r0, 8004a4e <xTaskCheckForTimeOut+0x16>
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	e7fe      	b.n	8004a4c <xTaskCheckForTimeOut+0x14>
 8004a4e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8004a50:	b941      	cbnz	r1, 8004a64 <xTaskCheckForTimeOut+0x2c>
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	e7fe      	b.n	8004a62 <xTaskCheckForTimeOut+0x2a>
 8004a64:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
 8004a66:	f000 fce5 	bl	8005434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <xTaskCheckForTimeOut+0x78>)
 8004a6c:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a6e:	6869      	ldr	r1, [r5, #4]
 8004a70:	1a42      	subs	r2, r0, r1
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d013      	beq.n	8004aa2 <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a7a:	682f      	ldr	r7, [r5, #0]
 8004a7c:	4e0d      	ldr	r6, [pc, #52]	; (8004ab4 <xTaskCheckForTimeOut+0x7c>)
 8004a7e:	6836      	ldr	r6, [r6, #0]
 8004a80:	42b7      	cmp	r7, r6
 8004a82:	d001      	beq.n	8004a88 <xTaskCheckForTimeOut+0x50>
 8004a84:	4288      	cmp	r0, r1
 8004a86:	d20e      	bcs.n	8004aa6 <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d206      	bcs.n	8004a9a <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a90:	4628      	mov	r0, r5
 8004a92:	f7ff ffc5 	bl	8004a20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a96:	2400      	movs	r4, #0
 8004a98:	e006      	b.n	8004aa8 <xTaskCheckForTimeOut+0x70>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004a9e:	2401      	movs	r4, #1
 8004aa0:	e002      	b.n	8004aa8 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004aa2:	2400      	movs	r4, #0
 8004aa4:	e000      	b.n	8004aa8 <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004aa6:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8004aa8:	f000 fce6 	bl	8005478 <vPortExitCritical>

	return xReturn;
}
 8004aac:	4620      	mov	r0, r4
 8004aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab0:	200006ac 	.word	0x200006ac
 8004ab4:	200006a8 	.word	0x200006a8

08004ab8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8004ab8:	2201      	movs	r2, #1
 8004aba:	4b01      	ldr	r3, [pc, #4]	; (8004ac0 <vTaskMissedYield+0x8>)
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	4770      	bx	lr
 8004ac0:	200006f8 	.word	0x200006f8

08004ac4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <xTaskGetSchedulerState+0x18>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b123      	cbz	r3, 8004ad4 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <xTaskGetSchedulerState+0x1c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	b91b      	cbnz	r3, 8004ad8 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ad0:	2002      	movs	r0, #2
 8004ad2:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ad8:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
 8004ada:	4770      	bx	lr
 8004adc:	20000204 	.word	0x20000204
 8004ae0:	20000684 	.word	0x20000684

08004ae4 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d03a      	beq.n	8004b5e <xTaskPriorityDisinherit+0x7a>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004aec:	4a1f      	ldr	r2, [pc, #124]	; (8004b6c <xTaskPriorityDisinherit+0x88>)
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	4290      	cmp	r0, r2
 8004af2:	d008      	beq.n	8004b06 <xTaskPriorityDisinherit+0x22>
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	e7fe      	b.n	8004b04 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b06:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004b08:	b942      	cbnz	r2, 8004b1c <xTaskPriorityDisinherit+0x38>
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	e7fe      	b.n	8004b1a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8004b1c:	3a01      	subs	r2, #1
 8004b1e:	6502      	str	r2, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b20:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004b22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004b24:	4288      	cmp	r0, r1
 8004b26:	d01c      	beq.n	8004b62 <xTaskPriorityDisinherit+0x7e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b28:	b9ea      	cbnz	r2, 8004b66 <xTaskPriorityDisinherit+0x82>
 8004b2a:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b2c:	1d1d      	adds	r5, r3, #4
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f7fe ffb6 	bl	8003aa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b36:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b3c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b3e:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <xTaskPriorityDisinherit+0x8c>)
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <xTaskPriorityDisinherit+0x66>
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <xTaskPriorityDisinherit+0x8c>)
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b4e:	009a      	lsls	r2, r3, #2
 8004b50:	4629      	mov	r1, r5
 8004b52:	4808      	ldr	r0, [pc, #32]	; (8004b74 <xTaskPriorityDisinherit+0x90>)
 8004b54:	4410      	add	r0, r2
 8004b56:	f7fe ff7d 	bl	8003a54 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8004b5e:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8004b60:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8004b62:	2000      	movs	r0, #0
 8004b64:	bd38      	pop	{r3, r4, r5, pc}
 8004b66:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8004b68:	bd38      	pop	{r3, r4, r5, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000690 	.word	0x20000690
 8004b70:	200006f4 	.word	0x200006f4
 8004b74:	20000224 	.word	0x20000224

08004b78 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <prvGetNextExpireTime+0x1c>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	6813      	ldr	r3, [r2, #0]
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b86:	b913      	cbnz	r3, 8004b8e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b88:	68d3      	ldr	r3, [r2, #12]
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b8e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	200006fc 	.word	0x200006fc

08004b98 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b98:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b9a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b9c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b9e:	4291      	cmp	r1, r2
 8004ba0:	d80a      	bhi.n	8004bb8 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ba2:	1ad2      	subs	r2, r2, r3
 8004ba4:	6983      	ldr	r3, [r0, #24]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d211      	bcs.n	8004bce <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004baa:	1d01      	adds	r1, r0, #4
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <prvInsertTimerInActiveList+0x40>)
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	f7fe ff5c 	bl	8003a6c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d201      	bcs.n	8004bc0 <prvInsertTimerInActiveList+0x28>
 8004bbc:	4299      	cmp	r1, r3
 8004bbe:	d208      	bcs.n	8004bd2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bc0:	1d01      	adds	r1, r0, #4
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <prvInsertTimerInActiveList+0x44>)
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	f7fe ff51 	bl	8003a6c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8004bca:	2000      	movs	r0, #0
 8004bcc:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bce:	2001      	movs	r0, #1
 8004bd0:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bd2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8004bd4:	bd08      	pop	{r3, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000820 	.word	0x20000820
 8004bdc:	200006fc 	.word	0x200006fc

08004be0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004be0:	b530      	push	{r4, r5, lr}
 8004be2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004be4:	f000 fc26 	bl	8005434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004be8:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <prvCheckForValidListAndQueue+0x4c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	b9cb      	cbnz	r3, 8004c22 <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bee:	4d10      	ldr	r5, [pc, #64]	; (8004c30 <prvCheckForValidListAndQueue+0x50>)
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f7fe ff1f 	bl	8003a34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bf6:	4c0f      	ldr	r4, [pc, #60]	; (8004c34 <prvCheckForValidListAndQueue+0x54>)
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7fe ff1b 	bl	8003a34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <prvCheckForValidListAndQueue+0x58>)
 8004c00:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c02:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <prvCheckForValidListAndQueue+0x5c>)
 8004c04:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c06:	2300      	movs	r3, #0
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <prvCheckForValidListAndQueue+0x60>)
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	; (8004c44 <prvCheckForValidListAndQueue+0x64>)
 8004c0e:	2110      	movs	r1, #16
 8004c10:	200a      	movs	r0, #10
 8004c12:	f7ff f84b 	bl	8003cac <xQueueGenericCreateStatic>
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <prvCheckForValidListAndQueue+0x4c>)
 8004c18:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c1a:	b110      	cbz	r0, 8004c22 <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c1c:	490a      	ldr	r1, [pc, #40]	; (8004c48 <prvCheckForValidListAndQueue+0x68>)
 8004c1e:	f7ff fa81 	bl	8004124 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c22:	f000 fc29 	bl	8005478 <vPortExitCritical>
}
 8004c26:	b003      	add	sp, #12
 8004c28:	bd30      	pop	{r4, r5, pc}
 8004c2a:	bf00      	nop
 8004c2c:	2000081c 	.word	0x2000081c
 8004c30:	20000700 	.word	0x20000700
 8004c34:	20000714 	.word	0x20000714
 8004c38:	200006fc 	.word	0x200006fc
 8004c3c:	20000820 	.word	0x20000820
 8004c40:	200007cc 	.word	0x200007cc
 8004c44:	2000072c 	.word	0x2000072c
 8004c48:	08007f84 	.word	0x08007f84

08004c4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c50:	f7ff ffc6 	bl	8004be0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c54:	4b15      	ldr	r3, [pc, #84]	; (8004cac <xTimerCreateTimerTask+0x60>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	b1d3      	cbz	r3, 8004c90 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c5a:	2400      	movs	r4, #0
 8004c5c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c5e:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c60:	aa07      	add	r2, sp, #28
 8004c62:	a906      	add	r1, sp, #24
 8004c64:	a805      	add	r0, sp, #20
 8004c66:	f000 fa57 	bl	8005118 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c6a:	9b05      	ldr	r3, [sp, #20]
 8004c6c:	9302      	str	r3, [sp, #8]
 8004c6e:	9b06      	ldr	r3, [sp, #24]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	2302      	movs	r3, #2
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4623      	mov	r3, r4
 8004c78:	9a07      	ldr	r2, [sp, #28]
 8004c7a:	490d      	ldr	r1, [pc, #52]	; (8004cb0 <xTimerCreateTimerTask+0x64>)
 8004c7c:	480d      	ldr	r0, [pc, #52]	; (8004cb4 <xTimerCreateTimerTask+0x68>)
 8004c7e:	f7ff fc07 	bl	8004490 <xTaskCreateStatic>
 8004c82:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <xTimerCreateTimerTask+0x6c>)
 8004c84:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c86:	b908      	cbnz	r0, 8004c8c <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8004c88:	4620      	mov	r0, r4
 8004c8a:	e002      	b.n	8004c92 <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
 8004c8c:	2001      	movs	r0, #1
 8004c8e:	e000      	b.n	8004c92 <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8004c90:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c92:	b940      	cbnz	r0, 8004ca6 <xTimerCreateTimerTask+0x5a>
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	e7fe      	b.n	8004ca4 <xTimerCreateTimerTask+0x58>
	return xReturn;
}
 8004ca6:	b008      	add	sp, #32
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	bf00      	nop
 8004cac:	2000081c 	.word	0x2000081c
 8004cb0:	08007f8c 	.word	0x08007f8c
 8004cb4:	08004f71 	.word	0x08004f71
 8004cb8:	20000824 	.word	0x20000824

08004cbc <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cbc:	b940      	cbnz	r0, 8004cd0 <xTimerGenericCommand+0x14>
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	e7fe      	b.n	8004cce <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004cd0:	b530      	push	{r4, r5, lr}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	4615      	mov	r5, r2
 8004cd6:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cd8:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <xTimerGenericCommand+0x68>)
 8004cda:	6810      	ldr	r0, [r2, #0]
 8004cdc:	b1f0      	cbz	r0, 8004d1c <xTimerGenericCommand+0x60>
 8004cde:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ce0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ce2:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ce4:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ce6:	2905      	cmp	r1, #5
 8004ce8:	dc13      	bgt.n	8004d12 <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cea:	f7ff feeb 	bl	8004ac4 <xTaskGetSchedulerState>
 8004cee:	2802      	cmp	r0, #2
 8004cf0:	d107      	bne.n	8004d02 <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9a08      	ldr	r2, [sp, #32]
 8004cf6:	4669      	mov	r1, sp
 8004cf8:	480a      	ldr	r0, [pc, #40]	; (8004d24 <xTimerGenericCommand+0x68>)
 8004cfa:	6800      	ldr	r0, [r0, #0]
 8004cfc:	f7ff f82c 	bl	8003d58 <xQueueGenericSend>
 8004d00:	e00d      	b.n	8004d1e <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d02:	2300      	movs	r3, #0
 8004d04:	461a      	mov	r2, r3
 8004d06:	4669      	mov	r1, sp
 8004d08:	4806      	ldr	r0, [pc, #24]	; (8004d24 <xTimerGenericCommand+0x68>)
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	f7ff f824 	bl	8003d58 <xQueueGenericSend>
 8004d10:	e005      	b.n	8004d1e <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d12:	2300      	movs	r3, #0
 8004d14:	4669      	mov	r1, sp
 8004d16:	f7ff f8e7 	bl	8003ee8 <xQueueGenericSendFromISR>
 8004d1a:	e000      	b.n	8004d1e <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 8004d1c:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8004d1e:	b005      	add	sp, #20
 8004d20:	bd30      	pop	{r4, r5, pc}
 8004d22:	bf00      	nop
 8004d24:	2000081c 	.word	0x2000081c

08004d28 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d2c:	e029      	b.n	8004d82 <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d32:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d34:	1d25      	adds	r5, r4, #4
 8004d36:	4628      	mov	r0, r5
 8004d38:	f7fe feb2 	bl	8003aa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d42:	69e3      	ldr	r3, [r4, #28]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d11c      	bne.n	8004d82 <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d48:	69a3      	ldr	r3, [r4, #24]
 8004d4a:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8004d4c:	429e      	cmp	r6, r3
 8004d4e:	d207      	bcs.n	8004d60 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d50:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d52:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d54:	4629      	mov	r1, r5
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <prvSwitchTimerLists+0x74>)
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	f7fe fe87 	bl	8003a6c <vListInsert>
 8004d5e:	e010      	b.n	8004d82 <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d60:	2100      	movs	r1, #0
 8004d62:	9100      	str	r1, [sp, #0]
 8004d64:	460b      	mov	r3, r1
 8004d66:	4632      	mov	r2, r6
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f7ff ffa7 	bl	8004cbc <xTimerGenericCommand>
				configASSERT( xResult );
 8004d6e:	b940      	cbnz	r0, 8004d82 <prvSwitchTimerLists+0x5a>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	e7fe      	b.n	8004d80 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d82:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <prvSwitchTimerLists+0x74>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2a00      	cmp	r2, #0
 8004d8a:	d1d0      	bne.n	8004d2e <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <prvSwitchTimerLists+0x78>)
 8004d8e:	6810      	ldr	r0, [r2, #0]
 8004d90:	4902      	ldr	r1, [pc, #8]	; (8004d9c <prvSwitchTimerLists+0x74>)
 8004d92:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8004d94:	6013      	str	r3, [r2, #0]
}
 8004d96:	b002      	add	sp, #8
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
 8004d9a:	bf00      	nop
 8004d9c:	200006fc 	.word	0x200006fc
 8004da0:	20000820 	.word	0x20000820

08004da4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004da8:	f7ff fc38 	bl	800461c <xTaskGetTickCount>
 8004dac:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <prvSampleTimeNow+0x28>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4298      	cmp	r0, r3
 8004db4:	d204      	bcs.n	8004dc0 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
 8004db6:	f7ff ffb7 	bl	8004d28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	602b      	str	r3, [r5, #0]
 8004dbe:	e001      	b.n	8004dc4 <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
 8004dc4:	4b01      	ldr	r3, [pc, #4]	; (8004dcc <prvSampleTimeNow+0x28>)
 8004dc6:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
 8004dc8:	4620      	mov	r0, r4
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	20000728 	.word	0x20000728

08004dd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dd8:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <prvProcessExpiredTimer+0x58>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004de0:	1d20      	adds	r0, r4, #4
 8004de2:	f7fe fe5d 	bl	8003aa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004de6:	69e3      	ldr	r3, [r4, #28]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d118      	bne.n	8004e1e <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004dec:	69a1      	ldr	r1, [r4, #24]
 8004dee:	462b      	mov	r3, r5
 8004df0:	4632      	mov	r2, r6
 8004df2:	4429      	add	r1, r5
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7ff fecf 	bl	8004b98 <prvInsertTimerInActiveList>
 8004dfa:	b180      	cbz	r0, 8004e1e <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	9100      	str	r1, [sp, #0]
 8004e00:	460b      	mov	r3, r1
 8004e02:	462a      	mov	r2, r5
 8004e04:	4620      	mov	r0, r4
 8004e06:	f7ff ff59 	bl	8004cbc <xTimerGenericCommand>
			configASSERT( xResult );
 8004e0a:	b940      	cbnz	r0, 8004e1e <prvProcessExpiredTimer+0x4e>
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	e7fe      	b.n	8004e1c <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e20:	4620      	mov	r0, r4
 8004e22:	4798      	blx	r3
}
 8004e24:	b002      	add	sp, #8
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	200006fc 	.word	0x200006fc

08004e2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	4606      	mov	r6, r0
 8004e32:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e34:	f7ff fbea 	bl	800460c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e38:	a801      	add	r0, sp, #4
 8004e3a:	f7ff ffb3 	bl	8004da4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	bb1b      	cbnz	r3, 8004e8a <prvProcessTimerOrBlockTask+0x5e>
 8004e42:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e44:	b944      	cbnz	r4, 8004e58 <prvProcessTimerOrBlockTask+0x2c>
 8004e46:	42b0      	cmp	r0, r6
 8004e48:	d306      	bcc.n	8004e58 <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
 8004e4a:	f7ff fc7f 	bl	800474c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e4e:	4629      	mov	r1, r5
 8004e50:	4630      	mov	r0, r6
 8004e52:	f7ff ffbd 	bl	8004dd0 <prvProcessExpiredTimer>
 8004e56:	e01a      	b.n	8004e8e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8004e58:	b12c      	cbz	r4, 8004e66 <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <prvProcessTimerOrBlockTask+0x68>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681c      	ldr	r4, [r3, #0]
 8004e60:	fab4 f484 	clz	r4, r4
 8004e64:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e66:	4622      	mov	r2, r4
 8004e68:	1b71      	subs	r1, r6, r5
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <prvProcessTimerOrBlockTask+0x6c>)
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	f7ff f96d 	bl	800414c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8004e72:	f7ff fc6b 	bl	800474c <xTaskResumeAll>
 8004e76:	b950      	cbnz	r0, 8004e8e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8004e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7c:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <prvProcessTimerOrBlockTask+0x70>)
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	e001      	b.n	8004e8e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8004e8a:	f7ff fc5f 	bl	800474c <xTaskResumeAll>
		}
	}
}
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd70      	pop	{r4, r5, r6, pc}
 8004e92:	bf00      	nop
 8004e94:	20000820 	.word	0x20000820
 8004e98:	2000081c 	.word	0x2000081c
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ea0:	b530      	push	{r4, r5, lr}
 8004ea2:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ea4:	e057      	b.n	8004f56 <prvProcessReceivedCommands+0xb6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ea6:	9b04      	ldr	r3, [sp, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da03      	bge.n	8004eb4 <prvProcessReceivedCommands+0x14>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004eac:	9907      	ldr	r1, [sp, #28]
 8004eae:	9806      	ldr	r0, [sp, #24]
 8004eb0:	9b05      	ldr	r3, [sp, #20]
 8004eb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004eb4:	9b04      	ldr	r3, [sp, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	db4d      	blt.n	8004f56 <prvProcessReceivedCommands+0xb6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004eba:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ebc:	6963      	ldr	r3, [r4, #20]
 8004ebe:	b113      	cbz	r3, 8004ec6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ec0:	1d20      	adds	r0, r4, #4
 8004ec2:	f7fe fded 	bl	8003aa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ec6:	a803      	add	r0, sp, #12
 8004ec8:	f7ff ff6c 	bl	8004da4 <prvSampleTimeNow>

			switch( xMessage.xMessageID )
 8004ecc:	9b04      	ldr	r3, [sp, #16]
 8004ece:	2b09      	cmp	r3, #9
 8004ed0:	d841      	bhi.n	8004f56 <prvProcessReceivedCommands+0xb6>
 8004ed2:	e8df f003 	tbb	[pc, r3]
 8004ed6:	0505      	.short	0x0505
 8004ed8:	3a274005 	.word	0x3a274005
 8004edc:	27400505 	.word	0x27400505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ee0:	9905      	ldr	r1, [sp, #20]
 8004ee2:	69a5      	ldr	r5, [r4, #24]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	4429      	add	r1, r5
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7ff fe54 	bl	8004b98 <prvInsertTimerInActiveList>
 8004ef0:	b388      	cbz	r0, 8004f56 <prvProcessReceivedCommands+0xb6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ef8:	69e3      	ldr	r3, [r4, #28]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d12b      	bne.n	8004f56 <prvProcessReceivedCommands+0xb6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004efe:	69a2      	ldr	r2, [r4, #24]
 8004f00:	2100      	movs	r1, #0
 8004f02:	9100      	str	r1, [sp, #0]
 8004f04:	460b      	mov	r3, r1
 8004f06:	9805      	ldr	r0, [sp, #20]
 8004f08:	4402      	add	r2, r0
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f7ff fed6 	bl	8004cbc <xTimerGenericCommand>
							configASSERT( xResult );
 8004f10:	bb08      	cbnz	r0, 8004f56 <prvProcessReceivedCommands+0xb6>
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	e7fe      	b.n	8004f22 <prvProcessReceivedCommands+0x82>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f24:	9905      	ldr	r1, [sp, #20]
 8004f26:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f28:	b941      	cbnz	r1, 8004f3c <prvProcessReceivedCommands+0x9c>
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	e7fe      	b.n	8004f3a <prvProcessReceivedCommands+0x9a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	4602      	mov	r2, r0
 8004f40:	4401      	add	r1, r0
 8004f42:	4620      	mov	r0, r4
 8004f44:	f7ff fe28 	bl	8004b98 <prvInsertTimerInActiveList>
					break;
 8004f48:	e005      	b.n	8004f56 <prvProcessReceivedCommands+0xb6>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004f4a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004f4e:	b913      	cbnz	r3, 8004f56 <prvProcessReceivedCommands+0xb6>
						{
							vPortFree( pxTimer );
 8004f50:	4620      	mov	r0, r4
 8004f52:	f000 f9cd 	bl	80052f0 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f56:	2200      	movs	r2, #0
 8004f58:	a904      	add	r1, sp, #16
 8004f5a:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <prvProcessReceivedCommands+0xcc>)
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	f7ff f835 	bl	8003fcc <xQueueReceive>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d19f      	bne.n	8004ea6 <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8004f66:	b009      	add	sp, #36	; 0x24
 8004f68:	bd30      	pop	{r4, r5, pc}
 8004f6a:	bf00      	nop
 8004f6c:	2000081c 	.word	0x2000081c

08004f70 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f70:	b500      	push	{lr}
 8004f72:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f74:	a801      	add	r0, sp, #4
 8004f76:	f7ff fdff 	bl	8004b78 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f7a:	9901      	ldr	r1, [sp, #4]
 8004f7c:	f7ff ff56 	bl	8004e2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f80:	f7ff ff8e 	bl	8004ea0 <prvProcessReceivedCommands>
 8004f84:	e7f6      	b.n	8004f74 <prvTimerTask+0x4>
 8004f86:	bf00      	nop

08004f88 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f88:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f8c:	b97b      	cbnz	r3, 8004fae <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f92:	b97b      	cbnz	r3, 8004fb4 <osKernelInitialize+0x2c>
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <osKernelInitialize+0x40>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d102      	bne.n	8004fa2 <osKernelInitialize+0x1a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f9c:	f3ef 8211 	mrs	r2, BASEPRI
 8004fa0:	b95a      	cbnz	r2, 8004fba <osKernelInitialize+0x32>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fa2:	b96b      	cbnz	r3, 8004fc0 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <osKernelInitialize+0x40>)
 8004fa8:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004faa:	2000      	movs	r0, #0
 8004fac:	4770      	bx	lr

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 8004fae:	f06f 0005 	mvn.w	r0, #5
 8004fb2:	4770      	bx	lr
 8004fb4:	f06f 0005 	mvn.w	r0, #5
 8004fb8:	4770      	bx	lr
 8004fba:	f06f 0005 	mvn.w	r0, #5
 8004fbe:	4770      	bx	lr
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000e84 	.word	0x20000e84

08004fcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fcc:	b508      	push	{r3, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fce:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fd2:	b993      	cbnz	r3, 8004ffa <osKernelStart+0x2e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd8:	b993      	cbnz	r3, 8005000 <osKernelStart+0x34>
 8004fda:	4b0e      	ldr	r3, [pc, #56]	; (8005014 <osKernelStart+0x48>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d102      	bne.n	8004fe8 <osKernelStart+0x1c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8004fe6:	b972      	cbnz	r2, 8005006 <osKernelStart+0x3a>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10f      	bne.n	800500c <osKernelStart+0x40>
      KernelState = osKernelRunning;
 8004fec:	2202      	movs	r2, #2
 8004fee:	4b09      	ldr	r3, [pc, #36]	; (8005014 <osKernelStart+0x48>)
 8004ff0:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ff2:	f7ff fabf 	bl	8004574 <vTaskStartScheduler>
      stat = osOK;
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	bd08      	pop	{r3, pc}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 8004ffa:	f06f 0005 	mvn.w	r0, #5
 8004ffe:	bd08      	pop	{r3, pc}
 8005000:	f06f 0005 	mvn.w	r0, #5
 8005004:	bd08      	pop	{r3, pc}
 8005006:	f06f 0005 	mvn.w	r0, #5
 800500a:	bd08      	pop	{r3, pc}
    if (KernelState == osKernelReady) {
      KernelState = osKernelRunning;
      vTaskStartScheduler();
      stat = osOK;
    } else {
      stat = osError;
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005010:	bd08      	pop	{r3, pc}
 8005012:	bf00      	nop
 8005014:	20000e84 	.word	0x20000e84

08005018 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800501a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800501c:	2400      	movs	r4, #0
 800501e:	9404      	str	r4, [sp, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005020:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005024:	2c00      	cmp	r4, #0
 8005026:	d161      	bne.n	80050ec <osThreadNew+0xd4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005028:	f3ef 8310 	mrs	r3, PRIMASK
 800502c:	2b00      	cmp	r3, #0
 800502e:	d15d      	bne.n	80050ec <osThreadNew+0xd4>
 8005030:	4b32      	ldr	r3, [pc, #200]	; (80050fc <osThreadNew+0xe4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d103      	bne.n	8005040 <osThreadNew+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005038:	f3ef 8311 	mrs	r3, BASEPRI
 800503c:	2b00      	cmp	r3, #0
 800503e:	d155      	bne.n	80050ec <osThreadNew+0xd4>
 8005040:	2800      	cmp	r0, #0
 8005042:	d053      	beq.n	80050ec <osThreadNew+0xd4>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005044:	2300      	movs	r3, #0
 8005046:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800504a:	b322      	cbz	r2, 8005096 <osThreadNew+0x7e>
      if (attr->name != NULL) {
 800504c:	6816      	ldr	r6, [r2, #0]
 800504e:	b90e      	cbnz	r6, 8005054 <osThreadNew+0x3c>
  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8005050:	f10d 0617 	add.w	r6, sp, #23

    if (attr != NULL) {
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005054:	6994      	ldr	r4, [r2, #24]
 8005056:	b904      	cbnz	r4, 800505a <osThreadNew+0x42>

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;
 8005058:	2418      	movs	r4, #24
      }
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800505a:	1e63      	subs	r3, r4, #1
 800505c:	2b37      	cmp	r3, #55	; 0x37
 800505e:	d847      	bhi.n	80050f0 <osThreadNew+0xd8>
 8005060:	6853      	ldr	r3, [r2, #4]
 8005062:	f013 0f01 	tst.w	r3, #1
 8005066:	d145      	bne.n	80050f4 <osThreadNew+0xdc>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005068:	6953      	ldr	r3, [r2, #20]
 800506a:	b113      	cbz	r3, 8005072 <osThreadNew+0x5a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800506c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8005070:	e001      	b.n	8005076 <osThreadNew+0x5e>
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 8005072:	f04f 0e80 	mov.w	lr, #128	; 0x80
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005076:	6895      	ldr	r5, [r2, #8]
 8005078:	b12d      	cbz	r5, 8005086 <osThreadNew+0x6e>
 800507a:	68d7      	ldr	r7, [r2, #12]
 800507c:	2f5b      	cmp	r7, #91	; 0x5b
 800507e:	d902      	bls.n	8005086 <osThreadNew+0x6e>
 8005080:	6917      	ldr	r7, [r2, #16]
 8005082:	b107      	cbz	r7, 8005086 <osThreadNew+0x6e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005084:	b973      	cbnz	r3, 80050a4 <osThreadNew+0x8c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005086:	b97d      	cbnz	r5, 80050a8 <osThreadNew+0x90>
 8005088:	68d3      	ldr	r3, [r2, #12]
 800508a:	b983      	cbnz	r3, 80050ae <osThreadNew+0x96>
 800508c:	6913      	ldr	r3, [r2, #16]
 800508e:	b18b      	cbz	r3, 80050b4 <osThreadNew+0x9c>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
    mem   = -1;
 8005090:	f04f 35ff 	mov.w	r5, #4294967295
 8005094:	e00f      	b.n	80050b6 <osThreadNew+0x9e>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8005096:	2500      	movs	r5, #0

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;
 8005098:	2418      	movs	r4, #24
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 800509a:	f04f 0e80 	mov.w	lr, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 800509e:	f10d 0617 	add.w	r6, sp, #23
 80050a2:	e008      	b.n	80050b6 <osThreadNew+0x9e>
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
 80050a4:	2501      	movs	r5, #1
 80050a6:	e006      	b.n	80050b6 <osThreadNew+0x9e>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
    mem   = -1;
 80050a8:	f04f 35ff 	mov.w	r5, #4294967295
 80050ac:	e003      	b.n	80050b6 <osThreadNew+0x9e>
 80050ae:	f04f 35ff 	mov.w	r5, #4294967295
 80050b2:	e000      	b.n	80050b6 <osThreadNew+0x9e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
          mem = 0;
 80050b4:	2500      	movs	r5, #0
 80050b6:	460b      	mov	r3, r1
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 80050b8:	2d01      	cmp	r5, #1
 80050ba:	d10a      	bne.n	80050d2 <osThreadNew+0xba>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050bc:	6911      	ldr	r1, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80050be:	6892      	ldr	r2, [r2, #8]
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050c0:	9202      	str	r2, [sp, #8]
 80050c2:	9101      	str	r1, [sp, #4]
 80050c4:	9400      	str	r4, [sp, #0]
 80050c6:	4672      	mov	r2, lr
 80050c8:	4631      	mov	r1, r6
 80050ca:	f7ff f9e1 	bl	8004490 <xTaskCreateStatic>
 80050ce:	9004      	str	r0, [sp, #16]
 80050d0:	e00c      	b.n	80050ec <osThreadNew+0xd4>
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80050d2:	b95d      	cbnz	r5, 80050ec <osThreadNew+0xd4>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050d4:	aa04      	add	r2, sp, #16
 80050d6:	9201      	str	r2, [sp, #4]
 80050d8:	9400      	str	r4, [sp, #0]
 80050da:	fa1f f28e 	uxth.w	r2, lr
 80050de:	4631      	mov	r1, r6
 80050e0:	f7ff fa14 	bl	800450c <xTaskCreate>
 80050e4:	2801      	cmp	r0, #1
 80050e6:	d001      	beq.n	80050ec <osThreadNew+0xd4>
          hTask = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	9304      	str	r3, [sp, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050ec:	9804      	ldr	r0, [sp, #16]
 80050ee:	e002      	b.n	80050f6 <osThreadNew+0xde>
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
        return (NULL);
 80050f0:	2000      	movs	r0, #0
 80050f2:	e000      	b.n	80050f6 <osThreadNew+0xde>
 80050f4:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 80050f6:	b007      	add	sp, #28
 80050f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000e84 	.word	0x20000e84

08005100 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <vApplicationGetIdleTaskMemory+0x10>)
 8005102:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005104:	4b03      	ldr	r3, [pc, #12]	; (8005114 <vApplicationGetIdleTaskMemory+0x14>)
 8005106:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000a28 	.word	0x20000a28
 8005114:	20000828 	.word	0x20000828

08005118 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005118:	4b03      	ldr	r3, [pc, #12]	; (8005128 <vApplicationGetTimerTaskMemory+0x10>)
 800511a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <vApplicationGetTimerTaskMemory+0x14>)
 800511e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4770      	bx	lr
 8005128:	20000e88 	.word	0x20000e88
 800512c:	20000a84 	.word	0x20000a84

08005130 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005130:	4a12      	ldr	r2, [pc, #72]	; (800517c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005132:	f012 0f07 	tst.w	r2, #7
 8005136:	d007      	beq.n	8005148 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005138:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800513a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800513e:	f5c1 5340 	rsb	r3, r1, #12288	; 0x3000
 8005142:	4413      	add	r3, r2
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005144:	460a      	mov	r2, r1
 8005146:	e001      	b.n	800514c <prvHeapInit+0x1c>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005148:	f44f 5340 	mov.w	r3, #12288	; 0x3000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800514c:	480c      	ldr	r0, [pc, #48]	; (8005180 <prvHeapInit+0x50>)
 800514e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005150:	2100      	movs	r1, #0
 8005152:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005154:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005156:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005158:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800515c:	4809      	ldr	r0, [pc, #36]	; (8005184 <prvHeapInit+0x54>)
 800515e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005160:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005162:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005164:	1a99      	subs	r1, r3, r2
 8005166:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005168:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <prvHeapInit+0x58>)
 800516c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <prvHeapInit+0x5c>)
 8005170:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005172:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <prvHeapInit+0x60>)
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	4770      	bx	lr
 800517c:	20000ef4 	.word	0x20000ef4
 8005180:	20000eec 	.word	0x20000eec
 8005184:	20000ee8 	.word	0x20000ee8
 8005188:	20003ef8 	.word	0x20003ef8
 800518c:	20000ee4 	.word	0x20000ee4
 8005190:	20003ef4 	.word	0x20003ef4

08005194 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005194:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <prvInsertBlockIntoFreeList+0x50>)
 8005196:	e000      	b.n	800519a <prvInsertBlockIntoFreeList+0x6>
 8005198:	4613      	mov	r3, r2
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4282      	cmp	r2, r0
 800519e:	d3fb      	bcc.n	8005198 <prvInsertBlockIntoFreeList+0x4>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051a0:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051a2:	685c      	ldr	r4, [r3, #4]
 80051a4:	1919      	adds	r1, r3, r4
 80051a6:	4288      	cmp	r0, r1
 80051a8:	d103      	bne.n	80051b2 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051aa:	6841      	ldr	r1, [r0, #4]
 80051ac:	4421      	add	r1, r4
 80051ae:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051b0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051b2:	6844      	ldr	r4, [r0, #4]
 80051b4:	1901      	adds	r1, r0, r4
 80051b6:	428a      	cmp	r2, r1
 80051b8:	d10c      	bne.n	80051d4 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ba:	490b      	ldr	r1, [pc, #44]	; (80051e8 <prvInsertBlockIntoFreeList+0x54>)
 80051bc:	6809      	ldr	r1, [r1, #0]
 80051be:	428a      	cmp	r2, r1
 80051c0:	d006      	beq.n	80051d0 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051c2:	6852      	ldr	r2, [r2, #4]
 80051c4:	4422      	add	r2, r4
 80051c6:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	6002      	str	r2, [r0, #0]
 80051ce:	e002      	b.n	80051d6 <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051d0:	6001      	str	r1, [r0, #0]
 80051d2:	e000      	b.n	80051d6 <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051d4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051d6:	4298      	cmp	r0, r3
 80051d8:	d000      	beq.n	80051dc <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051da:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000eec 	.word	0x20000eec
 80051e8:	20000ee8 	.word	0x20000ee8

080051ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80051f0:	f7ff fa0c 	bl	800460c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051f4:	4b39      	ldr	r3, [pc, #228]	; (80052dc <pvPortMalloc+0xf0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	b90b      	cbnz	r3, 80051fe <pvPortMalloc+0x12>
		{
			prvHeapInit();
 80051fa:	f7ff ff99 	bl	8005130 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051fe:	4b38      	ldr	r3, [pc, #224]	; (80052e0 <pvPortMalloc+0xf4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	421c      	tst	r4, r3
 8005204:	d153      	bne.n	80052ae <pvPortMalloc+0xc2>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005206:	b194      	cbz	r4, 800522e <pvPortMalloc+0x42>
			{
				xWantedSize += xHeapStructSize;
 8005208:	3408      	adds	r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800520a:	f014 0f07 	tst.w	r4, #7
 800520e:	d00e      	beq.n	800522e <pvPortMalloc+0x42>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005210:	f024 0407 	bic.w	r4, r4, #7
 8005214:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005216:	f004 0307 	and.w	r3, r4, #7
 800521a:	b143      	cbz	r3, 800522e <pvPortMalloc+0x42>
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	e7fe      	b.n	800522c <pvPortMalloc+0x40>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800522e:	2c00      	cmp	r4, #0
 8005230:	d03f      	beq.n	80052b2 <pvPortMalloc+0xc6>
 8005232:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <pvPortMalloc+0xf8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429c      	cmp	r4, r3
 8005238:	d83d      	bhi.n	80052b6 <pvPortMalloc+0xca>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800523a:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <pvPortMalloc+0xfc>)
 800523c:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800523e:	e001      	b.n	8005244 <pvPortMalloc+0x58>
				{
					pxPreviousBlock = pxBlock;
 8005240:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8005242:	4615      	mov	r5, r2
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005244:	686a      	ldr	r2, [r5, #4]
 8005246:	4294      	cmp	r4, r2
 8005248:	d902      	bls.n	8005250 <pvPortMalloc+0x64>
 800524a:	682a      	ldr	r2, [r5, #0]
 800524c:	2a00      	cmp	r2, #0
 800524e:	d1f7      	bne.n	8005240 <pvPortMalloc+0x54>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005250:	4a22      	ldr	r2, [pc, #136]	; (80052dc <pvPortMalloc+0xf0>)
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	4295      	cmp	r5, r2
 8005256:	d030      	beq.n	80052ba <pvPortMalloc+0xce>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005258:	681e      	ldr	r6, [r3, #0]
 800525a:	3608      	adds	r6, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800525c:	682a      	ldr	r2, [r5, #0]
 800525e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005260:	686b      	ldr	r3, [r5, #4]
 8005262:	1b1b      	subs	r3, r3, r4
 8005264:	2b10      	cmp	r3, #16
 8005266:	d910      	bls.n	800528a <pvPortMalloc+0x9e>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005268:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800526a:	f010 0f07 	tst.w	r0, #7
 800526e:	d008      	beq.n	8005282 <pvPortMalloc+0x96>
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	e7fe      	b.n	8005280 <pvPortMalloc+0x94>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005282:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005284:	606c      	str	r4, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005286:	f7ff ff85 	bl	8005194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800528a:	686a      	ldr	r2, [r5, #4]
 800528c:	4915      	ldr	r1, [pc, #84]	; (80052e4 <pvPortMalloc+0xf8>)
 800528e:	680b      	ldr	r3, [r1, #0]
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005294:	4915      	ldr	r1, [pc, #84]	; (80052ec <pvPortMalloc+0x100>)
 8005296:	6809      	ldr	r1, [r1, #0]
 8005298:	428b      	cmp	r3, r1
 800529a:	d201      	bcs.n	80052a0 <pvPortMalloc+0xb4>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800529c:	4913      	ldr	r1, [pc, #76]	; (80052ec <pvPortMalloc+0x100>)
 800529e:	600b      	str	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <pvPortMalloc+0xf4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	e006      	b.n	80052bc <pvPortMalloc+0xd0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052ae:	2600      	movs	r6, #0
 80052b0:	e004      	b.n	80052bc <pvPortMalloc+0xd0>
 80052b2:	2600      	movs	r6, #0
 80052b4:	e002      	b.n	80052bc <pvPortMalloc+0xd0>
 80052b6:	2600      	movs	r6, #0
 80052b8:	e000      	b.n	80052bc <pvPortMalloc+0xd0>
 80052ba:	2600      	movs	r6, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052bc:	f7ff fa46 	bl	800474c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c0:	f016 0f07 	tst.w	r6, #7
 80052c4:	d008      	beq.n	80052d8 <pvPortMalloc+0xec>
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	e7fe      	b.n	80052d6 <pvPortMalloc+0xea>
	return pvReturn;
}
 80052d8:	4630      	mov	r0, r6
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	20000ee8 	.word	0x20000ee8
 80052e0:	20003ef4 	.word	0x20003ef4
 80052e4:	20000ee4 	.word	0x20000ee4
 80052e8:	20000eec 	.word	0x20000eec
 80052ec:	20003ef8 	.word	0x20003ef8

080052f0 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80052f0:	b3a0      	cbz	r0, 800535c <vPortFree+0x6c>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052f2:	b538      	push	{r3, r4, r5, lr}
 80052f4:	4603      	mov	r3, r0

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052f6:	f1a0 0508 	sub.w	r5, r0, #8

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80052fe:	4918      	ldr	r1, [pc, #96]	; (8005360 <vPortFree+0x70>)
 8005300:	6809      	ldr	r1, [r1, #0]
 8005302:	ea12 0401 	ands.w	r4, r2, r1
 8005306:	d108      	bne.n	800531a <vPortFree+0x2a>
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	e7fe      	b.n	8005318 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800531a:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800531e:	b140      	cbz	r0, 8005332 <vPortFree+0x42>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	e7fe      	b.n	8005330 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005332:	b194      	cbz	r4, 800535a <vPortFree+0x6a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005334:	b988      	cbnz	r0, 800535a <vPortFree+0x6a>
 8005336:	461c      	mov	r4, r3
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005338:	ea22 0201 	bic.w	r2, r2, r1
 800533c:	f843 2c04 	str.w	r2, [r3, #-4]

				vTaskSuspendAll();
 8005340:	f7ff f964 	bl	800460c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005344:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005348:	4a06      	ldr	r2, [pc, #24]	; (8005364 <vPortFree+0x74>)
 800534a:	6811      	ldr	r1, [r2, #0]
 800534c:	440b      	add	r3, r1
 800534e:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005350:	4628      	mov	r0, r5
 8005352:	f7ff ff1f 	bl	8005194 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005356:	f7ff f9f9 	bl	800474c <xTaskResumeAll>
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20003ef4 	.word	0x20003ef4
 8005364:	20000ee4 	.word	0x20000ee4

08005368 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005368:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800536e:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <prvTaskExitError+0x3c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d008      	beq.n	800538a <prvTaskExitError+0x22>
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	e7fe      	b.n	8005388 <prvTaskExitError+0x20>
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0fc      	beq.n	800539a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053a0:	b002      	add	sp, #8
 80053a2:	4770      	bx	lr
 80053a4:	2000006c 	.word	0x2000006c

080053a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053a8:	4808      	ldr	r0, [pc, #32]	; (80053cc <prvPortStartFirstTask+0x24>)
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	6800      	ldr	r0, [r0, #0]
 80053ae:	f380 8808 	msr	MSP, r0
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f380 8814 	msr	CONTROL, r0
 80053ba:	b662      	cpsie	i
 80053bc:	b661      	cpsie	f
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	df00      	svc	0
 80053c8:	bf00      	nop
 80053ca:	0000      	.short	0x0000
 80053cc:	e000ed08 	.word	0xe000ed08

080053d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053e0 <vPortEnableVFP+0x10>
 80053d4:	6801      	ldr	r1, [r0, #0]
 80053d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053da:	6001      	str	r1, [r0, #0]
 80053dc:	4770      	bx	lr
 80053de:	0000      	.short	0x0000
 80053e0:	e000ed88 	.word	0xe000ed88

080053e4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053ec:	f021 0101 	bic.w	r1, r1, #1
 80053f0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <pxPortInitialiseStack+0x28>)
 80053f6:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053fa:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053fe:	f06f 0302 	mvn.w	r3, #2
 8005402:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8005406:	3844      	subs	r0, #68	; 0x44
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	08005369 	.word	0x08005369

08005410 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005410:	4b07      	ldr	r3, [pc, #28]	; (8005430 <pxCurrentTCBConst2>)
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	6808      	ldr	r0, [r1, #0]
 8005416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541a:	f380 8809 	msr	PSP, r0
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f04f 0000 	mov.w	r0, #0
 8005426:	f380 8811 	msr	BASEPRI, r0
 800542a:	4770      	bx	lr
 800542c:	f3af 8000 	nop.w

08005430 <pxCurrentTCBConst2>:
 8005430:	20000690 	.word	0x20000690

08005434 <vPortEnterCritical>:
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005444:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <vPortEnterCritical+0x3c>)
 8005446:	6813      	ldr	r3, [r2, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10d      	bne.n	800546c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005450:	4b08      	ldr	r3, [pc, #32]	; (8005474 <vPortEnterCritical+0x40>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005458:	d008      	beq.n	800546c <vPortEnterCritical+0x38>
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	e7fe      	b.n	800546a <vPortEnterCritical+0x36>
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	2000006c 	.word	0x2000006c
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <vPortExitCritical+0x28>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	b943      	cbnz	r3, 8005490 <vPortExitCritical+0x18>
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	e7fe      	b.n	800548e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005490:	3b01      	subs	r3, #1
 8005492:	4a03      	ldr	r2, [pc, #12]	; (80054a0 <vPortExitCritical+0x28>)
 8005494:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005496:	b90b      	cbnz	r3, 800549c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	2000006c 	.word	0x2000006c
	...

080054b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054b0:	f3ef 8009 	mrs	r0, PSP
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <pxCurrentTCBConst>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	f01e 0f10 	tst.w	lr, #16
 80054c0:	bf08      	it	eq
 80054c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ca:	6010      	str	r0, [r2, #0]
 80054cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054d4:	f380 8811 	msr	BASEPRI, r0
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f7ff f9d8 	bl	8004894 <vTaskSwitchContext>
 80054e4:	f04f 0000 	mov.w	r0, #0
 80054e8:	f380 8811 	msr	BASEPRI, r0
 80054ec:	bc09      	pop	{r0, r3}
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	6808      	ldr	r0, [r1, #0]
 80054f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f6:	f01e 0f10 	tst.w	lr, #16
 80054fa:	bf08      	it	eq
 80054fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005500:	f380 8809 	msr	PSP, r0
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	f3af 8000 	nop.w

08005510 <pxCurrentTCBConst>:
 8005510:	20000690 	.word	0x20000690

08005514 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005514:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005526:	f7ff f87f 	bl	8004628 <xTaskIncrementTick>
 800552a:	b118      	cbz	r0, 8005534 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	4b02      	ldr	r3, [pc, #8]	; (800553c <SysTick_Handler+0x28>)
 8005532:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005534:	2300      	movs	r3, #0
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	bd08      	pop	{r3, pc}
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005540:	4a08      	ldr	r2, [pc, #32]	; (8005564 <vPortSetupTimerInterrupt+0x24>)
 8005542:	2300      	movs	r3, #0
 8005544:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005546:	4908      	ldr	r1, [pc, #32]	; (8005568 <vPortSetupTimerInterrupt+0x28>)
 8005548:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <vPortSetupTimerInterrupt+0x2c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4908      	ldr	r1, [pc, #32]	; (8005570 <vPortSetupTimerInterrupt+0x30>)
 8005550:	fba1 1303 	umull	r1, r3, r1, r3
 8005554:	099b      	lsrs	r3, r3, #6
 8005556:	3b01      	subs	r3, #1
 8005558:	4906      	ldr	r1, [pc, #24]	; (8005574 <vPortSetupTimerInterrupt+0x34>)
 800555a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800555c:	2307      	movs	r3, #7
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	e000e010 	.word	0xe000e010
 8005568:	e000e018 	.word	0xe000e018
 800556c:	20000068 	.word	0x20000068
 8005570:	10624dd3 	.word	0x10624dd3
 8005574:	e000e014 	.word	0xe000e014

08005578 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005578:	4b3a      	ldr	r3, [pc, #232]	; (8005664 <xPortStartScheduler+0xec>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b3a      	ldr	r3, [pc, #232]	; (8005668 <xPortStartScheduler+0xf0>)
 800557e:	429a      	cmp	r2, r3
 8005580:	d108      	bne.n	8005594 <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	e7fe      	b.n	8005592 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005594:	4b33      	ldr	r3, [pc, #204]	; (8005664 <xPortStartScheduler+0xec>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b34      	ldr	r3, [pc, #208]	; (800566c <xPortStartScheduler+0xf4>)
 800559a:	429a      	cmp	r2, r3
 800559c:	d108      	bne.n	80055b0 <xPortStartScheduler+0x38>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	e7fe      	b.n	80055ae <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055b0:	b510      	push	{r4, lr}
 80055b2:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055b4:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <xPortStartScheduler+0xf8>)
 80055b6:	781a      	ldrb	r2, [r3, #0]
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055bc:	22ff      	movs	r2, #255	; 0xff
 80055be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80055cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055d0:	4a28      	ldr	r2, [pc, #160]	; (8005674 <xPortStartScheduler+0xfc>)
 80055d2:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055d4:	2207      	movs	r2, #7
 80055d6:	4b28      	ldr	r3, [pc, #160]	; (8005678 <xPortStartScheduler+0x100>)
 80055d8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055da:	e009      	b.n	80055f0 <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
 80055dc:	4a26      	ldr	r2, [pc, #152]	; (8005678 <xPortStartScheduler+0x100>)
 80055de:	6813      	ldr	r3, [r2, #0]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80055f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055f8:	d1f0      	bne.n	80055dc <xPortStartScheduler+0x64>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055fa:	4b1f      	ldr	r3, [pc, #124]	; (8005678 <xPortStartScheduler+0x100>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d008      	beq.n	8005614 <xPortStartScheduler+0x9c>
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	e7fe      	b.n	8005612 <xPortStartScheduler+0x9a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005614:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800561a:	4a17      	ldr	r2, [pc, #92]	; (8005678 <xPortStartScheduler+0x100>)
 800561c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800561e:	9b01      	ldr	r3, [sp, #4]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	4a13      	ldr	r2, [pc, #76]	; (8005670 <xPortStartScheduler+0xf8>)
 8005624:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005626:	4b15      	ldr	r3, [pc, #84]	; (800567c <xPortStartScheduler+0x104>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800562e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005636:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005638:	f7ff ff82 	bl	8005540 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800563c:	2400      	movs	r4, #0
 800563e:	4b10      	ldr	r3, [pc, #64]	; (8005680 <xPortStartScheduler+0x108>)
 8005640:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005642:	f7ff fec5 	bl	80053d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005646:	4a0f      	ldr	r2, [pc, #60]	; (8005684 <xPortStartScheduler+0x10c>)
 8005648:	6813      	ldr	r3, [r2, #0]
 800564a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800564e:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005650:	f7ff feaa 	bl	80053a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005654:	f7ff f91e 	bl	8004894 <vTaskSwitchContext>
	prvTaskExitError();
 8005658:	f7ff fe86 	bl	8005368 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
 800565c:	4620      	mov	r0, r4
 800565e:	b002      	add	sp, #8
 8005660:	bd10      	pop	{r4, pc}
 8005662:	bf00      	nop
 8005664:	e000ed00 	.word	0xe000ed00
 8005668:	410fc271 	.word	0x410fc271
 800566c:	410fc270 	.word	0x410fc270
 8005670:	e000e400 	.word	0xe000e400
 8005674:	20003efc 	.word	0x20003efc
 8005678:	20003f00 	.word	0x20003f00
 800567c:	e000ed20 	.word	0xe000ed20
 8005680:	2000006c 	.word	0x2000006c
 8005684:	e000ef34 	.word	0xe000ef34

08005688 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005688:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800568c:	2b0f      	cmp	r3, #15
 800568e:	d90f      	bls.n	80056b0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005690:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <vPortValidateInterruptPriority+0x4c>)
 8005692:	5c9b      	ldrb	r3, [r3, r2]
 8005694:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <vPortValidateInterruptPriority+0x50>)
 8005698:	7812      	ldrb	r2, [r2, #0]
 800569a:	4293      	cmp	r3, r2
 800569c:	d208      	bcs.n	80056b0 <vPortValidateInterruptPriority+0x28>
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	e7fe      	b.n	80056ae <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <vPortValidateInterruptPriority+0x54>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056b8:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <vPortValidateInterruptPriority+0x58>)
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	4293      	cmp	r3, r2
 80056be:	d908      	bls.n	80056d2 <vPortValidateInterruptPriority+0x4a>
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	e7fe      	b.n	80056d0 <vPortValidateInterruptPriority+0x48>
 80056d2:	4770      	bx	lr
 80056d4:	e000e3f0 	.word	0xe000e3f0
 80056d8:	20003efc 	.word	0x20003efc
 80056dc:	e000ed0c 	.word	0xe000ed0c
 80056e0:	20003f00 	.word	0x20003f00

080056e4 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80056e4:	b198      	cbz	r0, 800570e <USBD_Init+0x2a>
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056e6:	b508      	push	{r3, lr}
 80056e8:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80056ea:	f8d0 028c 	ldr.w	r0, [r0, #652]	; 0x28c
 80056ee:	b110      	cbz	r0, 80056f6 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80056f0:	2000      	movs	r0, #0
 80056f2:	f8c3 028c 	str.w	r0, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80056f6:	b109      	cbz	r1, 80056fc <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80056f8:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
 80056fc:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80056fe:	2301      	movs	r3, #1
 8005700:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8005704:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005706:	f7fb fa2d 	bl	8000b64 <USBD_LL_Init>

  return USBD_OK;
 800570a:	2000      	movs	r0, #0
 800570c:	bd08      	pop	{r3, pc}
  if(pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800570e:	2002      	movs	r0, #2
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop

08005714 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8005714:	b119      	cbz	r1, 800571e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005716:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800571a:	2000      	movs	r0, #0
 800571c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800571e:	2002      	movs	r0, #2
  }

  return status;
}
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop

08005724 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005724:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005726:	f7fb fa79 	bl	8000c1c <USBD_LL_Start>

  return USBD_OK;
}
 800572a:	2000      	movs	r0, #0
 800572c:	bd08      	pop	{r3, pc}
 800572e:	bf00      	nop

08005730 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005730:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8005732:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005736:	b123      	cbz	r3, 8005742 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4798      	blx	r3
 800573c:	b118      	cbz	r0, 8005746 <USBD_SetClassConfig+0x16>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800573e:	2002      	movs	r0, #2
 8005740:	bd08      	pop	{r3, pc}
 8005742:	2002      	movs	r0, #2
 8005744:	bd08      	pop	{r3, pc}
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
    {
      ret = USBD_OK;
 8005746:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8005748:	bd08      	pop	{r3, pc}
 800574a:	bf00      	nop

0800574c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800574c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800574e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	4798      	blx	r3
  return USBD_OK;
}
 8005756:	2000      	movs	r0, #0
 8005758:	bd08      	pop	{r3, pc}
 800575a:	bf00      	nop

0800575c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005760:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8005764:	4628      	mov	r0, r5
 8005766:	f000 f947 	bl	80059f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800576a:	2301      	movs	r3, #1
 800576c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8005770:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8005774:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8005778:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
 800577c:	f001 031f 	and.w	r3, r1, #31
 8005780:	2b01      	cmp	r3, #1
 8005782:	d008      	beq.n	8005796 <USBD_LL_SetupStage+0x3a>
 8005784:	b113      	cbz	r3, 800578c <USBD_LL_SetupStage+0x30>
 8005786:	2b02      	cmp	r3, #2
 8005788:	d00a      	beq.n	80057a0 <USBD_LL_SetupStage+0x44>
 800578a:	e00e      	b.n	80057aa <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800578c:	4629      	mov	r1, r5
 800578e:	4620      	mov	r0, r4
 8005790:	f000 faba 	bl	8005d08 <USBD_StdDevReq>
    break;
 8005794:	e00e      	b.n	80057b4 <USBD_LL_SetupStage+0x58>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005796:	4629      	mov	r1, r5
 8005798:	4620      	mov	r0, r4
 800579a:	f000 faeb 	bl	8005d74 <USBD_StdItfReq>
    break;
 800579e:	e009      	b.n	80057b4 <USBD_LL_SetupStage+0x58>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80057a0:	4629      	mov	r1, r5
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 fb14 	bl	8005dd0 <USBD_StdEPReq>
    break;
 80057a8:	e004      	b.n	80057b4 <USBD_LL_SetupStage+0x58>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057aa:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80057ae:	4620      	mov	r0, r4
 80057b0:	f7fb fa50 	bl	8000c54 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 80057b4:	2000      	movs	r0, #0
 80057b6:	bd38      	pop	{r3, r4, r5, pc}

080057b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80057bc:	bb91      	cbnz	r1, 8005824 <USBD_LL_DataOutStage+0x6c>
 80057be:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057c0:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d122      	bne.n	800580e <USBD_LL_DataOutStage+0x56>
    {
      if(pep->rem_length > pep->maxpacket)
 80057c8:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 80057cc:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d90d      	bls.n	80057f0 <USBD_LL_DataOutStage+0x38>
      {
        pep->rem_length -=  pep->maxpacket;
 80057d4:	1ad2      	subs	r2, r2, r3
 80057d6:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c

        USBD_CtlContinueRx (pdev,
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <USBD_LL_DataOutStage+0x2a>
 80057de:	b292      	uxth	r2, r2
 80057e0:	e000      	b.n	80057e4 <USBD_LL_DataOutStage+0x2c>
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	4601      	mov	r1, r0
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 fc3c 	bl	8006064 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80057ec:	2000      	movs	r0, #0
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80057f0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	b12b      	cbz	r3, 8005804 <USBD_LL_DataOutStage+0x4c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057f8:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80057fc:	2a03      	cmp	r2, #3
 80057fe:	d101      	bne.n	8005804 <USBD_LL_DataOutStage+0x4c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005800:	4620      	mov	r0, r4
 8005802:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005804:	4620      	mov	r0, r4
 8005806:	f000 fc35 	bl	8006074 <USBD_CtlSendStatus>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800580a:	2000      	movs	r0, #0
 800580c:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800580e:	2b05      	cmp	r3, #5
 8005810:	d115      	bne.n	800583e <USBD_LL_DataOutStage+0x86>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005812:	2500      	movs	r5, #0
 8005814:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005818:	4629      	mov	r1, r5
 800581a:	4620      	mov	r0, r4
 800581c:	f7fb fa1a 	bl	8000c54 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005820:	4628      	mov	r0, r5
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	460a      	mov	r2, r1
        pdev->ep0_state = USBD_EP0_IDLE;
        USBD_LL_StallEP(pdev, 0U);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005826:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	b14b      	cbz	r3, 8005842 <USBD_LL_DataOutStage+0x8a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800582e:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
        pdev->ep0_state = USBD_EP0_IDLE;
        USBD_LL_StallEP(pdev, 0U);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005832:	2903      	cmp	r1, #3
 8005834:	d107      	bne.n	8005846 <USBD_LL_DataOutStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005836:	4611      	mov	r1, r2
 8005838:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800583a:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 800583c:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800583e:	2000      	movs	r0, #0
 8005840:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->DataOut(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005842:	2002      	movs	r0, #2
 8005844:	bd38      	pop	{r3, r4, r5, pc}
 8005846:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 8005848:	bd38      	pop	{r3, r4, r5, pc}
 800584a:	bf00      	nop

0800584c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800584c:	b510      	push	{r4, lr}
 800584e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005850:	2900      	cmp	r1, #0
 8005852:	d150      	bne.n	80058f6 <USBD_LL_DataInStage+0xaa>
 8005854:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005856:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 800585a:	2b02      	cmp	r3, #2
 800585c:	d13c      	bne.n	80058d8 <USBD_LL_DataInStage+0x8c>
    {
      if(pep->rem_length > pep->maxpacket)
 800585e:	6a22      	ldr	r2, [r4, #32]
 8005860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005862:	429a      	cmp	r2, r3
 8005864:	d90d      	bls.n	8005882 <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -= pep->maxpacket;
 8005866:	1ad2      	subs	r2, r2, r3
 8005868:	6222      	str	r2, [r4, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800586a:	b292      	uxth	r2, r2
 800586c:	4601      	mov	r1, r0
 800586e:	4620      	mov	r0, r4
 8005870:	f000 fbe0 	bl	8006034 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005874:	2300      	movs	r3, #0
 8005876:	461a      	mov	r2, r3
 8005878:	4619      	mov	r1, r3
 800587a:	4620      	mov	r0, r4
 800587c:	f7fb fa0a 	bl	8000c94 <USBD_LL_PrepareReceive>
 8005880:	e031      	b.n	80058e6 <USBD_LL_DataInStage+0x9a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005882:	69e1      	ldr	r1, [r4, #28]
 8005884:	fbb1 f2f3 	udiv	r2, r1, r3
 8005888:	fb03 1212 	mls	r2, r3, r2, r1
 800588c:	b992      	cbnz	r2, 80058b4 <USBD_LL_DataInStage+0x68>
 800588e:	428b      	cmp	r3, r1
 8005890:	d810      	bhi.n	80058b4 <USBD_LL_DataInStage+0x68>
           (pep->total_length >= pep->maxpacket) &&
           (pep->total_length < pdev->ep0_data_len))
 8005892:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
           (pep->total_length >= pep->maxpacket) &&
 8005896:	4299      	cmp	r1, r3
 8005898:	d20c      	bcs.n	80058b4 <USBD_LL_DataInStage+0x68>
           (pep->total_length < pdev->ep0_data_len))
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800589a:	4611      	mov	r1, r2
 800589c:	4620      	mov	r0, r4
 800589e:	f000 fbc9 	bl	8006034 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058a2:	2100      	movs	r1, #0
 80058a4:	f8c4 1270 	str.w	r1, [r4, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80058a8:	460b      	mov	r3, r1
 80058aa:	460a      	mov	r2, r1
 80058ac:	4620      	mov	r0, r4
 80058ae:	f7fb f9f1 	bl	8000c94 <USBD_LL_PrepareReceive>
 80058b2:	e018      	b.n	80058e6 <USBD_LL_DataInStage+0x9a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80058b4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	b12b      	cbz	r3, 80058c8 <USBD_LL_DataInStage+0x7c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058bc:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80058c0:	2a03      	cmp	r2, #3
 80058c2:	d101      	bne.n	80058c8 <USBD_LL_DataInStage+0x7c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev);
 80058c4:	4620      	mov	r0, r4
 80058c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80058c8:	2180      	movs	r1, #128	; 0x80
 80058ca:	4620      	mov	r0, r4
 80058cc:	f7fb f9c2 	bl	8000c54 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fbdb 	bl	800608c <USBD_CtlReceiveStatus>
 80058d6:	e006      	b.n	80058e6 <USBD_LL_DataInStage+0x9a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d000      	beq.n	80058de <USBD_LL_DataInStage+0x92>
 80058dc:	b91b      	cbnz	r3, 80058e6 <USBD_LL_DataInStage+0x9a>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80058de:	2180      	movs	r1, #128	; 0x80
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7fb f9b7 	bl	8000c54 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80058e6:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d110      	bne.n	8005910 <USBD_LL_DataInStage+0xc4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80058ee:	2000      	movs	r0, #0
 80058f0:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	460a      	mov	r2, r1
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80058f8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	b14b      	cbz	r3, 8005914 <USBD_LL_DataInStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005900:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8005904:	2903      	cmp	r1, #3
 8005906:	d107      	bne.n	8005918 <USBD_LL_DataInStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005908:	4611      	mov	r1, r2
 800590a:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800590c:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 800590e:	bd10      	pop	{r4, pc}
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005910:	2000      	movs	r0, #0
 8005912:	bd10      	pop	{r4, pc}
    pdev->pClass->DataIn(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005914:	2002      	movs	r0, #2
 8005916:	bd10      	pop	{r4, pc}
 8005918:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 800591a:	bd10      	pop	{r4, pc}

0800591c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005920:	2340      	movs	r3, #64	; 0x40
 8005922:	2200      	movs	r2, #0
 8005924:	4611      	mov	r1, r2
 8005926:	f7fb f981 	bl	8000c2c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800592a:	2501      	movs	r5, #1
 800592c:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005930:	2640      	movs	r6, #64	; 0x40
 8005932:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005936:	4633      	mov	r3, r6
 8005938:	2200      	movs	r2, #0
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	4620      	mov	r0, r4
 800593e:	f7fb f975 	bl	8000c2c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005942:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005944:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005946:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800594a:	2300      	movs	r3, #0
 800594c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005950:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005952:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 8005956:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800595a:	b12b      	cbz	r3, 8005968 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800595c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2100      	movs	r1, #0
 8005964:	4620      	mov	r0, r4
 8005966:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005968:	2000      	movs	r0, #0
 800596a:	bd70      	pop	{r4, r5, r6, pc}

0800596c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800596c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800596e:	2000      	movs	r0, #0
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005974:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005978:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800597c:	2304      	movs	r3, #4
 800597e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8005982:	2000      	movs	r0, #0
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop

08005988 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8005988:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 800598c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8005990:	2000      	movs	r0, #0
 8005992:	4770      	bx	lr

08005994 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005994:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005996:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800599a:	2b03      	cmp	r3, #3
 800599c:	d104      	bne.n	80059a8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800599e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	b103      	cbz	r3, 80059a8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80059a6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80059a8:	2000      	movs	r0, #0
 80059aa:	bd08      	pop	{r3, pc}

080059ac <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80059ac:	2000      	movs	r0, #0
 80059ae:	4770      	bx	lr

080059b0 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80059b0:	2000      	movs	r0, #0
 80059b2:	4770      	bx	lr

080059b4 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80059b4:	2000      	movs	r0, #0
 80059b6:	4770      	bx	lr

080059b8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80059b8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059ba:	2201      	movs	r2, #1
 80059bc:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80059c0:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 80059c4:	6852      	ldr	r2, [r2, #4]
 80059c6:	7901      	ldrb	r1, [r0, #4]
 80059c8:	4790      	blx	r2

  return USBD_OK;
}
 80059ca:	2000      	movs	r0, #0
 80059cc:	bd08      	pop	{r3, pc}
 80059ce:	bf00      	nop

080059d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80059d0:	4603      	mov	r3, r0
    uint8_t  len = 0U;
 80059d2:	2000      	movs	r0, #0

    while (*buf != '\0')
 80059d4:	e002      	b.n	80059dc <USBD_GetLen+0xc>
    {
        len++;
 80059d6:	3001      	adds	r0, #1
 80059d8:	b2c0      	uxtb	r0, r0
        buf++;
 80059da:	3301      	adds	r3, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	2a00      	cmp	r2, #0
 80059e0:	d1f9      	bne.n	80059d6 <USBD_GetLen+0x6>
        len++;
        buf++;
    }

    return len;
}
 80059e2:	4770      	bx	lr

080059e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80059e4:	b508      	push	{r3, lr}

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80059e6:	884b      	ldrh	r3, [r1, #2]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d103      	bne.n	80059f4 <USBD_SetFeature+0x10>
  {
    pdev->dev_remote_wakeup = 1U;
 80059ec:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80059f0:	f000 fb40 	bl	8006074 <USBD_CtlSendStatus>
 80059f4:	bd08      	pop	{r3, pc}
 80059f6:	bf00      	nop

080059f8 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 80059f8:	780b      	ldrb	r3, [r1, #0]
 80059fa:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80059fc:	784b      	ldrb	r3, [r1, #1]
 80059fe:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005a00:	788b      	ldrb	r3, [r1, #2]
 8005a02:	78ca      	ldrb	r2, [r1, #3]
 8005a04:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a08:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005a0a:	790b      	ldrb	r3, [r1, #4]
 8005a0c:	794a      	ldrb	r2, [r1, #5]
 8005a0e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a12:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005a14:	798b      	ldrb	r3, [r1, #6]
 8005a16:	79ca      	ldrb	r2, [r1, #7]
 8005a18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a1c:	80c3      	strh	r3, [r0, #6]
 8005a1e:	4770      	bx	lr

08005a20 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005a20:	b510      	push	{r4, lr}
 8005a22:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8005a24:	2180      	movs	r1, #128	; 0x80
 8005a26:	f7fb f915 	bl	8000c54 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f7fb f911 	bl	8000c54 <USBD_LL_StallEP>
 8005a32:	bd10      	pop	{r4, pc}

08005a34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005a34:	b530      	push	{r4, r5, lr}
 8005a36:	b083      	sub	sp, #12
 8005a38:	4605      	mov	r5, r0
 8005a3a:	460c      	mov	r4, r1
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005a3c:	884a      	ldrh	r2, [r1, #2]
 8005a3e:	0a13      	lsrs	r3, r2, #8
 8005a40:	3b01      	subs	r3, #1
 8005a42:	2b06      	cmp	r3, #6
 8005a44:	d879      	bhi.n	8005b3a <USBD_GetDescriptor+0x106>
 8005a46:	e8df f003 	tbb	[pc, r3]
 8005a4a:	0c04      	.short	0x0c04
 8005a4c:	5c787820 	.word	0x5c787820
 8005a50:	69          	.byte	0x69
 8005a51:	00          	.byte	0x00
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a52:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f10d 0106 	add.w	r1, sp, #6
 8005a5c:	7c00      	ldrb	r0, [r0, #16]
 8005a5e:	4798      	blx	r3
    break;
 8005a60:	e06f      	b.n	8005b42 <USBD_GetDescriptor+0x10e>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005a62:	7c03      	ldrb	r3, [r0, #16]
 8005a64:	b943      	cbnz	r3, 8005a78 <USBD_GetDescriptor+0x44>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005a66:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f10d 0006 	add.w	r0, sp, #6
 8005a70:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a72:	2302      	movs	r3, #2
 8005a74:	7043      	strb	r3, [r0, #1]
 8005a76:	e064      	b.n	8005b42 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005a78:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	f10d 0006 	add.w	r0, sp, #6
 8005a82:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a84:	2302      	movs	r3, #2
 8005a86:	7043      	strb	r3, [r0, #1]
 8005a88:	e05b      	b.n	8005b42 <USBD_GetDescriptor+0x10e>
    }
    break;

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	2a05      	cmp	r2, #5
 8005a8e:	d834      	bhi.n	8005afa <USBD_GetDescriptor+0xc6>
 8005a90:	e8df f002 	tbb	[pc, r2]
 8005a94:	1b130b03 	.word	0x1b130b03
 8005a98:	2b23      	.short	0x2b23
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a9a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f10d 0106 	add.w	r1, sp, #6
 8005aa4:	7c00      	ldrb	r0, [r0, #16]
 8005aa6:	4798      	blx	r3
      break;
 8005aa8:	e04b      	b.n	8005b42 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005aaa:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f10d 0106 	add.w	r1, sp, #6
 8005ab4:	7c00      	ldrb	r0, [r0, #16]
 8005ab6:	4798      	blx	r3
      break;
 8005ab8:	e043      	b.n	8005b42 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005aba:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f10d 0106 	add.w	r1, sp, #6
 8005ac4:	7c00      	ldrb	r0, [r0, #16]
 8005ac6:	4798      	blx	r3
      break;
 8005ac8:	e03b      	b.n	8005b42 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005aca:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f10d 0106 	add.w	r1, sp, #6
 8005ad4:	7c00      	ldrb	r0, [r0, #16]
 8005ad6:	4798      	blx	r3
      break;
 8005ad8:	e033      	b.n	8005b42 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ada:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	f10d 0106 	add.w	r1, sp, #6
 8005ae4:	7c00      	ldrb	r0, [r0, #16]
 8005ae6:	4798      	blx	r3
      break;
 8005ae8:	e02b      	b.n	8005b42 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005aea:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f10d 0106 	add.w	r1, sp, #6
 8005af4:	7c00      	ldrb	r0, [r0, #16]
 8005af6:	4798      	blx	r3
      break;
 8005af8:	e023      	b.n	8005b42 <USBD_GetDescriptor+0x10e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005afa:	4621      	mov	r1, r4
 8005afc:	f7ff ff90 	bl	8005a20 <USBD_CtlError>
      return;
 8005b00:	e032      	b.n	8005b68 <USBD_GetDescriptor+0x134>
#endif
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005b02:	7c03      	ldrb	r3, [r0, #16]
 8005b04:	b933      	cbnz	r3, 8005b14 <USBD_GetDescriptor+0xe0>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b06:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	f10d 0006 	add.w	r0, sp, #6
 8005b10:	4798      	blx	r3
      break;
 8005b12:	e016      	b.n	8005b42 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005b14:	4621      	mov	r1, r4
 8005b16:	f7ff ff83 	bl	8005a20 <USBD_CtlError>
      return;
 8005b1a:	e025      	b.n	8005b68 <USBD_GetDescriptor+0x134>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005b1c:	7c03      	ldrb	r3, [r0, #16]
 8005b1e:	b943      	cbnz	r3, 8005b32 <USBD_GetDescriptor+0xfe>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b20:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	f10d 0006 	add.w	r0, sp, #6
 8005b2a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b2c:	2307      	movs	r3, #7
 8005b2e:	7043      	strb	r3, [r0, #1]
      break;
 8005b30:	e007      	b.n	8005b42 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005b32:	4621      	mov	r1, r4
 8005b34:	f7ff ff74 	bl	8005a20 <USBD_CtlError>
      return;
 8005b38:	e016      	b.n	8005b68 <USBD_GetDescriptor+0x134>
    }

  default:
     USBD_CtlError(pdev , req);
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	f7ff ff70 	bl	8005a20 <USBD_CtlError>
    return;
 8005b40:	e012      	b.n	8005b68 <USBD_GetDescriptor+0x134>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005b42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005b46:	b153      	cbz	r3, 8005b5e <USBD_GetDescriptor+0x12a>
 8005b48:	88e2      	ldrh	r2, [r4, #6]
 8005b4a:	b142      	cbz	r2, 8005b5e <USBD_GetDescriptor+0x12a>
  {

    len = MIN(len, req->wLength);
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	bf28      	it	cs
 8005b50:	461a      	movcs	r2, r3
 8005b52:	f8ad 2006 	strh.w	r2, [sp, #6]

    USBD_CtlSendData (pdev, pbuf, len);
 8005b56:	4601      	mov	r1, r0
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 fa5d 	bl	8006018 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005b5e:	88e3      	ldrh	r3, [r4, #6]
 8005b60:	b913      	cbnz	r3, 8005b68 <USBD_GetDescriptor+0x134>
  {
   USBD_CtlSendStatus(pdev);
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 fa86 	bl	8006074 <USBD_CtlSendStatus>
  }
}
 8005b68:	b003      	add	sp, #12
 8005b6a:	bd30      	pop	{r4, r5, pc}

08005b6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4604      	mov	r4, r0
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b70:	888b      	ldrh	r3, [r1, #4]
 8005b72:	b9f3      	cbnz	r3, 8005bb2 <USBD_SetAddress+0x46>
 8005b74:	88cb      	ldrh	r3, [r1, #6]
 8005b76:	b9e3      	cbnz	r3, 8005bb2 <USBD_SetAddress+0x46>
 8005b78:	884b      	ldrh	r3, [r1, #2]
 8005b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7c:	d819      	bhi.n	8005bb2 <USBD_SetAddress+0x46>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b7e:	f003 057f 	and.w	r5, r3, #127	; 0x7f

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b82:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d102      	bne.n	8005b90 <USBD_SetAddress+0x24>
    {
      USBD_CtlError(pdev , req);
 8005b8a:	f7ff ff49 	bl	8005a20 <USBD_CtlError>
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005b90:	f880 5276 	strb.w	r5, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b94:	4629      	mov	r1, r5
 8005b96:	f7fb f86d 	bl	8000c74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 fa6a 	bl	8006074 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ba0:	b11d      	cbz	r5, 8005baa <USBD_SetAddress+0x3e>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8005ba8:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8005bb0:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f7ff ff34 	bl	8005a20 <USBD_CtlError>
 8005bb8:	bd38      	pop	{r3, r4, r5, pc}
 8005bba:	bf00      	nop

08005bbc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	460d      	mov	r5, r1
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005bc2:	7889      	ldrb	r1, [r1, #2]
 8005bc4:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <USBD_SetConfig+0xac>)
 8005bc6:	7019      	strb	r1, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005bc8:	2901      	cmp	r1, #1
 8005bca:	d903      	bls.n	8005bd4 <USBD_SetConfig+0x18>
  {
    USBD_CtlError(pdev, req);
 8005bcc:	4629      	mov	r1, r5
 8005bce:	f7ff ff27 	bl	8005a20 <USBD_CtlError>
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (pdev->dev_state)
 8005bd4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d002      	beq.n	8005be2 <USBD_SetConfig+0x26>
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d015      	beq.n	8005c0c <USBD_SetConfig+0x50>
 8005be0:	e039      	b.n	8005c56 <USBD_SetConfig+0x9a>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005be2:	b181      	cbz	r1, 8005c06 <USBD_SetConfig+0x4a>
      {
        pdev->dev_config = cfgidx;
 8005be4:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005be6:	2303      	movs	r3, #3
 8005be8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005bec:	f7ff fda0 	bl	8005730 <USBD_SetClassConfig>
 8005bf0:	2802      	cmp	r0, #2
 8005bf2:	d104      	bne.n	8005bfe <USBD_SetConfig+0x42>
        {
          USBD_CtlError(pdev, req);
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f7ff ff12 	bl	8005a20 <USBD_CtlError>
          return;
 8005bfc:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 fa38 	bl	8006074 <USBD_CtlSendStatus>
 8005c04:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8005c06:	f000 fa35 	bl	8006074 <USBD_CtlSendStatus>
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005c0c:	b949      	cbnz	r1, 8005c22 <USBD_SetConfig+0x66>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c0e:	2302      	movs	r3, #2
 8005c10:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005c14:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8005c16:	f7ff fd99 	bl	800574c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f000 fa2a 	bl	8006074 <USBD_CtlSendStatus>
 8005c20:	bd38      	pop	{r3, r4, r5, pc}
      }
      else if (cfgidx != pdev->dev_config)
 8005c22:	6843      	ldr	r3, [r0, #4]
 8005c24:	4299      	cmp	r1, r3
 8005c26:	d013      	beq.n	8005c50 <USBD_SetConfig+0x94>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c28:	b2d9      	uxtb	r1, r3
 8005c2a:	f7ff fd8f 	bl	800574c <USBD_ClrClassConfig>

        /* set new configuration */
        pdev->dev_config = cfgidx;
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <USBD_SetConfig+0xac>)
 8005c30:	7819      	ldrb	r1, [r3, #0]
 8005c32:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c34:	4620      	mov	r0, r4
 8005c36:	f7ff fd7b 	bl	8005730 <USBD_SetClassConfig>
 8005c3a:	2802      	cmp	r0, #2
 8005c3c:	d104      	bne.n	8005c48 <USBD_SetConfig+0x8c>
        {
          USBD_CtlError(pdev, req);
 8005c3e:	4629      	mov	r1, r5
 8005c40:	4620      	mov	r0, r4
 8005c42:	f7ff feed 	bl	8005a20 <USBD_CtlError>
          return;
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fa13 	bl	8006074 <USBD_CtlSendStatus>
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8005c50:	f000 fa10 	bl	8006074 <USBD_CtlSendStatus>
 8005c54:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c56:	4629      	mov	r1, r5
 8005c58:	f7ff fee2 	bl	8005a20 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005c5c:	4b02      	ldr	r3, [pc, #8]	; (8005c68 <USBD_SetConfig+0xac>)
 8005c5e:	7819      	ldrb	r1, [r3, #0]
 8005c60:	4620      	mov	r0, r4
 8005c62:	f7ff fd73 	bl	800574c <USBD_ClrClassConfig>
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20003f04 	.word	0x20003f04

08005c6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c6c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8005c6e:	88cb      	ldrh	r3, [r1, #6]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d002      	beq.n	8005c7a <USBD_GetConfig+0xe>
  {
    USBD_CtlError(pdev , req);
 8005c74:	f7ff fed4 	bl	8005a20 <USBD_CtlError>
 8005c78:	bd08      	pop	{r3, pc}
  }
  else
  {
    switch (pdev->dev_state)
 8005c7a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005c7e:	b18b      	cbz	r3, 8005ca4 <USBD_GetConfig+0x38>
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d902      	bls.n	8005c8a <USBD_GetConfig+0x1e>
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d008      	beq.n	8005c9a <USBD_GetConfig+0x2e>
 8005c88:	e00c      	b.n	8005ca4 <USBD_GetConfig+0x38>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
      pdev->dev_default_config = 0U;
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005c92:	2201      	movs	r2, #1
 8005c94:	f000 f9c0 	bl	8006018 <USBD_CtlSendData>
      break;
 8005c98:	bd08      	pop	{r3, pc}

    case USBD_STATE_CONFIGURED:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	1d01      	adds	r1, r0, #4
 8005c9e:	f000 f9bb 	bl	8006018 <USBD_CtlSendData>
      break;
 8005ca2:	bd08      	pop	{r3, pc}

    default:
      USBD_CtlError(pdev , req);
 8005ca4:	f7ff febc 	bl	8005a20 <USBD_CtlError>
 8005ca8:	bd08      	pop	{r3, pc}
 8005caa:	bf00      	nop

08005cac <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cac:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005cae:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d812      	bhi.n	8005cde <USBD_GetStatus+0x32>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8005cb8:	88cb      	ldrh	r3, [r1, #6]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d002      	beq.n	8005cc4 <USBD_GetStatus+0x18>
    {
      USBD_CtlError(pdev, req);
 8005cbe:	f7ff feaf 	bl	8005a20 <USBD_CtlError>
      break;
 8005cc2:	bd08      	pop	{r3, pc}
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005cc8:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8005ccc:	b10b      	cbz	r3, 8005cd2 <USBD_GetStatus+0x26>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	60c3      	str	r3, [r0, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f100 010c 	add.w	r1, r0, #12
 8005cd8:	f000 f99e 	bl	8006018 <USBD_CtlSendData>
    break;
 8005cdc:	bd08      	pop	{r3, pc}

  default :
    USBD_CtlError(pdev , req);
 8005cde:	f7ff fe9f 	bl	8005a20 <USBD_CtlError>
 8005ce2:	bd08      	pop	{r3, pc}

08005ce4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005ce4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005ce6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005cea:	3b01      	subs	r3, #1
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d808      	bhi.n	8005d02 <USBD_ClrFeature+0x1e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005cf0:	884b      	ldrh	r3, [r1, #2]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d107      	bne.n	8005d06 <USBD_ClrFeature+0x22>
    {
      pdev->dev_remote_wakeup = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8005cfc:	f000 f9ba 	bl	8006074 <USBD_CtlSendStatus>
 8005d00:	bd08      	pop	{r3, pc}
    }
    break;

  default :
     USBD_CtlError(pdev , req);
 8005d02:	f7ff fe8d 	bl	8005a20 <USBD_CtlError>
 8005d06:	bd08      	pop	{r3, pc}

08005d08 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005d08:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d0a:	780b      	ldrb	r3, [r1, #0]
 8005d0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d003      	beq.n	8005d1c <USBD_StdDevReq+0x14>
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	d001      	beq.n	8005d1c <USBD_StdDevReq+0x14>
 8005d18:	bb3b      	cbnz	r3, 8005d6a <USBD_StdDevReq+0x62>
 8005d1a:	e004      	b.n	8005d26 <USBD_StdDevReq+0x1e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005d1c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	4798      	blx	r3
    break;
 8005d24:	e023      	b.n	8005d6e <USBD_StdDevReq+0x66>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005d26:	784b      	ldrb	r3, [r1, #1]
 8005d28:	2b09      	cmp	r3, #9
 8005d2a:	d81b      	bhi.n	8005d64 <USBD_StdDevReq+0x5c>
 8005d2c:	e8df f003 	tbb	[pc, r3]
 8005d30:	141a1711 	.word	0x141a1711
 8005d34:	1a05081a 	.word	0x1a05081a
 8005d38:	0b0e      	.short	0x0b0e
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005d3a:	f7ff fe7b 	bl	8005a34 <USBD_GetDescriptor>
      break;
 8005d3e:	e016      	b.n	8005d6e <USBD_StdDevReq+0x66>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005d40:	f7ff ff14 	bl	8005b6c <USBD_SetAddress>
      break;
 8005d44:	e013      	b.n	8005d6e <USBD_StdDevReq+0x66>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005d46:	f7ff ff39 	bl	8005bbc <USBD_SetConfig>
      break;
 8005d4a:	e010      	b.n	8005d6e <USBD_StdDevReq+0x66>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005d4c:	f7ff ff8e 	bl	8005c6c <USBD_GetConfig>
      break;
 8005d50:	e00d      	b.n	8005d6e <USBD_StdDevReq+0x66>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005d52:	f7ff ffab 	bl	8005cac <USBD_GetStatus>
      break;
 8005d56:	e00a      	b.n	8005d6e <USBD_StdDevReq+0x66>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005d58:	f7ff fe44 	bl	80059e4 <USBD_SetFeature>
      break;
 8005d5c:	e007      	b.n	8005d6e <USBD_StdDevReq+0x66>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8005d5e:	f7ff ffc1 	bl	8005ce4 <USBD_ClrFeature>
      break;
 8005d62:	e004      	b.n	8005d6e <USBD_StdDevReq+0x66>

    default:
      USBD_CtlError(pdev, req);
 8005d64:	f7ff fe5c 	bl	8005a20 <USBD_CtlError>
      break;
 8005d68:	e001      	b.n	8005d6e <USBD_StdDevReq+0x66>
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8005d6a:	f7ff fe59 	bl	8005a20 <USBD_CtlError>
    break;
  }

  return ret;
}
 8005d6e:	2000      	movs	r0, #0
 8005d70:	bd08      	pop	{r3, pc}
 8005d72:	bf00      	nop

08005d74 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4605      	mov	r5, r0
 8005d78:	460c      	mov	r4, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d7a:	780b      	ldrb	r3, [r1, #0]
 8005d7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d002      	beq.n	8005d8a <USBD_StdItfReq+0x16>
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d000      	beq.n	8005d8a <USBD_StdItfReq+0x16>
 8005d88:	b9f3      	cbnz	r3, 8005dc8 <USBD_StdItfReq+0x54>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005d8a:	f895 3274 	ldrb.w	r3, [r5, #628]	; 0x274
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d814      	bhi.n	8005dbe <USBD_StdItfReq+0x4a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d94:	7923      	ldrb	r3, [r4, #4]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d80c      	bhi.n	8005db4 <USBD_StdItfReq+0x40>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005d9a:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4621      	mov	r1, r4
 8005da2:	4628      	mov	r0, r5
 8005da4:	4798      	blx	r3

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005da6:	88e3      	ldrh	r3, [r4, #6]
 8005da8:	b983      	cbnz	r3, 8005dcc <USBD_StdItfReq+0x58>
 8005daa:	b978      	cbnz	r0, 8005dcc <USBD_StdItfReq+0x58>
        {
          USBD_CtlSendStatus(pdev);
 8005dac:	4628      	mov	r0, r5
 8005dae:	f000 f961 	bl	8006074 <USBD_CtlSendStatus>
 8005db2:	e00b      	b.n	8005dcc <USBD_StdItfReq+0x58>
        }
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f7ff fe32 	bl	8005a20 <USBD_CtlError>
 8005dbc:	e006      	b.n	8005dcc <USBD_StdItfReq+0x58>
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f7ff fe2d 	bl	8005a20 <USBD_CtlError>
      break;
 8005dc6:	e001      	b.n	8005dcc <USBD_StdItfReq+0x58>
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8005dc8:	f7ff fe2a 	bl	8005a20 <USBD_CtlError>
    break;
  }

  return USBD_OK;
}
 8005dcc:	2000      	movs	r0, #0
 8005dce:	bd38      	pop	{r3, r4, r5, pc}

08005dd0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4604      	mov	r4, r0

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005dd4:	888a      	ldrh	r2, [r1, #4]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dd6:	780b      	ldrb	r3, [r1, #0]
 8005dd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d006      	beq.n	8005dee <USBD_StdEPReq+0x1e>
 8005de0:	b2d0      	uxtb	r0, r2
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d003      	beq.n	8005dee <USBD_StdEPReq+0x1e>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 80f3 	bne.w	8005fd2 <USBD_StdEPReq+0x202>
 8005dec:	e006      	b.n	8005dfc <USBD_StdEPReq+0x2c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005dee:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4620      	mov	r0, r4
 8005df6:	4798      	blx	r3
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005df8:	2000      	movs	r0, #0
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
    break;
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d105      	bne.n	8005e0c <USBD_StdEPReq+0x3c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005e00:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	4620      	mov	r0, r4
 8005e08:	4798      	blx	r3

      return ret;
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
    }

    switch (req->bRequest)
 8005e0c:	784b      	ldrb	r3, [r1, #1]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d032      	beq.n	8005e78 <USBD_StdEPReq+0xa8>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d05e      	beq.n	8005ed4 <USBD_StdEPReq+0x104>
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	f040 80d6 	bne.w	8005fc8 <USBD_StdEPReq+0x1f8>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005e1c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d002      	beq.n	8005e2a <USBD_StdEPReq+0x5a>
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d012      	beq.n	8005e4e <USBD_StdEPReq+0x7e>
 8005e28:	e021      	b.n	8005e6e <USBD_StdEPReq+0x9e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e2a:	b158      	cbz	r0, 8005e44 <USBD_StdEPReq+0x74>
 8005e2c:	2880      	cmp	r0, #128	; 0x80
 8005e2e:	d009      	beq.n	8005e44 <USBD_StdEPReq+0x74>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005e30:	4601      	mov	r1, r0
 8005e32:	4620      	mov	r0, r4
 8005e34:	f7fa ff0e 	bl	8000c54 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005e38:	2180      	movs	r1, #128	; 0x80
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f7fa ff0a 	bl	8000c54 <USBD_LL_StallEP>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005e40:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
          USBD_CtlError(pdev, req);
 8005e44:	4620      	mov	r0, r4
 8005e46:	f7ff fdeb 	bl	8005a20 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005e4e:	884b      	ldrh	r3, [r1, #2]
 8005e50:	b943      	cbnz	r3, 8005e64 <USBD_StdEPReq+0x94>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e52:	b138      	cbz	r0, 8005e64 <USBD_StdEPReq+0x94>
 8005e54:	2880      	cmp	r0, #128	; 0x80
 8005e56:	d005      	beq.n	8005e64 <USBD_StdEPReq+0x94>
 8005e58:	88cb      	ldrh	r3, [r1, #6]
 8005e5a:	b91b      	cbnz	r3, 8005e64 <USBD_StdEPReq+0x94>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f7fa fef8 	bl	8000c54 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 f905 	bl	8006074 <USBD_CtlSendStatus>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005e6a:	2000      	movs	r0, #0
            USBD_LL_StallEP(pdev, ep_addr);
          }
        }
        USBD_CtlSendStatus(pdev);

        break;
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}

      default:
        USBD_CtlError(pdev, req);
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f7ff fdd6 	bl	8005a20 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005e74:	2000      	movs	r0, #0

        break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005e78:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d002      	beq.n	8005e86 <USBD_StdEPReq+0xb6>
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d012      	beq.n	8005eaa <USBD_StdEPReq+0xda>
 8005e84:	e021      	b.n	8005eca <USBD_StdEPReq+0xfa>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e86:	b158      	cbz	r0, 8005ea0 <USBD_StdEPReq+0xd0>
 8005e88:	2880      	cmp	r0, #128	; 0x80
 8005e8a:	d009      	beq.n	8005ea0 <USBD_StdEPReq+0xd0>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005e8c:	4601      	mov	r1, r0
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7fa fee0 	bl	8000c54 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	4620      	mov	r0, r4
 8005e98:	f7fa fedc 	bl	8000c54 <USBD_LL_StallEP>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005e9c:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
          USBD_CtlError(pdev, req);
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7ff fdbd 	bl	8005a20 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005eaa:	884b      	ldrh	r3, [r1, #2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f040 8095 	bne.w	8005fdc <USBD_StdEPReq+0x20c>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005eb2:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8005eb6:	d003      	beq.n	8005ec0 <USBD_StdEPReq+0xf0>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005eb8:	4601      	mov	r1, r0
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f7fa fed2 	bl	8000c64 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 f8d7 	bl	8006074 <USBD_CtlSendStatus>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlSendStatus(pdev);
        }
        break;

      default:
        USBD_CtlError(pdev, req);
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7ff fda8 	bl	8005a20 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005ed0:	2000      	movs	r0, #0
        }
        break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005ed4:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d002      	beq.n	8005ee2 <USBD_StdEPReq+0x112>
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d025      	beq.n	8005f2c <USBD_StdEPReq+0x15c>
 8005ee0:	e06d      	b.n	8005fbe <USBD_StdEPReq+0x1ee>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ee2:	b130      	cbz	r0, 8005ef2 <USBD_StdEPReq+0x122>
 8005ee4:	2880      	cmp	r0, #128	; 0x80
 8005ee6:	d004      	beq.n	8005ef2 <USBD_StdEPReq+0x122>
        {
          USBD_CtlError(pdev, req);
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7ff fd99 	bl	8005a20 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005eee:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_CtlError(pdev, req);
          break;
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005ef2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005ef6:	d009      	beq.n	8005f0c <USBD_StdEPReq+0x13c>
 8005ef8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005efc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f00:	0083      	lsls	r3, r0, #2
 8005f02:	f103 0110 	add.w	r1, r3, #16
 8005f06:	4421      	add	r1, r4
 8005f08:	3104      	adds	r1, #4
 8005f0a:	e007      	b.n	8005f1c <USBD_StdEPReq+0x14c>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005f0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_CtlError(pdev, req);
          break;
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005f10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f14:	0083      	lsls	r3, r0, #2
 8005f16:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f1a:	18e1      	adds	r1, r4, r3
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	600d      	str	r5, [r1, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f20:	2202      	movs	r2, #2
 8005f22:	4620      	mov	r0, r4
 8005f24:	f000 f878 	bl	8006018 <USBD_CtlSendData>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f28:	4628      	mov	r0, r5
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005f2c:	b252      	sxtb	r2, r2
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	da0c      	bge.n	8005f4c <USBD_StdEPReq+0x17c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f32:	f000 030f 	and.w	r3, r0, #15
 8005f36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f3a:	009d      	lsls	r5, r3, #2
 8005f3c:	4425      	add	r5, r4
 8005f3e:	69ab      	ldr	r3, [r5, #24]
 8005f40:	b993      	cbnz	r3, 8005f68 <USBD_StdEPReq+0x198>
          {
            USBD_CtlError(pdev, req);
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7ff fd6c 	bl	8005a20 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f48:	2000      	movs	r0, #0
        if((ep_addr & 0x80U) == 0x80U)
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
          {
            USBD_CtlError(pdev, req);
            break;
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f4c:	f000 030f 	and.w	r3, r0, #15
 8005f50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f54:	009d      	lsls	r5, r3, #2
 8005f56:	4425      	add	r5, r4
 8005f58:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 8005f5c:	b923      	cbnz	r3, 8005f68 <USBD_StdEPReq+0x198>
          {
            USBD_CtlError(pdev, req);
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f7ff fd5e 	bl	8005a20 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f64:	2000      	movs	r0, #0
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
          {
            USBD_CtlError(pdev, req);
            break;
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	da09      	bge.n	8005f80 <USBD_StdEPReq+0x1b0>
 8005f6c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8005f70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005f74:	0093      	lsls	r3, r2, #2
 8005f76:	f103 0510 	add.w	r5, r3, #16
 8005f7a:	4425      	add	r5, r4
 8005f7c:	3504      	adds	r5, #4
 8005f7e:	e007      	b.n	8005f90 <USBD_StdEPReq+0x1c0>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005f80:	f000 027f 	and.w	r2, r0, #127	; 0x7f
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005f84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005f88:	0093      	lsls	r3, r2, #2
 8005f8a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f8e:	18e5      	adds	r5, r4, r3
          &pdev->ep_out[ep_addr & 0x7FU];

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f90:	b108      	cbz	r0, 8005f96 <USBD_StdEPReq+0x1c6>
 8005f92:	2880      	cmp	r0, #128	; 0x80
 8005f94:	d102      	bne.n	8005f9c <USBD_StdEPReq+0x1cc>
          {
            pep->status = 0x0000U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	e009      	b.n	8005fb0 <USBD_StdEPReq+0x1e0>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005f9c:	4601      	mov	r1, r0
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f7fa fe14 	bl	8000bcc <USBD_LL_IsStallEP>
 8005fa4:	b110      	cbz	r0, 8005fac <USBD_StdEPReq+0x1dc>
          {
            pep->status = 0x0001U;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	e001      	b.n	8005fb0 <USBD_StdEPReq+0x1e0>
          }
          else
          {
            pep->status = 0x0000U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	602b      	str	r3, [r5, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 f82f 	bl	8006018 <USBD_CtlSendData>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005fba:	2000      	movs	r0, #0
          {
            pep->status = 0x0000U;
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;
 8005fbc:	bd38      	pop	{r3, r4, r5, pc}

      default:
        USBD_CtlError(pdev, req);
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f7ff fd2e 	bl	8005a20 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005fc4:	2000      	movs	r0, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f7ff fd29 	bl	8005a20 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005fce:	2000      	movs	r0, #0
      }
      break;

    default:
      USBD_CtlError(pdev, req);
      break;
 8005fd0:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7ff fd24 	bl	8005a20 <USBD_CtlError>
    break;
  }

  return ret;
 8005fd8:	2000      	movs	r0, #0
    }
    break;

  default:
    USBD_CtlError(pdev, req);
    break;
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
  }

  return ret;
 8005fdc:	2000      	movs	r0, #0
}
 8005fde:	bd38      	pop	{r3, r4, r5, pc}

08005fe0 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8005fe0:	b1c8      	cbz	r0, 8006016 <USBD_GetString+0x36>
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005fe2:	b570      	push	{r4, r5, r6, lr}
 8005fe4:	460d      	mov	r5, r1
 8005fe6:	4616      	mov	r6, r2
 8005fe8:	4604      	mov	r4, r0
  uint8_t idx = 0U;

  if (desc != NULL)
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005fea:	f7ff fcf1 	bl	80059d0 <USBD_GetLen>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	0040      	lsls	r0, r0, #1
 8005ff2:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005ff4:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	706b      	strb	r3, [r5, #1]
 8005ffa:	2302      	movs	r3, #2

    while (*desc != '\0')
 8005ffc:	e007      	b.n	800600e <USBD_GetString+0x2e>
    {
      unicode[idx++] = *desc++;
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	3401      	adds	r4, #1
 8006004:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8006006:	3302      	adds	r3, #2
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2100      	movs	r1, #0
 800600c:	54a9      	strb	r1, [r5, r2]
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
    unicode[idx++] = *(uint8_t *)(void *)len;
    unicode[idx++] = USB_DESC_TYPE_STRING;

    while (*desc != '\0')
 800600e:	7821      	ldrb	r1, [r4, #0]
 8006010:	2900      	cmp	r1, #0
 8006012:	d1f4      	bne.n	8005ffe <USBD_GetString+0x1e>
 8006014:	bd70      	pop	{r4, r5, r6, pc}
 8006016:	4770      	bx	lr

08006018 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006018:	b510      	push	{r4, lr}
 800601a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800601c:	2202      	movs	r2, #2
 800601e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006022:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8006024:	6203      	str	r3, [r0, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006026:	460a      	mov	r2, r1
 8006028:	2100      	movs	r1, #0
 800602a:	f7fa fe2b 	bl	8000c84 <USBD_LL_Transmit>

  return USBD_OK;
}
 800602e:	2000      	movs	r0, #0
 8006030:	bd10      	pop	{r4, pc}
 8006032:	bf00      	nop

08006034 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006034:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006036:	4613      	mov	r3, r2
 8006038:	460a      	mov	r2, r1
 800603a:	2100      	movs	r1, #0
 800603c:	f7fa fe22 	bl	8000c84 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006040:	2000      	movs	r0, #0
 8006042:	bd08      	pop	{r3, pc}

08006044 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006044:	b510      	push	{r4, lr}
 8006046:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006048:	2203      	movs	r2, #3
 800604a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800604e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006052:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006056:	460a      	mov	r2, r1
 8006058:	2100      	movs	r1, #0
 800605a:	f7fa fe1b 	bl	8000c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800605e:	2000      	movs	r0, #0
 8006060:	bd10      	pop	{r4, pc}
 8006062:	bf00      	nop

08006064 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006064:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006066:	4613      	mov	r3, r2
 8006068:	460a      	mov	r2, r1
 800606a:	2100      	movs	r1, #0
 800606c:	f7fa fe12 	bl	8000c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006070:	2000      	movs	r0, #0
 8006072:	bd08      	pop	{r3, pc}

08006074 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006074:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006076:	2304      	movs	r3, #4
 8006078:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800607c:	2300      	movs	r3, #0
 800607e:	461a      	mov	r2, r3
 8006080:	4619      	mov	r1, r3
 8006082:	f7fa fdff 	bl	8000c84 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006086:	2000      	movs	r0, #0
 8006088:	bd08      	pop	{r3, pc}
 800608a:	bf00      	nop

0800608c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800608c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800608e:	2305      	movs	r3, #5
 8006090:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006094:	2300      	movs	r3, #0
 8006096:	461a      	mov	r2, r3
 8006098:	4619      	mov	r1, r3
 800609a:	f7fa fdfb 	bl	8000c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800609e:	2000      	movs	r0, #0
 80060a0:	bd08      	pop	{r3, pc}
 80060a2:	bf00      	nop

080060a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80060a4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80060a6:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060aa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80060ae:	b15b      	cbz	r3, 80060c8 <USBD_CDC_EP0_RxReady+0x24>
 80060b0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80060b4:	28ff      	cmp	r0, #255	; 0xff
 80060b6:	d007      	beq.n	80060c8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80060be:	4621      	mov	r1, r4
 80060c0:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80060c2:	23ff      	movs	r3, #255	; 0xff
 80060c4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80060c8:	2000      	movs	r0, #0
 80060ca:	bd10      	pop	{r4, pc}

080060cc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80060cc:	2343      	movs	r3, #67	; 0x43
 80060ce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80060d0:	4800      	ldr	r0, [pc, #0]	; (80060d4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80060d2:	4770      	bx	lr
 80060d4:	20000070 	.word	0x20000070

080060d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80060d8:	2343      	movs	r3, #67	; 0x43
 80060da:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80060dc:	4800      	ldr	r0, [pc, #0]	; (80060e0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80060de:	4770      	bx	lr
 80060e0:	2000013c 	.word	0x2000013c

080060e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80060e4:	2343      	movs	r3, #67	; 0x43
 80060e6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80060e8:	4800      	ldr	r0, [pc, #0]	; (80060ec <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80060ea:	4770      	bx	lr
 80060ec:	200000f8 	.word	0x200000f8

080060f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80060f0:	230a      	movs	r3, #10
 80060f2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80060f4:	4800      	ldr	r0, [pc, #0]	; (80060f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80060f6:	4770      	bx	lr
 80060f8:	200000ec 	.word	0x200000ec

080060fc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006100:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006104:	f7fa fd7a 	bl	8000bfc <USBD_LL_GetRxDataSize>
 8006108:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800610c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8006110:	b14b      	cbz	r3, 8006126 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006112:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800611c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006120:	4798      	blx	r3

    return USBD_OK;
 8006122:	2000      	movs	r0, #0
 8006124:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8006126:	2002      	movs	r0, #2
  }
}
 8006128:	bd38      	pop	{r3, r4, r5, pc}
 800612a:	bf00      	nop

0800612c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800612c:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800612e:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006132:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298

  if(pdev->pClassData != NULL)
 8006136:	b1fa      	cbz	r2, 8006178 <USBD_CDC_DataIn+0x4c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006138:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800613c:	00a3      	lsls	r3, r4, #2
 800613e:	4403      	add	r3, r0
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	b1ab      	cbz	r3, 8006170 <USBD_CDC_DataIn+0x44>
 8006144:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8006148:	00b4      	lsls	r4, r6, #2
 800614a:	442c      	add	r4, r5
 800614c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800614e:	fbb3 f4f5 	udiv	r4, r3, r5
 8006152:	fb05 3314 	mls	r3, r5, r4, r3
 8006156:	b95b      	cbnz	r3, 8006170 <USBD_CDC_DataIn+0x44>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006158:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800615c:	0093      	lsls	r3, r2, #2
 800615e:	4403      	add	r3, r0
 8006160:	2400      	movs	r4, #0
 8006162:	61dc      	str	r4, [r3, #28]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006164:	4623      	mov	r3, r4
 8006166:	4622      	mov	r2, r4
 8006168:	f7fa fd8c 	bl	8000c84 <USBD_LL_Transmit>
    }
    else
    {
      hcdc->TxState = 0U;
    }
    return USBD_OK;
 800616c:	4620      	mov	r0, r4
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800616e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
      hcdc->TxState = 0U;
 8006170:	2000      	movs	r0, #0
 8006172:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8006176:	bd70      	pop	{r4, r5, r6, pc}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8006178:	2002      	movs	r0, #2
  }
}
 800617a:	bd70      	pop	{r4, r5, r6, pc}

0800617c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	4605      	mov	r5, r0
 8006182:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006184:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800618e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006192:	780b      	ldrb	r3, [r1, #0]
 8006194:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8006198:	d027      	beq.n	80061ea <USBD_CDC_Setup+0x6e>
 800619a:	2a20      	cmp	r2, #32
 800619c:	d154      	bne.n	8006248 <USBD_CDC_Setup+0xcc>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800619e:	88ca      	ldrh	r2, [r1, #6]
 80061a0:	b1da      	cbz	r2, 80061da <USBD_CDC_Setup+0x5e>
    {
      if (req->bmRequest & 0x80U)
 80061a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80061a6:	d00c      	beq.n	80061c2 <USBD_CDC_Setup+0x46>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061a8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	4631      	mov	r1, r6
 80061b0:	7860      	ldrb	r0, [r4, #1]
 80061b2:	4798      	blx	r3
                                                          (uint8_t *)(void *)hcdc->data,
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061b4:	88e2      	ldrh	r2, [r4, #6]
 80061b6:	4631      	mov	r1, r6
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7ff ff2d 	bl	8006018 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80061be:	2000      	movs	r0, #0
 80061c0:	e047      	b.n	8006252 <USBD_CDC_Setup+0xd6>

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 80061c2:	784b      	ldrb	r3, [r1, #1]
 80061c4:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80061c8:	798b      	ldrb	r3, [r1, #6]
 80061ca:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201

        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061ce:	88ca      	ldrh	r2, [r1, #6]
 80061d0:	4631      	mov	r1, r6
 80061d2:	f7ff ff37 	bl	8006044 <USBD_CtlPrepareRx>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80061d6:	2000      	movs	r0, #0
 80061d8:	e03b      	b.n	8006252 <USBD_CDC_Setup+0xd6>
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061da:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	7848      	ldrb	r0, [r1, #1]
 80061e4:	4798      	blx	r3
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80061e6:	2000      	movs	r0, #0
 80061e8:	e033      	b.n	8006252 <USBD_CDC_Setup+0xd6>
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80061ea:	784b      	ldrb	r3, [r1, #1]
 80061ec:	2b0a      	cmp	r3, #10
 80061ee:	d010      	beq.n	8006212 <USBD_CDC_Setup+0x96>
 80061f0:	2b0b      	cmp	r3, #11
 80061f2:	d01d      	beq.n	8006230 <USBD_CDC_Setup+0xb4>
 80061f4:	bb23      	cbnz	r3, 8006240 <USBD_CDC_Setup+0xc4>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d105      	bne.n	800620a <USBD_CDC_Setup+0x8e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80061fe:	2202      	movs	r2, #2
 8006200:	a901      	add	r1, sp, #4
 8006202:	f7ff ff09 	bl	8006018 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006206:	2000      	movs	r0, #0
 8006208:	e023      	b.n	8006252 <USBD_CDC_Setup+0xd6>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 800620a:	f7ff fc09 	bl	8005a20 <USBD_CtlError>
			  ret = USBD_FAIL;
 800620e:	2002      	movs	r0, #2
 8006210:	e01f      	b.n	8006252 <USBD_CDC_Setup+0xd6>
      }
      break;

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006212:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006216:	2b03      	cmp	r3, #3
 8006218:	d106      	bne.n	8006228 <USBD_CDC_Setup+0xac>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800621a:	2201      	movs	r2, #1
 800621c:	f10d 0107 	add.w	r1, sp, #7
 8006220:	f7ff fefa 	bl	8006018 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006224:	2000      	movs	r0, #0
 8006226:	e014      	b.n	8006252 <USBD_CDC_Setup+0xd6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 8006228:	f7ff fbfa 	bl	8005a20 <USBD_CtlError>
			  ret = USBD_FAIL;
 800622c:	2002      	movs	r0, #2
 800622e:	e010      	b.n	8006252 <USBD_CDC_Setup+0xd6>
      }
      break;

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006230:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006234:	2b03      	cmp	r3, #3
 8006236:	d00b      	beq.n	8006250 <USBD_CDC_Setup+0xd4>
      {
        USBD_CtlError (pdev, req);
 8006238:	f7ff fbf2 	bl	8005a20 <USBD_CtlError>
			  ret = USBD_FAIL;
 800623c:	2002      	movs	r0, #2
 800623e:	e008      	b.n	8006252 <USBD_CDC_Setup+0xd6>
      }
      break;

    default:
      USBD_CtlError (pdev, req);
 8006240:	f7ff fbee 	bl	8005a20 <USBD_CtlError>
      ret = USBD_FAIL;
 8006244:	2002      	movs	r0, #2
      break;
 8006246:	e004      	b.n	8006252 <USBD_CDC_Setup+0xd6>
    }
    break;

  default:
    USBD_CtlError (pdev, req);
 8006248:	f7ff fbea 	bl	8005a20 <USBD_CtlError>
    ret = USBD_FAIL;
 800624c:	2002      	movs	r0, #2
    break;
 800624e:	e000      	b.n	8006252 <USBD_CDC_Setup+0xd6>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006250:	2000      	movs	r0, #0
    ret = USBD_FAIL;
    break;
  }

  return ret;
}
 8006252:	b002      	add	sp, #8
 8006254:	bd70      	pop	{r4, r5, r6, pc}
 8006256:	bf00      	nop

08006258 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4604      	mov	r4, r0
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800625c:	2181      	movs	r1, #129	; 0x81
 800625e:	f7fa fcf1 	bl	8000c44 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006262:	2500      	movs	r5, #0
 8006264:	62e5      	str	r5, [r4, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006266:	2101      	movs	r1, #1
 8006268:	4620      	mov	r0, r4
 800626a:	f7fa fceb 	bl	8000c44 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800626e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006272:	2182      	movs	r1, #130	; 0x82
 8006274:	4620      	mov	r0, r4
 8006276:	f7fa fce5 	bl	8000c44 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800627a:	6425      	str	r5, [r4, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800627c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8006280:	b14b      	cbz	r3, 8006296 <USBD_CDC_DeInit+0x3e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006282:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800628a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800628e:	f000 fc87 	bl	8006ba0 <free>
    pdev->pClassData = NULL;
 8006292:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
  }

  return ret;
}
 8006296:	2000      	movs	r0, #0
 8006298:	bd38      	pop	{r3, r4, r5, pc}
 800629a:	bf00      	nop

0800629c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4604      	mov	r4, r0
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80062a0:	7c03      	ldrb	r3, [r0, #16]
 80062a2:	b98b      	cbnz	r3, 80062c8 <USBD_CDC_Init+0x2c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a8:	2202      	movs	r2, #2
 80062aa:	2181      	movs	r1, #129	; 0x81
 80062ac:	f7fa fcbe 	bl	8000c2c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062b0:	2501      	movs	r5, #1
 80062b2:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062b8:	2202      	movs	r2, #2
 80062ba:	4629      	mov	r1, r5
 80062bc:	4620      	mov	r0, r4
 80062be:	f7fa fcb5 	bl	8000c2c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062c2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 80062c6:	e00e      	b.n	80062e6 <USBD_CDC_Init+0x4a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062c8:	2340      	movs	r3, #64	; 0x40
 80062ca:	2202      	movs	r2, #2
 80062cc:	2181      	movs	r1, #129	; 0x81
 80062ce:	f7fa fcad 	bl	8000c2c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062d2:	2501      	movs	r5, #1
 80062d4:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062d6:	2340      	movs	r3, #64	; 0x40
 80062d8:	2202      	movs	r2, #2
 80062da:	4629      	mov	r1, r5
 80062dc:	4620      	mov	r0, r4
 80062de:	f7fa fca5 	bl	8000c2c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062e2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062e6:	2308      	movs	r3, #8
 80062e8:	2203      	movs	r2, #3
 80062ea:	2182      	movs	r1, #130	; 0x82
 80062ec:	4620      	mov	r0, r4
 80062ee:	f7fa fc9d 	bl	8000c2c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062f2:	2301      	movs	r3, #1
 80062f4:	6423      	str	r3, [r4, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80062f6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062fa:	f000 fc49 	bl	8006b90 <malloc>
 80062fe:	4605      	mov	r5, r0
 8006300:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006304:	b1e8      	cbz	r0, 8006342 <USBD_CDC_Init+0xa6>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006306:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8006314:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006318:	7c23      	ldrb	r3, [r4, #16]
 800631a:	b94b      	cbnz	r3, 8006330 <USBD_CDC_Init+0x94>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800631c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006320:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006324:	2101      	movs	r1, #1
 8006326:	4620      	mov	r0, r4
 8006328:	f7fa fcb4 	bl	8000c94 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 800632c:	2000      	movs	r0, #0
 800632e:	bd38      	pop	{r3, r4, r5, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006330:	2340      	movs	r3, #64	; 0x40
 8006332:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006336:	2101      	movs	r1, #1
 8006338:	4620      	mov	r0, r4
 800633a:	f7fa fcab 	bl	8000c94 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 800633e:	2000      	movs	r0, #0
 8006340:	bd38      	pop	{r3, r4, r5, pc}

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));

  if(pdev->pClassData == NULL)
  {
    ret = 1U;
 8006342:	2001      	movs	r0, #1
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
}
 8006344:	bd38      	pop	{r3, r4, r5, pc}
 8006346:	bf00      	nop

08006348 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8006348:	b119      	cbz	r1, 8006352 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800634a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 800634e:	2000      	movs	r0, #0
 8006350:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8006352:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;
  }

  return ret;
}
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop

08006358 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006358:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
 800635c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006360:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8006364:	2000      	movs	r0, #0
 8006366:	4770      	bx	lr

08006368 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006368:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->RxBuffer = pbuff;
 800636c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8006370:	2000      	movs	r0, #0
 8006372:	4770      	bx	lr

08006374 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006374:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 8006378:	b192      	cbz	r2, 80063a0 <USBD_CDC_TransmitPacket+0x2c>
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800637a:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0U)
 800637c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8006380:	b983      	cbnz	r3, 80063a4 <USBD_CDC_TransmitPacket+0x30>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006382:	2301      	movs	r3, #1
 8006384:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006388:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800638c:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800638e:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8006392:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8006396:	2181      	movs	r1, #129	; 0x81
 8006398:	f7fa fc74 	bl	8000c84 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800639c:	2000      	movs	r0, #0
 800639e:	bd08      	pop	{r3, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80063a0:	2002      	movs	r0, #2
  }
}
 80063a2:	4770      	bx	lr

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80063a4:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80063a6:	bd08      	pop	{r3, pc}

080063a8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063a8:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80063ac:	b19a      	cbz	r2, 80063d6 <USBD_CDC_ReceivePacket+0x2e>
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80063ae:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80063b0:	7c03      	ldrb	r3, [r0, #16]
 80063b2:	b943      	cbnz	r3, 80063c6 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80063bc:	2101      	movs	r1, #1
 80063be:	f7fa fc69 	bl	8000c94 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80063c2:	2000      	movs	r0, #0
 80063c4:	bd08      	pop	{r3, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063c6:	2340      	movs	r3, #64	; 0x40
 80063c8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80063cc:	2101      	movs	r1, #1
 80063ce:	f7fa fc61 	bl	8000c94 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80063d2:	2000      	movs	r0, #0
 80063d4:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USBD_FAIL;
 80063d6:	2002      	movs	r0, #2
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop

080063dc <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063dc:	2800      	cmp	r0, #0
 80063de:	d03c      	beq.n	800645a <HAL_SPI_Init+0x7e>
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063e0:	b510      	push	{r4, lr}
 80063e2:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063e8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80063ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063f0:	d104      	bne.n	80063fc <HAL_SPI_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063f2:	2300      	movs	r3, #0
 80063f4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063f8:	f7fa fd7e 	bl	8000ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063fc:	2302      	movs	r3, #2
 80063fe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	6813      	ldr	r3, [r2, #0]
 8006406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640a:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	6862      	ldr	r2, [r4, #4]
 8006410:	68a3      	ldr	r3, [r4, #8]
 8006412:	431a      	orrs	r2, r3
 8006414:	68e3      	ldr	r3, [r4, #12]
 8006416:	431a      	orrs	r2, r3
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	431a      	orrs	r2, r3
 800641c:	6963      	ldr	r3, [r4, #20]
 800641e:	431a      	orrs	r2, r3
 8006420:	69a3      	ldr	r3, [r4, #24]
 8006422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006426:	4313      	orrs	r3, r2
 8006428:	69e2      	ldr	r2, [r4, #28]
 800642a:	4313      	orrs	r3, r2
 800642c:	6a22      	ldr	r2, [r4, #32]
 800642e:	4313      	orrs	r3, r2
 8006430:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006432:	431a      	orrs	r2, r3
 8006434:	600a      	str	r2, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006436:	6821      	ldr	r1, [r4, #0]
 8006438:	8b63      	ldrh	r3, [r4, #26]
 800643a:	f003 0204 	and.w	r2, r3, #4
 800643e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006440:	4313      	orrs	r3, r2
 8006442:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	69d3      	ldr	r3, [r2, #28]
 8006448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800644c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800644e:	2000      	movs	r0, #0
 8006450:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006452:	2301      	movs	r3, #1
 8006454:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8006458:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 800645a:	2001      	movs	r0, #1
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop

08006460 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006460:	b510      	push	{r4, lr}
 8006462:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0); 
 8006464:	2200      	movs	r2, #0
 8006466:	4601      	mov	r1, r0
 8006468:	201a      	movs	r0, #26
 800646a:	f7fc ff39 	bl	80032e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); 
 800646e:	201a      	movs	r0, #26
 8006470:	f7fc ff68 	bl	8003344 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006474:	2400      	movs	r4, #0
 8006476:	9401      	str	r4, [sp, #4]
 8006478:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <HAL_InitTick+0x68>)
 800647a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800647c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006480:	645a      	str	r2, [r3, #68]	; 0x44
 8006482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800648c:	a902      	add	r1, sp, #8
 800648e:	a803      	add	r0, sp, #12
 8006490:	f7fc fc60 	bl	8002d54 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006494:	f7fc fc4e 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006498:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <HAL_InitTick+0x6c>)
 800649a:	fba3 2300 	umull	r2, r3, r3, r0
 800649e:	0c9b      	lsrs	r3, r3, #18
 80064a0:	3b01      	subs	r3, #1
  
  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80064a2:	480b      	ldr	r0, [pc, #44]	; (80064d0 <HAL_InitTick+0x70>)
 80064a4:	4a0b      	ldr	r2, [pc, #44]	; (80064d4 <HAL_InitTick+0x74>)
 80064a6:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 80064a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80064ac:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80064ae:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 80064b0:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064b2:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80064b4:	f7fd f8a6 	bl	8003604 <HAL_TIM_Base_Init>
 80064b8:	b918      	cbnz	r0, 80064c2 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80064ba:	4805      	ldr	r0, [pc, #20]	; (80064d0 <HAL_InitTick+0x70>)
 80064bc:	f7fd f840 	bl	8003540 <HAL_TIM_Base_Start_IT>
 80064c0:	e000      	b.n	80064c4 <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80064c2:	2001      	movs	r0, #1
}
 80064c4:	b008      	add	sp, #32
 80064c6:	bd10      	pop	{r4, pc}
 80064c8:	40023800 	.word	0x40023800
 80064cc:	431bde83 	.word	0x431bde83
 80064d0:	20006350 	.word	0x20006350
 80064d4:	40014800 	.word	0x40014800

080064d8 <InitHW>:
    //! @todo. Implement VBUS detection
    return false;
}

void InitHW()
{
 80064d8:	b508      	push	{r3, lr}
    MX_USB_DEVICE_Init();
 80064da:	f7fa fa63 	bl	80009a4 <MX_USB_DEVICE_Init>
 80064de:	bd08      	pop	{r3, pc}

080064e0 <InitRW>:

/////////////////////////////////////////////////////////////////////////////
// Defs

void InitRW()
{
 80064e0:	b508      	push	{r3, lr}
    gHostConnection = OpenUsbHostConnection( USB_READ_BUF_SIZE );
 80064e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80064e6:	f000 fa99 	bl	8006a1c <OpenUsbHostConnection>
 80064ea:	4b01      	ldr	r3, [pc, #4]	; (80064f0 <InitRW+0x10>)
 80064ec:	6018      	str	r0, [r3, #0]
 80064ee:	bd08      	pop	{r3, pc}
 80064f0:	20006390 	.word	0x20006390

080064f4 <ring_buffer_init>:
#include "uassert.h"
#include <stdlib.h>

void ring_buffer_init( ring_buffer_t* s, void* buff, size_t buffSz )
{
    s->buff = buff;
 80064f4:	6001      	str	r1, [r0, #0]
    s->cap  = buffSz;
 80064f6:	6042      	str	r2, [r0, #4]
    s->head = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	6083      	str	r3, [r0, #8]
    s->tail = 0;
 80064fc:	60c3      	str	r3, [r0, #12]
 80064fe:	4770      	bx	lr

08006500 <ring_buffer_write>:
}

void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
 8006500:	b470      	push	{r4, r5, r6}
 8006502:	b083      	sub	sp, #12
    const size_t nxt[2] = { -1, s->cap - 1 };
 8006504:	f04f 33ff 	mov.w	r3, #4294967295
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	6843      	ldr	r3, [r0, #4]
 800650c:	3b01      	subs	r3, #1
 800650e:	9301      	str	r3, [sp, #4]
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 8006510:	2500      	movs	r5, #0
 8006512:	e012      	b.n	800653a <ring_buffer_write+0x3a>
        s->buff[s->head] = ( (char const*)d )[i];
 8006514:	6804      	ldr	r4, [r0, #0]
 8006516:	6883      	ldr	r3, [r0, #8]
 8006518:	5d4e      	ldrb	r6, [r1, r5]
 800651a:	54e6      	strb	r6, [r4, r3]
void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 800651c:	3501      	adds	r5, #1
 800651e:	6884      	ldr	r4, [r0, #8]
 8006520:	6843      	ldr	r3, [r0, #4]
 8006522:	3b01      	subs	r3, #1
 8006524:	429c      	cmp	r4, r3
 8006526:	bf14      	ite	ne
 8006528:	2300      	movne	r3, #0
 800652a:	2301      	moveq	r3, #1
 800652c:	ae02      	add	r6, sp, #8
 800652e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006532:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8006536:	1ae4      	subs	r4, r4, r3
 8006538:	6084      	str	r4, [r0, #8]
 800653a:	4295      	cmp	r5, r2
 800653c:	d3ea      	bcc.n	8006514 <ring_buffer_write+0x14>
        s->buff[s->head] = ( (char const*)d )[i];
    }
}
 800653e:	b003      	add	sp, #12
 8006540:	bc70      	pop	{r4, r5, r6}
 8006542:	4770      	bx	lr

08006544 <ring_buffer_consume>:

void ring_buffer_consume( ring_buffer_t* s, size_t len )
{
    s->tail += len;
 8006544:	68c3      	ldr	r3, [r0, #12]
 8006546:	4419      	add	r1, r3
 8006548:	60c1      	str	r1, [r0, #12]

    if ( s->tail >= s->cap ) {
 800654a:	6843      	ldr	r3, [r0, #4]
 800654c:	4299      	cmp	r1, r3
 800654e:	d301      	bcc.n	8006554 <ring_buffer_consume+0x10>
        s->tail = s->tail - s->cap;
 8006550:	1ac9      	subs	r1, r1, r3
 8006552:	60c1      	str	r1, [r0, #12]
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop

08006558 <ring_buffer_peek>:
    }
}

void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
 8006558:	b530      	push	{r4, r5, lr}
 800655a:	b083      	sub	sp, #12
    const size_t nxt[2] = { -1, s->cap - 1 };
 800655c:	f04f 33ff 	mov.w	r3, #4294967295
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6843      	ldr	r3, [r0, #4]
 8006564:	3b01      	subs	r3, #1
 8006566:	9301      	str	r3, [sp, #4]
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8006568:	68c5      	ldr	r5, [r0, #12]
 800656a:	2400      	movs	r4, #0
 800656c:	e010      	b.n	8006590 <ring_buffer_peek+0x38>
        ( (char*)b )[i] = s->buff[t];
 800656e:	6803      	ldr	r3, [r0, #0]
 8006570:	5d5b      	ldrb	r3, [r3, r5]
 8006572:	550b      	strb	r3, [r1, r4]
void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8006574:	3401      	adds	r4, #1
 8006576:	6843      	ldr	r3, [r0, #4]
 8006578:	3b01      	subs	r3, #1
 800657a:	429d      	cmp	r5, r3
 800657c:	bf14      	ite	ne
 800657e:	2300      	movne	r3, #0
 8006580:	2301      	moveq	r3, #1
 8006582:	f10d 0e08 	add.w	lr, sp, #8
 8006586:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 800658a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800658e:	1aed      	subs	r5, r5, r3
 8006590:	4294      	cmp	r4, r2
 8006592:	d3ec      	bcc.n	800656e <ring_buffer_peek+0x16>
        ( (char*)b )[i] = s->buff[t];
    }
}
 8006594:	b003      	add	sp, #12
 8006596:	bd30      	pop	{r4, r5, pc}

08006598 <ring_buffer_size>:

size_t ring_buffer_size( ring_buffer_t const* s )
{
    if ( s->head >= s->tail )
 8006598:	6883      	ldr	r3, [r0, #8]
 800659a:	68c2      	ldr	r2, [r0, #12]
 800659c:	4293      	cmp	r3, r2
 800659e:	d301      	bcc.n	80065a4 <ring_buffer_size+0xc>
        return s->head - s->tail;
 80065a0:	1a98      	subs	r0, r3, r2
 80065a2:	4770      	bx	lr
    else
        return s->cap - s->tail + s->head;
 80065a4:	6840      	ldr	r0, [r0, #4]
 80065a6:	1a80      	subs	r0, r0, r2
 80065a8:	4418      	add	r0, r3
}
 80065aa:	4770      	bx	lr

080065ac <StartDefaultTask>:
// - Launches host communication process
// - Launches command queue/procedure process
// - Initializes hi-precision hardware timer
// - Initializes motor control logic
extern "C" void StartDefaultTask( void* nouse_ )
{
 80065ac:	b508      	push	{r3, lr}
    InitHW();
 80065ae:	f7ff ff93 	bl	80064d8 <InitHW>
    InitRW();
 80065b2:	f7ff ff95 	bl	80064e0 <InitRW>

    // launch hw timer manager
    //! @todo. implement this
    
    // this function never returns.
    AppProc_HostIO( NULL );
 80065b6:	2000      	movs	r0, #0
 80065b8:	f000 f8d6 	bl	8006768 <AppProc_HostIO>

080065bc <_ZL14stringToTokensPcPS_j>:
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
    // Consume all initial spaces
    while ( *str == ' ' )
 80065bc:	7803      	ldrb	r3, [r0, #0]
 80065be:	2b20      	cmp	r3, #32
 80065c0:	d101      	bne.n	80065c6 <_ZL14stringToTokensPcPS_j+0xa>
        ++str;
 80065c2:	3001      	adds	r0, #1
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
    // Consume all initial spaces
    while ( *str == ' ' )
 80065c4:	e7fa      	b.n	80065bc <_ZL14stringToTokensPcPS_j>
        ++str;

    // Ignore space-only string.
    if ( *str == 0 )
 80065c6:	b1eb      	cbz	r3, 8006604 <_ZL14stringToTokensPcPS_j+0x48>

    putstr( "warning: failed to process binary data\n" );
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
 80065c8:	b470      	push	{r4, r5, r6}
 80065ca:	4603      	mov	r3, r0
 80065cc:	2400      	movs	r4, #0
 80065ce:	e001      	b.n	80065d4 <_ZL14stringToTokensPcPS_j+0x18>

        argv[num_token++] = str;
        if ( *head == 0 )
            break;

        for ( *head = 0; *++head == ' '; ) { }
 80065d0:	4603      	mov	r3, r0
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 80065d2:	4634      	mov	r4, r6
        return 0;

    int   num_token = 0;
    char* head      = str;

    for ( ; num_token < (int)argv_len; ) {
 80065d4:	4294      	cmp	r4, r2
 80065d6:	da17      	bge.n	8006608 <_ZL14stringToTokensPcPS_j+0x4c>
        if ( *head != ' ' && *head != '\0' ) {
 80065d8:	781d      	ldrb	r5, [r3, #0]
 80065da:	2d20      	cmp	r5, #32
 80065dc:	d002      	beq.n	80065e4 <_ZL14stringToTokensPcPS_j+0x28>
 80065de:	b10d      	cbz	r5, 80065e4 <_ZL14stringToTokensPcPS_j+0x28>
            ++head;
 80065e0:	3301      	adds	r3, #1
            continue;
 80065e2:	e7f7      	b.n	80065d4 <_ZL14stringToTokensPcPS_j+0x18>
        }

        argv[num_token++] = str;
 80065e4:	1c66      	adds	r6, r4, #1
 80065e6:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
        if ( *head == 0 )
 80065ea:	781d      	ldrb	r5, [r3, #0]
 80065ec:	b175      	cbz	r5, 800660c <_ZL14stringToTokensPcPS_j+0x50>
            break;

        for ( *head = 0; *++head == ' '; ) { }
 80065ee:	2000      	movs	r0, #0
 80065f0:	7018      	strb	r0, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d0fb      	beq.n	80065f4 <_ZL14stringToTokensPcPS_j+0x38>

        if ( *head == 0 )
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e7      	bne.n	80065d0 <_ZL14stringToTokensPcPS_j+0x14>
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 8006600:	4630      	mov	r0, r6
 8006602:	e004      	b.n	800660e <_ZL14stringToTokensPcPS_j+0x52>
    while ( *str == ' ' )
        ++str;

    // Ignore space-only string.
    if ( *str == 0 )
        return 0;
 8006604:	2000      	movs	r0, #0

        str = head; // Non-space character pos
    }

    return num_token;
}
 8006606:	4770      	bx	lr
 8006608:	4620      	mov	r0, r4
 800660a:	e000      	b.n	800660e <_ZL14stringToTokensPcPS_j+0x52>
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 800660c:	4630      	mov	r0, r6

        str = head; // Non-space character pos
    }

    return num_token;
}
 800660e:	bc70      	pop	{r4, r5, r6}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop

08006614 <_ZL17flushTransmitDatav>:
    memcpy( s_hostTrBuf + s_hostTrBufHead - len, d, len );
    --s_writingTask;
}

void flushTransmitData()
{
 8006614:	b538      	push	{r3, r4, r5, lr}
    if ( s_hostTrBufHead == 0 )
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <_ZL17flushTransmitDatav+0x40>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	b1d3      	cbz	r3, 8006652 <_ZL17flushTransmitDatav+0x3e>
        return;

    // Wait for all async write process done
    while ( s_writingTask > 0 )
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <_ZL17flushTransmitDatav+0x44>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	dd08      	ble.n	8006636 <_ZL17flushTransmitDatav+0x22>
        taskYIELD();
 8006624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006628:	4b0c      	ldr	r3, [pc, #48]	; (800665c <_ZL17flushTransmitDatav+0x48>)
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	f3bf 8f6f 	isb	sy
{
    if ( s_hostTrBufHead == 0 )
        return;

    // Wait for all async write process done
    while ( s_writingTask > 0 )
 8006634:	e7f2      	b.n	800661c <_ZL17flushTransmitDatav+0x8>
        taskYIELD();

    s_bFlushing = true;
 8006636:	4c0a      	ldr	r4, [pc, #40]	; (8006660 <_ZL17flushTransmitDatav+0x4c>)
 8006638:	2301      	movs	r3, #1
 800663a:	7023      	strb	r3, [r4, #0]
    td_write( gHostConnection, s_hostTrBuf, s_hostTrBufHead );
 800663c:	4b09      	ldr	r3, [pc, #36]	; (8006664 <_ZL17flushTransmitDatav+0x50>)
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	4d04      	ldr	r5, [pc, #16]	; (8006654 <_ZL17flushTransmitDatav+0x40>)
}

//! Write data into the transceiver
static inline transceiver_result_t td_write( transceiver_handle_t desc, char* buf, size_t wrcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 8006642:	6803      	ldr	r3, [r0, #0]
    return td->write( (void*)desc, buf, wrcnt );
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	682a      	ldr	r2, [r5, #0]
 8006648:	4907      	ldr	r1, [pc, #28]	; (8006668 <_ZL17flushTransmitDatav+0x54>)
 800664a:	4798      	blx	r3
    s_hostTrBufHead = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	602b      	str	r3, [r5, #0]
    s_bFlushing     = false;
 8006650:	7023      	strb	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	20003f08 	.word	0x20003f08
 8006658:	20004f0c 	.word	0x20004f0c
 800665c:	e000ed04 	.word	0xe000ed04
 8006660:	20003f05 	.word	0x20003f05
 8006664:	20006390 	.word	0x20006390
 8006668:	20003f0c 	.word	0x20003f0c

0800666c <_ZL12readHostConnPvj>:
}

/////////////////////////////////////////////////////////////////////////////
// Utility defs
bool readHostConn( void* dst, size_t len )
{
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	4606      	mov	r6, r0
 8006670:	460d      	mov	r5, r1
    size_t numRetries = 5;
 8006672:	2705      	movs	r7, #5
    for ( ; numRetries; ) {
 8006674:	b1cf      	cbz	r7, 80066aa <_ZL12readHostConnPvj+0x3e>
        // Flush transmit data before try read
        flushTransmitData();
 8006676:	f7ff ffcd 	bl	8006614 <_ZL17flushTransmitDatav>

        auto result = td_read( gHostConnection, (char*)dst, len );
 800667a:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <_ZL12readHostConnPvj+0x44>)
 800667c:	6818      	ldr	r0, [r3, #0]
typedef intptr_t transceiver_handle_t;

//! Read data from the transceiver.
static inline transceiver_result_t td_read( transceiver_handle_t desc, char* buf, size_t rdcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 800667e:	6803      	ldr	r3, [r0, #0]
    return td->read( (void*)desc, buf, rdcnt );
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	462a      	mov	r2, r5
 8006684:	4631      	mov	r1, r6
 8006686:	4798      	blx	r3

        // If there's nothing to read, sleep for 1 cycle
        if ( result == 0 ) {
 8006688:	4604      	mov	r4, r0
 800668a:	b918      	cbnz	r0, 8006694 <_ZL12readHostConnPvj+0x28>
            vTaskDelay( 1 );
 800668c:	2001      	movs	r0, #1
 800668e:	f7fe f8d9 	bl	8004844 <vTaskDelay>
            continue;
 8006692:	e7ef      	b.n	8006674 <_ZL12readHostConnPvj+0x8>
        }
        else if ( result < 0 ) {
 8006694:	2800      	cmp	r0, #0
 8006696:	da03      	bge.n	80066a0 <_ZL12readHostConnPvj+0x34>
            vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8006698:	200a      	movs	r0, #10
 800669a:	f7fe f8d3 	bl	8004844 <vTaskDelay>
            --numRetries;
 800669e:	3f01      	subs	r7, #1
        }

        len -= result;
        dst = (char*)dst + result;
 80066a0:	4426      	add	r6, r4

        if ( len == 0 ) {
 80066a2:	1b2d      	subs	r5, r5, r4
 80066a4:	d1e6      	bne.n	8006674 <_ZL12readHostConnPvj+0x8>
            return true;
 80066a6:	2001      	movs	r0, #1
 80066a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }
    return false;
 80066aa:	2000      	movs	r0, #0
}
 80066ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20006390 	.word	0x20006390

080066b4 <_ZL13apndToHostBufPKvj>:

    return num_token;
}

void apndToHostBuf( void const* d, size_t len )
{
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	460a      	mov	r2, r1
    uassert( s_hostTrBufHead + len < sizeof( s_hostTrBuf ) );
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <_ZL13apndToHostBufPKvj+0x5c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	440b      	add	r3, r1
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c2:	d305      	bcc.n	80066d0 <_ZL13apndToHostBufPKvj+0x1c>
 80066c4:	4b13      	ldr	r3, [pc, #76]	; (8006714 <_ZL13apndToHostBufPKvj+0x60>)
 80066c6:	4a14      	ldr	r2, [pc, #80]	; (8006718 <_ZL13apndToHostBufPKvj+0x64>)
 80066c8:	21f1      	movs	r1, #241	; 0xf1
 80066ca:	4814      	ldr	r0, [pc, #80]	; (800671c <_ZL13apndToHostBufPKvj+0x68>)
 80066cc:	f000 fa0a 	bl	8006ae4 <__assert_func>

    while ( s_bFlushing )
 80066d0:	4b13      	ldr	r3, [pc, #76]	; (8006720 <_ZL13apndToHostBufPKvj+0x6c>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066d8:	d008      	beq.n	80066ec <_ZL13apndToHostBufPKvj+0x38>
        taskYIELD();
 80066da:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 80066de:	4b11      	ldr	r3, [pc, #68]	; (8006724 <_ZL13apndToHostBufPKvj+0x70>)
 80066e0:	601c      	str	r4, [r3, #0]
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	f3bf 8f6f 	isb	sy

void apndToHostBuf( void const* d, size_t len )
{
    uassert( s_hostTrBufHead + len < sizeof( s_hostTrBuf ) );

    while ( s_bFlushing )
 80066ea:	e7f1      	b.n	80066d0 <_ZL13apndToHostBufPKvj+0x1c>
        taskYIELD();

    ++s_writingTask;
 80066ec:	4c0e      	ldr	r4, [pc, #56]	; (8006728 <_ZL13apndToHostBufPKvj+0x74>)
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	6023      	str	r3, [r4, #0]
    s_hostTrBufHead += len;
 80066f4:	4906      	ldr	r1, [pc, #24]	; (8006710 <_ZL13apndToHostBufPKvj+0x5c>)
 80066f6:	680b      	ldr	r3, [r1, #0]
 80066f8:	18d5      	adds	r5, r2, r3
 80066fa:	600d      	str	r5, [r1, #0]
    memcpy( s_hostTrBuf + s_hostTrBufHead - len, d, len );
 80066fc:	4601      	mov	r1, r0
 80066fe:	480b      	ldr	r0, [pc, #44]	; (800672c <_ZL13apndToHostBufPKvj+0x78>)
 8006700:	4418      	add	r0, r3
 8006702:	f000 fa55 	bl	8006bb0 <memcpy>
    --s_writingTask;
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	3b01      	subs	r3, #1
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	bd38      	pop	{r3, r4, r5, pc}
 800670e:	bf00      	nop
 8006710:	20003f08 	.word	0x20003f08
 8006714:	08007fbc 	.word	0x08007fbc
 8006718:	08007f94 	.word	0x08007f94
 800671c:	08007fec 	.word	0x08007fec
 8006720:	20003f05 	.word	0x20003f05
 8006724:	e000ed04 	.word	0xe000ed04
 8006728:	20004f0c 	.word	0x20004f0c
 800672c:	20003f0c 	.word	0x20003f0c

08006730 <_ZN3upp4hash8fnv1a_32EPKcm>:
constexpr uint32_t prime_32_const = 0x1000193;
constexpr uint64_t val_64_const   = 0xcbf29ce484222325;
constexpr uint64_t prime_64_const = 0x100000001b3;

inline constexpr uint32_t fnv1a_32( const char* const str, const uint32_t value = val_32_const ) noexcept
{
 8006730:	b508      	push	{r3, lr}
    return ( str[0] == '\0' ) ? value : fnv1a_32( &str[1], ( value ^ uint32_t( str[0] ) ) * prime_32_const );
 8006732:	7803      	ldrb	r3, [r0, #0]
 8006734:	b1a3      	cbz	r3, 8006760 <_ZN3upp4hash8fnv1a_32EPKcm+0x30>
 8006736:	1c42      	adds	r2, r0, #1
 8006738:	4059      	eors	r1, r3
 800673a:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <_ZN3upp4hash8fnv1a_32EPKcm+0x34>)
 800673c:	fb03 f101 	mul.w	r1, r3, r1
 8006740:	7843      	ldrb	r3, [r0, #1]
 8006742:	b16b      	cbz	r3, 8006760 <_ZN3upp4hash8fnv1a_32EPKcm+0x30>
 8006744:	4059      	eors	r1, r3
 8006746:	4b07      	ldr	r3, [pc, #28]	; (8006764 <_ZN3upp4hash8fnv1a_32EPKcm+0x34>)
 8006748:	fb03 f101 	mul.w	r1, r3, r1
 800674c:	7853      	ldrb	r3, [r2, #1]
 800674e:	b13b      	cbz	r3, 8006760 <_ZN3upp4hash8fnv1a_32EPKcm+0x30>
 8006750:	4059      	eors	r1, r3
 8006752:	4b04      	ldr	r3, [pc, #16]	; (8006764 <_ZN3upp4hash8fnv1a_32EPKcm+0x34>)
 8006754:	fb03 f101 	mul.w	r1, r3, r1
 8006758:	1c90      	adds	r0, r2, #2
 800675a:	f7ff ffe9 	bl	8006730 <_ZN3upp4hash8fnv1a_32EPKcm>
 800675e:	4601      	mov	r1, r0
}
 8006760:	4608      	mov	r0, r1
 8006762:	bd08      	pop	{r3, pc}
 8006764:	01000193 	.word	0x01000193

08006768 <AppProc_HostIO>:
static bool readHostConn( void* dst, size_t len );

/////////////////////////////////////////////////////////////////////////////
// Primary Procedure
extern "C" _Noreturn void AppProc_HostIO( void* nouse_ )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
        if ( readHostConn( buf, len ) == false )
            continue;

        // Call command procedure
        ( PACKET_IS_STR( packet ) ? stringCmdHandler : binaryCmdHandler )( buf, len );
    }
 800676e:	466c      	mov	r4, sp
{
    packetinfo_t packet;

    for ( ;; ) {
        // Check if read data has valid protocol.
        if ( readHostConn( &packet, PACKET_SIZE ) == false )
 8006770:	2104      	movs	r1, #4
 8006772:	1878      	adds	r0, r7, r1
 8006774:	f7ff ff7a 	bl	800666c <_ZL12readHostConnPvj>
 8006778:	b1f8      	cbz	r0, 80067ba <AppProc_HostIO+0x52>
            continue;

        // Check packet validity
        // If any data was delivered in bad condition, it'll consume all pending bytes.
        if ( PACKET_IS_PACKET( packet ) == false )
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 8006780:	f1b3 4f68 	cmp.w	r3, #3892314112	; 0xe8000000
 8006784:	d119      	bne.n	80067ba <AppProc_HostIO+0x52>
            continue;

        // Should be aware of maximum stack depth!
        // Packet size must be less than 2kByte at once
        // Allocate packet receive memory using VLA
        auto len = PACKET_LENGTH( packet );
 8006786:	f3c1 0516 	ubfx	r5, r1, #0, #23
        char buf[len + 1];
 800678a:	f105 0308 	add.w	r3, r5, #8
 800678e:	f023 0307 	bic.w	r3, r3, #7
 8006792:	ebad 0d03 	sub.w	sp, sp, r3
 8006796:	466e      	mov	r6, sp
        if ( readHostConn( buf, len ) == false )
 8006798:	4629      	mov	r1, r5
 800679a:	4668      	mov	r0, sp
 800679c:	f7ff ff66 	bl	800666c <_ZL12readHostConnPvj>
 80067a0:	b158      	cbz	r0, 80067ba <AppProc_HostIO+0x52>
            continue;

        // Call command procedure
        ( PACKET_IS_STR( packet ) ? stringCmdHandler : binaryCmdHandler )( buf, len );
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80067a8:	d001      	beq.n	80067ae <AppProc_HostIO+0x46>
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <AppProc_HostIO+0x58>)
 80067ac:	e000      	b.n	80067b0 <AppProc_HostIO+0x48>
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <AppProc_HostIO+0x5c>)
 80067b0:	4629      	mov	r1, r5
 80067b2:	4630      	mov	r0, r6
 80067b4:	4798      	blx	r3
 80067b6:	46a5      	mov	sp, r4
 80067b8:	e7d9      	b.n	800676e <AppProc_HostIO+0x6>
    packetinfo_t packet;

    for ( ;; ) {
        // Check if read data has valid protocol.
        if ( readHostConn( &packet, PACKET_SIZE ) == false )
            continue;
 80067ba:	46a5      	mov	sp, r4
 80067bc:	e7d7      	b.n	800676e <AppProc_HostIO+0x6>
 80067be:	bf00      	nop
 80067c0:	080068b1 	.word	0x080068b1
 80067c4:	08006995 	.word	0x08006995

080067c8 <API_SendHostBinary>:
}

/////////////////////////////////////////////////////////////////////////////
// Global function defs
void API_SendHostBinary( void const* data, size_t len )
{
 80067c8:	b530      	push	{r4, r5, lr}
 80067ca:	b083      	sub	sp, #12
 80067cc:	4605      	mov	r5, r0
 80067ce:	460c      	mov	r4, r1
    packetinfo_t packet = PACKET_MAKE( false, len );
 80067d0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80067d4:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
 80067d8:	a802      	add	r0, sp, #8
 80067da:	f840 3d04 	str.w	r3, [r0, #-4]!
    apndToHostBuf( &packet, sizeof packet );
 80067de:	2104      	movs	r1, #4
 80067e0:	f7ff ff68 	bl	80066b4 <_ZL13apndToHostBufPKvj>
    apndToHostBuf( data, len );
 80067e4:	4621      	mov	r1, r4
 80067e6:	4628      	mov	r0, r5
 80067e8:	f7ff ff64 	bl	80066b4 <_ZL13apndToHostBufPKvj>
}
 80067ec:	b003      	add	sp, #12
 80067ee:	bd30      	pop	{r4, r5, pc}

080067f0 <API_SendHostString>:

void API_SendHostString( void const* data, size_t len )
{
 80067f0:	b530      	push	{r4, r5, lr}
 80067f2:	b083      	sub	sp, #12
 80067f4:	4605      	mov	r5, r0
 80067f6:	460c      	mov	r4, r1
    packetinfo_t packet = PACKET_MAKE( true, len );
 80067f8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80067fc:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
 8006800:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006804:	a802      	add	r0, sp, #8
 8006806:	f840 3d04 	str.w	r3, [r0, #-4]!
    apndToHostBuf( &packet, sizeof packet );
 800680a:	2104      	movs	r1, #4
 800680c:	f7ff ff52 	bl	80066b4 <_ZL13apndToHostBufPKvj>
    apndToHostBuf( data, len );
 8006810:	4621      	mov	r1, r4
 8006812:	4628      	mov	r0, r5
 8006814:	f7ff ff4e 	bl	80066b4 <_ZL13apndToHostBufPKvj>
}
 8006818:	b003      	add	sp, #12
 800681a:	bd30      	pop	{r4, r5, pc}

0800681c <print>:
{
    apndToHostBuf( data, len );
}

extern "C" void print( char const* fmt, ... )
{
 800681c:	b40f      	push	{r0, r1, r2, r3}
 800681e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	f107 0320 	add.w	r3, r7, #32
 8006828:	f853 5b04 	ldr.w	r5, [r3], #4
    va_list vp;
    va_list vp2;
    va_start( vp, fmt );
 800682c:	607b      	str	r3, [r7, #4]
    size_t allocsz = vsnprintf( NULL, 0, fmt, vp ) + 1;
 800682e:	462a      	mov	r2, r5
 8006830:	2100      	movs	r1, #0
 8006832:	4608      	mov	r0, r1
 8006834:	f000 fde0 	bl	80073f8 <vsniprintf>
 8006838:	1c46      	adds	r6, r0, #1
    va_end( vp );

    va_copy( vp2, vp );
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	603a      	str	r2, [r7, #0]
    char* buf = (char*)alloca( allocsz );
 800683e:	300f      	adds	r0, #15
 8006840:	f020 0007 	bic.w	r0, r0, #7
 8006844:	ebad 0d00 	sub.w	sp, sp, r0
    vsprintf( buf, fmt, vp2 );
 8006848:	4629      	mov	r1, r5
 800684a:	4668      	mov	r0, sp
 800684c:	f000 fdfa 	bl	8007444 <vsiprintf>
    va_end( vp2 );

    API_SendHostString( buf, allocsz );
 8006850:	4631      	mov	r1, r6
 8006852:	4668      	mov	r0, sp
 8006854:	f7ff ffcc 	bl	80067f0 <API_SendHostString>
}
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006860:	b004      	add	sp, #16
 8006862:	4770      	bx	lr

08006864 <putstr>:

extern "C" int putstr( char const* txt )
{
 8006864:	b510      	push	{r4, lr}
 8006866:	4604      	mov	r4, r0
    API_SendHostString( txt, strlen( txt ) + 1 );
 8006868:	f7f9 fcc8 	bl	80001fc <strlen>
 800686c:	1c41      	adds	r1, r0, #1
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff ffbe 	bl	80067f0 <API_SendHostString>
    return 0;
}
 8006874:	2000      	movs	r0, #0
 8006876:	bd10      	pop	{r4, pc}

08006878 <AppHandler_CaptureCommand>:
    }
}

extern "C" __weak_symbol bool
AppHandler_CaptureCommand( int argc, char* argv[] )
{
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	4605      	mov	r5, r0
 800687c:	460e      	mov	r6, r1
    print( "info: Receiving :: " );
 800687e:	4809      	ldr	r0, [pc, #36]	; (80068a4 <AppHandler_CaptureCommand+0x2c>)
 8006880:	f7ff ffcc 	bl	800681c <print>
    for ( int i = 0; i < argc; i++ ) {
 8006884:	2400      	movs	r4, #0
 8006886:	42ac      	cmp	r4, r5
 8006888:	da06      	bge.n	8006898 <AppHandler_CaptureCommand+0x20>
        print( "%s ", argv[i] );
 800688a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800688e:	4806      	ldr	r0, [pc, #24]	; (80068a8 <AppHandler_CaptureCommand+0x30>)
 8006890:	f7ff ffc4 	bl	800681c <print>

extern "C" __weak_symbol bool
AppHandler_CaptureCommand( int argc, char* argv[] )
{
    print( "info: Receiving :: " );
    for ( int i = 0; i < argc; i++ ) {
 8006894:	3401      	adds	r4, #1
 8006896:	e7f6      	b.n	8006886 <AppHandler_CaptureCommand+0xe>
        print( "%s ", argv[i] );
    }
    putstr( "\n" );
 8006898:	4804      	ldr	r0, [pc, #16]	; (80068ac <AppHandler_CaptureCommand+0x34>)
 800689a:	f7ff ffe3 	bl	8006864 <putstr>
    return true;
}
 800689e:	2001      	movs	r0, #1
 80068a0:	bd70      	pop	{r4, r5, r6, pc}
 80068a2:	bf00      	nop
 80068a4:	08008004 	.word	0x08008004
 80068a8:	08008018 	.word	0x08008018
 80068ac:	0800801c 	.word	0x0800801c

080068b0 <_ZL16stringCmdHandlerPcj>:

/////////////////////////////////////////////////////////////////////////////
//

void stringCmdHandler( char* str, size_t len )
{
 80068b0:	b530      	push	{r4, r5, lr}
 80068b2:	b091      	sub	sp, #68	; 0x44
    // Append last byte as null ch
    str[len + 1] = '\0';
 80068b4:	3101      	adds	r1, #1
 80068b6:	2200      	movs	r2, #0
 80068b8:	5442      	strb	r2, [r0, r1]

    // Make tokens from string ... Maximum token = 16
    char* argv[16];
    int   argc = stringToTokens( str, argv, sizeof( argv ) / sizeof( *argv ) );
 80068ba:	2210      	movs	r2, #16
 80068bc:	4669      	mov	r1, sp
 80068be:	f7ff fe7d 	bl	80065bc <_ZL14stringToTokensPcPS_j>

    if ( argc == 0 )
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d054      	beq.n	8006970 <_ZL16stringCmdHandlerPcj+0xc0>
 80068c6:	4604      	mov	r4, r0
        return;

#define STRCASE( v ) upp::hash::fnv1a_32( v )
    uint32_t cmdidx = STRCASE( argv[0] );
 80068c8:	9b00      	ldr	r3, [sp, #0]
constexpr uint64_t val_64_const   = 0xcbf29ce484222325;
constexpr uint64_t prime_64_const = 0x100000001b3;

inline constexpr uint32_t fnv1a_32( const char* const str, const uint32_t value = val_32_const ) noexcept
{
    return ( str[0] == '\0' ) ? value : fnv1a_32( &str[1], ( value ^ uint32_t( str[0] ) ) * prime_32_const );
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	2a00      	cmp	r2, #0
 80068ce:	d037      	beq.n	8006940 <_ZL16stringCmdHandlerPcj+0x90>
 80068d0:	1c5d      	adds	r5, r3, #1
 80068d2:	4928      	ldr	r1, [pc, #160]	; (8006974 <_ZL16stringCmdHandlerPcj+0xc4>)
 80068d4:	4051      	eors	r1, r2
 80068d6:	4828      	ldr	r0, [pc, #160]	; (8006978 <_ZL16stringCmdHandlerPcj+0xc8>)
 80068d8:	fb00 f001 	mul.w	r0, r0, r1
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	b383      	cbz	r3, 8006942 <_ZL16stringCmdHandlerPcj+0x92>
 80068e0:	4058      	eors	r0, r3
 80068e2:	4b25      	ldr	r3, [pc, #148]	; (8006978 <_ZL16stringCmdHandlerPcj+0xc8>)
 80068e4:	fb03 f000 	mul.w	r0, r3, r0
 80068e8:	786b      	ldrb	r3, [r5, #1]
 80068ea:	b353      	cbz	r3, 8006942 <_ZL16stringCmdHandlerPcj+0x92>
 80068ec:	1ca9      	adds	r1, r5, #2
 80068ee:	4058      	eors	r0, r3
 80068f0:	4b21      	ldr	r3, [pc, #132]	; (8006978 <_ZL16stringCmdHandlerPcj+0xc8>)
 80068f2:	fb03 f000 	mul.w	r0, r3, r0
 80068f6:	78ab      	ldrb	r3, [r5, #2]
 80068f8:	b31b      	cbz	r3, 8006942 <_ZL16stringCmdHandlerPcj+0x92>
 80068fa:	1cea      	adds	r2, r5, #3
 80068fc:	4058      	eors	r0, r3
 80068fe:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <_ZL16stringCmdHandlerPcj+0xc8>)
 8006900:	fb03 f000 	mul.w	r0, r3, r0
 8006904:	784b      	ldrb	r3, [r1, #1]
 8006906:	b1e3      	cbz	r3, 8006942 <_ZL16stringCmdHandlerPcj+0x92>
 8006908:	3102      	adds	r1, #2
 800690a:	4058      	eors	r0, r3
 800690c:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <_ZL16stringCmdHandlerPcj+0xc8>)
 800690e:	fb03 f000 	mul.w	r0, r3, r0
 8006912:	7853      	ldrb	r3, [r2, #1]
 8006914:	b1ab      	cbz	r3, 8006942 <_ZL16stringCmdHandlerPcj+0x92>
 8006916:	3202      	adds	r2, #2
 8006918:	4058      	eors	r0, r3
 800691a:	4b17      	ldr	r3, [pc, #92]	; (8006978 <_ZL16stringCmdHandlerPcj+0xc8>)
 800691c:	fb03 f000 	mul.w	r0, r3, r0
 8006920:	784b      	ldrb	r3, [r1, #1]
 8006922:	b173      	cbz	r3, 8006942 <_ZL16stringCmdHandlerPcj+0x92>
 8006924:	4043      	eors	r3, r0
 8006926:	4814      	ldr	r0, [pc, #80]	; (8006978 <_ZL16stringCmdHandlerPcj+0xc8>)
 8006928:	fb00 f003 	mul.w	r0, r0, r3
 800692c:	788b      	ldrb	r3, [r1, #2]
 800692e:	b143      	cbz	r3, 8006942 <_ZL16stringCmdHandlerPcj+0x92>
 8006930:	4043      	eors	r3, r0
 8006932:	4911      	ldr	r1, [pc, #68]	; (8006978 <_ZL16stringCmdHandlerPcj+0xc8>)
 8006934:	fb01 f103 	mul.w	r1, r1, r3
 8006938:	1c90      	adds	r0, r2, #2
 800693a:	f7ff fef9 	bl	8006730 <_ZN3upp4hash8fnv1a_32EPKcm>
 800693e:	e000      	b.n	8006942 <_ZL16stringCmdHandlerPcj+0x92>
 8006940:	480c      	ldr	r0, [pc, #48]	; (8006974 <_ZL16stringCmdHandlerPcj+0xc4>)

    switch ( cmdidx ) {
 8006942:	4b0e      	ldr	r3, [pc, #56]	; (800697c <_ZL16stringCmdHandlerPcj+0xcc>)
 8006944:	4298      	cmp	r0, r3
 8006946:	d006      	beq.n	8006956 <_ZL16stringCmdHandlerPcj+0xa6>
 8006948:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <_ZL16stringCmdHandlerPcj+0xd0>)
 800694a:	4298      	cmp	r0, r3
 800694c:	d010      	beq.n	8006970 <_ZL16stringCmdHandlerPcj+0xc0>
 800694e:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <_ZL16stringCmdHandlerPcj+0xd4>)
 8006950:	4298      	cmp	r0, r3
 8006952:	d109      	bne.n	8006968 <_ZL16stringCmdHandlerPcj+0xb8>
 8006954:	e003      	b.n	800695e <_ZL16stringCmdHandlerPcj+0xae>
    case STRCASE( "app-os-report" ):

        break;

    case STRCASE( "test-input" ):
        print( "Hello, world!\n" );
 8006956:	480c      	ldr	r0, [pc, #48]	; (8006988 <_ZL16stringCmdHandlerPcj+0xd8>)
 8006958:	f7ff ff60 	bl	800681c <print>
        break;
 800695c:	e008      	b.n	8006970 <_ZL16stringCmdHandlerPcj+0xc0>

    case STRCASE( "ping" ):
        API_SendHostBinary( "ping", 4 );
 800695e:	2104      	movs	r1, #4
 8006960:	480a      	ldr	r0, [pc, #40]	; (800698c <_ZL16stringCmdHandlerPcj+0xdc>)
 8006962:	f7ff ff31 	bl	80067c8 <API_SendHostBinary>
        break;
 8006966:	e003      	b.n	8006970 <_ZL16stringCmdHandlerPcj+0xc0>

    default:
        AppHandler_CaptureCommand( argc, argv );
 8006968:	4669      	mov	r1, sp
 800696a:	4620      	mov	r0, r4
 800696c:	f7ff ff84 	bl	8006878 <AppHandler_CaptureCommand>
        break;
    }
}
 8006970:	b011      	add	sp, #68	; 0x44
 8006972:	bd30      	pop	{r4, r5, pc}
 8006974:	811c9dc5 	.word	0x811c9dc5
 8006978:	01000193 	.word	0x01000193
 800697c:	4eecbbec 	.word	0x4eecbbec
 8006980:	c50d20e2 	.word	0xc50d20e2
 8006984:	165df089 	.word	0x165df089
 8006988:	08008020 	.word	0x08008020
 800698c:	08008030 	.word	0x08008030

08006990 <AppHandler_CaptureBinary>:

extern "C" __weak_symbol bool
AppHandler_CaptureBinary( char* data, size_t len )
{
    return false;
}
 8006990:	2000      	movs	r0, #0
 8006992:	4770      	bx	lr

08006994 <_ZL16binaryCmdHandlerPcj>:

void binaryCmdHandler( char* data, size_t len )
{
 8006994:	b508      	push	{r3, lr}
    if ( AppHandler_CaptureBinary( data, len ) ) {
 8006996:	f7ff fffb 	bl	8006990 <AppHandler_CaptureBinary>
 800699a:	b910      	cbnz	r0, 80069a2 <_ZL16binaryCmdHandlerPcj+0xe>
        return;
    }

    putstr( "warning: failed to process binary data\n" );
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <_ZL16binaryCmdHandlerPcj+0x10>)
 800699e:	f7ff ff61 	bl	8006864 <putstr>
 80069a2:	bd08      	pop	{r3, pc}
 80069a4:	08008038 	.word	0x08008038

080069a8 <_ZL9cdc_ioctlPvi>:
#include <uEmbedded/transceiver.h>
#include <uEmbedded/uassert.h>
#include <usbd_cdc_if.h>
static transceiver_result_t cdc_read( void* desc, char* buf, size_t len );
static transceiver_result_t cdc_write( void* desc, char const* buf, size_t len );
static transceiver_result_t cdc_ioctl( void* desc, intptr_t cmd ) { return TRANSCEIVER_OK; }
 80069a8:	2000      	movs	r0, #0
 80069aa:	4770      	bx	lr

080069ac <_Z41__static_initialization_and_destruction_0ii>:
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
    ring_buffer_write( &s_rw.rdbuf_, Buf, len );
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
}
 80069ac:	2801      	cmp	r0, #1
 80069ae:	d106      	bne.n	80069be <_Z41__static_initialization_and_destruction_0ii+0x12>
 80069b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069b4:	4299      	cmp	r1, r3
 80069b6:	d102      	bne.n	80069be <_Z41__static_initialization_and_destruction_0ii+0x12>
    .read  = cdc_read,
    .write = cdc_write,
    .ioctl = cdc_ioctl,
    .close = cdc_close };

static struct usb_rw {
 80069b8:	4a01      	ldr	r2, [pc, #4]	; (80069c0 <_Z41__static_initialization_and_destruction_0ii+0x14>)
 80069ba:	4b02      	ldr	r3, [pc, #8]	; (80069c4 <_Z41__static_initialization_and_destruction_0ii+0x18>)
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	4770      	bx	lr
 80069c0:	08008094 	.word	0x08008094
 80069c4:	20004f10 	.word	0x20004f10

080069c8 <_ZL9cdc_closePv>:
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
}

transceiver_result_t cdc_close( void* desc )
{
 80069c8:	b510      	push	{r4, lr}
 80069ca:	4604      	mov	r4, r0
}

static inline void AppFree( void* ptr )
{
    void vPortFree( void* );
    vPortFree( ptr );
 80069cc:	6840      	ldr	r0, [r0, #4]
 80069ce:	f7fe fc8f 	bl	80052f0 <vPortFree>
    auto td = reinterpret_cast<usb_rw*>( desc );
    AppFree( td->rdbuf_.buff );
    td->rdbuf_.buff = nullptr;
 80069d2:	2000      	movs	r0, #0
 80069d4:	6060      	str	r0, [r4, #4]
    return TRANSCEIVER_OK;
}
 80069d6:	bd10      	pop	{r4, pc}

080069d8 <_ZL9cdc_writePvPKcj>:
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
    return rd;
}

transceiver_result_t cdc_write( void* nouse_, char const* buf, size_t len )
{
 80069d8:	b510      	push	{r4, lr}
 80069da:	4608      	mov	r0, r1
 80069dc:	4614      	mov	r4, r2
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
 80069de:	b291      	uxth	r1, r2
 80069e0:	f7fa fa0c 	bl	8000dfc <CDC_Transmit_FS>
 80069e4:	b908      	cbnz	r0, 80069ea <_ZL9cdc_writePvPKcj+0x12>
 80069e6:	4620      	mov	r0, r4
 80069e8:	bd10      	pop	{r4, pc}
 80069ea:	2000      	movs	r0, #0
}
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	bf00      	nop

080069f0 <_ZL8cdc_readPvPcj>:
    ring_buffer_init( &ret->rdbuf_, AppMalloc( ReadBufferSize ), ReadBufferSize );
    return reinterpret_cast<transceiver_handle_t>( ret );
}

static transceiver_result_t cdc_read( void* desc, char* buf, size_t len )
{
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	460f      	mov	r7, r1
 80069f4:	4616      	mov	r6, r2
    auto td = reinterpret_cast<usb_rw*>( desc );
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
 80069f6:	1d05      	adds	r5, r0, #4

/*! \breif      Do peeking and consuming at once.
    \return     Number of byte actually read. */
static inline size_t ring_buffer_read(ring_buffer_t *s, void *b, size_t len)
{
    size_t sz = ring_buffer_size(s);
 80069f8:	4628      	mov	r0, r5
 80069fa:	f7ff fdcd 	bl	8006598 <ring_buffer_size>
 80069fe:	4604      	mov	r4, r0
    if (sz < len)
 8006a00:	4286      	cmp	r6, r0
 8006a02:	d800      	bhi.n	8006a06 <_ZL8cdc_readPvPcj+0x16>
 8006a04:	4634      	mov	r4, r6
        len = sz;
    ring_buffer_peek(s, b, len);
 8006a06:	4622      	mov	r2, r4
 8006a08:	4639      	mov	r1, r7
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f7ff fda4 	bl	8006558 <ring_buffer_peek>
    ring_buffer_consume(s, len);
 8006a10:	4621      	mov	r1, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7ff fd96 	bl	8006544 <ring_buffer_consume>
    return rd;
}
 8006a18:	4620      	mov	r0, r4
 8006a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a1c <OpenUsbHostConnection>:
    transceiver_vtable_t const* vt_ = &usb_vt;
    ring_buffer                 rdbuf_;
} s_rw;

extern "C" transceiver_handle_t OpenUsbHostConnection( size_t ReadBufferSize )
{
 8006a1c:	b538      	push	{r3, r4, r5, lr}
    uassert( s_rw.rdbuf_.buff == nullptr );
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <OpenUsbHostConnection+0x2c>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	b12b      	cbz	r3, 8006a30 <OpenUsbHostConnection+0x14>
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <OpenUsbHostConnection+0x30>)
 8006a26:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <OpenUsbHostConnection+0x34>)
 8006a28:	211f      	movs	r1, #31
 8006a2a:	480a      	ldr	r0, [pc, #40]	; (8006a54 <OpenUsbHostConnection+0x38>)
 8006a2c:	f000 f85a 	bl	8006ae4 <__assert_func>
 8006a30:	4604      	mov	r4, r0
#endif // __cplusplus

static inline void* AppMalloc( size_t sz )
{
    void* pvPortMalloc( size_t sz );
    return pvPortMalloc( sz );
 8006a32:	f7fe fbdb 	bl	80051ec <pvPortMalloc>
    auto ret = &s_rw;
    ring_buffer_init( &ret->rdbuf_, AppMalloc( ReadBufferSize ), ReadBufferSize );
 8006a36:	4d04      	ldr	r5, [pc, #16]	; (8006a48 <OpenUsbHostConnection+0x2c>)
 8006a38:	4622      	mov	r2, r4
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	1d28      	adds	r0, r5, #4
 8006a3e:	f7ff fd59 	bl	80064f4 <ring_buffer_init>
    return reinterpret_cast<transceiver_handle_t>( ret );
}
 8006a42:	4628      	mov	r0, r5
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	bf00      	nop
 8006a48:	20004f10 	.word	0x20004f10
 8006a4c:	08008060 	.word	0x08008060
 8006a50:	080080a4 	.word	0x080080a4
 8006a54:	0800807c 	.word	0x0800807c

08006a58 <CdcReceiveHandler>:
    return TRANSCEIVER_OK;
}

// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4605      	mov	r5, r0
    ring_buffer_write( &s_rw.rdbuf_, Buf, len );
 8006a5c:	460a      	mov	r2, r1
 8006a5e:	4601      	mov	r1, r0
 8006a60:	4805      	ldr	r0, [pc, #20]	; (8006a78 <CdcReceiveHandler+0x20>)
 8006a62:	f7ff fd4d 	bl	8006500 <ring_buffer_write>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
 8006a66:	4c05      	ldr	r4, [pc, #20]	; (8006a7c <CdcReceiveHandler+0x24>)
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f7ff fc7c 	bl	8006368 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7ff fc99 	bl	80063a8 <USBD_CDC_ReceivePacket>
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	20004f14 	.word	0x20004f14
 8006a7c:	20005968 	.word	0x20005968

08006a80 <_GLOBAL__sub_I_OpenUsbHostConnection>:
}
 8006a80:	b508      	push	{r3, lr}
 8006a82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a86:	2001      	movs	r0, #1
 8006a88:	f7ff ff90 	bl	80069ac <_Z41__static_initialization_and_destruction_0ii>
 8006a8c:	bd08      	pop	{r3, pc}
 8006a8e:	bf00      	nop

08006a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006a94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006a96:	e003      	b.n	8006aa0 <LoopCopyDataInit>

08006a98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006a9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006a9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006a9e:	3104      	adds	r1, #4

08006aa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006aa0:	480b      	ldr	r0, [pc, #44]	; (8006ad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006aa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006aa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006aa8:	d3f6      	bcc.n	8006a98 <CopyDataInit>
  ldr  r2, =_sbss
 8006aaa:	4a0b      	ldr	r2, [pc, #44]	; (8006ad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006aac:	e002      	b.n	8006ab4 <LoopFillZerobss>

08006aae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006aae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006ab0:	f842 3b04 	str.w	r3, [r2], #4

08006ab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006ab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006ab8:	d3f9      	bcc.n	8006aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006aba:	f7fc ffad 	bl	8003a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006abe:	f000 f841 	bl	8006b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ac2:	f7f9 ff49 	bl	8000958 <main>
  bx  lr    
 8006ac6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006ac8:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8006acc:	080081c0 	.word	0x080081c0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006ad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006ad4:	200001e4 	.word	0x200001e4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8006ad8:	200001e4 	.word	0x200001e4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006adc:	20006398 	.word	0x20006398

08006ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ae0:	e7fe      	b.n	8006ae0 <ADC_IRQHandler>
	...

08006ae4 <__assert_func>:
 8006ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ae6:	461c      	mov	r4, r3
 8006ae8:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <__assert_func+0x2c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4605      	mov	r5, r0
 8006aee:	68d8      	ldr	r0, [r3, #12]
 8006af0:	b912      	cbnz	r2, 8006af8 <__assert_func+0x14>
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <__assert_func+0x30>)
 8006af4:	461a      	mov	r2, r3
 8006af6:	e000      	b.n	8006afa <__assert_func+0x16>
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <__assert_func+0x34>)
 8006afa:	9202      	str	r2, [sp, #8]
 8006afc:	e88d 000a 	stmia.w	sp, {r1, r3}
 8006b00:	4622      	mov	r2, r4
 8006b02:	462b      	mov	r3, r5
 8006b04:	4905      	ldr	r1, [pc, #20]	; (8006b1c <__assert_func+0x38>)
 8006b06:	f000 f80b 	bl	8006b20 <fiprintf>
 8006b0a:	f000 fd67 	bl	80075dc <abort>
 8006b0e:	bf00      	nop
 8006b10:	200001e0 	.word	0x200001e0
 8006b14:	08008112 	.word	0x08008112
 8006b18:	080080d7 	.word	0x080080d7
 8006b1c:	080080e4 	.word	0x080080e4

08006b20 <fiprintf>:
 8006b20:	b40e      	push	{r1, r2, r3}
 8006b22:	b503      	push	{r0, r1, lr}
 8006b24:	4601      	mov	r1, r0
 8006b26:	ab03      	add	r3, sp, #12
 8006b28:	4805      	ldr	r0, [pc, #20]	; (8006b40 <fiprintf+0x20>)
 8006b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2e:	6800      	ldr	r0, [r0, #0]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	f000 f927 	bl	8006d84 <_vfiprintf_r>
 8006b36:	b002      	add	sp, #8
 8006b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b3c:	b003      	add	sp, #12
 8006b3e:	4770      	bx	lr
 8006b40:	200001e0 	.word	0x200001e0

08006b44 <__libc_init_array>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <__libc_init_array+0x3c>)
 8006b48:	4c0e      	ldr	r4, [pc, #56]	; (8006b84 <__libc_init_array+0x40>)
 8006b4a:	1ae4      	subs	r4, r4, r3
 8006b4c:	10a4      	asrs	r4, r4, #2
 8006b4e:	2500      	movs	r5, #0
 8006b50:	461e      	mov	r6, r3
 8006b52:	42a5      	cmp	r5, r4
 8006b54:	d004      	beq.n	8006b60 <__libc_init_array+0x1c>
 8006b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b5a:	4798      	blx	r3
 8006b5c:	3501      	adds	r5, #1
 8006b5e:	e7f8      	b.n	8006b52 <__libc_init_array+0xe>
 8006b60:	f001 f9b6 	bl	8007ed0 <_init>
 8006b64:	4c08      	ldr	r4, [pc, #32]	; (8006b88 <__libc_init_array+0x44>)
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <__libc_init_array+0x48>)
 8006b68:	1ae4      	subs	r4, r4, r3
 8006b6a:	10a4      	asrs	r4, r4, #2
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	461e      	mov	r6, r3
 8006b70:	42a5      	cmp	r5, r4
 8006b72:	d004      	beq.n	8006b7e <__libc_init_array+0x3a>
 8006b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b78:	4798      	blx	r3
 8006b7a:	3501      	adds	r5, #1
 8006b7c:	e7f8      	b.n	8006b70 <__libc_init_array+0x2c>
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	080081b4 	.word	0x080081b4
 8006b84:	080081b4 	.word	0x080081b4
 8006b88:	080081bc 	.word	0x080081bc
 8006b8c:	080081b4 	.word	0x080081b4

08006b90 <malloc>:
 8006b90:	4b02      	ldr	r3, [pc, #8]	; (8006b9c <malloc+0xc>)
 8006b92:	4601      	mov	r1, r0
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	f000 b86d 	b.w	8006c74 <_malloc_r>
 8006b9a:	bf00      	nop
 8006b9c:	200001e0 	.word	0x200001e0

08006ba0 <free>:
 8006ba0:	4b02      	ldr	r3, [pc, #8]	; (8006bac <free+0xc>)
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	f000 b817 	b.w	8006bd8 <_free_r>
 8006baa:	bf00      	nop
 8006bac:	200001e0 	.word	0x200001e0

08006bb0 <memcpy>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	1e43      	subs	r3, r0, #1
 8006bb4:	440a      	add	r2, r1
 8006bb6:	4291      	cmp	r1, r2
 8006bb8:	d004      	beq.n	8006bc4 <memcpy+0x14>
 8006bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc2:	e7f8      	b.n	8006bb6 <memcpy+0x6>
 8006bc4:	bd10      	pop	{r4, pc}

08006bc6 <memset>:
 8006bc6:	4402      	add	r2, r0
 8006bc8:	4603      	mov	r3, r0
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d002      	beq.n	8006bd4 <memset+0xe>
 8006bce:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd2:	e7fa      	b.n	8006bca <memset+0x4>
 8006bd4:	4770      	bx	lr
	...

08006bd8 <_free_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4605      	mov	r5, r0
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	d046      	beq.n	8006c6e <_free_r+0x96>
 8006be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be4:	1f0c      	subs	r4, r1, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfb8      	it	lt
 8006bea:	18e4      	addlt	r4, r4, r3
 8006bec:	f000 fef5 	bl	80079da <__malloc_lock>
 8006bf0:	4a1f      	ldr	r2, [pc, #124]	; (8006c70 <_free_r+0x98>)
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	b913      	cbnz	r3, 8006bfe <_free_r+0x26>
 8006bf8:	6063      	str	r3, [r4, #4]
 8006bfa:	6014      	str	r4, [r2, #0]
 8006bfc:	e032      	b.n	8006c64 <_free_r+0x8c>
 8006bfe:	42a3      	cmp	r3, r4
 8006c00:	d90e      	bls.n	8006c20 <_free_r+0x48>
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	18a0      	adds	r0, r4, r2
 8006c06:	4283      	cmp	r3, r0
 8006c08:	bf04      	itt	eq
 8006c0a:	6818      	ldreq	r0, [r3, #0]
 8006c0c:	685b      	ldreq	r3, [r3, #4]
 8006c0e:	6063      	str	r3, [r4, #4]
 8006c10:	bf04      	itt	eq
 8006c12:	1812      	addeq	r2, r2, r0
 8006c14:	6022      	streq	r2, [r4, #0]
 8006c16:	600c      	str	r4, [r1, #0]
 8006c18:	e024      	b.n	8006c64 <_free_r+0x8c>
 8006c1a:	42a2      	cmp	r2, r4
 8006c1c:	d803      	bhi.n	8006c26 <_free_r+0x4e>
 8006c1e:	4613      	mov	r3, r2
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	d1f9      	bne.n	8006c1a <_free_r+0x42>
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	1819      	adds	r1, r3, r0
 8006c2a:	42a1      	cmp	r1, r4
 8006c2c:	d10b      	bne.n	8006c46 <_free_r+0x6e>
 8006c2e:	6821      	ldr	r1, [r4, #0]
 8006c30:	4401      	add	r1, r0
 8006c32:	1858      	adds	r0, r3, r1
 8006c34:	4282      	cmp	r2, r0
 8006c36:	6019      	str	r1, [r3, #0]
 8006c38:	d114      	bne.n	8006c64 <_free_r+0x8c>
 8006c3a:	6810      	ldr	r0, [r2, #0]
 8006c3c:	6852      	ldr	r2, [r2, #4]
 8006c3e:	605a      	str	r2, [r3, #4]
 8006c40:	4401      	add	r1, r0
 8006c42:	6019      	str	r1, [r3, #0]
 8006c44:	e00e      	b.n	8006c64 <_free_r+0x8c>
 8006c46:	d902      	bls.n	8006c4e <_free_r+0x76>
 8006c48:	230c      	movs	r3, #12
 8006c4a:	602b      	str	r3, [r5, #0]
 8006c4c:	e00a      	b.n	8006c64 <_free_r+0x8c>
 8006c4e:	6821      	ldr	r1, [r4, #0]
 8006c50:	1860      	adds	r0, r4, r1
 8006c52:	4282      	cmp	r2, r0
 8006c54:	bf04      	itt	eq
 8006c56:	6810      	ldreq	r0, [r2, #0]
 8006c58:	6852      	ldreq	r2, [r2, #4]
 8006c5a:	6062      	str	r2, [r4, #4]
 8006c5c:	bf04      	itt	eq
 8006c5e:	1809      	addeq	r1, r1, r0
 8006c60:	6021      	streq	r1, [r4, #0]
 8006c62:	605c      	str	r4, [r3, #4]
 8006c64:	4628      	mov	r0, r5
 8006c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c6a:	f000 beb7 	b.w	80079dc <__malloc_unlock>
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	20004f28 	.word	0x20004f28

08006c74 <_malloc_r>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	1ccd      	adds	r5, r1, #3
 8006c78:	f025 0503 	bic.w	r5, r5, #3
 8006c7c:	3508      	adds	r5, #8
 8006c7e:	2d0c      	cmp	r5, #12
 8006c80:	bf38      	it	cc
 8006c82:	250c      	movcc	r5, #12
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	4606      	mov	r6, r0
 8006c88:	db01      	blt.n	8006c8e <_malloc_r+0x1a>
 8006c8a:	42a9      	cmp	r1, r5
 8006c8c:	d902      	bls.n	8006c94 <_malloc_r+0x20>
 8006c8e:	230c      	movs	r3, #12
 8006c90:	6033      	str	r3, [r6, #0]
 8006c92:	e046      	b.n	8006d22 <_malloc_r+0xae>
 8006c94:	f000 fea1 	bl	80079da <__malloc_lock>
 8006c98:	4b23      	ldr	r3, [pc, #140]	; (8006d28 <_malloc_r+0xb4>)
 8006c9a:	681c      	ldr	r4, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	b1a1      	cbz	r1, 8006ccc <_malloc_r+0x58>
 8006ca2:	680b      	ldr	r3, [r1, #0]
 8006ca4:	1b5b      	subs	r3, r3, r5
 8006ca6:	d40e      	bmi.n	8006cc6 <_malloc_r+0x52>
 8006ca8:	2b0b      	cmp	r3, #11
 8006caa:	d903      	bls.n	8006cb4 <_malloc_r+0x40>
 8006cac:	600b      	str	r3, [r1, #0]
 8006cae:	18cc      	adds	r4, r1, r3
 8006cb0:	50cd      	str	r5, [r1, r3]
 8006cb2:	e01e      	b.n	8006cf2 <_malloc_r+0x7e>
 8006cb4:	428c      	cmp	r4, r1
 8006cb6:	bf0d      	iteet	eq
 8006cb8:	6863      	ldreq	r3, [r4, #4]
 8006cba:	684b      	ldrne	r3, [r1, #4]
 8006cbc:	6063      	strne	r3, [r4, #4]
 8006cbe:	6013      	streq	r3, [r2, #0]
 8006cc0:	bf18      	it	ne
 8006cc2:	460c      	movne	r4, r1
 8006cc4:	e015      	b.n	8006cf2 <_malloc_r+0x7e>
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	6849      	ldr	r1, [r1, #4]
 8006cca:	e7e9      	b.n	8006ca0 <_malloc_r+0x2c>
 8006ccc:	4c17      	ldr	r4, [pc, #92]	; (8006d2c <_malloc_r+0xb8>)
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	b91b      	cbnz	r3, 8006cda <_malloc_r+0x66>
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f000 fb0e 	bl	80072f4 <_sbrk_r>
 8006cd8:	6020      	str	r0, [r4, #0]
 8006cda:	4629      	mov	r1, r5
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f000 fb09 	bl	80072f4 <_sbrk_r>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	d018      	beq.n	8006d18 <_malloc_r+0xa4>
 8006ce6:	1cc4      	adds	r4, r0, #3
 8006ce8:	f024 0403 	bic.w	r4, r4, #3
 8006cec:	42a0      	cmp	r0, r4
 8006cee:	d10d      	bne.n	8006d0c <_malloc_r+0x98>
 8006cf0:	6025      	str	r5, [r4, #0]
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f000 fe72 	bl	80079dc <__malloc_unlock>
 8006cf8:	f104 000b 	add.w	r0, r4, #11
 8006cfc:	1d23      	adds	r3, r4, #4
 8006cfe:	f020 0007 	bic.w	r0, r0, #7
 8006d02:	1ac3      	subs	r3, r0, r3
 8006d04:	d00e      	beq.n	8006d24 <_malloc_r+0xb0>
 8006d06:	425a      	negs	r2, r3
 8006d08:	50e2      	str	r2, [r4, r3]
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	1a21      	subs	r1, r4, r0
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f000 faf0 	bl	80072f4 <_sbrk_r>
 8006d14:	3001      	adds	r0, #1
 8006d16:	d1eb      	bne.n	8006cf0 <_malloc_r+0x7c>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	6033      	str	r3, [r6, #0]
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f000 fe5d 	bl	80079dc <__malloc_unlock>
 8006d22:	2000      	movs	r0, #0
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	bf00      	nop
 8006d28:	20004f28 	.word	0x20004f28
 8006d2c:	20004f24 	.word	0x20004f24

08006d30 <__sfputc_r>:
 8006d30:	6893      	ldr	r3, [r2, #8]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	b410      	push	{r4}
 8006d38:	6093      	str	r3, [r2, #8]
 8006d3a:	da09      	bge.n	8006d50 <__sfputc_r+0x20>
 8006d3c:	6994      	ldr	r4, [r2, #24]
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	db02      	blt.n	8006d48 <__sfputc_r+0x18>
 8006d42:	b2cb      	uxtb	r3, r1
 8006d44:	2b0a      	cmp	r3, #10
 8006d46:	d103      	bne.n	8006d50 <__sfputc_r+0x20>
 8006d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d4c:	f000 bb84 	b.w	8007458 <__swbuf_r>
 8006d50:	6813      	ldr	r3, [r2, #0]
 8006d52:	1c58      	adds	r0, r3, #1
 8006d54:	6010      	str	r0, [r2, #0]
 8006d56:	7019      	strb	r1, [r3, #0]
 8006d58:	b2c8      	uxtb	r0, r1
 8006d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <__sfputs_r>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	4606      	mov	r6, r0
 8006d64:	460f      	mov	r7, r1
 8006d66:	4614      	mov	r4, r2
 8006d68:	18d5      	adds	r5, r2, r3
 8006d6a:	42ac      	cmp	r4, r5
 8006d6c:	d008      	beq.n	8006d80 <__sfputs_r+0x20>
 8006d6e:	463a      	mov	r2, r7
 8006d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d74:	4630      	mov	r0, r6
 8006d76:	f7ff ffdb 	bl	8006d30 <__sfputc_r>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d1f5      	bne.n	8006d6a <__sfputs_r+0xa>
 8006d7e:	e000      	b.n	8006d82 <__sfputs_r+0x22>
 8006d80:	2000      	movs	r0, #0
 8006d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d84 <_vfiprintf_r>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	b09d      	sub	sp, #116	; 0x74
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	4617      	mov	r7, r2
 8006d8e:	9303      	str	r3, [sp, #12]
 8006d90:	4606      	mov	r6, r0
 8006d92:	b118      	cbz	r0, 8006d9c <_vfiprintf_r+0x18>
 8006d94:	6983      	ldr	r3, [r0, #24]
 8006d96:	b90b      	cbnz	r3, 8006d9c <_vfiprintf_r+0x18>
 8006d98:	f000 fd1a 	bl	80077d0 <__sinit>
 8006d9c:	4b7f      	ldr	r3, [pc, #508]	; (8006f9c <_vfiprintf_r+0x218>)
 8006d9e:	429c      	cmp	r4, r3
 8006da0:	d101      	bne.n	8006da6 <_vfiprintf_r+0x22>
 8006da2:	6874      	ldr	r4, [r6, #4]
 8006da4:	e008      	b.n	8006db8 <_vfiprintf_r+0x34>
 8006da6:	4b7e      	ldr	r3, [pc, #504]	; (8006fa0 <_vfiprintf_r+0x21c>)
 8006da8:	429c      	cmp	r4, r3
 8006daa:	d101      	bne.n	8006db0 <_vfiprintf_r+0x2c>
 8006dac:	68b4      	ldr	r4, [r6, #8]
 8006dae:	e003      	b.n	8006db8 <_vfiprintf_r+0x34>
 8006db0:	4b7c      	ldr	r3, [pc, #496]	; (8006fa4 <_vfiprintf_r+0x220>)
 8006db2:	429c      	cmp	r4, r3
 8006db4:	bf08      	it	eq
 8006db6:	68f4      	ldreq	r4, [r6, #12]
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	0718      	lsls	r0, r3, #28
 8006dbc:	d50c      	bpl.n	8006dd8 <_vfiprintf_r+0x54>
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	b153      	cbz	r3, 8006dd8 <_vfiprintf_r+0x54>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc6:	2320      	movs	r3, #32
 8006dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dcc:	2330      	movs	r3, #48	; 0x30
 8006dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dd2:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8006fa8 <_vfiprintf_r+0x224>
 8006dd6:	e044      	b.n	8006e62 <_vfiprintf_r+0xde>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f000 fb90 	bl	8007500 <__swsetup_r>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d0ee      	beq.n	8006dc2 <_vfiprintf_r+0x3e>
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	e0d5      	b.n	8006f96 <_vfiprintf_r+0x212>
 8006dea:	9a03      	ldr	r2, [sp, #12]
 8006dec:	1d11      	adds	r1, r2, #4
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	9103      	str	r1, [sp, #12]
 8006df2:	2a00      	cmp	r2, #0
 8006df4:	f280 808c 	bge.w	8006f10 <_vfiprintf_r+0x18c>
 8006df8:	4252      	negs	r2, r2
 8006dfa:	f043 0002 	orr.w	r0, r3, #2
 8006dfe:	9207      	str	r2, [sp, #28]
 8006e00:	9004      	str	r0, [sp, #16]
 8006e02:	f898 3000 	ldrb.w	r3, [r8]
 8006e06:	2b2e      	cmp	r3, #46	; 0x2e
 8006e08:	f000 8084 	beq.w	8006f14 <_vfiprintf_r+0x190>
 8006e0c:	2203      	movs	r2, #3
 8006e0e:	f898 1000 	ldrb.w	r1, [r8]
 8006e12:	4865      	ldr	r0, [pc, #404]	; (8006fa8 <_vfiprintf_r+0x224>)
 8006e14:	f7f9 f9fc 	bl	8000210 <memchr>
 8006e18:	b148      	cbz	r0, 8006e2e <_vfiprintf_r+0xaa>
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	ebcb 0000 	rsb	r0, fp, r0
 8006e20:	fa03 f000 	lsl.w	r0, r3, r0
 8006e24:	9b04      	ldr	r3, [sp, #16]
 8006e26:	4318      	orrs	r0, r3
 8006e28:	9004      	str	r0, [sp, #16]
 8006e2a:	f108 0801 	add.w	r8, r8, #1
 8006e2e:	f898 1000 	ldrb.w	r1, [r8]
 8006e32:	485e      	ldr	r0, [pc, #376]	; (8006fac <_vfiprintf_r+0x228>)
 8006e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e38:	2206      	movs	r2, #6
 8006e3a:	f108 0701 	add.w	r7, r8, #1
 8006e3e:	f7f9 f9e7 	bl	8000210 <memchr>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	f000 8095 	beq.w	8006f72 <_vfiprintf_r+0x1ee>
 8006e48:	4b59      	ldr	r3, [pc, #356]	; (8006fb0 <_vfiprintf_r+0x22c>)
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 8088 	bne.w	8006f60 <_vfiprintf_r+0x1dc>
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	3307      	adds	r3, #7
 8006e54:	f023 0307 	bic.w	r3, r3, #7
 8006e58:	3308      	adds	r3, #8
 8006e5a:	9303      	str	r3, [sp, #12]
 8006e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5e:	4453      	add	r3, sl
 8006e60:	9309      	str	r3, [sp, #36]	; 0x24
 8006e62:	46b8      	mov	r8, r7
 8006e64:	4645      	mov	r5, r8
 8006e66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e6a:	b91b      	cbnz	r3, 8006e74 <_vfiprintf_r+0xf0>
 8006e6c:	ebb8 0907 	subs.w	r9, r8, r7
 8006e70:	d00f      	beq.n	8006e92 <_vfiprintf_r+0x10e>
 8006e72:	e003      	b.n	8006e7c <_vfiprintf_r+0xf8>
 8006e74:	2b25      	cmp	r3, #37	; 0x25
 8006e76:	d0f9      	beq.n	8006e6c <_vfiprintf_r+0xe8>
 8006e78:	46a8      	mov	r8, r5
 8006e7a:	e7f3      	b.n	8006e64 <_vfiprintf_r+0xe0>
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	463a      	mov	r2, r7
 8006e80:	4621      	mov	r1, r4
 8006e82:	4630      	mov	r0, r6
 8006e84:	f7ff ff6c 	bl	8006d60 <__sfputs_r>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d07f      	beq.n	8006f8c <_vfiprintf_r+0x208>
 8006e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8e:	444b      	add	r3, r9
 8006e90:	9309      	str	r3, [sp, #36]	; 0x24
 8006e92:	f898 3000 	ldrb.w	r3, [r8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d078      	beq.n	8006f8c <_vfiprintf_r+0x208>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	9307      	str	r3, [sp, #28]
 8006ea4:	9205      	str	r2, [sp, #20]
 8006ea6:	9306      	str	r3, [sp, #24]
 8006ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eac:	931a      	str	r3, [sp, #104]	; 0x68
 8006eae:	2701      	movs	r7, #1
 8006eb0:	2205      	movs	r2, #5
 8006eb2:	7829      	ldrb	r1, [r5, #0]
 8006eb4:	483f      	ldr	r0, [pc, #252]	; (8006fb4 <_vfiprintf_r+0x230>)
 8006eb6:	f7f9 f9ab 	bl	8000210 <memchr>
 8006eba:	f105 0801 	add.w	r8, r5, #1
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	b138      	cbz	r0, 8006ed2 <_vfiprintf_r+0x14e>
 8006ec2:	4a3c      	ldr	r2, [pc, #240]	; (8006fb4 <_vfiprintf_r+0x230>)
 8006ec4:	1a80      	subs	r0, r0, r2
 8006ec6:	fa07 f000 	lsl.w	r0, r7, r0
 8006eca:	4318      	orrs	r0, r3
 8006ecc:	9004      	str	r0, [sp, #16]
 8006ece:	4645      	mov	r5, r8
 8006ed0:	e7ee      	b.n	8006eb0 <_vfiprintf_r+0x12c>
 8006ed2:	06d9      	lsls	r1, r3, #27
 8006ed4:	bf44      	itt	mi
 8006ed6:	2220      	movmi	r2, #32
 8006ed8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006edc:	071a      	lsls	r2, r3, #28
 8006ede:	bf44      	itt	mi
 8006ee0:	222b      	movmi	r2, #43	; 0x2b
 8006ee2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ee6:	782a      	ldrb	r2, [r5, #0]
 8006ee8:	2a2a      	cmp	r2, #42	; 0x2a
 8006eea:	f43f af7e 	beq.w	8006dea <_vfiprintf_r+0x66>
 8006eee:	9a07      	ldr	r2, [sp, #28]
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	200a      	movs	r0, #10
 8006ef4:	46a8      	mov	r8, r5
 8006ef6:	3501      	adds	r5, #1
 8006ef8:	f898 3000 	ldrb.w	r3, [r8]
 8006efc:	3b30      	subs	r3, #48	; 0x30
 8006efe:	2b09      	cmp	r3, #9
 8006f00:	d803      	bhi.n	8006f0a <_vfiprintf_r+0x186>
 8006f02:	fb00 3202 	mla	r2, r0, r2, r3
 8006f06:	2101      	movs	r1, #1
 8006f08:	e7f4      	b.n	8006ef4 <_vfiprintf_r+0x170>
 8006f0a:	2900      	cmp	r1, #0
 8006f0c:	f43f af79 	beq.w	8006e02 <_vfiprintf_r+0x7e>
 8006f10:	9207      	str	r2, [sp, #28]
 8006f12:	e776      	b.n	8006e02 <_vfiprintf_r+0x7e>
 8006f14:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006f18:	2b2a      	cmp	r3, #42	; 0x2a
 8006f1a:	d10b      	bne.n	8006f34 <_vfiprintf_r+0x1b0>
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	1d1a      	adds	r2, r3, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	9203      	str	r2, [sp, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bfb8      	it	lt
 8006f28:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f2c:	f108 0802 	add.w	r8, r8, #2
 8006f30:	9305      	str	r3, [sp, #20]
 8006f32:	e76b      	b.n	8006e0c <_vfiprintf_r+0x88>
 8006f34:	2300      	movs	r3, #0
 8006f36:	9305      	str	r3, [sp, #20]
 8006f38:	f108 0001 	add.w	r0, r8, #1
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	250a      	movs	r5, #10
 8006f40:	4680      	mov	r8, r0
 8006f42:	3001      	adds	r0, #1
 8006f44:	f898 2000 	ldrb.w	r2, [r8]
 8006f48:	3a30      	subs	r2, #48	; 0x30
 8006f4a:	2a09      	cmp	r2, #9
 8006f4c:	d803      	bhi.n	8006f56 <_vfiprintf_r+0x1d2>
 8006f4e:	fb05 2101 	mla	r1, r5, r1, r2
 8006f52:	2301      	movs	r3, #1
 8006f54:	e7f4      	b.n	8006f40 <_vfiprintf_r+0x1bc>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f43f af58 	beq.w	8006e0c <_vfiprintf_r+0x88>
 8006f5c:	9105      	str	r1, [sp, #20]
 8006f5e:	e755      	b.n	8006e0c <_vfiprintf_r+0x88>
 8006f60:	ab03      	add	r3, sp, #12
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	4622      	mov	r2, r4
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <_vfiprintf_r+0x234>)
 8006f68:	a904      	add	r1, sp, #16
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f3af 8000 	nop.w
 8006f70:	e007      	b.n	8006f82 <_vfiprintf_r+0x1fe>
 8006f72:	ab03      	add	r3, sp, #12
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	4622      	mov	r2, r4
 8006f78:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <_vfiprintf_r+0x234>)
 8006f7a:	a904      	add	r1, sp, #16
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 f893 	bl	80070a8 <_printf_i>
 8006f82:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f86:	4682      	mov	sl, r0
 8006f88:	f47f af68 	bne.w	8006e5c <_vfiprintf_r+0xd8>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	065b      	lsls	r3, r3, #25
 8006f90:	f53f af28 	bmi.w	8006de4 <_vfiprintf_r+0x60>
 8006f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f96:	b01d      	add	sp, #116	; 0x74
 8006f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9c:	0800814c 	.word	0x0800814c
 8006fa0:	0800816c 	.word	0x0800816c
 8006fa4:	0800818c 	.word	0x0800818c
 8006fa8:	0800811e 	.word	0x0800811e
 8006fac:	08008122 	.word	0x08008122
 8006fb0:	00000000 	.word	0x00000000
 8006fb4:	08008118 	.word	0x08008118
 8006fb8:	08006d61 	.word	0x08006d61

08006fbc <_printf_common>:
 8006fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc0:	4691      	mov	r9, r2
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	690a      	ldr	r2, [r1, #16]
 8006fc6:	688b      	ldr	r3, [r1, #8]
 8006fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	bfb8      	it	lt
 8006fd0:	4613      	movlt	r3, r2
 8006fd2:	f8c9 3000 	str.w	r3, [r9]
 8006fd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	b112      	cbz	r2, 8006fe6 <_printf_common+0x2a>
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f8c9 3000 	str.w	r3, [r9]
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	0699      	lsls	r1, r3, #26
 8006fea:	bf42      	ittt	mi
 8006fec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ff0:	3302      	addmi	r3, #2
 8006ff2:	f8c9 3000 	strmi.w	r3, [r9]
 8006ff6:	6825      	ldr	r5, [r4, #0]
 8006ff8:	f015 0506 	ands.w	r5, r5, #6
 8006ffc:	d110      	bne.n	8007020 <_printf_common+0x64>
 8006ffe:	f104 0a19 	add.w	sl, r4, #25
 8007002:	e007      	b.n	8007014 <_printf_common+0x58>
 8007004:	2301      	movs	r3, #1
 8007006:	4652      	mov	r2, sl
 8007008:	4639      	mov	r1, r7
 800700a:	4630      	mov	r0, r6
 800700c:	47c0      	blx	r8
 800700e:	3001      	adds	r0, #1
 8007010:	d01a      	beq.n	8007048 <_printf_common+0x8c>
 8007012:	3501      	adds	r5, #1
 8007014:	68e3      	ldr	r3, [r4, #12]
 8007016:	f8d9 2000 	ldr.w	r2, [r9]
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	429d      	cmp	r5, r3
 800701e:	dbf1      	blt.n	8007004 <_printf_common+0x48>
 8007020:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007024:	6822      	ldr	r2, [r4, #0]
 8007026:	3300      	adds	r3, #0
 8007028:	bf18      	it	ne
 800702a:	2301      	movne	r3, #1
 800702c:	0692      	lsls	r2, r2, #26
 800702e:	d50f      	bpl.n	8007050 <_printf_common+0x94>
 8007030:	18e1      	adds	r1, r4, r3
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	2030      	movs	r0, #48	; 0x30
 8007036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800703a:	4422      	add	r2, r4
 800703c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007044:	3302      	adds	r3, #2
 8007046:	e003      	b.n	8007050 <_printf_common+0x94>
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007054:	4639      	mov	r1, r7
 8007056:	4630      	mov	r0, r6
 8007058:	47c0      	blx	r8
 800705a:	3001      	adds	r0, #1
 800705c:	d0f4      	beq.n	8007048 <_printf_common+0x8c>
 800705e:	6822      	ldr	r2, [r4, #0]
 8007060:	f8d9 5000 	ldr.w	r5, [r9]
 8007064:	68e3      	ldr	r3, [r4, #12]
 8007066:	f002 0206 	and.w	r2, r2, #6
 800706a:	2a04      	cmp	r2, #4
 800706c:	bf08      	it	eq
 800706e:	1b5d      	subeq	r5, r3, r5
 8007070:	6922      	ldr	r2, [r4, #16]
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	bf0c      	ite	eq
 8007076:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800707a:	2500      	movne	r5, #0
 800707c:	4293      	cmp	r3, r2
 800707e:	bfc4      	itt	gt
 8007080:	1a9b      	subgt	r3, r3, r2
 8007082:	18ed      	addgt	r5, r5, r3
 8007084:	f04f 0900 	mov.w	r9, #0
 8007088:	341a      	adds	r4, #26
 800708a:	454d      	cmp	r5, r9
 800708c:	d009      	beq.n	80070a2 <_printf_common+0xe6>
 800708e:	2301      	movs	r3, #1
 8007090:	4622      	mov	r2, r4
 8007092:	4639      	mov	r1, r7
 8007094:	4630      	mov	r0, r6
 8007096:	47c0      	blx	r8
 8007098:	3001      	adds	r0, #1
 800709a:	d0d5      	beq.n	8007048 <_printf_common+0x8c>
 800709c:	f109 0901 	add.w	r9, r9, #1
 80070a0:	e7f3      	b.n	800708a <_printf_common+0xce>
 80070a2:	2000      	movs	r0, #0
 80070a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080070a8 <_printf_i>:
 80070a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070ac:	4617      	mov	r7, r2
 80070ae:	7e0a      	ldrb	r2, [r1, #24]
 80070b0:	b085      	sub	sp, #20
 80070b2:	2a6e      	cmp	r2, #110	; 0x6e
 80070b4:	4698      	mov	r8, r3
 80070b6:	4606      	mov	r6, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070bc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80070c0:	f000 80ae 	beq.w	8007220 <_printf_i+0x178>
 80070c4:	d811      	bhi.n	80070ea <_printf_i+0x42>
 80070c6:	2a63      	cmp	r2, #99	; 0x63
 80070c8:	d022      	beq.n	8007110 <_printf_i+0x68>
 80070ca:	d809      	bhi.n	80070e0 <_printf_i+0x38>
 80070cc:	2a00      	cmp	r2, #0
 80070ce:	f000 80bb 	beq.w	8007248 <_printf_i+0x1a0>
 80070d2:	2a58      	cmp	r2, #88	; 0x58
 80070d4:	f040 80ca 	bne.w	800726c <_printf_i+0x1c4>
 80070d8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80070dc:	4983      	ldr	r1, [pc, #524]	; (80072ec <_printf_i+0x244>)
 80070de:	e055      	b.n	800718c <_printf_i+0xe4>
 80070e0:	2a64      	cmp	r2, #100	; 0x64
 80070e2:	d01e      	beq.n	8007122 <_printf_i+0x7a>
 80070e4:	2a69      	cmp	r2, #105	; 0x69
 80070e6:	d01c      	beq.n	8007122 <_printf_i+0x7a>
 80070e8:	e0c0      	b.n	800726c <_printf_i+0x1c4>
 80070ea:	2a73      	cmp	r2, #115	; 0x73
 80070ec:	f000 80b0 	beq.w	8007250 <_printf_i+0x1a8>
 80070f0:	d809      	bhi.n	8007106 <_printf_i+0x5e>
 80070f2:	2a6f      	cmp	r2, #111	; 0x6f
 80070f4:	d02e      	beq.n	8007154 <_printf_i+0xac>
 80070f6:	2a70      	cmp	r2, #112	; 0x70
 80070f8:	f040 80b8 	bne.w	800726c <_printf_i+0x1c4>
 80070fc:	680a      	ldr	r2, [r1, #0]
 80070fe:	f042 0220 	orr.w	r2, r2, #32
 8007102:	600a      	str	r2, [r1, #0]
 8007104:	e03e      	b.n	8007184 <_printf_i+0xdc>
 8007106:	2a75      	cmp	r2, #117	; 0x75
 8007108:	d024      	beq.n	8007154 <_printf_i+0xac>
 800710a:	2a78      	cmp	r2, #120	; 0x78
 800710c:	d03a      	beq.n	8007184 <_printf_i+0xdc>
 800710e:	e0ad      	b.n	800726c <_printf_i+0x1c4>
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007116:	1d11      	adds	r1, r2, #4
 8007118:	6019      	str	r1, [r3, #0]
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007120:	e0a8      	b.n	8007274 <_printf_i+0x1cc>
 8007122:	6821      	ldr	r1, [r4, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	f011 0f80 	tst.w	r1, #128	; 0x80
 800712a:	d002      	beq.n	8007132 <_printf_i+0x8a>
 800712c:	1d11      	adds	r1, r2, #4
 800712e:	6019      	str	r1, [r3, #0]
 8007130:	e008      	b.n	8007144 <_printf_i+0x9c>
 8007132:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007136:	f102 0104 	add.w	r1, r2, #4
 800713a:	6019      	str	r1, [r3, #0]
 800713c:	d002      	beq.n	8007144 <_printf_i+0x9c>
 800713e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007142:	e000      	b.n	8007146 <_printf_i+0x9e>
 8007144:	6813      	ldr	r3, [r2, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	da3c      	bge.n	80071c4 <_printf_i+0x11c>
 800714a:	222d      	movs	r2, #45	; 0x2d
 800714c:	425b      	negs	r3, r3
 800714e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007152:	e037      	b.n	80071c4 <_printf_i+0x11c>
 8007154:	6821      	ldr	r1, [r4, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	f011 0f80 	tst.w	r1, #128	; 0x80
 800715c:	d002      	beq.n	8007164 <_printf_i+0xbc>
 800715e:	1d11      	adds	r1, r2, #4
 8007160:	6019      	str	r1, [r3, #0]
 8007162:	e007      	b.n	8007174 <_printf_i+0xcc>
 8007164:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007168:	f102 0104 	add.w	r1, r2, #4
 800716c:	6019      	str	r1, [r3, #0]
 800716e:	d001      	beq.n	8007174 <_printf_i+0xcc>
 8007170:	8813      	ldrh	r3, [r2, #0]
 8007172:	e000      	b.n	8007176 <_printf_i+0xce>
 8007174:	6813      	ldr	r3, [r2, #0]
 8007176:	7e22      	ldrb	r2, [r4, #24]
 8007178:	495c      	ldr	r1, [pc, #368]	; (80072ec <_printf_i+0x244>)
 800717a:	2a6f      	cmp	r2, #111	; 0x6f
 800717c:	bf14      	ite	ne
 800717e:	220a      	movne	r2, #10
 8007180:	2208      	moveq	r2, #8
 8007182:	e01b      	b.n	80071bc <_printf_i+0x114>
 8007184:	2278      	movs	r2, #120	; 0x78
 8007186:	495a      	ldr	r1, [pc, #360]	; (80072f0 <_printf_i+0x248>)
 8007188:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800718c:	6822      	ldr	r2, [r4, #0]
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007194:	f100 0504 	add.w	r5, r0, #4
 8007198:	601d      	str	r5, [r3, #0]
 800719a:	d103      	bne.n	80071a4 <_printf_i+0xfc>
 800719c:	0655      	lsls	r5, r2, #25
 800719e:	d501      	bpl.n	80071a4 <_printf_i+0xfc>
 80071a0:	8803      	ldrh	r3, [r0, #0]
 80071a2:	e000      	b.n	80071a6 <_printf_i+0xfe>
 80071a4:	6803      	ldr	r3, [r0, #0]
 80071a6:	07d0      	lsls	r0, r2, #31
 80071a8:	bf44      	itt	mi
 80071aa:	f042 0220 	orrmi.w	r2, r2, #32
 80071ae:	6022      	strmi	r2, [r4, #0]
 80071b0:	b91b      	cbnz	r3, 80071ba <_printf_i+0x112>
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	f022 0220 	bic.w	r2, r2, #32
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	2210      	movs	r2, #16
 80071bc:	2000      	movs	r0, #0
 80071be:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80071c2:	e001      	b.n	80071c8 <_printf_i+0x120>
 80071c4:	4949      	ldr	r1, [pc, #292]	; (80072ec <_printf_i+0x244>)
 80071c6:	220a      	movs	r2, #10
 80071c8:	6865      	ldr	r5, [r4, #4]
 80071ca:	60a5      	str	r5, [r4, #8]
 80071cc:	2d00      	cmp	r5, #0
 80071ce:	db08      	blt.n	80071e2 <_printf_i+0x13a>
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	f020 0004 	bic.w	r0, r0, #4
 80071d6:	6020      	str	r0, [r4, #0]
 80071d8:	b92b      	cbnz	r3, 80071e6 <_printf_i+0x13e>
 80071da:	2d00      	cmp	r5, #0
 80071dc:	d17d      	bne.n	80072da <_printf_i+0x232>
 80071de:	4675      	mov	r5, lr
 80071e0:	e00c      	b.n	80071fc <_printf_i+0x154>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d079      	beq.n	80072da <_printf_i+0x232>
 80071e6:	4675      	mov	r5, lr
 80071e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80071ec:	fb02 3310 	mls	r3, r2, r0, r3
 80071f0:	5ccb      	ldrb	r3, [r1, r3]
 80071f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80071f6:	4603      	mov	r3, r0
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d1f5      	bne.n	80071e8 <_printf_i+0x140>
 80071fc:	2a08      	cmp	r2, #8
 80071fe:	d10b      	bne.n	8007218 <_printf_i+0x170>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	07da      	lsls	r2, r3, #31
 8007204:	d508      	bpl.n	8007218 <_printf_i+0x170>
 8007206:	6923      	ldr	r3, [r4, #16]
 8007208:	6862      	ldr	r2, [r4, #4]
 800720a:	429a      	cmp	r2, r3
 800720c:	bfde      	ittt	le
 800720e:	2330      	movle	r3, #48	; 0x30
 8007210:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007214:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007218:	ebc5 030e 	rsb	r3, r5, lr
 800721c:	6123      	str	r3, [r4, #16]
 800721e:	e02e      	b.n	800727e <_printf_i+0x1d6>
 8007220:	6808      	ldr	r0, [r1, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	6949      	ldr	r1, [r1, #20]
 8007226:	f010 0f80 	tst.w	r0, #128	; 0x80
 800722a:	d003      	beq.n	8007234 <_printf_i+0x18c>
 800722c:	1d10      	adds	r0, r2, #4
 800722e:	6018      	str	r0, [r3, #0]
 8007230:	6813      	ldr	r3, [r2, #0]
 8007232:	e008      	b.n	8007246 <_printf_i+0x19e>
 8007234:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007238:	f102 0004 	add.w	r0, r2, #4
 800723c:	6018      	str	r0, [r3, #0]
 800723e:	6813      	ldr	r3, [r2, #0]
 8007240:	d001      	beq.n	8007246 <_printf_i+0x19e>
 8007242:	8019      	strh	r1, [r3, #0]
 8007244:	e000      	b.n	8007248 <_printf_i+0x1a0>
 8007246:	6019      	str	r1, [r3, #0]
 8007248:	2300      	movs	r3, #0
 800724a:	6123      	str	r3, [r4, #16]
 800724c:	4675      	mov	r5, lr
 800724e:	e016      	b.n	800727e <_printf_i+0x1d6>
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	1d11      	adds	r1, r2, #4
 8007254:	6019      	str	r1, [r3, #0]
 8007256:	6815      	ldr	r5, [r2, #0]
 8007258:	6862      	ldr	r2, [r4, #4]
 800725a:	2100      	movs	r1, #0
 800725c:	4628      	mov	r0, r5
 800725e:	f7f8 ffd7 	bl	8000210 <memchr>
 8007262:	b108      	cbz	r0, 8007268 <_printf_i+0x1c0>
 8007264:	1b40      	subs	r0, r0, r5
 8007266:	6060      	str	r0, [r4, #4]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	e004      	b.n	8007276 <_printf_i+0x1ce>
 800726c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007270:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007274:	2301      	movs	r3, #1
 8007276:	6123      	str	r3, [r4, #16]
 8007278:	2300      	movs	r3, #0
 800727a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800727e:	f8cd 8000 	str.w	r8, [sp]
 8007282:	463b      	mov	r3, r7
 8007284:	aa03      	add	r2, sp, #12
 8007286:	4621      	mov	r1, r4
 8007288:	4630      	mov	r0, r6
 800728a:	f7ff fe97 	bl	8006fbc <_printf_common>
 800728e:	3001      	adds	r0, #1
 8007290:	d102      	bne.n	8007298 <_printf_i+0x1f0>
 8007292:	f04f 30ff 	mov.w	r0, #4294967295
 8007296:	e026      	b.n	80072e6 <_printf_i+0x23e>
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	462a      	mov	r2, r5
 800729c:	4639      	mov	r1, r7
 800729e:	4630      	mov	r0, r6
 80072a0:	47c0      	blx	r8
 80072a2:	3001      	adds	r0, #1
 80072a4:	d0f5      	beq.n	8007292 <_printf_i+0x1ea>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	079b      	lsls	r3, r3, #30
 80072aa:	d510      	bpl.n	80072ce <_printf_i+0x226>
 80072ac:	2500      	movs	r5, #0
 80072ae:	f104 0919 	add.w	r9, r4, #25
 80072b2:	e007      	b.n	80072c4 <_printf_i+0x21c>
 80072b4:	2301      	movs	r3, #1
 80072b6:	464a      	mov	r2, r9
 80072b8:	4639      	mov	r1, r7
 80072ba:	4630      	mov	r0, r6
 80072bc:	47c0      	blx	r8
 80072be:	3001      	adds	r0, #1
 80072c0:	d0e7      	beq.n	8007292 <_printf_i+0x1ea>
 80072c2:	3501      	adds	r5, #1
 80072c4:	68e3      	ldr	r3, [r4, #12]
 80072c6:	9a03      	ldr	r2, [sp, #12]
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	429d      	cmp	r5, r3
 80072cc:	dbf2      	blt.n	80072b4 <_printf_i+0x20c>
 80072ce:	68e0      	ldr	r0, [r4, #12]
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	4298      	cmp	r0, r3
 80072d4:	bfb8      	it	lt
 80072d6:	4618      	movlt	r0, r3
 80072d8:	e005      	b.n	80072e6 <_printf_i+0x23e>
 80072da:	780b      	ldrb	r3, [r1, #0]
 80072dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072e4:	e78a      	b.n	80071fc <_printf_i+0x154>
 80072e6:	b005      	add	sp, #20
 80072e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ec:	08008129 	.word	0x08008129
 80072f0:	0800813a 	.word	0x0800813a

080072f4 <_sbrk_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4c06      	ldr	r4, [pc, #24]	; (8007310 <_sbrk_r+0x1c>)
 80072f8:	2300      	movs	r3, #0
 80072fa:	4605      	mov	r5, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	f000 fdce 	bl	8007ea0 <_sbrk>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d102      	bne.n	800730e <_sbrk_r+0x1a>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	b103      	cbz	r3, 800730e <_sbrk_r+0x1a>
 800730c:	602b      	str	r3, [r5, #0]
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	20006394 	.word	0x20006394

08007314 <_raise_r>:
 8007314:	291f      	cmp	r1, #31
 8007316:	b538      	push	{r3, r4, r5, lr}
 8007318:	4604      	mov	r4, r0
 800731a:	460d      	mov	r5, r1
 800731c:	d904      	bls.n	8007328 <_raise_r+0x14>
 800731e:	2316      	movs	r3, #22
 8007320:	6003      	str	r3, [r0, #0]
 8007322:	f04f 30ff 	mov.w	r0, #4294967295
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800732a:	b112      	cbz	r2, 8007332 <_raise_r+0x1e>
 800732c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007330:	b94b      	cbnz	r3, 8007346 <_raise_r+0x32>
 8007332:	4620      	mov	r0, r4
 8007334:	f000 f832 	bl	800739c <_getpid_r>
 8007338:	462a      	mov	r2, r5
 800733a:	4601      	mov	r1, r0
 800733c:	4620      	mov	r0, r4
 800733e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007342:	f000 b819 	b.w	8007378 <_kill_r>
 8007346:	2b01      	cmp	r3, #1
 8007348:	d00c      	beq.n	8007364 <_raise_r+0x50>
 800734a:	1c59      	adds	r1, r3, #1
 800734c:	d103      	bne.n	8007356 <_raise_r+0x42>
 800734e:	2316      	movs	r3, #22
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	2001      	movs	r0, #1
 8007354:	bd38      	pop	{r3, r4, r5, pc}
 8007356:	2400      	movs	r4, #0
 8007358:	4628      	mov	r0, r5
 800735a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800735e:	4798      	blx	r3
 8007360:	4620      	mov	r0, r4
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	2000      	movs	r0, #0
 8007366:	bd38      	pop	{r3, r4, r5, pc}

08007368 <raise>:
 8007368:	4b02      	ldr	r3, [pc, #8]	; (8007374 <raise+0xc>)
 800736a:	4601      	mov	r1, r0
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	f7ff bfd1 	b.w	8007314 <_raise_r>
 8007372:	bf00      	nop
 8007374:	200001e0 	.word	0x200001e0

08007378 <_kill_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4c07      	ldr	r4, [pc, #28]	; (8007398 <_kill_r+0x20>)
 800737c:	2300      	movs	r3, #0
 800737e:	4605      	mov	r5, r0
 8007380:	4608      	mov	r0, r1
 8007382:	4611      	mov	r1, r2
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	f000 fd73 	bl	8007e70 <_kill>
 800738a:	1c43      	adds	r3, r0, #1
 800738c:	d102      	bne.n	8007394 <_kill_r+0x1c>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	b103      	cbz	r3, 8007394 <_kill_r+0x1c>
 8007392:	602b      	str	r3, [r5, #0]
 8007394:	bd38      	pop	{r3, r4, r5, pc}
 8007396:	bf00      	nop
 8007398:	20006394 	.word	0x20006394

0800739c <_getpid_r>:
 800739c:	f000 bd58 	b.w	8007e50 <_getpid>

080073a0 <_vsniprintf_r>:
 80073a0:	b530      	push	{r4, r5, lr}
 80073a2:	1e14      	subs	r4, r2, #0
 80073a4:	4605      	mov	r5, r0
 80073a6:	b09b      	sub	sp, #108	; 0x6c
 80073a8:	4618      	mov	r0, r3
 80073aa:	da04      	bge.n	80073b6 <_vsniprintf_r+0x16>
 80073ac:	238b      	movs	r3, #139	; 0x8b
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295
 80073b4:	e01d      	b.n	80073f2 <_vsniprintf_r+0x52>
 80073b6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80073ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80073be:	bf14      	ite	ne
 80073c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073c4:	4623      	moveq	r3, r4
 80073c6:	9302      	str	r3, [sp, #8]
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073ce:	9100      	str	r1, [sp, #0]
 80073d0:	9104      	str	r1, [sp, #16]
 80073d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80073d6:	4602      	mov	r2, r0
 80073d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80073da:	4669      	mov	r1, sp
 80073dc:	4628      	mov	r0, r5
 80073de:	f000 fb7d 	bl	8007adc <_svfiprintf_r>
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	bfbc      	itt	lt
 80073e6:	238b      	movlt	r3, #139	; 0x8b
 80073e8:	602b      	strlt	r3, [r5, #0]
 80073ea:	b114      	cbz	r4, 80073f2 <_vsniprintf_r+0x52>
 80073ec:	9b00      	ldr	r3, [sp, #0]
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	b01b      	add	sp, #108	; 0x6c
 80073f4:	bd30      	pop	{r4, r5, pc}
	...

080073f8 <vsniprintf>:
 80073f8:	b507      	push	{r0, r1, r2, lr}
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	460a      	mov	r2, r1
 8007400:	4601      	mov	r1, r0
 8007402:	4803      	ldr	r0, [pc, #12]	; (8007410 <vsniprintf+0x18>)
 8007404:	6800      	ldr	r0, [r0, #0]
 8007406:	f7ff ffcb 	bl	80073a0 <_vsniprintf_r>
 800740a:	b003      	add	sp, #12
 800740c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007410:	200001e0 	.word	0x200001e0

08007414 <_vsiprintf_r>:
 8007414:	b510      	push	{r4, lr}
 8007416:	b09a      	sub	sp, #104	; 0x68
 8007418:	f44f 7402 	mov.w	r4, #520	; 0x208
 800741c:	9100      	str	r1, [sp, #0]
 800741e:	9104      	str	r1, [sp, #16]
 8007420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007424:	9102      	str	r1, [sp, #8]
 8007426:	9105      	str	r1, [sp, #20]
 8007428:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800742c:	f8ad 100e 	strh.w	r1, [sp, #14]
 8007430:	4669      	mov	r1, sp
 8007432:	f8ad 400c 	strh.w	r4, [sp, #12]
 8007436:	f000 fb51 	bl	8007adc <_svfiprintf_r>
 800743a:	9b00      	ldr	r3, [sp, #0]
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	b01a      	add	sp, #104	; 0x68
 8007442:	bd10      	pop	{r4, pc}

08007444 <vsiprintf>:
 8007444:	4613      	mov	r3, r2
 8007446:	460a      	mov	r2, r1
 8007448:	4601      	mov	r1, r0
 800744a:	4802      	ldr	r0, [pc, #8]	; (8007454 <vsiprintf+0x10>)
 800744c:	6800      	ldr	r0, [r0, #0]
 800744e:	f7ff bfe1 	b.w	8007414 <_vsiprintf_r>
 8007452:	bf00      	nop
 8007454:	200001e0 	.word	0x200001e0

08007458 <__swbuf_r>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	460f      	mov	r7, r1
 800745c:	4614      	mov	r4, r2
 800745e:	4605      	mov	r5, r0
 8007460:	b118      	cbz	r0, 800746a <__swbuf_r+0x12>
 8007462:	6983      	ldr	r3, [r0, #24]
 8007464:	b90b      	cbnz	r3, 800746a <__swbuf_r+0x12>
 8007466:	f000 f9b3 	bl	80077d0 <__sinit>
 800746a:	4b22      	ldr	r3, [pc, #136]	; (80074f4 <__swbuf_r+0x9c>)
 800746c:	429c      	cmp	r4, r3
 800746e:	d101      	bne.n	8007474 <__swbuf_r+0x1c>
 8007470:	686c      	ldr	r4, [r5, #4]
 8007472:	e008      	b.n	8007486 <__swbuf_r+0x2e>
 8007474:	4b20      	ldr	r3, [pc, #128]	; (80074f8 <__swbuf_r+0xa0>)
 8007476:	429c      	cmp	r4, r3
 8007478:	d101      	bne.n	800747e <__swbuf_r+0x26>
 800747a:	68ac      	ldr	r4, [r5, #8]
 800747c:	e003      	b.n	8007486 <__swbuf_r+0x2e>
 800747e:	4b1f      	ldr	r3, [pc, #124]	; (80074fc <__swbuf_r+0xa4>)
 8007480:	429c      	cmp	r4, r3
 8007482:	bf08      	it	eq
 8007484:	68ec      	ldreq	r4, [r5, #12]
 8007486:	69a3      	ldr	r3, [r4, #24]
 8007488:	60a3      	str	r3, [r4, #8]
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	071a      	lsls	r2, r3, #28
 800748e:	d509      	bpl.n	80074a4 <__swbuf_r+0x4c>
 8007490:	6923      	ldr	r3, [r4, #16]
 8007492:	b13b      	cbz	r3, 80074a4 <__swbuf_r+0x4c>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	6920      	ldr	r0, [r4, #16]
 8007498:	1a18      	subs	r0, r3, r0
 800749a:	6963      	ldr	r3, [r4, #20]
 800749c:	4298      	cmp	r0, r3
 800749e:	b2fe      	uxtb	r6, r7
 80074a0:	db0f      	blt.n	80074c2 <__swbuf_r+0x6a>
 80074a2:	e008      	b.n	80074b6 <__swbuf_r+0x5e>
 80074a4:	4621      	mov	r1, r4
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 f82a 	bl	8007500 <__swsetup_r>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d0f1      	beq.n	8007494 <__swbuf_r+0x3c>
 80074b0:	f04f 36ff 	mov.w	r6, #4294967295
 80074b4:	e01b      	b.n	80074ee <__swbuf_r+0x96>
 80074b6:	4621      	mov	r1, r4
 80074b8:	4628      	mov	r0, r5
 80074ba:	f000 f91f 	bl	80076fc <_fflush_r>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d1f6      	bne.n	80074b0 <__swbuf_r+0x58>
 80074c2:	68a3      	ldr	r3, [r4, #8]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	60a3      	str	r3, [r4, #8]
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	6022      	str	r2, [r4, #0]
 80074ce:	701f      	strb	r7, [r3, #0]
 80074d0:	6963      	ldr	r3, [r4, #20]
 80074d2:	3001      	adds	r0, #1
 80074d4:	4298      	cmp	r0, r3
 80074d6:	d004      	beq.n	80074e2 <__swbuf_r+0x8a>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	07db      	lsls	r3, r3, #31
 80074dc:	d507      	bpl.n	80074ee <__swbuf_r+0x96>
 80074de:	2e0a      	cmp	r6, #10
 80074e0:	d105      	bne.n	80074ee <__swbuf_r+0x96>
 80074e2:	4621      	mov	r1, r4
 80074e4:	4628      	mov	r0, r5
 80074e6:	f000 f909 	bl	80076fc <_fflush_r>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d1e0      	bne.n	80074b0 <__swbuf_r+0x58>
 80074ee:	4630      	mov	r0, r6
 80074f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074f2:	bf00      	nop
 80074f4:	0800814c 	.word	0x0800814c
 80074f8:	0800816c 	.word	0x0800816c
 80074fc:	0800818c 	.word	0x0800818c

08007500 <__swsetup_r>:
 8007500:	4b32      	ldr	r3, [pc, #200]	; (80075cc <__swsetup_r+0xcc>)
 8007502:	b570      	push	{r4, r5, r6, lr}
 8007504:	681d      	ldr	r5, [r3, #0]
 8007506:	4606      	mov	r6, r0
 8007508:	460c      	mov	r4, r1
 800750a:	b125      	cbz	r5, 8007516 <__swsetup_r+0x16>
 800750c:	69ab      	ldr	r3, [r5, #24]
 800750e:	b913      	cbnz	r3, 8007516 <__swsetup_r+0x16>
 8007510:	4628      	mov	r0, r5
 8007512:	f000 f95d 	bl	80077d0 <__sinit>
 8007516:	4b2e      	ldr	r3, [pc, #184]	; (80075d0 <__swsetup_r+0xd0>)
 8007518:	429c      	cmp	r4, r3
 800751a:	d101      	bne.n	8007520 <__swsetup_r+0x20>
 800751c:	686c      	ldr	r4, [r5, #4]
 800751e:	e008      	b.n	8007532 <__swsetup_r+0x32>
 8007520:	4b2c      	ldr	r3, [pc, #176]	; (80075d4 <__swsetup_r+0xd4>)
 8007522:	429c      	cmp	r4, r3
 8007524:	d101      	bne.n	800752a <__swsetup_r+0x2a>
 8007526:	68ac      	ldr	r4, [r5, #8]
 8007528:	e003      	b.n	8007532 <__swsetup_r+0x32>
 800752a:	4b2b      	ldr	r3, [pc, #172]	; (80075d8 <__swsetup_r+0xd8>)
 800752c:	429c      	cmp	r4, r3
 800752e:	bf08      	it	eq
 8007530:	68ec      	ldreq	r4, [r5, #12]
 8007532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007536:	b29a      	uxth	r2, r3
 8007538:	0715      	lsls	r5, r2, #28
 800753a:	d41d      	bmi.n	8007578 <__swsetup_r+0x78>
 800753c:	06d0      	lsls	r0, r2, #27
 800753e:	d402      	bmi.n	8007546 <__swsetup_r+0x46>
 8007540:	2209      	movs	r2, #9
 8007542:	6032      	str	r2, [r6, #0]
 8007544:	e03a      	b.n	80075bc <__swsetup_r+0xbc>
 8007546:	0751      	lsls	r1, r2, #29
 8007548:	d512      	bpl.n	8007570 <__swsetup_r+0x70>
 800754a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800754c:	b141      	cbz	r1, 8007560 <__swsetup_r+0x60>
 800754e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007552:	4299      	cmp	r1, r3
 8007554:	d002      	beq.n	800755c <__swsetup_r+0x5c>
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff fb3e 	bl	8006bd8 <_free_r>
 800755c:	2300      	movs	r3, #0
 800755e:	6363      	str	r3, [r4, #52]	; 0x34
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	2300      	movs	r3, #0
 800756a:	6063      	str	r3, [r4, #4]
 800756c:	6923      	ldr	r3, [r4, #16]
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	f043 0308 	orr.w	r3, r3, #8
 8007576:	81a3      	strh	r3, [r4, #12]
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	b94b      	cbnz	r3, 8007590 <__swsetup_r+0x90>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007586:	d003      	beq.n	8007590 <__swsetup_r+0x90>
 8007588:	4621      	mov	r1, r4
 800758a:	4630      	mov	r0, r6
 800758c:	f000 f9ce 	bl	800792c <__smakebuf_r>
 8007590:	89a2      	ldrh	r2, [r4, #12]
 8007592:	f012 0301 	ands.w	r3, r2, #1
 8007596:	d005      	beq.n	80075a4 <__swsetup_r+0xa4>
 8007598:	2300      	movs	r3, #0
 800759a:	60a3      	str	r3, [r4, #8]
 800759c:	6963      	ldr	r3, [r4, #20]
 800759e:	425b      	negs	r3, r3
 80075a0:	61a3      	str	r3, [r4, #24]
 80075a2:	e003      	b.n	80075ac <__swsetup_r+0xac>
 80075a4:	0792      	lsls	r2, r2, #30
 80075a6:	bf58      	it	pl
 80075a8:	6963      	ldrpl	r3, [r4, #20]
 80075aa:	60a3      	str	r3, [r4, #8]
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	b95b      	cbnz	r3, 80075c8 <__swsetup_r+0xc8>
 80075b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b4:	f003 0080 	and.w	r0, r3, #128	; 0x80
 80075b8:	b280      	uxth	r0, r0
 80075ba:	b130      	cbz	r0, 80075ca <__swsetup_r+0xca>
 80075bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	2000      	movs	r0, #0
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	200001e0 	.word	0x200001e0
 80075d0:	0800814c 	.word	0x0800814c
 80075d4:	0800816c 	.word	0x0800816c
 80075d8:	0800818c 	.word	0x0800818c

080075dc <abort>:
 80075dc:	b508      	push	{r3, lr}
 80075de:	2006      	movs	r0, #6
 80075e0:	f7ff fec2 	bl	8007368 <raise>
 80075e4:	2001      	movs	r0, #1
 80075e6:	f000 fc71 	bl	8007ecc <_exit>
	...

080075ec <__sflush_r>:
 80075ec:	898a      	ldrh	r2, [r1, #12]
 80075ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f2:	4605      	mov	r5, r0
 80075f4:	0710      	lsls	r0, r2, #28
 80075f6:	460c      	mov	r4, r1
 80075f8:	d459      	bmi.n	80076ae <__sflush_r+0xc2>
 80075fa:	684b      	ldr	r3, [r1, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dc02      	bgt.n	8007606 <__sflush_r+0x1a>
 8007600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	dd17      	ble.n	8007636 <__sflush_r+0x4a>
 8007606:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007608:	b1ae      	cbz	r6, 8007636 <__sflush_r+0x4a>
 800760a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800760e:	2300      	movs	r3, #0
 8007610:	b292      	uxth	r2, r2
 8007612:	682f      	ldr	r7, [r5, #0]
 8007614:	602b      	str	r3, [r5, #0]
 8007616:	b10a      	cbz	r2, 800761c <__sflush_r+0x30>
 8007618:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800761a:	e015      	b.n	8007648 <__sflush_r+0x5c>
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	2301      	movs	r3, #1
 8007620:	4628      	mov	r0, r5
 8007622:	47b0      	blx	r6
 8007624:	1c41      	adds	r1, r0, #1
 8007626:	d10f      	bne.n	8007648 <__sflush_r+0x5c>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	b16b      	cbz	r3, 8007648 <__sflush_r+0x5c>
 800762c:	2b1d      	cmp	r3, #29
 800762e:	d001      	beq.n	8007634 <__sflush_r+0x48>
 8007630:	2b16      	cmp	r3, #22
 8007632:	d103      	bne.n	800763c <__sflush_r+0x50>
 8007634:	602f      	str	r7, [r5, #0]
 8007636:	2000      	movs	r0, #0
 8007638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007642:	81a3      	strh	r3, [r4, #12]
 8007644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	075a      	lsls	r2, r3, #29
 800764c:	d505      	bpl.n	800765a <__sflush_r+0x6e>
 800764e:	6863      	ldr	r3, [r4, #4]
 8007650:	1ac0      	subs	r0, r0, r3
 8007652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007654:	b10b      	cbz	r3, 800765a <__sflush_r+0x6e>
 8007656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007658:	1ac0      	subs	r0, r0, r3
 800765a:	2300      	movs	r3, #0
 800765c:	4602      	mov	r2, r0
 800765e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007660:	6a21      	ldr	r1, [r4, #32]
 8007662:	4628      	mov	r0, r5
 8007664:	47b0      	blx	r6
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	d106      	bne.n	800767a <__sflush_r+0x8e>
 800766c:	6829      	ldr	r1, [r5, #0]
 800766e:	291d      	cmp	r1, #29
 8007670:	d83a      	bhi.n	80076e8 <__sflush_r+0xfc>
 8007672:	4a21      	ldr	r2, [pc, #132]	; (80076f8 <__sflush_r+0x10c>)
 8007674:	40ca      	lsrs	r2, r1
 8007676:	07d6      	lsls	r6, r2, #31
 8007678:	d536      	bpl.n	80076e8 <__sflush_r+0xfc>
 800767a:	2200      	movs	r2, #0
 800767c:	6062      	str	r2, [r4, #4]
 800767e:	04d9      	lsls	r1, r3, #19
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	6022      	str	r2, [r4, #0]
 8007684:	d504      	bpl.n	8007690 <__sflush_r+0xa4>
 8007686:	1c42      	adds	r2, r0, #1
 8007688:	d101      	bne.n	800768e <__sflush_r+0xa2>
 800768a:	682b      	ldr	r3, [r5, #0]
 800768c:	b903      	cbnz	r3, 8007690 <__sflush_r+0xa4>
 800768e:	6560      	str	r0, [r4, #84]	; 0x54
 8007690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007692:	602f      	str	r7, [r5, #0]
 8007694:	2900      	cmp	r1, #0
 8007696:	d0ce      	beq.n	8007636 <__sflush_r+0x4a>
 8007698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800769c:	4299      	cmp	r1, r3
 800769e:	d002      	beq.n	80076a6 <__sflush_r+0xba>
 80076a0:	4628      	mov	r0, r5
 80076a2:	f7ff fa99 	bl	8006bd8 <_free_r>
 80076a6:	2000      	movs	r0, #0
 80076a8:	6360      	str	r0, [r4, #52]	; 0x34
 80076aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ae:	690f      	ldr	r7, [r1, #16]
 80076b0:	2f00      	cmp	r7, #0
 80076b2:	d0c0      	beq.n	8007636 <__sflush_r+0x4a>
 80076b4:	0793      	lsls	r3, r2, #30
 80076b6:	680e      	ldr	r6, [r1, #0]
 80076b8:	bf08      	it	eq
 80076ba:	694b      	ldreq	r3, [r1, #20]
 80076bc:	600f      	str	r7, [r1, #0]
 80076be:	bf18      	it	ne
 80076c0:	2300      	movne	r3, #0
 80076c2:	ebc7 0806 	rsb	r8, r7, r6
 80076c6:	608b      	str	r3, [r1, #8]
 80076c8:	e002      	b.n	80076d0 <__sflush_r+0xe4>
 80076ca:	4407      	add	r7, r0
 80076cc:	ebc0 0808 	rsb	r8, r0, r8
 80076d0:	f1b8 0f00 	cmp.w	r8, #0
 80076d4:	ddaf      	ble.n	8007636 <__sflush_r+0x4a>
 80076d6:	4643      	mov	r3, r8
 80076d8:	463a      	mov	r2, r7
 80076da:	6a21      	ldr	r1, [r4, #32]
 80076dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076de:	4628      	mov	r0, r5
 80076e0:	47b0      	blx	r6
 80076e2:	2800      	cmp	r0, #0
 80076e4:	dcf1      	bgt.n	80076ca <__sflush_r+0xde>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295
 80076f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f6:	bf00      	nop
 80076f8:	20400001 	.word	0x20400001

080076fc <_fflush_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	690b      	ldr	r3, [r1, #16]
 8007700:	4605      	mov	r5, r0
 8007702:	460c      	mov	r4, r1
 8007704:	b1db      	cbz	r3, 800773e <_fflush_r+0x42>
 8007706:	b118      	cbz	r0, 8007710 <_fflush_r+0x14>
 8007708:	6983      	ldr	r3, [r0, #24]
 800770a:	b90b      	cbnz	r3, 8007710 <_fflush_r+0x14>
 800770c:	f000 f860 	bl	80077d0 <__sinit>
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <_fflush_r+0x48>)
 8007712:	429c      	cmp	r4, r3
 8007714:	d101      	bne.n	800771a <_fflush_r+0x1e>
 8007716:	686c      	ldr	r4, [r5, #4]
 8007718:	e008      	b.n	800772c <_fflush_r+0x30>
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <_fflush_r+0x4c>)
 800771c:	429c      	cmp	r4, r3
 800771e:	d101      	bne.n	8007724 <_fflush_r+0x28>
 8007720:	68ac      	ldr	r4, [r5, #8]
 8007722:	e003      	b.n	800772c <_fflush_r+0x30>
 8007724:	4b09      	ldr	r3, [pc, #36]	; (800774c <_fflush_r+0x50>)
 8007726:	429c      	cmp	r4, r3
 8007728:	bf08      	it	eq
 800772a:	68ec      	ldreq	r4, [r5, #12]
 800772c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007730:	b12b      	cbz	r3, 800773e <_fflush_r+0x42>
 8007732:	4621      	mov	r1, r4
 8007734:	4628      	mov	r0, r5
 8007736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800773a:	f7ff bf57 	b.w	80075ec <__sflush_r>
 800773e:	2000      	movs	r0, #0
 8007740:	bd38      	pop	{r3, r4, r5, pc}
 8007742:	bf00      	nop
 8007744:	0800814c 	.word	0x0800814c
 8007748:	0800816c 	.word	0x0800816c
 800774c:	0800818c 	.word	0x0800818c

08007750 <_cleanup_r>:
 8007750:	4901      	ldr	r1, [pc, #4]	; (8007758 <_cleanup_r+0x8>)
 8007752:	f000 b8a9 	b.w	80078a8 <_fwalk_reent>
 8007756:	bf00      	nop
 8007758:	080076fd 	.word	0x080076fd

0800775c <std.isra.0>:
 800775c:	2300      	movs	r3, #0
 800775e:	b510      	push	{r4, lr}
 8007760:	4604      	mov	r4, r0
 8007762:	6003      	str	r3, [r0, #0]
 8007764:	6043      	str	r3, [r0, #4]
 8007766:	6083      	str	r3, [r0, #8]
 8007768:	8181      	strh	r1, [r0, #12]
 800776a:	6643      	str	r3, [r0, #100]	; 0x64
 800776c:	81c2      	strh	r2, [r0, #14]
 800776e:	6103      	str	r3, [r0, #16]
 8007770:	6143      	str	r3, [r0, #20]
 8007772:	6183      	str	r3, [r0, #24]
 8007774:	4619      	mov	r1, r3
 8007776:	2208      	movs	r2, #8
 8007778:	305c      	adds	r0, #92	; 0x5c
 800777a:	f7ff fa24 	bl	8006bc6 <memset>
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <std.isra.0+0x38>)
 8007780:	6263      	str	r3, [r4, #36]	; 0x24
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <std.isra.0+0x3c>)
 8007784:	62a3      	str	r3, [r4, #40]	; 0x28
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <std.isra.0+0x40>)
 8007788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800778a:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <std.isra.0+0x44>)
 800778c:	6224      	str	r4, [r4, #32]
 800778e:	6323      	str	r3, [r4, #48]	; 0x30
 8007790:	bd10      	pop	{r4, pc}
 8007792:	bf00      	nop
 8007794:	08007cc5 	.word	0x08007cc5
 8007798:	08007ce7 	.word	0x08007ce7
 800779c:	08007d1f 	.word	0x08007d1f
 80077a0:	08007d43 	.word	0x08007d43

080077a4 <__sfmoreglue>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	2368      	movs	r3, #104	; 0x68
 80077a8:	1e4d      	subs	r5, r1, #1
 80077aa:	435d      	muls	r5, r3
 80077ac:	460e      	mov	r6, r1
 80077ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077b2:	f7ff fa5f 	bl	8006c74 <_malloc_r>
 80077b6:	4604      	mov	r4, r0
 80077b8:	b140      	cbz	r0, 80077cc <__sfmoreglue+0x28>
 80077ba:	2100      	movs	r1, #0
 80077bc:	e880 0042 	stmia.w	r0, {r1, r6}
 80077c0:	300c      	adds	r0, #12
 80077c2:	60a0      	str	r0, [r4, #8]
 80077c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077c8:	f7ff f9fd 	bl	8006bc6 <memset>
 80077cc:	4620      	mov	r0, r4
 80077ce:	bd70      	pop	{r4, r5, r6, pc}

080077d0 <__sinit>:
 80077d0:	6983      	ldr	r3, [r0, #24]
 80077d2:	b510      	push	{r4, lr}
 80077d4:	4604      	mov	r4, r0
 80077d6:	bb33      	cbnz	r3, 8007826 <__sinit+0x56>
 80077d8:	6483      	str	r3, [r0, #72]	; 0x48
 80077da:	64c3      	str	r3, [r0, #76]	; 0x4c
 80077dc:	6503      	str	r3, [r0, #80]	; 0x50
 80077de:	4b12      	ldr	r3, [pc, #72]	; (8007828 <__sinit+0x58>)
 80077e0:	4a12      	ldr	r2, [pc, #72]	; (800782c <__sinit+0x5c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6282      	str	r2, [r0, #40]	; 0x28
 80077e6:	4298      	cmp	r0, r3
 80077e8:	bf04      	itt	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	6183      	streq	r3, [r0, #24]
 80077ee:	f000 f81f 	bl	8007830 <__sfp>
 80077f2:	6060      	str	r0, [r4, #4]
 80077f4:	4620      	mov	r0, r4
 80077f6:	f000 f81b 	bl	8007830 <__sfp>
 80077fa:	60a0      	str	r0, [r4, #8]
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 f817 	bl	8007830 <__sfp>
 8007802:	2200      	movs	r2, #0
 8007804:	60e0      	str	r0, [r4, #12]
 8007806:	2104      	movs	r1, #4
 8007808:	6860      	ldr	r0, [r4, #4]
 800780a:	f7ff ffa7 	bl	800775c <std.isra.0>
 800780e:	2201      	movs	r2, #1
 8007810:	2109      	movs	r1, #9
 8007812:	68a0      	ldr	r0, [r4, #8]
 8007814:	f7ff ffa2 	bl	800775c <std.isra.0>
 8007818:	2202      	movs	r2, #2
 800781a:	2112      	movs	r1, #18
 800781c:	68e0      	ldr	r0, [r4, #12]
 800781e:	f7ff ff9d 	bl	800775c <std.isra.0>
 8007822:	2301      	movs	r3, #1
 8007824:	61a3      	str	r3, [r4, #24]
 8007826:	bd10      	pop	{r4, pc}
 8007828:	08008114 	.word	0x08008114
 800782c:	08007751 	.word	0x08007751

08007830 <__sfp>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	4b1c      	ldr	r3, [pc, #112]	; (80078a4 <__sfp+0x74>)
 8007834:	681e      	ldr	r6, [r3, #0]
 8007836:	69b3      	ldr	r3, [r6, #24]
 8007838:	4607      	mov	r7, r0
 800783a:	b913      	cbnz	r3, 8007842 <__sfp+0x12>
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff ffc7 	bl	80077d0 <__sinit>
 8007842:	3648      	adds	r6, #72	; 0x48
 8007844:	68b4      	ldr	r4, [r6, #8]
 8007846:	6873      	ldr	r3, [r6, #4]
 8007848:	3b01      	subs	r3, #1
 800784a:	d404      	bmi.n	8007856 <__sfp+0x26>
 800784c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007850:	b17d      	cbz	r5, 8007872 <__sfp+0x42>
 8007852:	3468      	adds	r4, #104	; 0x68
 8007854:	e7f8      	b.n	8007848 <__sfp+0x18>
 8007856:	6833      	ldr	r3, [r6, #0]
 8007858:	b10b      	cbz	r3, 800785e <__sfp+0x2e>
 800785a:	6836      	ldr	r6, [r6, #0]
 800785c:	e7f2      	b.n	8007844 <__sfp+0x14>
 800785e:	2104      	movs	r1, #4
 8007860:	4638      	mov	r0, r7
 8007862:	f7ff ff9f 	bl	80077a4 <__sfmoreglue>
 8007866:	6030      	str	r0, [r6, #0]
 8007868:	2800      	cmp	r0, #0
 800786a:	d1f6      	bne.n	800785a <__sfp+0x2a>
 800786c:	230c      	movs	r3, #12
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007876:	81e3      	strh	r3, [r4, #14]
 8007878:	2301      	movs	r3, #1
 800787a:	81a3      	strh	r3, [r4, #12]
 800787c:	6665      	str	r5, [r4, #100]	; 0x64
 800787e:	6025      	str	r5, [r4, #0]
 8007880:	60a5      	str	r5, [r4, #8]
 8007882:	6065      	str	r5, [r4, #4]
 8007884:	6125      	str	r5, [r4, #16]
 8007886:	6165      	str	r5, [r4, #20]
 8007888:	61a5      	str	r5, [r4, #24]
 800788a:	2208      	movs	r2, #8
 800788c:	4629      	mov	r1, r5
 800788e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007892:	f7ff f998 	bl	8006bc6 <memset>
 8007896:	6365      	str	r5, [r4, #52]	; 0x34
 8007898:	63a5      	str	r5, [r4, #56]	; 0x38
 800789a:	64a5      	str	r5, [r4, #72]	; 0x48
 800789c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800789e:	4620      	mov	r0, r4
 80078a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a2:	bf00      	nop
 80078a4:	08008114 	.word	0x08008114

080078a8 <_fwalk_reent>:
 80078a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ac:	4680      	mov	r8, r0
 80078ae:	4689      	mov	r9, r1
 80078b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078b4:	2600      	movs	r6, #0
 80078b6:	b194      	cbz	r4, 80078de <_fwalk_reent+0x36>
 80078b8:	68a5      	ldr	r5, [r4, #8]
 80078ba:	6867      	ldr	r7, [r4, #4]
 80078bc:	3f01      	subs	r7, #1
 80078be:	d40c      	bmi.n	80078da <_fwalk_reent+0x32>
 80078c0:	89ab      	ldrh	r3, [r5, #12]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d907      	bls.n	80078d6 <_fwalk_reent+0x2e>
 80078c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078ca:	3301      	adds	r3, #1
 80078cc:	d003      	beq.n	80078d6 <_fwalk_reent+0x2e>
 80078ce:	4629      	mov	r1, r5
 80078d0:	4640      	mov	r0, r8
 80078d2:	47c8      	blx	r9
 80078d4:	4306      	orrs	r6, r0
 80078d6:	3568      	adds	r5, #104	; 0x68
 80078d8:	e7f0      	b.n	80078bc <_fwalk_reent+0x14>
 80078da:	6824      	ldr	r4, [r4, #0]
 80078dc:	e7eb      	b.n	80078b6 <_fwalk_reent+0xe>
 80078de:	4630      	mov	r0, r6
 80078e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080078e4 <__swhatbuf_r>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	460e      	mov	r6, r1
 80078e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ec:	2900      	cmp	r1, #0
 80078ee:	b090      	sub	sp, #64	; 0x40
 80078f0:	4614      	mov	r4, r2
 80078f2:	461d      	mov	r5, r3
 80078f4:	da06      	bge.n	8007904 <__swhatbuf_r+0x20>
 80078f6:	2300      	movs	r3, #0
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	89b3      	ldrh	r3, [r6, #12]
 80078fc:	061a      	lsls	r2, r3, #24
 80078fe:	d50e      	bpl.n	800791e <__swhatbuf_r+0x3a>
 8007900:	2340      	movs	r3, #64	; 0x40
 8007902:	e00e      	b.n	8007922 <__swhatbuf_r+0x3e>
 8007904:	aa01      	add	r2, sp, #4
 8007906:	f000 fa43 	bl	8007d90 <_fstat_r>
 800790a:	2800      	cmp	r0, #0
 800790c:	dbf3      	blt.n	80078f6 <__swhatbuf_r+0x12>
 800790e:	9a02      	ldr	r2, [sp, #8]
 8007910:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007914:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007918:	425a      	negs	r2, r3
 800791a:	415a      	adcs	r2, r3
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007922:	2000      	movs	r0, #0
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	b010      	add	sp, #64	; 0x40
 8007928:	bd70      	pop	{r4, r5, r6, pc}
	...

0800792c <__smakebuf_r>:
 800792c:	898b      	ldrh	r3, [r1, #12]
 800792e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007930:	079e      	lsls	r6, r3, #30
 8007932:	4605      	mov	r5, r0
 8007934:	460c      	mov	r4, r1
 8007936:	d410      	bmi.n	800795a <__smakebuf_r+0x2e>
 8007938:	ab01      	add	r3, sp, #4
 800793a:	466a      	mov	r2, sp
 800793c:	f7ff ffd2 	bl	80078e4 <__swhatbuf_r>
 8007940:	9900      	ldr	r1, [sp, #0]
 8007942:	4606      	mov	r6, r0
 8007944:	4628      	mov	r0, r5
 8007946:	f7ff f995 	bl	8006c74 <_malloc_r>
 800794a:	b968      	cbnz	r0, 8007968 <__smakebuf_r+0x3c>
 800794c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007950:	059a      	lsls	r2, r3, #22
 8007952:	d422      	bmi.n	800799a <__smakebuf_r+0x6e>
 8007954:	f043 0302 	orr.w	r3, r3, #2
 8007958:	81a3      	strh	r3, [r4, #12]
 800795a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800795e:	6023      	str	r3, [r4, #0]
 8007960:	6123      	str	r3, [r4, #16]
 8007962:	2301      	movs	r3, #1
 8007964:	6163      	str	r3, [r4, #20]
 8007966:	e018      	b.n	800799a <__smakebuf_r+0x6e>
 8007968:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <__smakebuf_r+0x74>)
 800796a:	62ab      	str	r3, [r5, #40]	; 0x28
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	6020      	str	r0, [r4, #0]
 8007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007974:	81a3      	strh	r3, [r4, #12]
 8007976:	9b00      	ldr	r3, [sp, #0]
 8007978:	6163      	str	r3, [r4, #20]
 800797a:	9b01      	ldr	r3, [sp, #4]
 800797c:	6120      	str	r0, [r4, #16]
 800797e:	b14b      	cbz	r3, 8007994 <__smakebuf_r+0x68>
 8007980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007984:	4628      	mov	r0, r5
 8007986:	f000 fa15 	bl	8007db4 <_isatty_r>
 800798a:	b118      	cbz	r0, 8007994 <__smakebuf_r+0x68>
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	f043 0301 	orr.w	r3, r3, #1
 8007992:	81a3      	strh	r3, [r4, #12]
 8007994:	89a0      	ldrh	r0, [r4, #12]
 8007996:	4330      	orrs	r0, r6
 8007998:	81a0      	strh	r0, [r4, #12]
 800799a:	b002      	add	sp, #8
 800799c:	bd70      	pop	{r4, r5, r6, pc}
 800799e:	bf00      	nop
 80079a0:	08007751 	.word	0x08007751

080079a4 <memmove>:
 80079a4:	4288      	cmp	r0, r1
 80079a6:	b510      	push	{r4, lr}
 80079a8:	eb01 0302 	add.w	r3, r1, r2
 80079ac:	d801      	bhi.n	80079b2 <memmove+0xe>
 80079ae:	1e42      	subs	r2, r0, #1
 80079b0:	e00b      	b.n	80079ca <memmove+0x26>
 80079b2:	4298      	cmp	r0, r3
 80079b4:	d2fb      	bcs.n	80079ae <memmove+0xa>
 80079b6:	1881      	adds	r1, r0, r2
 80079b8:	1ad2      	subs	r2, r2, r3
 80079ba:	42d3      	cmn	r3, r2
 80079bc:	d004      	beq.n	80079c8 <memmove+0x24>
 80079be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80079c6:	e7f8      	b.n	80079ba <memmove+0x16>
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	4299      	cmp	r1, r3
 80079cc:	d004      	beq.n	80079d8 <memmove+0x34>
 80079ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80079d6:	e7f8      	b.n	80079ca <memmove+0x26>
 80079d8:	bd10      	pop	{r4, pc}

080079da <__malloc_lock>:
 80079da:	4770      	bx	lr

080079dc <__malloc_unlock>:
 80079dc:	4770      	bx	lr

080079de <_realloc_r>:
 80079de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e0:	4607      	mov	r7, r0
 80079e2:	4615      	mov	r5, r2
 80079e4:	460e      	mov	r6, r1
 80079e6:	b921      	cbnz	r1, 80079f2 <_realloc_r+0x14>
 80079e8:	4611      	mov	r1, r2
 80079ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079ee:	f7ff b941 	b.w	8006c74 <_malloc_r>
 80079f2:	b91a      	cbnz	r2, 80079fc <_realloc_r+0x1e>
 80079f4:	f7ff f8f0 	bl	8006bd8 <_free_r>
 80079f8:	4628      	mov	r0, r5
 80079fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079fc:	f000 f9fc 	bl	8007df8 <_malloc_usable_size_r>
 8007a00:	4285      	cmp	r5, r0
 8007a02:	d90e      	bls.n	8007a22 <_realloc_r+0x44>
 8007a04:	4629      	mov	r1, r5
 8007a06:	4638      	mov	r0, r7
 8007a08:	f7ff f934 	bl	8006c74 <_malloc_r>
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	b150      	cbz	r0, 8007a26 <_realloc_r+0x48>
 8007a10:	4631      	mov	r1, r6
 8007a12:	462a      	mov	r2, r5
 8007a14:	f7ff f8cc 	bl	8006bb0 <memcpy>
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	f7ff f8dc 	bl	8006bd8 <_free_r>
 8007a20:	e001      	b.n	8007a26 <_realloc_r+0x48>
 8007a22:	4630      	mov	r0, r6
 8007a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a26:	4620      	mov	r0, r4
 8007a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a2a <__ssputs_r>:
 8007a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2e:	688e      	ldr	r6, [r1, #8]
 8007a30:	429e      	cmp	r6, r3
 8007a32:	4682      	mov	sl, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	4691      	mov	r9, r2
 8007a38:	4698      	mov	r8, r3
 8007a3a:	d83e      	bhi.n	8007aba <__ssputs_r+0x90>
 8007a3c:	898a      	ldrh	r2, [r1, #12]
 8007a3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a42:	d03a      	beq.n	8007aba <__ssputs_r+0x90>
 8007a44:	6825      	ldr	r5, [r4, #0]
 8007a46:	6909      	ldr	r1, [r1, #16]
 8007a48:	1a6f      	subs	r7, r5, r1
 8007a4a:	6965      	ldr	r5, [r4, #20]
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a52:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a56:	1c7b      	adds	r3, r7, #1
 8007a58:	4443      	add	r3, r8
 8007a5a:	429d      	cmp	r5, r3
 8007a5c:	bf38      	it	cc
 8007a5e:	461d      	movcc	r5, r3
 8007a60:	0553      	lsls	r3, r2, #21
 8007a62:	d50f      	bpl.n	8007a84 <__ssputs_r+0x5a>
 8007a64:	4629      	mov	r1, r5
 8007a66:	f7ff f905 	bl	8006c74 <_malloc_r>
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	b198      	cbz	r0, 8007a96 <__ssputs_r+0x6c>
 8007a6e:	463a      	mov	r2, r7
 8007a70:	6921      	ldr	r1, [r4, #16]
 8007a72:	f7ff f89d 	bl	8006bb0 <memcpy>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	e013      	b.n	8007aac <__ssputs_r+0x82>
 8007a84:	462a      	mov	r2, r5
 8007a86:	f7ff ffaa 	bl	80079de <_realloc_r>
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	b970      	cbnz	r0, 8007aac <__ssputs_r+0x82>
 8007a8e:	6921      	ldr	r1, [r4, #16]
 8007a90:	4650      	mov	r0, sl
 8007a92:	f7ff f8a1 	bl	8006bd8 <_free_r>
 8007a96:	230c      	movs	r3, #12
 8007a98:	f8ca 3000 	str.w	r3, [sl]
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aac:	6126      	str	r6, [r4, #16]
 8007aae:	6165      	str	r5, [r4, #20]
 8007ab0:	443e      	add	r6, r7
 8007ab2:	1bed      	subs	r5, r5, r7
 8007ab4:	6026      	str	r6, [r4, #0]
 8007ab6:	60a5      	str	r5, [r4, #8]
 8007ab8:	4646      	mov	r6, r8
 8007aba:	4546      	cmp	r6, r8
 8007abc:	bf28      	it	cs
 8007abe:	4646      	movcs	r6, r8
 8007ac0:	4632      	mov	r2, r6
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	6820      	ldr	r0, [r4, #0]
 8007ac6:	f7ff ff6d 	bl	80079a4 <memmove>
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	1b9b      	subs	r3, r3, r6
 8007ace:	60a3      	str	r3, [r4, #8]
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	441e      	add	r6, r3
 8007ad4:	6026      	str	r6, [r4, #0]
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007adc <_svfiprintf_r>:
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	b09d      	sub	sp, #116	; 0x74
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	9303      	str	r3, [sp, #12]
 8007ae6:	898b      	ldrh	r3, [r1, #12]
 8007ae8:	061c      	lsls	r4, r3, #24
 8007aea:	460d      	mov	r5, r1
 8007aec:	4616      	mov	r6, r2
 8007aee:	d50d      	bpl.n	8007b0c <_svfiprintf_r+0x30>
 8007af0:	690b      	ldr	r3, [r1, #16]
 8007af2:	b95b      	cbnz	r3, 8007b0c <_svfiprintf_r+0x30>
 8007af4:	2140      	movs	r1, #64	; 0x40
 8007af6:	f7ff f8bd 	bl	8006c74 <_malloc_r>
 8007afa:	6028      	str	r0, [r5, #0]
 8007afc:	6128      	str	r0, [r5, #16]
 8007afe:	b918      	cbnz	r0, 8007b08 <_svfiprintf_r+0x2c>
 8007b00:	230c      	movs	r3, #12
 8007b02:	f8c8 3000 	str.w	r3, [r8]
 8007b06:	e0cd      	b.n	8007ca4 <_svfiprintf_r+0x1c8>
 8007b08:	2340      	movs	r3, #64	; 0x40
 8007b0a:	616b      	str	r3, [r5, #20]
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b10:	2320      	movs	r3, #32
 8007b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b16:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8007cb4 <_svfiprintf_r+0x1d8>
 8007b1a:	2330      	movs	r3, #48	; 0x30
 8007b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b20:	4637      	mov	r7, r6
 8007b22:	463c      	mov	r4, r7
 8007b24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b28:	b91b      	cbnz	r3, 8007b32 <_svfiprintf_r+0x56>
 8007b2a:	ebb7 0906 	subs.w	r9, r7, r6
 8007b2e:	d010      	beq.n	8007b52 <_svfiprintf_r+0x76>
 8007b30:	e003      	b.n	8007b3a <_svfiprintf_r+0x5e>
 8007b32:	2b25      	cmp	r3, #37	; 0x25
 8007b34:	d0f9      	beq.n	8007b2a <_svfiprintf_r+0x4e>
 8007b36:	4627      	mov	r7, r4
 8007b38:	e7f3      	b.n	8007b22 <_svfiprintf_r+0x46>
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	4629      	mov	r1, r5
 8007b40:	4640      	mov	r0, r8
 8007b42:	f7ff ff72 	bl	8007a2a <__ssputs_r>
 8007b46:	3001      	adds	r0, #1
 8007b48:	f000 80a7 	beq.w	8007c9a <_svfiprintf_r+0x1be>
 8007b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4e:	444b      	add	r3, r9
 8007b50:	9309      	str	r3, [sp, #36]	; 0x24
 8007b52:	783b      	ldrb	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80a0 	beq.w	8007c9a <_svfiprintf_r+0x1be>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	9307      	str	r3, [sp, #28]
 8007b64:	9205      	str	r2, [sp, #20]
 8007b66:	9306      	str	r3, [sp, #24]
 8007b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b6e:	2601      	movs	r6, #1
 8007b70:	2205      	movs	r2, #5
 8007b72:	7821      	ldrb	r1, [r4, #0]
 8007b74:	484e      	ldr	r0, [pc, #312]	; (8007cb0 <_svfiprintf_r+0x1d4>)
 8007b76:	f7f8 fb4b 	bl	8000210 <memchr>
 8007b7a:	1c67      	adds	r7, r4, #1
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	b138      	cbz	r0, 8007b90 <_svfiprintf_r+0xb4>
 8007b80:	4a4b      	ldr	r2, [pc, #300]	; (8007cb0 <_svfiprintf_r+0x1d4>)
 8007b82:	1a80      	subs	r0, r0, r2
 8007b84:	fa06 f000 	lsl.w	r0, r6, r0
 8007b88:	4318      	orrs	r0, r3
 8007b8a:	9004      	str	r0, [sp, #16]
 8007b8c:	463c      	mov	r4, r7
 8007b8e:	e7ef      	b.n	8007b70 <_svfiprintf_r+0x94>
 8007b90:	06d9      	lsls	r1, r3, #27
 8007b92:	bf44      	itt	mi
 8007b94:	2220      	movmi	r2, #32
 8007b96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b9a:	071a      	lsls	r2, r3, #28
 8007b9c:	bf44      	itt	mi
 8007b9e:	222b      	movmi	r2, #43	; 0x2b
 8007ba0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ba4:	7822      	ldrb	r2, [r4, #0]
 8007ba6:	2a2a      	cmp	r2, #42	; 0x2a
 8007ba8:	d003      	beq.n	8007bb2 <_svfiprintf_r+0xd6>
 8007baa:	9a07      	ldr	r2, [sp, #28]
 8007bac:	2100      	movs	r1, #0
 8007bae:	200a      	movs	r0, #10
 8007bb0:	e00b      	b.n	8007bca <_svfiprintf_r+0xee>
 8007bb2:	9a03      	ldr	r2, [sp, #12]
 8007bb4:	1d11      	adds	r1, r2, #4
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	9103      	str	r1, [sp, #12]
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	da10      	bge.n	8007be0 <_svfiprintf_r+0x104>
 8007bbe:	4252      	negs	r2, r2
 8007bc0:	f043 0002 	orr.w	r0, r3, #2
 8007bc4:	9207      	str	r2, [sp, #28]
 8007bc6:	9004      	str	r0, [sp, #16]
 8007bc8:	e00b      	b.n	8007be2 <_svfiprintf_r+0x106>
 8007bca:	4627      	mov	r7, r4
 8007bcc:	3401      	adds	r4, #1
 8007bce:	783b      	ldrb	r3, [r7, #0]
 8007bd0:	3b30      	subs	r3, #48	; 0x30
 8007bd2:	2b09      	cmp	r3, #9
 8007bd4:	d803      	bhi.n	8007bde <_svfiprintf_r+0x102>
 8007bd6:	fb00 3202 	mla	r2, r0, r2, r3
 8007bda:	2101      	movs	r1, #1
 8007bdc:	e7f5      	b.n	8007bca <_svfiprintf_r+0xee>
 8007bde:	b101      	cbz	r1, 8007be2 <_svfiprintf_r+0x106>
 8007be0:	9207      	str	r2, [sp, #28]
 8007be2:	783b      	ldrb	r3, [r7, #0]
 8007be4:	2b2e      	cmp	r3, #46	; 0x2e
 8007be6:	d11e      	bne.n	8007c26 <_svfiprintf_r+0x14a>
 8007be8:	787b      	ldrb	r3, [r7, #1]
 8007bea:	2b2a      	cmp	r3, #42	; 0x2a
 8007bec:	d10a      	bne.n	8007c04 <_svfiprintf_r+0x128>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	1d1a      	adds	r2, r3, #4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	9203      	str	r2, [sp, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfb8      	it	lt
 8007bfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bfe:	3702      	adds	r7, #2
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	e010      	b.n	8007c26 <_svfiprintf_r+0x14a>
 8007c04:	2300      	movs	r3, #0
 8007c06:	9305      	str	r3, [sp, #20]
 8007c08:	1c78      	adds	r0, r7, #1
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	240a      	movs	r4, #10
 8007c0e:	4607      	mov	r7, r0
 8007c10:	3001      	adds	r0, #1
 8007c12:	783a      	ldrb	r2, [r7, #0]
 8007c14:	3a30      	subs	r2, #48	; 0x30
 8007c16:	2a09      	cmp	r2, #9
 8007c18:	d803      	bhi.n	8007c22 <_svfiprintf_r+0x146>
 8007c1a:	fb04 2101 	mla	r1, r4, r1, r2
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e7f5      	b.n	8007c0e <_svfiprintf_r+0x132>
 8007c22:	b103      	cbz	r3, 8007c26 <_svfiprintf_r+0x14a>
 8007c24:	9105      	str	r1, [sp, #20]
 8007c26:	2203      	movs	r2, #3
 8007c28:	7839      	ldrb	r1, [r7, #0]
 8007c2a:	4822      	ldr	r0, [pc, #136]	; (8007cb4 <_svfiprintf_r+0x1d8>)
 8007c2c:	f7f8 faf0 	bl	8000210 <memchr>
 8007c30:	b140      	cbz	r0, 8007c44 <_svfiprintf_r+0x168>
 8007c32:	2340      	movs	r3, #64	; 0x40
 8007c34:	ebcb 0000 	rsb	r0, fp, r0
 8007c38:	fa03 f000 	lsl.w	r0, r3, r0
 8007c3c:	9b04      	ldr	r3, [sp, #16]
 8007c3e:	4318      	orrs	r0, r3
 8007c40:	9004      	str	r0, [sp, #16]
 8007c42:	3701      	adds	r7, #1
 8007c44:	7839      	ldrb	r1, [r7, #0]
 8007c46:	481c      	ldr	r0, [pc, #112]	; (8007cb8 <_svfiprintf_r+0x1dc>)
 8007c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c4c:	2206      	movs	r2, #6
 8007c4e:	1c7e      	adds	r6, r7, #1
 8007c50:	f7f8 fade 	bl	8000210 <memchr>
 8007c54:	b188      	cbz	r0, 8007c7a <_svfiprintf_r+0x19e>
 8007c56:	4b19      	ldr	r3, [pc, #100]	; (8007cbc <_svfiprintf_r+0x1e0>)
 8007c58:	b933      	cbnz	r3, 8007c68 <_svfiprintf_r+0x18c>
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	3307      	adds	r3, #7
 8007c5e:	f023 0307 	bic.w	r3, r3, #7
 8007c62:	3308      	adds	r3, #8
 8007c64:	9303      	str	r3, [sp, #12]
 8007c66:	e014      	b.n	8007c92 <_svfiprintf_r+0x1b6>
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	4b14      	ldr	r3, [pc, #80]	; (8007cc0 <_svfiprintf_r+0x1e4>)
 8007c70:	a904      	add	r1, sp, #16
 8007c72:	4640      	mov	r0, r8
 8007c74:	f3af 8000 	nop.w
 8007c78:	e007      	b.n	8007c8a <_svfiprintf_r+0x1ae>
 8007c7a:	ab03      	add	r3, sp, #12
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <_svfiprintf_r+0x1e4>)
 8007c82:	a904      	add	r1, sp, #16
 8007c84:	4640      	mov	r0, r8
 8007c86:	f7ff fa0f 	bl	80070a8 <_printf_i>
 8007c8a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c8e:	4682      	mov	sl, r0
 8007c90:	d003      	beq.n	8007c9a <_svfiprintf_r+0x1be>
 8007c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c94:	4453      	add	r3, sl
 8007c96:	9309      	str	r3, [sp, #36]	; 0x24
 8007c98:	e742      	b.n	8007b20 <_svfiprintf_r+0x44>
 8007c9a:	89ab      	ldrh	r3, [r5, #12]
 8007c9c:	065b      	lsls	r3, r3, #25
 8007c9e:	d401      	bmi.n	8007ca4 <_svfiprintf_r+0x1c8>
 8007ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca2:	e001      	b.n	8007ca8 <_svfiprintf_r+0x1cc>
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	b01d      	add	sp, #116	; 0x74
 8007caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cae:	bf00      	nop
 8007cb0:	08008118 	.word	0x08008118
 8007cb4:	0800811e 	.word	0x0800811e
 8007cb8:	08008122 	.word	0x08008122
 8007cbc:	00000000 	.word	0x00000000
 8007cc0:	08007a2b 	.word	0x08007a2b

08007cc4 <__sread>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ccc:	f000 f89e 	bl	8007e0c <_read_r>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	bfab      	itete	ge
 8007cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8007cd8:	181b      	addge	r3, r3, r0
 8007cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cde:	bfac      	ite	ge
 8007ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ce2:	81a3      	strhlt	r3, [r4, #12]
 8007ce4:	bd10      	pop	{r4, pc}

08007ce6 <__swrite>:
 8007ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cea:	461f      	mov	r7, r3
 8007cec:	898b      	ldrh	r3, [r1, #12]
 8007cee:	05db      	lsls	r3, r3, #23
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	d505      	bpl.n	8007d04 <__swrite+0x1e>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d00:	f000 f868 	bl	8007dd4 <_lseek_r>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d0e:	81a3      	strh	r3, [r4, #12]
 8007d10:	4632      	mov	r2, r6
 8007d12:	463b      	mov	r3, r7
 8007d14:	4628      	mov	r0, r5
 8007d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1a:	f000 b817 	b.w	8007d4c <_write_r>

08007d1e <__sseek>:
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	460c      	mov	r4, r1
 8007d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d26:	f000 f855 	bl	8007dd4 <_lseek_r>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	bf15      	itete	ne
 8007d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d3a:	81a3      	strheq	r3, [r4, #12]
 8007d3c:	bf18      	it	ne
 8007d3e:	81a3      	strhne	r3, [r4, #12]
 8007d40:	bd10      	pop	{r4, pc}

08007d42 <__sclose>:
 8007d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d46:	f000 b813 	b.w	8007d70 <_close_r>
	...

08007d4c <_write_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4c07      	ldr	r4, [pc, #28]	; (8007d6c <_write_r+0x20>)
 8007d50:	4605      	mov	r5, r0
 8007d52:	4608      	mov	r0, r1
 8007d54:	4611      	mov	r1, r2
 8007d56:	2200      	movs	r2, #0
 8007d58:	6022      	str	r2, [r4, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f000 f8ae 	bl	8007ebc <_write>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_write_r+0x1e>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_write_r+0x1e>
 8007d68:	602b      	str	r3, [r5, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	20006394 	.word	0x20006394

08007d70 <_close_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4c06      	ldr	r4, [pc, #24]	; (8007d8c <_close_r+0x1c>)
 8007d74:	2300      	movs	r3, #0
 8007d76:	4605      	mov	r5, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	f000 f858 	bl	8007e30 <_close>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_close_r+0x1a>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_close_r+0x1a>
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	20006394 	.word	0x20006394

08007d90 <_fstat_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4c07      	ldr	r4, [pc, #28]	; (8007db0 <_fstat_r+0x20>)
 8007d94:	2300      	movs	r3, #0
 8007d96:	4605      	mov	r5, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	f000 f84f 	bl	8007e40 <_fstat>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d102      	bne.n	8007dac <_fstat_r+0x1c>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	b103      	cbz	r3, 8007dac <_fstat_r+0x1c>
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
 8007dae:	bf00      	nop
 8007db0:	20006394 	.word	0x20006394

08007db4 <_isatty_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4c06      	ldr	r4, [pc, #24]	; (8007dd0 <_isatty_r+0x1c>)
 8007db8:	2300      	movs	r3, #0
 8007dba:	4605      	mov	r5, r0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	f000 f84e 	bl	8007e60 <_isatty>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_isatty_r+0x1a>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_isatty_r+0x1a>
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	20006394 	.word	0x20006394

08007dd4 <_lseek_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4c07      	ldr	r4, [pc, #28]	; (8007df4 <_lseek_r+0x20>)
 8007dd8:	4605      	mov	r5, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	4611      	mov	r1, r2
 8007dde:	2200      	movs	r2, #0
 8007de0:	6022      	str	r2, [r4, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f000 f84c 	bl	8007e80 <_lseek>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_lseek_r+0x1e>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_lseek_r+0x1e>
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	20006394 	.word	0x20006394

08007df8 <_malloc_usable_size_r>:
 8007df8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	bfbe      	ittt	lt
 8007e00:	1809      	addlt	r1, r1, r0
 8007e02:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8007e06:	18c0      	addlt	r0, r0, r3
 8007e08:	3804      	subs	r0, #4
 8007e0a:	4770      	bx	lr

08007e0c <_read_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4c07      	ldr	r4, [pc, #28]	; (8007e2c <_read_r+0x20>)
 8007e10:	4605      	mov	r5, r0
 8007e12:	4608      	mov	r0, r1
 8007e14:	4611      	mov	r1, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	6022      	str	r2, [r4, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f000 f838 	bl	8007e90 <_read>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_read_r+0x1e>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_read_r+0x1e>
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20006394 	.word	0x20006394

08007e30 <_close>:
 8007e30:	4b02      	ldr	r3, [pc, #8]	; (8007e3c <_close+0xc>)
 8007e32:	2258      	movs	r2, #88	; 0x58
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3a:	4770      	bx	lr
 8007e3c:	20006394 	.word	0x20006394

08007e40 <_fstat>:
 8007e40:	4b02      	ldr	r3, [pc, #8]	; (8007e4c <_fstat+0xc>)
 8007e42:	2258      	movs	r2, #88	; 0x58
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4a:	4770      	bx	lr
 8007e4c:	20006394 	.word	0x20006394

08007e50 <_getpid>:
 8007e50:	4b02      	ldr	r3, [pc, #8]	; (8007e5c <_getpid+0xc>)
 8007e52:	2258      	movs	r2, #88	; 0x58
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5a:	4770      	bx	lr
 8007e5c:	20006394 	.word	0x20006394

08007e60 <_isatty>:
 8007e60:	4b02      	ldr	r3, [pc, #8]	; (8007e6c <_isatty+0xc>)
 8007e62:	2258      	movs	r2, #88	; 0x58
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	2000      	movs	r0, #0
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20006394 	.word	0x20006394

08007e70 <_kill>:
 8007e70:	4b02      	ldr	r3, [pc, #8]	; (8007e7c <_kill+0xc>)
 8007e72:	2258      	movs	r2, #88	; 0x58
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7a:	4770      	bx	lr
 8007e7c:	20006394 	.word	0x20006394

08007e80 <_lseek>:
 8007e80:	4b02      	ldr	r3, [pc, #8]	; (8007e8c <_lseek+0xc>)
 8007e82:	2258      	movs	r2, #88	; 0x58
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8a:	4770      	bx	lr
 8007e8c:	20006394 	.word	0x20006394

08007e90 <_read>:
 8007e90:	4b02      	ldr	r3, [pc, #8]	; (8007e9c <_read+0xc>)
 8007e92:	2258      	movs	r2, #88	; 0x58
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9a:	4770      	bx	lr
 8007e9c:	20006394 	.word	0x20006394

08007ea0 <_sbrk>:
 8007ea0:	4a04      	ldr	r2, [pc, #16]	; (8007eb4 <_sbrk+0x14>)
 8007ea2:	4905      	ldr	r1, [pc, #20]	; (8007eb8 <_sbrk+0x18>)
 8007ea4:	6813      	ldr	r3, [r2, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bf08      	it	eq
 8007eaa:	460b      	moveq	r3, r1
 8007eac:	4418      	add	r0, r3
 8007eae:	6010      	str	r0, [r2, #0]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	4770      	bx	lr
 8007eb4:	20004f2c 	.word	0x20004f2c
 8007eb8:	20006398 	.word	0x20006398

08007ebc <_write>:
 8007ebc:	4b02      	ldr	r3, [pc, #8]	; (8007ec8 <_write+0xc>)
 8007ebe:	2258      	movs	r2, #88	; 0x58
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec6:	4770      	bx	lr
 8007ec8:	20006394 	.word	0x20006394

08007ecc <_exit>:
 8007ecc:	e7fe      	b.n	8007ecc <_exit>
 8007ece:	bf00      	nop

08007ed0 <_init>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	bf00      	nop
 8007ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed6:	bc08      	pop	{r3}
 8007ed8:	469e      	mov	lr, r3
 8007eda:	4770      	bx	lr

08007edc <_fini>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	bf00      	nop
 8007ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee2:	bc08      	pop	{r3}
 8007ee4:	469e      	mov	lr, r3
 8007ee6:	4770      	bx	lr
