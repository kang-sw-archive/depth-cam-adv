
build/depscan-firmware-rtos.elf:     file format elf32-littlearm
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080062a5


Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072fc 	.word	0x080072fc

080001c4 <frame_dummy>:
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <frame_dummy+0x24>)
 80001c6:	b510      	push	{r4, lr}
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <frame_dummy+0x28>)
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <frame_dummy+0x2c>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	4808      	ldr	r0, [pc, #32]	; (80001f4 <frame_dummy+0x30>)
 80001d4:	6803      	ldr	r3, [r0, #0]
 80001d6:	b903      	cbnz	r3, 80001da <frame_dummy+0x16>
 80001d8:	bd10      	pop	{r4, pc}
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <frame_dummy+0x34>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d0fb      	beq.n	80001d8 <frame_dummy+0x14>
 80001e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001e4:	4718      	bx	r3
 80001e6:	bf00      	nop
 80001e8:	00000000 	.word	0x00000000
 80001ec:	200001e8 	.word	0x200001e8
 80001f0:	080072fc 	.word	0x080072fc
 80001f4:	200001e4 	.word	0x200001e4
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97e 	b.w	80005b4 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460e      	mov	r6, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9d08      	ldr	r5, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d150      	bne.n	8000382 <__udivmoddi4+0xb2>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96c      	bls.n	80003c0 <__udivmoddi4+0xf0>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0420 	rsb	r4, lr, #32
 80002f4:	fa20 f404 	lsr.w	r4, r0, r4
 80002f8:	fa01 f60e 	lsl.w	r6, r1, lr
 80002fc:	ea44 0c06 	orr.w	ip, r4, r6
 8000300:	fa02 f70e 	lsl.w	r7, r2, lr
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	fbbc f0f9 	udiv	r0, ip, r9
 8000312:	fa1f f887 	uxth.w	r8, r7
 8000316:	fb09 c610 	mls	r6, r9, r0, ip
 800031a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800031e:	fb00 f308 	mul.w	r3, r0, r8
 8000322:	42b3      	cmp	r3, r6
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x6a>
 8000326:	19f6      	adds	r6, r6, r7
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	f080 8122 	bcs.w	8000574 <__udivmoddi4+0x2a4>
 8000330:	42b3      	cmp	r3, r6
 8000332:	f240 811f 	bls.w	8000574 <__udivmoddi4+0x2a4>
 8000336:	3802      	subs	r0, #2
 8000338:	443e      	add	r6, r7
 800033a:	1af6      	subs	r6, r6, r3
 800033c:	b2a2      	uxth	r2, r4
 800033e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000342:	fb09 6613 	mls	r6, r9, r3, r6
 8000346:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800034a:	fb03 f808 	mul.w	r8, r3, r8
 800034e:	45a0      	cmp	r8, r4
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x96>
 8000352:	19e4      	adds	r4, r4, r7
 8000354:	f103 32ff 	add.w	r2, r3, #4294967295
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x2a0>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x2a0>
 8000362:	3b02      	subs	r3, #2
 8000364:	443c      	add	r4, r7
 8000366:	ebc8 0404 	rsb	r4, r8, r4
 800036a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	2d00      	cmp	r5, #0
 8000372:	d062      	beq.n	800043a <__udivmoddi4+0x16a>
 8000374:	fa24 f40e 	lsr.w	r4, r4, lr
 8000378:	2300      	movs	r3, #0
 800037a:	602c      	str	r4, [r5, #0]
 800037c:	606b      	str	r3, [r5, #4]
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0xc6>
 8000386:	2d00      	cmp	r5, #0
 8000388:	d055      	beq.n	8000436 <__udivmoddi4+0x166>
 800038a:	2100      	movs	r1, #0
 800038c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000390:	4608      	mov	r0, r1
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x1f0>
 80003a0:	42b3      	cmp	r3, r6
 80003a2:	d302      	bcc.n	80003aa <__udivmoddi4+0xda>
 80003a4:	4282      	cmp	r2, r0
 80003a6:	f200 80f8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 80003aa:	1a84      	subs	r4, r0, r2
 80003ac:	eb66 0603 	sbc.w	r6, r6, r3
 80003b0:	2001      	movs	r0, #1
 80003b2:	46b4      	mov	ip, r6
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d040      	beq.n	800043a <__udivmoddi4+0x16a>
 80003b8:	e885 1010 	stmia.w	r5, {r4, ip}
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	b912      	cbnz	r2, 80003c8 <__udivmoddi4+0xf8>
 80003c2:	2701      	movs	r7, #1
 80003c4:	fbb7 f7f2 	udiv	r7, r7, r2
 80003c8:	fab7 fe87 	clz	lr, r7
 80003cc:	f1be 0f00 	cmp.w	lr, #0
 80003d0:	d135      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d2:	1bf3      	subs	r3, r6, r7
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e2:	0c22      	lsrs	r2, r4, #16
 80003e4:	fb08 3610 	mls	r6, r8, r0, r3
 80003e8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80003ec:	fb0c f300 	mul.w	r3, ip, r0
 80003f0:	42b3      	cmp	r3, r6
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19f6      	adds	r6, r6, r7
 80003f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42b3      	cmp	r3, r6
 80003fe:	f200 80ce 	bhi.w	800059e <__udivmoddi4+0x2ce>
 8000402:	4610      	mov	r0, r2
 8000404:	1af6      	subs	r6, r6, r3
 8000406:	b2a2      	uxth	r2, r4
 8000408:	fbb6 f3f8 	udiv	r3, r6, r8
 800040c:	fb08 6613 	mls	r6, r8, r3, r6
 8000410:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000414:	fb0c fc03 	mul.w	ip, ip, r3
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b5 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 800042a:	4613      	mov	r3, r2
 800042c:	ebcc 0404 	rsb	r4, ip, r4
 8000430:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000434:	e79c      	b.n	8000370 <__udivmoddi4+0xa0>
 8000436:	4629      	mov	r1, r5
 8000438:	4628      	mov	r0, r5
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0120 	rsb	r1, lr, #32
 8000442:	fa06 f30e 	lsl.w	r3, r6, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f901 	lsr.w	r9, r0, r1
 800044e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000452:	40ce      	lsrs	r6, r1
 8000454:	ea49 0903 	orr.w	r9, r9, r3
 8000458:	fbb6 faf8 	udiv	sl, r6, r8
 800045c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000460:	fb08 661a 	mls	r6, r8, sl, r6
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800046c:	fb0a f20c 	mul.w	r2, sl, ip
 8000470:	429a      	cmp	r2, r3
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1be>
 8000478:	19db      	adds	r3, r3, r7
 800047a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800047e:	f080 8087 	bcs.w	8000590 <__udivmoddi4+0x2c0>
 8000482:	429a      	cmp	r2, r3
 8000484:	f240 8084 	bls.w	8000590 <__udivmoddi4+0x2c0>
 8000488:	f1aa 0a02 	sub.w	sl, sl, #2
 800048c:	443b      	add	r3, r7
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	fa1f f989 	uxth.w	r9, r9
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80004a0:	fb01 f60c 	mul.w	r6, r1, ip
 80004a4:	429e      	cmp	r6, r3
 80004a6:	d907      	bls.n	80004b8 <__udivmoddi4+0x1e8>
 80004a8:	19db      	adds	r3, r3, r7
 80004aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80004ae:	d26b      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 80004b0:	429e      	cmp	r6, r3
 80004b2:	d969      	bls.n	8000588 <__udivmoddi4+0x2b8>
 80004b4:	3902      	subs	r1, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1b9b      	subs	r3, r3, r6
 80004ba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80004be:	e78e      	b.n	80003de <__udivmoddi4+0x10e>
 80004c0:	f1c1 0e20 	rsb	lr, r1, #32
 80004c4:	fa22 f40e 	lsr.w	r4, r2, lr
 80004c8:	408b      	lsls	r3, r1
 80004ca:	4323      	orrs	r3, r4
 80004cc:	fa20 f70e 	lsr.w	r7, r0, lr
 80004d0:	fa06 f401 	lsl.w	r4, r6, r1
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	fa26 f60e 	lsr.w	r6, r6, lr
 80004dc:	433c      	orrs	r4, r7
 80004de:	fbb6 f9fc 	udiv	r9, r6, ip
 80004e2:	0c27      	lsrs	r7, r4, #16
 80004e4:	fb0c 6619 	mls	r6, ip, r9, r6
 80004e8:	fa1f f883 	uxth.w	r8, r3
 80004ec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80004f0:	fb09 f708 	mul.w	r7, r9, r8
 80004f4:	42b7      	cmp	r7, r6
 80004f6:	fa02 f201 	lsl.w	r2, r2, r1
 80004fa:	fa00 fa01 	lsl.w	sl, r0, r1
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x242>
 8000500:	18f6      	adds	r6, r6, r3
 8000502:	f109 30ff 	add.w	r0, r9, #4294967295
 8000506:	d241      	bcs.n	800058c <__udivmoddi4+0x2bc>
 8000508:	42b7      	cmp	r7, r6
 800050a:	d93f      	bls.n	800058c <__udivmoddi4+0x2bc>
 800050c:	f1a9 0902 	sub.w	r9, r9, #2
 8000510:	441e      	add	r6, r3
 8000512:	1bf6      	subs	r6, r6, r7
 8000514:	b2a0      	uxth	r0, r4
 8000516:	fbb6 f4fc 	udiv	r4, r6, ip
 800051a:	fb0c 6614 	mls	r6, ip, r4, r6
 800051e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000522:	fb04 f808 	mul.w	r8, r4, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x26a>
 800052a:	18ff      	adds	r7, r7, r3
 800052c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000530:	d228      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d926      	bls.n	8000584 <__udivmoddi4+0x2b4>
 8000536:	3c02      	subs	r4, #2
 8000538:	441f      	add	r7, r3
 800053a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800053e:	ebc8 0707 	rsb	r7, r8, r7
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	4644      	mov	r4, r8
 800054a:	464e      	mov	r6, r9
 800054c:	d314      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	d029      	beq.n	80005a4 <__udivmoddi4+0x2d4>
 8000550:	b365      	cbz	r5, 80005ac <__udivmoddi4+0x2dc>
 8000552:	ebba 0304 	subs.w	r3, sl, r4
 8000556:	eb67 0706 	sbc.w	r7, r7, r6
 800055a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800055e:	40cb      	lsrs	r3, r1
 8000560:	40cf      	lsrs	r7, r1
 8000562:	ea4e 0303 	orr.w	r3, lr, r3
 8000566:	e885 0088 	stmia.w	r5, {r3, r7}
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	4613      	mov	r3, r2
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x96>
 8000574:	4610      	mov	r0, r2
 8000576:	e6e0      	b.n	800033a <__udivmoddi4+0x6a>
 8000578:	ebb8 0402 	subs.w	r4, r8, r2
 800057c:	eb69 0603 	sbc.w	r6, r9, r3
 8000580:	3801      	subs	r0, #1
 8000582:	e7e5      	b.n	8000550 <__udivmoddi4+0x280>
 8000584:	4604      	mov	r4, r0
 8000586:	e7d8      	b.n	800053a <__udivmoddi4+0x26a>
 8000588:	4611      	mov	r1, r2
 800058a:	e795      	b.n	80004b8 <__udivmoddi4+0x1e8>
 800058c:	4681      	mov	r9, r0
 800058e:	e7c0      	b.n	8000512 <__udivmoddi4+0x242>
 8000590:	468a      	mov	sl, r1
 8000592:	e77c      	b.n	800048e <__udivmoddi4+0x1be>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e748      	b.n	800042c <__udivmoddi4+0x15c>
 800059a:	4608      	mov	r0, r1
 800059c:	e70a      	b.n	80003b4 <__udivmoddi4+0xe4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443e      	add	r6, r7
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x134>
 80005a4:	45c2      	cmp	sl, r8
 80005a6:	d3e7      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80005a8:	463e      	mov	r6, r7
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x280>
 80005ac:	4629      	mov	r1, r5
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005bc:	a808      	add	r0, sp, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	f005 ff0a 	bl	80063da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	2400      	movs	r4, #0

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <SystemClock_Config+0x94>)
 80005ca:	9401      	str	r4, [sp, #4]
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	9404      	str	r4, [sp, #16]
 80005ce:	9403      	str	r4, [sp, #12]
 80005d0:	9405      	str	r4, [sp, #20]
 80005d2:	9406      	str	r4, [sp, #24]
 80005d4:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d8:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <SystemClock_Config+0x98>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80005de:	6419      	str	r1, [r3, #64]	; 0x40
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005ea:	9402      	str	r4, [sp, #8]
 80005ec:	6813      	ldr	r3, [r2, #0]
 80005ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	6813      	ldr	r3, [r2, #0]
 80005fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fe:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2502      	movs	r5, #2
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 71a8 	mov.w	r1, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000614:	2204      	movs	r2, #4
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061a:	2307      	movs	r3, #7
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061c:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLN = 336;
 800061e:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000620:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000622:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000624:	9f02      	ldr	r7, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f001 ff6f 	bl	800250c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000634:	a803      	add	r0, sp, #12
 8000636:	4629      	mov	r1, r5
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	9407      	str	r4, [sp, #28]
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	9203      	str	r2, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000640:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000642:	f002 f97d 	bl	8002940 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000646:	b015      	add	sp, #84	; 0x54
 8000648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09a      	sub	sp, #104	; 0x68
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	4daa      	ldr	r5, [pc, #680]	; (8000904 <main+0x2b0>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800065c:	4eaa      	ldr	r6, [pc, #680]	; (8000908 <main+0x2b4>)
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800065e:	4fab      	ldr	r7, [pc, #684]	; (800090c <main+0x2b8>)
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f002 fcee 	bl	8003040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f7ff ffa8 	bl	80005b8 <SystemClock_Config>
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000668:	9401      	str	r4, [sp, #4]
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	9413      	str	r4, [sp, #76]	; 0x4c
 800066c:	9412      	str	r4, [sp, #72]	; 0x48
 800066e:	9414      	str	r4, [sp, #80]	; 0x50
 8000670:	9415      	str	r4, [sp, #84]	; 0x54
 8000672:	9416      	str	r4, [sp, #88]	; 0x58

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000674:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 8000676:	48a6      	ldr	r0, [pc, #664]	; (8000910 <main+0x2bc>)
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	632b      	str	r3, [r5, #48]	; 0x30
 800067e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000688:	9402      	str	r4, [sp, #8]
 800068a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	632b      	str	r3, [r5, #48]	; 0x30
 8000692:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	9403      	str	r4, [sp, #12]
 800069e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	632b      	str	r3, [r5, #48]	; 0x30
 80006a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	9303      	str	r3, [sp, #12]
 80006ae:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	9404      	str	r4, [sp, #16]
 80006b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	632b      	str	r3, [r5, #48]	; 0x30
 80006ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 80006c2:	4622      	mov	r2, r4
 80006c4:	2101      	movs	r1, #1

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 80006c8:	f002 faf6 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);
 80006cc:	4622      	mov	r2, r4
 80006ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80006d2:	4890      	ldr	r0, [pc, #576]	; (8000914 <main+0x2c0>)
 80006d4:	f002 faf0 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
 80006d8:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);
 80006dc:	a912      	add	r1, sp, #72	; 0x48
 80006de:	488c      	ldr	r0, [pc, #560]	; (8000910 <main+0x2bc>)
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
 80006e2:	f04f 0802 	mov.w	r8, #2

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	9415      	str	r4, [sp, #84]	; 0x54

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
 80006e8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f002 f9fa 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f4:	4b88      	ldr	r3, [pc, #544]	; (8000918 <main+0x2c4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80006f6:	4886      	ldr	r0, [pc, #536]	; (8000910 <main+0x2bc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f8:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80006fa:	a912      	add	r1, sp, #72	; 0x48
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
 80006fe:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000702:	f002 f9f1 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
  GPIO_InitStruct.Pin = MOT_DIR_1_Pin|MOT_DIR_2_Pin;
 8000706:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	a912      	add	r1, sp, #72	; 0x48
 800070c:	4881      	ldr	r0, [pc, #516]	; (8000914 <main+0x2c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
  GPIO_InitStruct.Pin = MOT_DIR_1_Pin|MOT_DIR_2_Pin;
 800070e:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f002 f9e6 	bl	8002ae8 <HAL_GPIO_Init>
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071c:	9400      	str	r4, [sp, #0]
 800071e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000724:	632b      	str	r3, [r5, #48]	; 0x30
 8000726:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800072c:	4622      	mov	r2, r4
 800072e:	2105      	movs	r1, #5
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000730:	9300      	str	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000732:	203a      	movs	r0, #58	; 0x3a
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000734:	9b00      	ldr	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000736:	f002 fc3d 	bl	8002fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800073a:	203a      	movs	r0, #58	; 0x3a
 800073c:	f002 fc72 	bl	8003024 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000740:	4622      	mov	r2, r4
 8000742:	2105      	movs	r1, #5
 8000744:	203b      	movs	r0, #59	; 0x3b
 8000746:	f002 fc35 	bl	8002fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800074a:	203b      	movs	r0, #59	; 0x3b
 800074c:	f002 fc6a 	bl	8003024 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000750:	2220      	movs	r2, #32
 8000752:	4621      	mov	r1, r4
 8000754:	a812      	add	r0, sp, #72	; 0x48

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075a:	940b      	str	r4, [sp, #44]	; 0x2c

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075c:	9408      	str	r4, [sp, #32]
 800075e:	9409      	str	r4, [sp, #36]	; 0x24
 8000760:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000762:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000764:	940c      	str	r4, [sp, #48]	; 0x30
 8000766:	940d      	str	r4, [sp, #52]	; 0x34
 8000768:	940e      	str	r4, [sp, #56]	; 0x38
 800076a:	940f      	str	r4, [sp, #60]	; 0x3c
 800076c:	9410      	str	r4, [sp, #64]	; 0x40
 800076e:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000770:	f005 fe33 	bl	80063da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000774:	4b69      	ldr	r3, [pc, #420]	; (800091c <main+0x2c8>)
 8000776:	6033      	str	r3, [r6, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000778:	4630      	mov	r0, r6
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
 800077e:	6074      	str	r4, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	60b4      	str	r4, [r6, #8]
  htim1.Init.Period = 0;
 8000782:	60f4      	str	r4, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8000786:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078a:	f002 fe2b 	bl	80033e4 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078e:	a907      	add	r1, sp, #28
 8000790:	4630      	mov	r0, r6
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000792:	f8cd a01c 	str.w	sl, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000796:	f002 fd23 	bl	80031e0 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079a:	4630      	mov	r0, r6
 800079c:	f002 fe5a 	bl	8003454 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a0:	a905      	add	r1, sp, #20
 80007a2:	4630      	mov	r0, r6
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a4:	2560      	movs	r5, #96	; 0x60
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a8:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007aa:	f002 ff37 	bl	800361c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ae:	4622      	mov	r2, r4
 80007b0:	a90b      	add	r1, sp, #44	; 0x2c
 80007b2:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	950b      	str	r5, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80007b6:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80007b8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007bc:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007be:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c0:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007c2:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c4:	f002 fec0 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c8:	a912      	add	r1, sp, #72	; 0x48
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ce:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007d0:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d2:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d4:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d6:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d8:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007da:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007dc:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007de:	f002 ff5b 	bl	8003698 <HAL_TIMEx_ConfigBreakDeadTime>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007e2:	4630      	mov	r0, r6
 80007e4:	f000 fc16 	bl	8001014 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e8:	4b4d      	ldr	r3, [pc, #308]	; (8000920 <main+0x2cc>)
 80007ea:	603b      	str	r3, [r7, #0]
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 0;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ec:	4638      	mov	r0, r7

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
 80007ee:	607c      	str	r4, [r7, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	60bc      	str	r4, [r7, #8]
  htim3.Init.Period = 0;
 80007f2:	60fc      	str	r4, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	61bc      	str	r4, [r7, #24]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80007fa:	940c      	str	r4, [sp, #48]	; 0x30
 80007fc:	940d      	str	r4, [sp, #52]	; 0x34
 80007fe:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	9407      	str	r4, [sp, #28]
 8000802:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000804:	9412      	str	r4, [sp, #72]	; 0x48
 8000806:	9413      	str	r4, [sp, #76]	; 0x4c
 8000808:	9414      	str	r4, [sp, #80]	; 0x50
 800080a:	9415      	str	r4, [sp, #84]	; 0x54
 800080c:	9416      	str	r4, [sp, #88]	; 0x58
 800080e:	9417      	str	r4, [sp, #92]	; 0x5c
 8000810:	9418      	str	r4, [sp, #96]	; 0x60
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 0;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000812:	f002 fde7 	bl	80033e4 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000816:	a90b      	add	r1, sp, #44	; 0x2c
 8000818:	4638      	mov	r0, r7
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800081e:	f002 fcdf 	bl	80031e0 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000822:	4638      	mov	r0, r7
 8000824:	f002 fe16 	bl	8003454 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000828:	a907      	add	r1, sp, #28
 800082a:	4638      	mov	r0, r7
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082e:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000830:	f002 fef4 	bl	800361c <HAL_TIMEx_MasterConfigSynchronization>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000834:	4622      	mov	r2, r4
 8000836:	a912      	add	r1, sp, #72	; 0x48
 8000838:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083a:	9512      	str	r5, [sp, #72]	; 0x48
  sConfigOC.Pulse = 0;
 800083c:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800083e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000842:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000844:	f002 fe80 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000848:	4638      	mov	r0, r7
 800084a:	f000 fbe3 	bl	8001014 <HAL_TIM_MspPostInit>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <main+0x2d0>)
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000850:	4d35      	ldr	r5, [pc, #212]	; (8000928 <main+0x2d4>)

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000852:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 800093c <main+0x2e8>
 8000856:	f8c3 e000 	str.w	lr, [r3]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800085a:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 800085c:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085e:	4618      	mov	r0, r3
  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000860:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000864:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000868:	61d9      	str	r1, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800086c:	f8c3 9014 	str.w	r9, [r3, #20]

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000870:	609c      	str	r4, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000872:	60dc      	str	r4, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000874:	f8c3 8010 	str.w	r8, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000878:	621c      	str	r4, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	625c      	str	r4, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087c:	629c      	str	r4, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087e:	605f      	str	r7, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000880:	619e      	str	r6, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000882:	f005 fb79 	bl	8005f78 <HAL_SPI_Init>

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 83;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999999999;
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <main+0x2d8>)
 8000888:	60eb      	str	r3, [r5, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 83;
 800088a:	2253      	movs	r2, #83	; 0x53
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 83;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999999999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000890:	4628      	mov	r0, r5

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 83;
 8000892:	e885 0006 	stmia.w	r5, {r1, r2}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	940b      	str	r4, [sp, #44]	; 0x2c
 8000898:	940c      	str	r4, [sp, #48]	; 0x30
 800089a:	940d      	str	r4, [sp, #52]	; 0x34
 800089c:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089e:	9407      	str	r4, [sp, #28]
 80008a0:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a2:	9412      	str	r4, [sp, #72]	; 0x48
 80008a4:	9413      	str	r4, [sp, #76]	; 0x4c
 80008a6:	9414      	str	r4, [sp, #80]	; 0x50
 80008a8:	9415      	str	r4, [sp, #84]	; 0x54
 80008aa:	9416      	str	r4, [sp, #88]	; 0x58
 80008ac:	9417      	str	r4, [sp, #92]	; 0x5c
 80008ae:	9418      	str	r4, [sp, #96]	; 0x60
  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 83;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 999999999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b6:	f002 fd95 	bl	80033e4 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ba:	a90b      	add	r1, sp, #44	; 0x2c
 80008bc:	4628      	mov	r0, r5
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c2:	f002 fc8d 	bl	80031e0 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80008c6:	4628      	mov	r0, r5
 80008c8:	f002 fda8 	bl	800341c <HAL_TIM_OC_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008cc:	a907      	add	r1, sp, #28
 80008ce:	4628      	mov	r0, r5
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d4:	f002 fea2 	bl	800361c <HAL_TIMEx_MasterConfigSynchronization>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d8:	a912      	add	r1, sp, #72	; 0x48
 80008da:	4622      	mov	r2, r4
 80008dc:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008de:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.Pulse = 0;
 80008e0:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e2:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e4:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e6:	f002 fdff 	bl	80034e8 <HAL_TIM_OC_ConfigChannel>
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80008ea:	f004 f9df 	bl	8004cac <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HostIO */
  HostIOHandle = osThreadNew(StartDefaultTask, NULL, &HostIO_attributes);
 80008ee:	4621      	mov	r1, r4
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <main+0x2dc>)
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <main+0x2e0>)
 80008f4:	f004 fa1a 	bl	8004d2c <osThreadNew>
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <main+0x2e4>)
 80008fa:	6018      	str	r0, [r3, #0]
    /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008fc:	f004 f9f0 	bl	8004ce0 <osKernelStart>
 8000900:	e7fe      	b.n	8000900 <main+0x2ac>
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	20008f70 	.word	0x20008f70
 800090c:	20008f2c 	.word	0x20008f2c
 8000910:	40020800 	.word	0x40020800
 8000914:	40020400 	.word	0x40020400
 8000918:	10110000 	.word	0x10110000
 800091c:	40010000 	.word	0x40010000
 8000920:	40000400 	.word	0x40000400
 8000924:	200093b0 	.word	0x200093b0
 8000928:	20009464 	.word	0x20009464
 800092c:	3b9ac9ff 	.word	0x3b9ac9ff
 8000930:	08007314 	.word	0x08007314
 8000934:	0800614d 	.word	0x0800614d
 8000938:	20008f6c 	.word	0x20008f6c
 800093c:	40013000 	.word	0x40013000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000944:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000946:	2200      	movs	r2, #0
 8000948:	4910      	ldr	r1, [pc, #64]	; (800098c <MX_USB_DEVICE_Init+0x48>)
 800094a:	4811      	ldr	r0, [pc, #68]	; (8000990 <MX_USB_DEVICE_Init+0x4c>)
 800094c:	f004 fd3e 	bl	80053cc <USBD_Init>
 8000950:	b9c0      	cbnz	r0, 8000984 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000952:	4910      	ldr	r1, [pc, #64]	; (8000994 <MX_USB_DEVICE_Init+0x50>)
 8000954:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_USB_DEVICE_Init+0x4c>)
 8000956:	f004 fd4f 	bl	80053f8 <USBD_RegisterClass>
 800095a:	b980      	cbnz	r0, 800097e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800095c:	490e      	ldr	r1, [pc, #56]	; (8000998 <MX_USB_DEVICE_Init+0x54>)
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_USB_DEVICE_Init+0x4c>)
 8000960:	f005 fac2 	bl	8005ee8 <USBD_CDC_RegisterInterface>
 8000964:	b940      	cbnz	r0, 8000978 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000966:	480a      	ldr	r0, [pc, #40]	; (8000990 <MX_USB_DEVICE_Init+0x4c>)
 8000968:	f004 fd4e 	bl	8005408 <USBD_Start>
 800096c:	b900      	cbnz	r0, 8000970 <MX_USB_DEVICE_Init+0x2c>
 800096e:	bd08      	pop	{r3, pc}
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
  {
    Error_Handler();
 8000974:	f7ff bfe4 	b.w	8000940 <Error_Handler>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
  {
    Error_Handler();
 8000978:	f7ff ffe2 	bl	8000940 <Error_Handler>
 800097c:	e7f3      	b.n	8000966 <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
  {
    Error_Handler();
 800097e:	f7ff ffdf 	bl	8000940 <Error_Handler>
 8000982:	e7eb      	b.n	800095c <MX_USB_DEVICE_Init+0x18>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
  {
    Error_Handler();
 8000984:	f7ff ffdc 	bl	8000940 <Error_Handler>
 8000988:	e7e3      	b.n	8000952 <MX_USB_DEVICE_Init+0xe>
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	20009564 	.word	0x20009564
 8000994:	200000b4 	.word	0x200000b4
 8000998:	20000050 	.word	0x20000050

0800099c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 800099e:	6803      	ldr	r3, [r0, #0]
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80009a0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 80009a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	9404      	str	r4, [sp, #16]
 80009aa:	9403      	str	r4, [sp, #12]
 80009ac:	9405      	str	r4, [sp, #20]
 80009ae:	9406      	str	r4, [sp, #24]
 80009b0:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80009b2:	d001      	beq.n	80009b8 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80009b4:	b009      	add	sp, #36	; 0x24
 80009b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4d1b      	ldr	r5, [pc, #108]	; (8000a28 <HAL_PCD_MspInit+0x8c>)
 80009ba:	9401      	str	r4, [sp, #4]
 80009bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	481b      	ldr	r0, [pc, #108]	; (8000a2c <HAL_PCD_MspInit+0x90>)
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	632b      	str	r3, [r5, #48]	; 0x30
 80009c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	9301      	str	r3, [sp, #4]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	a903      	add	r1, sp, #12
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d0:	f44f 7300 	mov.w	r3, #512	; 0x200
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	9a01      	ldr	r2, [sp, #4]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009d8:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f002 f884 	bl	8002ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	a903      	add	r1, sp, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e6:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	4810      	ldr	r0, [pc, #64]	; (8000a2c <HAL_PCD_MspInit+0x90>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009f0:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f002 f878 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fe:	636b      	str	r3, [r5, #52]	; 0x34
 8000a00:	9402      	str	r4, [sp, #8]
 8000a02:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	646b      	str	r3, [r5, #68]	; 0x44
 8000a0a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a10:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000a12:	4622      	mov	r2, r4
 8000a14:	4621      	mov	r1, r4
 8000a16:	2043      	movs	r0, #67	; 0x43
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a18:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000a1a:	f002 facb 	bl	8002fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000a1e:	2043      	movs	r0, #67	; 0x43
 8000a20:	f002 fb00 	bl	8003024 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000a24:	b009      	add	sp, #36	; 0x24
 8000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000a30:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8000a34:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a38:	f004 bcfe 	b.w	8005438 <USBD_LL_SetupStage>

08000a3c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000a3c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8000a40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000a44:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000a4c:	f004 bd24 	b.w	8005498 <USBD_LL_DataOutStage>

08000a50 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000a50:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8000a54:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000a58:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a5e:	f004 bd5b 	b.w	8005518 <USBD_LL_DataInStage>
 8000a62:	bf00      	nop

08000a64 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000a64:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a68:	f004 bdf6 	b.w	8005658 <USBD_LL_SOF>

08000a6c <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000a6c:	68c3      	ldr	r3, [r0, #12]
 8000a6e:	2b02      	cmp	r3, #2
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8000a70:	b510      	push	{r4, lr}
 8000a72:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000a74:	d001      	beq.n	8000a7a <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8000a76:	f7ff ff63 	bl	8000940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000a7a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000a7e:	2101      	movs	r1, #1
 8000a80:	f004 fdd4 	bl	800562c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000a84:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8000a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000a8c:	f004 bda6 	b.w	80055dc <USBD_LL_Reset>

08000a90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000a90:	b510      	push	{r4, lr}
 8000a92:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000a94:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a98:	f004 fdcc 	bl	8005634 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8000a9c:	6822      	ldr	r2, [r4, #0]
 8000a9e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000aaa:	6a23      	ldr	r3, [r4, #32]
 8000aac:	b123      	cbz	r3, 8000ab8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000aae:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_PCD_SuspendCallback+0x2c>)
 8000ab0:	6913      	ldr	r3, [r2, #16]
 8000ab2:	f043 0306 	orr.w	r3, r3, #6
 8000ab6:	6113      	str	r3, [r2, #16]
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000ac0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ac4:	f004 bdc0 	b.w	8005648 <USBD_LL_Resume>

08000ac8 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000ac8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000acc:	f004 bdd4 	b.w	8005678 <USBD_LL_IsoOUTIncomplete>

08000ad0 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000ad0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ad4:	f004 bdce 	b.w	8005674 <USBD_LL_IsoINIncomplete>

08000ad8 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8000ad8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000adc:	f004 bdce 	b.w	800567c <USBD_LL_DevConnected>

08000ae0 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8000ae0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ae4:	f004 bdcc 	b.w	8005680 <USBD_LL_DevDisconnected>

08000ae8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8000ae8:	7802      	ldrb	r2, [r0, #0]
 8000aea:	b10a      	cbz	r2, 8000af0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8000aec:	2000      	movs	r0, #0
 8000aee:	4770      	bx	lr
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <USBD_LL_Init+0x60>)
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000af2:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.pData = pdev;
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000af4:	2102      	movs	r1, #2
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000af6:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000afa:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000afe:	2504      	movs	r5, #4
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
  pdev->pData = &hpcd_USB_OTG_FS;
 8000b00:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b04:	2401      	movs	r4, #1
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b06:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b0c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b10:	631a      	str	r2, [r3, #48]	; 0x30
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b12:	601e      	str	r6, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b14:	605d      	str	r5, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b16:	62dc      	str	r4, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.pData = pdev;
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b18:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b1a:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b1c:	f000 fac2 	bl	80010a4 <HAL_PCD_Init>
 8000b20:	b978      	cbnz	r0, 8000b42 <USBD_LL_Init+0x5a>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <USBD_LL_Init+0x60>)
 8000b26:	f000 ffe7 	bl	8001af8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8000b2a:	2240      	movs	r2, #64	; 0x40
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <USBD_LL_Init+0x60>)
 8000b30:	f000 ffbe 	bl	8001ab0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	2101      	movs	r1, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <USBD_LL_Init+0x60>)
 8000b3a:	f000 ffb9 	bl	8001ab0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8000b3e:	2000      	movs	r0, #0
 8000b40:	bd70      	pop	{r4, r5, r6, pc}
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
  {
    Error_Handler( );
 8000b42:	f7ff fefd 	bl	8000940 <Error_Handler>
 8000b46:	e7ec      	b.n	8000b22 <USBD_LL_Init+0x3a>
 8000b48:	20009800 	.word	0x20009800

08000b4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000b4c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8000b4e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b52:	f000 fb37 	bl	80011c4 <HAL_PCD_Start>
 8000b56:	2803      	cmp	r0, #3
 8000b58:	bf9a      	itte	ls
 8000b5a:	4b02      	ldrls	r3, [pc, #8]	; (8000b64 <USBD_LL_Start+0x18>)
 8000b5c:	5c18      	ldrbls	r0, [r3, r0]
 8000b5e:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8000b60:	bd08      	pop	{r3, pc}
 8000b62:	bf00      	nop
 8000b64:	08007340 	.word	0x08007340

08000b68 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000b6c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b70:	4613      	mov	r3, r2
 8000b72:	4622      	mov	r2, r4
 8000b74:	f000 fe8c 	bl	8001890 <HAL_PCD_EP_Open>
 8000b78:	2803      	cmp	r0, #3
 8000b7a:	bf9a      	itte	ls
 8000b7c:	4b01      	ldrls	r3, [pc, #4]	; (8000b84 <USBD_LL_OpenEP+0x1c>)
 8000b7e:	5c18      	ldrbls	r0, [r3, r0]
 8000b80:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8000b82:	bd10      	pop	{r4, pc}
 8000b84:	08007340 	.word	0x08007340

08000b88 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000b88:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000b8a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b8e:	f000 feaf 	bl	80018f0 <HAL_PCD_EP_Close>
 8000b92:	2803      	cmp	r0, #3
 8000b94:	bf9a      	itte	ls
 8000b96:	4b02      	ldrls	r3, [pc, #8]	; (8000ba0 <USBD_LL_CloseEP+0x18>)
 8000b98:	5c18      	ldrbls	r0, [r3, r0]
 8000b9a:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8000b9c:	bd08      	pop	{r3, pc}
 8000b9e:	bf00      	nop
 8000ba0:	08007340 	.word	0x08007340

08000ba4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000ba4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000ba6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000baa:	f000 ff19 	bl	80019e0 <HAL_PCD_EP_SetStall>
 8000bae:	2803      	cmp	r0, #3
 8000bb0:	bf9a      	itte	ls
 8000bb2:	4b02      	ldrls	r3, [pc, #8]	; (8000bbc <USBD_LL_StallEP+0x18>)
 8000bb4:	5c18      	ldrbls	r0, [r3, r0]
 8000bb6:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8000bb8:	bd08      	pop	{r3, pc}
 8000bba:	bf00      	nop
 8000bbc:	08007340 	.word	0x08007340

08000bc0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000bc0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000bc2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000bc6:	f000 ff43 	bl	8001a50 <HAL_PCD_EP_ClrStall>
 8000bca:	2803      	cmp	r0, #3
 8000bcc:	bf9a      	itte	ls
 8000bce:	4b02      	ldrls	r3, [pc, #8]	; (8000bd8 <USBD_LL_ClearStallEP+0x18>)
 8000bd0:	5c18      	ldrbls	r0, [r3, r0]
 8000bd2:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8000bd4:	bd08      	pop	{r3, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08007340 	.word	0x08007340

08000bdc <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8000bdc:	060b      	lsls	r3, r1, #24
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000bde:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
  
  if((ep_addr & 0x80) == 0x80)
 8000be2:	d406      	bmi.n	8000bf2 <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000be4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000be8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8000bec:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8000bf0:	4770      	bx	lr
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000bf2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000bf6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000bfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000bfe:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8000c02:	4770      	bx	lr

08000c04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000c04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000c06:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c0a:	f000 fe2d 	bl	8001868 <HAL_PCD_SetAddress>
 8000c0e:	2803      	cmp	r0, #3
 8000c10:	bf9a      	itte	ls
 8000c12:	4b02      	ldrls	r3, [pc, #8]	; (8000c1c <USBD_LL_SetUSBAddress+0x18>)
 8000c14:	5c18      	ldrbls	r0, [r3, r0]
 8000c16:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8000c18:	bd08      	pop	{r3, pc}
 8000c1a:	bf00      	nop
 8000c1c:	08007340 	.word	0x08007340

08000c20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000c20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000c22:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c26:	f000 feb9 	bl	800199c <HAL_PCD_EP_Transmit>
 8000c2a:	2803      	cmp	r0, #3
 8000c2c:	bf9a      	itte	ls
 8000c2e:	4b02      	ldrls	r3, [pc, #8]	; (8000c38 <USBD_LL_Transmit+0x18>)
 8000c30:	5c18      	ldrbls	r0, [r3, r0]
 8000c32:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8000c34:	bd08      	pop	{r3, pc}
 8000c36:	bf00      	nop
 8000c38:	08007340 	.word	0x08007340

08000c3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000c3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000c3e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c42:	f000 fe7d 	bl	8001940 <HAL_PCD_EP_Receive>
 8000c46:	2803      	cmp	r0, #3
 8000c48:	bf9a      	itte	ls
 8000c4a:	4b02      	ldrls	r3, [pc, #8]	; (8000c54 <USBD_LL_PrepareReceive+0x18>)
 8000c4c:	5c18      	ldrbls	r0, [r3, r0]
 8000c4e:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8000c50:	bd08      	pop	{r3, pc}
 8000c52:	bf00      	nop
 8000c54:	08007340 	.word	0x08007340

08000c58 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000c58:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c5c:	f000 be94 	b.w	8001988 <HAL_PCD_EP_GetRxCount>

08000c60 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000c60:	2312      	movs	r3, #18
 8000c62:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8000c64:	4800      	ldr	r0, [pc, #0]	; (8000c68 <USBD_FS_DeviceDescriptor+0x8>)
 8000c66:	4770      	bx	lr
 8000c68:	2000003c 	.word	0x2000003c

08000c6c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8000c70:	4800      	ldr	r0, [pc, #0]	; (8000c74 <USBD_FS_LangIDStrDescriptor+0x8>)
 8000c72:	4770      	bx	lr
 8000c74:	2000001c 	.word	0x2000001c

08000c78 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000c78:	b1b2      	cbz	r2, 8000ca8 <IntToUnicode+0x30>
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000c7a:	b470      	push	{r4, r5, r6}
 8000c7c:	1e54      	subs	r4, r2, #1
 8000c7e:	b2e4      	uxtb	r4, r4
 8000c80:	3401      	adds	r4, #1
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	0064      	lsls	r4, r4, #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8000c86:	461e      	mov	r6, r3
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8000c88:	0f02      	lsrs	r2, r0, #28
 8000c8a:	2a09      	cmp	r2, #9
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000c8c:	f102 0530 	add.w	r5, r2, #48	; 0x30
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000c90:	bf86      	itte	hi
 8000c92:	3237      	addhi	r2, #55	; 0x37
 8000c94:	54ca      	strbhi	r2, [r1, r3]

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000c96:	54cd      	strbls	r5, [r1, r3]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8000c98:	18ca      	adds	r2, r1, r3
 8000c9a:	3302      	adds	r3, #2
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000c9c:	42a3      	cmp	r3, r4
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;
 8000c9e:	ea4f 1000 	mov.w	r0, r0, lsl #4

    pbuf[2 * idx + 1] = 0;
 8000ca2:	7056      	strb	r6, [r2, #1]
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000ca4:	d1f0      	bne.n	8000c88 <IntToUnicode+0x10>

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
  }
}
 8000ca6:	bc70      	pop	{r4, r5, r6}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000cac:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <USBD_FS_SerialStrDescriptor+0x30>)
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8000cb0:	6810      	ldr	r0, [r2, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000cb2:	681b      	ldr	r3, [r3, #0]
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000cb4:	221a      	movs	r2, #26
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
 8000cb6:	1818      	adds	r0, r3, r0
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000cb8:	800a      	strh	r2, [r1, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
 8000cba:	d101      	bne.n	8000cc0 <USBD_FS_SerialStrDescriptor+0x14>
  Get_SerialNum();
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
}
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <USBD_FS_SerialStrDescriptor+0x38>)
 8000cbe:	4770      	bx	lr
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000cc0:	b510      	push	{r4, lr}
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <USBD_FS_SerialStrDescriptor+0x3c>)

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000cc4:	4909      	ldr	r1, [pc, #36]	; (8000cec <USBD_FS_SerialStrDescriptor+0x40>)
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000cc6:	681c      	ldr	r4, [r3, #0]

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000cc8:	2208      	movs	r2, #8
 8000cca:	f7ff ffd5 	bl	8000c78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000cce:	4620      	mov	r0, r4
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <USBD_FS_SerialStrDescriptor+0x44>)
 8000cd4:	f7ff ffd0 	bl	8000c78 <IntToUnicode>
  Get_SerialNum();
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
}
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <USBD_FS_SerialStrDescriptor+0x38>)
 8000cda:	bd10      	pop	{r4, pc}
 8000cdc:	1fff7a18 	.word	0x1fff7a18
 8000ce0:	1fff7a10 	.word	0x1fff7a10
 8000ce4:	20000020 	.word	0x20000020
 8000ce8:	1fff7a14 	.word	0x1fff7a14
 8000cec:	20000022 	.word	0x20000022
 8000cf0:	20000032 	.word	0x20000032

08000cf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000cf4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000cf6:	4c04      	ldr	r4, [pc, #16]	; (8000d08 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8000cfa:	460a      	mov	r2, r1
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	f004 ff37 	bl	8005b70 <USBD_GetString>
  return USBD_StrDesc;
}
 8000d02:	4620      	mov	r0, r4
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	bf00      	nop
 8000d08:	20009c08 	.word	0x20009c08
 8000d0c:	08007344 	.word	0x08007344

08000d10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d10:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000d12:	4c04      	ldr	r4, [pc, #16]	; (8000d24 <USBD_FS_ProductStrDescriptor+0x14>)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <USBD_FS_ProductStrDescriptor+0x18>)
 8000d16:	460a      	mov	r2, r1
 8000d18:	4621      	mov	r1, r4
 8000d1a:	f004 ff29 	bl	8005b70 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000d1e:	4620      	mov	r0, r4
 8000d20:	bd10      	pop	{r4, pc}
 8000d22:	bf00      	nop
 8000d24:	20009c08 	.word	0x20009c08
 8000d28:	08007358 	.word	0x08007358

08000d2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d2c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000d2e:	4c04      	ldr	r4, [pc, #16]	; (8000d40 <USBD_FS_ConfigStrDescriptor+0x14>)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <USBD_FS_ConfigStrDescriptor+0x18>)
 8000d32:	460a      	mov	r2, r1
 8000d34:	4621      	mov	r1, r4
 8000d36:	f004 ff1b 	bl	8005b70 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	bf00      	nop
 8000d40:	20009c08 	.word	0x20009c08
 8000d44:	08007370 	.word	0x08007370

08000d48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d48:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000d4a:	4c04      	ldr	r4, [pc, #16]	; (8000d5c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8000d4e:	460a      	mov	r2, r1
 8000d50:	4621      	mov	r1, r4
 8000d52:	f004 ff0d 	bl	8005b70 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000d56:	4620      	mov	r0, r4
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20009c08 	.word	0x20009c08
 8000d60:	0800737c 	.word	0x0800737c

08000d64 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
    return ( USBD_OK );
  /* USER CODE END 4 */
}
 8000d64:	2000      	movs	r0, #0
 8000d66:	4770      	bx	lr

08000d68 <CDC_Control_FS>:
        break;
    }

    return ( USBD_OK );
  /* USER CODE END 5 */
}
 8000d68:	2000      	movs	r0, #0
 8000d6a:	4770      	bx	lr

08000d6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000d6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
    void CdcReceiveHandler( char* Buf, size_t len );
    CdcReceiveHandler( (char*)Buf, (size_t)*Len );
 8000d6e:	6809      	ldr	r1, [r1, #0]
 8000d70:	f005 fa7a 	bl	8006268 <CdcReceiveHandler>
    return ( USBD_OK );
  /* USER CODE END 6 */
}
 8000d74:	2000      	movs	r0, #0
 8000d76:	bd08      	pop	{r3, pc}

08000d78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000d78:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, UserTxBufferFS, 0 );
 8000d7a:	4c06      	ldr	r4, [pc, #24]	; (8000d94 <CDC_Init_FS+0x1c>)
 8000d7c:	4906      	ldr	r1, [pc, #24]	; (8000d98 <CDC_Init_FS+0x20>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4620      	mov	r0, r4
 8000d82:	f005 f8b9 	bl	8005ef8 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, UserRxBufferFS );
 8000d86:	4620      	mov	r0, r4
 8000d88:	4904      	ldr	r1, [pc, #16]	; (8000d9c <CDC_Init_FS+0x24>)
 8000d8a:	f005 f8bd 	bl	8005f08 <USBD_CDC_SetRxBuffer>
    return ( USBD_OK );
  /* USER CODE END 3 */
}
 8000d8e:	2000      	movs	r0, #0
 8000d90:	bd10      	pop	{r4, pc}
 8000d92:	bf00      	nop
 8000d94:	20009564 	.word	0x20009564
 8000d98:	20009f08 	.word	0x20009f08
 8000d9c:	20009e08 	.word	0x20009e08

08000da0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000da0:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000da2:	4c09      	ldr	r4, [pc, #36]	; (8000dc8 <CDC_Transmit_FS+0x28>)
 8000da4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    if ( hcdc->TxState != 0 ) {
 8000da8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000dac:	b10b      	cbz	r3, 8000db2 <CDC_Transmit_FS+0x12>
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
  /* USER CODE END 7 */
  return result;
}
 8000dae:	2001      	movs	r0, #1
 8000db0:	bd10      	pop	{r4, pc}
 8000db2:	460a      	mov	r2, r1
 8000db4:	4601      	mov	r1, r0
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
 8000db6:	4620      	mov	r0, r4
 8000db8:	f005 f89e 	bl	8005ef8 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8000dbc:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8000dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8000dc2:	f005 b8a7 	b.w	8005f14 <USBD_CDC_TransmitPacket>
 8000dc6:	bf00      	nop
 8000dc8:	20009564 	.word	0x20009564

08000dcc <NMI_Handler>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd0:	e7fe      	b.n	8000dd0 <HardFault_Handler>
 8000dd2:	bf00      	nop

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler>
 8000dd6:	bf00      	nop

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	e7fe      	b.n	8000dd8 <BusFault_Handler>
 8000dda:	bf00      	nop

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler>
 8000dde:	bf00      	nop

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <TIM1_UP_TIM10_IRQHandler>:
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim1, TIM_IT_UPDATE );
 8000de4:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f06f 0201 	mvn.w	r2, #1
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	4770      	bx	lr
 8000df0:	20008f70 	.word	0x20008f70

08000df4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
    HAL_IncTick();
 8000df6:	f002 f93d 	bl	8003074 <HAL_IncTick>
    __HAL_TIM_CLEAR_FLAG( &htim11, TIM_IT_UPDATE );
 8000dfa:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f06f 0201 	mvn.w	r2, #1
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	bd08      	pop	{r3, pc}
 8000e06:	bf00      	nop
 8000e08:	20009f4c 	.word	0x20009f4c

08000e0c <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim3, TIM_IT_UPDATE );
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <TIM3_IRQHandler+0xc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f06f 0201 	mvn.w	r2, #1
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	4770      	bx	lr
 8000e18:	20008f2c 	.word	0x20008f2c

08000e1c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e1c:	4801      	ldr	r0, [pc, #4]	; (8000e24 <DMA2_Stream2_IRQHandler+0x8>)
 8000e1e:	f001 bfe7 	b.w	8002df0 <HAL_DMA_IRQHandler>
 8000e22:	bf00      	nop
 8000e24:	200094a4 	.word	0x200094a4

08000e28 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e28:	4801      	ldr	r0, [pc, #4]	; (8000e30 <DMA2_Stream3_IRQHandler+0x8>)
 8000e2a:	f001 bfe1 	b.w	8002df0 <HAL_DMA_IRQHandler>
 8000e2e:	bf00      	nop
 8000e30:	20009504 	.word	0x20009504

08000e34 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e34:	4801      	ldr	r0, [pc, #4]	; (8000e3c <OTG_FS_IRQHandler+0x8>)
 8000e36:	f000 b9e7 	b.w	8001208 <HAL_PCD_IRQHandler>
 8000e3a:	bf00      	nop
 8000e3c:	20009800 	.word	0x20009800

08000e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b500      	push	{lr}
 8000e42:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_MspInit+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	9200      	str	r2, [sp, #0]
 8000e4a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000e4c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000e50:	6459      	str	r1, [r3, #68]	; 0x44
 8000e52:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000e54:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000e58:	9100      	str	r1, [sp, #0]
 8000e5a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	9201      	str	r2, [sp, #4]
 8000e5e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000e60:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e64:	6419      	str	r1, [r3, #64]	; 0x40
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f06f 0001 	mvn.w	r0, #1
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e76:	f002 f89d 	bl	8002fb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	b003      	add	sp, #12
 8000e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8000e86:	6802      	ldr	r2, [r0, #0]
 8000e88:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <HAL_SPI_MspInit+0xd0>)
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e8a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8000e8e:	429a      	cmp	r2, r3
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	9404      	str	r4, [sp, #16]
 8000e92:	9403      	str	r4, [sp, #12]
 8000e94:	9405      	str	r4, [sp, #20]
 8000e96:	9406      	str	r4, [sp, #24]
 8000e98:	9407      	str	r4, [sp, #28]
  if(hspi->Instance==SPI1)
 8000e9a:	d001      	beq.n	8000ea0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e9c:	b009      	add	sp, #36	; 0x24
 8000e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000ea4:	9401      	str	r4, [sp, #4]
 8000ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000ea8:	4e2b      	ldr	r6, [pc, #172]	; (8000f58 <HAL_SPI_MspInit+0xd4>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000eae:	645a      	str	r2, [r3, #68]	; 0x44
 8000eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000eb6:	9201      	str	r2, [sp, #4]
 8000eb8:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	9402      	str	r4, [sp, #8]
 8000ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	9302      	str	r3, [sp, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ecc:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	a903      	add	r1, sp, #12
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ed2:	9303      	str	r3, [sp, #12]
 8000ed4:	4605      	mov	r5, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed6:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	4820      	ldr	r0, [pc, #128]	; (8000f5c <HAL_SPI_MspInit+0xd8>)
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	9206      	str	r2, [sp, #24]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ede:	9307      	str	r3, [sp, #28]

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	f8dd e008 	ldr.w	lr, [sp, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f001 fdff 	bl	8002ae8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000eea:	491d      	ldr	r1, [pc, #116]	; (8000f60 <HAL_SPI_MspInit+0xdc>)
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eec:	60b4      	str	r4, [r6, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000eee:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ef6:	4630      	mov	r0, r6
    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef8:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000efa:	6174      	str	r4, [r6, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efc:	61b4      	str	r4, [r6, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000efe:	61f4      	str	r4, [r6, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f00:	6234      	str	r4, [r6, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f02:	6274      	str	r4, [r6, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f04:	e886 0006 	stmia.w	r6, {r1, r2}
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f08:	6133      	str	r3, [r6, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f0a:	f001 fed9 	bl	8002cc0 <HAL_DMA_Init>
 8000f0e:	b9d8      	cbnz	r0, 8000f48 <HAL_SPI_MspInit+0xc4>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f10:	4c14      	ldr	r4, [pc, #80]	; (8000f64 <HAL_SPI_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000f12:	64ee      	str	r6, [r5, #76]	; 0x4c

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f14:	2300      	movs	r3, #0
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f16:	4f14      	ldr	r7, [pc, #80]	; (8000f68 <HAL_SPI_MspInit+0xe4>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000f18:	63b5      	str	r5, [r6, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f1a:	2140      	movs	r1, #64	; 0x40

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f1c:	f04f 66c0 	mov.w	r6, #100663296	; 0x6000000
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f24:	4620      	mov	r0, r4
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f26:	6027      	str	r7, [r4, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f28:	6066      	str	r6, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2a:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2c:	6122      	str	r2, [r4, #16]

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2e:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f30:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f32:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f34:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f36:	6223      	str	r3, [r4, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f38:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f3a:	f001 fec1 	bl	8002cc0 <HAL_DMA_Init>
 8000f3e:	b930      	cbnz	r0, 8000f4e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f40:	64ac      	str	r4, [r5, #72]	; 0x48
 8000f42:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f44:	b009      	add	sp, #36	; 0x24
 8000f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
    {
      Error_Handler();
 8000f48:	f7ff fcfa 	bl	8000940 <Error_Handler>
 8000f4c:	e7e0      	b.n	8000f10 <HAL_SPI_MspInit+0x8c>
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
    {
      Error_Handler();
 8000f4e:	f7ff fcf7 	bl	8000940 <Error_Handler>
 8000f52:	e7f5      	b.n	8000f40 <HAL_SPI_MspInit+0xbc>
 8000f54:	40013000 	.word	0x40013000
 8000f58:	200094a4 	.word	0x200094a4
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40026440 	.word	0x40026440
 8000f64:	20009504 	.word	0x20009504
 8000f68:	40026458 	.word	0x40026458

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM1)
 8000f6e:	6803      	ldr	r3, [r0, #0]
 8000f70:	4a25      	ldr	r2, [pc, #148]	; (8001008 <HAL_TIM_Base_MspInit+0x9c>)
 8000f72:	4293      	cmp	r3, r2
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8000f76:	d029      	beq.n	8000fcc <HAL_TIM_Base_MspInit+0x60>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d004      	beq.n	8000f88 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_TIM_Base_MspInit+0xa0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d00f      	beq.n	8000fa4 <HAL_TIM_Base_MspInit+0x38>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f84:	b004      	add	sp, #16
 8000f86:	bd10      	pop	{r4, pc}
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f88:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	9202      	str	r2, [sp, #8]
 8000f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f92:	f042 0201 	orr.w	r2, r2, #1
 8000f96:	641a      	str	r2, [r3, #64]	; 0x40
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	9b02      	ldr	r3, [sp, #8]
 8000fa2:	e7ef      	b.n	8000f84 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_TIM_Base_MspInit+0xa4>)
 8000fa8:	9203      	str	r2, [sp, #12]
 8000faa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000fac:	f041 0102 	orr.w	r1, r1, #2
 8000fb0:	6419      	str	r1, [r3, #64]	; 0x40
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	9303      	str	r3, [sp, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fba:	4611      	mov	r1, r2
 8000fbc:	201d      	movs	r0, #29
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fbe:	9b03      	ldr	r3, [sp, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fc0:	f001 fff8 	bl	8002fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fc4:	201d      	movs	r0, #29
 8000fc6:	f002 f82d 	bl	8003024 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fca:	e7db      	b.n	8000f84 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fcc:	2400      	movs	r4, #0
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_TIM_Base_MspInit+0xa4>)
 8000fd0:	9401      	str	r4, [sp, #4]
 8000fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	f003 0301 	and.w	r3, r3, #1
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000fe0:	4622      	mov	r2, r4
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe2:	9301      	str	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2019      	movs	r0, #25
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe8:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000fea:	f001 ffe3 	bl	8002fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fee:	2019      	movs	r0, #25
 8000ff0:	f002 f818 	bl	8003024 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	201a      	movs	r0, #26
 8000ffa:	f001 ffdb 	bl	8002fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ffe:	201a      	movs	r0, #26
 8001000:	f002 f810 	bl	8003024 <HAL_NVIC_EnableIRQ>
 8001004:	e7be      	b.n	8000f84 <HAL_TIM_Base_MspInit+0x18>
 8001006:	bf00      	nop
 8001008:	40010000 	.word	0x40010000
 800100c:	40000400 	.word	0x40000400
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001014:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8001016:	6802      	ldr	r2, [r0, #0]
 8001018:	491d      	ldr	r1, [pc, #116]	; (8001090 <HAL_TIM_MspPostInit+0x7c>)
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800101a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800101e:	428a      	cmp	r2, r1

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	9304      	str	r3, [sp, #16]
 8001022:	9303      	str	r3, [sp, #12]
 8001024:	9305      	str	r3, [sp, #20]
 8001026:	9306      	str	r3, [sp, #24]
 8001028:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 800102a:	d019      	beq.n	8001060 <HAL_TIM_MspPostInit+0x4c>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 800102c:	4919      	ldr	r1, [pc, #100]	; (8001094 <HAL_TIM_MspPostInit+0x80>)
 800102e:	428a      	cmp	r2, r1
 8001030:	d001      	beq.n	8001036 <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001032:	b009      	add	sp, #36	; 0x24
 8001034:	bd30      	pop	{r4, r5, pc}
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_TIM_MspPostInit+0x84>)
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = MOT_STEP2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(MOT_STEP2_GPIO_Port, &GPIO_InitStruct);
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <HAL_TIM_MspPostInit+0x88>)
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	9302      	str	r3, [sp, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP2_Pin;
 800104c:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(MOT_STEP2_GPIO_Port, &GPIO_InitStruct);
 8001050:	a903      	add	r1, sp, #12
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	9c02      	ldr	r4, [sp, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP2_Pin;
 8001054:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001058:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP2_GPIO_Port, &GPIO_InitStruct);
 800105a:	f001 fd45 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800105e:	e7e8      	b.n	8001032 <HAL_TIM_MspPostInit+0x1e>
  if(htim->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_TIM_MspPostInit+0x84>)
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = MOT_STEP1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(MOT_STEP1_GPIO_Port, &GPIO_InitStruct);
 8001066:	480e      	ldr	r0, [pc, #56]	; (80010a0 <HAL_TIM_MspPostInit+0x8c>)
  if(htim->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	9301      	str	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP1_Pin;
 8001076:	f44f 7480 	mov.w	r4, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800107c:	2301      	movs	r3, #1
    HAL_GPIO_Init(MOT_STEP1_GPIO_Port, &GPIO_InitStruct);
 800107e:	a903      	add	r1, sp, #12
  if(htim->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	9d01      	ldr	r5, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP1_Pin;
 8001082:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001086:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP1_GPIO_Port, &GPIO_InitStruct);
 8001088:	f001 fd2e 	bl	8002ae8 <HAL_GPIO_Init>
 800108c:	e7d1      	b.n	8001032 <HAL_TIM_MspPostInit+0x1e>
 800108e:	bf00      	nop
 8001090:	40010000 	.word	0x40010000
 8001094:	40000400 	.word	0x40000400
 8001098:	40023800 	.word	0x40023800
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010a8:	2800      	cmp	r0, #0
 80010aa:	f000 8086 	beq.w	80011ba <HAL_PCD_Init+0x116>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ae:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010b2:	6805      	ldr	r5, [r0, #0]
 80010b4:	4604      	mov	r4, r0

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d077      	beq.n	80011ae <HAL_PCD_Init+0x10a>
 80010be:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010c0:	2303      	movs	r3, #3
 80010c2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010c6:	6beb      	ldr	r3, [r5, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010c8:	4625      	mov	r5, r4
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010ca:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
 80010ce:	bf08      	it	eq
 80010d0:	6123      	streq	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010d2:	f000 fdf9 	bl	8001cc8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d6:	f855 eb10 	ldr.w	lr, [r5], #16
 80010da:	462f      	mov	r7, r5
 80010dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80010de:	466e      	mov	r6, sp
 80010e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80010e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010e6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80010ea:	e886 0003 	stmia.w	r6, {r0, r1}
 80010ee:	1d26      	adds	r6, r4, #4
 80010f0:	4670      	mov	r0, lr
 80010f2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80010f6:	f000 fd1f 	bl	8001b38 <USB_CoreInit>
 80010fa:	4607      	mov	r7, r0
 80010fc:	b130      	cbz	r0, 800110c <HAL_PCD_Init+0x68>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 80010fe:	2501      	movs	r5, #1
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001100:	2302      	movs	r3, #2
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001102:	4628      	mov	r0, r5
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001104:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001108:	b00b      	add	sp, #44	; 0x2c
 800110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800110c:	4601      	mov	r1, r0
 800110e:	6820      	ldr	r0, [r4, #0]
 8001110:	f000 fde2 	bl	8001cd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001114:	6860      	ldr	r0, [r4, #4]
 8001116:	b360      	cbz	r0, 8001172 <HAL_PCD_Init+0xce>
 8001118:	4639      	mov	r1, r7
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800111a:	463a      	mov	r2, r7

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800111c:	f04f 0e01 	mov.w	lr, #1
 8001120:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001124:	eb04 0383 	add.w	r3, r4, r3, lsl #2

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001128:	1c4f      	adds	r7, r1, #1
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
    hpcd->IN_ep[i].num = i;
 800112a:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800112e:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001132:	b2f9      	uxtb	r1, r7
 8001134:	4281      	cmp	r1, r0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001136:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800113a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800113e:	645a      	str	r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001140:	649a      	str	r2, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001142:	651a      	str	r2, [r3, #80]	; 0x50

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001144:	d3ec      	bcc.n	8001120 <HAL_PCD_Init+0x7c>
 8001146:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001148:	4611      	mov	r1, r2
 800114a:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800114e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001152:	1c57      	adds	r7, r2, #1
  {
    hpcd->OUT_ep[i].is_in = 0U;
    hpcd->OUT_ep[i].num = i;
 8001154:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001158:	b2fa      	uxtb	r2, r7
 800115a:	4282      	cmp	r2, r0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800115c:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001160:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001164:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001168:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800116c:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001170:	d3eb      	bcc.n	800114a <HAL_PCD_Init+0xa6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	466f      	mov	r7, sp
 8001176:	f8d4 e000 	ldr.w	lr, [r4]
 800117a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800117c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001180:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001184:	e887 0003 	stmia.w	r7, {r0, r1}
 8001188:	4670      	mov	r0, lr
 800118a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800118e:	f000 fdbf 	bl	8001d10 <USB_DevInit>
 8001192:	4605      	mov	r5, r0
 8001194:	2800      	cmp	r0, #0
 8001196:	d1b2      	bne.n	80010fe <HAL_PCD_Init+0x5a>
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8001198:	2301      	movs	r3, #1
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 800119a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800119e:	6820      	ldr	r0, [r4, #0]
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 80011a0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011a4:	f001 f92a 	bl	80023fc <USB_DevDisconnect>

  return HAL_OK;
}
 80011a8:	4628      	mov	r0, r5
 80011aa:	b00b      	add	sp, #44	; 0x2c
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ae:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b2:	f7ff fbf3 	bl	800099c <HAL_PCD_MspInit>
 80011b6:	6820      	ldr	r0, [r4, #0]
 80011b8:	e782      	b.n	80010c0 <HAL_PCD_Init+0x1c>
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 80011ba:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80011bc:	4628      	mov	r0, r5
 80011be:	b00b      	add	sp, #44	; 0x2c
 80011c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c2:	bf00      	nop

080011c4 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011c4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d012      	beq.n	80011f2 <HAL_PCD_Start+0x2e>
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011cc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ce:	6803      	ldr	r3, [r0, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011d0:	2101      	movs	r1, #1
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011d2:	428a      	cmp	r2, r1
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011d4:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011d6:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011da:	d00c      	beq.n	80011f6 <HAL_PCD_Start+0x32>
 80011dc:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 f900 	bl	80023e4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011e4:	6820      	ldr	r0, [r4, #0]
 80011e6:	f000 fd67 	bl	8001cb8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80011f0:	bd10      	pop	{r4, pc}
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011f2:	2002      	movs	r0, #2
 80011f4:	4770      	bx	lr
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011f6:	6982      	ldr	r2, [r0, #24]
 80011f8:	428a      	cmp	r2, r1
 80011fa:	d0ef      	beq.n	80011dc <HAL_PCD_Start+0x18>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
 8001204:	e7ea      	b.n	80011dc <HAL_PCD_Start+0x18>
 8001206:	bf00      	nop

08001208 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800120c:	6806      	ldr	r6, [r0, #0]
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800120e:	b087      	sub	sp, #28
 8001210:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001212:	4630      	mov	r0, r6
 8001214:	f001 f930 	bl	8002478 <USB_GetMode>
 8001218:	b110      	cbz	r0, 8001220 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800121a:	b007      	add	sp, #28
 800121c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001220:	6820      	ldr	r0, [r4, #0]
 8001222:	f001 f8f7 	bl	8002414 <USB_ReadInterrupts>
 8001226:	2800      	cmp	r0, #0
 8001228:	d0f7      	beq.n	800121a <HAL_PCD_IRQHandler+0x12>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800122a:	6820      	ldr	r0, [r4, #0]
 800122c:	f001 f8f2 	bl	8002414 <USB_ReadInterrupts>
 8001230:	f010 0f02 	tst.w	r0, #2
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001234:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001236:	d003      	beq.n	8001240 <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001238:	6943      	ldr	r3, [r0, #20]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	6143      	str	r3, [r0, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001240:	f001 f8e8 	bl	8002414 <USB_ReadInterrupts>
 8001244:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001248:	6820      	ldr	r0, [r4, #0]
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800124a:	f040 8137 	bne.w	80014bc <HAL_PCD_IRQHandler+0x2b4>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800124e:	f001 f8e1 	bl	8002414 <USB_ReadInterrupts>
 8001252:	0342      	lsls	r2, r0, #13
 8001254:	f100 80d1 	bmi.w	80013fa <HAL_PCD_IRQHandler+0x1f2>
 8001258:	6820      	ldr	r0, [r4, #0]
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800125a:	f001 f8db 	bl	8002414 <USB_ReadInterrupts>
 800125e:	2800      	cmp	r0, #0
 8001260:	f2c0 8187 	blt.w	8001572 <HAL_PCD_IRQHandler+0x36a>
 8001264:	6820      	ldr	r0, [r4, #0]

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001266:	f001 f8d5 	bl	8002414 <USB_ReadInterrupts>
 800126a:	0501      	lsls	r1, r0, #20
 800126c:	d448      	bmi.n	8001300 <HAL_PCD_IRQHandler+0xf8>
 800126e:	6820      	ldr	r0, [r4, #0]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001270:	f001 f8d0 	bl	8002414 <USB_ReadInterrupts>
 8001274:	04c3      	lsls	r3, r0, #19
 8001276:	d478      	bmi.n	800136a <HAL_PCD_IRQHandler+0x162>
 8001278:	6820      	ldr	r0, [r4, #0]

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800127a:	f001 f8cb 	bl	8002414 <USB_ReadInterrupts>
 800127e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001282:	6820      	ldr	r0, [r4, #0]

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001284:	d15a      	bne.n	800133c <HAL_PCD_IRQHandler+0x134>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001286:	f001 f8c5 	bl	8002414 <USB_ReadInterrupts>
 800128a:	f010 0f10 	tst.w	r0, #16
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800128e:	6820      	ldr	r0, [r4, #0]

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001290:	d011      	beq.n	80012b6 <HAL_PCD_IRQHandler+0xae>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001292:	6983      	ldr	r3, [r0, #24]
 8001294:	f023 0310 	bic.w	r3, r3, #16
 8001298:	6183      	str	r3, [r0, #24]

      temp = USBx->GRXSTSP;
 800129a:	6a35      	ldr	r5, [r6, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800129c:	f3c5 4343 	ubfx	r3, r5, #17, #4
 80012a0:	2b02      	cmp	r3, #2
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);

      temp = USBx->GRXSTSP;

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012a2:	f005 070f 	and.w	r7, r5, #15

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012a6:	f000 8216 	beq.w	80016d6 <HAL_PCD_IRQHandler+0x4ce>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d033      	beq.n	8001316 <HAL_PCD_IRQHandler+0x10e>
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ae:	6983      	ldr	r3, [r0, #24]
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	6183      	str	r3, [r0, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80012b6:	f001 f8ad 	bl	8002414 <USB_ReadInterrupts>
 80012ba:	0707      	lsls	r7, r0, #28
 80012bc:	f100 8146 	bmi.w	800154c <HAL_PCD_IRQHandler+0x344>
 80012c0:	6820      	ldr	r0, [r4, #0]

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80012c2:	f001 f8a7 	bl	8002414 <USB_ReadInterrupts>
 80012c6:	02c6      	lsls	r6, r0, #11
 80012c8:	f100 8136 	bmi.w	8001538 <HAL_PCD_IRQHandler+0x330>
 80012cc:	6820      	ldr	r0, [r4, #0]

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80012ce:	f001 f8a1 	bl	8002414 <USB_ReadInterrupts>
 80012d2:	0285      	lsls	r5, r0, #10
 80012d4:	f100 8143 	bmi.w	800155e <HAL_PCD_IRQHandler+0x356>
 80012d8:	6820      	ldr	r0, [r4, #0]

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80012da:	f001 f89b 	bl	8002414 <USB_ReadInterrupts>
 80012de:	0040      	lsls	r0, r0, #1
 80012e0:	f100 80e3 	bmi.w	80014aa <HAL_PCD_IRQHandler+0x2a2>
 80012e4:	6820      	ldr	r0, [r4, #0]

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80012e6:	f001 f895 	bl	8002414 <USB_ReadInterrupts>
 80012ea:	0741      	lsls	r1, r0, #29
 80012ec:	d595      	bpl.n	800121a <HAL_PCD_IRQHandler+0x12>
    {
      temp = hpcd->Instance->GOTGINT;
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80012f2:	076a      	lsls	r2, r5, #29
 80012f4:	f100 81db 	bmi.w	80016ae <HAL_PCD_IRQHandler+0x4a6>
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	432a      	orrs	r2, r5
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	e78c      	b.n	800121a <HAL_PCD_IRQHandler+0x12>
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001300:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8001304:	07da      	lsls	r2, r3, #31
 8001306:	f100 81d7 	bmi.w	80016b8 <HAL_PCD_IRQHandler+0x4b0>
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800130a:	6820      	ldr	r0, [r4, #0]
 800130c:	6943      	ldr	r3, [r0, #20]
 800130e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001312:	6143      	str	r3, [r0, #20]
 8001314:	e7ac      	b.n	8001270 <HAL_PCD_IRQHandler+0x68>
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001316:	2208      	movs	r2, #8
 8001318:	4630      	mov	r0, r6
 800131a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001322:	f001 f805 	bl	8002330 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001326:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800132a:	f3c5 150a 	ubfx	r5, r5, #4, #11
 800132e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001332:	4415      	add	r5, r2
 8001334:	f8c3 5214 	str.w	r5, [r3, #532]	; 0x214
 8001338:	6820      	ldr	r0, [r4, #0]
 800133a:	e7b8      	b.n	80012ae <HAL_PCD_IRQHandler+0xa6>
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800133c:	f001 f8a0 	bl	8002480 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001340:	6820      	ldr	r0, [r4, #0]
 8001342:	f000 fde1 	bl	8001f08 <USB_GetDevSpeed>
 8001346:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001348:	6825      	ldr	r5, [r4, #0]
 800134a:	f001 fb95 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 800134e:	7b22      	ldrb	r2, [r4, #12]
 8001350:	4601      	mov	r1, r0
 8001352:	4628      	mov	r0, r5
 8001354:	f000 fc34 	bl	8001bc0 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff fb87 	bl	8000a6c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800135e:	6820      	ldr	r0, [r4, #0]
 8001360:	6943      	ldr	r3, [r0, #20]
 8001362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001366:	6143      	str	r3, [r0, #20]
 8001368:	e78d      	b.n	8001286 <HAL_PCD_IRQHandler+0x7e>
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800136a:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 800136e:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001370:	6820      	ldr	r0, [r4, #0]
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001372:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001376:	2110      	movs	r1, #16
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001378:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800137a:	f000 fdb3 	bl	8001ee4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137e:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8001382:	f1be 0f00 	cmp.w	lr, #0
 8001386:	d014      	beq.n	80013b2 <HAL_PCD_IRQHandler+0x1aa>
 8001388:	f506 6330 	add.w	r3, r6, #2816	; 0xb00
 800138c:	2000      	movs	r0, #0
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800138e:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 8001392:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001396:	3001      	adds	r0, #1
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001398:	6097      	str	r7, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800139a:	6811      	ldr	r1, [r2, #0]
 800139c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80013a0:	6011      	str	r1, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80013a2:	609f      	str	r7, [r3, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80013a4:	681a      	ldr	r2, [r3, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a6:	4570      	cmp	r0, lr
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80013a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80013ac:	f843 2b20 	str.w	r2, [r3], #32
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b0:	d1ef      	bne.n	8001392 <HAL_PCD_IRQHandler+0x18a>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80013b2:	69eb      	ldr	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80013b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80013b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80013ba:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80013bc:	2a00      	cmp	r2, #0
 80013be:	f000 817f 	beq.w	80016c0 <HAL_PCD_IRQHandler+0x4b8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80013c2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80013c6:	f043 030b 	orr.w	r3, r3, #11
 80013ca:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80013ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80013d0:	f043 030b 	orr.w	r3, r3, #11
 80013d4:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013d6:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013da:	7c21      	ldrb	r1, [r4, #16]
 80013dc:	6820      	ldr	r0, [r4, #0]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013e2:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013e6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80013ea:	f001 f865 	bl	80024b8 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013ee:	6820      	ldr	r0, [r4, #0]
 80013f0:	6943      	ldr	r3, [r0, #20]
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	6143      	str	r3, [r0, #20]
 80013f8:	e73f      	b.n	800127a <HAL_PCD_IRQHandler+0x72>
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013fa:	6820      	ldr	r0, [r4, #0]
 80013fc:	f001 f816 	bl	800242c <USB_ReadDevAllInEpInterrupt>

      epnum = 0U;

      while (ep_intr != 0U)
 8001400:	4680      	mov	r8, r0
 8001402:	6820      	ldr	r0, [r4, #0]
 8001404:	f1b8 0f00 	cmp.w	r8, #0
 8001408:	f43f af27 	beq.w	800125a <HAL_PCD_IRQHandler+0x52>
 800140c:	4627      	mov	r7, r4
 800140e:	f506 6a10 	add.w	sl, r6, #2304	; 0x900
 8001412:	f04f 0b00 	mov.w	fp, #0
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001416:	9602      	str	r6, [sp, #8]
 8001418:	e009      	b.n	800142e <HAL_PCD_IRQHandler+0x226>
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);

      epnum = 0U;

      while (ep_intr != 0U)
 800141a:	ea5f 0858 	movs.w	r8, r8, lsr #1
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
          }
        }
        epnum++;
 800141e:	f10b 0b01 	add.w	fp, fp, #1
 8001422:	f107 071c 	add.w	r7, r7, #28
 8001426:	f10a 0a20 	add.w	sl, sl, #32
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);

      epnum = 0U;

      while (ep_intr != 0U)
 800142a:	f000 80b6 	beq.w	800159a <HAL_PCD_IRQHandler+0x392>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800142e:	f018 0f01 	tst.w	r8, #1
 8001432:	d0f2      	beq.n	800141a <HAL_PCD_IRQHandler+0x212>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001434:	fa5f f98b 	uxtb.w	r9, fp
 8001438:	4649      	mov	r1, r9
 800143a:	f001 f809 	bl	8002450 <USB_ReadDevInEPInterrupt>
 800143e:	4605      	mov	r5, r0

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001440:	07e8      	lsls	r0, r5, #31
 8001442:	d519      	bpl.n	8001478 <HAL_PCD_IRQHandler+0x270>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001444:	9b02      	ldr	r3, [sp, #8]

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);

            if (hpcd->Init.dma_enable == 1U)
 8001446:	6920      	ldr	r0, [r4, #16]
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001448:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 800144c:	2601      	movs	r6, #1
 800144e:	f00b 020f 	and.w	r2, fp, #15
 8001452:	fa06 f202 	lsl.w	r2, r6, r2
 8001456:	ea21 0202 	bic.w	r2, r1, r2

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);

            if (hpcd->Init.dma_enable == 1U)
 800145a:	42b0      	cmp	r0, r6
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800145c:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001460:	f8ca 6008 	str.w	r6, [sl, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001464:	f000 8163 	beq.w	800172e <HAL_PCD_IRQHandler+0x526>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001468:	4649      	mov	r1, r9
 800146a:	4620      	mov	r0, r4
 800146c:	f7ff faf0 	bl	8000a50 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001470:	6921      	ldr	r1, [r4, #16]
 8001472:	2901      	cmp	r1, #1
 8001474:	f000 814d 	beq.w	8001712 <HAL_PCD_IRQHandler+0x50a>
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001478:	0729      	lsls	r1, r5, #28
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800147a:	bf44      	itt	mi
 800147c:	2308      	movmi	r3, #8
 800147e:	f8ca 3008 	strmi.w	r3, [sl, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001482:	06ea      	lsls	r2, r5, #27
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001484:	bf44      	itt	mi
 8001486:	2310      	movmi	r3, #16
 8001488:	f8ca 3008 	strmi.w	r3, [sl, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800148c:	066b      	lsls	r3, r5, #25
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800148e:	bf44      	itt	mi
 8001490:	2340      	movmi	r3, #64	; 0x40
 8001492:	f8ca 3008 	strmi.w	r3, [sl, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001496:	07ae      	lsls	r6, r5, #30
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001498:	bf44      	itt	mi
 800149a:	2302      	movmi	r3, #2
 800149c:	f8ca 3008 	strmi.w	r3, [sl, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014a0:	0628      	lsls	r0, r5, #24
 80014a2:	f100 809d 	bmi.w	80015e0 <HAL_PCD_IRQHandler+0x3d8>
 80014a6:	6820      	ldr	r0, [r4, #0]
 80014a8:	e7b7      	b.n	800141a <HAL_PCD_IRQHandler+0x212>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff fb14 	bl	8000ad8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	6943      	ldr	r3, [r0, #20]
 80014b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014b8:	6143      	str	r3, [r0, #20]
 80014ba:	e714      	b.n	80012e6 <HAL_PCD_IRQHandler+0xde>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014bc:	f000 ffae 	bl	800241c <USB_ReadDevAllOutEpInterrupt>

      while (ep_intr != 0U)
 80014c0:	4605      	mov	r5, r0
 80014c2:	2800      	cmp	r0, #0
 80014c4:	f000 81c5 	beq.w	8001852 <HAL_PCD_IRQHandler+0x64a>
 80014c8:	f04f 0900 	mov.w	r9, #0
 80014cc:	6820      	ldr	r0, [r4, #0]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014ce:	9602      	str	r6, [sp, #8]
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 80014d0:	46c8      	mov	r8, r9
 80014d2:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 80014d6:	46a2      	mov	sl, r4
 80014d8:	e009      	b.n	80014ee <HAL_PCD_IRQHandler+0x2e6>
 80014da:	086d      	lsrs	r5, r5, #1
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
          }
        }
        epnum++;
 80014dc:	f108 0801 	add.w	r8, r8, #1
 80014e0:	f107 0720 	add.w	r7, r7, #32
 80014e4:	f109 0920 	add.w	r9, r9, #32
 80014e8:	f10a 0a1c 	add.w	sl, sl, #28
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 80014ec:	d057      	beq.n	800159e <HAL_PCD_IRQHandler+0x396>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014ee:	07eb      	lsls	r3, r5, #31
 80014f0:	d5f3      	bpl.n	80014da <HAL_PCD_IRQHandler+0x2d2>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014f2:	fa5f f688 	uxtb.w	r6, r8
 80014f6:	4631      	mov	r1, r6
 80014f8:	f000 ffa0 	bl	800243c <USB_ReadDevOutEPInterrupt>

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014fc:	f010 0f01 	tst.w	r0, #1

      while (ep_intr != 0U)
      {
        if ((ep_intr & 0x1U) != 0U)
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001500:	4683      	mov	fp, r0

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001502:	d14e      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x39a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001504:	f01b 0f08 	tst.w	fp, #8
 8001508:	f040 80b4 	bne.w	8001674 <HAL_PCD_IRQHandler+0x46c>
 800150c:	6820      	ldr	r0, [r4, #0]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800150e:	f01b 0f10 	tst.w	fp, #16
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001512:	bf1c      	itt	ne
 8001514:	2310      	movne	r3, #16
 8001516:	60bb      	strne	r3, [r7, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001518:	f01b 0f20 	tst.w	fp, #32
 800151c:	d005      	beq.n	800152a <HAL_PCD_IRQHandler+0x322>
          {
            if (hpcd->Init.dma_enable == 1U)
 800151e:	6921      	ldr	r1, [r4, #16]
 8001520:	2901      	cmp	r1, #1
 8001522:	f000 8153 	beq.w	80017cc <HAL_PCD_IRQHandler+0x5c4>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001526:	2320      	movs	r3, #32
 8001528:	60bb      	str	r3, [r7, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800152a:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800152e:	bf1c      	itt	ne
 8001530:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8001534:	60bb      	strne	r3, [r7, #8]
 8001536:	e7d0      	b.n	80014da <HAL_PCD_IRQHandler+0x2d2>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001538:	4620      	mov	r0, r4
 800153a:	2100      	movs	r1, #0
 800153c:	f7ff fac8 	bl	8000ad0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001540:	6820      	ldr	r0, [r4, #0]
 8001542:	6943      	ldr	r3, [r0, #20]
 8001544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001548:	6143      	str	r3, [r0, #20]
 800154a:	e6c0      	b.n	80012ce <HAL_PCD_IRQHandler+0xc6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff fa89 	bl	8000a64 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001552:	6820      	ldr	r0, [r4, #0]
 8001554:	6943      	ldr	r3, [r0, #20]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	6143      	str	r3, [r0, #20]
 800155c:	e6b1      	b.n	80012c2 <HAL_PCD_IRQHandler+0xba>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800155e:	4620      	mov	r0, r4
 8001560:	2100      	movs	r1, #0
 8001562:	f7ff fab1 	bl	8000ac8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001566:	6820      	ldr	r0, [r4, #0]
 8001568:	6943      	ldr	r3, [r0, #20]
 800156a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156e:	6143      	str	r3, [r0, #20]
 8001570:	e6b3      	b.n	80012da <HAL_PCD_IRQHandler+0xd2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;

      if (hpcd->LPM_State == LPM_L1)
 8001572:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001576:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 800157a:	2901      	cmp	r1, #1

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800157c:	f022 0201 	bic.w	r2, r2, #1
 8001580:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8001584:	f000 80f2 	beq.w	800176c <HAL_PCD_IRQHandler+0x564>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff fa99 	bl	8000ac0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800158e:	6820      	ldr	r0, [r4, #0]
 8001590:	6943      	ldr	r3, [r0, #20]
 8001592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001596:	6143      	str	r3, [r0, #20]
 8001598:	e665      	b.n	8001266 <HAL_PCD_IRQHandler+0x5e>
 800159a:	9e02      	ldr	r6, [sp, #8]
 800159c:	e65d      	b.n	800125a <HAL_PCD_IRQHandler+0x52>
 800159e:	9e02      	ldr	r6, [sp, #8]
 80015a0:	e655      	b.n	800124e <HAL_PCD_IRQHandler+0x46>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015a2:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80015a4:	f8d4 e010 	ldr.w	lr, [r4, #16]
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80015a8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015ac:	2101      	movs	r1, #1
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80015ae:	444b      	add	r3, r9
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015b0:	60b9      	str	r1, [r7, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80015b2:	458e      	cmp	lr, r1
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80015b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80015b6:	f8d3 c008 	ldr.w	ip, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80015ba:	f000 80ed 	beq.w	8001798 <HAL_PCD_IRQHandler+0x590>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80015be:	49a8      	ldr	r1, [pc, #672]	; (8001860 <HAL_PCD_IRQHandler+0x658>)
 80015c0:	428a      	cmp	r2, r1
 80015c2:	d108      	bne.n	80015d6 <HAL_PCD_IRQHandler+0x3ce>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80015c4:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 80015c8:	f040 8133 	bne.w	8001832 <HAL_PCD_IRQHandler+0x62a>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015cc:	f01c 0f20 	tst.w	ip, #32
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015d0:	bf1c      	itt	ne
 80015d2:	2120      	movne	r1, #32
 80015d4:	6099      	strne	r1, [r3, #8]
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80015d6:	4631      	mov	r1, r6
 80015d8:	4620      	mov	r0, r4
 80015da:	f7ff fa2f 	bl	8000a3c <HAL_PCD_DataOutStageCallback>
 80015de:	e791      	b.n	8001504 <HAL_PCD_IRQHandler+0x2fc>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80015e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015e4:	6826      	ldr	r6, [r4, #0]
 80015e6:	9603      	str	r6, [sp, #12]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80015e8:	428a      	cmp	r2, r1
 80015ea:	d841      	bhi.n	8001670 <HAL_PCD_IRQHandler+0x468>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80015ec:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 80015f0:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 80015f4:	4618      	mov	r0, r3
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;

  if (len > ep->maxpacket)
 80015f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80015f8:	9004      	str	r0, [sp, #16]
  if (ep->xfer_count > ep->xfer_len)
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80015fa:	1a8d      	subs	r5, r1, r2
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80015fc:	429d      	cmp	r5, r3
 80015fe:	6980      	ldr	r0, [r0, #24]
 8001600:	46ae      	mov	lr, r5
 8001602:	bf28      	it	cs
 8001604:	469e      	movcs	lr, r3
 8001606:	b280      	uxth	r0, r0
 8001608:	f10e 0e03 	add.w	lr, lr, #3
 800160c:	ebb0 0f9e 	cmp.w	r0, lr, lsr #2
 8001610:	d32c      	bcc.n	800166c <HAL_PCD_IRQHandler+0x464>
 8001612:	428a      	cmp	r2, r1
 8001614:	f080 8093 	bcs.w	800173e <HAL_PCD_IRQHandler+0x536>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001618:	2900      	cmp	r1, #0
 800161a:	f000 8090 	beq.w	800173e <HAL_PCD_IRQHandler+0x536>
 800161e:	f8cd b014 	str.w	fp, [sp, #20]
 8001622:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001624:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001628:	e005      	b.n	8001636 <HAL_PCD_IRQHandler+0x42e>
 800162a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800162c:	4295      	cmp	r5, r2
 800162e:	f240 8083 	bls.w	8001738 <HAL_PCD_IRQHandler+0x530>
 8001632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001634:	1aad      	subs	r5, r5, r2
 8001636:	429d      	cmp	r5, r3
 8001638:	bf28      	it	cs
 800163a:	461d      	movcs	r5, r3
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800163c:	7c23      	ldrb	r3, [r4, #16]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	464a      	mov	r2, r9
 8001642:	b2ab      	uxth	r3, r5
 8001644:	4630      	mov	r0, r6
 8001646:	f000 fe5d 	bl	8002304 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800164a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    ep->xfer_count += len;
 800164c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800164e:	4429      	add	r1, r5
    ep->xfer_count += len;
 8001650:	442a      	add	r2, r5
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001652:	64b9      	str	r1, [r7, #72]	; 0x48
    ep->xfer_count += len;
 8001654:	657a      	str	r2, [r7, #84]	; 0x54
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001656:	f8db 3018 	ldr.w	r3, [fp, #24]
 800165a:	3503      	adds	r5, #3
 800165c:	b29b      	uxth	r3, r3
 800165e:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 8001662:	d2e2      	bcs.n	800162a <HAL_PCD_IRQHandler+0x422>
 8001664:	f8dd b014 	ldr.w	fp, [sp, #20]
 8001668:	6826      	ldr	r6, [r4, #0]
 800166a:	6d39      	ldr	r1, [r7, #80]	; 0x50

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if (ep->xfer_len <= ep->xfer_count)
 800166c:	4291      	cmp	r1, r2
 800166e:	d966      	bls.n	800173e <HAL_PCD_IRQHandler+0x536>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001670:	4630      	mov	r0, r6
 8001672:	e6d2      	b.n	800141a <HAL_PCD_IRQHandler+0x212>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001674:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8001676:	6921      	ldr	r1, [r4, #16]
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800167a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800167e:	444b      	add	r3, r9

  if (hpcd->Init.dma_enable == 1U)
 8001680:	2901      	cmp	r1, #1
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001682:	6898      	ldr	r0, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001684:	f000 8081 	beq.w	800178a <HAL_PCD_IRQHandler+0x582>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001688:	4975      	ldr	r1, [pc, #468]	; (8001860 <HAL_PCD_IRQHandler+0x658>)
 800168a:	428a      	cmp	r2, r1
 800168c:	d065      	beq.n	800175a <HAL_PCD_IRQHandler+0x552>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800168e:	4620      	mov	r0, r4
 8001690:	9203      	str	r2, [sp, #12]
 8001692:	f7ff f9cd 	bl	8000a30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001696:	4b73      	ldr	r3, [pc, #460]	; (8001864 <HAL_PCD_IRQHandler+0x65c>)
 8001698:	9a03      	ldr	r2, [sp, #12]
 800169a:	429a      	cmp	r2, r3
 800169c:	d903      	bls.n	80016a6 <HAL_PCD_IRQHandler+0x49e>
 800169e:	6921      	ldr	r1, [r4, #16]
 80016a0:	2901      	cmp	r1, #1
 80016a2:	f000 80d0 	beq.w	8001846 <HAL_PCD_IRQHandler+0x63e>

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016a6:	2308      	movs	r3, #8
 80016a8:	6820      	ldr	r0, [r4, #0]
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	e72f      	b.n	800150e <HAL_PCD_IRQHandler+0x306>
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80016ae:	4620      	mov	r0, r4
 80016b0:	f7ff fa16 	bl	8000ae0 <HAL_PCD_DisconnectCallback>
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	e61f      	b.n	80012f8 <HAL_PCD_IRQHandler+0xf0>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff f9e9 	bl	8000a90 <HAL_PCD_SuspendCallback>
 80016be:	e624      	b.n	800130a <HAL_PCD_IRQHandler+0x102>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016c0:	696b      	ldr	r3, [r5, #20]
 80016c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016ca:	616b      	str	r3, [r5, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016cc:	692b      	ldr	r3, [r5, #16]
 80016ce:	f043 030b 	orr.w	r3, r3, #11
 80016d2:	612b      	str	r3, [r5, #16]
 80016d4:	e67f      	b.n	80013d6 <HAL_PCD_IRQHandler+0x1ce>

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016da:	402b      	ands	r3, r5
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f43f ade6 	beq.w	80012ae <HAL_PCD_IRQHandler+0xa6>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016e2:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 80016e6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80016ea:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80016ee:	462a      	mov	r2, r5
 80016f0:	4630      	mov	r0, r6
 80016f2:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 80016f6:	f000 fe1b 	bl	8002330 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016fa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016fe:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001702:	442b      	add	r3, r5
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001704:	4415      	add	r5, r2
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001706:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800170a:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 800170e:	6820      	ldr	r0, [r4, #0]
 8001710:	e5cd      	b.n	80012ae <HAL_PCD_IRQHandler+0xa6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001712:	f1bb 0f00 	cmp.w	fp, #0
 8001716:	f47f aeaf 	bne.w	8001478 <HAL_PCD_IRQHandler+0x270>
 800171a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800171c:	2b00      	cmp	r3, #0
 800171e:	f47f aeab 	bne.w	8001478 <HAL_PCD_IRQHandler+0x270>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001722:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001726:	6820      	ldr	r0, [r4, #0]
 8001728:	f000 fec6 	bl	80024b8 <USB_EP0_OutStart>
 800172c:	e6a4      	b.n	8001478 <HAL_PCD_IRQHandler+0x270>

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);

            if (hpcd->Init.dma_enable == 1U)
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800172e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001732:	4413      	add	r3, r2
 8001734:	64bb      	str	r3, [r7, #72]	; 0x48
 8001736:	e697      	b.n	8001468 <HAL_PCD_IRQHandler+0x260>
 8001738:	f8dd b014 	ldr.w	fp, [sp, #20]
 800173c:	6826      	ldr	r6, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800173e:	9b03      	ldr	r3, [sp, #12]
 8001740:	2001      	movs	r0, #1
 8001742:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8001746:	f00b 010f 	and.w	r1, fp, #15
 800174a:	fa00 f101 	lsl.w	r1, r0, r1
 800174e:	ea22 0201 	bic.w	r2, r2, r1
 8001752:	4630      	mov	r0, r6
 8001754:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8001758:	e65f      	b.n	800141a <HAL_PCD_IRQHandler+0x212>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800175a:	0406      	lsls	r6, r0, #16
 800175c:	d502      	bpl.n	8001764 <HAL_PCD_IRQHandler+0x55c>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800175e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001762:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff f963 	bl	8000a30 <HAL_PCD_SetupStageCallback>
 800176a:	e798      	b.n	800169e <HAL_PCD_IRQHandler+0x496>
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;

      if (hpcd->LPM_State == LPM_L1)
      {
        hpcd->LPM_State = LPM_L0;
 800176c:	2100      	movs	r1, #0
 800176e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001772:	4620      	mov	r0, r4
 8001774:	f000 f9c4 	bl	8001b00 <HAL_PCDEx_LPM_Callback>
 8001778:	e709      	b.n	800158e <HAL_PCD_IRQHandler+0x386>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800177a:	2220      	movs	r2, #32
 800177c:	609a      	str	r2, [r3, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800177e:	f01b 0f08 	tst.w	fp, #8
 8001782:	f43f aec4 	beq.w	800150e <HAL_PCD_IRQHandler+0x306>
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001786:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001788:	6898      	ldr	r0, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800178a:	4936      	ldr	r1, [pc, #216]	; (8001864 <HAL_PCD_IRQHandler+0x65c>)
 800178c:	428a      	cmp	r2, r1
 800178e:	d8e4      	bhi.n	800175a <HAL_PCD_IRQHandler+0x552>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff f94d 	bl	8000a30 <HAL_PCD_SetupStageCallback>
 8001796:	e786      	b.n	80016a6 <HAL_PCD_IRQHandler+0x49e>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001798:	f01c 0f08 	tst.w	ip, #8
 800179c:	d01c      	beq.n	80017d8 <HAL_PCD_IRQHandler+0x5d0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800179e:	4931      	ldr	r1, [pc, #196]	; (8001864 <HAL_PCD_IRQHandler+0x65c>)
 80017a0:	428a      	cmp	r2, r1
 80017a2:	d905      	bls.n	80017b0 <HAL_PCD_IRQHandler+0x5a8>
 80017a4:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80017a8:	bf1c      	itt	ne
 80017aa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 80017ae:	609a      	strne	r2, [r3, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80017b0:	4620      	mov	r0, r4
 80017b2:	9303      	str	r3, [sp, #12]
 80017b4:	f7ff f93c 	bl	8000a30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017b8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80017bc:	2101      	movs	r1, #1
 80017be:	6820      	ldr	r0, [r4, #0]
 80017c0:	f000 fe7a 	bl	80024b8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017c4:	9b03      	ldr	r3, [sp, #12]
 80017c6:	2208      	movs	r2, #8
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	e69b      	b.n	8001504 <HAL_PCD_IRQHandler+0x2fc>
          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
          {
            if (hpcd->Init.dma_enable == 1U)
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017cc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80017d0:	f000 fe72 	bl	80024b8 <USB_EP0_OutStart>
 80017d4:	6820      	ldr	r0, [r4, #0]
 80017d6:	e6a6      	b.n	8001526 <HAL_PCD_IRQHandler+0x31e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80017d8:	f01c 0f20 	tst.w	ip, #32
 80017dc:	d1cd      	bne.n	800177a <HAL_PCD_IRQHandler+0x572>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80017de:	f01c 0f28 	tst.w	ip, #40	; 0x28
 80017e2:	d1cc      	bne.n	800177e <HAL_PCD_IRQHandler+0x576>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80017e4:	491f      	ldr	r1, [pc, #124]	; (8001864 <HAL_PCD_IRQHandler+0x65c>)
 80017e6:	428a      	cmp	r2, r1
 80017e8:	d902      	bls.n	80017f0 <HAL_PCD_IRQHandler+0x5e8>
 80017ea:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 80017ee:	d132      	bne.n	8001856 <HAL_PCD_IRQHandler+0x64e>
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80017f0:	691b      	ldr	r3, [r3, #16]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80017f2:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80017f6:	f8da 0204 	ldr.w	r0, [sl, #516]	; 0x204
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
 80017fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fe:	1ac3      	subs	r3, r0, r3
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001800:	4408      	add	r0, r1
 8001802:	f8ca 0208 	str.w	r0, [sl, #520]	; 0x208

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001806:	4631      	mov	r1, r6
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
 8001808:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800180c:	4620      	mov	r0, r4
 800180e:	f7ff f915 	bl	8000a3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001812:	f1b8 0f00 	cmp.w	r8, #0
 8001816:	f47f ae75 	bne.w	8001504 <HAL_PCD_IRQHandler+0x2fc>
 800181a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800181e:	2b00      	cmp	r3, #0
 8001820:	f47f ae70 	bne.w	8001504 <HAL_PCD_IRQHandler+0x2fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001824:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001828:	2101      	movs	r1, #1
 800182a:	6820      	ldr	r0, [r4, #0]
 800182c:	f000 fe44 	bl	80024b8 <USB_EP0_OutStart>
 8001830:	e668      	b.n	8001504 <HAL_PCD_IRQHandler+0x2fc>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001832:	f44f 4200 	mov.w	r2, #32768	; 0x8000
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001836:	f01b 0f08 	tst.w	fp, #8
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800183a:	609a      	str	r2, [r3, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800183c:	f43f ae67 	beq.w	800150e <HAL_PCD_IRQHandler+0x306>
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001840:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001842:	6898      	ldr	r0, [r3, #8]
 8001844:	e720      	b.n	8001688 <HAL_PCD_IRQHandler+0x480>
  HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001846:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800184a:	6820      	ldr	r0, [r4, #0]
 800184c:	f000 fe34 	bl	80024b8 <USB_EP0_OutStart>
 8001850:	e729      	b.n	80016a6 <HAL_PCD_IRQHandler+0x49e>
 8001852:	6820      	ldr	r0, [r4, #0]
 8001854:	e4fb      	b.n	800124e <HAL_PCD_IRQHandler+0x46>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001856:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	e78f      	b.n	800177e <HAL_PCD_IRQHandler+0x576>
 800185e:	bf00      	nop
 8001860:	4f54310a 	.word	0x4f54310a
 8001864:	4f54300a 	.word	0x4f54300a

08001868 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001868:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800186c:	2a01      	cmp	r2, #1
 800186e:	d101      	bne.n	8001874 <HAL_PCD_SetAddress+0xc>
 8001870:	2002      	movs	r0, #2
 8001872:	4770      	bx	lr
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001874:	b510      	push	{r4, lr}
 8001876:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001878:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800187a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800187e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001882:	6800      	ldr	r0, [r0, #0]
 8001884:	f000 fd9e 	bl	80023c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001888:	2000      	movs	r0, #0
 800188a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800188e:	bd10      	pop	{r4, pc}

08001890 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001892:	f001 050f 	and.w	r5, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001896:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 800189a:	00a4      	lsls	r4, r4, #2
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800189c:	0609      	lsls	r1, r1, #24
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 800189e:	eb00 0604 	add.w	r6, r0, r4
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018a2:	d41f      	bmi.n	80018e4 <HAL_PCD_EP_Open+0x54>
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 80018a4:	2700      	movs	r7, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018a6:	f506 71fe 	add.w	r1, r6, #508	; 0x1fc
    ep->is_in = 0U;
 80018aa:	f886 71fd 	strb.w	r7, [r6, #509]	; 0x1fd

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80018ae:	784c      	ldrb	r4, [r1, #1]
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018b0:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 80018b2:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80018b4:	70cb      	strb	r3, [r1, #3]

  if (ep->is_in != 0U)
 80018b6:	b104      	cbz	r4, 80018ba <HAL_PCD_EP_Open+0x2a>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018b8:	80cd      	strh	r5, [r1, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018ba:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80018bc:	bf04      	itt	eq
 80018be:	2300      	moveq	r3, #0
 80018c0:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80018c2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_PCD_EP_Open+0x3e>
 80018ca:	2002      	movs	r0, #2
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return ret;
}
 80018cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ep_type == EP_TYPE_BULK)
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 80018ce:	2301      	movs	r3, #1
 80018d0:	4604      	mov	r4, r0
 80018d2:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018d6:	6800      	ldr	r0, [r0, #0]
 80018d8:	f000 fb22 	bl	8001f20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018dc:	2000      	movs	r0, #0
 80018de:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return ret;
 80018e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 80018e4:	2701      	movs	r7, #1
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e6:	f106 013c 	add.w	r1, r6, #60	; 0x3c
    ep->is_in = 1U;
 80018ea:	f886 703d 	strb.w	r7, [r6, #61]	; 0x3d
 80018ee:	e7de      	b.n	80018ae <HAL_PCD_EP_Open+0x1e>

080018f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f0:	f001 020f 	and.w	r2, r1, #15
 80018f4:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80018fa:	009b      	lsls	r3, r3, #2
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018fc:	0609      	lsls	r1, r1, #24
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 80018fe:	eb00 0403 	add.w	r4, r0, r3
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001902:	d416      	bmi.n	8001932 <HAL_PCD_EP_Close+0x42>
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001904:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001906:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 800190a:	f884 51fd 	strb.w	r5, [r4, #509]	; 0x1fd
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800190e:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8001910:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_PCD_EP_Close+0x2c>
 8001918:	2002      	movs	r0, #2
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 800191a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 800191c:	2301      	movs	r3, #1
 800191e:	4604      	mov	r4, r0
 8001920:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001924:	6800      	ldr	r0, [r0, #0]
 8001926:	f000 fb3f 	bl	8001fa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800192a:	2000      	movs	r0, #0
 800192c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001930:	bd38      	pop	{r3, r4, r5, pc}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 8001932:	2501      	movs	r5, #1
{
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001934:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 8001938:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 800193c:	e7e7      	b.n	800190e <HAL_PCD_EP_Close+0x1e>
 800193e:	bf00      	nop

08001940 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001940:	b570      	push	{r4, r5, r6, lr}
 8001942:	f001 060f 	and.w	r6, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001946:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 800194a:	00a4      	lsls	r4, r4, #2

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800194c:	1905      	adds	r5, r0, r4
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800194e:	2100      	movs	r1, #0
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001950:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001954:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
  ep->is_in = 0U;
 8001958:	f885 11fd 	strb.w	r1, [r5, #509]	; 0x1fd

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
 800195c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8001960:	f885 61fc 	strb.w	r6, [r5, #508]	; 0x1fc

  if (hpcd->Init.dma_enable == 1U)
 8001964:	6903      	ldr	r3, [r0, #16]
 8001966:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001968:	bf08      	it	eq
 800196a:	f8c5 220c 	streq.w	r2, [r5, #524]	; 0x20c
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800196e:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001972:	b2da      	uxtb	r2, r3
 8001974:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001976:	b11e      	cbz	r6, 8001980 <HAL_PCD_EP_Receive+0x40>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001978:	f000 fb60 	bl	800203c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800197c:	2000      	movs	r0, #0
 800197e:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001980:	f000 fc42 	bl	8002208 <USB_EP0StartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }

  return HAL_OK;
}
 8001984:	2000      	movs	r0, #0
 8001986:	bd70      	pop	{r4, r5, r6, pc}

08001988 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001988:	f001 010f 	and.w	r1, r1, #15
 800198c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001990:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8001994:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800199e:	f001 060f 	and.w	r6, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a2:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 80019a6:	00a4      	lsls	r4, r4, #2

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019a8:	1905      	adds	r5, r0, r4
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 80019aa:	2101      	movs	r1, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80019ac:	2700      	movs	r7, #0
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019ae:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 80019b0:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
 80019b4:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
  ep->is_in = 1U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b6:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80019ba:	656f      	str	r7, [r5, #84]	; 0x54
  ep->is_in = 1U;
  ep->num = ep_addr & EP_ADDR_MSK;

  if (hpcd->Init.dma_enable == 1U)
 80019bc:	6903      	ldr	r3, [r0, #16]
 80019be:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019c0:	bf08      	it	eq
 80019c2:	64ea      	streq	r2, [r5, #76]	; 0x4c
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c4:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019cc:	b11e      	cbz	r6, 80019d6 <HAL_PCD_EP_Transmit+0x3a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019ce:	f000 fb35 	bl	800203c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80019d2:	2000      	movs	r0, #0
 80019d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019d6:	f000 fc17 	bl	8002208 <USB_EP0StartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }

  return HAL_OK;
}
 80019da:	2000      	movs	r0, #0
 80019dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019de:	bf00      	nop

080019e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e0:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019e2:	6843      	ldr	r3, [r0, #4]
 80019e4:	f001 040f 	and.w	r4, r1, #15
 80019e8:	429c      	cmp	r4, r3
 80019ea:	d813      	bhi.n	8001a14 <HAL_PCD_EP_SetStall+0x34>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019ec:	060b      	lsls	r3, r1, #24
 80019ee:	d41e      	bmi.n	8001a2e <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80019f4:	0089      	lsls	r1, r1, #2
    ep->is_in = 0U;
 80019f6:	1843      	adds	r3, r0, r1
 80019f8:	2200      	movs	r2, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019fa:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80019fe:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  }

  ep->is_stall = 1U;
 8001a02:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a04:	700c      	strb	r4, [r1, #0]
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
 8001a06:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001a08:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d103      	bne.n	8001a18 <HAL_PCD_EP_SetStall+0x38>
 8001a10:	2002      	movs	r0, #2
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001a12:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	4605      	mov	r5, r0
  }

  ep->is_stall = 1U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001a1a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a1e:	6800      	ldr	r0, [r0, #0]
 8001a20:	f000 fc98 	bl	8002354 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a24:	b16c      	cbz	r4, 8001a42 <HAL_PCD_EP_SetStall+0x62>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc

  return HAL_OK;
 8001a2c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001a32:	0089      	lsls	r1, r1, #2
    ep->is_in = 1U;
 8001a34:	1843      	adds	r3, r0, r1
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a36:	4619      	mov	r1, r3
    ep->is_in = 1U;
 8001a38:	2201      	movs	r2, #1
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a3a:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001a40:	e7df      	b.n	8001a02 <HAL_PCD_EP_SetStall+0x22>
  __HAL_LOCK(hpcd);

  (void)USB_EPSetStall(hpcd->Instance, ep);
  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a42:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8001a46:	7c29      	ldrb	r1, [r5, #16]
 8001a48:	6828      	ldr	r0, [r5, #0]
 8001a4a:	f000 fd35 	bl	80024b8 <USB_EP0_OutStart>
 8001a4e:	e7ea      	b.n	8001a26 <HAL_PCD_EP_SetStall+0x46>

08001a50 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a50:	6842      	ldr	r2, [r0, #4]
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a52:	b538      	push	{r3, r4, r5, lr}
 8001a54:	f001 030f 	and.w	r3, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d817      	bhi.n	8001a8c <HAL_PCD_EP_ClrStall+0x3c>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a5c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a60:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8001a64:	ea4f 0181 	mov.w	r1, r1, lsl #2
    ep->is_in = 1U;
 8001a68:	eb00 0201 	add.w	r2, r0, r1
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a6c:	4611      	mov	r1, r2
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a6e:	d11a      	bne.n	8001aa6 <HAL_PCD_EP_ClrStall+0x56>
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001a70:	2400      	movs	r4, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	f502 71fe 	add.w	r1, r2, #508	; 0x1fc
    ep->is_in = 0U;
 8001a76:	f882 41fd 	strb.w	r4, [r2, #509]	; 0x1fd
  }

  ep->is_stall = 0U;
 8001a7a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a7c:	700b      	strb	r3, [r1, #0]
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->is_stall = 0U;
 8001a7e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001a80:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d103      	bne.n	8001a90 <HAL_PCD_EP_ClrStall+0x40>
 8001a88:	2002      	movs	r0, #2
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001a8a:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	bd38      	pop	{r3, r4, r5, pc}
 8001a90:	4604      	mov	r4, r0
  }

  ep->is_stall = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001a92:	2301      	movs	r3, #1
 8001a94:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a98:	6800      	ldr	r0, [r0, #0]
 8001a9a:	f000 fc7b 	bl	8002394 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a9e:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	bd38      	pop	{r3, r4, r5, pc}
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 8001aa6:	2401      	movs	r4, #1
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aa8:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001aaa:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
 8001aae:	e7e4      	b.n	8001a7a <HAL_PCD_EP_ClrStall+0x2a>

08001ab0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001ab0:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001ab2:	6805      	ldr	r5, [r0, #0]
 8001ab4:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 8001ab6:	b1c9      	cbz	r1, 8001aec <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ab8:	6aac      	ldr	r4, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001aba:	3901      	subs	r1, #1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001abc:	eb03 4414 	add.w	r4, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001ac0:	d00b      	beq.n	8001ada <HAL_PCDEx_SetTxFiFo+0x2a>
 8001ac2:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ac4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8001ac8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
    for (i = 0U; i < (fifo - 1U); i++)
 8001acc:	3301      	adds	r3, #1
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ace:	6840      	ldr	r0, [r0, #4]
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
    for (i = 0U; i < (fifo - 1U); i++)
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	428b      	cmp	r3, r1
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ad4:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
    for (i = 0U; i < (fifo - 1U); i++)
 8001ad8:	d3f4      	bcc.n	8001ac4 <HAL_PCDEx_SetTxFiFo+0x14>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001ada:	3140      	adds	r1, #64	; 0x40
 8001adc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001ae0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001ae4:	604c      	str	r4, [r1, #4]
  }

  return HAL_OK;
}
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	bc30      	pop	{r4, r5}
 8001aea:	4770      	bx	lr

  Tx_Offset = hpcd->Instance->GRXFSIZ;

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001aec:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 8001af0:	62ac      	str	r4, [r5, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001af2:	2000      	movs	r0, #0
 8001af4:	bc30      	pop	{r4, r5}
 8001af6:	4770      	bx	lr

08001af8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001af8:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001afa:	2000      	movs	r0, #0
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001afc:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001afe:	4770      	bx	lr

08001b00 <HAL_PCDEx_LPM_Callback>:
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <USB_CoreReset+0x30>)
 8001b06:	e001      	b.n	8001b0c <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	d010      	beq.n	8001b2e <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001b0c:	6902      	ldr	r2, [r0, #16]
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	dafa      	bge.n	8001b08 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001b12:	6903      	ldr	r3, [r0, #16]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <USB_CoreReset+0x30>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6103      	str	r3, [r0, #16]
 8001b1c:	e001      	b.n	8001b22 <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 8001b1e:	3a01      	subs	r2, #1
 8001b20:	d005      	beq.n	8001b2e <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001b22:	6903      	ldr	r3, [r0, #16]
 8001b24:	f013 0301 	ands.w	r3, r3, #1
 8001b28:	d1f9      	bne.n	8001b1e <USB_CoreReset+0x1a>

  return HAL_OK;
 8001b2a:	4618      	mov	r0, r3
}
 8001b2c:	4770      	bx	lr
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001b2e:	2003      	movs	r0, #3
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	00030d40 	.word	0x00030d40

08001b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001b38:	b084      	sub	sp, #16
 8001b3a:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001b3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001b3e:	ac05      	add	r4, sp, #20
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001b40:	2d01      	cmp	r5, #1
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001b42:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8001b46:	4601      	mov	r1, r0
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001b48:	d01f      	beq.n	8001b8a <USB_CoreInit+0x52>
    ret = USB_CoreReset(USBx);
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001b4a:	68c3      	ldr	r3, [r0, #12]
 8001b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b50:	60c3      	str	r3, [r0, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8001b52:	f7ff ffd7 	bl	8001b04 <USB_CoreReset>

    if (cfg.battery_charging_enable == 0U)
 8001b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b58:	b193      	cbz	r3, 8001b80 <USB_CoreInit+0x48>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001b5a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	638b      	str	r3, [r1, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8001b62:	9b08      	ldr	r3, [sp, #32]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d107      	bne.n	8001b78 <USB_CoreInit+0x40>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001b68:	688b      	ldr	r3, [r1, #8]
 8001b6a:	f043 0306 	orr.w	r3, r3, #6
 8001b6e:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001b70:	688b      	ldr	r3, [r1, #8]
 8001b72:	f043 0320 	orr.w	r3, r3, #32
 8001b76:	608b      	str	r3, [r1, #8]
  }

  return ret;
}
 8001b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b7c:	b004      	add	sp, #16
 8001b7e:	4770      	bx	lr
    ret = USB_CoreReset(USBx);

    if (cfg.battery_charging_enable == 0U)
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b80:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b86:	638b      	str	r3, [r1, #56]	; 0x38
 8001b88:	e7eb      	b.n	8001b62 <USB_CoreInit+0x2a>
{
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001b8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8001b8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
{
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001b94:	68c3      	ldr	r3, [r0, #12]
 8001b96:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b9e:	60c3      	str	r3, [r0, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001ba0:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001ba2:	2a01      	cmp	r2, #1

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001ba4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001ba8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001baa:	d003      	beq.n	8001bb4 <USB_CoreInit+0x7c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8001bac:	4608      	mov	r0, r1
 8001bae:	f7ff ffa9 	bl	8001b04 <USB_CoreReset>
 8001bb2:	e7d6      	b.n	8001b62 <USB_CoreInit+0x2a>

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001bb4:	68c3      	ldr	r3, [r0, #12]
 8001bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bba:	60c3      	str	r3, [r0, #12]
 8001bbc:	e7f6      	b.n	8001bac <USB_CoreInit+0x74>
 8001bbe:	bf00      	nop

08001bc0 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8001bc0:	2a02      	cmp	r2, #2
 8001bc2:	d00a      	beq.n	8001bda <USB_SetTurnaroundTime+0x1a>
 8001bc4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001bc8:	68c2      	ldr	r2, [r0, #12]
 8001bca:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001bce:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8001bd0:	68c2      	ldr	r2, [r0, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	4770      	bx	lr
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8001bda:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <USB_SetTurnaroundTime+0xd0>)
 8001bdc:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <USB_SetTurnaroundTime+0xd4>)
 8001bde:	440b      	add	r3, r1
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d943      	bls.n	8001c6c <USB_SetTurnaroundTime+0xac>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <USB_SetTurnaroundTime+0xd8>)
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <USB_SetTurnaroundTime+0xdc>)
 8001be8:	440b      	add	r3, r1
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d93b      	bls.n	8001c66 <USB_SetTurnaroundTime+0xa6>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8001bee:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <USB_SetTurnaroundTime+0xe0>)
 8001bf4:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d93a      	bls.n	8001c72 <USB_SetTurnaroundTime+0xb2>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8001bfc:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8001c00:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8001c04:	32a0      	adds	r2, #160	; 0xa0
 8001c06:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d937      	bls.n	8001c7e <USB_SetTurnaroundTime+0xbe>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <USB_SetTurnaroundTime+0xe4>)
 8001c10:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <USB_SetTurnaroundTime+0xe8>)
 8001c12:	440b      	add	r3, r1
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d92f      	bls.n	8001c78 <USB_SetTurnaroundTime+0xb8>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <USB_SetTurnaroundTime+0xec>)
 8001c1a:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8001c1e:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8001c22:	440b      	add	r3, r1
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d92d      	bls.n	8001c84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <USB_SetTurnaroundTime+0xf0>)
 8001c2a:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8001c2e:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8001c32:	440b      	add	r3, r1
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d9c5      	bls.n	8001bc4 <USB_SetTurnaroundTime+0x4>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8001c38:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8001c3c:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8001c40:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8001c44:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d91e      	bls.n	8001c8a <USB_SetTurnaroundTime+0xca>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <USB_SetTurnaroundTime+0xf4>)
 8001c4e:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8001c52:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8001c56:	440b      	add	r3, r1
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	bf8c      	ite	hi
 8001c5c:	f44f 53c0 	movhi.w	r3, #6144	; 0x1800
 8001c60:	f44f 53e0 	movls.w	r3, #7168	; 0x1c00
 8001c64:	e7b0      	b.n	8001bc8 <USB_SetTurnaroundTime+0x8>
 8001c66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c6a:	e7ad      	b.n	8001bc8 <USB_SetTurnaroundTime+0x8>
 8001c6c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c70:	e7aa      	b.n	8001bc8 <USB_SetTurnaroundTime+0x8>
 8001c72:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001c76:	e7a7      	b.n	8001bc8 <USB_SetTurnaroundTime+0x8>
 8001c78:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001c7c:	e7a4      	b.n	8001bc8 <USB_SetTurnaroundTime+0x8>
 8001c7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c82:	e7a1      	b.n	8001bc8 <USB_SetTurnaroundTime+0x8>
 8001c84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c88:	e79e      	b.n	8001bc8 <USB_SetTurnaroundTime+0x8>
 8001c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8e:	e79b      	b.n	8001bc8 <USB_SetTurnaroundTime+0x8>
 8001c90:	ff275340 	.word	0xff275340
 8001c94:	000c34ff 	.word	0x000c34ff
 8001c98:	ff1b1e40 	.word	0xff1b1e40
 8001c9c:	000f423f 	.word	0x000f423f
 8001ca0:	00124f7f 	.word	0x00124f7f
 8001ca4:	fee5b660 	.word	0xfee5b660
 8001ca8:	0016e35f 	.word	0x0016e35f
 8001cac:	feced300 	.word	0xfeced300
 8001cb0:	feb35bc0 	.word	0xfeb35bc0
 8001cb4:	fe5954e0 	.word	0xfe5954e0

08001cb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001cb8:	4602      	mov	r2, r0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
  return HAL_OK;
}
 8001cba:	2000      	movs	r0, #0
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001cbc:	6893      	ldr	r3, [r2, #8]
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6093      	str	r3, [r2, #8]
  return HAL_OK;
}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001cc8:	4602      	mov	r2, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
  return HAL_OK;
}
 8001cca:	2000      	movs	r0, #0
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001ccc:	6893      	ldr	r3, [r2, #8]
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6093      	str	r3, [r2, #8]
  return HAL_OK;
}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop

08001cd8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001cd8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001cda:	68c3      	ldr	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 8001cdc:	2901      	cmp	r1, #1
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001cde:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001ce2:	60c3      	str	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 8001ce4:	d00b      	beq.n	8001cfe <USB_SetCurrentMode+0x26>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
  }
  else if (mode == USB_DEVICE_MODE)
 8001ce6:	b941      	cbnz	r1, 8001cfa <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001ce8:	68c3      	ldr	r3, [r0, #12]
 8001cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cee:	60c3      	str	r3, [r0, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  HAL_Delay(50U);
 8001cf0:	2032      	movs	r0, #50	; 0x32
 8001cf2:	f001 f9d1 	bl	8003098 <HAL_Delay>

  return HAL_OK;
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	bd08      	pop	{r3, pc}
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
  }
  else
  {
    return HAL_ERROR;
 8001cfa:	2001      	movs	r0, #1
  }
  HAL_Delay(50U);

  return HAL_OK;
}
 8001cfc:	bd08      	pop	{r3, pc}
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);

  if (mode == USB_HOST_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001cfe:	68c3      	ldr	r3, [r0, #12]
 8001d00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d04:	60c3      	str	r3, [r0, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  HAL_Delay(50U);
 8001d06:	2032      	movs	r0, #50	; 0x32
 8001d08:	f001 f9c6 	bl	8003098 <HAL_Delay>

  return HAL_OK;
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	bd08      	pop	{r3, pc}

08001d10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001d10:	b084      	sub	sp, #16
 8001d12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d16:	ac0a      	add	r4, sp, #40	; 0x28
 8001d18:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8001d22:	9c14      	ldr	r4, [sp, #80]	; 0x50
  {
    USBx->DIEPTXF[i] = 0U;
 8001d24:	461e      	mov	r6, r3
 8001d26:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001d2a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001d2e:	3301      	adds	r3, #1
 8001d30:	2b0f      	cmp	r3, #15
  {
    USBx->DIEPTXF[i] = 0U;
 8001d32:	6056      	str	r6, [r2, #4]
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001d34:	d1f7      	bne.n	8001d26 <USB_DevInit+0x16>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8001d36:	2c00      	cmp	r4, #0
 8001d38:	f040 809c 	bne.w	8001e74 <USB_DevInit+0x164>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001d3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d42:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001d44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d46:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d4a:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001d4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001d5c:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 8001d60:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001d64:	2b01      	cmp	r3, #1

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001d66:	f500 6700 	add.w	r7, r0, #2048	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001d6a:	f000 809a 	beq.w	8001ea2 <USB_DevInit+0x192>
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG |= speed;
 8001d6e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001d72:	f043 0303 	orr.w	r3, r3, #3
 8001d76:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001d7a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001d7e:	6103      	str	r3, [r0, #16]
 8001d80:	4a55      	ldr	r2, [pc, #340]	; (8001ed8 <USB_DevInit+0x1c8>)
 8001d82:	e002      	b.n	8001d8a <USB_DevInit+0x7a>

  do
  {
    if (++count > 200000U)
 8001d84:	3a01      	subs	r2, #1
 8001d86:	f000 809d 	beq.w	8001ec4 <USB_DevInit+0x1b4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001d8a:	6903      	ldr	r3, [r0, #16]
 8001d8c:	f013 0320 	ands.w	r3, r3, #32
 8001d90:	d1f8      	bne.n	8001d84 <USB_DevInit+0x74>
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret = HAL_OK;
 8001d92:	469c      	mov	ip, r3
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001d94:	2210      	movs	r2, #16
 8001d96:	6102      	str	r2, [r0, #16]
 8001d98:	4a4f      	ldr	r2, [pc, #316]	; (8001ed8 <USB_DevInit+0x1c8>)
 8001d9a:	e002      	b.n	8001da2 <USB_DevInit+0x92>

  do
  {
    if (++count > 200000U)
 8001d9c:	3a01      	subs	r2, #1
 8001d9e:	f000 808e 	beq.w	8001ebe <USB_DevInit+0x1ae>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001da2:	6906      	ldr	r6, [r0, #16]
 8001da4:	06f3      	lsls	r3, r6, #27
 8001da6:	d4f9      	bmi.n	8001d9c <USB_DevInit+0x8c>
  {
    ret = HAL_ERROR;
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001da8:	2600      	movs	r6, #0
 8001daa:	613e      	str	r6, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8001dac:	617e      	str	r6, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001dae:	61fe      	str	r6, [r7, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001db0:	b1d9      	cbz	r1, 8001dea <USB_DevInit+0xda>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001db2:	4635      	mov	r5, r6
 8001db4:	f500 6210 	add.w	r2, r0, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001db8:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      if (i == 0U)
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001dbc:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001dc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dc4:	e007      	b.n	8001dd6 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001dc6:	6015      	str	r5, [r2, #0]
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001dc8:	3601      	adds	r6, #1
 8001dca:	42b1      	cmp	r1, r6
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001dcc:	6115      	str	r5, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001dce:	6093      	str	r3, [r2, #8]
 8001dd0:	f102 0220 	add.w	r2, r2, #32
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001dd4:	d033      	beq.n	8001e3e <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001dd6:	f8d2 e000 	ldr.w	lr, [r2]
 8001dda:	f1be 0f00 	cmp.w	lr, #0
 8001dde:	daf2      	bge.n	8001dc6 <USB_DevInit+0xb6>
    {
      if (i == 0U)
 8001de0:	2e00      	cmp	r6, #0
 8001de2:	d072      	beq.n	8001eca <USB_DevInit+0x1ba>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001de4:	f8c2 9000 	str.w	r9, [r2]
 8001de8:	e7ee      	b.n	8001dc8 <USB_DevInit+0xb8>

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001dea:	693a      	ldr	r2, [r7, #16]

  if (cfg.dma_enable == 1U)
 8001dec:	f1bb 0f01 	cmp.w	fp, #1

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df4:	613a      	str	r2, [r7, #16]

  if (cfg.dma_enable == 1U)
 8001df6:	d046      	beq.n	8001e86 <USB_DevInit+0x176>
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001df8:	2100      	movs	r1, #0

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001dfa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001dfe:	6181      	str	r1, [r0, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001e00:	6142      	str	r2, [r0, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8001e02:	f1bb 0f00 	cmp.w	fp, #0
 8001e06:	d103      	bne.n	8001e10 <USB_DevInit+0x100>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001e08:	6982      	ldr	r2, [r0, #24]
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	6182      	str	r2, [r0, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001e10:	6985      	ldr	r5, [r0, #24]
 8001e12:	4a32      	ldr	r2, [pc, #200]	; (8001edc <USB_DevInit+0x1cc>)
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8001e14:	9910      	ldr	r1, [sp, #64]	; 0x40
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001e16:	432a      	orrs	r2, r5
 8001e18:	6182      	str	r2, [r0, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8001e1a:	b119      	cbz	r1, 8001e24 <USB_DevInit+0x114>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001e1c:	6982      	ldr	r2, [r0, #24]
 8001e1e:	f042 0208 	orr.w	r2, r2, #8
 8001e22:	6182      	str	r2, [r0, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8001e24:	2c01      	cmp	r4, #1
 8001e26:	d105      	bne.n	8001e34 <USB_DevInit+0x124>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001e28:	6982      	ldr	r2, [r0, #24]
 8001e2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e2e:	f042 0204 	orr.w	r2, r2, #4
 8001e32:	6182      	str	r2, [r0, #24]
  }

  return ret;
}
 8001e34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e38:	4660      	mov	r0, ip
 8001e3a:	b004      	add	sp, #16
 8001e3c:	4770      	bx	lr
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001e3e:	2600      	movs	r6, #0
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001e40:	4633      	mov	r3, r6
 8001e42:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001e46:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      if (i == 0U)
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001e4a:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001e4e:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8001e52:	e008      	b.n	8001e66 <USB_DevInit+0x156>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001e54:	6013      	str	r3, [r2, #0]

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001e56:	3601      	adds	r6, #1
 8001e58:	42b1      	cmp	r1, r6
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001e5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001e5c:	f8c2 8008 	str.w	r8, [r2, #8]
 8001e60:	f102 0220 	add.w	r2, r2, #32

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001e64:	d0c1      	beq.n	8001dea <USB_DevInit+0xda>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001e66:	6815      	ldr	r5, [r2, #0]
 8001e68:	2d00      	cmp	r5, #0
 8001e6a:	daf3      	bge.n	8001e54 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8001e6c:	b386      	cbz	r6, 8001ed0 <USB_DevInit+0x1c0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001e6e:	f8c2 9000 	str.w	r9, [r2]
 8001e72:	e7f0      	b.n	8001e56 <USB_DevInit+0x146>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001e74:	6803      	ldr	r3, [r0, #0]
 8001e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e7a:	6003      	str	r3, [r0, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001e7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e82:	6383      	str	r3, [r0, #56]	; 0x38
 8001e84:	e766      	b.n	8001d54 <USB_DevInit+0x44>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);

  if (cfg.dma_enable == 1U)
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <USB_DevInit+0x1d0>)
 8001e88:	633a      	str	r2, [r7, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e90:	f042 0203 	orr.w	r2, r2, #3
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001e94:	2500      	movs	r5, #0

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001e96:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001e9a:	633a      	str	r2, [r7, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001e9c:	6185      	str	r5, [r0, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001e9e:	6141      	str	r1, [r0, #20]
 8001ea0:	e7b6      	b.n	8001e10 <USB_DevInit+0x100>
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    if (cfg.speed == USBD_HS_SPEED)
 8001ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ea4:	b923      	cbnz	r3, 8001eb0 <USB_DevInit+0x1a0>
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG |= speed;
 8001ea6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001eaa:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8001eae:	e764      	b.n	8001d7a <USB_DevInit+0x6a>
 8001eb0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8001ebc:	e75d      	b.n	8001d7a <USB_DevInit+0x6a>
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
  {
    ret = HAL_ERROR;
 8001ebe:	f04f 0c01 	mov.w	ip, #1
 8001ec2:	e771      	b.n	8001da8 <USB_DevInit+0x98>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
  {
    ret = HAL_ERROR;
 8001ec4:	f04f 0c01 	mov.w	ip, #1
 8001ec8:	e764      	b.n	8001d94 <USB_DevInit+0x84>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      if (i == 0U)
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001eca:	f8c2 a000 	str.w	sl, [r2]
 8001ece:	e77b      	b.n	8001dc8 <USB_DevInit+0xb8>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      if (i == 0U)
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001ed0:	f8c2 a000 	str.w	sl, [r2]
 8001ed4:	e7bf      	b.n	8001e56 <USB_DevInit+0x146>
 8001ed6:	bf00      	nop
 8001ed8:	00030d40 	.word	0x00030d40
 8001edc:	803c3800 	.word	0x803c3800
 8001ee0:	00800100 	.word	0x00800100

08001ee4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001ee4:	0189      	lsls	r1, r1, #6
 8001ee6:	f041 0120 	orr.w	r1, r1, #32
 8001eea:	6101      	str	r1, [r0, #16]
 8001eec:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <USB_FlushTxFifo+0x20>)
 8001eee:	e001      	b.n	8001ef4 <USB_FlushTxFifo+0x10>

  do
  {
    if (++count > 200000U)
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	d005      	beq.n	8001f00 <USB_FlushTxFifo+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001ef4:	6903      	ldr	r3, [r0, #16]
 8001ef6:	f013 0320 	ands.w	r3, r3, #32
 8001efa:	d1f9      	bne.n	8001ef0 <USB_FlushTxFifo+0xc>

  return HAL_OK;
 8001efc:	4618      	mov	r0, r3
 8001efe:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001f00:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);

  return HAL_OK;
}
 8001f02:	4770      	bx	lr
 8001f04:	00030d40 	.word	0x00030d40

08001f08 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8001f08:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8001f0c:	f013 0006 	ands.w	r0, r3, #6
 8001f10:	d005      	beq.n	8001f1e <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b02      	cmp	r3, #2
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
 8001f18:	bf0c      	ite	eq
 8001f1a:	2002      	moveq	r0, #2
 8001f1c:	200f      	movne	r0, #15
  }

  return speed;
}
 8001f1e:	4770      	bx	lr

08001f20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001f20:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001f22:	784b      	ldrb	r3, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001f24:	780c      	ldrb	r4, [r1, #0]

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001f26:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001f2a:	2b01      	cmp	r3, #1
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001f2c:	f004 050f 	and.w	r5, r4, #15
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001f30:	d01d      	beq.n	8001f6e <USB_ActivateEndpoint+0x4e>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8001f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f36:	fa03 f505 	lsl.w	r5, r3, r5

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001f3a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8001f3e:	4335      	orrs	r5, r6

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001f40:	eb03 1444 	add.w	r4, r3, r4, lsl #5
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8001f44:	f8c0 581c 	str.w	r5, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001f48:	5823      	ldr	r3, [r4, r0]
 8001f4a:	041b      	lsls	r3, r3, #16
 8001f4c:	d40c      	bmi.n	8001f68 <USB_ActivateEndpoint+0x48>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8001f4e:	5822      	ldr	r2, [r4, r0]
 8001f50:	688d      	ldr	r5, [r1, #8]
 8001f52:	78c9      	ldrb	r1, [r1, #3]
 8001f54:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8001f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5c:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8001f60:	4313      	orrs	r3, r2
 8001f62:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001f66:	5023      	str	r3, [r4, r0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 8001f68:	2000      	movs	r0, #0
 8001f6a:	bc70      	pop	{r4, r5, r6}
 8001f6c:	4770      	bx	lr
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001f6e:	40ab      	lsls	r3, r5

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001f70:	f44f 6510 	mov.w	r5, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001f74:	4333      	orrs	r3, r6

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001f76:	eb05 1544 	add.w	r5, r5, r4, lsl #5
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001f7a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001f7e:	582b      	ldr	r3, [r5, r0]
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	d4f1      	bmi.n	8001f68 <USB_ActivateEndpoint+0x48>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001f84:	582a      	ldr	r2, [r5, r0]
 8001f86:	688e      	ldr	r6, [r1, #8]
 8001f88:	78c9      	ldrb	r1, [r1, #3]
 8001f8a:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f92:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8001f96:	4313      	orrs	r3, r2
 8001f98:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001f9c:	ea43 5484 	orr.w	r4, r3, r4, lsl #22
 8001fa0:	502c      	str	r4, [r5, r0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	bc70      	pop	{r4, r5, r6}
 8001fa6:	4770      	bx	lr

08001fa8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8001faa:	784b      	ldrb	r3, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001fac:	f891 e000 	ldrb.w	lr, [r1]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d01e      	beq.n	8001ff2 <USB_DeactivateEndpoint+0x4a>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001fb4:	f8d0 783c 	ldr.w	r7, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8001fb8:	4d1e      	ldr	r5, [pc, #120]	; (8002034 <USB_DeactivateEndpoint+0x8c>)
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001fba:	f00e 060f 	and.w	r6, lr, #15
 8001fbe:	2401      	movs	r4, #1
 8001fc0:	fa04 f606 	lsl.w	r6, r4, r6
 8001fc4:	ea27 4606 	bic.w	r6, r7, r6, lsl #16
 8001fc8:	f8c0 683c 	str.w	r6, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001fcc:	780e      	ldrb	r6, [r1, #0]
 8001fce:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8001fd2:	f006 060f 	and.w	r6, r6, #15
 8001fd6:	40b4      	lsls	r4, r6
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8001fd8:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001fdc:	eb03 134e 	add.w	r3, r3, lr, lsl #5
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001fe0:	ea21 4404 	bic.w	r4, r1, r4, lsl #16
 8001fe4:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8001fe8:	581a      	ldr	r2, [r3, r0]
 8001fea:	4015      	ands	r5, r2
 8001fec:	501d      	str	r5, [r3, r0]
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
}
 8001fee:	2000      	movs	r0, #0
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t epnum = (uint32_t)ep->num;

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001ff2:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8001ff6:	4d10      	ldr	r5, [pc, #64]	; (8002038 <USB_DeactivateEndpoint+0x90>)
  uint32_t epnum = (uint32_t)ep->num;

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001ff8:	f00e 020f 	and.w	r2, lr, #15
 8001ffc:	fa03 f202 	lsl.w	r2, r3, r2
 8002000:	ea26 0202 	bic.w	r2, r6, r2
 8002004:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002008:	780a      	ldrb	r2, [r1, #0]
 800200a:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800200e:	f002 020f 	and.w	r2, r2, #15
 8002012:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002014:	f44f 6210 	mov.w	r2, #2304	; 0x900

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002018:	ea21 0303 	bic.w	r3, r1, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800201c:	eb02 1e4e 	add.w	lr, r2, lr, lsl #5

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002020:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002024:	f85e 3000 	ldr.w	r3, [lr, r0]
 8002028:	401d      	ands	r5, r3
 800202a:	f84e 5000 	str.w	r5, [lr, r0]
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
}
 800202e:	2000      	movs	r0, #0
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002032:	bf00      	nop
 8002034:	eff37800 	.word	0xeff37800
 8002038:	ec337800 	.word	0xec337800

0800203c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800203e:	784c      	ldrb	r4, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002040:	780b      	ldrb	r3, [r1, #0]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002042:	2c01      	cmp	r4, #1
 8002044:	d051      	beq.n	80020ea <USB_EPStartXfer+0xae>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002046:	f44f 6530 	mov.w	r5, #2816	; 0xb00
 800204a:	eb05 1543 	add.w	r5, r5, r3, lsl #5
 800204e:	1943      	adds	r3, r0, r5
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);

    if (ep->xfer_len == 0U)
 8002050:	694c      	ldr	r4, [r1, #20]
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002052:	691e      	ldr	r6, [r3, #16]
 8002054:	0cf6      	lsrs	r6, r6, #19
 8002056:	04f6      	lsls	r6, r6, #19
 8002058:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800205a:	691e      	ldr	r6, [r3, #16]
 800205c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8002060:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002064:	611e      	str	r6, [r3, #16]

    if (ep->xfer_len == 0U)
 8002066:	b30c      	cbz	r4, 80020ac <USB_EPStartXfer+0x70>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002068:	688e      	ldr	r6, [r1, #8]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800206a:	f8df e198 	ldr.w	lr, [pc, #408]	; 8002204 <USB_EPStartXfer+0x1c8>
 800206e:	691f      	ldr	r7, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002070:	4434      	add	r4, r6
 8002072:	3c01      	subs	r4, #1
 8002074:	fbb4 f4f6 	udiv	r4, r4, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002078:	ea4f 4cc4 	mov.w	ip, r4, lsl #19
 800207c:	ea0c 0e0e 	and.w	lr, ip, lr
 8002080:	ea4e 0707 	orr.w	r7, lr, r7
 8002084:	611f      	str	r7, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002086:	b2a4      	uxth	r4, r4
 8002088:	fb06 f404 	mul.w	r4, r6, r4
 800208c:	691e      	ldr	r6, [r3, #16]
 800208e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002092:	4334      	orrs	r4, r6
    }

    if (dma == 1U)
 8002094:	2a01      	cmp	r2, #1
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002096:	611c      	str	r4, [r3, #16]
    }

    if (dma == 1U)
 8002098:	d014      	beq.n	80020c4 <USB_EPStartXfer+0x88>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800209a:	78cb      	ldrb	r3, [r1, #3]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d018      	beq.n	80020d2 <USB_EPStartXfer+0x96>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80020a0:	5943      	ldr	r3, [r0, r5]
 80020a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80020a6:	5143      	str	r3, [r0, r5]
  }

  return HAL_OK;
}
 80020a8:	2000      	movs	r0, #0
 80020aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);

    if (ep->xfer_len == 0U)
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80020ac:	688c      	ldr	r4, [r1, #8]
 80020ae:	691e      	ldr	r6, [r3, #16]
 80020b0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80020b4:	4334      	orrs	r4, r6
 80020b6:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80020b8:	691c      	ldr	r4, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
    }

    if (dma == 1U)
 80020ba:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);

    if (ep->xfer_len == 0U)
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80020bc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80020c0:	611c      	str	r4, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
    }

    if (dma == 1U)
 80020c2:	d1ea      	bne.n	800209a <USB_EPStartXfer+0x5e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80020c4:	68ca      	ldr	r2, [r1, #12]
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	d0e7      	beq.n	800209a <USB_EPStartXfer+0x5e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80020ca:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80020cc:	78cb      	ldrb	r3, [r1, #3]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d1e6      	bne.n	80020a0 <USB_EPStartXfer+0x64>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80020d2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80020d6:	f413 7f80 	tst.w	r3, #256	; 0x100
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80020da:	5943      	ldr	r3, [r0, r5]
 80020dc:	bf0c      	ite	eq
 80020de:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80020e2:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80020e6:	5143      	str	r3, [r0, r5]
 80020e8:	e7da      	b.n	80020a0 <USB_EPStartXfer+0x64>

  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80020ea:	694c      	ldr	r4, [r1, #20]
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80020ec:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80020f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900

  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d035      	beq.n	8002164 <USB_EPStartXfer+0x128>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80020f8:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80020fa:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80020fe:	4f41      	ldr	r7, [pc, #260]	; (8002204 <USB_EPStartXfer+0x1c8>)
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002100:	0cf6      	lsrs	r6, r6, #19
 8002102:	04f6      	lsls	r6, r6, #19
 8002104:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002106:	691e      	ldr	r6, [r3, #16]
 8002108:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 800210c:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002110:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002112:	eb04 050e 	add.w	r5, r4, lr
 8002116:	691e      	ldr	r6, [r3, #16]
 8002118:	3d01      	subs	r5, #1
 800211a:	fbb5 f5fe 	udiv	r5, r5, lr
 800211e:	04ed      	lsls	r5, r5, #19
 8002120:	402f      	ands	r7, r5
 8002122:	ea47 0506 	orr.w	r5, r7, r6
 8002126:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002128:	691d      	ldr	r5, [r3, #16]
 800212a:	f3c4 0612 	ubfx	r6, r4, #0, #19
 800212e:	4335      	orrs	r5, r6
 8002130:	611d      	str	r5, [r3, #16]

      if (ep->type == EP_TYPE_ISOC)
 8002132:	78cd      	ldrb	r5, [r1, #3]
 8002134:	2d01      	cmp	r5, #1
 8002136:	d05c      	beq.n	80021f2 <USB_EPStartXfer+0x1b6>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
      }
    }

    if (dma == 1U)
 8002138:	2a01      	cmp	r2, #1
 800213a:	d022      	beq.n	8002182 <USB_EPStartXfer+0x146>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800213c:	681d      	ldr	r5, [r3, #0]
 800213e:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8002142:	601d      	str	r5, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002144:	78cd      	ldrb	r5, [r1, #3]
 8002146:	2d01      	cmp	r5, #1
 8002148:	d026      	beq.n	8002198 <USB_EPStartXfer+0x15c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800214a:	2c00      	cmp	r4, #0
 800214c:	d0ac      	beq.n	80020a8 <USB_EPStartXfer+0x6c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800214e:	780b      	ldrb	r3, [r1, #0]
 8002150:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002154:	f003 010f 	and.w	r1, r3, #15
 8002158:	2301      	movs	r3, #1
 800215a:	408b      	lsls	r3, r1
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002162:	e7a1      	b.n	80020a8 <USB_EPStartXfer+0x6c>
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002164:	691d      	ldr	r5, [r3, #16]
 8002166:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800216a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800216e:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002170:	691d      	ldr	r5, [r3, #16]
 8002172:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002176:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002178:	691d      	ldr	r5, [r3, #16]
 800217a:	0ced      	lsrs	r5, r5, #19
 800217c:	04ed      	lsls	r5, r5, #19
 800217e:	611d      	str	r5, [r3, #16]
 8002180:	e7da      	b.n	8002138 <USB_EPStartXfer+0xfc>
      }
    }

    if (dma == 1U)
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002182:	690a      	ldr	r2, [r1, #16]
 8002184:	b102      	cbz	r2, 8002188 <USB_EPStartXfer+0x14c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002186:	615a      	str	r2, [r3, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8002188:	78ca      	ldrb	r2, [r1, #3]
 800218a:	2a01      	cmp	r2, #1
 800218c:	d025      	beq.n	80021da <USB_EPStartXfer+0x19e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e787      	b.n	80020a8 <USB_EPStartXfer+0x6c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002198:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800219c:	f415 7f80 	tst.w	r5, #256	; 0x100
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80021a0:	681d      	ldr	r5, [r3, #0]
 80021a2:	bf0c      	ite	eq
 80021a4:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80021a8:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80021ac:	601d      	str	r5, [r3, #0]
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 80021ae:	2a00      	cmp	r2, #0
 80021b0:	f47f af7a 	bne.w	80020a8 <USB_EPStartXfer+0x6c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80021b4:	b2a3      	uxth	r3, r4
 80021b6:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	f43f af75 	beq.w	80020a8 <USB_EPStartXfer+0x6c>
 80021be:	780c      	ldrb	r4, [r1, #0]
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80021c0:	68ca      	ldr	r2, [r1, #12]
 80021c2:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 80021c6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80021ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  if (dma == 0U)
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80021ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80021d2:	6001      	str	r1, [r0, #0]
  uint32_t count32b, i;

  if (dma == 0U)
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1fa      	bne.n	80021ce <USB_EPStartXfer+0x192>
 80021d8:	e766      	b.n	80020a8 <USB_EPStartXfer+0x6c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
      }

      if (ep->type == EP_TYPE_ISOC)
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80021da:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80021de:	f412 7f80 	tst.w	r2, #256	; 0x100
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	bf0c      	ite	eq
 80021e6:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80021ea:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e7cd      	b.n	800218e <USB_EPStartXfer+0x152>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);

      if (ep->type == EP_TYPE_ISOC)
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80021f2:	691d      	ldr	r5, [r3, #16]
 80021f4:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80021f8:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80021fa:	691d      	ldr	r5, [r3, #16]
 80021fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002200:	611d      	str	r5, [r3, #16]
 8002202:	e799      	b.n	8002138 <USB_EPStartXfer+0xfc>
 8002204:	1ff80000 	.word	0x1ff80000

08002208 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002208:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800220a:	784c      	ldrb	r4, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800220c:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800220e:	2c01      	cmp	r4, #1
 8002210:	d025      	beq.n	800225e <USB_EP0StartXfer+0x56>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002212:	f44f 6430 	mov.w	r4, #2816	; 0xb00
 8002216:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 800221a:	1823      	adds	r3, r4, r0
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);

    if (ep->xfer_len > 0U)
 800221c:	694e      	ldr	r6, [r1, #20]
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800221e:	691d      	ldr	r5, [r3, #16]
 8002220:	0ced      	lsrs	r5, r5, #19
 8002222:	04ed      	lsls	r5, r5, #19
 8002224:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002226:	691d      	ldr	r5, [r3, #16]
 8002228:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800222c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002230:	611d      	str	r5, [r3, #16]

    if (ep->xfer_len > 0U)
    {
      ep->xfer_len = ep->maxpacket;
 8002232:	688d      	ldr	r5, [r1, #8]
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);

    if (ep->xfer_len > 0U)
 8002234:	b98e      	cbnz	r6, 800225a <USB_EP0StartXfer+0x52>
    {
      ep->xfer_len = ep->maxpacket;
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002236:	691e      	ldr	r6, [r3, #16]
 8002238:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800223c:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800223e:	691e      	ldr	r6, [r3, #16]
 8002240:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002244:	4335      	orrs	r5, r6

    if (dma == 1U)
 8002246:	2a01      	cmp	r2, #1
    {
      ep->xfer_len = ep->maxpacket;
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002248:	611d      	str	r5, [r3, #16]

    if (dma == 1U)
 800224a:	d03e      	beq.n	80022ca <USB_EP0StartXfer+0xc2>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800224c:	5823      	ldr	r3, [r4, r0]
 800224e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002252:	5023      	str	r3, [r4, r0]
  }

  return HAL_OK;
}
 8002254:	2000      	movs	r0, #0
 8002256:	bc70      	pop	{r4, r5, r6}
 8002258:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);

    if (ep->xfer_len > 0U)
    {
      ep->xfer_len = ep->maxpacket;
 800225a:	614d      	str	r5, [r1, #20]
 800225c:	e7eb      	b.n	8002236 <USB_EP0StartXfer+0x2e>

  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800225e:	694c      	ldr	r4, [r1, #20]
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002260:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002264:	f503 6310 	add.w	r3, r3, #2304	; 0x900

  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002268:	2c00      	cmp	r4, #0
 800226a:	d033      	beq.n	80022d4 <USB_EP0StartXfer+0xcc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800226c:	691d      	ldr	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);

      if (ep->xfer_len > ep->maxpacket)
 800226e:	688e      	ldr	r6, [r1, #8]
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002270:	0ced      	lsrs	r5, r5, #19
 8002272:	04ed      	lsls	r5, r5, #19
 8002274:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002276:	691d      	ldr	r5, [r3, #16]
 8002278:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800227c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002280:	611d      	str	r5, [r3, #16]

      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002282:	691d      	ldr	r5, [r3, #16]
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);

      if (ep->xfer_len > ep->maxpacket)
 8002284:	42b4      	cmp	r4, r6
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002286:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);

      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
 800228a:	bf88      	it	hi
 800228c:	614e      	strhi	r6, [r1, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800228e:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002290:	691d      	ldr	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);

      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
 8002292:	bf88      	it	hi
 8002294:	4634      	movhi	r4, r6
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002296:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800229a:	432c      	orrs	r4, r5
 800229c:	611c      	str	r4, [r3, #16]
    }

    if (dma == 1U)
 800229e:	2a01      	cmp	r2, #1
 80022a0:	d027      	beq.n	80022f2 <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80022a2:	681a      	ldr	r2, [r3, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80022a4:	694c      	ldr	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80022a6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80022aa:	601a      	str	r2, [r3, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80022ac:	2c00      	cmp	r4, #0
 80022ae:	d0d1      	beq.n	8002254 <USB_EP0StartXfer+0x4c>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80022b0:	780b      	ldrb	r3, [r1, #0]
 80022b2:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80022b6:	f003 010f 	and.w	r1, r3, #15
 80022ba:	2301      	movs	r3, #1
 80022bc:	408b      	lsls	r3, r1
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }

  return HAL_OK;
}
 80022c4:	bc70      	pop	{r4, r5, r6}
 80022c6:	2000      	movs	r0, #0
 80022c8:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));

    if (dma == 1U)
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80022ca:	68ca      	ldr	r2, [r1, #12]
 80022cc:	2a00      	cmp	r2, #0
 80022ce:	d0bd      	beq.n	800224c <USB_EP0StartXfer+0x44>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80022d0:	615a      	str	r2, [r3, #20]
 80022d2:	e7bb      	b.n	800224c <USB_EP0StartXfer+0x44>
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80022d4:	691c      	ldr	r4, [r3, #16]
 80022d6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80022da:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80022de:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80022e0:	691c      	ldr	r4, [r3, #16]
 80022e2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80022e6:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80022e8:	691c      	ldr	r4, [r3, #16]
 80022ea:	0ce4      	lsrs	r4, r4, #19
 80022ec:	04e4      	lsls	r4, r4, #19
 80022ee:	611c      	str	r4, [r3, #16]
 80022f0:	e7d5      	b.n	800229e <USB_EP0StartXfer+0x96>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
    }

    if (dma == 1U)
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80022f2:	690a      	ldr	r2, [r1, #16]
 80022f4:	b102      	cbz	r2, 80022f8 <USB_EP0StartXfer+0xf0>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80022f6:	615a      	str	r2, [r3, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e7a8      	b.n	8002254 <USB_EP0StartXfer+0x4c>
 8002302:	bf00      	nop

08002304 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002304:	b410      	push	{r4}
 8002306:	f89d 4004 	ldrb.w	r4, [sp, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 800230a:	b96c      	cbnz	r4, 8002328 <USB_WritePacket+0x24>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800230c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	d00a      	beq.n	8002328 <USB_WritePacket+0x24>
 8002312:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8002316:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800231a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800231e:	f851 3b04 	ldr.w	r3, [r1], #4
 8002322:	6013      	str	r3, [r2, #0]
  uint32_t count32b, i;

  if (dma == 0U)
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
 8002324:	428c      	cmp	r4, r1
 8002326:	d1fa      	bne.n	800231e <USB_WritePacket+0x1a>
      pSrc++;
    }
  }

  return HAL_OK;
}
 8002328:	2000      	movs	r0, #0
 800232a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800232e:	4770      	bx	lr

08002330 <USB_ReadPacket>:
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002330:	3203      	adds	r2, #3

  for (i = 0U; i < count32b; i++)
 8002332:	0892      	lsrs	r2, r2, #2
 8002334:	d00c      	beq.n	8002350 <USB_ReadPacket+0x20>
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002336:	b410      	push	{r4}
 8002338:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800233c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	f841 3b04 	str.w	r3, [r1], #4
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
 8002346:	4281      	cmp	r1, r0
 8002348:	d1fa      	bne.n	8002340 <USB_ReadPacket+0x10>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
    pDest++;
  }

  return ((void *)pDest);
}
 800234a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800234e:	4770      	bx	lr
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
 8002350:	4608      	mov	r0, r1
 8002352:	4770      	bx	lr

08002354 <USB_EPSetStall>:
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8002354:	784b      	ldrb	r3, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002356:	780a      	ldrb	r2, [r1, #0]

  if (ep->is_in == 1U)
 8002358:	2b01      	cmp	r3, #1
 800235a:	d011      	beq.n	8002380 <USB_EPSetStall+0x2c>
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800235c:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8002360:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002364:	5819      	ldr	r1, [r3, r0]
 8002366:	2900      	cmp	r1, #0
 8002368:	db04      	blt.n	8002374 <USB_EPSetStall+0x20>
 800236a:	b11a      	cbz	r2, 8002374 <USB_EPSetStall+0x20>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800236c:	581a      	ldr	r2, [r3, r0]
 800236e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002372:	501a      	str	r2, [r3, r0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002374:	581a      	ldr	r2, [r3, r0]
 8002376:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800237a:	501a      	str	r2, [r3, r0]
  }

  return HAL_OK;
}
 800237c:	2000      	movs	r0, #0
 800237e:	4770      	bx	lr
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002380:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002384:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002388:	5819      	ldr	r1, [r3, r0]
 800238a:	2900      	cmp	r1, #0
 800238c:	dbf2      	blt.n	8002374 <USB_EPSetStall+0x20>
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800238e:	2a00      	cmp	r2, #0
 8002390:	d1ec      	bne.n	800236c <USB_EPSetStall+0x18>
 8002392:	e7ef      	b.n	8002374 <USB_EPSetStall+0x20>

08002394 <USB_EPClearStall>:
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8002394:	784b      	ldrb	r3, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002396:	780a      	ldrb	r2, [r1, #0]

  if (ep->is_in == 1U)
 8002398:	2b01      	cmp	r3, #1
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800239a:	bf0c      	ite	eq
 800239c:	f44f 6310 	moveq.w	r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023a0:	f44f 6330 	movne.w	r3, #2816	; 0xb00
 80023a4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80023a8:	581a      	ldr	r2, [r3, r0]
 80023aa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80023ae:	501a      	str	r2, [r3, r0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80023b0:	78ca      	ldrb	r2, [r1, #3]
 80023b2:	3a02      	subs	r2, #2
 80023b4:	2a01      	cmp	r2, #1
 80023b6:	d803      	bhi.n	80023c0 <USB_EPClearStall+0x2c>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80023b8:	581a      	ldr	r2, [r3, r0]
 80023ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023be:	501a      	str	r2, [r3, r0]
    }
  }
  return HAL_OK;
}
 80023c0:	2000      	movs	r0, #0
 80023c2:	4770      	bx	lr

080023c4 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80023c4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80023c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023cc:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80023d0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80023d4:	0109      	lsls	r1, r1, #4
 80023d6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80023da:	4319      	orrs	r1, r3
 80023dc:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800

  return HAL_OK;
}
 80023e0:	2000      	movs	r0, #0
 80023e2:	4770      	bx	lr

080023e4 <USB_DevConnect>:
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80023e4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80023e8:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80023ea:	6853      	ldr	r3, [r2, #4]
 80023ec:	f023 0302 	bic.w	r3, r3, #2
  HAL_Delay(3U);
 80023f0:	2003      	movs	r0, #3
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80023f2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80023f4:	f000 fe50 	bl	8003098 <HAL_Delay>

  return HAL_OK;
}
 80023f8:	2000      	movs	r0, #0
 80023fa:	bd08      	pop	{r3, pc}

080023fc <USB_DevDisconnect>:
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80023fc:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002400:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002402:	6853      	ldr	r3, [r2, #4]
 8002404:	f043 0302 	orr.w	r3, r3, #2
  HAL_Delay(3U);
 8002408:	2003      	movs	r0, #3
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800240a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800240c:	f000 fe44 	bl	8003098 <HAL_Delay>

  return HAL_OK;
}
 8002410:	2000      	movs	r0, #0
 8002412:	bd08      	pop	{r3, pc}

08002414 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002414:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002416:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8002418:	4010      	ands	r0, r2
 800241a:	4770      	bx	lr

0800241c <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800241c:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002420:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002424:	69db      	ldr	r3, [r3, #28]

  return ((tmpreg & 0xffff0000U) >> 16);
 8002426:	4018      	ands	r0, r3
}
 8002428:	0c00      	lsrs	r0, r0, #16
 800242a:	4770      	bx	lr

0800242c <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800242c:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002430:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002434:	69db      	ldr	r3, [r3, #28]

  return ((tmpreg & 0xFFFFU));
 8002436:	4018      	ands	r0, r3
}
 8002438:	b280      	uxth	r0, r0
 800243a:	4770      	bx	lr

0800243c <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800243c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002440:	f500 6000 	add.w	r0, r0, #2048	; 0x800
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002444:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002448:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 800244a:	4010      	ands	r0, r2
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop

08002450 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8002450:	b430      	push	{r4, r5}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8002452:	f8d0 5810 	ldr.w	r5, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002456:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;

  return tmpreg;
 800245a:	f001 030f 	and.w	r3, r1, #15
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800245e:	eb00 1041 	add.w	r0, r0, r1, lsl #5

  return tmpreg;
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	01db      	lsls	r3, r3, #7
 8002468:	b2db      	uxtb	r3, r3
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800246a:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908

  return tmpreg;
 800246e:	432b      	orrs	r3, r5
}
 8002470:	4018      	ands	r0, r3
 8002472:	bc30      	pop	{r4, r5}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop

08002478 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8002478:	6940      	ldr	r0, [r0, #20]
}
 800247a:	f000 0001 	and.w	r0, r0, #1
 800247e:	4770      	bx	lr

08002480 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002480:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002484:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002488:	f023 0307 	bic.w	r3, r3, #7

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800248c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002490:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002494:	6893      	ldr	r3, [r2, #8]
 8002496:	f003 0306 	and.w	r3, r3, #6
 800249a:	2b04      	cmp	r3, #4
 800249c:	d105      	bne.n	80024aa <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800249e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80024a2:	f043 0303 	orr.w	r3, r3, #3
 80024a6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80024aa:	6853      	ldr	r3, [r2, #4]
 80024ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
}
 80024b2:	2000      	movs	r0, #0
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80024b8:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <USB_EP0_OutStart+0x50>)
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024bc:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80024be:	429c      	cmp	r4, r3
 80024c0:	d81a      	bhi.n	80024f8 <USB_EP0_OutStart+0x40>
 80024c2:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80024ca:	6903      	ldr	r3, [r0, #16]
 80024cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024d0:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80024d2:	6903      	ldr	r3, [r0, #16]
 80024d4:	f043 0318 	orr.w	r3, r3, #24
 80024d8:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80024da:	6903      	ldr	r3, [r0, #16]

  if (dma == 1U)
 80024dc:	2901      	cmp	r1, #1
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80024de:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80024e2:	6103      	str	r3, [r0, #16]

  if (dma == 1U)
 80024e4:	d104      	bne.n	80024f0 <USB_EP0_OutStart+0x38>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80024e6:	6142      	str	r2, [r0, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80024e8:	6803      	ldr	r3, [r0, #0]
 80024ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80024ee:	6003      	str	r3, [r0, #0]
  }

  return HAL_OK;
}
 80024f0:	2000      	movs	r0, #0
 80024f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024f6:	4770      	bx	lr
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80024f8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002502:	dae0      	bge.n	80024c6 <USB_EP0_OutStart+0xe>
 8002504:	e7f4      	b.n	80024f0 <USB_EP0_OutStart+0x38>
 8002506:	bf00      	nop
 8002508:	4f54300a 	.word	0x4f54300a

0800250c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800250c:	2800      	cmp	r0, #0
 800250e:	f000 813c 	beq.w	800278a <HAL_RCC_OscConfig+0x27e>
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	6803      	ldr	r3, [r0, #0]
 8002518:	07dd      	lsls	r5, r3, #31
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251a:	b082      	sub	sp, #8
 800251c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	d52f      	bpl.n	8002580 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002520:	49ad      	ldr	r1, [pc, #692]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 8002522:	688a      	ldr	r2, [r1, #8]
 8002524:	f002 020c 	and.w	r2, r2, #12
 8002528:	2a04      	cmp	r2, #4
 800252a:	f000 8124 	beq.w	8002776 <HAL_RCC_OscConfig+0x26a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252e:	688a      	ldr	r2, [r1, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002530:	f002 020c 	and.w	r2, r2, #12
 8002534:	2a08      	cmp	r2, #8
 8002536:	f000 811a 	beq.w	800276e <HAL_RCC_OscConfig+0x262>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	6863      	ldr	r3, [r4, #4]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	f000 815e 	beq.w	8002800 <HAL_RCC_OscConfig+0x2f4>
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	f000 80e6 	beq.w	8002718 <HAL_RCC_OscConfig+0x20c>
 800254c:	4da2      	ldr	r5, [pc, #648]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 800254e:	682a      	ldr	r2, [r5, #0]
 8002550:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002554:	602a      	str	r2, [r5, #0]
 8002556:	682a      	ldr	r2, [r5, #0]
 8002558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800255c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80e3 	bne.w	800272a <HAL_RCC_OscConfig+0x21e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f000 fd92 	bl	800308c <HAL_GetTick>
 8002568:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e005      	b.n	8002578 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f000 fd8e 	bl	800308c <HAL_GetTick>
 8002570:	1b80      	subs	r0, r0, r6
 8002572:	2864      	cmp	r0, #100	; 0x64
 8002574:	f200 80f7 	bhi.w	8002766 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	d4f6      	bmi.n	800256c <HAL_RCC_OscConfig+0x60>
 800257e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002580:	079f      	lsls	r7, r3, #30
 8002582:	d529      	bpl.n	80025d8 <HAL_RCC_OscConfig+0xcc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002584:	4a94      	ldr	r2, [pc, #592]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 8002586:	6891      	ldr	r1, [r2, #8]
 8002588:	f011 0f0c 	tst.w	r1, #12
 800258c:	f000 8091 	beq.w	80026b2 <HAL_RCC_OscConfig+0x1a6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002590:	6891      	ldr	r1, [r2, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002592:	f001 010c 	and.w	r1, r1, #12
 8002596:	2908      	cmp	r1, #8
 8002598:	f000 8087 	beq.w	80026aa <HAL_RCC_OscConfig+0x19e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	68e3      	ldr	r3, [r4, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8112 	beq.w	80027c8 <HAL_RCC_OscConfig+0x2bc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b8d      	ldr	r3, [pc, #564]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	4d8c      	ldr	r5, [pc, #560]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f000 fd6e 	bl	800308c <HAL_GetTick>
 80025b0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	e005      	b.n	80025c0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b4:	f000 fd6a 	bl	800308c <HAL_GetTick>
 80025b8:	1b80      	subs	r0, r0, r6
 80025ba:	2802      	cmp	r0, #2
 80025bc:	f200 80d3 	bhi.w	8002766 <HAL_RCC_OscConfig+0x25a>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	4a85      	ldr	r2, [pc, #532]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 80025c4:	0798      	lsls	r0, r3, #30
 80025c6:	d5f5      	bpl.n	80025b4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	6813      	ldr	r3, [r2, #0]
 80025ca:	6921      	ldr	r1, [r4, #16]
 80025cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d8:	071a      	lsls	r2, r3, #28
 80025da:	d452      	bmi.n	8002682 <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025dc:	0758      	lsls	r0, r3, #29
 80025de:	d530      	bpl.n	8002642 <HAL_RCC_OscConfig+0x136>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e0:	4a7d      	ldr	r2, [pc, #500]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 80025e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025e4:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80025e8:	d07e      	beq.n	80026e8 <HAL_RCC_OscConfig+0x1dc>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4d7c      	ldr	r5, [pc, #496]	; (80027e0 <HAL_RCC_OscConfig+0x2d4>)
 80025ee:	682b      	ldr	r3, [r5, #0]
 80025f0:	05d9      	lsls	r1, r3, #23
 80025f2:	f140 80a8 	bpl.w	8002746 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f6:	68a3      	ldr	r3, [r4, #8]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	f000 812b 	beq.w	8002854 <HAL_RCC_OscConfig+0x348>
 80025fe:	2b05      	cmp	r3, #5
 8002600:	f000 80c5 	beq.w	800278e <HAL_RCC_OscConfig+0x282>
 8002604:	4d74      	ldr	r5, [pc, #464]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 8002606:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	672a      	str	r2, [r5, #112]	; 0x70
 800260e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002610:	f022 0204 	bic.w	r2, r2, #4
 8002614:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 80c2 	bne.w	80027a0 <HAL_RCC_OscConfig+0x294>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f000 fd36 	bl	800308c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	e006      	b.n	8002636 <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f000 fd30 	bl	800308c <HAL_GetTick>
 800262c:	ebc8 0000 	rsb	r0, r8, r0
 8002630:	42b8      	cmp	r0, r7
 8002632:	f200 8098 	bhi.w	8002766 <HAL_RCC_OscConfig+0x25a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002636:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002638:	0798      	lsls	r0, r3, #30
 800263a:	d4f5      	bmi.n	8002628 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263c:	2e00      	cmp	r6, #0
 800263e:	f040 810f 	bne.w	8002860 <HAL_RCC_OscConfig+0x354>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	69a0      	ldr	r0, [r4, #24]
 8002644:	b1c8      	cbz	r0, 800267a <HAL_RCC_OscConfig+0x16e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002646:	4b64      	ldr	r3, [pc, #400]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	f002 020c 	and.w	r2, r2, #12
 800264e:	2a08      	cmp	r2, #8
 8002650:	f000 80dc 	beq.w	800280c <HAL_RCC_OscConfig+0x300>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4a63      	ldr	r2, [pc, #396]	; (80027e4 <HAL_RCC_OscConfig+0x2d8>)
 8002656:	2100      	movs	r1, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002658:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	6011      	str	r1, [r2, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	f000 8106 	beq.w	800286c <HAL_RCC_OscConfig+0x360>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002660:	461c      	mov	r4, r3
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f000 fd13 	bl	800308c <HAL_GetTick>
 8002666:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002668:	e004      	b.n	8002674 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f000 fd0f 	bl	800308c <HAL_GetTick>
 800266e:	1b40      	subs	r0, r0, r5
 8002670:	2802      	cmp	r0, #2
 8002672:	d878      	bhi.n	8002766 <HAL_RCC_OscConfig+0x25a>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	019b      	lsls	r3, r3, #6
 8002678:	d4f7      	bmi.n	800266a <HAL_RCC_OscConfig+0x15e>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800267a:	2000      	movs	r0, #0
}
 800267c:	b002      	add	sp, #8
 800267e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002682:	6963      	ldr	r3, [r4, #20]
 8002684:	b303      	cbz	r3, 80026c8 <HAL_RCC_OscConfig+0x1bc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_OscConfig+0x2dc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002688:	4d53      	ldr	r5, [pc, #332]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f000 fcfd 	bl	800308c <HAL_GetTick>
 8002692:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002694:	e004      	b.n	80026a0 <HAL_RCC_OscConfig+0x194>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002696:	f000 fcf9 	bl	800308c <HAL_GetTick>
 800269a:	1b80      	subs	r0, r0, r6
 800269c:	2802      	cmp	r0, #2
 800269e:	d862      	bhi.n	8002766 <HAL_RCC_OscConfig+0x25a>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80026a2:	079b      	lsls	r3, r3, #30
 80026a4:	d5f7      	bpl.n	8002696 <HAL_RCC_OscConfig+0x18a>
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	e798      	b.n	80025dc <HAL_RCC_OscConfig+0xd0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026aa:	6852      	ldr	r2, [r2, #4]
 80026ac:	0256      	lsls	r6, r2, #9
 80026ae:	f53f af75 	bmi.w	800259c <HAL_RCC_OscConfig+0x90>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	4a49      	ldr	r2, [pc, #292]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	0795      	lsls	r5, r2, #30
 80026b8:	d522      	bpl.n	8002700 <HAL_RCC_OscConfig+0x1f4>
 80026ba:	68e2      	ldr	r2, [r4, #12]
 80026bc:	2a01      	cmp	r2, #1
 80026be:	d01f      	beq.n	8002700 <HAL_RCC_OscConfig+0x1f4>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80026c0:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 80026c2:	b002      	add	sp, #8
 80026c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4a47      	ldr	r2, [pc, #284]	; (80027e8 <HAL_RCC_OscConfig+0x2dc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ca:	4d43      	ldr	r5, [pc, #268]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f000 fcdd 	bl	800308c <HAL_GetTick>
 80026d2:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e004      	b.n	80026e0 <HAL_RCC_OscConfig+0x1d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d6:	f000 fcd9 	bl	800308c <HAL_GetTick>
 80026da:	1b80      	subs	r0, r0, r6
 80026dc:	2802      	cmp	r0, #2
 80026de:	d842      	bhi.n	8002766 <HAL_RCC_OscConfig+0x25a>

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80026e2:	079f      	lsls	r7, r3, #30
 80026e4:	d4f7      	bmi.n	80026d6 <HAL_RCC_OscConfig+0x1ca>
 80026e6:	e7de      	b.n	80026a6 <HAL_RCC_OscConfig+0x19a>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026fc:	2601      	movs	r6, #1
 80026fe:	e775      	b.n	80025ec <HAL_RCC_OscConfig+0xe0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4935      	ldr	r1, [pc, #212]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 8002702:	6920      	ldr	r0, [r4, #16]
 8002704:	680a      	ldr	r2, [r1, #0]
 8002706:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800270a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800270e:	600a      	str	r2, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002710:	071a      	lsls	r2, r3, #28
 8002712:	f57f af63 	bpl.w	80025dc <HAL_RCC_OscConfig+0xd0>
 8002716:	e7b4      	b.n	8002682 <HAL_RCC_OscConfig+0x176>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002728:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f000 fcaf 	bl	800308c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4d2a      	ldr	r5, [pc, #168]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	e004      	b.n	800273e <HAL_RCC_OscConfig+0x232>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f000 fcaa 	bl	800308c <HAL_GetTick>
 8002738:	1b80      	subs	r0, r0, r6
 800273a:	2864      	cmp	r0, #100	; 0x64
 800273c:	d813      	bhi.n	8002766 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	682b      	ldr	r3, [r5, #0]
 8002740:	039a      	lsls	r2, r3, #14
 8002742:	d5f7      	bpl.n	8002734 <HAL_RCC_OscConfig+0x228>
 8002744:	e71b      	b.n	800257e <HAL_RCC_OscConfig+0x72>
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	682b      	ldr	r3, [r5, #0]
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	602b      	str	r3, [r5, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f000 fc9d 	bl	800308c <HAL_GetTick>
 8002752:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	05da      	lsls	r2, r3, #23
 8002758:	f53f af4d 	bmi.w	80025f6 <HAL_RCC_OscConfig+0xea>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275c:	f000 fc96 	bl	800308c <HAL_GetTick>
 8002760:	1bc0      	subs	r0, r0, r7
 8002762:	2802      	cmp	r0, #2
 8002764:	d9f6      	bls.n	8002754 <HAL_RCC_OscConfig+0x248>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002766:	2003      	movs	r0, #3
        }
      }
    }
  }
  return HAL_OK;
}
 8002768:	b002      	add	sp, #8
 800276a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276e:	684a      	ldr	r2, [r1, #4]
 8002770:	0250      	lsls	r0, r2, #9
 8002772:	f57f aee2 	bpl.w	800253a <HAL_RCC_OscConfig+0x2e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	0391      	lsls	r1, r2, #14
 800277c:	f57f af00 	bpl.w	8002580 <HAL_RCC_OscConfig+0x74>
 8002780:	6862      	ldr	r2, [r4, #4]
 8002782:	2a00      	cmp	r2, #0
 8002784:	f47f aefc 	bne.w	8002580 <HAL_RCC_OscConfig+0x74>
 8002788:	e79a      	b.n	80026c0 <HAL_RCC_OscConfig+0x1b4>
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800278c:	4770      	bx	lr
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
 8002790:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002792:	f042 0204 	orr.w	r2, r2, #4
 8002796:	671a      	str	r2, [r3, #112]	; 0x70
 8002798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f000 fc74 	bl	800308c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4d0c      	ldr	r5, [pc, #48]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	e005      	b.n	80027ba <HAL_RCC_OscConfig+0x2ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f000 fc6d 	bl	800308c <HAL_GetTick>
 80027b2:	ebc8 0000 	rsb	r0, r8, r0
 80027b6:	42b8      	cmp	r0, r7
 80027b8:	d8d5      	bhi.n	8002766 <HAL_RCC_OscConfig+0x25a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027bc:	079b      	lsls	r3, r3, #30
 80027be:	d5f6      	bpl.n	80027ae <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c0:	2e00      	cmp	r6, #0
 80027c2:	f43f af3e 	beq.w	8002642 <HAL_RCC_OscConfig+0x136>
 80027c6:	e04b      	b.n	8002860 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4d03      	ldr	r5, [pc, #12]	; (80027d8 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f000 fc5d 	bl	800308c <HAL_GetTick>
 80027d2:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d4:	e00f      	b.n	80027f6 <HAL_RCC_OscConfig+0x2ea>
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	42470000 	.word	0x42470000
 80027e0:	40007000 	.word	0x40007000
 80027e4:	42470060 	.word	0x42470060
 80027e8:	42470e80 	.word	0x42470e80
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ec:	f000 fc4e 	bl	800308c <HAL_GetTick>
 80027f0:	1b80      	subs	r0, r0, r6
 80027f2:	2802      	cmp	r0, #2
 80027f4:	d8b7      	bhi.n	8002766 <HAL_RCC_OscConfig+0x25a>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	0799      	lsls	r1, r3, #30
 80027fa:	d4f7      	bmi.n	80027ec <HAL_RCC_OscConfig+0x2e0>
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	e6eb      	b.n	80025d8 <HAL_RCC_OscConfig+0xcc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002800:	4a32      	ldr	r2, [pc, #200]	; (80028cc <HAL_RCC_OscConfig+0x3c0>)
 8002802:	6813      	ldr	r3, [r2, #0]
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e78e      	b.n	800272a <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280c:	2801      	cmp	r0, #1
 800280e:	f43f af35 	beq.w	800267c <HAL_RCC_OscConfig+0x170>
        return HAL_ERROR;
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002812:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002814:	69e2      	ldr	r2, [r4, #28]
 8002816:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800281a:	4291      	cmp	r1, r2
 800281c:	f47f af50 	bne.w	80026c0 <HAL_RCC_OscConfig+0x1b4>
 8002820:	6a22      	ldr	r2, [r4, #32]
 8002822:	f003 013f 	and.w	r1, r3, #63	; 0x3f
 8002826:	4291      	cmp	r1, r2
 8002828:	f47f af4a 	bne.w	80026c0 <HAL_RCC_OscConfig+0x1b4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800282c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002830:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002832:	401a      	ands	r2, r3
 8002834:	428a      	cmp	r2, r1
 8002836:	f47f af43 	bne.w	80026c0 <HAL_RCC_OscConfig+0x1b4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800283a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800283c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002840:	4291      	cmp	r1, r2
 8002842:	f47f af3d 	bne.w	80026c0 <HAL_RCC_OscConfig+0x1b4>
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 8002846:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002848:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800284c:	1a18      	subs	r0, r3, r0
 800284e:	bf18      	it	ne
 8002850:	2001      	movne	r0, #1
 8002852:	e713      	b.n	800267c <HAL_RCC_OscConfig+0x170>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_RCC_OscConfig+0x3c0>)
 8002856:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	e79f      	b.n	80027a0 <HAL_RCC_OscConfig+0x294>
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_RCC_OscConfig+0x3c0>)
 8002862:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	e6ea      	b.n	8002642 <HAL_RCC_OscConfig+0x136>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286c:	461d      	mov	r5, r3

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f000 fc0d 	bl	800308c <HAL_GetTick>
 8002872:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002874:	e005      	b.n	8002882 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002876:	f000 fc09 	bl	800308c <HAL_GetTick>
 800287a:	1b80      	subs	r0, r0, r6
 800287c:	2802      	cmp	r0, #2
 800287e:	f63f af72 	bhi.w	8002766 <HAL_RCC_OscConfig+0x25a>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	682b      	ldr	r3, [r5, #0]
 8002884:	4a11      	ldr	r2, [pc, #68]	; (80028cc <HAL_RCC_OscConfig+0x3c0>)
 8002886:	0199      	lsls	r1, r3, #6
 8002888:	d4f5      	bmi.n	8002876 <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288a:	69e6      	ldr	r6, [r4, #28]
 800288c:	6a21      	ldr	r1, [r4, #32]
 800288e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002890:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002892:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002894:	4c0e      	ldr	r4, [pc, #56]	; (80028d0 <HAL_RCC_OscConfig+0x3c4>)
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002896:	4331      	orrs	r1, r6
 8002898:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 800289c:	0841      	lsrs	r1, r0, #1
 800289e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80028a2:	3901      	subs	r1, #1
 80028a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a8:	2101      	movs	r1, #1
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028aa:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ac:	6021      	str	r1, [r4, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4614      	mov	r4, r2
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f000 fbec 	bl	800308c <HAL_GetTick>
 80028b4:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f000 fbe8 	bl	800308c <HAL_GetTick>
 80028bc:	1b40      	subs	r0, r0, r5
 80028be:	2802      	cmp	r0, #2
 80028c0:	f63f af51 	bhi.w	8002766 <HAL_RCC_OscConfig+0x25a>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	019a      	lsls	r2, r3, #6
 80028c8:	d5f6      	bpl.n	80028b8 <HAL_RCC_OscConfig+0x3ac>
 80028ca:	e6d6      	b.n	800267a <HAL_RCC_OscConfig+0x16e>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470060 	.word	0x42470060

080028d4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d4:	4917      	ldr	r1, [pc, #92]	; (8002934 <HAL_RCC_GetSysClockFreq+0x60>)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d6:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d8:	688b      	ldr	r3, [r1, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d01b      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x46>
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d117      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e8:	684b      	ldr	r3, [r1, #4]
 80028ea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f2:	d114      	bne.n	800291e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f4:	6849      	ldr	r1, [r1, #4]
 80028f6:	4810      	ldr	r0, [pc, #64]	; (8002938 <HAL_RCC_GetSysClockFreq+0x64>)
 80028f8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80028fc:	fba1 0100 	umull	r0, r1, r1, r0
 8002900:	f7fd fcce 	bl	80002a0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_GetSysClockFreq+0x60>)
 8002906:	685b      	ldr	r3, [r3, #4]

      sysclockfreq = pllvco/pllp;
 8002908:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800290c:	3301      	adds	r3, #1
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fbb0 f0f3 	udiv	r0, r0, r3
 8002914:	bd08      	pop	{r3, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002916:	4808      	ldr	r0, [pc, #32]	; (8002938 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002918:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291a:	4808      	ldr	r0, [pc, #32]	; (800293c <HAL_RCC_GetSysClockFreq+0x68>)
 800291c:	bd08      	pop	{r3, pc}
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	684b      	ldr	r3, [r1, #4]
 8002920:	4806      	ldr	r0, [pc, #24]	; (800293c <HAL_RCC_GetSysClockFreq+0x68>)
 8002922:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002926:	fba3 0100 	umull	r0, r1, r3, r0
 800292a:	2300      	movs	r3, #0
 800292c:	f7fd fcb8 	bl	80002a0 <__aeabi_uldivmod>
 8002930:	e7e8      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x30>
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	00f42400 	.word	0x00f42400
 800293c:	007a1200 	.word	0x007a1200

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002944:	b160      	cbz	r0, 8002960 <HAL_RCC_ClockConfig+0x20>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002946:	4a47      	ldr	r2, [pc, #284]	; (8002a64 <HAL_RCC_ClockConfig+0x124>)
 8002948:	6813      	ldr	r3, [r2, #0]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	428b      	cmp	r3, r1
 8002950:	d209      	bcs.n	8002966 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	b2cb      	uxtb	r3, r1
 8002954:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	4299      	cmp	r1, r3
 800295e:	d002      	beq.n	8002966 <HAL_RCC_ClockConfig+0x26>
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 8002960:	2001      	movs	r0, #1
 8002962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002966:	6803      	ldr	r3, [r0, #0]
 8002968:	079d      	lsls	r5, r3, #30
 800296a:	d514      	bpl.n	8002996 <HAL_RCC_ClockConfig+0x56>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	075c      	lsls	r4, r3, #29
 800296e:	d504      	bpl.n	800297a <HAL_RCC_ClockConfig+0x3a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4c3d      	ldr	r4, [pc, #244]	; (8002a68 <HAL_RCC_ClockConfig+0x128>)
 8002972:	68a2      	ldr	r2, [r4, #8]
 8002974:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002978:	60a2      	str	r2, [r4, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	071a      	lsls	r2, r3, #28
 800297c:	d504      	bpl.n	8002988 <HAL_RCC_ClockConfig+0x48>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800297e:	4c3a      	ldr	r4, [pc, #232]	; (8002a68 <HAL_RCC_ClockConfig+0x128>)
 8002980:	68a2      	ldr	r2, [r4, #8]
 8002982:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002986:	60a2      	str	r2, [r4, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4d37      	ldr	r5, [pc, #220]	; (8002a68 <HAL_RCC_ClockConfig+0x128>)
 800298a:	6882      	ldr	r2, [r0, #8]
 800298c:	68ac      	ldr	r4, [r5, #8]
 800298e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8002992:	4322      	orrs	r2, r4
 8002994:	60aa      	str	r2, [r5, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	07df      	lsls	r7, r3, #31
 8002998:	4604      	mov	r4, r0
 800299a:	460d      	mov	r5, r1
 800299c:	d522      	bpl.n	80029e4 <HAL_RCC_ClockConfig+0xa4>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	6843      	ldr	r3, [r0, #4]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d059      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a4:	1e9a      	subs	r2, r3, #2
 80029a6:	2a01      	cmp	r2, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a8:	4a2f      	ldr	r2, [pc, #188]	; (8002a68 <HAL_RCC_ClockConfig+0x128>)
 80029aa:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ac:	d94e      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x10c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ae:	0791      	lsls	r1, r2, #30
 80029b0:	d5d6      	bpl.n	8002960 <HAL_RCC_ClockConfig+0x20>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4e2d      	ldr	r6, [pc, #180]	; (8002a68 <HAL_RCC_ClockConfig+0x128>)
 80029b4:	68b2      	ldr	r2, [r6, #8]
 80029b6:	f022 0203 	bic.w	r2, r2, #3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029be:	f000 fb65 	bl	800308c <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f241 3788 	movw	r7, #5000	; 0x1388
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c6:	4680      	mov	r8, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c8:	e005      	b.n	80029d6 <HAL_RCC_ClockConfig+0x96>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ca:	f000 fb5f 	bl	800308c <HAL_GetTick>
 80029ce:	ebc8 0000 	rsb	r0, r8, r0
 80029d2:	42b8      	cmp	r0, r7
 80029d4:	d83d      	bhi.n	8002a52 <HAL_RCC_ClockConfig+0x112>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	68b3      	ldr	r3, [r6, #8]
 80029d8:	6862      	ldr	r2, [r4, #4]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029e2:	d1f2      	bne.n	80029ca <HAL_RCC_ClockConfig+0x8a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <HAL_RCC_ClockConfig+0x124>)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	429d      	cmp	r5, r3
 80029ee:	d206      	bcs.n	80029fe <HAL_RCC_ClockConfig+0xbe>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f0:	b2eb      	uxtb	r3, r5
 80029f2:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f4:	6813      	ldr	r3, [r2, #0]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	429d      	cmp	r5, r3
 80029fc:	d1b0      	bne.n	8002960 <HAL_RCC_ClockConfig+0x20>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	075a      	lsls	r2, r3, #29
 8002a02:	d506      	bpl.n	8002a12 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4818      	ldr	r0, [pc, #96]	; (8002a68 <HAL_RCC_ClockConfig+0x128>)
 8002a06:	68e2      	ldr	r2, [r4, #12]
 8002a08:	6881      	ldr	r1, [r0, #8]
 8002a0a:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	6082      	str	r2, [r0, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a12:	071b      	lsls	r3, r3, #28
 8002a14:	d507      	bpl.n	8002a26 <HAL_RCC_ClockConfig+0xe6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_RCC_ClockConfig+0x128>)
 8002a18:	6921      	ldr	r1, [r4, #16]
 8002a1a:	6893      	ldr	r3, [r2, #8]
 8002a1c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002a20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a24:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a26:	f7ff ff55 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_RCC_ClockConfig+0x128>)
 8002a2c:	4c0f      	ldr	r4, [pc, #60]	; (8002a6c <HAL_RCC_ClockConfig+0x12c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a30:	490f      	ldr	r1, [pc, #60]	; (8002a70 <HAL_RCC_ClockConfig+0x130>)
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_RCC_ClockConfig+0x134>)
 8002a34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a38:	5ce3      	ldrb	r3, [r4, r3]
 8002a3a:	fa20 f303 	lsr.w	r3, r0, r3

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a3e:	6808      	ldr	r0, [r1, #0]
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a42:	f003 fad9 	bl	8005ff8 <HAL_InitTick>

  return HAL_OK;
 8002a46:	2000      	movs	r0, #0
 8002a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4c:	0190      	lsls	r0, r2, #6
 8002a4e:	d4b0      	bmi.n	80029b2 <HAL_RCC_ClockConfig+0x72>
 8002a50:	e786      	b.n	8002960 <HAL_RCC_ClockConfig+0x20>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8002a52:	2003      	movs	r0, #3

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_ClockConfig+0x128>)
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	0396      	lsls	r6, r2, #14
 8002a5e:	d4a8      	bmi.n	80029b2 <HAL_RCC_ClockConfig+0x72>
 8002a60:	e77e      	b.n	8002960 <HAL_RCC_ClockConfig+0x20>
 8002a62:	bf00      	nop
 8002a64:	40023c00 	.word	0x40023c00
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08007394 	.word	0x08007394
 8002a70:	20000060 	.word	0x20000060
 8002a74:	20000068 	.word	0x20000068

08002a78 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002a78:	4b01      	ldr	r3, [pc, #4]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000068 	.word	0x20000068

08002a84 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002a86:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a88:	689b      	ldr	r3, [r3, #8]
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002a8a:	4905      	ldr	r1, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a8c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002a90:	6808      	ldr	r0, [r1, #0]
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a94:	40d8      	lsrs	r0, r3
 8002a96:	4770      	bx	lr
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080073a4 	.word	0x080073a4
 8002aa0:	20000068 	.word	0x20000068

08002aa4 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_RCC_GetClockConfig+0x3c>)
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	6002      	str	r2, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	f002 0203 	and.w	r2, r2, #3
 8002ab0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002ab8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002ac0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	08db      	lsrs	r3, r3, #3
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ac6:	b410      	push	{r4}

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ac8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002acc:	4c05      	ldr	r4, [pc, #20]	; (8002ae4 <HAL_RCC_GetClockConfig+0x40>)

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ace:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ad0:	6823      	ldr	r3, [r4, #0]
}
 8002ad2:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	600b      	str	r3, [r1, #0]
}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40023c00 	.word	0x40023c00

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aec:	2500      	movs	r5, #0
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aee:	b083      	sub	sp, #12
 8002af0:	4688      	mov	r8, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af2:	f8d1 b000 	ldr.w	fp, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af6:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8002cb4 <HAL_GPIO_Init+0x1cc>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	462a      	mov	r2, r5
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002afc:	f04f 0901 	mov.w	r9, #1
 8002b00:	e005      	b.n	8002b0e <HAL_GPIO_Init+0x26>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	3201      	adds	r2, #1
 8002b04:	2a10      	cmp	r2, #16
 8002b06:	f105 0502 	add.w	r5, r5, #2
 8002b0a:	f000 8084 	beq.w	8002c16 <HAL_GPIO_Init+0x12e>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b0e:	fa09 f302 	lsl.w	r3, r9, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8002b12:	ea33 010b 	bics.w	r1, r3, fp
 8002b16:	d1f4      	bne.n	8002b02 <HAL_GPIO_Init+0x1a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b18:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8002b1c:	f024 0710 	bic.w	r7, r4, #16
 8002b20:	1e79      	subs	r1, r7, #1
 8002b22:	2901      	cmp	r1, #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b24:	f04f 0103 	mov.w	r1, #3
 8002b28:	fa01 f105 	lsl.w	r1, r1, r5

    if(iocurrent == ioposition)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b2c:	d976      	bls.n	8002c1c <HAL_GPIO_Init+0x134>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
        GPIOx->OTYPER = temp;
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b2e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b30:	f8d8 6008 	ldr.w	r6, [r8, #8]
        GPIOx->OTYPER = temp;
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b34:	43c9      	mvns	r1, r1
 8002b36:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b38:	40ae      	lsls	r6, r5
 8002b3a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8002b3c:	60c6      	str	r6, [r0, #12]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b3e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b40:	f004 0703 	and.w	r7, r4, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b44:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b46:	4639      	mov	r1, r7
 8002b48:	40a9      	lsls	r1, r5
 8002b4a:	4331      	orrs	r1, r6
      GPIOx->MODER = temp;
 8002b4c:	6001      	str	r1, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b4e:	00e1      	lsls	r1, r4, #3
 8002b50:	d5d7      	bpl.n	8002b02 <HAL_GPIO_Init+0x1a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	2100      	movs	r1, #0
 8002b54:	4e52      	ldr	r6, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x1b8>)
 8002b56:	9101      	str	r1, [sp, #4]
 8002b58:	6c76      	ldr	r6, [r6, #68]	; 0x44
 8002b5a:	4f51      	ldr	r7, [pc, #324]	; (8002ca0 <HAL_GPIO_Init+0x1b8>)
 8002b5c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002b60:	647e      	str	r6, [r7, #68]	; 0x44
 8002b62:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8002b64:	f022 0703 	bic.w	r7, r2, #3
 8002b68:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002b6c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002b70:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002b74:	9601      	str	r6, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b76:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	9e01      	ldr	r6, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b7c:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b7e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002b82:	f04f 0e0f 	mov.w	lr, #15
 8002b86:	fa0e fe0a 	lsl.w	lr, lr, sl
 8002b8a:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8e:	4e45      	ldr	r6, [pc, #276]	; (8002ca4 <HAL_GPIO_Init+0x1bc>)
 8002b90:	42b0      	cmp	r0, r6
 8002b92:	d014      	beq.n	8002bbe <HAL_GPIO_Init+0xd6>
 8002b94:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002b98:	f501 3101 	add.w	r1, r1, #132096	; 0x20400
 8002b9c:	4288      	cmp	r0, r1
 8002b9e:	d074      	beq.n	8002c8a <HAL_GPIO_Init+0x1a2>
 8002ba0:	4941      	ldr	r1, [pc, #260]	; (8002ca8 <HAL_GPIO_Init+0x1c0>)
 8002ba2:	4288      	cmp	r0, r1
 8002ba4:	d074      	beq.n	8002c90 <HAL_GPIO_Init+0x1a8>
 8002ba6:	4941      	ldr	r1, [pc, #260]	; (8002cac <HAL_GPIO_Init+0x1c4>)
 8002ba8:	4288      	cmp	r0, r1
 8002baa:	d075      	beq.n	8002c98 <HAL_GPIO_Init+0x1b0>
 8002bac:	4940      	ldr	r1, [pc, #256]	; (8002cb0 <HAL_GPIO_Init+0x1c8>)
 8002bae:	4288      	cmp	r0, r1
 8002bb0:	bf0b      	itete	eq
 8002bb2:	2104      	moveq	r1, #4
 8002bb4:	2607      	movne	r6, #7
 8002bb6:	fa01 f10a 	lsleq.w	r1, r1, sl
 8002bba:	fa06 f10a 	lslne.w	r1, r6, sl
 8002bbe:	ea4e 0101 	orr.w	r1, lr, r1
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc2:	60b9      	str	r1, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc4:	f8dc 1000 	ldr.w	r1, [ip]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	43de      	mvns	r6, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bca:	03e7      	lsls	r7, r4, #15
        {
          temp |= iocurrent;
 8002bcc:	bf4c      	ite	mi
 8002bce:	4319      	orrmi	r1, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	4031      	andpl	r1, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002bd2:	f8cc 1000 	str.w	r1, [ip]

        temp = EXTI->EMR;
 8002bd6:	f8dc 1004 	ldr.w	r1, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bda:	03a7      	lsls	r7, r4, #14
        {
          temp |= iocurrent;
 8002bdc:	bf4c      	ite	mi
 8002bde:	4319      	orrmi	r1, r3
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8002be0:	4031      	andpl	r1, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002be2:	f8cc 1004 	str.w	r1, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be6:	f8dc 1008 	ldr.w	r1, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bea:	02e7      	lsls	r7, r4, #11
        {
          temp |= iocurrent;
 8002bec:	bf4c      	ite	mi
 8002bee:	4319      	orrmi	r1, r3
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	4031      	andpl	r1, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002bf2:	f8cc 1008 	str.w	r1, [ip, #8]

        temp = EXTI->FTSR;
 8002bf6:	f8dc 100c 	ldr.w	r1, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bfa:	02a4      	lsls	r4, r4, #10
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfc:	f102 0201 	add.w	r2, r2, #1
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8002c00:	bf54      	ite	pl
 8002c02:	ea06 0301 	andpl.w	r3, r6, r1
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8002c06:	430b      	orrmi	r3, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c08:	2a10      	cmp	r2, #16
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002c0a:	f8cc 300c 	str.w	r3, [ip, #12]
 8002c0e:	f105 0502 	add.w	r5, r5, #2
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c12:	f47f af7c 	bne.w	8002b0e <HAL_GPIO_Init+0x26>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8002c16:	b003      	add	sp, #12
 8002c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1c:	6886      	ldr	r6, [r0, #8]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c1e:	f8d8 e008 	ldr.w	lr, [r8, #8]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c22:	43c9      	mvns	r1, r1
 8002c24:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c28:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8002c2c:	40ae      	lsls	r6, r5
 8002c2e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8002c32:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c34:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c36:	f3c4 1a00 	ubfx	sl, r4, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c3a:	ea26 0603 	bic.w	r6, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c3e:	fa0a fa02 	lsl.w	sl, sl, r2
 8002c42:	ea4a 0606 	orr.w	r6, sl, r6
        GPIOx->OTYPER = temp;
 8002c46:	6046      	str	r6, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c48:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c4a:	fa0e fe05 	lsl.w	lr, lr, r5
        GPIOx->OTYPER = temp;
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c4e:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c50:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->PUPDR = temp;

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c54:	2f02      	cmp	r7, #2

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
      temp |= ((GPIO_Init->Pull) << (position * 2U));
      GPIOx->PUPDR = temp;
 8002c56:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c58:	f47f af71 	bne.w	8002b3e <HAL_GPIO_Init+0x56>
 8002c5c:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
 8002c60:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c64:	f002 0e07 	and.w	lr, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c68:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002c70:	260f      	movs	r6, #15
 8002c72:	fa06 f60e 	lsl.w	r6, r6, lr
 8002c76:	ea27 0606 	bic.w	r6, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c7a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8002c7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8002c82:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8002c84:	f8ca 6020 	str.w	r6, [sl, #32]
 8002c88:	e759      	b.n	8002b3e <HAL_GPIO_Init+0x56>
 8002c8a:	fa09 f10a 	lsl.w	r1, r9, sl
 8002c8e:	e796      	b.n	8002bbe <HAL_GPIO_Init+0xd6>
 8002c90:	2102      	movs	r1, #2
 8002c92:	fa01 f10a 	lsl.w	r1, r1, sl
 8002c96:	e792      	b.n	8002bbe <HAL_GPIO_Init+0xd6>
 8002c98:	2103      	movs	r1, #3
 8002c9a:	fa01 f10a 	lsl.w	r1, r1, sl
 8002c9e:	e78e      	b.n	8002bbe <HAL_GPIO_Init+0xd6>
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40013c00 	.word	0x40013c00

08002cb8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	b902      	cbnz	r2, 8002cbc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cba:	0409      	lsls	r1, r1, #16
 8002cbc:	6181      	str	r1, [r0, #24]
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f000 f9e2 	bl	800308c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cc8:	2c00      	cmp	r4, #0
 8002cca:	d072      	beq.n	8002db2 <HAL_DMA_Init+0xf2>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ccc:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cce:	6823      	ldr	r3, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cd4:	681a      	ldr	r2, [r3, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cd6:	2100      	movs	r1, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cdc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8002ce0:	4605      	mov	r5, r0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ce2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce4:	e005      	b.n	8002cf2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ce6:	f000 f9d1 	bl	800308c <HAL_GetTick>
 8002cea:	1b40      	subs	r0, r0, r5
 8002cec:	2805      	cmp	r0, #5
 8002cee:	d83a      	bhi.n	8002d66 <HAL_DMA_Init+0xa6>
 8002cf0:	6823      	ldr	r3, [r4, #0]
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	07d1      	lsls	r1, r2, #31
 8002cf6:	d4f6      	bmi.n	8002ce6 <HAL_DMA_Init+0x26>
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf8:	f104 000c 	add.w	r0, r4, #12
 8002cfc:	c827      	ldmia	r0, {r0, r1, r2, r5}
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cfe:	6867      	ldr	r7, [r4, #4]
 8002d00:	68a6      	ldr	r6, [r4, #8]
 8002d02:	433e      	orrs	r6, r7
 8002d04:	4330      	orrs	r0, r6
 8002d06:	4301      	orrs	r1, r0
 8002d08:	4311      	orrs	r1, r2
 8002d0a:	69e6      	ldr	r6, [r4, #28]
 8002d0c:	6a20      	ldr	r0, [r4, #32]
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d0e:	681f      	ldr	r7, [r3, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d10:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <HAL_DMA_Init+0x124>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d12:	4329      	orrs	r1, r5
 8002d14:	430e      	orrs	r6, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d16:	6a61      	ldr	r1, [r4, #36]	; 0x24
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d18:	4330      	orrs	r0, r6
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d1a:	403a      	ands	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d1c:	2904      	cmp	r1, #4
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1e:	ea42 0200 	orr.w	r2, r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d22:	d027      	beq.n	8002d74 <HAL_DMA_Init+0xb4>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d24:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d26:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d28:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d2c:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4d2d      	ldr	r5, [pc, #180]	; (8002de8 <HAL_DMA_Init+0x128>)
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d32:	6159      	str	r1, [r3, #20]
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d34:	3a10      	subs	r2, #16
 8002d36:	fba5 1202 	umull	r1, r2, r5, r2
 8002d3a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d3c:	482b      	ldr	r0, [pc, #172]	; (8002dec <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d42:	5c81      	ldrb	r1, [r0, r2]
 8002d44:	65e1      	str	r1, [r4, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d46:	f023 0303 	bic.w	r3, r3, #3
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
 8002d4a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d4c:	bf88      	it	hi
 8002d4e:	3304      	addhi	r3, #4
  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d50:	223f      	movs	r2, #63	; 0x3f
 8002d52:	408a      	lsls	r2, r1

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d54:	2501      	movs	r5, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d56:	2100      	movs	r1, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d58:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
 8002d5a:	4608      	mov	r0, r1
  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5c:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5e:	6561      	str	r1, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d60:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35

  return HAL_OK;
 8002d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d68:	2220      	movs	r2, #32
 8002d6a:	6562      	str	r2, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
      
      return HAL_TIMEOUT;
 8002d6c:	4618      	mov	r0, r3
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002d76:	6b21      	ldr	r1, [r4, #48]	; 0x30

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d78:	6aa6      	ldr	r6, [r4, #40]	; 0x28

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d7a:	4301      	orrs	r1, r0
 8002d7c:	430a      	orrs	r2, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d80:	695a      	ldr	r2, [r3, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d82:	f046 0104 	orr.w	r1, r6, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d86:	f022 0207 	bic.w	r2, r2, #7

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d8a:	4311      	orrs	r1, r2
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d0ce      	beq.n	8002d2e <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d90:	b18d      	cbz	r5, 8002db6 <HAL_DMA_Init+0xf6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d92:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002d96:	d018      	beq.n	8002dca <HAL_DMA_Init+0x10a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d98:	2e02      	cmp	r6, #2
 8002d9a:	d903      	bls.n	8002da4 <HAL_DMA_Init+0xe4>
 8002d9c:	2e03      	cmp	r6, #3
 8002d9e:	d1c6      	bne.n	8002d2e <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da0:	01c2      	lsls	r2, r0, #7
 8002da2:	d5c4      	bpl.n	8002d2e <HAL_DMA_Init+0x6e>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002da4:	2301      	movs	r3, #1
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	6562      	str	r2, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
        
        return HAL_ERROR; 
 8002daa:	4618      	mov	r0, r3
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8002db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002db2:	2001      	movs	r0, #1
 8002db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
  {
    switch (tmp)
 8002db6:	2e01      	cmp	r6, #1
 8002db8:	d003      	beq.n	8002dc2 <HAL_DMA_Init+0x102>
 8002dba:	d3f1      	bcc.n	8002da0 <HAL_DMA_Init+0xe0>
 8002dbc:	2e02      	cmp	r6, #2
 8002dbe:	d1b6      	bne.n	8002d2e <HAL_DMA_Init+0x6e>
 8002dc0:	e7ee      	b.n	8002da0 <HAL_DMA_Init+0xe0>
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc2:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002dc6:	d1b2      	bne.n	8002d2e <HAL_DMA_Init+0x6e>
 8002dc8:	e7ec      	b.n	8002da4 <HAL_DMA_Init+0xe4>
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
  {
    switch (tmp)
 8002dca:	2e03      	cmp	r6, #3
 8002dcc:	d8af      	bhi.n	8002d2e <HAL_DMA_Init+0x6e>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <HAL_DMA_Init+0x114>)
 8002dd0:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8002dd4:	08002da5 	.word	0x08002da5
 8002dd8:	08002da1 	.word	0x08002da1
 8002ddc:	08002da5 	.word	0x08002da5
 8002de0:	08002dc3 	.word	0x08002dc3
 8002de4:	f010803f 	.word	0xf010803f
 8002de8:	aaaaaaab 	.word	0xaaaaaaab
 8002dec:	0800738c 	.word	0x0800738c

08002df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df2:	b083      	sub	sp, #12
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002df4:	2300      	movs	r3, #0
  uint32_t timeout = SystemCoreClock / 9600U;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df6:	6d87      	ldr	r7, [r0, #88]	; 0x58
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002df8:	9301      	str	r3, [sp, #4]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600U;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8002dfc:	683d      	ldr	r5, [r7, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dfe:	4962      	ldr	r1, [pc, #392]	; (8002f88 <HAL_DMA_IRQHandler+0x198>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	2208      	movs	r2, #8
 8002e02:	409a      	lsls	r2, r3
 8002e04:	4215      	tst	r5, r2
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e06:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e08:	680e      	ldr	r6, [r1, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0a:	d003      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x24>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e0c:	6801      	ldr	r1, [r0, #0]
 8002e0e:	6808      	ldr	r0, [r1, #0]
 8002e10:	0740      	lsls	r0, r0, #29
 8002e12:	d476      	bmi.n	8002f02 <HAL_DMA_IRQHandler+0x112>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e14:	2201      	movs	r2, #1
 8002e16:	409a      	lsls	r2, r3
 8002e18:	4215      	tst	r5, r2
 8002e1a:	d003      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e1c:	6821      	ldr	r1, [r4, #0]
 8002e1e:	6949      	ldr	r1, [r1, #20]
 8002e20:	0608      	lsls	r0, r1, #24
 8002e22:	d468      	bmi.n	8002ef6 <HAL_DMA_IRQHandler+0x106>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e24:	2204      	movs	r2, #4
 8002e26:	409a      	lsls	r2, r3
 8002e28:	4215      	tst	r5, r2
 8002e2a:	d003      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x44>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e2c:	6821      	ldr	r1, [r4, #0]
 8002e2e:	6809      	ldr	r1, [r1, #0]
 8002e30:	0789      	lsls	r1, r1, #30
 8002e32:	d45a      	bmi.n	8002eea <HAL_DMA_IRQHandler+0xfa>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e34:	2210      	movs	r2, #16
 8002e36:	409a      	lsls	r2, r3
 8002e38:	4215      	tst	r5, r2
 8002e3a:	d003      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x54>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e3c:	6821      	ldr	r1, [r4, #0]
 8002e3e:	6808      	ldr	r0, [r1, #0]
 8002e40:	0700      	lsls	r0, r0, #28
 8002e42:	d43f      	bmi.n	8002ec4 <HAL_DMA_IRQHandler+0xd4>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e44:	2220      	movs	r2, #32
 8002e46:	409a      	lsls	r2, r3
 8002e48:	4215      	tst	r5, r2
 8002e4a:	d003      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e4c:	6821      	ldr	r1, [r4, #0]
 8002e4e:	6808      	ldr	r0, [r1, #0]
 8002e50:	06c0      	lsls	r0, r0, #27
 8002e52:	d425      	bmi.n	8002ea0 <HAL_DMA_IRQHandler+0xb0>
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e56:	b30b      	cbz	r3, 8002e9c <HAL_DMA_IRQHandler+0xac>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e5a:	07da      	lsls	r2, r3, #31
 8002e5c:	d51a      	bpl.n	8002e94 <HAL_DMA_IRQHandler+0xa4>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e5e:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e60:	6821      	ldr	r1, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e62:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e66:	680b      	ldr	r3, [r1, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e68:	4a48      	ldr	r2, [pc, #288]	; (8002f8c <HAL_DMA_IRQHandler+0x19c>)
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e6e:	fba2 0206 	umull	r0, r2, r2, r6
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e72:	600b      	str	r3, [r1, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e74:	0a92      	lsrs	r2, r2, #10
 8002e76:	e002      	b.n	8002e7e <HAL_DMA_IRQHandler+0x8e>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e78:	680b      	ldr	r3, [r1, #0]
 8002e7a:	07db      	lsls	r3, r3, #31
 8002e7c:	d504      	bpl.n	8002e88 <HAL_DMA_IRQHandler+0x98>
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8002e7e:	9b01      	ldr	r3, [sp, #4]
 8002e80:	3301      	adds	r3, #1
 8002e82:	429a      	cmp	r2, r3
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	d2f7      	bcs.n	8002e78 <HAL_DMA_IRQHandler+0x88>
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e88:	2200      	movs	r2, #0

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	2301      	movs	r3, #1
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e8c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e90:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e96:	b10b      	cbz	r3, 8002e9c <HAL_DMA_IRQHandler+0xac>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e98:	4620      	mov	r0, r4
 8002e9a:	4798      	blx	r3
    }
  }
}
 8002e9c:	b003      	add	sp, #12
 8002e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ea0:	60ba      	str	r2, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ea2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002ea6:	2a05      	cmp	r2, #5
 8002ea8:	d03b      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x132>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eaa:	680b      	ldr	r3, [r1, #0]
 8002eac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb0:	680b      	ldr	r3, [r1, #0]
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eb2:	d054      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x16e>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb4:	0319      	lsls	r1, r3, #12
 8002eb6:	d55f      	bpl.n	8002f78 <HAL_DMA_IRQHandler+0x188>

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
        }

        if(hdma->XferCpltCallback != NULL)
 8002eb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ca      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x64>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4798      	blx	r3
 8002ec2:	e7c7      	b.n	8002e54 <HAL_DMA_IRQHandler+0x64>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ec4:	60ba      	str	r2, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec6:	680a      	ldr	r2, [r1, #0]
 8002ec8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ecc:	680a      	ldr	r2, [r1, #0]
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ece:	d122      	bne.n	8002f16 <HAL_DMA_IRQHandler+0x126>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed0:	05d2      	lsls	r2, r2, #23
 8002ed2:	d403      	bmi.n	8002edc <HAL_DMA_IRQHandler+0xec>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed4:	680a      	ldr	r2, [r1, #0]
 8002ed6:	f022 0208 	bic.w	r2, r2, #8
 8002eda:	600a      	str	r2, [r1, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002edc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ede:	2a00      	cmp	r2, #0
 8002ee0:	d0b0      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x54>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4790      	blx	r2
 8002ee6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ee8:	e7ac      	b.n	8002e44 <HAL_DMA_IRQHandler+0x54>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eea:	60ba      	str	r2, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002eee:	f042 0204 	orr.w	r2, r2, #4
 8002ef2:	6562      	str	r2, [r4, #84]	; 0x54
 8002ef4:	e79e      	b.n	8002e34 <HAL_DMA_IRQHandler+0x44>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ef6:	60ba      	str	r2, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ef8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002efa:	f042 0202 	orr.w	r2, r2, #2
 8002efe:	6562      	str	r2, [r4, #84]	; 0x54
 8002f00:	e790      	b.n	8002e24 <HAL_DMA_IRQHandler+0x34>
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f02:	6808      	ldr	r0, [r1, #0]
 8002f04:	f020 0004 	bic.w	r0, r0, #4
 8002f08:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f0a:	60ba      	str	r2, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	6562      	str	r2, [r4, #84]	; 0x54
 8002f14:	e77e      	b.n	8002e14 <HAL_DMA_IRQHandler+0x24>
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f16:	0311      	lsls	r1, r2, #12
 8002f18:	d5e0      	bpl.n	8002edc <HAL_DMA_IRQHandler+0xec>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	d1e0      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0xf2>
 8002f20:	e790      	b.n	8002e44 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f22:	680a      	ldr	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f24:	6c20      	ldr	r0, [r4, #64]	; 0x40
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f26:	f022 0216 	bic.w	r2, r2, #22
 8002f2a:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2c:	694a      	ldr	r2, [r1, #20]
 8002f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f32:	614a      	str	r2, [r1, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f34:	b320      	cbz	r0, 8002f80 <HAL_DMA_IRQHandler+0x190>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f36:	680a      	ldr	r2, [r1, #0]
 8002f38:	f022 0208 	bic.w	r2, r2, #8
 8002f3c:	600a      	str	r2, [r1, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3e:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;

        if(hdma->XferAbortCallback != NULL)
 8002f40:	6d21      	ldr	r1, [r4, #80]	; 0x50
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f46:	2000      	movs	r0, #0

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f48:	2201      	movs	r2, #1
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f4a:	60bb      	str	r3, [r7, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f50:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f54:	2900      	cmp	r1, #0
 8002f56:	d0a1      	beq.n	8002e9c <HAL_DMA_IRQHandler+0xac>
        {
          hdma->XferAbortCallback(hdma);
 8002f58:	4620      	mov	r0, r4
 8002f5a:	4788      	blx	r1
 8002f5c:	e79e      	b.n	8002e9c <HAL_DMA_IRQHandler+0xac>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f5e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002f62:	d1a9      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0xc8>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f64:	680a      	ldr	r2, [r1, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f66:	2001      	movs	r0, #1
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f68:	f022 0210 	bic.w	r2, r2, #16
 8002f6c:	600a      	str	r2, [r1, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f72:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002f76:	e79f      	b.n	8002eb8 <HAL_DMA_IRQHandler+0xc8>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d19f      	bne.n	8002ebe <HAL_DMA_IRQHandler+0xce>
 8002f7e:	e769      	b.n	8002e54 <HAL_DMA_IRQHandler+0x64>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
        hdma->Instance->FCR &= ~(DMA_IT_FE);
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f80:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002f82:	2a00      	cmp	r2, #0
 8002f84:	d1d7      	bne.n	8002f36 <HAL_DMA_IRQHandler+0x146>
 8002f86:	e7da      	b.n	8002f3e <HAL_DMA_IRQHandler+0x14e>
 8002f88:	20000068 	.word	0x20000068
 8002f8c:	1b4e81b5 	.word	0x1b4e81b5

08002f90 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f90:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002f92:	68d1      	ldr	r1, [r2, #12]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	400b      	ands	r3, r1
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002f9a:	0200      	lsls	r0, r0, #8
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa8:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002faa:	60d3      	str	r3, [r2, #12]
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_NVIC_SetPriority+0x68>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fbc:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbe:	f1c3 0507 	rsb	r5, r3, #7
 8002fc2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc4:	f103 0404 	add.w	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	bf28      	it	cs
 8002fca:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fcc:	2c06      	cmp	r4, #6
 8002fce:	d918      	bls.n	8003002 <HAL_NVIC_SetPriority+0x4e>
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	2401      	movs	r4, #1
 8002fd4:	409c      	lsls	r4, r3
 8002fd6:	3c01      	subs	r4, #1
 8002fd8:	4022      	ands	r2, r4

  return (
 8002fda:	2401      	movs	r4, #1
 8002fdc:	40ac      	lsls	r4, r5
 8002fde:	3c01      	subs	r4, #1
 8002fe0:	4021      	ands	r1, r4
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002fe8:	ea42 0203 	orr.w	r2, r2, r3
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002fec:	db0c      	blt.n	8003008 <HAL_NVIC_SetPriority+0x54>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002ff2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ffe:	bc30      	pop	{r4, r5}
 8003000:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	2200      	movs	r2, #0
 8003004:	4613      	mov	r3, r2
 8003006:	e7e8      	b.n	8002fda <HAL_NVIC_SetPriority+0x26>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_NVIC_SetPriority+0x6c>)
 800300a:	f000 000f 	and.w	r0, r0, #15
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	4403      	add	r3, r0
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	761a      	strb	r2, [r3, #24]
 8003016:	bc30      	pop	{r4, r5}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00
 8003020:	e000ecfc 	.word	0xe000ecfc

08003024 <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003024:	2800      	cmp	r0, #0
 8003026:	db07      	blt.n	8003038 <HAL_NVIC_EnableIRQ+0x14>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003028:	f000 011f 	and.w	r1, r0, #31
 800302c:	2301      	movs	r3, #1
 800302e:	0940      	lsrs	r0, r0, #5
 8003030:	4a02      	ldr	r2, [pc, #8]	; (800303c <HAL_NVIC_EnableIRQ+0x18>)
 8003032:	408b      	lsls	r3, r1
 8003034:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000e100 	.word	0xe000e100

08003040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003040:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_Init+0x30>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003052:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800305c:	2003      	movs	r0, #3
 800305e:	f7ff ff97 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003062:	2000      	movs	r0, #0
 8003064:	f002 ffc8 	bl	8005ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003068:	f7fd feea 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800306c:	2000      	movs	r0, #0
 800306e:	bd08      	pop	{r3, pc}
 8003070:	40023c00 	.word	0x40023c00

08003074 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003074:	4a03      	ldr	r2, [pc, #12]	; (8003084 <HAL_IncTick+0x10>)
 8003076:	4904      	ldr	r1, [pc, #16]	; (8003088 <HAL_IncTick+0x14>)
 8003078:	6813      	ldr	r3, [r2, #0]
 800307a:	7809      	ldrb	r1, [r1, #0]
 800307c:	440b      	add	r3, r1
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20009f08 	.word	0x20009f08
 8003088:	20000064 	.word	0x20000064

0800308c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800308c:	4b01      	ldr	r3, [pc, #4]	; (8003094 <HAL_GetTick+0x8>)
 800308e:	6818      	ldr	r0, [r3, #0]
}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20009f08 	.word	0x20009f08

08003098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003098:	b538      	push	{r3, r4, r5, lr}
 800309a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff fff6 	bl	800308c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030a0:	1c63      	adds	r3, r4, #1
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 80030a2:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030a4:	d002      	beq.n	80030ac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_Delay+0x20>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ac:	f7ff ffee 	bl	800308c <HAL_GetTick>
 80030b0:	1b40      	subs	r0, r0, r5
 80030b2:	4284      	cmp	r4, r0
 80030b4:	d8fa      	bhi.n	80030ac <HAL_Delay+0x14>
  {
  }
}
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	20000064 	.word	0x20000064

080030bc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030bc:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030be:	688a      	ldr	r2, [r1, #8]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c0:	f023 0301 	bic.w	r3, r3, #1
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c4:	b4f0      	push	{r4, r5, r6, r7}

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c6:	680c      	ldr	r4, [r1, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ca:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030cc:	4e10      	ldr	r6, [pc, #64]	; (8003110 <TIM_OC1_SetConfig+0x54>)
  TIMx->CCER &= ~TIM_CCER_CC1E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ce:	6847      	ldr	r7, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d0:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d2:	f023 0302 	bic.w	r3, r3, #2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030d6:	f025 0573 	bic.w	r5, r5, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030da:	42b0      	cmp	r0, r6
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030dc:	ea43 0302 	orr.w	r3, r3, r2

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e0:	ea45 0204 	orr.w	r2, r5, r4
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030e4:	d006      	beq.n	80030f4 <TIM_OC1_SetConfig+0x38>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030e6:	6849      	ldr	r1, [r1, #4]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e8:	6047      	str	r7, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ea:	6182      	str	r2, [r0, #24]
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80030ec:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ee:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f0:	6203      	str	r3, [r0, #32]
}
 80030f2:	4770      	bx	lr
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030f4:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030f6:	694e      	ldr	r6, [r1, #20]
 80030f8:	698c      	ldr	r4, [r1, #24]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030fa:	f023 0308 	bic.w	r3, r3, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030fe:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003102:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003104:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003106:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800310a:	4327      	orrs	r7, r4
 800310c:	e7eb      	b.n	80030e6 <TIM_OC1_SetConfig+0x2a>
 800310e:	bf00      	nop
 8003110:	40010000 	.word	0x40010000

08003114 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003114:	6a02      	ldr	r2, [r0, #32]
 8003116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800311a:	b4f0      	push	{r4, r5, r6, r7}
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800311c:	688e      	ldr	r6, [r1, #8]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800311e:	680c      	ldr	r4, [r1, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003120:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003122:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003124:	4d11      	ldr	r5, [pc, #68]	; (800316c <TIM_OC3_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC3E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003126:	6847      	ldr	r7, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003128:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800312a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800312e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003132:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003134:	ea43 2306 	orr.w	r3, r3, r6, lsl #8

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	ea42 0204 	orr.w	r2, r2, r4
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800313c:	d006      	beq.n	800314c <TIM_OC3_SetConfig+0x38>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800313e:	6849      	ldr	r1, [r1, #4]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003140:	6047      	str	r7, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003142:	61c2      	str	r2, [r0, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003144:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003146:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003148:	6203      	str	r3, [r0, #32]
}
 800314a:	4770      	bx	lr
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800314c:	68ce      	ldr	r6, [r1, #12]

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800314e:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003150:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003152:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800315a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800315e:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003166:	ea45 1704 	orr.w	r7, r5, r4, lsl #4
 800316a:	e7e8      	b.n	800313e <TIM_OC3_SetConfig+0x2a>
 800316c:	40010000 	.word	0x40010000

08003170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003172:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003174:	688f      	ldr	r7, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003176:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003178:	4d0e      	ldr	r5, [pc, #56]	; (80031b4 <TIM_OC4_SetConfig+0x44>)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800317a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800317e:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003180:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003182:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003184:	69c2      	ldr	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800318a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318e:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003190:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003194:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003198:	d006      	beq.n	80031a8 <TIM_OC4_SetConfig+0x38>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800319a:	6849      	ldr	r1, [r1, #4]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319e:	61c2      	str	r2, [r0, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80031a0:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a2:	6401      	str	r1, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a4:	6203      	str	r3, [r0, #32]
}
 80031a6:	4770      	bx	lr

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031a8:	694d      	ldr	r5, [r1, #20]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031aa:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031ae:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80031b2:	e7f2      	b.n	800319a <TIM_OC4_SetConfig+0x2a>
 80031b4:	40010000 	.word	0x40010000

080031b8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c2:	689a      	ldr	r2, [r3, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	f002 0207 	and.w	r2, r2, #7
 80031c8:	2a06      	cmp	r2, #6
 80031ca:	d003      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x1c>
  {
    __HAL_TIM_ENABLE(htim);
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80031d4:	2000      	movs	r0, #0
 80031d6:	4770      	bx	lr

080031d8 <HAL_TIM_OC_MspInit>:
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <HAL_TIM_PWM_MspInit>:
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop

080031e0 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d031      	beq.n	800324c <HAL_TIM_ConfigClockSource+0x6c>

  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	2202      	movs	r2, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ea:	6803      	ldr	r3, [r0, #0]
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ec:	b470      	push	{r4, r5, r6}
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;
 80031ee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80031f4:	680c      	ldr	r4, [r1, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80031fa:	f022 0277 	bic.w	r2, r2, #119	; 0x77
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fe:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8003200:	2c40      	cmp	r4, #64	; 0x40
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003202:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
 8003206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003208:	d03c      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0xa4>
 800320a:	d953      	bls.n	80032b4 <HAL_TIM_ConfigClockSource+0xd4>
 800320c:	2c60      	cmp	r4, #96	; 0x60
 800320e:	d070      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x112>
 8003210:	d91e      	bls.n	8003250 <HAL_TIM_ConfigClockSource+0x70>
 8003212:	2c70      	cmp	r4, #112	; 0x70
 8003214:	d05d      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0xf2>
 8003216:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800321a:	d10e      	bne.n	800323a <HAL_TIM_ConfigClockSource+0x5a>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800321c:	689c      	ldr	r4, [r3, #8]
 800321e:	688a      	ldr	r2, [r1, #8]
 8003220:	684d      	ldr	r5, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003222:	68ce      	ldr	r6, [r1, #12]
 8003224:	432a      	orrs	r2, r5
 8003226:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
 800322a:	430a      	orrs	r2, r1
 800322c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003230:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003238:	609a      	str	r2, [r3, #8]
    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800323a:	2300      	movs	r3, #0
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 800323c:	2201      	movs	r2, #1
 800323e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003242:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003246:	bc70      	pop	{r4, r5, r6}
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
 8003248:	4618      	mov	r0, r3
}
 800324a:	4770      	bx	lr
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324c:	2002      	movs	r0, #2
 800324e:	4770      	bx	lr
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8003250:	2c50      	cmp	r4, #80	; 0x50
 8003252:	d1f2      	bne.n	800323a <HAL_TIM_ConfigClockSource+0x5a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003254:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003256:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003258:	684e      	ldr	r6, [r1, #4]
 800325a:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800325c:	f024 0401 	bic.w	r4, r4, #1
 8003260:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003262:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003264:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003268:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800326c:	4332      	orrs	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800326e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003272:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003274:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003276:	689a      	ldr	r2, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003278:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800327c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	e7da      	b.n	800323a <HAL_TIM_ConfigClockSource+0x5a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003284:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003286:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003288:	684e      	ldr	r6, [r1, #4]
 800328a:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328c:	f024 0401 	bic.w	r4, r4, #1
 8003290:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003294:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003298:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800329c:	4332      	orrs	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800329e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a4:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032a6:	689a      	ldr	r2, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ac:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	e7c2      	b.n	800323a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80032b4:	2c10      	cmp	r4, #16
 80032b6:	d004      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0xe2>
 80032b8:	d934      	bls.n	8003324 <HAL_TIM_ConfigClockSource+0x144>
 80032ba:	2c20      	cmp	r4, #32
 80032bc:	d001      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0xe2>
 80032be:	2c30      	cmp	r4, #48	; 0x30
 80032c0:	d1bb      	bne.n	800323a <HAL_TIM_ConfigClockSource+0x5a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032c2:	689a      	ldr	r2, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032c4:	f044 0407 	orr.w	r4, r4, #7
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032cc:	4314      	orrs	r4, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ce:	609c      	str	r4, [r3, #8]
 80032d0:	e7b3      	b.n	800323a <HAL_TIM_ConfigClockSource+0x5a>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032d2:	689c      	ldr	r4, [r3, #8]
 80032d4:	688a      	ldr	r2, [r1, #8]
 80032d6:	684d      	ldr	r5, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d8:	68ce      	ldr	r6, [r1, #12]
 80032da:	432a      	orrs	r2, r5
 80032dc:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
 80032e0:	430a      	orrs	r2, r1
 80032e2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e6:	609a      	str	r2, [r3, #8]
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032e8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ea:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ee:	609a      	str	r2, [r3, #8]
      break;
 80032f0:	e7a3      	b.n	800323a <HAL_TIM_ConfigClockSource+0x5a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f2:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f4:	684d      	ldr	r5, [r1, #4]
 80032f6:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f8:	f024 0410 	bic.w	r4, r4, #16
 80032fc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fe:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003300:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003302:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003306:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800330a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800330e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003312:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003314:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003316:	689a      	ldr	r2, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003318:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800331c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	e78a      	b.n	800323a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8003324:	2c00      	cmp	r4, #0
 8003326:	d0cc      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0xe2>
 8003328:	e787      	b.n	800323a <HAL_TIM_ConfigClockSource+0x5a>
 800332a:	bf00      	nop

0800332c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800332c:	4a2c      	ldr	r2, [pc, #176]	; (80033e0 <TIM_Base_SetConfig+0xb4>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003330:	4290      	cmp	r0, r2
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003332:	b430      	push	{r4, r5}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003334:	d03c      	beq.n	80033b0 <TIM_Base_SetConfig+0x84>
 8003336:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800333a:	d024      	beq.n	8003386 <TIM_Base_SetConfig+0x5a>
 800333c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003340:	4290      	cmp	r0, r2
 8003342:	d020      	beq.n	8003386 <TIM_Base_SetConfig+0x5a>
 8003344:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003348:	4290      	cmp	r0, r2
 800334a:	d01c      	beq.n	8003386 <TIM_Base_SetConfig+0x5a>
 800334c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003350:	4290      	cmp	r0, r2
 8003352:	d018      	beq.n	8003386 <TIM_Base_SetConfig+0x5a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003354:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003358:	4290      	cmp	r0, r2
 800335a:	d018      	beq.n	800338e <TIM_Base_SetConfig+0x62>
 800335c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003360:	4290      	cmp	r0, r2
 8003362:	d014      	beq.n	800338e <TIM_Base_SetConfig+0x62>
 8003364:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003368:	4290      	cmp	r0, r2
 800336a:	d010      	beq.n	800338e <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800336c:	694a      	ldr	r2, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800336e:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	6809      	ldr	r1, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003376:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003378:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800337a:	2301      	movs	r3, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800337c:	62c4      	str	r4, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800337e:	6281      	str	r1, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
}
 8003380:	bc30      	pop	{r4, r5}
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003382:	6143      	str	r3, [r0, #20]
}
 8003384:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003386:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800338c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800338e:	68ca      	ldr	r2, [r1, #12]
 8003390:	694c      	ldr	r4, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003392:	688d      	ldr	r5, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003394:	6809      	ldr	r1, [r1, #0]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800339a:	4313      	orrs	r3, r2
 800339c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a0:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80033a2:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a4:	2301      	movs	r3, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a6:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a8:	6281      	str	r1, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
}
 80033aa:	bc30      	pop	{r4, r5}
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ac:	6143      	str	r3, [r0, #20]
}
 80033ae:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80033b0:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b2:	68ca      	ldr	r2, [r1, #12]
 80033b4:	694d      	ldr	r5, [r1, #20]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033ba:	431c      	orrs	r4, r3
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033bc:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c0:	4322      	orrs	r2, r4
 80033c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c6:	432a      	orrs	r2, r5

  TIMx->CR1 = tmpcr1;
 80033c8:	6002      	str	r2, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ca:	688b      	ldr	r3, [r1, #8]
 80033cc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ce:	680b      	ldr	r3, [r1, #0]
 80033d0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d2:	690b      	ldr	r3, [r1, #16]
 80033d4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d6:	2301      	movs	r3, #1
 80033d8:	6143      	str	r3, [r0, #20]
}
 80033da:	bc30      	pop	{r4, r5}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000

080033e4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e4:	b1b8      	cbz	r0, 8003416 <HAL_TIM_Base_Init+0x32>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ea:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033f0:	4604      	mov	r4, r0
 80033f2:	b15b      	cbz	r3, 800340c <HAL_TIM_Base_Init+0x28>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	2302      	movs	r3, #2
 80033f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	1d21      	adds	r1, r4, #4
 80033fe:	f7ff ff95 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003402:	2301      	movs	r3, #1
 8003404:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8003408:	2000      	movs	r0, #0
 800340a:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003410:	f7fd fdac 	bl	8000f6c <HAL_TIM_Base_MspInit>
 8003414:	e7ee      	b.n	80033f4 <HAL_TIM_Base_Init+0x10>
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8003416:	2001      	movs	r0, #1
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <HAL_TIM_OC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	b1b8      	cbz	r0, 800344e <HAL_TIM_OC_Init+0x32>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003422:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003424:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003428:	4604      	mov	r4, r0
 800342a:	b15b      	cbz	r3, 8003444 <HAL_TIM_OC_Init+0x28>
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	2302      	movs	r3, #2
 800342e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	1d21      	adds	r1, r4, #4
 8003436:	f7ff ff79 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343a:	2301      	movs	r3, #1
 800343c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8003440:	2000      	movs	r0, #0
 8003442:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003444:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003448:	f7ff fec6 	bl	80031d8 <HAL_TIM_OC_MspInit>
 800344c:	e7ee      	b.n	800342c <HAL_TIM_OC_Init+0x10>
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 800344e:	2001      	movs	r0, #1
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop

08003454 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	b1b8      	cbz	r0, 8003486 <HAL_TIM_PWM_Init+0x32>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003456:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800345a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003460:	4604      	mov	r4, r0
 8003462:	b15b      	cbz	r3, 800347c <HAL_TIM_PWM_Init+0x28>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	2302      	movs	r3, #2
 8003466:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346a:	6820      	ldr	r0, [r4, #0]
 800346c:	1d21      	adds	r1, r4, #4
 800346e:	f7ff ff5d 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003472:	2301      	movs	r3, #1
 8003474:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8003478:	2000      	movs	r0, #0
 800347a:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003480:	f7ff feac 	bl	80031dc <HAL_TIM_PWM_MspInit>
 8003484:	e7ee      	b.n	8003464 <HAL_TIM_PWM_Init+0x10>
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8003486:	2001      	movs	r0, #1
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop

0800348c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003490:	f8d1 e008 	ldr.w	lr, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003494:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003496:	4d13      	ldr	r5, [pc, #76]	; (80034e4 <TIM_OC2_SetConfig+0x58>)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003498:	f024 0410 	bic.w	r4, r4, #16
 800349c:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	6847      	ldr	r7, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034a2:	6982      	ldr	r2, [r0, #24]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034a4:	f023 0320 	bic.w	r3, r3, #32
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034a8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ac:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034ae:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034b6:	d005      	beq.n	80034c4 <TIM_OC2_SetConfig+0x38>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b8:	6849      	ldr	r1, [r1, #4]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ba:	6047      	str	r7, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034bc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034be:	6381      	str	r1, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c0:	6203      	str	r3, [r0, #32]
 80034c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c4:	68ce      	ldr	r6, [r1, #12]

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034c6:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c8:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034ca:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034d2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d6:	ea47 0585 	orr.w	r5, r7, r5, lsl #2
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034de:	ea45 0784 	orr.w	r7, r5, r4, lsl #2
 80034e2:	e7e9      	b.n	80034b8 <TIM_OC2_SetConfig+0x2c>
 80034e4:	40010000 	.word	0x40010000

080034e8 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d01c      	beq.n	800352a <HAL_TIM_OC_ConfigChannel+0x42>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80034f0:	b510      	push	{r4, lr}
 80034f2:	4604      	mov	r4, r0
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	2302      	movs	r3, #2
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  switch (Channel)
 8003500:	2a0c      	cmp	r2, #12
 8003502:	d80b      	bhi.n	800351c <HAL_TIM_OC_ConfigChannel+0x34>
 8003504:	e8df f002 	tbb	[pc, r2]
 8003508:	0a0a0a17 	.word	0x0a0a0a17
 800350c:	0a0a0a07 	.word	0x0a0a0a07
 8003510:	0a0a0a1b 	.word	0x0a0a0a1b
 8003514:	13          	.byte	0x13
 8003515:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003516:	6820      	ldr	r0, [r4, #0]
 8003518:	f7ff ffb8 	bl	800348c <TIM_OC2_SetConfig>

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800351c:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800351e:	2000      	movs	r0, #0

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8003520:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8003528:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800352a:	2002      	movs	r0, #2
 800352c:	4770      	bx	lr
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352e:	6820      	ldr	r0, [r4, #0]
 8003530:	f7ff fe1e 	bl	8003170 <TIM_OC4_SetConfig>
      break;
 8003534:	e7f2      	b.n	800351c <HAL_TIM_OC_ConfigChannel+0x34>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	f7ff fdc0 	bl	80030bc <TIM_OC1_SetConfig>
      break;
 800353c:	e7ee      	b.n	800351c <HAL_TIM_OC_ConfigChannel+0x34>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	f7ff fde8 	bl	8003114 <TIM_OC3_SetConfig>
      break;
 8003544:	e7ea      	b.n	800351c <HAL_TIM_OC_ConfigChannel+0x34>
 8003546:	bf00      	nop

08003548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003548:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800354a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d02b      	beq.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x62>
 8003552:	460d      	mov	r5, r1

  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	2302      	movs	r3, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003556:	2101      	movs	r1, #1
 8003558:	4604      	mov	r4, r0
 800355a:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 8003562:	2a0c      	cmp	r2, #12
 8003564:	d81a      	bhi.n	800359c <HAL_TIM_PWM_ConfigChannel+0x54>
 8003566:	e8df f002 	tbb	[pc, r2]
 800356a:	1935      	.short	0x1935
 800356c:	19071919 	.word	0x19071919
 8003570:	19471919 	.word	0x19471919
 8003574:	1919      	.short	0x1919
 8003576:	22          	.byte	0x22
 8003577:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003578:	4629      	mov	r1, r5
 800357a:	6800      	ldr	r0, [r0, #0]
 800357c:	f7ff ff86 	bl	800348c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003580:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003582:	6928      	ldr	r0, [r5, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003584:	6999      	ldr	r1, [r3, #24]
 8003586:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800358a:	6199      	str	r1, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800358c:	6999      	ldr	r1, [r3, #24]
 800358e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003592:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800359a:	619a      	str	r2, [r3, #24]

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800359c:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800359e:	2000      	movs	r0, #0

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80035a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 80035a8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035aa:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80035ac:	bd38      	pop	{r3, r4, r5, pc}
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ae:	4629      	mov	r1, r5
 80035b0:	6800      	ldr	r0, [r0, #0]
 80035b2:	f7ff fddd 	bl	8003170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035b6:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035b8:	6928      	ldr	r0, [r5, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ba:	69d9      	ldr	r1, [r3, #28]
 80035bc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80035c0:	61d9      	str	r1, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035c2:	69d9      	ldr	r1, [r3, #28]
 80035c4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80035c8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80035d0:	61da      	str	r2, [r3, #28]
      break;
 80035d2:	e7e3      	b.n	800359c <HAL_TIM_PWM_ConfigChannel+0x54>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035d4:	4629      	mov	r1, r5
 80035d6:	6800      	ldr	r0, [r0, #0]
 80035d8:	f7ff fd70 	bl	80030bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035dc:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035de:	692a      	ldr	r2, [r5, #16]

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	f041 0108 	orr.w	r1, r1, #8
 80035e6:	6199      	str	r1, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035e8:	6999      	ldr	r1, [r3, #24]
 80035ea:	f021 0104 	bic.w	r1, r1, #4
 80035ee:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035f0:	6999      	ldr	r1, [r3, #24]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	619a      	str	r2, [r3, #24]
      break;
 80035f6:	e7d1      	b.n	800359c <HAL_TIM_PWM_ConfigChannel+0x54>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035f8:	4629      	mov	r1, r5
 80035fa:	6800      	ldr	r0, [r0, #0]
 80035fc:	f7ff fd8a 	bl	8003114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003600:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003602:	692a      	ldr	r2, [r5, #16]

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003604:	69d9      	ldr	r1, [r3, #28]
 8003606:	f041 0108 	orr.w	r1, r1, #8
 800360a:	61d9      	str	r1, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800360c:	69d9      	ldr	r1, [r3, #28]
 800360e:	f021 0104 	bic.w	r1, r1, #4
 8003612:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003614:	69d9      	ldr	r1, [r3, #28]
 8003616:	430a      	orrs	r2, r1
 8003618:	61da      	str	r2, [r3, #28]
      break;
 800361a:	e7bf      	b.n	800359c <HAL_TIM_PWM_ConfigChannel+0x54>

0800361c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d033      	beq.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x70>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003624:	6803      	ldr	r3, [r0, #0]

  /* Check input state */
  __HAL_LOCK(htim);

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003626:	2202      	movs	r2, #2
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003628:	b470      	push	{r4, r5, r6}

  /* Check input state */
  __HAL_LOCK(htim);

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800362e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003630:	680a      	ldr	r2, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003632:	4e17      	ldr	r6, [pc, #92]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0x74>)

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003636:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800363a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363c:	42b3      	cmp	r3, r6
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800363e:	f04f 0401 	mov.w	r4, #1
 8003642:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003646:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	d01a      	beq.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d017      	beq.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003650:	4a10      	ldr	r2, [pc, #64]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d014      	beq.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800365a:	4293      	cmp	r3, r2
 800365c:	d010      	beq.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800365e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003662:	4293      	cmp	r3, r2
 8003664:	d00c      	beq.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003666:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800366a:	4293      	cmp	r3, r2
 800366c:	d008      	beq.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800366e:	2300      	movs	r3, #0
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003670:	2201      	movs	r2, #1
 8003672:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003676:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800367a:	bc70      	pop	{r4, r5, r6}
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
 800367c:	4618      	mov	r0, r3
}
 800367e:	4770      	bx	lr
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003680:	684a      	ldr	r2, [r1, #4]
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003682:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003686:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003688:	609d      	str	r5, [r3, #8]
 800368a:	e7f0      	b.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x52>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368c:	2002      	movs	r0, #2
 800368e:	4770      	bx	lr
 8003690:	40010000 	.word	0x40010000
 8003694:	40000400 	.word	0x40000400

08003698 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003698:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d020      	beq.n	80036e2 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036a0:	b4f0      	push	{r4, r5, r6, r7}
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036a2:	e891 00e0 	ldmia.w	r1, {r5, r6, r7}
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036a6:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036a8:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036aa:	694a      	ldr	r2, [r1, #20]
 80036ac:	69c9      	ldr	r1, [r1, #28]
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b2:	433b      	orrs	r3, r7
 80036b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036b8:	4333      	orrs	r3, r6
 80036ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036be:	432b      	orrs	r3, r5
 80036c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036c4:	4323      	orrs	r3, r4
 80036c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036ca:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036cc:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80036d2:	2200      	movs	r2, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036d4:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036d6:	6463      	str	r3, [r4, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80036dc:	bcf0      	pop	{r4, r5, r6, r7}
 80036de:	4610      	mov	r0, r2
 80036e0:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e2:	2302      	movs	r3, #2
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	4770      	bx	lr

080036e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <SystemInit+0x18>)
 80036ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80036f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036fa:	6099      	str	r1, [r3, #8]
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003704:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003708:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800370c:	2200      	movs	r2, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800370e:	6081      	str	r1, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003710:	6002      	str	r2, [r0, #0]
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003712:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003714:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003716:	6103      	str	r3, [r0, #16]
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop

0800371c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	6103      	str	r3, [r0, #16]
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop

08003724 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003724:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003726:	6802      	ldr	r2, [r0, #0]
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003728:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800372a:	689c      	ldr	r4, [r3, #8]
 800372c:	608c      	str	r4, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800372e:	689c      	ldr	r4, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003730:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003732:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003734:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003736:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 8003738:	f85d 4b04 	ldr.w	r4, [sp], #4

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800373c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800373e:	6002      	str	r2, [r0, #0]
}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003744:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003746:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003748:	1c6b      	adds	r3, r5, #1
 800374a:	d011      	beq.n	8003770 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800374c:	f100 0208 	add.w	r2, r0, #8
 8003750:	e000      	b.n	8003754 <vListInsert+0x10>
 8003752:	461a      	mov	r2, r3
 8003754:	6853      	ldr	r3, [r2, #4]
 8003756:	681c      	ldr	r4, [r3, #0]
 8003758:	42a5      	cmp	r5, r4
 800375a:	d2fa      	bcs.n	8003752 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800375c:	6804      	ldr	r4, [r0, #0]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800375e:	604b      	str	r3, [r1, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003760:	3401      	adds	r4, #1
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003762:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003764:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003766:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003768:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800376a:	6004      	str	r4, [r0, #0]
}
 800376c:	bc30      	pop	{r4, r5}
 800376e:	4770      	bx	lr
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003770:	6902      	ldr	r2, [r0, #16]
 8003772:	6853      	ldr	r3, [r2, #4]
 8003774:	e7f2      	b.n	800375c <vListInsert+0x18>
 8003776:	bf00      	nop

08003778 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003778:	6842      	ldr	r2, [r0, #4]
 800377a:	6881      	ldr	r1, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800377c:	6903      	ldr	r3, [r0, #16]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800377e:	b410      	push	{r4}
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003780:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003782:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003784:	685c      	ldr	r4, [r3, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003786:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003788:	681a      	ldr	r2, [r3, #0]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800378a:	42a0      	cmp	r0, r4
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800378c:	bf08      	it	eq
 800378e:	6059      	streq	r1, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003790:	3a01      	subs	r2, #1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003792:	2100      	movs	r1, #0
 8003794:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003798:	6818      	ldr	r0, [r3, #0]
}
 800379a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037a6:	6b86      	ldr	r6, [r0, #56]	; 0x38

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037a8:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037aa:	b932      	cbnz	r2, 80037ba <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037ac:	6805      	ldr	r5, [r0, #0]
 80037ae:	bb3d      	cbnz	r5, 8003800 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80037b0:	6840      	ldr	r0, [r0, #4]
 80037b2:	f001 f841 	bl	8004838 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80037b6:	6065      	str	r5, [r4, #4]
 80037b8:	e029      	b.n	800380e <prvCopyDataToQueue+0x6e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037ba:	b96d      	cbnz	r5, 80037d8 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80037bc:	6880      	ldr	r0, [r0, #8]
 80037be:	f002 fe01 	bl	80063c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80037c2:	68a1      	ldr	r1, [r4, #8]
 80037c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037c6:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80037c8:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ca:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80037cc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ce:	d319      	bcc.n	8003804 <prvCopyDataToQueue+0x64>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80037d4:	4628      	mov	r0, r5
 80037d6:	e01a      	b.n	800380e <prvCopyDataToQueue+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d8:	68c0      	ldr	r0, [r0, #12]
 80037da:	f002 fdf3 	bl	80063c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80037de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037e0:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e2:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80037e4:	425b      	negs	r3, r3
 80037e6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e8:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80037ea:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ec:	d202      	bcs.n	80037f4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80037ee:	6862      	ldr	r2, [r4, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037f4:	2d02      	cmp	r5, #2
 80037f6:	d107      	bne.n	8003808 <prvCopyDataToQueue+0x68>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037f8:	b146      	cbz	r6, 800380c <prvCopyDataToQueue+0x6c>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037fa:	3e01      	subs	r6, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80037fc:	2000      	movs	r0, #0
 80037fe:	e006      	b.n	800380e <prvCopyDataToQueue+0x6e>
 8003800:	4610      	mov	r0, r2
 8003802:	e004      	b.n	800380e <prvCopyDataToQueue+0x6e>
 8003804:	4628      	mov	r0, r5
 8003806:	e002      	b.n	800380e <prvCopyDataToQueue+0x6e>
 8003808:	2000      	movs	r0, #0
 800380a:	e000      	b.n	800380e <prvCopyDataToQueue+0x6e>
 800380c:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800380e:	3601      	adds	r6, #1
 8003810:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8003812:	bd70      	pop	{r4, r5, r6, pc}

08003814 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003814:	6c02      	ldr	r2, [r0, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003816:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003818:	b172      	cbz	r2, 8003838 <prvCopyDataFromQueue+0x24>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800381a:	b410      	push	{r4}
 800381c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800381e:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003820:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003822:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003824:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003826:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003828:	bf24      	itt	cs
 800382a:	6819      	ldrcs	r1, [r3, #0]
 800382c:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800382e:	68d9      	ldr	r1, [r3, #12]
	}
}
 8003830:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003834:	f002 bdc6 	b.w	80063c4 <memcpy>
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop

0800383c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003840:	f001 fc70 	bl	8005124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003844:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003848:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800384a:	2c00      	cmp	r4, #0
 800384c:	dd16      	ble.n	800387c <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800384e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003850:	b1a3      	cbz	r3, 800387c <prvUnlockQueue+0x40>
 8003852:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8003856:	e005      	b.n	8003864 <prvUnlockQueue+0x28>
 8003858:	3c01      	subs	r4, #1
 800385a:	b2e3      	uxtb	r3, r4
 800385c:	b25c      	sxtb	r4, r3
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800385e:	b16b      	cbz	r3, 800387c <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003860:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003862:	b15b      	cbz	r3, 800387c <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003864:	4630      	mov	r0, r6
 8003866:	f000 ff35 	bl	80046d4 <xTaskRemoveFromEventList>
 800386a:	2800      	cmp	r0, #0
 800386c:	d0f4      	beq.n	8003858 <prvUnlockQueue+0x1c>
 800386e:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003870:	f000 ffcc 	bl	800480c <vTaskMissedYield>
 8003874:	b2e3      	uxtb	r3, r4
 8003876:	b25c      	sxtb	r4, r3
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f1      	bne.n	8003860 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800387c:	23ff      	movs	r3, #255	; 0xff
 800387e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003882:	f001 fc71 	bl	8005168 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003886:	f001 fc4d 	bl	8005124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800388a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800388e:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003890:	2c00      	cmp	r4, #0
 8003892:	dd16      	ble.n	80038c2 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003894:	692b      	ldr	r3, [r5, #16]
 8003896:	b1a3      	cbz	r3, 80038c2 <prvUnlockQueue+0x86>
 8003898:	f105 0610 	add.w	r6, r5, #16
 800389c:	e005      	b.n	80038aa <prvUnlockQueue+0x6e>
 800389e:	3c01      	subs	r4, #1
 80038a0:	b2e3      	uxtb	r3, r4
 80038a2:	b25c      	sxtb	r4, r3
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038a4:	b16b      	cbz	r3, 80038c2 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038a6:	692b      	ldr	r3, [r5, #16]
 80038a8:	b15b      	cbz	r3, 80038c2 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038aa:	4630      	mov	r0, r6
 80038ac:	f000 ff12 	bl	80046d4 <xTaskRemoveFromEventList>
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d0f4      	beq.n	800389e <prvUnlockQueue+0x62>
 80038b4:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 80038b6:	f000 ffa9 	bl	800480c <vTaskMissedYield>
 80038ba:	b2e3      	uxtb	r3, r4
 80038bc:	b25c      	sxtb	r4, r3
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f1      	bne.n	80038a6 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038c2:	23ff      	movs	r3, #255	; 0xff
 80038c4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80038c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80038cc:	f001 bc4c 	b.w	8005168 <vPortExitCritical>

080038d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038d0:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80038d2:	b1e0      	cbz	r0, 800390e <xQueueGenericReset+0x3e>
 80038d4:	4604      	mov	r4, r0
 80038d6:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 80038d8:	f001 fc24 	bl	8005124 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038e0:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038e2:	60a1      	str	r1, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038e4:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80038e8:	1a9a      	subs	r2, r3, r2
 80038ea:	440a      	add	r2, r1

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038ec:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038ee:	2000      	movs	r0, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80038f0:	21ff      	movs	r1, #255	; 0xff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038f2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80038f4:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038f6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038fa:	6063      	str	r3, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
		pxQueue->cTxLock = queueUNLOCKED;
 80038fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003900:	bb05      	cbnz	r5, 8003944 <xQueueGenericReset+0x74>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	b963      	cbnz	r3, 8003920 <xQueueGenericReset+0x50>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8003906:	f001 fc2f 	bl	8005168 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800390a:	2001      	movs	r0, #1
 800390c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	e7fe      	b.n	800391e <xQueueGenericReset+0x4e>
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003920:	f104 0010 	add.w	r0, r4, #16
 8003924:	f000 fed6 	bl	80046d4 <xTaskRemoveFromEventList>
 8003928:	2800      	cmp	r0, #0
 800392a:	d0ec      	beq.n	8003906 <xQueueGenericReset+0x36>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <xQueueGenericReset+0x8c>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 800393c:	f001 fc14 	bl	8005168 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8003940:	2001      	movs	r0, #1
 8003942:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003944:	f104 0010 	add.w	r0, r4, #16
 8003948:	f7ff fedc 	bl	8003704 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800394c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003950:	f7ff fed8 	bl	8003704 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003954:	f001 fc08 	bl	8005168 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8003958:	2001      	movs	r0, #1
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	e000ed04 	.word	0xe000ed04

08003960 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003960:	b530      	push	{r4, r5, lr}
 8003962:	b083      	sub	sp, #12
 8003964:	f89d 5018 	ldrb.w	r5, [sp, #24]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003968:	b940      	cbnz	r0, 800397c <xQueueGenericCreateStatic+0x1c>
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	e7fe      	b.n	800397a <xQueueGenericCreateStatic+0x1a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800397c:	b17b      	cbz	r3, 800399e <xQueueGenericCreateStatic+0x3e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800397e:	b382      	cbz	r2, 80039e2 <xQueueGenericCreateStatic+0x82>
 8003980:	b1b1      	cbz	r1, 80039b0 <xQueueGenericCreateStatic+0x50>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003982:	2450      	movs	r4, #80	; 0x50
 8003984:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003986:	9c01      	ldr	r4, [sp, #4]
 8003988:	2c50      	cmp	r4, #80	; 0x50
 800398a:	d01a      	beq.n	80039c2 <xQueueGenericCreateStatic+0x62>
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	e7fe      	b.n	800399c <xQueueGenericCreateStatic+0x3c>
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	e7fe      	b.n	80039ae <xQueueGenericCreateStatic+0x4e>
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericCreateStatic+0x60>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039c2:	2401      	movs	r4, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039c4:	601a      	str	r2, [r3, #0]
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039c6:	f883 4046 	strb.w	r4, [r3, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039ca:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039cc:	6419      	str	r1, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039ce:	4618      	mov	r0, r3
 80039d0:	2101      	movs	r1, #1
 80039d2:	461c      	mov	r4, r3
 80039d4:	f7ff ff7c 	bl	80038d0 <xQueueGenericReset>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
 80039d8:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039da:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
 80039de:	b003      	add	sp, #12
 80039e0:	bd30      	pop	{r4, r5, pc}
		configASSERT( pxStaticQueue != NULL );

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039e2:	b949      	cbnz	r1, 80039f8 <xQueueGenericCreateStatic+0x98>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039e4:	2250      	movs	r2, #80	; 0x50
 80039e6:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039e8:	9a01      	ldr	r2, [sp, #4]
 80039ea:	2a50      	cmp	r2, #80	; 0x50
 80039ec:	d1ce      	bne.n	800398c <xQueueGenericCreateStatic+0x2c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039ee:	2201      	movs	r2, #1
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039f0:	601b      	str	r3, [r3, #0]
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039f6:	e7e8      	b.n	80039ca <xQueueGenericCreateStatic+0x6a>
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericCreateStatic+0xa8>
 8003a0a:	bf00      	nop

08003a0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003a14:	2800      	cmp	r0, #0
 8003a16:	f000 80a7 	beq.w	8003b68 <xQueueGenericSend+0x15c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a1a:	2900      	cmp	r1, #0
 8003a1c:	f000 8097 	beq.w	8003b4e <xQueueGenericSend+0x142>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	f000 8087 	beq.w	8003b34 <xQueueGenericSend+0x128>
 8003a26:	4604      	mov	r4, r0
 8003a28:	461f      	mov	r7, r3
 8003a2a:	4689      	mov	r9, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a2c:	f000 fef4 	bl	8004818 <xTaskGetSchedulerState>
 8003a30:	b950      	cbnz	r0, 8003a48 <xQueueGenericSend+0x3c>
 8003a32:	9e01      	ldr	r6, [sp, #4]
 8003a34:	b14e      	cbz	r6, 8003a4a <xQueueGenericSend+0x3e>
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	e7fe      	b.n	8003a46 <xQueueGenericSend+0x3a>
 8003a48:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8003a4a:	f04f 0800 	mov.w	r8, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8003a4e:	f8df a138 	ldr.w	sl, [pc, #312]	; 8003b88 <xQueueGenericSend+0x17c>
 8003a52:	e027      	b.n	8003aa4 <xQueueGenericSend+0x98>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a54:	f001 fb88 	bl	8005168 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a58:	f000 fc66 	bl	8004328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a5c:	f001 fb62 	bl	8005124 <vPortEnterCritical>
 8003a60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003a64:	2bff      	cmp	r3, #255	; 0xff
 8003a66:	bf08      	it	eq
 8003a68:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003a6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003a70:	2bff      	cmp	r3, #255	; 0xff
 8003a72:	bf08      	it	eq
 8003a74:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8003a78:	f001 fb76 	bl	8005168 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a7c:	a901      	add	r1, sp, #4
 8003a7e:	a802      	add	r0, sp, #8
 8003a80:	f000 fe78 	bl	8004774 <xTaskCheckForTimeOut>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d178      	bne.n	8003b7a <xQueueGenericSend+0x16e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a88:	f001 fb4c 	bl	8005124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d017      	beq.n	8003ac4 <xQueueGenericSend+0xb8>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003a94:	f001 fb68 	bl	8005168 <vPortExitCritical>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f7ff fecf 	bl	800383c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a9e:	f000 fcf3 	bl	8004488 <xTaskResumeAll>
 8003aa2:	2601      	movs	r6, #1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003aa4:	f001 fb3e 	bl	8005124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aa8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003aaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d326      	bcc.n	8003afe <xQueueGenericSend+0xf2>
 8003ab0:	2f02      	cmp	r7, #2
 8003ab2:	d024      	beq.n	8003afe <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ab4:	9d01      	ldr	r5, [sp, #4]
 8003ab6:	b1e5      	cbz	r5, 8003af2 <xQueueGenericSend+0xe6>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ab8:	2e00      	cmp	r6, #0
 8003aba:	d1cb      	bne.n	8003a54 <xQueueGenericSend+0x48>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003abc:	a802      	add	r0, sp, #8
 8003abe:	f000 fe4d 	bl	800475c <vTaskInternalSetTimeOutState>
 8003ac2:	e7c7      	b.n	8003a54 <xQueueGenericSend+0x48>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003ac4:	f001 fb50 	bl	8005168 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ac8:	9901      	ldr	r1, [sp, #4]
 8003aca:	f104 0010 	add.w	r0, r4, #16
 8003ace:	f000 fdc7 	bl	8004660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f7ff feb2 	bl	800383c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ad8:	f000 fcd6 	bl	8004488 <xTaskResumeAll>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d1e0      	bne.n	8003aa2 <xQueueGenericSend+0x96>
				{
					portYIELD_WITHIN_API();
 8003ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ae4:	f8ca 3000 	str.w	r3, [sl]
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	e7d7      	b.n	8003aa2 <xQueueGenericSend+0x96>
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003af2:	f001 fb39 	bl	8005168 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003af6:	4628      	mov	r0, r5

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 8003af8:	b004      	add	sp, #16
 8003afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003afe:	463a      	mov	r2, r7
 8003b00:	4649      	mov	r1, r9
 8003b02:	4620      	mov	r0, r4
 8003b04:	f7ff fe4c 	bl	80037a0 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b0a:	b963      	cbnz	r3, 8003b26 <xQueueGenericSend+0x11a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b0c:	b138      	cbz	r0, 8003b1e <xQueueGenericSend+0x112>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <xQueueGenericSend+0x17c>)
 8003b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b1e:	f001 fb23 	bl	8005168 <vPortExitCritical>
				return pdPASS;
 8003b22:	2001      	movs	r0, #1
 8003b24:	e7e8      	b.n	8003af8 <xQueueGenericSend+0xec>
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b2a:	f000 fdd3 	bl	80046d4 <xTaskRemoveFromEventList>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d1ed      	bne.n	8003b0e <xQueueGenericSend+0x102>
 8003b32:	e7f4      	b.n	8003b1e <xQueueGenericSend+0x112>
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b34:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003b36:	2a01      	cmp	r2, #1
 8003b38:	f43f af75 	beq.w	8003a26 <xQueueGenericSend+0x1a>
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	e7fe      	b.n	8003b4c <xQueueGenericSend+0x140>
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	f43f af65 	beq.w	8003a20 <xQueueGenericSend+0x14>
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	e7fe      	b.n	8003b66 <xQueueGenericSend+0x15a>
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	e7fe      	b.n	8003b78 <xQueueGenericSend+0x16c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7ff fe5e 	bl	800383c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b80:	f000 fc82 	bl	8004488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b84:	2000      	movs	r0, #0
 8003b86:	e7b7      	b.n	8003af8 <xQueueGenericSend+0xec>
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003b90:	b1f0      	cbz	r0, 8003bd0 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b92:	2900      	cmp	r1, #0
 8003b94:	d041      	beq.n	8003c1a <xQueueGenericSendFromISR+0x8e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d033      	beq.n	8003c02 <xQueueGenericSendFromISR+0x76>
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	461f      	mov	r7, r3
 8003b9e:	4690      	mov	r8, r2
 8003ba0:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ba2:	f001 fbe5 	bl	8005370 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ba6:	f3ef 8611 	mrs	r6, BASEPRI
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d30f      	bcc.n	8003be2 <xQueueGenericSendFromISR+0x56>
 8003bc2:	2f02      	cmp	r7, #2
 8003bc4:	d00d      	beq.n	8003be2 <xQueueGenericSendFromISR+0x56>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bc6:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bc8:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8003bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	e7fe      	b.n	8003be0 <xQueueGenericSendFromISR+0x54>
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003be2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003be6:	463a      	mov	r2, r7
 8003be8:	4649      	mov	r1, r9
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bea:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7ff fdd7 	bl	80037a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bf2:	1c6b      	adds	r3, r5, #1
 8003bf4:	d01d      	beq.n	8003c32 <xQueueGenericSendFromISR+0xa6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bf6:	1c6b      	adds	r3, r5, #1
 8003bf8:	b25b      	sxtb	r3, r3
 8003bfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bfe:	2001      	movs	r0, #1
 8003c00:	e7e2      	b.n	8003bc8 <xQueueGenericSendFromISR+0x3c>
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c02:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003c04:	2c01      	cmp	r4, #1
 8003c06:	d0c8      	beq.n	8003b9a <xQueueGenericSendFromISR+0xe>
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	e7fe      	b.n	8003c18 <xQueueGenericSendFromISR+0x8c>
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c1a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003c1c:	2c00      	cmp	r4, #0
 8003c1e:	d0ba      	beq.n	8003b96 <xQueueGenericSendFromISR+0xa>
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	e7fe      	b.n	8003c30 <xQueueGenericSendFromISR+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0e2      	beq.n	8003bfe <xQueueGenericSendFromISR+0x72>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c3c:	f000 fd4a 	bl	80046d4 <xTaskRemoveFromEventList>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d0dc      	beq.n	8003bfe <xQueueGenericSendFromISR+0x72>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c44:	f1b8 0f00 	cmp.w	r8, #0
 8003c48:	d0d9      	beq.n	8003bfe <xQueueGenericSendFromISR+0x72>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f8c8 0000 	str.w	r0, [r8]
 8003c50:	e7ba      	b.n	8003bc8 <xQueueGenericSendFromISR+0x3c>
 8003c52:	bf00      	nop

08003c54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d07c      	beq.n	8003d5a <xQueueReceive+0x106>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c60:	2900      	cmp	r1, #0
 8003c62:	f000 8089 	beq.w	8003d78 <xQueueReceive+0x124>
 8003c66:	4604      	mov	r4, r0
 8003c68:	4688      	mov	r8, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c6a:	f000 fdd5 	bl	8004818 <xTaskGetSchedulerState>
 8003c6e:	b950      	cbnz	r0, 8003c86 <xQueueReceive+0x32>
 8003c70:	9d01      	ldr	r5, [sp, #4]
 8003c72:	b14d      	cbz	r5, 8003c88 <xQueueReceive+0x34>
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	e7fe      	b.n	8003c84 <xQueueReceive+0x30>
 8003c86:	2500      	movs	r5, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c88:	f001 fa4c 	bl	8005124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8003c8e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8003db0 <xQueueReceive+0x15c>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8003c92:	2700      	movs	r7, #0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c94:	2e00      	cmp	r6, #0
 8003c96:	d13e      	bne.n	8003d16 <xQueueReceive+0xc2>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c98:	9b01      	ldr	r3, [sp, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d066      	beq.n	8003d6c <xQueueReceive+0x118>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c9e:	b915      	cbnz	r5, 8003ca6 <xQueueReceive+0x52>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ca0:	a802      	add	r0, sp, #8
 8003ca2:	f000 fd5b 	bl	800475c <vTaskInternalSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ca6:	f001 fa5f 	bl	8005168 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003caa:	f000 fb3d 	bl	8004328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cae:	f001 fa39 	bl	8005124 <vPortEnterCritical>
 8003cb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003cb6:	2bff      	cmp	r3, #255	; 0xff
 8003cb8:	bf08      	it	eq
 8003cba:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8003cbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003cc2:	2bff      	cmp	r3, #255	; 0xff
 8003cc4:	bf08      	it	eq
 8003cc6:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8003cca:	f001 fa4d 	bl	8005168 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cce:	a901      	add	r1, sp, #4
 8003cd0:	a802      	add	r0, sp, #8
 8003cd2:	f000 fd4f 	bl	8004774 <xTaskCheckForTimeOut>
 8003cd6:	bb98      	cbnz	r0, 8003d40 <xQueueReceive+0xec>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cd8:	f001 fa24 	bl	8005124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cde:	bb33      	cbnz	r3, 8003d2e <xQueueReceive+0xda>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003ce0:	f001 fa42 	bl	8005168 <vPortExitCritical>
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ce4:	9901      	ldr	r1, [sp, #4]
 8003ce6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003cea:	f000 fcb9 	bl	8004660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7ff fda4 	bl	800383c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cf4:	f000 fbc8 	bl	8004488 <xTaskResumeAll>
 8003cf8:	b938      	cbnz	r0, 8003d0a <xQueueReceive+0xb6>
				{
					portYIELD_WITHIN_API();
 8003cfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003cfe:	f8c9 3000 	str.w	r3, [r9]
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	2501      	movs	r5, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d0c:	f001 fa0a 	bl	8005124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d10:	6ba6      	ldr	r6, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d12:	2e00      	cmp	r6, #0
 8003d14:	d0c0      	beq.n	8003c98 <xQueueReceive+0x44>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d16:	4641      	mov	r1, r8
 8003d18:	4620      	mov	r0, r4
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d1a:	3e01      	subs	r6, #1
			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d1c:	f7ff fd7a 	bl	8003814 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d20:	63a6      	str	r6, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	bbab      	cbnz	r3, 8003d92 <xQueueReceive+0x13e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d26:	f001 fa1f 	bl	8005168 <vPortExitCritical>
				return pdPASS;
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	e021      	b.n	8003d72 <xQueueReceive+0x11e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003d2e:	f001 fa1b 	bl	8005168 <vPortExitCritical>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff fd82 	bl	800383c <prvUnlockQueue>
 8003d38:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 8003d3a:	f000 fba5 	bl	8004488 <xTaskResumeAll>
 8003d3e:	e7e5      	b.n	8003d0c <xQueueReceive+0xb8>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7ff fd7b 	bl	800383c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d46:	f000 fb9f 	bl	8004488 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d4a:	f001 f9eb 	bl	8005124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d50:	b163      	cbz	r3, 8003d6c <xQueueReceive+0x118>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003d52:	f001 fa09 	bl	8005168 <vPortExitCritical>
 8003d56:	2501      	movs	r5, #1
 8003d58:	e7d8      	b.n	8003d0c <xQueueReceive+0xb8>
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	e7fe      	b.n	8003d6a <xQueueReceive+0x116>
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d6c:	f001 f9fc 	bl	8005168 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d70:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d72:	b005      	add	sp, #20
 8003d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f43f af73 	beq.w	8003c66 <xQueueReceive+0x12>
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	e7fe      	b.n	8003d90 <xQueueReceive+0x13c>
				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d92:	f104 0010 	add.w	r0, r4, #16
 8003d96:	f000 fc9d 	bl	80046d4 <xTaskRemoveFromEventList>
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d0c3      	beq.n	8003d26 <xQueueReceive+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d9e:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <xQueueReceive+0x15c>)
 8003da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	e7ba      	b.n	8003d26 <xQueueReceive+0xd2>
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003db4:	b470      	push	{r4, r5, r6}
 8003db6:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <vQueueAddToRegistry+0x28>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003db8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003dba:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8003dbe:	4e07      	ldr	r6, [pc, #28]	; (8003ddc <vQueueAddToRegistry+0x28>)
 8003dc0:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003dc4:	b124      	cbz	r4, 8003dd0 <vQueueAddToRegistry+0x1c>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d1f6      	bne.n	8003dba <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dcc:	bc70      	pop	{r4, r5, r6}
 8003dce:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003dd0:	f846 1033 	str.w	r1, [r6, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003dd4:	6068      	str	r0, [r5, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dd6:	bc70      	pop	{r4, r5, r6}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20009f0c 	.word	0x20009f0c

08003de0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4604      	mov	r4, r0
 8003de4:	460d      	mov	r5, r1
 8003de6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003de8:	f001 f99c 	bl	8005124 <vPortEnterCritical>
 8003dec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003df0:	2bff      	cmp	r3, #255	; 0xff
 8003df2:	bf04      	itt	eq
 8003df4:	2300      	moveq	r3, #0
 8003df6:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8003dfa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003dfe:	2bff      	cmp	r3, #255	; 0xff
 8003e00:	bf04      	itt	eq
 8003e02:	2300      	moveq	r3, #0
 8003e04:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8003e08:	f001 f9ae 	bl	8005168 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e0e:	b92b      	cbnz	r3, 8003e1c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e10:	4632      	mov	r2, r6
 8003e12:	4629      	mov	r1, r5
 8003e14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e18:	f000 fc3c 	bl	8004694 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e1c:	4620      	mov	r0, r4
	}
 8003e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e22:	f7ff bd0b 	b.w	800383c <prvUnlockQueue>
 8003e26:	bf00      	nop

08003e28 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e2c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e2e:	f001 f979 	bl	8005124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e32:	4a34      	ldr	r2, [pc, #208]	; (8003f04 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8003e34:	4e34      	ldr	r6, [pc, #208]	; (8003f08 <prvAddNewTaskToReadyList+0xe0>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e3c:	6833      	ldr	r3, [r6, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d032      	beq.n	8003ea8 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e42:	4d32      	ldr	r5, [pc, #200]	; (8003f0c <prvAddNewTaskToReadyList+0xe4>)
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	b33b      	cbz	r3, 8003e98 <prvAddNewTaskToReadyList+0x70>
 8003e48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003e4a:	4f31      	ldr	r7, [pc, #196]	; (8003f10 <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e4c:	4931      	ldr	r1, [pc, #196]	; (8003f14 <prvAddNewTaskToReadyList+0xec>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e4e:	4a32      	ldr	r2, [pc, #200]	; (8003f18 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e50:	f8d1 e000 	ldr.w	lr, [r1]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e54:	6813      	ldr	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e56:	4586      	cmp	lr, r0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e58:	f103 0301 	add.w	r3, r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e5c:	bf38      	it	cc
 8003e5e:	6008      	strcc	r0, [r1, #0]
 8003e60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e64:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e66:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003e6a:	1d21      	adds	r1, r4, #4
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e6c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e6e:	f7ff fc59 	bl	8003724 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e72:	f001 f979 	bl	8005168 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	b163      	cbz	r3, 8003e94 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e7a:	6832      	ldr	r2, [r6, #0]
 8003e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d207      	bcs.n	8003e94 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <prvAddNewTaskToReadyList+0xf4>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e98:	6833      	ldr	r3, [r6, #0]
 8003e9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	4f1c      	ldr	r7, [pc, #112]	; (8003f10 <prvAddNewTaskToReadyList+0xe8>)
 8003ea0:	4283      	cmp	r3, r0
				{
					pxCurrentTCB = pxNewTCB;
 8003ea2:	bf98      	it	ls
 8003ea4:	6034      	strls	r4, [r6, #0]
 8003ea6:	e7d1      	b.n	8003e4c <prvAddNewTaskToReadyList+0x24>
		uxCurrentNumberOfTasks++;
		if( pxCurrentTCB == NULL )
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ea8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003eaa:	6813      	ldr	r3, [r2, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d003      	beq.n	8003eb8 <prvAddNewTaskToReadyList+0x90>
 8003eb0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003eb2:	4f17      	ldr	r7, [pc, #92]	; (8003f10 <prvAddNewTaskToReadyList+0xe8>)
 8003eb4:	4d15      	ldr	r5, [pc, #84]	; (8003f0c <prvAddNewTaskToReadyList+0xe4>)
 8003eb6:	e7c9      	b.n	8003e4c <prvAddNewTaskToReadyList+0x24>
 8003eb8:	4f15      	ldr	r7, [pc, #84]	; (8003f10 <prvAddNewTaskToReadyList+0xe8>)
 8003eba:	463d      	mov	r5, r7
 8003ebc:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	3514      	adds	r5, #20
 8003ec4:	f7ff fc1e 	bl	8003704 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec8:	4545      	cmp	r5, r8
 8003eca:	d1f9      	bne.n	8003ec0 <prvAddNewTaskToReadyList+0x98>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ecc:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8003f34 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 8003ed0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003f38 <prvAddNewTaskToReadyList+0x110>
 8003ed4:	4d0d      	ldr	r5, [pc, #52]	; (8003f0c <prvAddNewTaskToReadyList+0xe4>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ed6:	4648      	mov	r0, r9
 8003ed8:	f7ff fc14 	bl	8003704 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003edc:	4640      	mov	r0, r8
 8003ede:	f7ff fc11 	bl	8003704 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ee2:	480f      	ldr	r0, [pc, #60]	; (8003f20 <prvAddNewTaskToReadyList+0xf8>)
 8003ee4:	f7ff fc0e 	bl	8003704 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ee8:	480e      	ldr	r0, [pc, #56]	; (8003f24 <prvAddNewTaskToReadyList+0xfc>)
 8003eea:	f7ff fc0b 	bl	8003704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003eee:	480e      	ldr	r0, [pc, #56]	; (8003f28 <prvAddNewTaskToReadyList+0x100>)
 8003ef0:	f7ff fc08 	bl	8003704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ef4:	4a0d      	ldr	r2, [pc, #52]	; (8003f2c <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <prvAddNewTaskToReadyList+0x108>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ef8:	f8c2 9000 	str.w	r9, [r2]
 8003efc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003efe:	f8c3 8000 	str.w	r8, [r3]
 8003f02:	e7a3      	b.n	8003e4c <prvAddNewTaskToReadyList+0x24>
 8003f04:	200006f0 	.word	0x200006f0
 8003f08:	200006a0 	.word	0x200006a0
 8003f0c:	20000208 	.word	0x20000208
 8003f10:	20000238 	.word	0x20000238
 8003f14:	200006f4 	.word	0x200006f4
 8003f18:	200006c4 	.word	0x200006c4
 8003f1c:	e000ed04 	.word	0xe000ed04
 8003f20:	200006a4 	.word	0x200006a4
 8003f24:	2000020c 	.word	0x2000020c
 8003f28:	20000220 	.word	0x20000220
 8003f2c:	20000204 	.word	0x20000204
 8003f30:	200006c0 	.word	0x200006c0
 8003f34:	200006c8 	.word	0x200006c8
 8003f38:	200006dc 	.word	0x200006dc

08003f3c <prvResetNextTaskUnblockTime.part.1>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f3c:	4a03      	ldr	r2, [pc, #12]	; (8003f4c <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <prvResetNextTaskUnblockTime.part.1+0x14>)
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f44:	68d2      	ldr	r2, [r2, #12]
 8003f46:	6852      	ldr	r2, [r2, #4]
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	4770      	bx	lr
 8003f4c:	20000204 	.word	0x20000204
 8003f50:	20000200 	.word	0x20000200

08003f54 <prvInitialiseNewTask.isra.2>:
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003f5a:	9d08      	ldr	r5, [sp, #32]
 8003f5c:	9e09      	ldr	r6, [sp, #36]	; 0x24

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f5e:	ea4f 0982 	mov.w	r9, r2, lsl #2
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003f62:	468a      	mov	sl, r1

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f64:	464a      	mov	r2, r9
 8003f66:	21a5      	movs	r1, #165	; 0xa5
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003f68:	4607      	mov	r7, r0

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003f6c:	4698      	mov	r8, r3

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f6e:	f002 fa34 	bl	80063da <memset>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f74:	f1a9 0904 	sub.w	r9, r9, #4
 8003f78:	4499      	add	r9, r3
 8003f7a:	f029 0907 	bic.w	r9, r9, #7
 8003f7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003f82:	f10a 010f 	add.w	r1, sl, #15
 8003f86:	f104 0233 	add.w	r2, r4, #51	; 0x33
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f8a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003f8e:	f802 0f01 	strb.w	r0, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f92:	7818      	ldrb	r0, [r3, #0]
 8003f94:	b108      	cbz	r0, 8003f9a <prvInitialiseNewTask.isra.2+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f96:	428b      	cmp	r3, r1
 8003f98:	d1f7      	bne.n	8003f8a <prvInitialiseNewTask.isra.2+0x36>
 8003f9a:	2d37      	cmp	r5, #55	; 0x37
 8003f9c:	bf28      	it	cs
 8003f9e:	2537      	movcs	r5, #55	; 0x37
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fa0:	f04f 0a00 	mov.w	sl, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fa4:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fa6:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fa8:	1d20      	adds	r0, r4, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003faa:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8003fae:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fb2:	f7ff fbb3 	bl	800371c <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb6:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fba:	f104 0018 	add.w	r0, r4, #24
 8003fbe:	f7ff fbad 	bl	800371c <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fc2:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	61a5      	str	r5, [r4, #24]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fc8:	6124      	str	r4, [r4, #16]
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fca:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fce:	6264      	str	r4, [r4, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	4648      	mov	r0, r9
 8003fd6:	f001 f879 	bl	80050cc <pxPortInitialiseStack>
 8003fda:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003fdc:	b106      	cbz	r6, 8003fe0 <prvInitialiseNewTask.isra.2+0x8c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fde:	6034      	str	r4, [r6, #0]
 8003fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003fe4 <prvDeleteTCB>:
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fe4:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8003fe8:	b16b      	cbz	r3, 8004006 <prvDeleteTCB+0x22>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d015      	beq.n	800401a <prvDeleteTCB+0x36>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d008      	beq.n	8004004 <prvDeleteTCB+0x20>
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	e7fe      	b.n	8004002 <prvDeleteTCB+0x1e>
 8004004:	4770      	bx	lr
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004006:	b510      	push	{r4, lr}
 8004008:	4604      	mov	r4, r0
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800400a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800400c:	f000 ffe8 	bl	8004fe0 <vPortFree>
				vPortFree( pxTCB );
 8004010:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
 8004016:	f000 bfe3 	b.w	8004fe0 <vPortFree>
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 800401a:	f000 bfe1 	b.w	8004fe0 <vPortFree>
 800401e:	bf00      	nop

08004020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	4c15      	ldr	r4, [pc, #84]	; (8004078 <prvIdleTask+0x58>)
 8004024:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8004084 <prvIdleTask+0x64>
 8004028:	4e14      	ldr	r6, [pc, #80]	; (800407c <prvIdleTask+0x5c>)
 800402a:	4d15      	ldr	r5, [pc, #84]	; (8004080 <prvIdleTask+0x60>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 800402c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004088 <prvIdleTask+0x68>
 8004030:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8004034:	e011      	b.n	800405a <prvIdleTask+0x3a>

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 8004036:	f001 f875 	bl	8005124 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800403a:	68f3      	ldr	r3, [r6, #12]
 800403c:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800403e:	1d38      	adds	r0, r7, #4
 8004040:	f7ff fb9a 	bl	8003778 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	3b01      	subs	r3, #1
 8004048:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	3b01      	subs	r3, #1
 800404e:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8004050:	f001 f88a 	bl	8005168 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004054:	4638      	mov	r0, r7
 8004056:	f7ff ffc5 	bl	8003fe4 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ea      	bne.n	8004036 <prvIdleTask+0x16>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004060:	f8da 3000 	ldr.w	r3, [sl]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d9f8      	bls.n	800405a <prvIdleTask+0x3a>
			{
				taskYIELD();
 8004068:	f8c9 8000 	str.w	r8, [r9]
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	e7f1      	b.n	800405a <prvIdleTask+0x3a>
 8004076:	bf00      	nop
 8004078:	2000069c 	.word	0x2000069c
 800407c:	2000020c 	.word	0x2000020c
 8004080:	200006f0 	.word	0x200006f0
 8004084:	20000238 	.word	0x20000238
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800408e:	4b17      	ldr	r3, [pc, #92]	; (80040ec <prvAddCurrentTaskToDelayedList+0x60>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004090:	4d17      	ldr	r5, [pc, #92]	; (80040f0 <prvAddCurrentTaskToDelayedList+0x64>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004092:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004094:	682b      	ldr	r3, [r5, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004096:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004098:	1d18      	adds	r0, r3, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800409a:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800409c:	f7ff fb6c 	bl	8003778 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040a0:	1c63      	adds	r3, r4, #1
 80040a2:	d019      	beq.n	80040d8 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040a4:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040a6:	682b      	ldr	r3, [r5, #0]
 80040a8:	4a11      	ldr	r2, [pc, #68]	; (80040f0 <prvAddCurrentTaskToDelayedList+0x64>)
 80040aa:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d80b      	bhi.n	80040c8 <prvAddCurrentTaskToDelayedList+0x3c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <prvAddCurrentTaskToDelayedList+0x68>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	6811      	ldr	r1, [r2, #0]
 80040b6:	3104      	adds	r1, #4
 80040b8:	f7ff fb44 	bl	8003744 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <prvAddCurrentTaskToDelayedList+0x6c>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80040c2:	bf38      	it	cc
 80040c4:	601c      	strcc	r4, [r3, #0]
 80040c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <prvAddCurrentTaskToDelayedList+0x70>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040d2:	3104      	adds	r1, #4
 80040d4:	f7ff bb36 	b.w	8003744 <vListInsert>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040d8:	2f00      	cmp	r7, #0
 80040da:	d0e3      	beq.n	80040a4 <prvAddCurrentTaskToDelayedList+0x18>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040dc:	6829      	ldr	r1, [r5, #0]
 80040de:	4808      	ldr	r0, [pc, #32]	; (8004100 <prvAddCurrentTaskToDelayedList+0x74>)
 80040e0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040e6:	f7ff bb1d 	b.w	8003724 <vListInsertEnd>
 80040ea:	bf00      	nop
 80040ec:	200006bc 	.word	0x200006bc
 80040f0:	200006a0 	.word	0x200006a0
 80040f4:	20000204 	.word	0x20000204
 80040f8:	20000200 	.word	0x20000200
 80040fc:	200006c0 	.word	0x200006c0
 8004100:	20000220 	.word	0x20000220

08004104 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004106:	b087      	sub	sp, #28
 8004108:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800410a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800410c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800410e:	b175      	cbz	r5, 800412e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004110:	b334      	cbz	r4, 8004160 <xTaskCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004112:	275c      	movs	r7, #92	; 0x5c
 8004114:	9704      	str	r7, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004116:	9f04      	ldr	r7, [sp, #16]
 8004118:	2f5c      	cmp	r7, #92	; 0x5c
 800411a:	d011      	beq.n	8004140 <xTaskCreateStatic+0x3c>
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	e7fe      	b.n	800412c <xTaskCreateStatic+0x28>
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	e7fe      	b.n	800413e <xTaskCreateStatic+0x3a>
		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004140:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004142:	2702      	movs	r7, #2
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004144:	ad05      	add	r5, sp, #20
 8004146:	9402      	str	r4, [sp, #8]
 8004148:	9600      	str	r6, [sp, #0]

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800414a:	f884 7059 	strb.w	r7, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800414e:	9501      	str	r5, [sp, #4]
 8004150:	f7ff ff00 	bl	8003f54 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004154:	4620      	mov	r0, r4
 8004156:	f7ff fe67 	bl	8003e28 <prvAddNewTaskToReadyList>
		{
			xReturn = NULL;
		}

		return xReturn;
	}
 800415a:	9805      	ldr	r0, [sp, #20]
 800415c:	b007      	add	sp, #28
 800415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	e7fe      	b.n	8004170 <xTaskCreateStatic+0x6c>
 8004172:	bf00      	nop

08004174 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004178:	4607      	mov	r7, r0
 800417a:	b085      	sub	sp, #20
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417c:	0090      	lsls	r0, r2, #2
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800417e:	4616      	mov	r6, r2
 8004180:	4688      	mov	r8, r1
 8004182:	4699      	mov	r9, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004184:	f000 fe96 	bl	8004eb4 <pvPortMalloc>

			if( pxStack != NULL )
 8004188:	b1f8      	cbz	r0, 80041ca <xTaskCreate+0x56>
 800418a:	4605      	mov	r5, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800418c:	205c      	movs	r0, #92	; 0x5c
 800418e:	f000 fe91 	bl	8004eb4 <pvPortMalloc>

				if( pxNewTCB != NULL )
 8004192:	4604      	mov	r4, r0
 8004194:	b1b0      	cbz	r0, 80041c4 <xTaskCreate+0x50>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004196:	6305      	str	r5, [r0, #48]	; 0x30
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004198:	f04f 0e00 	mov.w	lr, #0
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800419c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800419e:	f884 e059 	strb.w	lr, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041a2:	9501      	str	r5, [sp, #4]
 80041a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041a6:	9402      	str	r4, [sp, #8]
 80041a8:	464b      	mov	r3, r9
 80041aa:	4632      	mov	r2, r6
 80041ac:	4641      	mov	r1, r8
 80041ae:	4638      	mov	r0, r7
 80041b0:	9500      	str	r5, [sp, #0]
 80041b2:	f7ff fecf 	bl	8003f54 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041b6:	4620      	mov	r0, r4
 80041b8:	f7ff fe36 	bl	8003e28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041bc:	2001      	movs	r0, #1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
 80041be:	b005      	add	sp, #20
 80041c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 ff0b 	bl	8004fe0 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041ca:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 80041ce:	b005      	add	sp, #20
 80041d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080041d4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4604      	mov	r4, r0

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80041d8:	4d28      	ldr	r5, [pc, #160]	; (800427c <vTaskDelete+0xa8>)

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80041da:	f000 ffa3 	bl	8005124 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80041de:	b364      	cbz	r4, 800423a <vTaskDelete+0x66>

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041e0:	1d26      	adds	r6, r4, #4
 80041e2:	4630      	mov	r0, r6
 80041e4:	f7ff fac8 	bl	8003778 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041ea:	b11b      	cbz	r3, 80041f4 <vTaskDelete+0x20>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ec:	f104 0018 	add.w	r0, r4, #24
 80041f0:	f7ff fac2 	bl	8003778 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80041f4:	4a22      	ldr	r2, [pc, #136]	; (8004280 <vTaskDelete+0xac>)

			if( pxTCB == pxCurrentTCB )
 80041f6:	6829      	ldr	r1, [r5, #0]

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80041f8:	6813      	ldr	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80041fa:	428c      	cmp	r4, r1

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80041fc:	f103 0301 	add.w	r3, r3, #1
 8004200:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004202:	d01c      	beq.n	800423e <vTaskDelete+0x6a>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <vTaskDelete+0xb0>)
 8004206:	6813      	ldr	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004208:	4620      	mov	r0, r4
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800420a:	3b01      	subs	r3, #1
 800420c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800420e:	f7ff fee9 	bl	8003fe4 <prvDeleteTCB>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <vTaskDelete+0xb4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b153      	cbz	r3, 8004230 <vTaskDelete+0x5c>
 800421a:	f7ff fe8f 	bl	8003f3c <prvResetNextTaskUnblockTime.part.1>
				prvResetNextTaskUnblockTime();
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800421e:	f000 ffa3 	bl	8005168 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004222:	4b1a      	ldr	r3, [pc, #104]	; (800428c <vTaskDelete+0xb8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	b113      	cbz	r3, 800422e <vTaskDelete+0x5a>
		{
			if( pxTCB == pxCurrentTCB )
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	429c      	cmp	r4, r3
 800422c:	d010      	beq.n	8004250 <vTaskDelete+0x7c>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004230:	4b17      	ldr	r3, [pc, #92]	; (8004290 <vTaskDelete+0xbc>)
 8004232:	f04f 32ff 	mov.w	r2, #4294967295
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e7f1      	b.n	800421e <vTaskDelete+0x4a>

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800423a:	682c      	ldr	r4, [r5, #0]
 800423c:	e7d0      	b.n	80041e0 <vTaskDelete+0xc>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800423e:	4631      	mov	r1, r6
 8004240:	4814      	ldr	r0, [pc, #80]	; (8004294 <vTaskDelete+0xc0>)
 8004242:	f7ff fa6f 	bl	8003724 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <vTaskDelete+0xc4>)
 8004248:	6813      	ldr	r3, [r2, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e7e6      	b.n	800421e <vTaskDelete+0x4a>
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
		{
			if( pxTCB == pxCurrentTCB )
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <vTaskDelete+0xc8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	b143      	cbz	r3, 8004268 <vTaskDelete+0x94>
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	e7fe      	b.n	8004266 <vTaskDelete+0x92>
				portYIELD_WITHIN_API();
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <vTaskDelete+0xcc>)
 800426a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004278:	bd70      	pop	{r4, r5, r6, pc}
 800427a:	bf00      	nop
 800427c:	200006a0 	.word	0x200006a0
 8004280:	200006c4 	.word	0x200006c4
 8004284:	200006f0 	.word	0x200006f0
 8004288:	20000204 	.word	0x20000204
 800428c:	20000208 	.word	0x20000208
 8004290:	20000200 	.word	0x20000200
 8004294:	2000020c 	.word	0x2000020c
 8004298:	2000069c 	.word	0x2000069c
 800429c:	20000698 	.word	0x20000698
 80042a0:	e000ed04 	.word	0xe000ed04

080042a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042a4:	b530      	push	{r4, r5, lr}
 80042a6:	b089      	sub	sp, #36	; 0x24
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042a8:	2400      	movs	r4, #0
		StackType_t *pxIdleTaskStackBuffer = NULL;
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042aa:	aa07      	add	r2, sp, #28
 80042ac:	a906      	add	r1, sp, #24
 80042ae:	a805      	add	r0, sp, #20
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042b0:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042b2:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042b4:	f000 fdb8 	bl	8004e28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042b8:	a805      	add	r0, sp, #20
 80042ba:	c807      	ldmia	r0, {r0, r1, r2}
 80042bc:	4623      	mov	r3, r4
 80042be:	9002      	str	r0, [sp, #8]
 80042c0:	9101      	str	r1, [sp, #4]
 80042c2:	9400      	str	r4, [sp, #0]
 80042c4:	4913      	ldr	r1, [pc, #76]	; (8004314 <vTaskStartScheduler+0x70>)
 80042c6:	4814      	ldr	r0, [pc, #80]	; (8004318 <vTaskStartScheduler+0x74>)
 80042c8:	f7ff ff1c 	bl	8004104 <xTaskCreateStatic>
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042cc:	b1a8      	cbz	r0, 80042fa <vTaskStartScheduler+0x56>

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 80042ce:	f000 fb51 	bl	8004974 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042d2:	2801      	cmp	r0, #1
 80042d4:	d113      	bne.n	80042fe <vTaskStartScheduler+0x5a>
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042e6:	490d      	ldr	r1, [pc, #52]	; (800431c <vTaskStartScheduler+0x78>)
		xSchedulerRunning = pdTRUE;
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <vTaskStartScheduler+0x7c>)
		xTickCount = ( TickType_t ) 0U;
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <vTaskStartScheduler+0x80>)
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042ec:	f04f 35ff 	mov.w	r5, #4294967295
 80042f0:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80042f2:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 80042f4:	601c      	str	r4, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042f6:	f000 ffb1 	bl	800525c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042fa:	b009      	add	sp, #36	; 0x24
 80042fc:	bd30      	pop	{r4, r5, pc}
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042fe:	3001      	adds	r0, #1
 8004300:	d1fb      	bne.n	80042fa <vTaskStartScheduler+0x56>
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	e7fe      	b.n	8004312 <vTaskStartScheduler+0x6e>
 8004314:	080073ac 	.word	0x080073ac
 8004318:	08004021 	.word	0x08004021
 800431c:	20000200 	.word	0x20000200
 8004320:	20000208 	.word	0x20000208
 8004324:	200006bc 	.word	0x200006bc

08004328 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004328:	4a02      	ldr	r2, [pc, #8]	; (8004334 <vTaskSuspendAll+0xc>)
 800432a:	6813      	ldr	r3, [r2, #0]
 800432c:	3301      	adds	r3, #1
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000698 	.word	0x20000698

08004338 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004338:	4b01      	ldr	r3, [pc, #4]	; (8004340 <xTaskGetTickCount+0x8>)
 800433a:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	200006bc 	.word	0x200006bc

08004344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004348:	4b44      	ldr	r3, [pc, #272]	; (800445c <xTaskIncrementTick+0x118>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d14f      	bne.n	80043f0 <xTaskIncrementTick+0xac>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004350:	4b43      	ldr	r3, [pc, #268]	; (8004460 <xTaskIncrementTick+0x11c>)
 8004352:	681d      	ldr	r5, [r3, #0]
 8004354:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004356:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004358:	2d00      	cmp	r5, #0
 800435a:	d056      	beq.n	800440a <xTaskIncrementTick+0xc6>
 800435c:	f8df b120 	ldr.w	fp, [pc, #288]	; 8004480 <xTaskIncrementTick+0x13c>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004360:	f8db 2000 	ldr.w	r2, [fp]
 8004364:	4f3f      	ldr	r7, [pc, #252]	; (8004464 <xTaskIncrementTick+0x120>)
 8004366:	4e40      	ldr	r6, [pc, #256]	; (8004468 <xTaskIncrementTick+0x124>)
 8004368:	4295      	cmp	r5, r2
 800436a:	d35b      	bcc.n	8004424 <xTaskIncrementTick+0xe0>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800436c:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8004484 <xTaskIncrementTick+0x140>
 8004370:	2400      	movs	r4, #0
 8004372:	e02a      	b.n	80043ca <xTaskIncrementTick+0x86>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004374:	4b3d      	ldr	r3, [pc, #244]	; (800446c <xTaskIncrementTick+0x128>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68d2      	ldr	r2, [r2, #12]
 800437a:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800437e:	f8d8 1004 	ldr.w	r1, [r8, #4]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004382:	f108 0a04 	add.w	sl, r8, #4
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );

					if( xConstTickCount < xItemValue )
 8004386:	428d      	cmp	r5, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004388:	4650      	mov	r0, sl
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );

					if( xConstTickCount < xItemValue )
 800438a:	d35c      	bcc.n	8004446 <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800438c:	f7ff f9f4 	bl	8003778 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004390:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004394:	f108 0018 	add.w	r0, r8, #24
					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004398:	b109      	cbz	r1, 800439e <xTaskIncrementTick+0x5a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800439a:	f7ff f9ed 	bl	8003778 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800439e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80043a2:	f8d9 2000 	ldr.w	r2, [r9]
 80043a6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80043aa:	4293      	cmp	r3, r2
 80043ac:	4651      	mov	r1, sl
 80043ae:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80043b2:	bf88      	it	hi
 80043b4:	f8c9 3000 	strhi.w	r3, [r9]
 80043b8:	f7ff f9b4 	bl	8003724 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043bc:	6830      	ldr	r0, [r6, #0]
 80043be:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80043c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 80043c4:	4291      	cmp	r1, r2
 80043c6:	bf28      	it	cs
 80043c8:	2401      	movcs	r4, #1
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ca:	4b28      	ldr	r3, [pc, #160]	; (800446c <xTaskIncrementTick+0x128>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	2a00      	cmp	r2, #0
 80043d2:	d1cf      	bne.n	8004374 <xTaskIncrementTick+0x30>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295
 80043d8:	f8cb 2000 	str.w	r2, [fp]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043dc:	6833      	ldr	r3, [r6, #0]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	58fb      	ldr	r3, [r7, r3]
			{
				xSwitchRequired = pdTRUE;
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	bf28      	it	cs
 80043ec:	2401      	movcs	r4, #1
 80043ee:	e004      	b.n	80043fa <xTaskIncrementTick+0xb6>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80043f0:	4a1f      	ldr	r2, [pc, #124]	; (8004470 <xTaskIncrementTick+0x12c>)
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043f8:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80043fa:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <xTaskIncrementTick+0x130>)
 80043fc:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf18      	it	ne
 8004402:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8004404:	4620      	mov	r0, r4
 8004406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
		{
			taskSWITCH_DELAYED_LISTS();
 800440a:	4b18      	ldr	r3, [pc, #96]	; (800446c <xTaskIncrementTick+0x128>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	b152      	cbz	r2, 8004428 <xTaskIncrementTick+0xe4>
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	e7fe      	b.n	8004422 <xTaskIncrementTick+0xde>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004424:	2400      	movs	r4, #0
 8004426:	e7d9      	b.n	80043dc <xTaskIncrementTick+0x98>
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
		{
			taskSWITCH_DELAYED_LISTS();
 8004428:	4a13      	ldr	r2, [pc, #76]	; (8004478 <xTaskIncrementTick+0x134>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	4913      	ldr	r1, [pc, #76]	; (800447c <xTaskIncrementTick+0x138>)
 800442e:	6814      	ldr	r4, [r2, #0]
 8004430:	601c      	str	r4, [r3, #0]
 8004432:	6010      	str	r0, [r2, #0]
 8004434:	680a      	ldr	r2, [r1, #0]
 8004436:	3201      	adds	r2, #1
 8004438:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	b12b      	cbz	r3, 800444c <xTaskIncrementTick+0x108>
 8004440:	f7ff fd7c 	bl	8003f3c <prvResetNextTaskUnblockTime.part.1>
 8004444:	e78a      	b.n	800435c <xTaskIncrementTick+0x18>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004446:	f8cb 1000 	str.w	r1, [fp]
						break;
 800444a:	e7c7      	b.n	80043dc <xTaskIncrementTick+0x98>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800444c:	f8df b030 	ldr.w	fp, [pc, #48]	; 8004480 <xTaskIncrementTick+0x13c>
 8004450:	f04f 32ff 	mov.w	r2, #4294967295
 8004454:	f8cb 2000 	str.w	r2, [fp]
 8004458:	e782      	b.n	8004360 <xTaskIncrementTick+0x1c>
 800445a:	bf00      	nop
 800445c:	20000698 	.word	0x20000698
 8004460:	200006bc 	.word	0x200006bc
 8004464:	20000238 	.word	0x20000238
 8004468:	200006a0 	.word	0x200006a0
 800446c:	20000204 	.word	0x20000204
 8004470:	20000234 	.word	0x20000234
 8004474:	200006f8 	.word	0x200006f8
 8004478:	200006c0 	.word	0x200006c0
 800447c:	200006b8 	.word	0x200006b8
 8004480:	20000200 	.word	0x20000200
 8004484:	200006f4 	.word	0x200006f4

08004488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800448c:	4c35      	ldr	r4, [pc, #212]	; (8004564 <xTaskResumeAll+0xdc>)
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	b943      	cbnz	r3, 80044a4 <xTaskResumeAll+0x1c>
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	e7fe      	b.n	80044a2 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044a4:	f000 fe3e 	bl	8005124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ae:	6824      	ldr	r4, [r4, #0]
 80044b0:	2c00      	cmp	r4, #0
 80044b2:	d14d      	bne.n	8004550 <xTaskResumeAll+0xc8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044b4:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <xTaskResumeAll+0xe0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d049      	beq.n	8004550 <xTaskResumeAll+0xc8>
 80044bc:	4d2b      	ldr	r5, [pc, #172]	; (800456c <xTaskResumeAll+0xe4>)
 80044be:	4e2c      	ldr	r6, [pc, #176]	; (8004570 <xTaskResumeAll+0xe8>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 80044c0:	4f2c      	ldr	r7, [pc, #176]	; (8004574 <xTaskResumeAll+0xec>)
 80044c2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800458c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044c6:	46aa      	mov	sl, r5
 80044c8:	e01f      	b.n	800450a <xTaskResumeAll+0x82>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044ca:	f8da 300c 	ldr.w	r3, [sl, #12]
 80044ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044d0:	f104 0804 	add.w	r8, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044d4:	f104 0018 	add.w	r0, r4, #24
 80044d8:	f7ff f94e 	bl	8003778 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044dc:	4640      	mov	r0, r8
 80044de:	f7ff f94b 	bl	8003778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80044ea:	4293      	cmp	r3, r2
 80044ec:	4641      	mov	r1, r8
 80044ee:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80044f2:	bf88      	it	hi
 80044f4:	603b      	strhi	r3, [r7, #0]
 80044f6:	f7ff f915 	bl	8003724 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044fa:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <xTaskResumeAll+0xf0>)
 80044fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8004504:	bf24      	itt	cs
 8004506:	2301      	movcs	r3, #1
 8004508:	6033      	strcs	r3, [r6, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800450a:	682b      	ldr	r3, [r5, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1dc      	bne.n	80044ca <xTaskResumeAll+0x42>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004510:	b13c      	cbz	r4, 8004522 <xTaskResumeAll+0x9a>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <xTaskResumeAll+0xf4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	bb03      	cbnz	r3, 800455c <xTaskResumeAll+0xd4>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800451a:	4b19      	ldr	r3, [pc, #100]	; (8004580 <xTaskResumeAll+0xf8>)
 800451c:	f04f 32ff 	mov.w	r2, #4294967295
 8004520:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004522:	4d18      	ldr	r5, [pc, #96]	; (8004584 <xTaskResumeAll+0xfc>)
 8004524:	682c      	ldr	r4, [r5, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004526:	b13c      	cbz	r4, 8004538 <xTaskResumeAll+0xb0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 8004528:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800452a:	f7ff ff0b 	bl	8004344 <xTaskIncrementTick>
 800452e:	b100      	cbz	r0, 8004532 <xTaskResumeAll+0xaa>
							{
								xYieldPending = pdTRUE;
 8004530:	6037      	str	r7, [r6, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004532:	3c01      	subs	r4, #1
 8004534:	d1f9      	bne.n	800452a <xTaskResumeAll+0xa2>

						uxPendedTicks = 0;
 8004536:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004538:	6833      	ldr	r3, [r6, #0]
 800453a:	b14b      	cbz	r3, 8004550 <xTaskResumeAll+0xc8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <xTaskResumeAll+0x100>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800454c:	2401      	movs	r4, #1
 800454e:	e000      	b.n	8004552 <xTaskResumeAll+0xca>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8004550:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004552:	f000 fe09 	bl	8005168 <vPortExitCritical>

	return xAlreadyYielded;
}
 8004556:	4620      	mov	r0, r4
 8004558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455c:	f7ff fcee 	bl	8003f3c <prvResetNextTaskUnblockTime.part.1>
 8004560:	e7df      	b.n	8004522 <xTaskResumeAll+0x9a>
 8004562:	bf00      	nop
 8004564:	20000698 	.word	0x20000698
 8004568:	200006f0 	.word	0x200006f0
 800456c:	200006a4 	.word	0x200006a4
 8004570:	200006f8 	.word	0x200006f8
 8004574:	200006f4 	.word	0x200006f4
 8004578:	200006a0 	.word	0x200006a0
 800457c:	20000204 	.word	0x20000204
 8004580:	20000200 	.word	0x20000200
 8004584:	20000234 	.word	0x20000234
 8004588:	e000ed04 	.word	0xe000ed04
 800458c:	20000238 	.word	0x20000238

08004590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004590:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004592:	b158      	cbz	r0, 80045ac <vTaskDelay+0x1c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004594:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <vTaskDelay+0x44>)
 8004596:	6819      	ldr	r1, [r3, #0]
 8004598:	b189      	cbz	r1, 80045be <vTaskDelay+0x2e>
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	e7fe      	b.n	80045aa <vTaskDelay+0x1a>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <vTaskDelay+0x48>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	bd08      	pop	{r3, pc}
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	3201      	adds	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045c4:	f7ff fd62 	bl	800408c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045c8:	f7ff ff5e 	bl	8004488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d0ed      	beq.n	80045ac <vTaskDelay+0x1c>
 80045d0:	bd08      	pop	{r3, pc}
 80045d2:	bf00      	nop
 80045d4:	20000698 	.word	0x20000698
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <vTaskSwitchContext+0x70>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d12e      	bne.n	8004642 <vTaskSwitchContext+0x66>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 80045e4:	4a1a      	ldr	r2, [pc, #104]	; (8004650 <vTaskSwitchContext+0x74>)
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045e6:	481b      	ldr	r0, [pc, #108]	; (8004654 <vTaskSwitchContext+0x78>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045e8:	b430      	push	{r4, r5}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045ea:	4d1b      	ldr	r5, [pc, #108]	; (8004658 <vTaskSwitchContext+0x7c>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 80045ec:	6013      	str	r3, [r2, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045ee:	682b      	ldr	r3, [r5, #0]
 80045f0:	009a      	lsls	r2, r3, #2
 80045f2:	18d1      	adds	r1, r2, r3
 80045f4:	0089      	lsls	r1, r1, #2
 80045f6:	5841      	ldr	r1, [r0, r1]
 80045f8:	b939      	cbnz	r1, 800460a <vTaskSwitchContext+0x2e>
 80045fa:	b1cb      	cbz	r3, 8004630 <vTaskSwitchContext+0x54>
 80045fc:	3b01      	subs	r3, #1
 80045fe:	009a      	lsls	r2, r3, #2
 8004600:	18d1      	adds	r1, r2, r3
 8004602:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8004606:	2900      	cmp	r1, #0
 8004608:	d0f7      	beq.n	80045fa <vTaskSwitchContext+0x1e>
 800460a:	441a      	add	r2, r3
 800460c:	0092      	lsls	r2, r2, #2
 800460e:	1884      	adds	r4, r0, r2
 8004610:	3208      	adds	r2, #8
 8004612:	6861      	ldr	r1, [r4, #4]
 8004614:	6849      	ldr	r1, [r1, #4]
 8004616:	6061      	str	r1, [r4, #4]
 8004618:	4402      	add	r2, r0
 800461a:	4291      	cmp	r1, r2
 800461c:	bf08      	it	eq
 800461e:	6849      	ldreq	r1, [r1, #4]
 8004620:	4a0e      	ldr	r2, [pc, #56]	; (800465c <vTaskSwitchContext+0x80>)
 8004622:	bf08      	it	eq
 8004624:	6061      	streq	r1, [r4, #4]
 8004626:	68c9      	ldr	r1, [r1, #12]
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	602b      	str	r3, [r5, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800462c:	bc30      	pop	{r4, r5}
 800462e:	4770      	bx	lr
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	e7fe      	b.n	8004640 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004642:	4b03      	ldr	r3, [pc, #12]	; (8004650 <vTaskSwitchContext+0x74>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000698 	.word	0x20000698
 8004650:	200006f8 	.word	0x200006f8
 8004654:	20000238 	.word	0x20000238
 8004658:	200006f4 	.word	0x200006f4
 800465c:	200006a0 	.word	0x200006a0

08004660 <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
 8004660:	b160      	cbz	r0, 800467c <vTaskPlaceOnEventList+0x1c>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004662:	b510      	push	{r4, lr}

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <vTaskPlaceOnEventList+0x30>)
 8004666:	460c      	mov	r4, r1
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	3118      	adds	r1, #24
 800466c:	f7ff f86a 	bl	8003744 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004670:	4620      	mov	r0, r4
 8004672:	2101      	movs	r1, #1
}
 8004674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004678:	f7ff bd08 	b.w	800408c <prvAddCurrentTaskToDelayedList>
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	e7fe      	b.n	800468c <vTaskPlaceOnEventList+0x2c>
 800468e:	bf00      	nop
 8004690:	200006a0 	.word	0x200006a0

08004694 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004694:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004696:	b188      	cbz	r0, 80046bc <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <vTaskPlaceOnEventListRestricted+0x3c>)
 800469a:	460d      	mov	r5, r1
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	4614      	mov	r4, r2
 80046a0:	3118      	adds	r1, #24
 80046a2:	f7ff f83f 	bl	8003724 <vListInsertEnd>
		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
		{
			xTicksToWait = portMAX_DELAY;
 80046a6:	2c00      	cmp	r4, #0
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046a8:	bf08      	it	eq
 80046aa:	4628      	moveq	r0, r5
 80046ac:	4621      	mov	r1, r4
 80046ae:	bf18      	it	ne
 80046b0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80046b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			xTicksToWait = portMAX_DELAY;
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046b8:	f7ff bce8 	b.w	800408c <prvAddCurrentTaskToDelayedList>
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	e7fe      	b.n	80046cc <vTaskPlaceOnEventListRestricted+0x38>
 80046ce:	bf00      	nop
 80046d0:	200006a0 	.word	0x200006a0

080046d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046d4:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80046d6:	68c3      	ldr	r3, [r0, #12]
 80046d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80046da:	b324      	cbz	r4, 8004726 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046dc:	f104 0518 	add.w	r5, r4, #24
 80046e0:	4628      	mov	r0, r5
 80046e2:	f7ff f849 	bl	8003778 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <xTaskRemoveFromEventList+0x70>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	bb2b      	cbnz	r3, 8004738 <xTaskRemoveFromEventList+0x64>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046ec:	1d25      	adds	r5, r4, #4
 80046ee:	4628      	mov	r0, r5
 80046f0:	f7ff f842 	bl	8003778 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046f4:	4a14      	ldr	r2, [pc, #80]	; (8004748 <xTaskRemoveFromEventList+0x74>)
 80046f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046f8:	6811      	ldr	r1, [r2, #0]
 80046fa:	4814      	ldr	r0, [pc, #80]	; (800474c <xTaskRemoveFromEventList+0x78>)
 80046fc:	428b      	cmp	r3, r1
 80046fe:	bf88      	it	hi
 8004700:	6013      	strhi	r3, [r2, #0]
 8004702:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004706:	4629      	mov	r1, r5
 8004708:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800470c:	f7ff f80a 	bl	8003724 <vListInsertEnd>
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004710:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <xTaskRemoveFromEventList+0x7c>)
 8004712:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800471a:	bf83      	ittte	hi
 800471c:	4b0d      	ldrhi	r3, [pc, #52]	; (8004754 <xTaskRemoveFromEventList+0x80>)
 800471e:	2001      	movhi	r0, #1
 8004720:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8004722:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8004724:	bd38      	pop	{r3, r4, r5, pc}
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	e7fe      	b.n	8004736 <xTaskRemoveFromEventList+0x62>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004738:	4629      	mov	r1, r5
 800473a:	4807      	ldr	r0, [pc, #28]	; (8004758 <xTaskRemoveFromEventList+0x84>)
 800473c:	f7fe fff2 	bl	8003724 <vListInsertEnd>
 8004740:	e7e6      	b.n	8004710 <xTaskRemoveFromEventList+0x3c>
 8004742:	bf00      	nop
 8004744:	20000698 	.word	0x20000698
 8004748:	200006f4 	.word	0x200006f4
 800474c:	20000238 	.word	0x20000238
 8004750:	200006a0 	.word	0x200006a0
 8004754:	200006f8 	.word	0x200006f8
 8004758:	200006a4 	.word	0x200006a4

0800475c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800475c:	4a03      	ldr	r2, [pc, #12]	; (800476c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800475e:	4b04      	ldr	r3, [pc, #16]	; (8004770 <vTaskInternalSetTimeOutState+0x14>)
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004760:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	e880 000c 	stmia.w	r0, {r2, r3}
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	200006b8 	.word	0x200006b8
 8004770:	200006bc 	.word	0x200006bc

08004774 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004776:	b358      	cbz	r0, 80047d0 <xTaskCheckForTimeOut+0x5c>
	configASSERT( pxTicksToWait );
 8004778:	b309      	cbz	r1, 80047be <xTaskCheckForTimeOut+0x4a>
 800477a:	460d      	mov	r5, r1
 800477c:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 800477e:	f000 fcd1 	bl	8005124 <vPortEnterCritical>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004782:	682b      	ldr	r3, [r5, #0]
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004784:	f8df e080 	ldr.w	lr, [pc, #128]	; 8004808 <xTaskCheckForTimeOut+0x94>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004788:	6866      	ldr	r6, [r4, #4]
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800478a:	f8de 2000 	ldr.w	r2, [lr]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800478e:	1c59      	adds	r1, r3, #1
 8004790:	d033      	beq.n	80047fa <xTaskCheckForTimeOut+0x86>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004792:	481c      	ldr	r0, [pc, #112]	; (8004804 <xTaskCheckForTimeOut+0x90>)
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	6807      	ldr	r7, [r0, #0]
 8004798:	42b9      	cmp	r1, r7
 800479a:	d006      	beq.n	80047aa <xTaskCheckForTimeOut+0x36>
 800479c:	42b2      	cmp	r2, r6
 800479e:	d304      	bcc.n	80047aa <xTaskCheckForTimeOut+0x36>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80047a0:	2501      	movs	r5, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80047a2:	f000 fce1 	bl	8005168 <vPortExitCritical>

	return xReturn;
}
 80047a6:	4628      	mov	r0, r5
 80047a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047aa:	1b92      	subs	r2, r2, r6
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d318      	bcc.n	80047e2 <xTaskCheckForTimeOut+0x6e>
			vTaskInternalSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			*pxTicksToWait = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80047b4:	2501      	movs	r5, #1
		}
	}
	taskEXIT_CRITICAL();
 80047b6:	f000 fcd7 	bl	8005168 <vPortExitCritical>

	return xReturn;
}
 80047ba:	4628      	mov	r0, r5
 80047bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	e7fe      	b.n	80047ce <xTaskCheckForTimeOut+0x5a>
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	e7fe      	b.n	80047e0 <xTaskCheckForTimeOut+0x6c>
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047e2:	1a9b      	subs	r3, r3, r2
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047e4:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047e6:	f8de 2000 	ldr.w	r2, [lr]
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047ea:	602b      	str	r3, [r5, #0]

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047ec:	e884 0005 	stmia.w	r4, {r0, r2}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
			vTaskInternalSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
 80047f0:	2500      	movs	r5, #0
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80047f2:	f000 fcb9 	bl	8005168 <vPortExitCritical>

	return xReturn;
}
 80047f6:	4628      	mov	r0, r5
 80047f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047fa:	2500      	movs	r5, #0
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80047fc:	f000 fcb4 	bl	8005168 <vPortExitCritical>

	return xReturn;
}
 8004800:	4628      	mov	r0, r5
 8004802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004804:	200006b8 	.word	0x200006b8
 8004808:	200006bc 	.word	0x200006bc

0800480c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 800480c:	4b01      	ldr	r3, [pc, #4]	; (8004814 <vTaskMissedYield+0x8>)
 800480e:	2201      	movs	r2, #1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	4770      	bx	lr
 8004814:	200006f8 	.word	0x200006f8

08004818 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <xTaskGetSchedulerState+0x18>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	b133      	cbz	r3, 800482c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <xTaskGetSchedulerState+0x1c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004824:	bf0c      	ite	eq
 8004826:	2002      	moveq	r0, #2
 8004828:	2000      	movne	r0, #0
 800482a:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800482c:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800482e:	4770      	bx	lr
 8004830:	20000208 	.word	0x20000208
 8004834:	20000698 	.word	0x20000698

08004838 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8004838:	b308      	cbz	r0, 800487e <xTaskPriorityDisinherit+0x46>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800483a:	b538      	push	{r3, r4, r5, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800483c:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <xTaskPriorityDisinherit+0x7c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4298      	cmp	r0, r3
 8004842:	d008      	beq.n	8004856 <xTaskPriorityDisinherit+0x1e>
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	e7fe      	b.n	8004854 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 8004856:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004858:	b943      	cbnz	r3, 800486c <xTaskPriorityDisinherit+0x34>
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	e7fe      	b.n	800486a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800486c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800486e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8004870:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004872:	4291      	cmp	r1, r2
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8004874:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004876:	d000      	beq.n	800487a <xTaskPriorityDisinherit+0x42>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004878:	b11b      	cbz	r3, 8004882 <xTaskPriorityDisinherit+0x4a>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 800487a:	2000      	movs	r0, #0
 800487c:	bd38      	pop	{r3, r4, r5, pc}
 800487e:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8004880:	4770      	bx	lr
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004882:	1d05      	adds	r5, r0, #4
 8004884:	4604      	mov	r4, r0
 8004886:	4628      	mov	r0, r5
 8004888:	f7fe ff76 	bl	8003778 <uxListRemove>

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 800488c:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <xTaskPriorityDisinherit+0x80>)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800488e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8004890:	6811      	ldr	r1, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004892:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004894:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8004898:	428b      	cmp	r3, r1
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800489a:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800489c:	4807      	ldr	r0, [pc, #28]	; (80048bc <xTaskPriorityDisinherit+0x84>)
 800489e:	bf88      	it	hi
 80048a0:	6013      	strhi	r3, [r2, #0]
 80048a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80048a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80048aa:	4629      	mov	r1, r5
 80048ac:	f7fe ff3a 	bl	8003724 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048b0:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	200006a0 	.word	0x200006a0
 80048b8:	200006f4 	.word	0x200006f4
 80048bc:	20000238 	.word	0x20000238

080048c0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80048c2:	4c13      	ldr	r4, [pc, #76]	; (8004910 <prvCheckForValidListAndQueue+0x50>)
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048c4:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048c6:	f000 fc2d 	bl	8005124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048ca:	6825      	ldr	r5, [r4, #0]
 80048cc:	b125      	cbz	r5, 80048d8 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80048ce:	b003      	add	sp, #12
 80048d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048d4:	f000 bc48 	b.w	8005168 <vPortExitCritical>
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 80048d8:	4f0e      	ldr	r7, [pc, #56]	; (8004914 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList2 );
 80048da:	4e0f      	ldr	r6, [pc, #60]	; (8004918 <prvCheckForValidListAndQueue+0x58>)
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 80048dc:	4638      	mov	r0, r7
 80048de:	f7fe ff11 	bl	8003704 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7fe ff0e 	bl	8003704 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048e8:	490c      	ldr	r1, [pc, #48]	; (800491c <prvCheckForValidListAndQueue+0x5c>)
			pxOverflowTimerList = &xActiveTimerList2;
 80048ea:	f8df e040 	ldr.w	lr, [pc, #64]	; 800492c <prvCheckForValidListAndQueue+0x6c>
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048ee:	9500      	str	r5, [sp, #0]
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <prvCheckForValidListAndQueue+0x60>)
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 80048f2:	600f      	str	r7, [r1, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048f4:	4a0b      	ldr	r2, [pc, #44]	; (8004924 <prvCheckForValidListAndQueue+0x64>)
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 80048f6:	f8ce 6000 	str.w	r6, [lr]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048fa:	2110      	movs	r1, #16
 80048fc:	200a      	movs	r0, #10
 80048fe:	f7ff f82f 	bl	8003960 <xQueueGenericCreateStatic>
 8004902:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004904:	2800      	cmp	r0, #0
 8004906:	d0e2      	beq.n	80048ce <prvCheckForValidListAndQueue+0xe>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004908:	4907      	ldr	r1, [pc, #28]	; (8004928 <prvCheckForValidListAndQueue+0x68>)
 800490a:	f7ff fa53 	bl	8003db4 <vQueueAddToRegistry>
 800490e:	e7de      	b.n	80048ce <prvCheckForValidListAndQueue+0xe>
 8004910:	2000081c 	.word	0x2000081c
 8004914:	20000700 	.word	0x20000700
 8004918:	20000714 	.word	0x20000714
 800491c:	200006fc 	.word	0x200006fc
 8004920:	200007cc 	.word	0x200007cc
 8004924:	2000072c 	.word	0x2000072c
 8004928:	080073b4 	.word	0x080073b4
 800492c:	20000820 	.word	0x20000820

08004930 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8004930:	4291      	cmp	r1, r2
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004932:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004934:	6100      	str	r0, [r0, #16]

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004936:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8004938:	d805      	bhi.n	8004946 <prvInsertTimerInActiveList+0x16>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493a:	6981      	ldr	r1, [r0, #24]
 800493c:	1ad2      	subs	r2, r2, r3
 800493e:	428a      	cmp	r2, r1
 8004940:	d30c      	bcc.n	800495c <prvInsertTimerInActiveList+0x2c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004942:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8004944:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004946:	429a      	cmp	r2, r3
 8004948:	d201      	bcs.n	800494e <prvInsertTimerInActiveList+0x1e>
 800494a:	4299      	cmp	r1, r3
 800494c:	d2f9      	bcs.n	8004942 <prvInsertTimerInActiveList+0x12>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <prvInsertTimerInActiveList+0x3c>)
 8004950:	1d01      	adds	r1, r0, #4
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	f7fe fef6 	bl	8003744 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8004958:	2000      	movs	r0, #0
 800495a:	bd08      	pop	{r3, pc}
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800495c:	4b04      	ldr	r3, [pc, #16]	; (8004970 <prvInsertTimerInActiveList+0x40>)
 800495e:	1d01      	adds	r1, r0, #4
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	f7fe feef 	bl	8003744 <vListInsert>
 8004966:	2000      	movs	r0, #0
 8004968:	bd08      	pop	{r3, pc}
 800496a:	bf00      	nop
 800496c:	200006fc 	.word	0x200006fc
 8004970:	20000820 	.word	0x20000820

08004974 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004974:	b510      	push	{r4, lr}
 8004976:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004978:	f7ff ffa2 	bl	80048c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800497c:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <xTimerCreateTimerTask+0x54>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	b1cb      	cbz	r3, 80049b6 <xTimerCreateTimerTask+0x42>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004982:	2400      	movs	r4, #0
			StackType_t *pxTimerTaskStackBuffer = NULL;
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004984:	aa07      	add	r2, sp, #28
 8004986:	a906      	add	r1, sp, #24
 8004988:	a805      	add	r0, sp, #20

	if( xTimerQueue != NULL )
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800498a:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800498c:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800498e:	f000 fa59 	bl	8004e44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004992:	9b05      	ldr	r3, [sp, #20]
 8004994:	9806      	ldr	r0, [sp, #24]
 8004996:	9302      	str	r3, [sp, #8]
 8004998:	2102      	movs	r1, #2
 800499a:	4623      	mov	r3, r4
 800499c:	9001      	str	r0, [sp, #4]
 800499e:	9100      	str	r1, [sp, #0]
 80049a0:	9a07      	ldr	r2, [sp, #28]
 80049a2:	490a      	ldr	r1, [pc, #40]	; (80049cc <xTimerCreateTimerTask+0x58>)
 80049a4:	480a      	ldr	r0, [pc, #40]	; (80049d0 <xTimerCreateTimerTask+0x5c>)
 80049a6:	f7ff fbad 	bl	8004104 <xTaskCreateStatic>
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <xTimerCreateTimerTask+0x60>)
 80049ac:	6018      	str	r0, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049ae:	b110      	cbz	r0, 80049b6 <xTimerCreateTimerTask+0x42>
	return xReturn;
}
 80049b0:	2001      	movs	r0, #1
 80049b2:	b008      	add	sp, #32
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	e7fe      	b.n	80049c6 <xTimerCreateTimerTask+0x52>
 80049c8:	2000081c 	.word	0x2000081c
 80049cc:	080073bc 	.word	0x080073bc
 80049d0:	08004acd 	.word	0x08004acd
 80049d4:	20000824 	.word	0x20000824

080049d8 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049d8:	b338      	cbz	r0, 8004a2a <xTimerGenericCommand+0x52>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049da:	b570      	push	{r4, r5, r6, lr}

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049dc:	4d17      	ldr	r5, [pc, #92]	; (8004a3c <xTimerGenericCommand+0x64>)
 80049de:	4604      	mov	r4, r0
 80049e0:	6828      	ldr	r0, [r5, #0]
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049e2:	b084      	sub	sp, #16

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049e4:	b188      	cbz	r0, 8004a0a <xTimerGenericCommand+0x32>
 80049e6:	4616      	mov	r6, r2
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049e8:	2905      	cmp	r1, #5
 80049ea:	461a      	mov	r2, r3
 80049ec:	460b      	mov	r3, r1
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049ee:	e88d 0048 	stmia.w	sp, {r3, r6}
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80049f2:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049f4:	dc0b      	bgt.n	8004a0e <xTimerGenericCommand+0x36>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049f6:	f7ff ff0f 	bl	8004818 <xTaskGetSchedulerState>
 80049fa:	2802      	cmp	r0, #2
 80049fc:	d00d      	beq.n	8004a1a <xTimerGenericCommand+0x42>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049fe:	2300      	movs	r3, #0
 8004a00:	6828      	ldr	r0, [r5, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	4669      	mov	r1, sp
 8004a06:	f7ff f801 	bl	8003a0c <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8004a0a:	b004      	add	sp, #16
 8004a0c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4669      	mov	r1, sp
 8004a12:	f7ff f8bb 	bl	8003b8c <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8004a16:	b004      	add	sp, #16
 8004a18:	bd70      	pop	{r4, r5, r6, pc}

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a1a:	6828      	ldr	r0, [r5, #0]
 8004a1c:	9a08      	ldr	r2, [sp, #32]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	4669      	mov	r1, sp
 8004a22:	f7fe fff3 	bl	8003a0c <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8004a26:	b004      	add	sp, #16
 8004a28:	bd70      	pop	{r4, r5, r6, pc}
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	e7fe      	b.n	8004a3a <xTimerGenericCommand+0x62>
 8004a3c:	2000081c 	.word	0x2000081c

08004a40 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	4d1f      	ldr	r5, [pc, #124]	; (8004ac4 <prvSwitchTimerLists+0x84>)
 8004a46:	b082      	sub	sp, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a48:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a4c:	46aa      	mov	sl, r5
 8004a4e:	e00d      	b.n	8004a6c <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a50:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a52:	68dc      	ldr	r4, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a54:	681f      	ldr	r7, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a56:	f104 0904 	add.w	r9, r4, #4
 8004a5a:	4648      	mov	r0, r9
 8004a5c:	f7fe fe8c 	bl	8003778 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a62:	4620      	mov	r0, r4
 8004a64:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a66:	69e3      	ldr	r3, [r4, #28]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d00b      	beq.n	8004a84 <prvSwitchTimerLists+0x44>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	4915      	ldr	r1, [pc, #84]	; (8004ac4 <prvSwitchTimerLists+0x84>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	d1ec      	bne.n	8004a50 <prvSwitchTimerLists+0x10>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8004a76:	4a14      	ldr	r2, [pc, #80]	; (8004ac8 <prvSwitchTimerLists+0x88>)
 8004a78:	6810      	ldr	r0, [r2, #0]
 8004a7a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8004a7c:	6013      	str	r3, [r2, #0]
}
 8004a7e:	b002      	add	sp, #8
 8004a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a84:	69a6      	ldr	r6, [r4, #24]
 8004a86:	443e      	add	r6, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a88:	2300      	movs	r3, #0
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
 8004a8a:	42b7      	cmp	r7, r6
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a8c:	463a      	mov	r2, r7
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4620      	mov	r0, r4
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
 8004a92:	d207      	bcs.n	8004aa4 <prvSwitchTimerLists+0x64>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a94:	6066      	str	r6, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a96:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a98:	f8da 0000 	ldr.w	r0, [sl]
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	f7fe fe51 	bl	8003744 <vListInsert>
 8004aa2:	e7e3      	b.n	8004a6c <prvSwitchTimerLists+0x2c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004aa4:	f8cd 8000 	str.w	r8, [sp]
 8004aa8:	f7ff ff96 	bl	80049d8 <xTimerGenericCommand>
				configASSERT( xResult );
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d1dd      	bne.n	8004a6c <prvSwitchTimerLists+0x2c>
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	e7fe      	b.n	8004ac0 <prvSwitchTimerLists+0x80>
 8004ac2:	bf00      	nop
 8004ac4:	200006fc 	.word	0x200006fc
 8004ac8:	20000820 	.word	0x20000820

08004acc <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad0:	4e71      	ldr	r6, [pc, #452]	; (8004c98 <prvTimerTask+0x1cc>)
 8004ad2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8004ca4 <prvTimerTask+0x1d8>
 8004ad6:	4d71      	ldr	r5, [pc, #452]	; (8004c9c <prvTimerTask+0x1d0>)
 8004ad8:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 8004ca8 <prvTimerTask+0x1dc>
 8004adc:	b089      	sub	sp, #36	; 0x24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
 8004ade:	46b1      	mov	r9, r6
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae4:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ae6:	2c00      	cmp	r4, #0
 8004ae8:	d053      	beq.n	8004b92 <prvTimerTask+0xc6>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	681c      	ldr	r4, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004aee:	f7ff fc1b 	bl	8004328 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004af2:	f7ff fc21 	bl	8004338 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8004af6:	6833      	ldr	r3, [r6, #0]
 8004af8:	4283      	cmp	r3, r0
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004afa:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
 8004afc:	d85a      	bhi.n	8004bb4 <prvTimerTask+0xe8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004afe:	4284      	cmp	r4, r0
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8004b00:	f8c9 0000 	str.w	r0, [r9]
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b04:	f240 808e 	bls.w	8004c24 <prvTimerTask+0x158>
 8004b08:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b0a:	1be1      	subs	r1, r4, r7
 8004b0c:	6828      	ldr	r0, [r5, #0]
 8004b0e:	f7ff f967 	bl	8003de0 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8004b12:	f7ff fcb9 	bl	8004488 <xTaskResumeAll>
 8004b16:	b938      	cbnz	r0, 8004b28 <prvTimerTask+0x5c>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8004b18:	4a61      	ldr	r2, [pc, #388]	; (8004ca0 <prvTimerTask+0x1d4>)
 8004b1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	2701      	movs	r7, #1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	a904      	add	r1, sp, #16
 8004b2e:	6828      	ldr	r0, [r5, #0]
 8004b30:	f7ff f890 	bl	8003c54 <xQueueReceive>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d0d3      	beq.n	8004ae0 <prvTimerTask+0x14>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b38:	9b04      	ldr	r3, [sp, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	db21      	blt.n	8004b82 <prvTimerTask+0xb6>
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b3e:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b40:	6963      	ldr	r3, [r4, #20]
 8004b42:	b113      	cbz	r3, 8004b4a <prvTimerTask+0x7e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b44:	1d20      	adds	r0, r4, #4
 8004b46:	f7fe fe17 	bl	8003778 <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b4a:	f7ff fbf5 	bl	8004338 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8004b4e:	6833      	ldr	r3, [r6, #0]
 8004b50:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b52:	4602      	mov	r2, r0

	if( xTimeNow < xLastTime )
 8004b54:	d33e      	bcc.n	8004bd4 <prvTimerTask+0x108>
 8004b56:	9b04      	ldr	r3, [sp, #16]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8004b58:	6032      	str	r2, [r6, #0]
 8004b5a:	2b09      	cmp	r3, #9
 8004b5c:	d8e5      	bhi.n	8004b2a <prvTimerTask+0x5e>
 8004b5e:	fa07 f303 	lsl.w	r3, r7, r3
 8004b62:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8004b66:	d12b      	bne.n	8004bc0 <prvTimerTask+0xf4>
 8004b68:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8004b6c:	d137      	bne.n	8004bde <prvTimerTask+0x112>
 8004b6e:	069b      	lsls	r3, r3, #26
 8004b70:	d5db      	bpl.n	8004b2a <prvTimerTask+0x5e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004b72:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1d7      	bne.n	8004b2a <prvTimerTask+0x5e>
						{
							vPortFree( pxTimer );
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 fa30 	bl	8004fe0 <vPortFree>
 8004b80:	e7d3      	b.n	8004b2a <prvTimerTask+0x5e>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b82:	9b05      	ldr	r3, [sp, #20]
 8004b84:	9907      	ldr	r1, [sp, #28]
 8004b86:	9806      	ldr	r0, [sp, #24]
 8004b88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b8a:	9b04      	ldr	r3, [sp, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	dbcc      	blt.n	8004b2a <prvTimerTask+0x5e>
 8004b90:	e7d5      	b.n	8004b3e <prvTimerTask+0x72>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b92:	f7ff fbc9 	bl	8004328 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b96:	f7ff fbcf 	bl	8004338 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8004b9a:	6833      	ldr	r3, [r6, #0]
 8004b9c:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b9e:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
 8004ba0:	d308      	bcc.n	8004bb4 <prvTimerTask+0xe8>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ba2:	f8db 3000 	ldr.w	r3, [fp]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8004ba6:	f8c9 7000 	str.w	r7, [r9]
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	fab2 f282 	clz	r2, r2
 8004bb0:	0952      	lsrs	r2, r2, #5
 8004bb2:	e7aa      	b.n	8004b0a <prvTimerTask+0x3e>

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
 8004bb4:	f7ff ff44 	bl	8004a40 <prvSwitchTimerLists>
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8004bb8:	6037      	str	r7, [r6, #0]
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8004bba:	f7ff fc65 	bl	8004488 <xTaskResumeAll>
 8004bbe:	e7b3      	b.n	8004b28 <prvTimerTask+0x5c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bc0:	9905      	ldr	r1, [sp, #20]
 8004bc2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	d05d      	beq.n	8004c84 <prvTimerTask+0x1b8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bc8:	4411      	add	r1, r2
 8004bca:	4620      	mov	r0, r4
 8004bcc:	4613      	mov	r3, r2
 8004bce:	f7ff feaf 	bl	8004930 <prvInsertTimerInActiveList>
 8004bd2:	e7aa      	b.n	8004b2a <prvTimerTask+0x5e>
 8004bd4:	9003      	str	r0, [sp, #12]

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
 8004bd6:	f7ff ff33 	bl	8004a40 <prvSwitchTimerLists>
 8004bda:	9a03      	ldr	r2, [sp, #12]
 8004bdc:	e7bb      	b.n	8004b56 <prvTimerTask+0x8a>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bde:	9b05      	ldr	r3, [sp, #20]
 8004be0:	69a1      	ldr	r1, [r4, #24]
 8004be2:	4620      	mov	r0, r4
 8004be4:	4419      	add	r1, r3
 8004be6:	f7ff fea3 	bl	8004930 <prvInsertTimerInActiveList>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d09d      	beq.n	8004b2a <prvTimerTask+0x5e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004bf4:	69e3      	ldr	r3, [r4, #28]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d197      	bne.n	8004b2a <prvTimerTask+0x5e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bfa:	69a3      	ldr	r3, [r4, #24]
 8004bfc:	9a05      	ldr	r2, [sp, #20]
 8004bfe:	f8cd a000 	str.w	sl, [sp]
 8004c02:	441a      	add	r2, r3
 8004c04:	4620      	mov	r0, r4
 8004c06:	4653      	mov	r3, sl
 8004c08:	4651      	mov	r1, sl
 8004c0a:	f7ff fee5 	bl	80049d8 <xTimerGenericCommand>
							configASSERT( xResult );
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d18b      	bne.n	8004b2a <prvTimerTask+0x5e>
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	e7fe      	b.n	8004c22 <prvTimerTask+0x156>
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
			{
				( void ) xTaskResumeAll();
 8004c24:	f7ff fc30 	bl	8004488 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c28:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <prvTimerTask+0x1d8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f8d3 a00c 	ldr.w	sl, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c32:	f10a 0004 	add.w	r0, sl, #4
 8004c36:	f7fe fd9f 	bl	8003778 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c3a:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d004      	beq.n	8004c4c <prvTimerTask+0x180>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c42:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004c46:	4650      	mov	r0, sl
 8004c48:	4798      	blx	r3
 8004c4a:	e76d      	b.n	8004b28 <prvTimerTask+0x5c>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c4c:	f8da 1018 	ldr.w	r1, [sl, #24]
 8004c50:	463a      	mov	r2, r7
 8004c52:	4421      	add	r1, r4
 8004c54:	4623      	mov	r3, r4
 8004c56:	4650      	mov	r0, sl
 8004c58:	f7ff fe6a 	bl	8004930 <prvInsertTimerInActiveList>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d0f0      	beq.n	8004c42 <prvTimerTask+0x176>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c60:	2300      	movs	r3, #0
 8004c62:	4622      	mov	r2, r4
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	4619      	mov	r1, r3
 8004c68:	4650      	mov	r0, sl
 8004c6a:	f7ff feb5 	bl	80049d8 <xTimerGenericCommand>
			configASSERT( xResult );
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d1e7      	bne.n	8004c42 <prvTimerTask+0x176>
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	e7fe      	b.n	8004c82 <prvTimerTask+0x1b6>
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	e7fe      	b.n	8004c94 <prvTimerTask+0x1c8>
 8004c96:	bf00      	nop
 8004c98:	20000728 	.word	0x20000728
 8004c9c:	2000081c 	.word	0x2000081c
 8004ca0:	e000ed04 	.word	0xe000ed04
 8004ca4:	200006fc 	.word	0x200006fc
 8004ca8:	20000820 	.word	0x20000820

08004cac <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cac:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cb0:	b983      	cbnz	r3, 8004cd4 <osKernelInitialize+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb6:	b96b      	cbnz	r3, 8004cd4 <osKernelInitialize+0x28>
 8004cb8:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <osKernelInitialize+0x30>)
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	2802      	cmp	r0, #2
 8004cbe:	d003      	beq.n	8004cc8 <osKernelInitialize+0x1c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cc0:	b928      	cbnz	r0, 8004cce <osKernelInitialize+0x22>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cc8:	f3ef 8311 	mrs	r3, BASEPRI
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ccc:	b913      	cbnz	r3, 8004cd4 <osKernelInitialize+0x28>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8004cce:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8004cd2:	4770      	bx	lr

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 8004cd4:	f06f 0005 	mvn.w	r0, #5
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000e84 	.word	0x20000e84

08004ce0 <osKernelStart>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce0:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ce4:	b9c3      	cbnz	r3, 8004d18 <osKernelStart+0x38>
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ce6:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce8:	f3ef 8410 	mrs	r4, PRIMASK
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cec:	b98c      	cbnz	r4, 8004d12 <osKernelStart+0x32>
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <osKernelStart+0x40>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	2a02      	cmp	r2, #2
 8004cf4:	d007      	beq.n	8004d06 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004cf6:	2a01      	cmp	r2, #1
 8004cf8:	d108      	bne.n	8004d0c <osKernelStart+0x2c>
      KernelState = osKernelRunning;
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004cfe:	f7ff fad1 	bl	80042a4 <vTaskStartScheduler>
      stat = osOK;
 8004d02:	4620      	mov	r0, r4
 8004d04:	bd10      	pop	{r4, pc}
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d06:	f3ef 8311 	mrs	r3, BASEPRI
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d0a:	b913      	cbnz	r3, 8004d12 <osKernelStart+0x32>
    if (KernelState == osKernelReady) {
      KernelState = osKernelRunning;
      vTaskStartScheduler();
      stat = osOK;
    } else {
      stat = osError;
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8004d10:	bd10      	pop	{r4, pc}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 8004d12:	f06f 0005 	mvn.w	r0, #5
 8004d16:	bd10      	pop	{r4, pc}
 8004d18:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000e84 	.word	0x20000e84

08004d24 <osKernelGetTickFreq>:
  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}
 8004d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop

08004d2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d30:	2400      	movs	r4, #0
 8004d32:	9405      	str	r4, [sp, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d34:	f3ef 8505 	mrs	r5, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004d38:	bb65      	cbnz	r5, 8004d94 <osThreadNew+0x68>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d12f      	bne.n	8004da2 <osThreadNew+0x76>
 8004d42:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <osThreadNew+0xb8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d027      	beq.n	8004d9a <osThreadNew+0x6e>
 8004d4a:	b350      	cbz	r0, 8004da2 <osThreadNew+0x76>
 8004d4c:	460b      	mov	r3, r1
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f88d 1013 	strb.w	r1, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8004d54:	2a00      	cmp	r2, #0
 8004d56:	d02c      	beq.n	8004db2 <osThreadNew+0x86>
      if (attr->name != NULL) {
 8004d58:	6811      	ldr	r1, [r2, #0]
 8004d5a:	2900      	cmp	r1, #0
 8004d5c:	d036      	beq.n	8004dcc <osThreadNew+0xa0>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004d5e:	6994      	ldr	r4, [r2, #24]
 8004d60:	b314      	cbz	r4, 8004da8 <osThreadNew+0x7c>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d62:	1e65      	subs	r5, r4, #1
 8004d64:	2d37      	cmp	r5, #55	; 0x37
 8004d66:	d82f      	bhi.n	8004dc8 <osThreadNew+0x9c>
 8004d68:	6855      	ldr	r5, [r2, #4]
 8004d6a:	07ed      	lsls	r5, r5, #31
 8004d6c:	d42c      	bmi.n	8004dc8 <osThreadNew+0x9c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004d6e:	6955      	ldr	r5, [r2, #20]
 8004d70:	b1e5      	cbz	r5, 8004dac <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d72:	ea4f 0e95 	mov.w	lr, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d76:	6896      	ldr	r6, [r2, #8]
 8004d78:	b35e      	cbz	r6, 8004dd2 <osThreadNew+0xa6>
 8004d7a:	68d7      	ldr	r7, [r2, #12]
 8004d7c:	2f5b      	cmp	r7, #91	; 0x5b
 8004d7e:	d910      	bls.n	8004da2 <osThreadNew+0x76>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d80:	6912      	ldr	r2, [r2, #16]
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d82:	b172      	cbz	r2, 8004da2 <osThreadNew+0x76>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d84:	b16d      	cbz	r5, 8004da2 <osThreadNew+0x76>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d86:	9201      	str	r2, [sp, #4]
 8004d88:	9602      	str	r6, [sp, #8]
 8004d8a:	9400      	str	r4, [sp, #0]
 8004d8c:	4672      	mov	r2, lr
 8004d8e:	f7ff f9b9 	bl	8004104 <xTaskCreateStatic>
 8004d92:	e000      	b.n	8004d96 <osThreadNew+0x6a>
 8004d94:	4620      	mov	r0, r4
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8004d96:	b007      	add	sp, #28
 8004d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d9a:	f3ef 8311 	mrs	r3, BASEPRI
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0d3      	beq.n	8004d4a <osThreadNew+0x1e>
 8004da2:	9805      	ldr	r0, [sp, #20]
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8004da4:	b007      	add	sp, #28
 8004da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;
 8004da8:	2418      	movs	r4, #24
 8004daa:	e7dd      	b.n	8004d68 <osThreadNew+0x3c>
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 8004dac:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8004db0:	e7e1      	b.n	8004d76 <osThreadNew+0x4a>
 8004db2:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8004db4:	2418      	movs	r4, #24

    empty = '\0';
    name  = &empty;
 8004db6:	f10d 0113 	add.w	r1, sp, #19
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004dba:	ad05      	add	r5, sp, #20
 8004dbc:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004dc0:	f7ff f9d8 	bl	8004174 <xTaskCreate>
 8004dc4:	2801      	cmp	r0, #1
 8004dc6:	d0ec      	beq.n	8004da2 <osThreadNew+0x76>
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
        return (NULL);
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e7e4      	b.n	8004d96 <osThreadNew+0x6a>
  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8004dcc:	f10d 0113 	add.w	r1, sp, #19
 8004dd0:	e7c5      	b.n	8004d5e <osThreadNew+0x32>
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004dd2:	68d5      	ldr	r5, [r2, #12]
 8004dd4:	2d00      	cmp	r5, #0
 8004dd6:	d1e4      	bne.n	8004da2 <osThreadNew+0x76>
    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8004dd8:	6912      	ldr	r2, [r2, #16]
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	d1e1      	bne.n	8004da2 <osThreadNew+0x76>
 8004dde:	fa1f f28e 	uxth.w	r2, lr
 8004de2:	e7ea      	b.n	8004dba <osThreadNew+0x8e>
 8004de4:	20000e84 	.word	0x20000e84

08004de8 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 8004de8:	b508      	push	{r3, lr}
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8004dea:	2000      	movs	r0, #0
 8004dec:	f7ff f9f2 	bl	80041d4 <vTaskDelete>
 8004df0:	e7fe      	b.n	8004df0 <osThreadExit+0x8>
 8004df2:	bf00      	nop

08004df4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004df4:	b508      	push	{r3, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dfa:	b97b      	cbnz	r3, 8004e1c <osDelay+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004e00:	b963      	cbnz	r3, 8004e1c <osDelay+0x28>
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <osDelay+0x30>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d004      	beq.n	8004e14 <osDelay+0x20>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8004e0a:	b110      	cbz	r0, 8004e12 <osDelay+0x1e>
      vTaskDelay(ticks);
 8004e0c:	f7ff fbc0 	bl	8004590 <vTaskDelay>

  if (IS_IRQ()) {
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 8004e10:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004e12:	bd08      	pop	{r3, pc}
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e14:	f3ef 8311 	mrs	r3, BASEPRI
}

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f6      	beq.n	8004e0a <osDelay+0x16>
    stat = osErrorISR;
 8004e1c:	f06f 0005 	mvn.w	r0, #5
 8004e20:	bd08      	pop	{r3, pc}
 8004e22:	bf00      	nop
 8004e24:	20000e84 	.word	0x20000e84

08004e28 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <vApplicationGetIdleTaskMemory+0x14>)
 8004e2a:	6003      	str	r3, [r0, #0]

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e2c:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e2e:	2380      	movs	r3, #128	; 0x80
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e30:	4c03      	ldr	r4, [pc, #12]	; (8004e40 <vApplicationGetIdleTaskMemory+0x18>)
 8004e32:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e34:	6013      	str	r3, [r2, #0]
}
 8004e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000a28 	.word	0x20000a28
 8004e40:	20000828 	.word	0x20000828

08004e44 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <vApplicationGetTimerTaskMemory+0x18>)
 8004e46:	6003      	str	r3, [r0, #0]

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e48:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e4e:	4c04      	ldr	r4, [pc, #16]	; (8004e60 <vApplicationGetTimerTaskMemory+0x1c>)
 8004e50:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000e88 	.word	0x20000e88
 8004e60:	20000a84 	.word	0x20000a84

08004e64 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e64:	4b11      	ldr	r3, [pc, #68]	; (8004eac <prvInsertBlockIntoFreeList+0x48>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4282      	cmp	r2, r0
 8004e6a:	d201      	bcs.n	8004e70 <prvInsertBlockIntoFreeList+0xc>
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	e7fa      	b.n	8004e66 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e70:	6859      	ldr	r1, [r3, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e72:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e74:	185c      	adds	r4, r3, r1
 8004e76:	42a0      	cmp	r0, r4
 8004e78:	d103      	bne.n	8004e82 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e7a:	6840      	ldr	r0, [r0, #4]
 8004e7c:	4401      	add	r1, r0
 8004e7e:	6059      	str	r1, [r3, #4]
 8004e80:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e82:	6841      	ldr	r1, [r0, #4]
 8004e84:	1844      	adds	r4, r0, r1
 8004e86:	42a2      	cmp	r2, r4
 8004e88:	d108      	bne.n	8004e9c <prvInsertBlockIntoFreeList+0x38>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e8a:	4c09      	ldr	r4, [pc, #36]	; (8004eb0 <prvInsertBlockIntoFreeList+0x4c>)
 8004e8c:	6824      	ldr	r4, [r4, #0]
 8004e8e:	42a2      	cmp	r2, r4
 8004e90:	d004      	beq.n	8004e9c <prvInsertBlockIntoFreeList+0x38>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e92:	ca14      	ldmia	r2, {r2, r4}
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e94:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e96:	6002      	str	r2, [r0, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e98:	6041      	str	r1, [r0, #4]
 8004e9a:	e000      	b.n	8004e9e <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e9c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e9e:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ea0:	bf18      	it	ne
 8004ea2:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20000eec 	.word	0x20000eec
 8004eb0:	20000ee8 	.word	0x20000ee8

08004eb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8004eba:	f7ff fa35 	bl	8004328 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ebe:	4842      	ldr	r0, [pc, #264]	; (8004fc8 <pvPortMalloc+0x114>)
 8004ec0:	6803      	ldr	r3, [r0, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d05a      	beq.n	8004f7c <pvPortMalloc+0xc8>
 8004ec6:	4b41      	ldr	r3, [pc, #260]	; (8004fcc <pvPortMalloc+0x118>)
 8004ec8:	681d      	ldr	r5, [r3, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004eca:	422c      	tst	r4, r5
 8004ecc:	d150      	bne.n	8004f70 <pvPortMalloc+0xbc>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ece:	2c00      	cmp	r4, #0
 8004ed0:	d04e      	beq.n	8004f70 <pvPortMalloc+0xbc>
			{
				xWantedSize += xHeapStructSize;
 8004ed2:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ed6:	0759      	lsls	r1, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ed8:	bf1c      	itt	ne
 8004eda:	f023 0307 	bicne.w	r3, r3, #7
 8004ede:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d045      	beq.n	8004f70 <pvPortMalloc+0xbc>
 8004ee4:	4f3a      	ldr	r7, [pc, #232]	; (8004fd0 <pvPortMalloc+0x11c>)
 8004ee6:	683e      	ldr	r6, [r7, #0]
 8004ee8:	42b3      	cmp	r3, r6
 8004eea:	d841      	bhi.n	8004f70 <pvPortMalloc+0xbc>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8004eec:	4939      	ldr	r1, [pc, #228]	; (8004fd4 <pvPortMalloc+0x120>)
 8004eee:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ef0:	e006      	b.n	8004f00 <pvPortMalloc+0x4c>
 8004ef2:	f8d4 e000 	ldr.w	lr, [r4]
 8004ef6:	f1be 0f00 	cmp.w	lr, #0
 8004efa:	d004      	beq.n	8004f06 <pvPortMalloc+0x52>
 8004efc:	4621      	mov	r1, r4
 8004efe:	4674      	mov	r4, lr
 8004f00:	6862      	ldr	r2, [r4, #4]
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d8f5      	bhi.n	8004ef2 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f06:	6800      	ldr	r0, [r0, #0]
 8004f08:	4284      	cmp	r4, r0
 8004f0a:	d031      	beq.n	8004f70 <pvPortMalloc+0xbc>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f0c:	6820      	ldr	r0, [r4, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f0e:	f8d1 8000 	ldr.w	r8, [r1]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f12:	6008      	str	r0, [r1, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f14:	1ad1      	subs	r1, r2, r3
 8004f16:	2910      	cmp	r1, #16
 8004f18:	d910      	bls.n	8004f3c <pvPortMalloc+0x88>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f1a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f1c:	0742      	lsls	r2, r0, #29
 8004f1e:	d008      	beq.n	8004f32 <pvPortMalloc+0x7e>
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	e7fe      	b.n	8004f30 <pvPortMalloc+0x7c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f32:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f34:	6063      	str	r3, [r4, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f36:	f7ff ff95 	bl	8004e64 <prvInsertBlockIntoFreeList>
 8004f3a:	6862      	ldr	r2, [r4, #4]
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f3c:	4826      	ldr	r0, [pc, #152]	; (8004fd8 <pvPortMalloc+0x124>)
 8004f3e:	6801      	ldr	r1, [r0, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f40:	1ab3      	subs	r3, r6, r2

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f42:	428b      	cmp	r3, r1
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f44:	bf38      	it	cc
 8004f46:	6003      	strcc	r3, [r0, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f48:	432a      	orrs	r2, r5
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f4a:	603b      	str	r3, [r7, #0]
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6023      	str	r3, [r4, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f50:	6062      	str	r2, [r4, #4]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f52:	f108 0508 	add.w	r5, r8, #8
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f56:	f7ff fa97 	bl	8004488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f5a:	076b      	lsls	r3, r5, #29
 8004f5c:	d00b      	beq.n	8004f76 <pvPortMalloc+0xc2>
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	e7fe      	b.n	8004f6e <pvPortMalloc+0xba>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f70:	f7ff fa8a 	bl	8004488 <xTaskResumeAll>
 8004f74:	2500      	movs	r5, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8004f76:	4628      	mov	r0, r5
 8004f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f7c:	4a17      	ldr	r2, [pc, #92]	; (8004fdc <pvPortMalloc+0x128>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f7e:	0755      	lsls	r5, r2, #29
 8004f80:	d01f      	beq.n	8004fc2 <pvPortMalloc+0x10e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f82:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f84:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f88:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
 8004f8c:	1a5b      	subs	r3, r3, r1
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f8e:	460a      	mov	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f90:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004f92:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f94:	f023 0307 	bic.w	r3, r3, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f98:	4e0d      	ldr	r6, [pc, #52]	; (8004fd0 <pvPortMalloc+0x11c>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f9a:	4d0e      	ldr	r5, [pc, #56]	; (8004fd4 <pvPortMalloc+0x120>)
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f9c:	f8df e038 	ldr.w	lr, [pc, #56]	; 8004fd8 <pvPortMalloc+0x124>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fa0:	4f0a      	ldr	r7, [pc, #40]	; (8004fcc <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8004fa2:	6003      	str	r3, [r0, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fa4:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fa6:	6031      	str	r1, [r6, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8004fa8:	2600      	movs	r6, #0
 8004faa:	e885 0044 	stmia.w	r5, {r2, r6}
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fae:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8004fb2:	605e      	str	r6, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fb4:	601e      	str	r6, [r3, #0]
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fb6:	f8ce 1000 	str.w	r1, [lr]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fba:	603d      	str	r5, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fbc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e783      	b.n	8004eca <pvPortMalloc+0x16>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	e7e3      	b.n	8004f90 <pvPortMalloc+0xdc>
 8004fc8:	20000ee8 	.word	0x20000ee8
 8004fcc:	20008ef4 	.word	0x20008ef4
 8004fd0:	20000ee4 	.word	0x20000ee4
 8004fd4:	20000eec 	.word	0x20000eec
 8004fd8:	20008ef8 	.word	0x20008ef8
 8004fdc:	20000ef4 	.word	0x20000ef4

08004fe0 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fe0:	b1d0      	cbz	r0, 8005018 <vPortFree+0x38>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fe2:	4a19      	ldr	r2, [pc, #100]	; (8005048 <vPortFree+0x68>)
 8004fe4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	4213      	tst	r3, r2
 8004fec:	d108      	bne.n	8005000 <vPortFree+0x20>
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	e7fe      	b.n	8004ffe <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005000:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005004:	b149      	cbz	r1, 800501a <vPortFree+0x3a>
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	e7fe      	b.n	8005016 <vPortFree+0x36>
 8005018:	4770      	bx	lr
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800501a:	ea23 0302 	bic.w	r3, r3, r2
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800501e:	b510      	push	{r4, lr}
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005020:	f840 3c04 	str.w	r3, [r0, #-4]
 8005024:	4604      	mov	r4, r0

				vTaskSuspendAll();
 8005026:	f7ff f97f 	bl	8004328 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <vPortFree+0x6c>)
 800502c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005030:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005032:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005036:	440b      	add	r3, r1
 8005038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800503a:	f7ff ff13 	bl	8004e64 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800503e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8005042:	f7ff ba21 	b.w	8004488 <xTaskResumeAll>
 8005046:	bf00      	nop
 8005048:	20008ef4 	.word	0x20008ef4
 800504c:	20000ee4 	.word	0x20000ee4

08005050 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005050:	4b0e      	ldr	r3, [pc, #56]	; (800508c <prvTaskExitError+0x3c>)
 8005052:	681b      	ldr	r3, [r3, #0]
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005054:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005056:	2200      	movs	r2, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005058:	3301      	adds	r3, #1
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800505a:	9201      	str	r2, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800505c:	d008      	beq.n	8005070 <prvTaskExitError+0x20>
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	e7fe      	b.n	800506e <prvTaskExitError+0x1e>
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005080:	9b01      	ldr	r3, [sp, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0fc      	beq.n	8005080 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005086:	b002      	add	sp, #8
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	2000006c 	.word	0x2000006c

08005090 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005090:	4808      	ldr	r0, [pc, #32]	; (80050b4 <prvPortStartFirstTask+0x24>)
 8005092:	6800      	ldr	r0, [r0, #0]
 8005094:	6800      	ldr	r0, [r0, #0]
 8005096:	f380 8808 	msr	MSP, r0
 800509a:	f04f 0000 	mov.w	r0, #0
 800509e:	f380 8814 	msr	CONTROL, r0
 80050a2:	b662      	cpsie	i
 80050a4:	b661      	cpsie	f
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	df00      	svc	0
 80050b0:	bf00      	nop
 80050b2:	0000      	.short	0x0000
 80050b4:	e000ed08 	.word	0xe000ed08

080050b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050c8 <vPortEnableVFP+0x10>
 80050bc:	6801      	ldr	r1, [r0, #0]
 80050be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050c2:	6001      	str	r1, [r0, #0]
 80050c4:	4770      	bx	lr
 80050c6:	0000      	.short	0x0000
 80050c8:	e000ed88 	.word	0xe000ed88

080050cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050cc:	b430      	push	{r4, r5}
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050ce:	f021 0101 	bic.w	r1, r1, #1

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050d2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050d6:	4c07      	ldr	r4, [pc, #28]	; (80050f4 <pxPortInitialiseStack+0x28>)
 80050d8:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050dc:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050e0:	f840 2c20 	str.w	r2, [r0, #-32]

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050e4:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050e8:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80050ec:	bc30      	pop	{r4, r5}
 80050ee:	3844      	subs	r0, #68	; 0x44
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	08005051 	.word	0x08005051
	...

08005100 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <pxCurrentTCBConst2>)
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6808      	ldr	r0, [r1, #0]
 8005106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	f380 8809 	msr	PSP, r0
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8811 	msr	BASEPRI, r0
 800511a:	4770      	bx	lr
 800511c:	f3af 8000 	nop.w

08005120 <pxCurrentTCBConst2>:
 8005120:	200006a0 	.word	0x200006a0

08005124 <vPortEnterCritical>:
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005134:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <vPortEnterCritical+0x3c>)
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800513a:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800513c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800513e:	d000      	beq.n	8005142 <vPortEnterCritical+0x1e>
 8005140:	4770      	bx	lr
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <vPortEnterCritical+0x40>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f013 0fff 	tst.w	r3, #255	; 0xff
 800514a:	d0f9      	beq.n	8005140 <vPortEnterCritical+0x1c>
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	e7fe      	b.n	800515c <vPortEnterCritical+0x38>
 800515e:	bf00      	nop
 8005160:	2000006c 	.word	0x2000006c
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8005168:	4a08      	ldr	r2, [pc, #32]	; (800518c <vPortExitCritical+0x24>)
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	b943      	cbnz	r3, 8005180 <vPortExitCritical+0x18>
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	e7fe      	b.n	800517e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005180:	3b01      	subs	r3, #1
 8005182:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005184:	b90b      	cbnz	r3, 800518a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	4770      	bx	lr
 800518c:	2000006c 	.word	0x2000006c

08005190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005190:	f3ef 8009 	mrs	r0, PSP
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <pxCurrentTCBConst>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f01e 0f10 	tst.w	lr, #16
 80051a0:	bf08      	it	eq
 80051a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	6010      	str	r0, [r2, #0]
 80051ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051b4:	f380 8811 	msr	BASEPRI, r0
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f7ff fa0c 	bl	80045dc <vTaskSwitchContext>
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f380 8811 	msr	BASEPRI, r0
 80051cc:	bc09      	pop	{r0, r3}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d6:	f01e 0f10 	tst.w	lr, #16
 80051da:	bf08      	it	eq
 80051dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051e0:	f380 8809 	msr	PSP, r0
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst>:
 80051f0:	200006a0 	.word	0x200006a0

080051f4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005206:	f7ff f89d 	bl	8004344 <xTaskIncrementTick>
 800520a:	b118      	cbz	r0, 8005214 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <SysTick_Handler+0x28>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005214:	2300      	movs	r3, #0
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	bd08      	pop	{r3, pc}
 800521c:	e000ed04 	.word	0xe000ed04

08005220 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005220:	b430      	push	{r4, r5}
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005222:	4a09      	ldr	r2, [pc, #36]	; (8005248 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005224:	4d09      	ldr	r5, [pc, #36]	; (800524c <vPortSetupTimerInterrupt+0x2c>)

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005226:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <vPortSetupTimerInterrupt+0x30>)
 8005228:	4c0a      	ldr	r4, [pc, #40]	; (8005254 <vPortSetupTimerInterrupt+0x34>)
 800522a:	480b      	ldr	r0, [pc, #44]	; (8005258 <vPortSetupTimerInterrupt+0x38>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800522c:	2100      	movs	r1, #0
 800522e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005230:	6029      	str	r1, [r5, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	fba4 1303 	umull	r1, r3, r4, r3
 8005238:	099b      	lsrs	r3, r3, #6
 800523a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800523c:	2107      	movs	r1, #7
	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800523e:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
}
 8005240:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005242:	6011      	str	r1, [r2, #0]
}
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	e000e010 	.word	0xe000e010
 800524c:	e000e018 	.word	0xe000e018
 8005250:	20000068 	.word	0x20000068
 8005254:	10624dd3 	.word	0x10624dd3
 8005258:	e000e014 	.word	0xe000e014

0800525c <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800525c:	4b3b      	ldr	r3, [pc, #236]	; (800534c <xPortStartScheduler+0xf0>)
 800525e:	4a3c      	ldr	r2, [pc, #240]	; (8005350 <xPortStartScheduler+0xf4>)
 8005260:	6819      	ldr	r1, [r3, #0]
 8005262:	4291      	cmp	r1, r2
 8005264:	d039      	beq.n	80052da <xPortStartScheduler+0x7e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b3a      	ldr	r3, [pc, #232]	; (8005354 <xPortStartScheduler+0xf8>)
 800526a:	429a      	cmp	r2, r3
 800526c:	d03e      	beq.n	80052ec <xPortStartScheduler+0x90>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800526e:	b510      	push	{r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005270:	4b39      	ldr	r3, [pc, #228]	; (8005358 <xPortStartScheduler+0xfc>)
		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005272:	493a      	ldr	r1, [pc, #232]	; (800535c <xPortStartScheduler+0x100>)
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005274:	781a      	ldrb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005276:	4c3a      	ldr	r4, [pc, #232]	; (8005360 <xPortStartScheduler+0x104>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005278:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800527a:	b2d2      	uxtb	r2, r2

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800527c:	20ff      	movs	r0, #255	; 0xff
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800527e:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005280:	7018      	strb	r0, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800528a:	f89d 3003 	ldrb.w	r3, [sp, #3]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800528e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005292:	2007      	movs	r0, #7

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005294:	f003 0350 	and.w	r3, r3, #80	; 0x50

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005298:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800529a:	0610      	lsls	r0, r2, #24

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800529c:	7023      	strb	r3, [r4, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800529e:	bf48      	it	mi
 80052a0:	2306      	movmi	r3, #6
 80052a2:	d401      	bmi.n	80052a8 <xPortStartScheduler+0x4c>
 80052a4:	e010      	b.n	80052c8 <xPortStartScheduler+0x6c>
 80052a6:	4603      	mov	r3, r0
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80052ac:	0052      	lsls	r2, r2, #1
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	f88d 2003 	strb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80052b8:	0612      	lsls	r2, r2, #24
 80052ba:	f103 30ff 	add.w	r0, r3, #4294967295
 80052be:	d4f2      	bmi.n	80052a6 <xPortStartScheduler+0x4a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	600b      	str	r3, [r1, #0]
 80052c4:	4c25      	ldr	r4, [pc, #148]	; (800535c <xPortStartScheduler+0x100>)
 80052c6:	d01a      	beq.n	80052fe <xPortStartScheduler+0xa2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	e7fe      	b.n	80052d8 <xPortStartScheduler+0x7c>
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	e7fe      	b.n	80052ea <xPortStartScheduler+0x8e>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	e7fe      	b.n	80052fc <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052fe:	9901      	ldr	r1, [sp, #4]
 8005300:	4815      	ldr	r0, [pc, #84]	; (8005358 <xPortStartScheduler+0xfc>)
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005302:	4a18      	ldr	r2, [pc, #96]	; (8005364 <xPortStartScheduler+0x108>)
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005304:	021b      	lsls	r3, r3, #8

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005306:	b2c9      	uxtb	r1, r1
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005308:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800530c:	6023      	str	r3, [r4, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800530e:	7001      	strb	r1, [r0, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005310:	6813      	ldr	r3, [r2, #0]
 8005312:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005318:	6813      	ldr	r3, [r2, #0]
 800531a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800531e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005320:	f7ff ff7e 	bl	8005220 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005324:	4b10      	ldr	r3, [pc, #64]	; (8005368 <xPortStartScheduler+0x10c>)
 8005326:	2400      	movs	r4, #0
 8005328:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800532a:	f7ff fec5 	bl	80050b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800532e:	4a0f      	ldr	r2, [pc, #60]	; (800536c <xPortStartScheduler+0x110>)
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005338:	f7ff feaa 	bl	8005090 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800533c:	f7ff f94e 	bl	80045dc <vTaskSwitchContext>
	prvTaskExitError();
 8005340:	f7ff fe86 	bl	8005050 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
 8005344:	4620      	mov	r0, r4
 8005346:	b002      	add	sp, #8
 8005348:	bd10      	pop	{r4, pc}
 800534a:	bf00      	nop
 800534c:	e000ed00 	.word	0xe000ed00
 8005350:	410fc271 	.word	0x410fc271
 8005354:	410fc270 	.word	0x410fc270
 8005358:	e000e400 	.word	0xe000e400
 800535c:	20008f00 	.word	0x20008f00
 8005360:	20008efc 	.word	0x20008efc
 8005364:	e000ed20 	.word	0xe000ed20
 8005368:	2000006c 	.word	0x2000006c
 800536c:	e000ef34 	.word	0xe000ef34

08005370 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005370:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005374:	2b0f      	cmp	r3, #15
 8005376:	d90e      	bls.n	8005396 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005378:	4910      	ldr	r1, [pc, #64]	; (80053bc <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800537a:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <vPortValidateInterruptPriority+0x50>)

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800537c:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d908      	bls.n	8005396 <vPortValidateInterruptPriority+0x26>
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	e7fe      	b.n	8005394 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <vPortValidateInterruptPriority+0x54>)
 8005398:	4a0b      	ldr	r2, [pc, #44]	; (80053c8 <vPortValidateInterruptPriority+0x58>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d908      	bls.n	80053b8 <vPortValidateInterruptPriority+0x48>
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	e7fe      	b.n	80053b6 <vPortValidateInterruptPriority+0x46>
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	e000e3f0 	.word	0xe000e3f0
 80053c0:	20008efc 	.word	0x20008efc
 80053c4:	e000ed0c 	.word	0xe000ed0c
 80053c8:	20008f00 	.word	0x20008f00

080053cc <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80053cc:	b188      	cbz	r0, 80053f2 <USBD_Init+0x26>
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053ce:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80053d0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80053d4:	b113      	cbz	r3, 80053dc <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80053dc:	b109      	cbz	r1, 80053e2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80053de:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80053e2:	2301      	movs	r3, #1
  pdev->id = id;
 80053e4:	7002      	strb	r2, [r0, #0]
  {
    pdev->pDesc = pdesc;
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80053e6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80053ea:	f7fb fb7d 	bl	8000ae8 <USBD_LL_Init>

  return USBD_OK;
 80053ee:	2000      	movs	r0, #0
 80053f0:	bd08      	pop	{r3, pc}
  if(pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80053f2:	2002      	movs	r0, #2
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop

080053f8 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80053f8:	b119      	cbz	r1, 8005402 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80053fa:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80053fe:	2000      	movs	r0, #0
 8005400:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005402:	2002      	movs	r0, #2
  }

  return status;
}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop

08005408 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005408:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800540a:	f7fb fb9f 	bl	8000b4c <USBD_LL_Start>

  return USBD_OK;
}
 800540e:	2000      	movs	r0, #0
 8005410:	bd08      	pop	{r3, pc}
 8005412:	bf00      	nop

08005414 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005414:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8005416:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800541a:	b113      	cbz	r3, 8005422 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4798      	blx	r3
 8005420:	b108      	cbz	r0, 8005426 <USBD_SetClassConfig+0x12>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005422:	2002      	movs	r0, #2
 8005424:	bd08      	pop	{r3, pc}
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005426:	bd08      	pop	{r3, pc}

08005428 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005428:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800542a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4798      	blx	r3
  return USBD_OK;
}
 8005432:	2000      	movs	r0, #0
 8005434:	bd08      	pop	{r3, pc}
 8005436:	bf00      	nop

08005438 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800543c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8005440:	4628      	mov	r0, r5
 8005442:	f000 fb75 	bl	8005b30 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005446:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
{
  USBD_ParseSetupRequest(&pdev->request, psetup);

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 800544a:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 800544e:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);

  pdev->ep0_state = USBD_EP0_SETUP;
 8005452:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005454:	f001 031f 	and.w	r3, r1, #31
 8005458:	4293      	cmp	r3, r2
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);

  pdev->ep0_state = USBD_EP0_SETUP;
 800545a:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800545e:	d015      	beq.n	800548c <USBD_LL_SetupStage+0x54>
 8005460:	d30e      	bcc.n	8005480 <USBD_LL_SetupStage+0x48>
 8005462:	2b02      	cmp	r3, #2
 8005464:	d006      	beq.n	8005474 <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005466:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800546a:	4620      	mov	r0, r4
 800546c:	f7fb fb9a 	bl	8000ba4 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8005470:	2000      	movs	r0, #0
 8005472:	bd38      	pop	{r3, r4, r5, pc}
  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
    break;

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005474:	4629      	mov	r1, r5
 8005476:	4620      	mov	r0, r4
 8005478:	f000 fab2 	bl	80059e0 <USBD_StdEPReq>
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
    break;
  }

  return USBD_OK;
}
 800547c:	2000      	movs	r0, #0
 800547e:	bd38      	pop	{r3, r4, r5, pc}
  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8005480:	4629      	mov	r1, r5
 8005482:	4620      	mov	r0, r4
 8005484:	f000 f908 	bl	8005698 <USBD_StdDevReq>
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
    break;
  }

  return USBD_OK;
}
 8005488:	2000      	movs	r0, #0
 800548a:	bd38      	pop	{r3, r4, r5, pc}
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
    break;

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800548c:	4629      	mov	r1, r5
 800548e:	4620      	mov	r0, r4
 8005490:	f000 fa70 	bl	8005974 <USBD_StdItfReq>
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
    break;
  }

  return USBD_OK;
}
 8005494:	2000      	movs	r0, #0
 8005496:	bd38      	pop	{r3, r4, r5, pc}

08005498 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800549c:	b941      	cbnz	r1, 80054b0 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800549e:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d00e      	beq.n	80054c4 <USBD_LL_DataOutStage+0x2c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	460c      	mov	r4, r1
 80054aa:	d02a      	beq.n	8005502 <USBD_LL_DataOutStage+0x6a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80054ac:	2000      	movs	r0, #0
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
        USBD_LL_StallEP(pdev, 0U);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80054b0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	b11b      	cbz	r3, 80054c0 <USBD_LL_DataOutStage+0x28>
 80054b8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80054bc:	2a03      	cmp	r2, #3
 80054be:	d026      	beq.n	800550e <USBD_LL_DataOutStage+0x76>
    pdev->pClass->DataOut(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054c0:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	4616      	mov	r6, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
 80054c6:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 80054ca:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d90a      	bls.n	80054e8 <USBD_LL_DataOutStage+0x50>
      {
        pep->rem_length -=  pep->maxpacket;
 80054d2:	1ad2      	subs	r2, r2, r3

        USBD_CtlContinueRx (pdev,
 80054d4:	4293      	cmp	r3, r2

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 80054d6:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c

        USBD_CtlContinueRx (pdev,
 80054da:	4631      	mov	r1, r6
 80054dc:	bf8c      	ite	hi
 80054de:	b292      	uxthhi	r2, r2
 80054e0:	b29a      	uxthls	r2, r3
 80054e2:	f000 fb8f 	bl	8005c04 <USBD_CtlContinueRx>
 80054e6:	e7e1      	b.n	80054ac <USBD_LL_DataOutStage+0x14>
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80054e8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	b11b      	cbz	r3, 80054f8 <USBD_LL_DataOutStage+0x60>
 80054f0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80054f4:	2a03      	cmp	r2, #3
 80054f6:	d00d      	beq.n	8005514 <USBD_LL_DataOutStage+0x7c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev);
        }
        USBD_CtlSendStatus(pdev);
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 fb8b 	bl	8005c14 <USBD_CtlSendStatus>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80054fe:	2000      	movs	r0, #0
 8005500:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005502:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005506:	f7fb fb4d 	bl	8000ba4 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800550a:	4620      	mov	r0, r4
 800550c:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 800550e:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005510:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005512:	bd70      	pop	{r4, r5, r6, pc}
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005514:	4798      	blx	r3
 8005516:	e7ef      	b.n	80054f8 <USBD_LL_DataOutStage+0x60>

08005518 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800551c:	b971      	cbnz	r1, 800553c <USBD_LL_DataInStage+0x24>
 800551e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005520:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8005524:	2a02      	cmp	r2, #2
 8005526:	d01f      	beq.n	8005568 <USBD_LL_DataInStage+0x50>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005528:	f032 0304 	bics.w	r3, r2, #4
 800552c:	d010      	beq.n	8005550 <USBD_LL_DataInStage+0x38>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800552e:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8005532:	2b01      	cmp	r3, #1
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005534:	f04f 0000 	mov.w	r0, #0
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005538:	d013      	beq.n	8005562 <USBD_LL_DataInStage+0x4a>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800553c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	b11b      	cbz	r3, 800554c <USBD_LL_DataInStage+0x34>
 8005544:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005548:	2a03      	cmp	r2, #3
 800554a:	d041      	beq.n	80055d0 <USBD_LL_DataInStage+0xb8>
    pdev->pClass->DataIn(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800554c:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 800554e:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005550:	2180      	movs	r1, #128	; 0x80
 8005552:	f7fb fb27 	bl	8000ba4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005556:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800555a:	2b01      	cmp	r3, #1
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800555c:	f04f 0000 	mov.w	r0, #0
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005560:	d1eb      	bne.n	800553a <USBD_LL_DataInStage+0x22>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005562:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8005566:	bd70      	pop	{r4, r5, r6, pc}
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
 8005568:	6a06      	ldr	r6, [r0, #32]
 800556a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800556c:	4296      	cmp	r6, r2
 800556e:	d827      	bhi.n	80055c0 <USBD_LL_DataInStage+0xa8>
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005570:	69c3      	ldr	r3, [r0, #28]
 8005572:	fbb3 f5f2 	udiv	r5, r3, r2
 8005576:	fb02 3515 	mls	r5, r2, r5, r3
 800557a:	b98d      	cbnz	r5, 80055a0 <USBD_LL_DataInStage+0x88>
 800557c:	429a      	cmp	r2, r3
 800557e:	d80f      	bhi.n	80055a0 <USBD_LL_DataInStage+0x88>
           (pep->total_length >= pep->maxpacket) &&
 8005580:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8005584:	4293      	cmp	r3, r2
 8005586:	d20b      	bcs.n	80055a0 <USBD_LL_DataInStage+0x88>
           (pep->total_length < pdev->ep0_data_len))
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005588:	462a      	mov	r2, r5
 800558a:	f000 fb23 	bl	8005bd4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800558e:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005592:	462b      	mov	r3, r5
 8005594:	462a      	mov	r2, r5
 8005596:	4629      	mov	r1, r5
 8005598:	4620      	mov	r0, r4
 800559a:	f7fb fb4f 	bl	8000c3c <USBD_LL_PrepareReceive>
 800559e:	e7c6      	b.n	800552e <USBD_LL_DataInStage+0x16>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80055a0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	b11b      	cbz	r3, 80055b0 <USBD_LL_DataInStage+0x98>
 80055a8:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80055ac:	2a03      	cmp	r2, #3
 80055ae:	d012      	beq.n	80055d6 <USBD_LL_DataInStage+0xbe>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev);
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7fb faf6 	bl	8000ba4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 fb37 	bl	8005c2c <USBD_CtlReceiveStatus>
 80055be:	e7b6      	b.n	800552e <USBD_LL_DataInStage+0x16>

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -= pep->maxpacket;
 80055c0:	1ab2      	subs	r2, r6, r2
 80055c2:	460d      	mov	r5, r1
 80055c4:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80055c6:	4619      	mov	r1, r3
 80055c8:	b292      	uxth	r2, r2
 80055ca:	f000 fb03 	bl	8005bd4 <USBD_CtlContinueSendData>
 80055ce:	e7e0      	b.n	8005592 <USBD_LL_DataInStage+0x7a>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80055d0:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80055d2:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80055d4:	bd70      	pop	{r4, r5, r6, pc}
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055d6:	4620      	mov	r0, r4
 80055d8:	4798      	blx	r3
 80055da:	e7e9      	b.n	80055b0 <USBD_LL_DataInStage+0x98>

080055dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80055dc:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055de:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80055e0:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055e2:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80055e4:	461e      	mov	r6, r3
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055e6:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80055e8:	2501      	movs	r5, #1
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055ea:	f7fb fabd 	bl	8000b68 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055ee:	4633      	mov	r3, r6
 80055f0:	2180      	movs	r1, #128	; 0x80

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80055f2:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80055f6:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055fa:	4620      	mov	r0, r4
 80055fc:	2200      	movs	r2, #0
 80055fe:	f7fb fab3 	bl	8000b68 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8005602:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005606:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8005608:	2100      	movs	r1, #0

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800560a:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800560c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005610:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005614:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005616:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 800561a:	b123      	cbz	r3, 8005626 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800561c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005620:	4620      	mov	r0, r4
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005626:	2000      	movs	r0, #0
 8005628:	bd70      	pop	{r4, r5, r6, pc}
 800562a:	bf00      	nop

0800562c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800562c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800562e:	2000      	movs	r0, #0
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop

08005634 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005634:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005638:	f880 2275 	strb.w	r2, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800563c:	2304      	movs	r3, #4
 800563e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8005642:	2000      	movs	r0, #0
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop

08005648 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005648:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
  return USBD_OK;
}
 800564a:	2000      	movs	r0, #0
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 800564c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8005650:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop

08005658 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005658:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800565c:	2a03      	cmp	r2, #3
 800565e:	d001      	beq.n	8005664 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8005660:	2000      	movs	r0, #0
 8005662:	4770      	bx	lr
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005664:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
  {
    if(pdev->pClass->SOF != NULL)
 8005666:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	b103      	cbz	r3, 8005670 <USBD_LL_SOF+0x18>
    {
      pdev->pClass->SOF(pdev);
 800566e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8005670:	2000      	movs	r0, #0
 8005672:	bd08      	pop	{r3, pc}

08005674 <USBD_LL_IsoINIncomplete>:
 8005674:	2000      	movs	r0, #0
 8005676:	4770      	bx	lr

08005678 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005678:	2000      	movs	r0, #0
 800567a:	4770      	bx	lr

0800567c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800567c:	2000      	movs	r0, #0
 800567e:	4770      	bx	lr

08005680 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005680:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005682:	2101      	movs	r1, #1
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005684:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005688:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800568c:	6852      	ldr	r2, [r2, #4]
 800568e:	7901      	ldrb	r1, [r0, #4]
 8005690:	4790      	blx	r2

  return USBD_OK;
}
 8005692:	2000      	movs	r0, #0
 8005694:	bd08      	pop	{r3, pc}
 8005696:	bf00      	nop

08005698 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005698:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800569a:	780b      	ldrb	r3, [r1, #0]
 800569c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056a0:	2b20      	cmp	r3, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80056a2:	b083      	sub	sp, #12
 80056a4:	460c      	mov	r4, r1
 80056a6:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056a8:	d016      	beq.n	80056d8 <USBD_StdDevReq+0x40>
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d014      	beq.n	80056d8 <USBD_StdDevReq+0x40>
 80056ae:	b14b      	cbz	r3, 80056c4 <USBD_StdDevReq+0x2c>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	f7fb fa77 	bl	8000ba4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80056b6:	4628      	mov	r0, r5
 80056b8:	2100      	movs	r1, #0
 80056ba:	f7fb fa73 	bl	8000ba4 <USBD_LL_StallEP>
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
}
 80056be:	2000      	movs	r0, #0
 80056c0:	b003      	add	sp, #12
 80056c2:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
    break;

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80056c4:	784b      	ldrb	r3, [r1, #1]
 80056c6:	2b09      	cmp	r3, #9
 80056c8:	d819      	bhi.n	80056fe <USBD_StdDevReq+0x66>
 80056ca:	e8df f003 	tbb	[pc, r3]
 80056ce:	5a43      	.short	0x5a43
 80056d0:	6a186618 	.word	0x6a186618
 80056d4:	239d1886 	.word	0x239d1886

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80056d8:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 80056dc:	4621      	mov	r1, r4
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4628      	mov	r0, r5
 80056e2:	4798      	blx	r3
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
}
 80056e4:	2000      	movs	r0, #0
 80056e6:	b003      	add	sp, #12
 80056e8:	bd30      	pop	{r4, r5, pc}
  else
  {
    switch (pdev->dev_state)
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80056ea:	b379      	cbz	r1, 800574c <USBD_StdDevReq+0xb4>
      {
        pdev->dev_config = cfgidx;
 80056ec:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80056ee:	2303      	movs	r3, #3
    switch (pdev->dev_state)
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
      {
        pdev->dev_config = cfgidx;
 80056f0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80056f2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80056f6:	f7ff fe8d 	bl	8005414 <USBD_SetClassConfig>
 80056fa:	2802      	cmp	r0, #2
 80056fc:	d126      	bne.n	800574c <USBD_StdDevReq+0xb4>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	4628      	mov	r0, r5
 8005702:	f7fb fa4f 	bl	8000ba4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005706:	4628      	mov	r0, r5
 8005708:	2100      	movs	r1, #0
 800570a:	f7fb fa4b 	bl	8000ba4 <USBD_LL_StallEP>
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
}
 800570e:	2000      	movs	r0, #0
 8005710:	b003      	add	sp, #12
 8005712:	bd30      	pop	{r4, r5, pc}
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005714:	7889      	ldrb	r1, [r1, #2]
 8005716:	4c96      	ldr	r4, [pc, #600]	; (8005970 <USBD_StdDevReq+0x2d8>)

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005718:	2901      	cmp	r1, #1
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800571a:	7021      	strb	r1, [r4, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800571c:	d8ef      	bhi.n	80056fe <USBD_StdDevReq+0x66>
  {
    USBD_CtlError(pdev, req);
  }
  else
  {
    switch (pdev->dev_state)
 800571e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005722:	2b02      	cmp	r3, #2
 8005724:	d0e1      	beq.n	80056ea <USBD_StdDevReq+0x52>
 8005726:	2b03      	cmp	r3, #3
 8005728:	f040 8102 	bne.w	8005930 <USBD_StdDevReq+0x298>
        USBD_CtlSendStatus(pdev);
      }
      break;

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800572c:	2900      	cmp	r1, #0
 800572e:	f000 8118 	beq.w	8005962 <USBD_StdDevReq+0x2ca>
        pdev->dev_state = USBD_STATE_ADDRESSED;
        pdev->dev_config = cfgidx;
        USBD_ClrClassConfig(pdev, cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else if (cfgidx != pdev->dev_config)
 8005732:	6841      	ldr	r1, [r0, #4]
 8005734:	2901      	cmp	r1, #1
 8005736:	d009      	beq.n	800574c <USBD_StdDevReq+0xb4>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005738:	b2c9      	uxtb	r1, r1
 800573a:	f7ff fe75 	bl	8005428 <USBD_ClrClassConfig>

        /* set new configuration */
        pdev->dev_config = cfgidx;
 800573e:	7821      	ldrb	r1, [r4, #0]
 8005740:	6069      	str	r1, [r5, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005742:	4628      	mov	r0, r5
 8005744:	f7ff fe66 	bl	8005414 <USBD_SetClassConfig>
 8005748:	2802      	cmp	r0, #2
 800574a:	d0d8      	beq.n	80056fe <USBD_StdDevReq+0x66>
      if (cfgidx == 0U)
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
        pdev->dev_config = cfgidx;
        USBD_ClrClassConfig(pdev, cfgidx);
        USBD_CtlSendStatus(pdev);
 800574c:	4628      	mov	r0, r5
 800574e:	f000 fa61 	bl	8005c14 <USBD_CtlSendStatus>
 8005752:	e7b4      	b.n	80056be <USBD_StdDevReq+0x26>
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8005754:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005758:	3b01      	subs	r3, #1
 800575a:	2b02      	cmp	r3, #2
 800575c:	f04f 0203 	mov.w	r2, #3
 8005760:	d8cd      	bhi.n	80056fe <USBD_StdDevReq+0x66>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8005762:	88cb      	ldrh	r3, [r1, #6]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d1ca      	bne.n	80056fe <USBD_StdDevReq+0x66>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005768:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
      USBD_CtlError(pdev, req);
      break;
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800576c:	2101      	movs	r1, #1
 800576e:	60c1      	str	r1, [r0, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005770:	b103      	cbz	r3, 8005774 <USBD_StdDevReq+0xdc>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005772:	60c2      	str	r2, [r0, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005774:	2202      	movs	r2, #2
 8005776:	f105 010c 	add.w	r1, r5, #12
 800577a:	4628      	mov	r0, r5
 800577c:	f000 fa1c 	bl	8005bb8 <USBD_CtlSendData>
 8005780:	e79d      	b.n	80056be <USBD_StdDevReq+0x26>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8005782:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005786:	3b01      	subs	r3, #1
 8005788:	2b02      	cmp	r3, #2
 800578a:	d8b8      	bhi.n	80056fe <USBD_StdDevReq+0x66>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800578c:	884b      	ldrh	r3, [r1, #2]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d195      	bne.n	80056be <USBD_StdDevReq+0x26>
    {
      pdev->dev_remote_wakeup = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	f8c5 327c 	str.w	r3, [r5, #636]	; 0x27c
 8005798:	e7d8      	b.n	800574c <USBD_StdDevReq+0xb4>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800579a:	884b      	ldrh	r3, [r1, #2]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d18e      	bne.n	80056be <USBD_StdDevReq+0x26>
 80057a0:	e7f8      	b.n	8005794 <USBD_StdDevReq+0xfc>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80057a2:	888b      	ldrh	r3, [r1, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1aa      	bne.n	80056fe <USBD_StdDevReq+0x66>
 80057a8:	88cb      	ldrh	r3, [r1, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1a7      	bne.n	80056fe <USBD_StdDevReq+0x66>
 80057ae:	884c      	ldrh	r4, [r1, #2]
 80057b0:	2c7f      	cmp	r4, #127	; 0x7f
 80057b2:	d8a4      	bhi.n	80056fe <USBD_StdDevReq+0x66>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057b4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80057b8:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80057ba:	b2e1      	uxtb	r1, r4

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057bc:	d09f      	beq.n	80056fe <USBD_StdDevReq+0x66>
    {
      USBD_CtlError(pdev , req);
    }
    else
    {
      pdev->dev_address = dev_addr;
 80057be:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80057c2:	f7fb fa1f 	bl	8000c04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 fa24 	bl	8005c14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80057cc:	2c00      	cmp	r4, #0
 80057ce:	f000 80c4 	beq.w	800595a <USBD_StdDevReq+0x2c2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057d2:	2302      	movs	r3, #2
 80057d4:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
 80057d8:	e771      	b.n	80056be <USBD_StdDevReq+0x26>
 80057da:	884a      	ldrh	r2, [r1, #2]
{
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80057dc:	0a13      	lsrs	r3, r2, #8
 80057de:	3b01      	subs	r3, #1
 80057e0:	2b06      	cmp	r3, #6
 80057e2:	d88c      	bhi.n	80056fe <USBD_StdDevReq+0x66>
 80057e4:	a101      	add	r1, pc, #4	; (adr r1, 80057ec <USBD_StdDevReq+0x154>)
 80057e6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	080058b3 	.word	0x080058b3
 80057f0:	0800589b 	.word	0x0800589b
 80057f4:	08005889 	.word	0x08005889
 80057f8:	080056ff 	.word	0x080056ff
 80057fc:	080056ff 	.word	0x080056ff
 8005800:	08005873 	.word	0x08005873
 8005804:	0800582f 	.word	0x0800582f
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  if (req->wLength != 1U)
 8005808:	88ca      	ldrh	r2, [r1, #6]
 800580a:	2a01      	cmp	r2, #1
 800580c:	f47f af77 	bne.w	80056fe <USBD_StdDevReq+0x66>
  {
    USBD_CtlError(pdev , req);
  }
  else
  {
    switch (pdev->dev_state)
 8005810:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005814:	2b00      	cmp	r3, #0
 8005816:	f43f af72 	beq.w	80056fe <USBD_StdDevReq+0x66>
 800581a:	2b02      	cmp	r3, #2
 800581c:	f240 8081 	bls.w	8005922 <USBD_StdDevReq+0x28a>
 8005820:	2b03      	cmp	r3, #3
 8005822:	f47f af6c 	bne.w	80056fe <USBD_StdDevReq+0x66>
      pdev->dev_default_config = 0U;
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
      break;

    case USBD_STATE_CONFIGURED:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005826:	1d01      	adds	r1, r0, #4
 8005828:	f000 f9c6 	bl	8005bb8 <USBD_CtlSendData>
 800582c:	e747      	b.n	80056be <USBD_StdDevReq+0x26>
      USBD_CtlError(pdev , req);
      return;
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800582e:	7c03      	ldrb	r3, [r0, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f47f af64 	bne.w	80056fe <USBD_StdDevReq+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005836:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800583a:	f10d 0006 	add.w	r0, sp, #6
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005842:	2307      	movs	r3, #7
 8005844:	7043      	strb	r3, [r0, #1]
  default:
     USBD_CtlError(pdev , req);
    return;
  }

  if((len != 0U) && (req->wLength != 0U))
 8005846:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800584a:	b16b      	cbz	r3, 8005868 <USBD_StdDevReq+0x1d0>
 800584c:	88e2      	ldrh	r2, [r4, #6]
 800584e:	2a00      	cmp	r2, #0
 8005850:	f43f af7c 	beq.w	800574c <USBD_StdDevReq+0xb4>
  {

    len = MIN(len, req->wLength);
 8005854:	4293      	cmp	r3, r2
 8005856:	bf28      	it	cs
 8005858:	4613      	movcs	r3, r2

    USBD_CtlSendData (pdev, pbuf, len);
 800585a:	4601      	mov	r1, r0
 800585c:	461a      	mov	r2, r3
 800585e:	4628      	mov	r0, r5
  }

  if((len != 0U) && (req->wLength != 0U))
  {

    len = MIN(len, req->wLength);
 8005860:	f8ad 3006 	strh.w	r3, [sp, #6]

    USBD_CtlSendData (pdev, pbuf, len);
 8005864:	f000 f9a8 	bl	8005bb8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005868:	88e3      	ldrh	r3, [r4, #6]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f47f af27 	bne.w	80056be <USBD_StdDevReq+0x26>
 8005870:	e76c      	b.n	800574c <USBD_StdDevReq+0xb4>
#endif
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005872:	7c03      	ldrb	r3, [r0, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f47f af42 	bne.w	80056fe <USBD_StdDevReq+0x66>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800587a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800587e:	f10d 0006 	add.w	r0, sp, #6
 8005882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005884:	4798      	blx	r3
 8005886:	e7de      	b.n	8005846 <USBD_StdDevReq+0x1ae>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	2a05      	cmp	r2, #5
 800588c:	f63f af37 	bhi.w	80056fe <USBD_StdDevReq+0x66>
 8005890:	e8df f002 	tbb	[pc, r2]
 8005894:	272f373f 	.word	0x272f373f
 8005898:	171f      	.short	0x171f
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
    break;

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800589a:	7c03      	ldrb	r3, [r0, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d153      	bne.n	8005948 <USBD_StdDevReq+0x2b0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80058a0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80058a4:	f10d 0006 	add.w	r0, sp, #6
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058ac:	2302      	movs	r3, #2
 80058ae:	7043      	strb	r3, [r0, #1]
 80058b0:	e7c9      	b.n	8005846 <USBD_StdDevReq+0x1ae>
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058b2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80058b6:	7c00      	ldrb	r0, [r0, #16]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f10d 0106 	add.w	r1, sp, #6
 80058be:	4798      	blx	r3
 80058c0:	e7c1      	b.n	8005846 <USBD_StdDevReq+0x1ae>
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
      break;

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80058c2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80058c6:	7c00      	ldrb	r0, [r0, #16]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f10d 0106 	add.w	r1, sp, #6
 80058ce:	4798      	blx	r3
 80058d0:	e7b9      	b.n	8005846 <USBD_StdDevReq+0x1ae>
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
      break;

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80058d2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80058d6:	7c00      	ldrb	r0, [r0, #16]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f10d 0106 	add.w	r1, sp, #6
 80058de:	4798      	blx	r3
 80058e0:	e7b1      	b.n	8005846 <USBD_StdDevReq+0x1ae>
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
      break;

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80058e2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80058e6:	7c00      	ldrb	r0, [r0, #16]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f10d 0106 	add.w	r1, sp, #6
 80058ee:	4798      	blx	r3
 80058f0:	e7a9      	b.n	8005846 <USBD_StdDevReq+0x1ae>
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
      break;

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80058f2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80058f6:	7c00      	ldrb	r0, [r0, #16]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f10d 0106 	add.w	r1, sp, #6
 80058fe:	4798      	blx	r3
 8005900:	e7a1      	b.n	8005846 <USBD_StdDevReq+0x1ae>
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
      break;

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005902:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005906:	7c00      	ldrb	r0, [r0, #16]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f10d 0106 	add.w	r1, sp, #6
 800590e:	4798      	blx	r3
 8005910:	e799      	b.n	8005846 <USBD_StdDevReq+0x1ae>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005912:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005916:	7c00      	ldrb	r0, [r0, #16]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f10d 0106 	add.w	r1, sp, #6
 800591e:	4798      	blx	r3
 8005920:	e791      	b.n	8005846 <USBD_StdDevReq+0x1ae>
  {
    switch (pdev->dev_state)
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
      pdev->dev_default_config = 0U;
 8005922:	4601      	mov	r1, r0
 8005924:	2300      	movs	r3, #0
 8005926:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800592a:	f000 f945 	bl	8005bb8 <USBD_CtlSendData>
 800592e:	e6c6      	b.n	80056be <USBD_StdDevReq+0x26>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	f7fb f937 	bl	8000ba4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005936:	2100      	movs	r1, #0
 8005938:	4628      	mov	r0, r5
 800593a:	f7fb f933 	bl	8000ba4 <USBD_LL_StallEP>
      }
      break;

    default:
      USBD_CtlError(pdev, req);
      USBD_ClrClassConfig(pdev, cfgidx);
 800593e:	7821      	ldrb	r1, [r4, #0]
 8005940:	4628      	mov	r0, r5
 8005942:	f7ff fd71 	bl	8005428 <USBD_ClrClassConfig>
 8005946:	e6ba      	b.n	80056be <USBD_StdDevReq+0x26>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005948:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800594c:	f10d 0006 	add.w	r0, sp, #6
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005954:	2302      	movs	r3, #2
 8005956:	7043      	strb	r3, [r0, #1]
 8005958:	e775      	b.n	8005846 <USBD_StdDevReq+0x1ae>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800595a:	2301      	movs	r3, #1
 800595c:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
 8005960:	e6ad      	b.n	80056be <USBD_StdDevReq+0x26>
      break;

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005962:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8005964:	6041      	str	r1, [r0, #4]
      break;

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005966:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
        USBD_ClrClassConfig(pdev, cfgidx);
 800596a:	f7ff fd5d 	bl	8005428 <USBD_ClrClassConfig>
 800596e:	e6ed      	b.n	800574c <USBD_StdDevReq+0xb4>
 8005970:	20008f04 	.word	0x20008f04

08005974 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005974:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005976:	780b      	ldrb	r3, [r1, #0]
 8005978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800597c:	2b20      	cmp	r3, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800597e:	460d      	mov	r5, r1
 8005980:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005982:	d00b      	beq.n	800599c <USBD_StdItfReq+0x28>
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d009      	beq.n	800599c <USBD_StdItfReq+0x28>
 8005988:	b143      	cbz	r3, 800599c <USBD_StdItfReq+0x28>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800598a:	2180      	movs	r1, #128	; 0x80
 800598c:	f7fb f90a 	bl	8000ba4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005990:	4620      	mov	r0, r4
 8005992:	2100      	movs	r1, #0
 8005994:	f7fb f906 	bl	8000ba4 <USBD_LL_StallEP>
    USBD_CtlError(pdev, req);
    break;
  }

  return USBD_OK;
}
 8005998:	2000      	movs	r0, #0
 800599a:	bd38      	pop	{r3, r4, r5, pc}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800599c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80059a0:	3b01      	subs	r3, #1
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d802      	bhi.n	80059ac <USBD_StdItfReq+0x38>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80059a6:	792b      	ldrb	r3, [r5, #4]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d909      	bls.n	80059c0 <USBD_StdItfReq+0x4c>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80059ac:	2180      	movs	r1, #128	; 0x80
 80059ae:	4620      	mov	r0, r4
 80059b0:	f7fb f8f8 	bl	8000ba4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80059b4:	4620      	mov	r0, r4
 80059b6:	2100      	movs	r1, #0
 80059b8:	f7fb f8f4 	bl	8000ba4 <USBD_LL_StallEP>
    USBD_CtlError(pdev, req);
    break;
  }

  return USBD_OK;
}
 80059bc:	2000      	movs	r0, #0
 80059be:	bd38      	pop	{r3, r4, r5, pc}
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80059c0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80059c4:	4629      	mov	r1, r5
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	4620      	mov	r0, r4
 80059ca:	4798      	blx	r3

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80059cc:	88eb      	ldrh	r3, [r5, #6]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f4      	bne.n	80059bc <USBD_StdItfReq+0x48>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d1f2      	bne.n	80059bc <USBD_StdItfReq+0x48>
        {
          USBD_CtlSendStatus(pdev);
 80059d6:	4620      	mov	r0, r4
 80059d8:	f000 f91c 	bl	8005c14 <USBD_CtlSendStatus>
 80059dc:	e7ee      	b.n	80059bc <USBD_StdItfReq+0x48>
 80059de:	bf00      	nop

080059e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80059e0:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059e2:	780c      	ldrb	r4, [r1, #0]
 80059e4:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80059e8:	2c20      	cmp	r4, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80059ea:	4605      	mov	r5, r0
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ec:	d025      	beq.n	8005a3a <USBD_StdEPReq+0x5a>
 80059ee:	2c40      	cmp	r4, #64	; 0x40
 80059f0:	d023      	beq.n	8005a3a <USBD_StdEPReq+0x5a>
 80059f2:	b144      	cbz	r4, 8005a06 <USBD_StdEPReq+0x26>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	f7fb f8d5 	bl	8000ba4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80059fa:	4628      	mov	r0, r5
 80059fc:	2100      	movs	r1, #0
 80059fe:	f7fb f8d1 	bl	8000ba4 <USBD_LL_StallEP>
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
}
 8005a02:	2000      	movs	r0, #0
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);

      return ret;
    }

    switch (req->bRequest)
 8005a06:	784b      	ldrb	r3, [r1, #1]
{

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005a08:	888a      	ldrh	r2, [r1, #4]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);

      return ret;
    }

    switch (req->bRequest)
 8005a0a:	2b01      	cmp	r3, #1
{

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005a0c:	b2d6      	uxtb	r6, r2
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);

      return ret;
    }

    switch (req->bRequest)
 8005a0e:	d044      	beq.n	8005a9a <USBD_StdEPReq+0xba>
 8005a10:	d31a      	bcc.n	8005a48 <USBD_StdEPReq+0x68>
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d147      	bne.n	8005aa6 <USBD_StdEPReq+0xc6>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005a16:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d04c      	beq.n	8005ab8 <USBD_StdEPReq+0xd8>
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d141      	bne.n	8005aa6 <USBD_StdEPReq+0xc6>
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a22:	884b      	ldrh	r3, [r1, #2]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d159      	bne.n	8005adc <USBD_StdEPReq+0xfc>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a28:	0672      	lsls	r2, r6, #25
 8005a2a:	d057      	beq.n	8005adc <USBD_StdEPReq+0xfc>
 8005a2c:	88cb      	ldrh	r3, [r1, #6]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d154      	bne.n	8005adc <USBD_StdEPReq+0xfc>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005a32:	4631      	mov	r1, r6
 8005a34:	f7fb f8b6 	bl	8000ba4 <USBD_LL_StallEP>
 8005a38:	e050      	b.n	8005adc <USBD_StdEPReq+0xfc>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005a3a:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 8005a3e:	4628      	mov	r0, r5
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4798      	blx	r3
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
}
 8005a44:	2000      	movs	r0, #0
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
        break;
      }
      break;

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005a48:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d052      	beq.n	8005af6 <USBD_StdEPReq+0x116>
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d128      	bne.n	8005aa6 <USBD_StdEPReq+0xc6>
          break;

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a54:	f006 030f 	and.w	r3, r6, #15
 8005a58:	eb03 0383 	add.w	r3, r3, r3, lsl #2

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005a5c:	0612      	lsls	r2, r2, #24
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a5e:	eb00 0383 	add.w	r3, r0, r3, lsl #2

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005a62:	d457      	bmi.n	8005b14 <USBD_StdEPReq+0x134>
            break;
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a64:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d03b      	beq.n	8005ae4 <USBD_StdEPReq+0x104>
 8005a6c:	f006 037f 	and.w	r3, r6, #127	; 0x7f
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005a70:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8005a74:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005a78:	f504 74a0 	add.w	r4, r4, #320	; 0x140
          &pdev->ep_out[ep_addr & 0x7FU];

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a7c:	b133      	cbz	r3, 8005a8c <USBD_StdEPReq+0xac>
          {
            pep->status = 0x0000U;
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	f7fb f8ab 	bl	8000bdc <USBD_LL_IsStallEP>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d04f      	beq.n	8005b2a <USBD_StdEPReq+0x14a>
          {
            pep->status = 0x0001U;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	6023      	str	r3, [r4, #0]
          else
          {
            pep->status = 0x0000U;
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4628      	mov	r0, r5
 8005a92:	2202      	movs	r2, #2
 8005a94:	f000 f890 	bl	8005bb8 <USBD_CtlSendData>
          break;
 8005a98:	e7b3      	b.n	8005a02 <USBD_StdEPReq+0x22>
      }
      break;

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005a9a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d00a      	beq.n	8005ab8 <USBD_StdEPReq+0xd8>
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d012      	beq.n	8005acc <USBD_StdEPReq+0xec>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8005aa6:	2180      	movs	r1, #128	; 0x80
 8005aa8:	f7fb f87c 	bl	8000ba4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005aac:	4621      	mov	r1, r4
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f7fb f878 	bl	8000ba4 <USBD_LL_StallEP>
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
}
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ab8:	0673      	lsls	r3, r6, #25
 8005aba:	d013      	beq.n	8005ae4 <USBD_StdEPReq+0x104>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005abc:	4631      	mov	r1, r6
 8005abe:	f7fb f871 	bl	8000ba4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	2180      	movs	r1, #128	; 0x80
 8005ac6:	f7fb f86d 	bl	8000ba4 <USBD_LL_StallEP>
 8005aca:	e79a      	b.n	8005a02 <USBD_StdEPReq+0x22>
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005acc:	884b      	ldrh	r3, [r1, #2]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d197      	bne.n	8005a02 <USBD_StdEPReq+0x22>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005ad2:	0674      	lsls	r4, r6, #25
 8005ad4:	d002      	beq.n	8005adc <USBD_StdEPReq+0xfc>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	f7fb f872 	bl	8000bc0 <USBD_LL_ClearStallEP>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
          {
            USBD_LL_StallEP(pdev, ep_addr);
          }
        }
        USBD_CtlSendStatus(pdev);
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 f899 	bl	8005c14 <USBD_CtlSendStatus>

        break;
 8005ae2:	e78e      	b.n	8005a02 <USBD_StdEPReq+0x22>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8005ae4:	2180      	movs	r1, #128	; 0x80
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f7fb f85c 	bl	8000ba4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005aec:	4628      	mov	r0, r5
 8005aee:	2100      	movs	r1, #0
 8005af0:	f7fb f858 	bl	8000ba4 <USBD_LL_StallEP>
 8005af4:	e785      	b.n	8005a02 <USBD_StdEPReq+0x22>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005af6:	0670      	lsls	r0, r6, #25
 8005af8:	d1f4      	bne.n	8005ae4 <USBD_StdEPReq+0x104>
        {
          USBD_CtlError(pdev, req);
          break;
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005afa:	0611      	lsls	r1, r2, #24
 8005afc:	bf4c      	ite	mi
 8005afe:	f105 0114 	addmi.w	r1, r5, #20
 8005b02:	f505 71a0 	addpl.w	r1, r5, #320	; 0x140
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;
 8005b06:	2300      	movs	r3, #0

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b08:	4628      	mov	r0, r5
          break;
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;
 8005b0a:	600b      	str	r3, [r1, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	f000 f853 	bl	8005bb8 <USBD_CtlSendData>
          break;
 8005b12:	e776      	b.n	8005a02 <USBD_StdEPReq+0x22>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0e4      	beq.n	8005ae4 <USBD_StdEPReq+0x104>
 8005b1a:	f006 037f 	and.w	r3, r6, #127	; 0x7f
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005b1e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8005b22:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005b26:	3414      	adds	r4, #20
 8005b28:	e7a8      	b.n	8005a7c <USBD_StdEPReq+0x9c>
          {
            pep->status = 0x0001U;
          }
          else
          {
            pep->status = 0x0000U;
 8005b2a:	6020      	str	r0, [r4, #0]
 8005b2c:	e7af      	b.n	8005a8e <USBD_StdEPReq+0xae>
 8005b2e:	bf00      	nop

08005b30 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005b30:	780b      	ldrb	r3, [r1, #0]
 8005b32:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005b34:	784b      	ldrb	r3, [r1, #1]
 8005b36:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005b38:	78ca      	ldrb	r2, [r1, #3]
 8005b3a:	788b      	ldrb	r3, [r1, #2]
 8005b3c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005b40:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005b42:	794a      	ldrb	r2, [r1, #5]
 8005b44:	790b      	ldrb	r3, [r1, #4]
 8005b46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005b4a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005b4c:	79ca      	ldrb	r2, [r1, #7]
 8005b4e:	798b      	ldrb	r3, [r1, #6]
 8005b50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005b54:	80c3      	strh	r3, [r0, #6]
 8005b56:	4770      	bx	lr

08005b58 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005b58:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8005b5a:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005b5c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8005b5e:	f7fb f821 	bl	8000ba4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005b62:	4620      	mov	r0, r4
 8005b64:	2100      	movs	r1, #0
}
 8005b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
  USBD_LL_StallEP(pdev , 0U);
 8005b6a:	f7fb b81b 	b.w	8000ba4 <USBD_LL_StallEP>
 8005b6e:	bf00      	nop

08005b70 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8005b70:	b1f8      	cbz	r0, 8005bb2 <USBD_GetString+0x42>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8005b72:	7803      	ldrb	r3, [r0, #0]
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b74:	b430      	push	{r4, r5}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8005b76:	b1eb      	cbz	r3, 8005bb4 <USBD_GetString+0x44>
 8005b78:	4604      	mov	r4, r0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 8005b80:	3301      	adds	r3, #1
 8005b82:	b2db      	uxtb	r3, r3
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	d1f9      	bne.n	8005b7c <USBD_GetString+0xc>
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	3302      	adds	r3, #2

  if (desc != NULL)
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
    unicode[idx++] = *(uint8_t *)(void *)len;
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005b8c:	2403      	movs	r4, #3
{
  uint8_t idx = 0U;

  if (desc != NULL)
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005b8e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005b90:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005b92:	704c      	strb	r4, [r1, #1]

    while (*desc != '\0')
 8005b94:	7804      	ldrb	r4, [r0, #0]
 8005b96:	b15c      	cbz	r4, 8005bb0 <USBD_GetString+0x40>
 8005b98:	2302      	movs	r3, #2
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0U;
 8005b9a:	2500      	movs	r5, #0
    unicode[idx++] = *(uint8_t *)(void *)len;
    unicode[idx++] = USB_DESC_TYPE_STRING;

    while (*desc != '\0')
    {
      unicode[idx++] = *desc++;
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8005ba2:	548d      	strb	r5, [r1, r2]
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
    unicode[idx++] = *(uint8_t *)(void *)len;
    unicode[idx++] = USB_DESC_TYPE_STRING;

    while (*desc != '\0')
 8005ba4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0U;
 8005ba8:	3302      	adds	r3, #2
 8005baa:	b2db      	uxtb	r3, r3
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
    unicode[idx++] = *(uint8_t *)(void *)len;
    unicode[idx++] = USB_DESC_TYPE_STRING;

    while (*desc != '\0')
 8005bac:	2c00      	cmp	r4, #0
 8005bae:	d1f5      	bne.n	8005b9c <USBD_GetString+0x2c>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0U;
    }
  }
}
 8005bb0:	bc30      	pop	{r4, r5}
 8005bb2:	4770      	bx	lr
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e7e9      	b.n	8005b8c <USBD_GetString+0x1c>

08005bb8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bbc:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005bbe:	460a      	mov	r2, r1
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
  pdev->ep_in[0].total_length = len;
 8005bc0:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8005bc2:	6203      	str	r3, [r0, #32]
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bc4:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f7fb f829 	bl	8000c20 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005bce:	2000      	movs	r0, #0
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
 8005bd2:	bf00      	nop

08005bd4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005bd4:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	460a      	mov	r2, r1
 8005bda:	2100      	movs	r1, #0
 8005bdc:	f7fb f820 	bl	8000c20 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005be0:	2000      	movs	r0, #0
 8005be2:	bd08      	pop	{r3, pc}

08005be4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005be8:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005bea:	460a      	mov	r2, r1
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
  pdev->ep_out[0].total_length = len;
 8005bec:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8005bf0:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005bf4:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	f7fb f81f 	bl	8000c3c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005bfe:	2000      	movs	r0, #0
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	bf00      	nop

08005c04 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005c04:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c06:	4613      	mov	r3, r2
 8005c08:	460a      	mov	r2, r1
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	f7fb f816 	bl	8000c3c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005c10:	2000      	movs	r0, #0
 8005c12:	bd08      	pop	{r3, pc}

08005c14 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005c14:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c16:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c18:	2300      	movs	r3, #0
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c1a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c1e:	4619      	mov	r1, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	f7fa fffd 	bl	8000c20 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005c26:	2000      	movs	r0, #0
 8005c28:	bd08      	pop	{r3, pc}
 8005c2a:	bf00      	nop

08005c2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005c2c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005c2e:	2205      	movs	r2, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005c30:	2300      	movs	r3, #0
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005c32:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005c36:	4619      	mov	r1, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f7fa ffff 	bl	8000c3c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005c3e:	2000      	movs	r0, #0
 8005c40:	bd08      	pop	{r3, pc}
 8005c42:	bf00      	nop

08005c44 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c44:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005c48:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c4a:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c4e:	b15b      	cbz	r3, 8005c68 <USBD_CDC_EP0_RxReady+0x24>
 8005c50:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005c54:	28ff      	cmp	r0, #255	; 0xff
 8005c56:	d007      	beq.n	8005c68 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005c5e:	4621      	mov	r1, r4
 8005c60:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8005c62:	23ff      	movs	r3, #255	; 0xff
 8005c64:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8005c68:	2000      	movs	r0, #0
 8005c6a:	bd10      	pop	{r4, pc}

08005c6c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005c6c:	2343      	movs	r3, #67	; 0x43
 8005c6e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005c70:	4800      	ldr	r0, [pc, #0]	; (8005c74 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005c72:	4770      	bx	lr
 8005c74:	20000070 	.word	0x20000070

08005c78 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005c78:	2343      	movs	r3, #67	; 0x43
 8005c7a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005c7c:	4800      	ldr	r0, [pc, #0]	; (8005c80 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005c7e:	4770      	bx	lr
 8005c80:	2000013c 	.word	0x2000013c

08005c84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005c84:	2343      	movs	r3, #67	; 0x43
 8005c86:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005c88:	4800      	ldr	r0, [pc, #0]	; (8005c8c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005c8a:	4770      	bx	lr
 8005c8c:	200000f8 	.word	0x200000f8

08005c90 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005c90:	230a      	movs	r3, #10
 8005c92:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005c94:	4800      	ldr	r0, [pc, #0]	; (8005c98 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005c96:	4770      	bx	lr
 8005c98:	200000ec 	.word	0x200000ec

08005c9c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ca0:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005ca4:	f7fa ffd8 	bl	8000c58 <USBD_LL_GetRxDataSize>

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005ca8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005cac:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005cb0:	b14b      	cbz	r3, 8005cc6 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cb2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8005cb6:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005cc0:	4798      	blx	r3

    return USBD_OK;
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8005cc6:	2002      	movs	r0, #2
  }
}
 8005cc8:	bd38      	pop	{r3, r4, r5, pc}
 8005cca:	bf00      	nop

08005ccc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ccc:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005cce:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  PCD_HandleTypeDef *hpcd = pdev->pData;

  if(pdev->pClassData != NULL)
 8005cd2:	b1ae      	cbz	r6, 8005d00 <USBD_CDC_DataIn+0x34>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cd4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8005cd8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005cdc:	69ec      	ldr	r4, [r5, #28]
 8005cde:	b15c      	cbz	r4, 8005cf8 <USBD_CDC_DataIn+0x2c>
 8005ce0:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8005ce4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005ce8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cee:	fbb4 f3f2 	udiv	r3, r4, r2
 8005cf2:	fb02 4413 	mls	r4, r2, r3, r4
 8005cf6:	b12c      	cbz	r4, 8005d04 <USBD_CDC_DataIn+0x38>
      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
    }
    else
    {
      hcdc->TxState = 0U;
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8005d00:	2002      	movs	r0, #2
  }
}
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
  if(pdev->pClassData != NULL)
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d04:	61ec      	str	r4, [r5, #28]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005d06:	4623      	mov	r3, r4
 8005d08:	4622      	mov	r2, r4
 8005d0a:	f7fa ff89 	bl	8000c20 <USBD_LL_Transmit>
    }
    else
    {
      hcdc->TxState = 0U;
    }
    return USBD_OK;
 8005d0e:	4620      	mov	r0, r4
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005d10:	bd70      	pop	{r4, r5, r6, pc}
 8005d12:	bf00      	nop

08005d14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d18:	780b      	ldrb	r3, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005d1a:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005d1e:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
 8005d20:	2400      	movs	r4, #0
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d22:	f013 0860 	ands.w	r8, r3, #96	; 0x60
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005d26:	460e      	mov	r6, r1
 8005d28:	4607      	mov	r7, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
 8005d2a:	f88d 4005 	strb.w	r4, [sp, #5]
  uint16_t status_info = 0U;
 8005d2e:	f8ad 4006 	strh.w	r4, [sp, #6]
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d32:	d01d      	beq.n	8005d70 <USBD_CDC_Setup+0x5c>
 8005d34:	f1b8 0f20 	cmp.w	r8, #32
 8005d38:	d114      	bne.n	8005d64 <USBD_CDC_Setup+0x50>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005d3a:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8005d3e:	f1b8 0f00 	cmp.w	r8, #0
 8005d42:	d047      	beq.n	8005dd4 <USBD_CDC_Setup+0xc0>
    {
      if (req->bmRequest & 0x80U)
 8005d44:	061b      	lsls	r3, r3, #24
 8005d46:	d42c      	bmi.n	8005da2 <USBD_CDC_Setup+0x8e>

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8005d48:	784b      	ldrb	r3, [r1, #1]
 8005d4a:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005d4e:	88cb      	ldrh	r3, [r1, #6]
 8005d50:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201

        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005d54:	88ca      	ldrh	r2, [r1, #6]
 8005d56:	4629      	mov	r1, r5
 8005d58:	f7ff ff44 	bl	8005be4 <USBD_CtlPrepareRx>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8005d5c:	4620      	mov	r0, r4
    ret = USBD_FAIL;
    break;
  }

  return ret;
}
 8005d5e:	b002      	add	sp, #8
 8005d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      break;
    }
    break;

  default:
    USBD_CtlError (pdev, req);
 8005d64:	f7ff fef8 	bl	8005b58 <USBD_CtlError>
    ret = USBD_FAIL;
 8005d68:	2002      	movs	r0, #2
    break;
  }

  return ret;
}
 8005d6a:	b002      	add	sp, #8
 8005d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005d70:	784d      	ldrb	r5, [r1, #1]
 8005d72:	2d0a      	cmp	r5, #10
 8005d74:	d023      	beq.n	8005dbe <USBD_CDC_Setup+0xaa>
 8005d76:	2d0b      	cmp	r5, #11
 8005d78:	d00d      	beq.n	8005d96 <USBD_CDC_Setup+0x82>
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	d1f2      	bne.n	8005d64 <USBD_CDC_Setup+0x50>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d7e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d02e      	beq.n	8005de4 <USBD_CDC_Setup+0xd0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 8005d86:	4638      	mov	r0, r7
 8005d88:	4631      	mov	r1, r6
 8005d8a:	f7ff fee5 	bl	8005b58 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005d8e:	2002      	movs	r0, #2
    ret = USBD_FAIL;
    break;
  }

  return ret;
}
 8005d90:	b002      	add	sp, #8
 8005d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  ret = USBD_FAIL;
      }
      break;

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d96:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d1f3      	bne.n	8005d86 <USBD_CDC_Setup+0x72>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8005d9e:	4640      	mov	r0, r8
 8005da0:	e7e3      	b.n	8005d6a <USBD_CDC_Setup+0x56>
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80U)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005da2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005da6:	7848      	ldrb	r0, [r1, #1]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	4642      	mov	r2, r8
 8005dac:	4629      	mov	r1, r5
 8005dae:	4798      	blx	r3
                                                          (uint8_t *)(void *)hcdc->data,
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005db0:	88f2      	ldrh	r2, [r6, #6]
 8005db2:	4629      	mov	r1, r5
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7ff feff 	bl	8005bb8 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8005dba:	4620      	mov	r0, r4
 8005dbc:	e7d5      	b.n	8005d6a <USBD_CDC_Setup+0x56>
			  ret = USBD_FAIL;
      }
      break;

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dbe:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d1df      	bne.n	8005d86 <USBD_CDC_Setup+0x72>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f10d 0105 	add.w	r1, sp, #5
 8005dcc:	f7ff fef4 	bl	8005bb8 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8005dd0:	4640      	mov	r0, r8
 8005dd2:	e7ca      	b.n	8005d6a <USBD_CDC_Setup+0x56>
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dd4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005dd8:	7848      	ldrb	r0, [r1, #1]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4642      	mov	r2, r8
 8005dde:	4798      	blx	r3
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8005de0:	4640      	mov	r0, r8
 8005de2:	e7c2      	b.n	8005d6a <USBD_CDC_Setup+0x56>
    switch (req->bRequest)
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005de4:	2202      	movs	r2, #2
 8005de6:	f10d 0106 	add.w	r1, sp, #6
 8005dea:	f7ff fee5 	bl	8005bb8 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8005dee:	4628      	mov	r0, r5
 8005df0:	e7bb      	b.n	8005d6a <USBD_CDC_Setup+0x56>
 8005df2:	bf00      	nop

08005df4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4604      	mov	r4, r0
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005df8:	2500      	movs	r5, #0
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005dfa:	2181      	movs	r1, #129	; 0x81
 8005dfc:	f7fa fec4 	bl	8000b88 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e00:	2101      	movs	r1, #1
{
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e02:	62e5      	str	r5, [r4, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7fa febf 	bl	8000b88 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e0a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e0e:	4620      	mov	r0, r4
 8005e10:	2182      	movs	r1, #130	; 0x82
 8005e12:	f7fa feb9 	bl	8000b88 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005e16:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e1a:	6425      	str	r5, [r4, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005e1c:	b14b      	cbz	r3, 8005e32 <USBD_CDC_DeInit+0x3e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e1e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005e26:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8005e2a:	f000 fac3 	bl	80063b4 <free>
    pdev->pClassData = NULL;
 8005e2e:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
  }

  return ret;
}
 8005e32:	2000      	movs	r0, #0
 8005e34:	bd38      	pop	{r3, r4, r5, pc}
 8005e36:	bf00      	nop

08005e38 <USBD_CDC_Init>:
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005e38:	7c03      	ldrb	r3, [r0, #16]
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3e:	4604      	mov	r4, r0
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005e40:	bbc3      	cbnz	r3, 8005eb4 <USBD_CDC_Init+0x7c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e42:	2501      	movs	r5, #1
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e48:	2202      	movs	r2, #2
 8005e4a:	2181      	movs	r1, #129	; 0x81
 8005e4c:	f7fa fe8c 	bl	8000b68 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e50:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e52:	4629      	mov	r1, r5
 8005e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e58:	2202      	movs	r2, #2
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f7fa fe84 	bl	8000b68 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e60:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e64:	2308      	movs	r3, #8
 8005e66:	2203      	movs	r2, #3
 8005e68:	2182      	movs	r1, #130	; 0x82
 8005e6a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e6c:	2701      	movs	r7, #1
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e6e:	f7fa fe7b 	bl	8000b68 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e72:	6427      	str	r7, [r4, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005e74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e78:	f000 fa94 	bl	80063a4 <malloc>
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005e82:	b370      	cbz	r0, 8005ee2 <USBD_CDC_Init+0xaa>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e84:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
    hcdc->RxState = 0U;

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005e8c:	f894 8010 	ldrb.w	r8, [r4, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e90:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005e94:	2600      	movs	r6, #0
 8005e96:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    hcdc->RxState = 0U;

    if(pdev->dev_speed == USBD_SPEED_HIGH)
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e9a:	4639      	mov	r1, r7
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();

    /* Init Xfer states */
    hcdc->TxState = 0U;
    hcdc->RxState = 0U;
 8005e9c:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ea0:	4620      	mov	r0, r4

    /* Init Xfer states */
    hcdc->TxState = 0U;
    hcdc->RxState = 0U;

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005ea2:	f1b8 0f00 	cmp.w	r8, #0
 8005ea6:	d015      	beq.n	8005ed4 <USBD_CDC_Init+0x9c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	f7fa fec7 	bl	8000c3c <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 8005eae:	4630      	mov	r0, r6
 8005eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005eb4:	2501      	movs	r5, #1

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005eb6:	2340      	movs	r3, #64	; 0x40
 8005eb8:	2202      	movs	r2, #2
 8005eba:	2181      	movs	r1, #129	; 0x81
 8005ebc:	f7fa fe54 	bl	8000b68 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ec0:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	2340      	movs	r3, #64	; 0x40
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f7fa fe4d 	bl	8000b68 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ece:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8005ed2:	e7c7      	b.n	8005e64 <USBD_CDC_Init+0x2c>
    hcdc->RxState = 0U;

    if(pdev->dev_speed == USBD_SPEED_HIGH)
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed8:	f7fa feb0 	bl	8000c3c <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 8005edc:	4640      	mov	r0, r8
 8005ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));

  if(pdev->pClassData == NULL)
  {
    ret = 1U;
 8005ee2:	4638      	mov	r0, r7
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
}
 8005ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ee8 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8005ee8:	b119      	cbz	r1, 8005ef2 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8005eea:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8005eee:	2000      	movs	r0, #0
 8005ef0:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8005ef2:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;
  }

  return ret;
}
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop

08005ef8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ef8:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005efc:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->TxBuffer = pbuff;
 8005efe:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8005f06:	4770      	bx	lr

08005f08 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005f08:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8005f0c:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005f0e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8005f12:	4770      	bx	lr

08005f14 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f14:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 8005f18:	b19b      	cbz	r3, 8005f42 <USBD_CDC_TransmitPacket+0x2e>
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f1a:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0U)
 8005f1c:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 8005f20:	b10c      	cbz	r4, 8005f26 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8005f22:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f26:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f2a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0U)
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005f2e:	2601      	movs	r6, #1
 8005f30:	f8c3 6214 	str.w	r6, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f34:	2181      	movs	r1, #129	; 0x81
 8005f36:	b2ab      	uxth	r3, r5
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f38:	6305      	str	r5, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f3a:	f7fa fe71 	bl	8000c20 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8005f3e:	4620      	mov	r0, r4
 8005f40:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8005f42:	2002      	movs	r0, #2
  }
}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop

08005f48 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f48:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005f4c:	b18a      	cbz	r2, 8005f72 <USBD_CDC_ReceivePacket+0x2a>
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f4e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005f50:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f52:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005f56:	b12c      	cbz	r4, 8005f64 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f58:	2340      	movs	r3, #64	; 0x40
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	f7fa fe6e 	bl	8000c3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f60:	2000      	movs	r0, #0
 8005f62:	bd10      	pop	{r4, pc}
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f68:	2101      	movs	r1, #1
 8005f6a:	f7fa fe67 	bl	8000c3c <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f6e:	4620      	mov	r0, r4
 8005f70:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8005f72:	2002      	movs	r0, #2
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop

08005f78 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d03b      	beq.n	8005ff4 <HAL_SPI_Init+0x7c>
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f7e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f82:	2100      	movs	r1, #0
 8005f84:	4604      	mov	r4, r0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f8a:	6281      	str	r1, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8c:	b363      	cbz	r3, 8005fe8 <HAL_SPI_Init+0x70>
 8005f8e:	4608      	mov	r0, r1
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005f90:	6866      	ldr	r6, [r4, #4]
 8005f92:	68a1      	ldr	r1, [r4, #8]
 8005f94:	68e5      	ldr	r5, [r4, #12]
 8005f96:	6922      	ldr	r2, [r4, #16]
 8005f98:	6963      	ldr	r3, [r4, #20]
 8005f9a:	69e7      	ldr	r7, [r4, #28]
 8005f9c:	4331      	orrs	r1, r6
 8005f9e:	4329      	orrs	r1, r5
 8005fa0:	4311      	orrs	r1, r2
 8005fa2:	4319      	orrs	r1, r3
 8005fa4:	6a26      	ldr	r6, [r4, #32]
 8005fa6:	69a2      	ldr	r2, [r4, #24]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fa8:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005faa:	6a65      	ldr	r5, [r4, #36]	; 0x24
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fac:	4339      	orrs	r1, r7
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fae:	2702      	movs	r7, #2
 8005fb0:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fb4:	4331      	orrs	r1, r6
 8005fb6:	f402 7700 	and.w	r7, r2, #512	; 0x200
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fba:	681e      	ldr	r6, [r3, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005fbc:	0c12      	lsrs	r2, r2, #16
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fbe:	4339      	orrs	r1, r7
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005fc0:	f002 0204 	and.w	r2, r2, #4
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fc4:	4301      	orrs	r1, r0
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005fc6:	432a      	orrs	r2, r5
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fc8:	f026 0040 	bic.w	r0, r6, #64	; 0x40
 8005fcc:	6018      	str	r0, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fce:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fd2:	69da      	ldr	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fd4:	2100      	movs	r1, #0
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8005fda:	2501      	movs	r5, #1
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 8005fde:	4608      	mov	r0, r1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fe0:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fe2:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51

  return HAL_OK;
 8005fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fe8:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fec:	f7fa ff4a 	bl	8000e84 <HAL_SPI_MspInit>
 8005ff0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005ff2:	e7cd      	b.n	8005f90 <HAL_SPI_Init+0x18>
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ff8:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0); 
 8005ffa:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ffc:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0); 
 8005ffe:	2200      	movs	r2, #0
 8006000:	201a      	movs	r0, #26
 8006002:	f7fc ffd7 	bl	8002fb4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); 
 8006006:	201a      	movs	r0, #26
 8006008:	f7fd f80c 	bl	8003024 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800600c:	2500      	movs	r5, #0
 800600e:	4b15      	ldr	r3, [pc, #84]	; (8006064 <HAL_InitTick+0x6c>)
 8006010:	9502      	str	r5, [sp, #8]
 8006012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8006014:	4c14      	ldr	r4, [pc, #80]	; (8006068 <HAL_InitTick+0x70>)
  
  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); 
  
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006016:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800601a:	645a      	str	r2, [r3, #68]	; 0x44
 800601c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006022:	a901      	add	r1, sp, #4
  
  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); 
  
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006024:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006026:	a803      	add	r0, sp, #12
  
  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); 
  
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006028:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800602a:	f7fc fd3b 	bl	8002aa4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800602e:	f7fc fd29 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
  htim11.Init.Prescaler = uwPrescalerValue;
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <HAL_InitTick+0x74>)
   
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8006034:	490e      	ldr	r1, [pc, #56]	; (8006070 <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
  htim11.Init.Prescaler = uwPrescalerValue;
  htim11.Init.ClockDivision = 0;
 8006036:	6125      	str	r5, [r4, #16]
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
  htim11.Init.Prescaler = uwPrescalerValue;
 8006038:	fba3 2300 	umull	r2, r3, r3, r0
 800603c:	0c9b      	lsrs	r3, r3, #18
 800603e:	3b01      	subs	r3, #1
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 8006040:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim11.Init.Prescaler = uwPrescalerValue;
  htim11.Init.ClockDivision = 0;
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8006044:	4620      	mov	r0, r4
   
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8006046:	e884 002a 	stmia.w	r4, {r1, r3, r5}
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 800604a:	60e2      	str	r2, [r4, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
  htim11.Init.ClockDivision = 0;
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 800604c:	f7fd f9ca 	bl	80033e4 <HAL_TIM_Base_Init>
 8006050:	b110      	cbz	r0, 8006058 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006052:	2001      	movs	r0, #1
}
 8006054:	b009      	add	sp, #36	; 0x24
 8006056:	bd30      	pop	{r4, r5, pc}
  htim11.Init.ClockDivision = 0;
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8006058:	4620      	mov	r0, r4
 800605a:	f7fd f8ad 	bl	80031b8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800605e:	b009      	add	sp, #36	; 0x24
 8006060:	bd30      	pop	{r4, r5, pc}
 8006062:	bf00      	nop
 8006064:	40023800 	.word	0x40023800
 8006068:	20009f4c 	.word	0x20009f4c
 800606c:	431bde83 	.word	0x431bde83
 8006070:	40014800 	.word	0x40014800

08006074 <InitHW>:
    return false;
}

void InitHW()
{
    MX_USB_DEVICE_Init();
 8006074:	f7fa bc66 	b.w	8000944 <MX_USB_DEVICE_Init>

08006078 <InitRW>:

/////////////////////////////////////////////////////////////////////////////
// Defs

void InitRW()
{
 8006078:	b508      	push	{r3, lr}
    gHostConnection = OpenUsbHostConnection( USB_READ_BUF_SIZE );
 800607a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800607e:	f000 f8d7 	bl	8006230 <OpenUsbHostConnection>
 8006082:	4b01      	ldr	r3, [pc, #4]	; (8006088 <InitRW+0x10>)
 8006084:	6018      	str	r0, [r3, #0]
 8006086:	bd08      	pop	{r3, pc}
 8006088:	20009f8c 	.word	0x20009f8c

0800608c <ring_buffer_init>:

void ring_buffer_init( ring_buffer_t* s, void* buff, size_t buffSz )
{
    s->buff = buff;
    s->cap  = buffSz;
    s->head = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    s->tail = 0;
 8006092:	60c3      	str	r3, [r0, #12]
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <ring_buffer_write>:
}

void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
 8006098:	b430      	push	{r4, r5}
    const size_t nxt[2] = { -1, s->cap - 1 };
 800609a:	6843      	ldr	r3, [r0, #4]
    s->head = 0;
    s->tail = 0;
}

void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
 800609c:	b082      	sub	sp, #8
    const size_t nxt[2] = { -1, s->cap - 1 };
 800609e:	f04f 34ff 	mov.w	r4, #4294967295
 80060a2:	4423      	add	r3, r4
 80060a4:	9400      	str	r4, [sp, #0]
 80060a6:	9301      	str	r3, [sp, #4]
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 80060a8:	b1b2      	cbz	r2, 80060d8 <ring_buffer_write+0x40>
 80060aa:	6883      	ldr	r3, [r0, #8]
 80060ac:	440a      	add	r2, r1
        s->buff[s->head] = ( (char const*)d )[i];
 80060ae:	6804      	ldr	r4, [r0, #0]
 80060b0:	f811 5b01 	ldrb.w	r5, [r1], #1
 80060b4:	54e5      	strb	r5, [r4, r3]
void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 80060b6:	6843      	ldr	r3, [r0, #4]
 80060b8:	6884      	ldr	r4, [r0, #8]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	1b1b      	subs	r3, r3, r4
 80060be:	fab3 f383 	clz	r3, r3
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	ad02      	add	r5, sp, #8
 80060c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80060ca:	4291      	cmp	r1, r2
 80060cc:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80060d0:	eba4 0303 	sub.w	r3, r4, r3
 80060d4:	6083      	str	r3, [r0, #8]
 80060d6:	d1ea      	bne.n	80060ae <ring_buffer_write+0x16>
        s->buff[s->head] = ( (char const*)d )[i];
    }
}
 80060d8:	b002      	add	sp, #8
 80060da:	bc30      	pop	{r4, r5}
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop

080060e0 <ring_buffer_consume>:

void ring_buffer_consume( ring_buffer_t* s, size_t len )
{
    s->tail += len;
 80060e0:	68c3      	ldr	r3, [r0, #12]

    if ( s->tail >= s->cap ) {
 80060e2:	6842      	ldr	r2, [r0, #4]
    }
}

void ring_buffer_consume( ring_buffer_t* s, size_t len )
{
    s->tail += len;
 80060e4:	4419      	add	r1, r3

    if ( s->tail >= s->cap ) {
 80060e6:	4291      	cmp	r1, r2
    }
}

void ring_buffer_consume( ring_buffer_t* s, size_t len )
{
    s->tail += len;
 80060e8:	60c1      	str	r1, [r0, #12]

    if ( s->tail >= s->cap ) {
        s->tail = s->tail - s->cap;
 80060ea:	bf24      	itt	cs
 80060ec:	1a89      	subcs	r1, r1, r2
 80060ee:	60c1      	strcs	r1, [r0, #12]
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop

080060f4 <ring_buffer_peek>:
    }
}

void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
 80060f4:	b430      	push	{r4, r5}
    const size_t nxt[2] = { -1, s->cap - 1 };
 80060f6:	6843      	ldr	r3, [r0, #4]
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 80060f8:	68c4      	ldr	r4, [r0, #12]
        s->tail = s->tail - s->cap;
    }
}

void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
 80060fa:	b082      	sub	sp, #8
    const size_t nxt[2] = { -1, s->cap - 1 };
 80060fc:	f04f 35ff 	mov.w	r5, #4294967295
 8006100:	442b      	add	r3, r5
 8006102:	9500      	str	r5, [sp, #0]
 8006104:	9301      	str	r3, [sp, #4]
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8006106:	b19a      	cbz	r2, 8006130 <ring_buffer_peek+0x3c>
 8006108:	440a      	add	r2, r1
        ( (char*)b )[i] = s->buff[t];
 800610a:	6803      	ldr	r3, [r0, #0]
 800610c:	5d1b      	ldrb	r3, [r3, r4]
 800610e:	f801 3b01 	strb.w	r3, [r1], #1
void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8006112:	6843      	ldr	r3, [r0, #4]
 8006114:	3b01      	subs	r3, #1
 8006116:	1b1b      	subs	r3, r3, r4
 8006118:	fab3 f383 	clz	r3, r3
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	ad02      	add	r5, sp, #8
 8006120:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006124:	4291      	cmp	r1, r2
 8006126:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800612a:	eba4 0403 	sub.w	r4, r4, r3
 800612e:	d1ec      	bne.n	800610a <ring_buffer_peek+0x16>
        ( (char*)b )[i] = s->buff[t];
    }
}
 8006130:	b002      	add	sp, #8
 8006132:	bc30      	pop	{r4, r5}
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop

08006138 <ring_buffer_size>:

size_t ring_buffer_size( ring_buffer_t const* s )
{
    if ( s->head >= s->tail )
 8006138:	6882      	ldr	r2, [r0, #8]
 800613a:	68c3      	ldr	r3, [r0, #12]
 800613c:	429a      	cmp	r2, r3
        return s->head - s->tail;
 800613e:	bf2f      	iteee	cs
 8006140:	1ad0      	subcs	r0, r2, r3
    else
        return s->cap - s->tail + s->head;
 8006142:	6840      	ldrcc	r0, [r0, #4]
 8006144:	1880      	addcc	r0, r0, r2
 8006146:	1ac0      	subcc	r0, r0, r3
}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop

0800614c <StartDefaultTask>:
// - Launches host communication process
// - Launches command queue/procedure process
// - Initializes hi-precision hardware timer
// - Initializes motor control logic
extern "C" void StartDefaultTask( void* argument )
{
 800614c:	b510      	push	{r4, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
    InitHW();
 8006150:	f7ff ff90 	bl	8006074 <InitHW>
    InitRW();
 8006154:	f7ff ff90 	bl	8006078 <InitRW>

    // Task thread test ...
    osThreadAttr_t attr;
    memset( &attr, 0, sizeof( attr ) );
 8006158:	2224      	movs	r2, #36	; 0x24
 800615a:	2100      	movs	r1, #0
 800615c:	a801      	add	r0, sp, #4
 800615e:	f000 f93c 	bl	80063da <memset>
    attr.name       = "TESTIO";
 8006162:	4b08      	ldr	r3, [pc, #32]	; (8006184 <StartDefaultTask+0x38>)
 8006164:	9301      	str	r3, [sp, #4]
    attr.priority   = osPriorityAboveNormal1;
    attr.stack_size = 256;
    gThHostIO       = osThreadNew( AppTask_HostIO, NULL, &attr );
 8006166:	aa01      	add	r2, sp, #4
    // Task thread test ...
    osThreadAttr_t attr;
    memset( &attr, 0, sizeof( attr ) );
    attr.name       = "TESTIO";
    attr.priority   = osPriorityAboveNormal1;
    attr.stack_size = 256;
 8006168:	f44f 7380 	mov.w	r3, #256	; 0x100
    gThHostIO       = osThreadNew( AppTask_HostIO, NULL, &attr );
 800616c:	4806      	ldr	r0, [pc, #24]	; (8006188 <StartDefaultTask+0x3c>)
    // Task thread test ...
    osThreadAttr_t attr;
    memset( &attr, 0, sizeof( attr ) );
    attr.name       = "TESTIO";
    attr.priority   = osPriorityAboveNormal1;
    attr.stack_size = 256;
 800616e:	9306      	str	r3, [sp, #24]

    // Task thread test ...
    osThreadAttr_t attr;
    memset( &attr, 0, sizeof( attr ) );
    attr.name       = "TESTIO";
    attr.priority   = osPriorityAboveNormal1;
 8006170:	2421      	movs	r4, #33	; 0x21
    attr.stack_size = 256;
    gThHostIO       = osThreadNew( AppTask_HostIO, NULL, &attr );
 8006172:	2100      	movs	r1, #0

    // Task thread test ...
    osThreadAttr_t attr;
    memset( &attr, 0, sizeof( attr ) );
    attr.name       = "TESTIO";
    attr.priority   = osPriorityAboveNormal1;
 8006174:	9407      	str	r4, [sp, #28]
    attr.stack_size = 256;
    gThHostIO       = osThreadNew( AppTask_HostIO, NULL, &attr );
 8006176:	f7fe fdd9 	bl	8004d2c <osThreadNew>
 800617a:	4b04      	ldr	r3, [pc, #16]	; (800618c <StartDefaultTask+0x40>)
 800617c:	6018      	str	r0, [r3, #0]

    osThreadExit();
 800617e:	f7fe fe33 	bl	8004de8 <osThreadExit>
 8006182:	bf00      	nop
 8006184:	080073c4 	.word	0x080073c4
 8006188:	08006191 	.word	0x08006191
 800618c:	20008f08 	.word	0x20008f08

08006190 <AppTask_HostIO>:
// Host IO communication handler
//
//

extern "C" void AppTask_HostIO( void* nouse_ )
{
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	4c0f      	ldr	r4, [pc, #60]	; (80061d0 <AppTask_HostIO+0x40>)
            osDelay( 1 );
            continue;
        }
        else if ( result < 0 ) {
            //! @todo. Reset state machine
            osDelay( OS_MS_TO_TICKS( 100u ) );
 8006194:	4e0f      	ldr	r6, [pc, #60]	; (80061d4 <AppTask_HostIO+0x44>)
// Host IO communication handler
//
//

extern "C" void AppTask_HostIO( void* nouse_ )
{
 8006196:	b090      	sub	sp, #64	; 0x40
    char                 buf[64];
    size_t               head   = 0;
    transceiver_result_t result = 0;
    for ( ;; ) {
        // Try read from buffer
        result = td_read( gHostConnection, buf + head, sizeof( buf ) - head );
 8006198:	4625      	mov	r5, r4
typedef intptr_t transceiver_descriptor_t;

//! Read data from the transceiver.
static inline transceiver_result_t td_read( transceiver_descriptor_t desc, char* buf, size_t rdcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 800619a:	6820      	ldr	r0, [r4, #0]
    return td->read( (void*)desc, buf, rdcnt );
 800619c:	6803      	ldr	r3, [r0, #0]
 800619e:	2240      	movs	r2, #64	; 0x40
 80061a0:	4669      	mov	r1, sp
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4798      	blx	r3

        // If there's nothing to read, sleep for 1 cycle
        if ( result == 0 ) {
 80061a6:	1e02      	subs	r2, r0, #0

//! Write data into the transceiver
static inline transceiver_result_t td_write( transceiver_descriptor_t desc, char* buf, size_t wrcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
    return td->write( (void*)desc, buf, wrcnt );
 80061a8:	4669      	mov	r1, sp
 80061aa:	d005      	beq.n	80061b8 <AppTask_HostIO+0x28>
            osDelay( 1 );
            continue;
        }
        else if ( result < 0 ) {
 80061ac:	db08      	blt.n	80061c0 <AppTask_HostIO+0x30>
}

//! Write data into the transceiver
static inline transceiver_result_t td_write( transceiver_descriptor_t desc, char* buf, size_t wrcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 80061ae:	6828      	ldr	r0, [r5, #0]
    return td->write( (void*)desc, buf, wrcnt );
 80061b0:	6803      	ldr	r3, [r0, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4798      	blx	r3
 80061b6:	e7f0      	b.n	800619a <AppTask_HostIO+0xa>
        // Try read from buffer
        result = td_read( gHostConnection, buf + head, sizeof( buf ) - head );

        // If there's nothing to read, sleep for 1 cycle
        if ( result == 0 ) {
            osDelay( 1 );
 80061b8:	2001      	movs	r0, #1
 80061ba:	f7fe fe1b 	bl	8004df4 <osDelay>
            continue;
 80061be:	e7ec      	b.n	800619a <AppTask_HostIO+0xa>
        }
        else if ( result < 0 ) {
            //! @todo. Reset state machine
            osDelay( OS_MS_TO_TICKS( 100u ) );
 80061c0:	f7fe fdb0 	bl	8004d24 <osKernelGetTickFreq>
 80061c4:	fbb6 f0f0 	udiv	r0, r6, r0
 80061c8:	f7fe fe14 	bl	8004df4 <osDelay>
            continue;
 80061cc:	e7e5      	b.n	800619a <AppTask_HostIO+0xa>
 80061ce:	bf00      	nop
 80061d0:	20009f8c 	.word	0x20009f8c
 80061d4:	000186a0 	.word	0x000186a0

080061d8 <_ZL9cdc_ioctlPvi>:
#include <uEmbedded/transceiver.h>
#include <uEmbedded/uassert.h>
#include <usbd_cdc_if.h>
static transceiver_result_t cdc_read( void* desc, char* buf, size_t len );
static transceiver_result_t cdc_write( void* desc, char const* buf, size_t len );
static transceiver_result_t cdc_ioctl( void* desc, intptr_t cmd ) { return TRANSCEIVER_OK; }
 80061d8:	2000      	movs	r0, #0
 80061da:	4770      	bx	lr

080061dc <_ZL9cdc_closePv>:
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
}

transceiver_result_t cdc_close( void* desc )
{
 80061dc:	b510      	push	{r4, lr}
 80061de:	4604      	mov	r4, r0
}

static inline void AppFree( void* ptr )
{
    void vPortFree( void* );
    vPortFree( ptr );
 80061e0:	6840      	ldr	r0, [r0, #4]
 80061e2:	f7fe fefd 	bl	8004fe0 <vPortFree>
    auto td = reinterpret_cast<usb_rw*>( desc );
    AppFree( td->rdbuf_.buff );
    td->rdbuf_.buff = nullptr;
 80061e6:	2000      	movs	r0, #0
 80061e8:	6060      	str	r0, [r4, #4]
    return TRANSCEIVER_OK;
}
 80061ea:	bd10      	pop	{r4, pc}

080061ec <_ZL9cdc_writePvPKcj>:
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
    return rd;
}

transceiver_result_t cdc_write( void* nouse_, char const* buf, size_t len )
{
 80061ec:	b510      	push	{r4, lr}
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
 80061ee:	4608      	mov	r0, r1
 80061f0:	b291      	uxth	r1, r2
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
    return rd;
}

transceiver_result_t cdc_write( void* nouse_, char const* buf, size_t len )
{
 80061f2:	4614      	mov	r4, r2
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
 80061f4:	f7fa fdd4 	bl	8000da0 <CDC_Transmit_FS>
 80061f8:	2800      	cmp	r0, #0
}
 80061fa:	bf0c      	ite	eq
 80061fc:	4620      	moveq	r0, r4
 80061fe:	2000      	movne	r0, #0
 8006200:	bd10      	pop	{r4, pc}
 8006202:	bf00      	nop

08006204 <_ZL8cdc_readPvPcj>:
    ring_buffer_init( &ret->rdbuf_, AppMalloc( ReadBufferSize ), ReadBufferSize );
    return reinterpret_cast<transceiver_descriptor_t>( ret );
}

static transceiver_result_t cdc_read( void* desc, char* buf, size_t len )
{
 8006204:	b570      	push	{r4, r5, r6, lr}
    auto td = reinterpret_cast<usb_rw*>( desc );
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
 8006206:	1d05      	adds	r5, r0, #4

/*! \breif      Do peeking and consuming at once.
    \return     Number of byte actually read. */
static inline size_t ring_buffer_read(ring_buffer_t *s, void *b, size_t len)
{
    size_t sz = ring_buffer_size(s);
 8006208:	4628      	mov	r0, r5
    ring_buffer_init( &ret->rdbuf_, AppMalloc( ReadBufferSize ), ReadBufferSize );
    return reinterpret_cast<transceiver_descriptor_t>( ret );
}

static transceiver_result_t cdc_read( void* desc, char* buf, size_t len )
{
 800620a:	4614      	mov	r4, r2
 800620c:	460e      	mov	r6, r1
 800620e:	f7ff ff93 	bl	8006138 <ring_buffer_size>
 8006212:	4284      	cmp	r4, r0
 8006214:	bf28      	it	cs
 8006216:	4604      	movcs	r4, r0
    if (sz < len)
        len = sz;
    ring_buffer_peek(s, b, len);
 8006218:	4631      	mov	r1, r6
 800621a:	4622      	mov	r2, r4
 800621c:	4628      	mov	r0, r5
 800621e:	f7ff ff69 	bl	80060f4 <ring_buffer_peek>
    ring_buffer_consume(s, len);
 8006222:	4628      	mov	r0, r5
 8006224:	4621      	mov	r1, r4
 8006226:	f7ff ff5b 	bl	80060e0 <ring_buffer_consume>
    auto td = reinterpret_cast<usb_rw*>( desc );
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
    return rd;
}
 800622a:	4620      	mov	r0, r4
 800622c:	bd70      	pop	{r4, r5, r6, pc}
 800622e:	bf00      	nop

08006230 <OpenUsbHostConnection>:
    transceiver_vtable_t const* vt_ = &usb_vt;
    ring_buffer                 rdbuf_;
} s_rw;

extern "C" transceiver_descriptor_t OpenUsbHostConnection( size_t ReadBufferSize )
{
 8006230:	b538      	push	{r3, r4, r5, lr}
    uassert( s_rw.rdbuf_.buff == nullptr );
 8006232:	4c09      	ldr	r4, [pc, #36]	; (8006258 <OpenUsbHostConnection+0x28>)
 8006234:	6863      	ldr	r3, [r4, #4]
 8006236:	b94b      	cbnz	r3, 800624c <OpenUsbHostConnection+0x1c>
 8006238:	4605      	mov	r5, r0
#endif // __cplusplus

static inline void* AppMalloc( size_t sz )
{
    void* pvPortMalloc( size_t sz );
    return pvPortMalloc( sz );
 800623a:	f7fe fe3b 	bl	8004eb4 <pvPortMalloc>
    auto ret = &s_rw;
    ring_buffer_init( &ret->rdbuf_, AppMalloc( ReadBufferSize ), ReadBufferSize );
 800623e:	462a      	mov	r2, r5
 8006240:	4601      	mov	r1, r0
 8006242:	1d20      	adds	r0, r4, #4
 8006244:	f7ff ff22 	bl	800608c <ring_buffer_init>
    return reinterpret_cast<transceiver_descriptor_t>( ret );
}
 8006248:	4620      	mov	r0, r4
 800624a:	bd38      	pop	{r3, r4, r5, pc}
    ring_buffer                 rdbuf_;
} s_rw;

extern "C" transceiver_descriptor_t OpenUsbHostConnection( size_t ReadBufferSize )
{
    uassert( s_rw.rdbuf_.buff == nullptr );
 800624c:	4b03      	ldr	r3, [pc, #12]	; (800625c <OpenUsbHostConnection+0x2c>)
 800624e:	4a04      	ldr	r2, [pc, #16]	; (8006260 <OpenUsbHostConnection+0x30>)
 8006250:	4804      	ldr	r0, [pc, #16]	; (8006264 <OpenUsbHostConnection+0x34>)
 8006252:	211f      	movs	r1, #31
 8006254:	f000 f850 	bl	80062f8 <__assert_func>
 8006258:	20008f0c 	.word	0x20008f0c
 800625c:	080073cc 	.word	0x080073cc
 8006260:	08007410 	.word	0x08007410
 8006264:	080073e8 	.word	0x080073e8

08006268 <CdcReceiveHandler>:
    return TRANSCEIVER_OK;
}

// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4605      	mov	r5, r0
    ring_buffer_write( &s_rw.rdbuf_, Buf, len );
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
 800626c:	4c07      	ldr	r4, [pc, #28]	; (800628c <CdcReceiveHandler+0x24>)
}

// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
    ring_buffer_write( &s_rw.rdbuf_, Buf, len );
 800626e:	4808      	ldr	r0, [pc, #32]	; (8006290 <CdcReceiveHandler+0x28>)
 8006270:	460a      	mov	r2, r1
 8006272:	4629      	mov	r1, r5
 8006274:	f7ff ff10 	bl	8006098 <ring_buffer_write>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
 8006278:	4629      	mov	r1, r5
 800627a:	4620      	mov	r0, r4
 800627c:	f7ff fe44 	bl	8005f08 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 8006280:	4620      	mov	r0, r4
}
 8006282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
    ring_buffer_write( &s_rw.rdbuf_, Buf, len );
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 8006286:	f7ff be5f 	b.w	8005f48 <USBD_CDC_ReceivePacket>
 800628a:	bf00      	nop
 800628c:	20009564 	.word	0x20009564
 8006290:	20008f10 	.word	0x20008f10

08006294 <_GLOBAL__sub_I_OpenUsbHostConnection>:
    .read  = cdc_read,
    .write = cdc_write,
    .ioctl = cdc_ioctl,
    .close = cdc_close };

static struct usb_rw {
 8006294:	4b01      	ldr	r3, [pc, #4]	; (800629c <_GLOBAL__sub_I_OpenUsbHostConnection+0x8>)
 8006296:	4a02      	ldr	r2, [pc, #8]	; (80062a0 <_GLOBAL__sub_I_OpenUsbHostConnection+0xc>)
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	4770      	bx	lr
 800629c:	20008f0c 	.word	0x20008f0c
 80062a0:	08007400 	.word	0x08007400

080062a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80062a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80062a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80062aa:	e003      	b.n	80062b4 <LoopCopyDataInit>

080062ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80062ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80062b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80062b2:	3104      	adds	r1, #4

080062b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80062b4:	480b      	ldr	r0, [pc, #44]	; (80062e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80062b6:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80062b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80062ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80062bc:	d3f6      	bcc.n	80062ac <CopyDataInit>
  ldr  r2, =_sbss
 80062be:	4a0b      	ldr	r2, [pc, #44]	; (80062ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80062c0:	e002      	b.n	80062c8 <LoopFillZerobss>

080062c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80062c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80062c4:	f842 3b04 	str.w	r3, [r2], #4

080062c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80062c8:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80062ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80062cc:	d3f9      	bcc.n	80062c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80062ce:	f7fd fa0b 	bl	80036e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062d2:	f000 f841 	bl	8006358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062d6:	f7fa f9bd 	bl	8000654 <main>
  bx  lr    
 80062da:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80062dc:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80062e0:	08007530 	.word	0x08007530
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80062e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80062e8:	200001e4 	.word	0x200001e4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80062ec:	200001e4 	.word	0x200001e4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80062f0:	20009f94 	.word	0x20009f94

080062f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062f4:	e7fe      	b.n	80062f4 <ADC_IRQHandler>
	...

080062f8 <__assert_func>:
 80062f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062fa:	461c      	mov	r4, r3
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <__assert_func+0x2c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4605      	mov	r5, r0
 8006302:	68d8      	ldr	r0, [r3, #12]
 8006304:	b912      	cbnz	r2, 800630c <__assert_func+0x14>
 8006306:	4b08      	ldr	r3, [pc, #32]	; (8006328 <__assert_func+0x30>)
 8006308:	461a      	mov	r2, r3
 800630a:	e000      	b.n	800630e <__assert_func+0x16>
 800630c:	4b07      	ldr	r3, [pc, #28]	; (800632c <__assert_func+0x34>)
 800630e:	9202      	str	r2, [sp, #8]
 8006310:	e88d 000a 	stmia.w	sp, {r1, r3}
 8006314:	4622      	mov	r2, r4
 8006316:	462b      	mov	r3, r5
 8006318:	4905      	ldr	r1, [pc, #20]	; (8006330 <__assert_func+0x38>)
 800631a:	f000 f80b 	bl	8006334 <fiprintf>
 800631e:	f000 fcc5 	bl	8006cac <abort>
 8006322:	bf00      	nop
 8006324:	200001e0 	.word	0x200001e0
 8006328:	08007482 	.word	0x08007482
 800632c:	08007447 	.word	0x08007447
 8006330:	08007454 	.word	0x08007454

08006334 <fiprintf>:
 8006334:	b40e      	push	{r1, r2, r3}
 8006336:	b503      	push	{r0, r1, lr}
 8006338:	4601      	mov	r1, r0
 800633a:	ab03      	add	r3, sp, #12
 800633c:	4805      	ldr	r0, [pc, #20]	; (8006354 <fiprintf+0x20>)
 800633e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006342:	6800      	ldr	r0, [r0, #0]
 8006344:	9301      	str	r3, [sp, #4]
 8006346:	f000 f927 	bl	8006598 <_vfiprintf_r>
 800634a:	b002      	add	sp, #8
 800634c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006350:	b003      	add	sp, #12
 8006352:	4770      	bx	lr
 8006354:	200001e0 	.word	0x200001e0

08006358 <__libc_init_array>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <__libc_init_array+0x3c>)
 800635c:	4c0e      	ldr	r4, [pc, #56]	; (8006398 <__libc_init_array+0x40>)
 800635e:	1ae4      	subs	r4, r4, r3
 8006360:	10a4      	asrs	r4, r4, #2
 8006362:	2500      	movs	r5, #0
 8006364:	461e      	mov	r6, r3
 8006366:	42a5      	cmp	r5, r4
 8006368:	d004      	beq.n	8006374 <__libc_init_array+0x1c>
 800636a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800636e:	4798      	blx	r3
 8006370:	3501      	adds	r5, #1
 8006372:	e7f8      	b.n	8006366 <__libc_init_array+0xe>
 8006374:	f000 ffc2 	bl	80072fc <_init>
 8006378:	4c08      	ldr	r4, [pc, #32]	; (800639c <__libc_init_array+0x44>)
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <__libc_init_array+0x48>)
 800637c:	1ae4      	subs	r4, r4, r3
 800637e:	10a4      	asrs	r4, r4, #2
 8006380:	2500      	movs	r5, #0
 8006382:	461e      	mov	r6, r3
 8006384:	42a5      	cmp	r5, r4
 8006386:	d004      	beq.n	8006392 <__libc_init_array+0x3a>
 8006388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800638c:	4798      	blx	r3
 800638e:	3501      	adds	r5, #1
 8006390:	e7f8      	b.n	8006384 <__libc_init_array+0x2c>
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	08007524 	.word	0x08007524
 8006398:	08007524 	.word	0x08007524
 800639c:	0800752c 	.word	0x0800752c
 80063a0:	08007524 	.word	0x08007524

080063a4 <malloc>:
 80063a4:	4b02      	ldr	r3, [pc, #8]	; (80063b0 <malloc+0xc>)
 80063a6:	4601      	mov	r1, r0
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	f000 b86d 	b.w	8006488 <_malloc_r>
 80063ae:	bf00      	nop
 80063b0:	200001e0 	.word	0x200001e0

080063b4 <free>:
 80063b4:	4b02      	ldr	r3, [pc, #8]	; (80063c0 <free+0xc>)
 80063b6:	4601      	mov	r1, r0
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	f000 b817 	b.w	80063ec <_free_r>
 80063be:	bf00      	nop
 80063c0:	200001e0 	.word	0x200001e0

080063c4 <memcpy>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	1e43      	subs	r3, r0, #1
 80063c8:	440a      	add	r2, r1
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d004      	beq.n	80063d8 <memcpy+0x14>
 80063ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d6:	e7f8      	b.n	80063ca <memcpy+0x6>
 80063d8:	bd10      	pop	{r4, pc}

080063da <memset>:
 80063da:	4402      	add	r2, r0
 80063dc:	4603      	mov	r3, r0
 80063de:	4293      	cmp	r3, r2
 80063e0:	d002      	beq.n	80063e8 <memset+0xe>
 80063e2:	f803 1b01 	strb.w	r1, [r3], #1
 80063e6:	e7fa      	b.n	80063de <memset+0x4>
 80063e8:	4770      	bx	lr
	...

080063ec <_free_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4605      	mov	r5, r0
 80063f0:	2900      	cmp	r1, #0
 80063f2:	d046      	beq.n	8006482 <_free_r+0x96>
 80063f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f8:	1f0c      	subs	r4, r1, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bfb8      	it	lt
 80063fe:	18e4      	addlt	r4, r4, r3
 8006400:	f000 fe38 	bl	8007074 <__malloc_lock>
 8006404:	4a1f      	ldr	r2, [pc, #124]	; (8006484 <_free_r+0x98>)
 8006406:	6813      	ldr	r3, [r2, #0]
 8006408:	4611      	mov	r1, r2
 800640a:	b913      	cbnz	r3, 8006412 <_free_r+0x26>
 800640c:	6063      	str	r3, [r4, #4]
 800640e:	6014      	str	r4, [r2, #0]
 8006410:	e032      	b.n	8006478 <_free_r+0x8c>
 8006412:	42a3      	cmp	r3, r4
 8006414:	d90e      	bls.n	8006434 <_free_r+0x48>
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	18a0      	adds	r0, r4, r2
 800641a:	4283      	cmp	r3, r0
 800641c:	bf04      	itt	eq
 800641e:	6818      	ldreq	r0, [r3, #0]
 8006420:	685b      	ldreq	r3, [r3, #4]
 8006422:	6063      	str	r3, [r4, #4]
 8006424:	bf04      	itt	eq
 8006426:	1812      	addeq	r2, r2, r0
 8006428:	6022      	streq	r2, [r4, #0]
 800642a:	600c      	str	r4, [r1, #0]
 800642c:	e024      	b.n	8006478 <_free_r+0x8c>
 800642e:	42a2      	cmp	r2, r4
 8006430:	d803      	bhi.n	800643a <_free_r+0x4e>
 8006432:	4613      	mov	r3, r2
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	2a00      	cmp	r2, #0
 8006438:	d1f9      	bne.n	800642e <_free_r+0x42>
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	1819      	adds	r1, r3, r0
 800643e:	42a1      	cmp	r1, r4
 8006440:	d10b      	bne.n	800645a <_free_r+0x6e>
 8006442:	6821      	ldr	r1, [r4, #0]
 8006444:	4401      	add	r1, r0
 8006446:	1858      	adds	r0, r3, r1
 8006448:	4282      	cmp	r2, r0
 800644a:	6019      	str	r1, [r3, #0]
 800644c:	d114      	bne.n	8006478 <_free_r+0x8c>
 800644e:	6810      	ldr	r0, [r2, #0]
 8006450:	6852      	ldr	r2, [r2, #4]
 8006452:	605a      	str	r2, [r3, #4]
 8006454:	4401      	add	r1, r0
 8006456:	6019      	str	r1, [r3, #0]
 8006458:	e00e      	b.n	8006478 <_free_r+0x8c>
 800645a:	d902      	bls.n	8006462 <_free_r+0x76>
 800645c:	230c      	movs	r3, #12
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	e00a      	b.n	8006478 <_free_r+0x8c>
 8006462:	6821      	ldr	r1, [r4, #0]
 8006464:	1860      	adds	r0, r4, r1
 8006466:	4282      	cmp	r2, r0
 8006468:	bf04      	itt	eq
 800646a:	6810      	ldreq	r0, [r2, #0]
 800646c:	6852      	ldreq	r2, [r2, #4]
 800646e:	6062      	str	r2, [r4, #4]
 8006470:	bf04      	itt	eq
 8006472:	1809      	addeq	r1, r1, r0
 8006474:	6021      	streq	r1, [r4, #0]
 8006476:	605c      	str	r4, [r3, #4]
 8006478:	4628      	mov	r0, r5
 800647a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800647e:	f000 bdfa 	b.w	8007076 <__malloc_unlock>
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	20008f24 	.word	0x20008f24

08006488 <_malloc_r>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	1ccd      	adds	r5, r1, #3
 800648c:	f025 0503 	bic.w	r5, r5, #3
 8006490:	3508      	adds	r5, #8
 8006492:	2d0c      	cmp	r5, #12
 8006494:	bf38      	it	cc
 8006496:	250c      	movcc	r5, #12
 8006498:	2d00      	cmp	r5, #0
 800649a:	4606      	mov	r6, r0
 800649c:	db01      	blt.n	80064a2 <_malloc_r+0x1a>
 800649e:	42a9      	cmp	r1, r5
 80064a0:	d902      	bls.n	80064a8 <_malloc_r+0x20>
 80064a2:	230c      	movs	r3, #12
 80064a4:	6033      	str	r3, [r6, #0]
 80064a6:	e046      	b.n	8006536 <_malloc_r+0xae>
 80064a8:	f000 fde4 	bl	8007074 <__malloc_lock>
 80064ac:	4b23      	ldr	r3, [pc, #140]	; (800653c <_malloc_r+0xb4>)
 80064ae:	681c      	ldr	r4, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	4621      	mov	r1, r4
 80064b4:	b1a1      	cbz	r1, 80064e0 <_malloc_r+0x58>
 80064b6:	680b      	ldr	r3, [r1, #0]
 80064b8:	1b5b      	subs	r3, r3, r5
 80064ba:	d40e      	bmi.n	80064da <_malloc_r+0x52>
 80064bc:	2b0b      	cmp	r3, #11
 80064be:	d903      	bls.n	80064c8 <_malloc_r+0x40>
 80064c0:	600b      	str	r3, [r1, #0]
 80064c2:	18cc      	adds	r4, r1, r3
 80064c4:	50cd      	str	r5, [r1, r3]
 80064c6:	e01e      	b.n	8006506 <_malloc_r+0x7e>
 80064c8:	428c      	cmp	r4, r1
 80064ca:	bf0d      	iteet	eq
 80064cc:	6863      	ldreq	r3, [r4, #4]
 80064ce:	684b      	ldrne	r3, [r1, #4]
 80064d0:	6063      	strne	r3, [r4, #4]
 80064d2:	6013      	streq	r3, [r2, #0]
 80064d4:	bf18      	it	ne
 80064d6:	460c      	movne	r4, r1
 80064d8:	e015      	b.n	8006506 <_malloc_r+0x7e>
 80064da:	460c      	mov	r4, r1
 80064dc:	6849      	ldr	r1, [r1, #4]
 80064de:	e7e9      	b.n	80064b4 <_malloc_r+0x2c>
 80064e0:	4c17      	ldr	r4, [pc, #92]	; (8006540 <_malloc_r+0xb8>)
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	b91b      	cbnz	r3, 80064ee <_malloc_r+0x66>
 80064e6:	4630      	mov	r0, r6
 80064e8:	f000 fb0e 	bl	8006b08 <_sbrk_r>
 80064ec:	6020      	str	r0, [r4, #0]
 80064ee:	4629      	mov	r1, r5
 80064f0:	4630      	mov	r0, r6
 80064f2:	f000 fb09 	bl	8006b08 <_sbrk_r>
 80064f6:	1c43      	adds	r3, r0, #1
 80064f8:	d018      	beq.n	800652c <_malloc_r+0xa4>
 80064fa:	1cc4      	adds	r4, r0, #3
 80064fc:	f024 0403 	bic.w	r4, r4, #3
 8006500:	42a0      	cmp	r0, r4
 8006502:	d10d      	bne.n	8006520 <_malloc_r+0x98>
 8006504:	6025      	str	r5, [r4, #0]
 8006506:	4630      	mov	r0, r6
 8006508:	f000 fdb5 	bl	8007076 <__malloc_unlock>
 800650c:	f104 000b 	add.w	r0, r4, #11
 8006510:	1d23      	adds	r3, r4, #4
 8006512:	f020 0007 	bic.w	r0, r0, #7
 8006516:	1ac3      	subs	r3, r0, r3
 8006518:	d00e      	beq.n	8006538 <_malloc_r+0xb0>
 800651a:	425a      	negs	r2, r3
 800651c:	50e2      	str	r2, [r4, r3]
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	1a21      	subs	r1, r4, r0
 8006522:	4630      	mov	r0, r6
 8006524:	f000 faf0 	bl	8006b08 <_sbrk_r>
 8006528:	3001      	adds	r0, #1
 800652a:	d1eb      	bne.n	8006504 <_malloc_r+0x7c>
 800652c:	230c      	movs	r3, #12
 800652e:	6033      	str	r3, [r6, #0]
 8006530:	4630      	mov	r0, r6
 8006532:	f000 fda0 	bl	8007076 <__malloc_unlock>
 8006536:	2000      	movs	r0, #0
 8006538:	bd70      	pop	{r4, r5, r6, pc}
 800653a:	bf00      	nop
 800653c:	20008f24 	.word	0x20008f24
 8006540:	20008f20 	.word	0x20008f20

08006544 <__sfputc_r>:
 8006544:	6893      	ldr	r3, [r2, #8]
 8006546:	3b01      	subs	r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	b410      	push	{r4}
 800654c:	6093      	str	r3, [r2, #8]
 800654e:	da09      	bge.n	8006564 <__sfputc_r+0x20>
 8006550:	6994      	ldr	r4, [r2, #24]
 8006552:	42a3      	cmp	r3, r4
 8006554:	db02      	blt.n	800655c <__sfputc_r+0x18>
 8006556:	b2cb      	uxtb	r3, r1
 8006558:	2b0a      	cmp	r3, #10
 800655a:	d103      	bne.n	8006564 <__sfputc_r+0x20>
 800655c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006560:	f000 bae2 	b.w	8006b28 <__swbuf_r>
 8006564:	6813      	ldr	r3, [r2, #0]
 8006566:	1c58      	adds	r0, r3, #1
 8006568:	6010      	str	r0, [r2, #0]
 800656a:	7019      	strb	r1, [r3, #0]
 800656c:	b2c8      	uxtb	r0, r1
 800656e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006572:	4770      	bx	lr

08006574 <__sfputs_r>:
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	4606      	mov	r6, r0
 8006578:	460f      	mov	r7, r1
 800657a:	4614      	mov	r4, r2
 800657c:	18d5      	adds	r5, r2, r3
 800657e:	42ac      	cmp	r4, r5
 8006580:	d008      	beq.n	8006594 <__sfputs_r+0x20>
 8006582:	463a      	mov	r2, r7
 8006584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff ffdb 	bl	8006544 <__sfputc_r>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d1f5      	bne.n	800657e <__sfputs_r+0xa>
 8006592:	e000      	b.n	8006596 <__sfputs_r+0x22>
 8006594:	2000      	movs	r0, #0
 8006596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006598 <_vfiprintf_r>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	b09d      	sub	sp, #116	; 0x74
 800659e:	460c      	mov	r4, r1
 80065a0:	4617      	mov	r7, r2
 80065a2:	9303      	str	r3, [sp, #12]
 80065a4:	4606      	mov	r6, r0
 80065a6:	b118      	cbz	r0, 80065b0 <_vfiprintf_r+0x18>
 80065a8:	6983      	ldr	r3, [r0, #24]
 80065aa:	b90b      	cbnz	r3, 80065b0 <_vfiprintf_r+0x18>
 80065ac:	f000 fc78 	bl	8006ea0 <__sinit>
 80065b0:	4b7f      	ldr	r3, [pc, #508]	; (80067b0 <_vfiprintf_r+0x218>)
 80065b2:	429c      	cmp	r4, r3
 80065b4:	d101      	bne.n	80065ba <_vfiprintf_r+0x22>
 80065b6:	6874      	ldr	r4, [r6, #4]
 80065b8:	e008      	b.n	80065cc <_vfiprintf_r+0x34>
 80065ba:	4b7e      	ldr	r3, [pc, #504]	; (80067b4 <_vfiprintf_r+0x21c>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	d101      	bne.n	80065c4 <_vfiprintf_r+0x2c>
 80065c0:	68b4      	ldr	r4, [r6, #8]
 80065c2:	e003      	b.n	80065cc <_vfiprintf_r+0x34>
 80065c4:	4b7c      	ldr	r3, [pc, #496]	; (80067b8 <_vfiprintf_r+0x220>)
 80065c6:	429c      	cmp	r4, r3
 80065c8:	bf08      	it	eq
 80065ca:	68f4      	ldreq	r4, [r6, #12]
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	0718      	lsls	r0, r3, #28
 80065d0:	d50c      	bpl.n	80065ec <_vfiprintf_r+0x54>
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	b153      	cbz	r3, 80065ec <_vfiprintf_r+0x54>
 80065d6:	2300      	movs	r3, #0
 80065d8:	9309      	str	r3, [sp, #36]	; 0x24
 80065da:	2320      	movs	r3, #32
 80065dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065e0:	2330      	movs	r3, #48	; 0x30
 80065e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065e6:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 80067bc <_vfiprintf_r+0x224>
 80065ea:	e044      	b.n	8006676 <_vfiprintf_r+0xde>
 80065ec:	4621      	mov	r1, r4
 80065ee:	4630      	mov	r0, r6
 80065f0:	f000 faee 	bl	8006bd0 <__swsetup_r>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d0ee      	beq.n	80065d6 <_vfiprintf_r+0x3e>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	e0d5      	b.n	80067aa <_vfiprintf_r+0x212>
 80065fe:	9a03      	ldr	r2, [sp, #12]
 8006600:	1d11      	adds	r1, r2, #4
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	9103      	str	r1, [sp, #12]
 8006606:	2a00      	cmp	r2, #0
 8006608:	f280 808c 	bge.w	8006724 <_vfiprintf_r+0x18c>
 800660c:	4252      	negs	r2, r2
 800660e:	f043 0002 	orr.w	r0, r3, #2
 8006612:	9207      	str	r2, [sp, #28]
 8006614:	9004      	str	r0, [sp, #16]
 8006616:	f898 3000 	ldrb.w	r3, [r8]
 800661a:	2b2e      	cmp	r3, #46	; 0x2e
 800661c:	f000 8084 	beq.w	8006728 <_vfiprintf_r+0x190>
 8006620:	2203      	movs	r2, #3
 8006622:	f898 1000 	ldrb.w	r1, [r8]
 8006626:	4865      	ldr	r0, [pc, #404]	; (80067bc <_vfiprintf_r+0x224>)
 8006628:	f7f9 fdea 	bl	8000200 <memchr>
 800662c:	b148      	cbz	r0, 8006642 <_vfiprintf_r+0xaa>
 800662e:	2340      	movs	r3, #64	; 0x40
 8006630:	ebcb 0000 	rsb	r0, fp, r0
 8006634:	fa03 f000 	lsl.w	r0, r3, r0
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	4318      	orrs	r0, r3
 800663c:	9004      	str	r0, [sp, #16]
 800663e:	f108 0801 	add.w	r8, r8, #1
 8006642:	f898 1000 	ldrb.w	r1, [r8]
 8006646:	485e      	ldr	r0, [pc, #376]	; (80067c0 <_vfiprintf_r+0x228>)
 8006648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800664c:	2206      	movs	r2, #6
 800664e:	f108 0701 	add.w	r7, r8, #1
 8006652:	f7f9 fdd5 	bl	8000200 <memchr>
 8006656:	2800      	cmp	r0, #0
 8006658:	f000 8095 	beq.w	8006786 <_vfiprintf_r+0x1ee>
 800665c:	4b59      	ldr	r3, [pc, #356]	; (80067c4 <_vfiprintf_r+0x22c>)
 800665e:	2b00      	cmp	r3, #0
 8006660:	f040 8088 	bne.w	8006774 <_vfiprintf_r+0x1dc>
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	3307      	adds	r3, #7
 8006668:	f023 0307 	bic.w	r3, r3, #7
 800666c:	3308      	adds	r3, #8
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006672:	4453      	add	r3, sl
 8006674:	9309      	str	r3, [sp, #36]	; 0x24
 8006676:	46b8      	mov	r8, r7
 8006678:	4645      	mov	r5, r8
 800667a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800667e:	b91b      	cbnz	r3, 8006688 <_vfiprintf_r+0xf0>
 8006680:	ebb8 0907 	subs.w	r9, r8, r7
 8006684:	d00f      	beq.n	80066a6 <_vfiprintf_r+0x10e>
 8006686:	e003      	b.n	8006690 <_vfiprintf_r+0xf8>
 8006688:	2b25      	cmp	r3, #37	; 0x25
 800668a:	d0f9      	beq.n	8006680 <_vfiprintf_r+0xe8>
 800668c:	46a8      	mov	r8, r5
 800668e:	e7f3      	b.n	8006678 <_vfiprintf_r+0xe0>
 8006690:	464b      	mov	r3, r9
 8006692:	463a      	mov	r2, r7
 8006694:	4621      	mov	r1, r4
 8006696:	4630      	mov	r0, r6
 8006698:	f7ff ff6c 	bl	8006574 <__sfputs_r>
 800669c:	3001      	adds	r0, #1
 800669e:	d07f      	beq.n	80067a0 <_vfiprintf_r+0x208>
 80066a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a2:	444b      	add	r3, r9
 80066a4:	9309      	str	r3, [sp, #36]	; 0x24
 80066a6:	f898 3000 	ldrb.w	r3, [r8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d078      	beq.n	80067a0 <_vfiprintf_r+0x208>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f04f 32ff 	mov.w	r2, #4294967295
 80066b4:	9304      	str	r3, [sp, #16]
 80066b6:	9307      	str	r3, [sp, #28]
 80066b8:	9205      	str	r2, [sp, #20]
 80066ba:	9306      	str	r3, [sp, #24]
 80066bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066c0:	931a      	str	r3, [sp, #104]	; 0x68
 80066c2:	2701      	movs	r7, #1
 80066c4:	2205      	movs	r2, #5
 80066c6:	7829      	ldrb	r1, [r5, #0]
 80066c8:	483f      	ldr	r0, [pc, #252]	; (80067c8 <_vfiprintf_r+0x230>)
 80066ca:	f7f9 fd99 	bl	8000200 <memchr>
 80066ce:	f105 0801 	add.w	r8, r5, #1
 80066d2:	9b04      	ldr	r3, [sp, #16]
 80066d4:	b138      	cbz	r0, 80066e6 <_vfiprintf_r+0x14e>
 80066d6:	4a3c      	ldr	r2, [pc, #240]	; (80067c8 <_vfiprintf_r+0x230>)
 80066d8:	1a80      	subs	r0, r0, r2
 80066da:	fa07 f000 	lsl.w	r0, r7, r0
 80066de:	4318      	orrs	r0, r3
 80066e0:	9004      	str	r0, [sp, #16]
 80066e2:	4645      	mov	r5, r8
 80066e4:	e7ee      	b.n	80066c4 <_vfiprintf_r+0x12c>
 80066e6:	06d9      	lsls	r1, r3, #27
 80066e8:	bf44      	itt	mi
 80066ea:	2220      	movmi	r2, #32
 80066ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066f0:	071a      	lsls	r2, r3, #28
 80066f2:	bf44      	itt	mi
 80066f4:	222b      	movmi	r2, #43	; 0x2b
 80066f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066fa:	782a      	ldrb	r2, [r5, #0]
 80066fc:	2a2a      	cmp	r2, #42	; 0x2a
 80066fe:	f43f af7e 	beq.w	80065fe <_vfiprintf_r+0x66>
 8006702:	9a07      	ldr	r2, [sp, #28]
 8006704:	2100      	movs	r1, #0
 8006706:	200a      	movs	r0, #10
 8006708:	46a8      	mov	r8, r5
 800670a:	3501      	adds	r5, #1
 800670c:	f898 3000 	ldrb.w	r3, [r8]
 8006710:	3b30      	subs	r3, #48	; 0x30
 8006712:	2b09      	cmp	r3, #9
 8006714:	d803      	bhi.n	800671e <_vfiprintf_r+0x186>
 8006716:	fb00 3202 	mla	r2, r0, r2, r3
 800671a:	2101      	movs	r1, #1
 800671c:	e7f4      	b.n	8006708 <_vfiprintf_r+0x170>
 800671e:	2900      	cmp	r1, #0
 8006720:	f43f af79 	beq.w	8006616 <_vfiprintf_r+0x7e>
 8006724:	9207      	str	r2, [sp, #28]
 8006726:	e776      	b.n	8006616 <_vfiprintf_r+0x7e>
 8006728:	f898 3001 	ldrb.w	r3, [r8, #1]
 800672c:	2b2a      	cmp	r3, #42	; 0x2a
 800672e:	d10b      	bne.n	8006748 <_vfiprintf_r+0x1b0>
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	1d1a      	adds	r2, r3, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	9203      	str	r2, [sp, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	bfb8      	it	lt
 800673c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006740:	f108 0802 	add.w	r8, r8, #2
 8006744:	9305      	str	r3, [sp, #20]
 8006746:	e76b      	b.n	8006620 <_vfiprintf_r+0x88>
 8006748:	2300      	movs	r3, #0
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	f108 0001 	add.w	r0, r8, #1
 8006750:	4619      	mov	r1, r3
 8006752:	250a      	movs	r5, #10
 8006754:	4680      	mov	r8, r0
 8006756:	3001      	adds	r0, #1
 8006758:	f898 2000 	ldrb.w	r2, [r8]
 800675c:	3a30      	subs	r2, #48	; 0x30
 800675e:	2a09      	cmp	r2, #9
 8006760:	d803      	bhi.n	800676a <_vfiprintf_r+0x1d2>
 8006762:	fb05 2101 	mla	r1, r5, r1, r2
 8006766:	2301      	movs	r3, #1
 8006768:	e7f4      	b.n	8006754 <_vfiprintf_r+0x1bc>
 800676a:	2b00      	cmp	r3, #0
 800676c:	f43f af58 	beq.w	8006620 <_vfiprintf_r+0x88>
 8006770:	9105      	str	r1, [sp, #20]
 8006772:	e755      	b.n	8006620 <_vfiprintf_r+0x88>
 8006774:	ab03      	add	r3, sp, #12
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	4622      	mov	r2, r4
 800677a:	4b14      	ldr	r3, [pc, #80]	; (80067cc <_vfiprintf_r+0x234>)
 800677c:	a904      	add	r1, sp, #16
 800677e:	4630      	mov	r0, r6
 8006780:	f3af 8000 	nop.w
 8006784:	e007      	b.n	8006796 <_vfiprintf_r+0x1fe>
 8006786:	ab03      	add	r3, sp, #12
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	4622      	mov	r2, r4
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <_vfiprintf_r+0x234>)
 800678e:	a904      	add	r1, sp, #16
 8006790:	4630      	mov	r0, r6
 8006792:	f000 f893 	bl	80068bc <_printf_i>
 8006796:	f1b0 3fff 	cmp.w	r0, #4294967295
 800679a:	4682      	mov	sl, r0
 800679c:	f47f af68 	bne.w	8006670 <_vfiprintf_r+0xd8>
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	065b      	lsls	r3, r3, #25
 80067a4:	f53f af28 	bmi.w	80065f8 <_vfiprintf_r+0x60>
 80067a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067aa:	b01d      	add	sp, #116	; 0x74
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b0:	080074bc 	.word	0x080074bc
 80067b4:	080074dc 	.word	0x080074dc
 80067b8:	080074fc 	.word	0x080074fc
 80067bc:	0800748e 	.word	0x0800748e
 80067c0:	08007492 	.word	0x08007492
 80067c4:	00000000 	.word	0x00000000
 80067c8:	08007488 	.word	0x08007488
 80067cc:	08006575 	.word	0x08006575

080067d0 <_printf_common>:
 80067d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	4691      	mov	r9, r2
 80067d6:	461f      	mov	r7, r3
 80067d8:	690a      	ldr	r2, [r1, #16]
 80067da:	688b      	ldr	r3, [r1, #8]
 80067dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	bfb8      	it	lt
 80067e4:	4613      	movlt	r3, r2
 80067e6:	f8c9 3000 	str.w	r3, [r9]
 80067ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067ee:	4606      	mov	r6, r0
 80067f0:	460c      	mov	r4, r1
 80067f2:	b112      	cbz	r2, 80067fa <_printf_common+0x2a>
 80067f4:	3301      	adds	r3, #1
 80067f6:	f8c9 3000 	str.w	r3, [r9]
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	0699      	lsls	r1, r3, #26
 80067fe:	bf42      	ittt	mi
 8006800:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006804:	3302      	addmi	r3, #2
 8006806:	f8c9 3000 	strmi.w	r3, [r9]
 800680a:	6825      	ldr	r5, [r4, #0]
 800680c:	f015 0506 	ands.w	r5, r5, #6
 8006810:	d110      	bne.n	8006834 <_printf_common+0x64>
 8006812:	f104 0a19 	add.w	sl, r4, #25
 8006816:	e007      	b.n	8006828 <_printf_common+0x58>
 8006818:	2301      	movs	r3, #1
 800681a:	4652      	mov	r2, sl
 800681c:	4639      	mov	r1, r7
 800681e:	4630      	mov	r0, r6
 8006820:	47c0      	blx	r8
 8006822:	3001      	adds	r0, #1
 8006824:	d01a      	beq.n	800685c <_printf_common+0x8c>
 8006826:	3501      	adds	r5, #1
 8006828:	68e3      	ldr	r3, [r4, #12]
 800682a:	f8d9 2000 	ldr.w	r2, [r9]
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	429d      	cmp	r5, r3
 8006832:	dbf1      	blt.n	8006818 <_printf_common+0x48>
 8006834:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	3300      	adds	r3, #0
 800683c:	bf18      	it	ne
 800683e:	2301      	movne	r3, #1
 8006840:	0692      	lsls	r2, r2, #26
 8006842:	d50f      	bpl.n	8006864 <_printf_common+0x94>
 8006844:	18e1      	adds	r1, r4, r3
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	2030      	movs	r0, #48	; 0x30
 800684a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800684e:	4422      	add	r2, r4
 8006850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006858:	3302      	adds	r3, #2
 800685a:	e003      	b.n	8006864 <_printf_common+0x94>
 800685c:	f04f 30ff 	mov.w	r0, #4294967295
 8006860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006868:	4639      	mov	r1, r7
 800686a:	4630      	mov	r0, r6
 800686c:	47c0      	blx	r8
 800686e:	3001      	adds	r0, #1
 8006870:	d0f4      	beq.n	800685c <_printf_common+0x8c>
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	f8d9 5000 	ldr.w	r5, [r9]
 8006878:	68e3      	ldr	r3, [r4, #12]
 800687a:	f002 0206 	and.w	r2, r2, #6
 800687e:	2a04      	cmp	r2, #4
 8006880:	bf08      	it	eq
 8006882:	1b5d      	subeq	r5, r3, r5
 8006884:	6922      	ldr	r2, [r4, #16]
 8006886:	68a3      	ldr	r3, [r4, #8]
 8006888:	bf0c      	ite	eq
 800688a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800688e:	2500      	movne	r5, #0
 8006890:	4293      	cmp	r3, r2
 8006892:	bfc4      	itt	gt
 8006894:	1a9b      	subgt	r3, r3, r2
 8006896:	18ed      	addgt	r5, r5, r3
 8006898:	f04f 0900 	mov.w	r9, #0
 800689c:	341a      	adds	r4, #26
 800689e:	454d      	cmp	r5, r9
 80068a0:	d009      	beq.n	80068b6 <_printf_common+0xe6>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4622      	mov	r2, r4
 80068a6:	4639      	mov	r1, r7
 80068a8:	4630      	mov	r0, r6
 80068aa:	47c0      	blx	r8
 80068ac:	3001      	adds	r0, #1
 80068ae:	d0d5      	beq.n	800685c <_printf_common+0x8c>
 80068b0:	f109 0901 	add.w	r9, r9, #1
 80068b4:	e7f3      	b.n	800689e <_printf_common+0xce>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080068bc <_printf_i>:
 80068bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068c0:	4617      	mov	r7, r2
 80068c2:	7e0a      	ldrb	r2, [r1, #24]
 80068c4:	b085      	sub	sp, #20
 80068c6:	2a6e      	cmp	r2, #110	; 0x6e
 80068c8:	4698      	mov	r8, r3
 80068ca:	4606      	mov	r6, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80068d4:	f000 80ae 	beq.w	8006a34 <_printf_i+0x178>
 80068d8:	d811      	bhi.n	80068fe <_printf_i+0x42>
 80068da:	2a63      	cmp	r2, #99	; 0x63
 80068dc:	d022      	beq.n	8006924 <_printf_i+0x68>
 80068de:	d809      	bhi.n	80068f4 <_printf_i+0x38>
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	f000 80bb 	beq.w	8006a5c <_printf_i+0x1a0>
 80068e6:	2a58      	cmp	r2, #88	; 0x58
 80068e8:	f040 80ca 	bne.w	8006a80 <_printf_i+0x1c4>
 80068ec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80068f0:	4983      	ldr	r1, [pc, #524]	; (8006b00 <_printf_i+0x244>)
 80068f2:	e055      	b.n	80069a0 <_printf_i+0xe4>
 80068f4:	2a64      	cmp	r2, #100	; 0x64
 80068f6:	d01e      	beq.n	8006936 <_printf_i+0x7a>
 80068f8:	2a69      	cmp	r2, #105	; 0x69
 80068fa:	d01c      	beq.n	8006936 <_printf_i+0x7a>
 80068fc:	e0c0      	b.n	8006a80 <_printf_i+0x1c4>
 80068fe:	2a73      	cmp	r2, #115	; 0x73
 8006900:	f000 80b0 	beq.w	8006a64 <_printf_i+0x1a8>
 8006904:	d809      	bhi.n	800691a <_printf_i+0x5e>
 8006906:	2a6f      	cmp	r2, #111	; 0x6f
 8006908:	d02e      	beq.n	8006968 <_printf_i+0xac>
 800690a:	2a70      	cmp	r2, #112	; 0x70
 800690c:	f040 80b8 	bne.w	8006a80 <_printf_i+0x1c4>
 8006910:	680a      	ldr	r2, [r1, #0]
 8006912:	f042 0220 	orr.w	r2, r2, #32
 8006916:	600a      	str	r2, [r1, #0]
 8006918:	e03e      	b.n	8006998 <_printf_i+0xdc>
 800691a:	2a75      	cmp	r2, #117	; 0x75
 800691c:	d024      	beq.n	8006968 <_printf_i+0xac>
 800691e:	2a78      	cmp	r2, #120	; 0x78
 8006920:	d03a      	beq.n	8006998 <_printf_i+0xdc>
 8006922:	e0ad      	b.n	8006a80 <_printf_i+0x1c4>
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800692a:	1d11      	adds	r1, r2, #4
 800692c:	6019      	str	r1, [r3, #0]
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006934:	e0a8      	b.n	8006a88 <_printf_i+0x1cc>
 8006936:	6821      	ldr	r1, [r4, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800693e:	d002      	beq.n	8006946 <_printf_i+0x8a>
 8006940:	1d11      	adds	r1, r2, #4
 8006942:	6019      	str	r1, [r3, #0]
 8006944:	e008      	b.n	8006958 <_printf_i+0x9c>
 8006946:	f011 0f40 	tst.w	r1, #64	; 0x40
 800694a:	f102 0104 	add.w	r1, r2, #4
 800694e:	6019      	str	r1, [r3, #0]
 8006950:	d002      	beq.n	8006958 <_printf_i+0x9c>
 8006952:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006956:	e000      	b.n	800695a <_printf_i+0x9e>
 8006958:	6813      	ldr	r3, [r2, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da3c      	bge.n	80069d8 <_printf_i+0x11c>
 800695e:	222d      	movs	r2, #45	; 0x2d
 8006960:	425b      	negs	r3, r3
 8006962:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006966:	e037      	b.n	80069d8 <_printf_i+0x11c>
 8006968:	6821      	ldr	r1, [r4, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006970:	d002      	beq.n	8006978 <_printf_i+0xbc>
 8006972:	1d11      	adds	r1, r2, #4
 8006974:	6019      	str	r1, [r3, #0]
 8006976:	e007      	b.n	8006988 <_printf_i+0xcc>
 8006978:	f011 0f40 	tst.w	r1, #64	; 0x40
 800697c:	f102 0104 	add.w	r1, r2, #4
 8006980:	6019      	str	r1, [r3, #0]
 8006982:	d001      	beq.n	8006988 <_printf_i+0xcc>
 8006984:	8813      	ldrh	r3, [r2, #0]
 8006986:	e000      	b.n	800698a <_printf_i+0xce>
 8006988:	6813      	ldr	r3, [r2, #0]
 800698a:	7e22      	ldrb	r2, [r4, #24]
 800698c:	495c      	ldr	r1, [pc, #368]	; (8006b00 <_printf_i+0x244>)
 800698e:	2a6f      	cmp	r2, #111	; 0x6f
 8006990:	bf14      	ite	ne
 8006992:	220a      	movne	r2, #10
 8006994:	2208      	moveq	r2, #8
 8006996:	e01b      	b.n	80069d0 <_printf_i+0x114>
 8006998:	2278      	movs	r2, #120	; 0x78
 800699a:	495a      	ldr	r1, [pc, #360]	; (8006b04 <_printf_i+0x248>)
 800699c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80069a8:	f100 0504 	add.w	r5, r0, #4
 80069ac:	601d      	str	r5, [r3, #0]
 80069ae:	d103      	bne.n	80069b8 <_printf_i+0xfc>
 80069b0:	0655      	lsls	r5, r2, #25
 80069b2:	d501      	bpl.n	80069b8 <_printf_i+0xfc>
 80069b4:	8803      	ldrh	r3, [r0, #0]
 80069b6:	e000      	b.n	80069ba <_printf_i+0xfe>
 80069b8:	6803      	ldr	r3, [r0, #0]
 80069ba:	07d0      	lsls	r0, r2, #31
 80069bc:	bf44      	itt	mi
 80069be:	f042 0220 	orrmi.w	r2, r2, #32
 80069c2:	6022      	strmi	r2, [r4, #0]
 80069c4:	b91b      	cbnz	r3, 80069ce <_printf_i+0x112>
 80069c6:	6822      	ldr	r2, [r4, #0]
 80069c8:	f022 0220 	bic.w	r2, r2, #32
 80069cc:	6022      	str	r2, [r4, #0]
 80069ce:	2210      	movs	r2, #16
 80069d0:	2000      	movs	r0, #0
 80069d2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80069d6:	e001      	b.n	80069dc <_printf_i+0x120>
 80069d8:	4949      	ldr	r1, [pc, #292]	; (8006b00 <_printf_i+0x244>)
 80069da:	220a      	movs	r2, #10
 80069dc:	6865      	ldr	r5, [r4, #4]
 80069de:	60a5      	str	r5, [r4, #8]
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	db08      	blt.n	80069f6 <_printf_i+0x13a>
 80069e4:	6820      	ldr	r0, [r4, #0]
 80069e6:	f020 0004 	bic.w	r0, r0, #4
 80069ea:	6020      	str	r0, [r4, #0]
 80069ec:	b92b      	cbnz	r3, 80069fa <_printf_i+0x13e>
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	d17d      	bne.n	8006aee <_printf_i+0x232>
 80069f2:	4675      	mov	r5, lr
 80069f4:	e00c      	b.n	8006a10 <_printf_i+0x154>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d079      	beq.n	8006aee <_printf_i+0x232>
 80069fa:	4675      	mov	r5, lr
 80069fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a00:	fb02 3310 	mls	r3, r2, r0, r3
 8006a04:	5ccb      	ldrb	r3, [r1, r3]
 8006a06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d1f5      	bne.n	80069fc <_printf_i+0x140>
 8006a10:	2a08      	cmp	r2, #8
 8006a12:	d10b      	bne.n	8006a2c <_printf_i+0x170>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	07da      	lsls	r2, r3, #31
 8006a18:	d508      	bpl.n	8006a2c <_printf_i+0x170>
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	6862      	ldr	r2, [r4, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	bfde      	ittt	le
 8006a22:	2330      	movle	r3, #48	; 0x30
 8006a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a2c:	ebc5 030e 	rsb	r3, r5, lr
 8006a30:	6123      	str	r3, [r4, #16]
 8006a32:	e02e      	b.n	8006a92 <_printf_i+0x1d6>
 8006a34:	6808      	ldr	r0, [r1, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	6949      	ldr	r1, [r1, #20]
 8006a3a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006a3e:	d003      	beq.n	8006a48 <_printf_i+0x18c>
 8006a40:	1d10      	adds	r0, r2, #4
 8006a42:	6018      	str	r0, [r3, #0]
 8006a44:	6813      	ldr	r3, [r2, #0]
 8006a46:	e008      	b.n	8006a5a <_printf_i+0x19e>
 8006a48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a4c:	f102 0004 	add.w	r0, r2, #4
 8006a50:	6018      	str	r0, [r3, #0]
 8006a52:	6813      	ldr	r3, [r2, #0]
 8006a54:	d001      	beq.n	8006a5a <_printf_i+0x19e>
 8006a56:	8019      	strh	r1, [r3, #0]
 8006a58:	e000      	b.n	8006a5c <_printf_i+0x1a0>
 8006a5a:	6019      	str	r1, [r3, #0]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	6123      	str	r3, [r4, #16]
 8006a60:	4675      	mov	r5, lr
 8006a62:	e016      	b.n	8006a92 <_printf_i+0x1d6>
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	1d11      	adds	r1, r2, #4
 8006a68:	6019      	str	r1, [r3, #0]
 8006a6a:	6815      	ldr	r5, [r2, #0]
 8006a6c:	6862      	ldr	r2, [r4, #4]
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4628      	mov	r0, r5
 8006a72:	f7f9 fbc5 	bl	8000200 <memchr>
 8006a76:	b108      	cbz	r0, 8006a7c <_printf_i+0x1c0>
 8006a78:	1b40      	subs	r0, r0, r5
 8006a7a:	6060      	str	r0, [r4, #4]
 8006a7c:	6863      	ldr	r3, [r4, #4]
 8006a7e:	e004      	b.n	8006a8a <_printf_i+0x1ce>
 8006a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006a88:	2301      	movs	r3, #1
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a92:	f8cd 8000 	str.w	r8, [sp]
 8006a96:	463b      	mov	r3, r7
 8006a98:	aa03      	add	r2, sp, #12
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7ff fe97 	bl	80067d0 <_printf_common>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d102      	bne.n	8006aac <_printf_i+0x1f0>
 8006aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aaa:	e026      	b.n	8006afa <_printf_i+0x23e>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	462a      	mov	r2, r5
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	47c0      	blx	r8
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d0f5      	beq.n	8006aa6 <_printf_i+0x1ea>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	079b      	lsls	r3, r3, #30
 8006abe:	d510      	bpl.n	8006ae2 <_printf_i+0x226>
 8006ac0:	2500      	movs	r5, #0
 8006ac2:	f104 0919 	add.w	r9, r4, #25
 8006ac6:	e007      	b.n	8006ad8 <_printf_i+0x21c>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	464a      	mov	r2, r9
 8006acc:	4639      	mov	r1, r7
 8006ace:	4630      	mov	r0, r6
 8006ad0:	47c0      	blx	r8
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d0e7      	beq.n	8006aa6 <_printf_i+0x1ea>
 8006ad6:	3501      	adds	r5, #1
 8006ad8:	68e3      	ldr	r3, [r4, #12]
 8006ada:	9a03      	ldr	r2, [sp, #12]
 8006adc:	1a9b      	subs	r3, r3, r2
 8006ade:	429d      	cmp	r5, r3
 8006ae0:	dbf2      	blt.n	8006ac8 <_printf_i+0x20c>
 8006ae2:	68e0      	ldr	r0, [r4, #12]
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	4298      	cmp	r0, r3
 8006ae8:	bfb8      	it	lt
 8006aea:	4618      	movlt	r0, r3
 8006aec:	e005      	b.n	8006afa <_printf_i+0x23e>
 8006aee:	780b      	ldrb	r3, [r1, #0]
 8006af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006af8:	e78a      	b.n	8006a10 <_printf_i+0x154>
 8006afa:	b005      	add	sp, #20
 8006afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b00:	08007499 	.word	0x08007499
 8006b04:	080074aa 	.word	0x080074aa

08006b08 <_sbrk_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4c06      	ldr	r4, [pc, #24]	; (8006b24 <_sbrk_r+0x1c>)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	4605      	mov	r5, r0
 8006b10:	4608      	mov	r0, r1
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	f000 fbda 	bl	80072cc <_sbrk>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d102      	bne.n	8006b22 <_sbrk_r+0x1a>
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	b103      	cbz	r3, 8006b22 <_sbrk_r+0x1a>
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	20009f90 	.word	0x20009f90

08006b28 <__swbuf_r>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	460f      	mov	r7, r1
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	4605      	mov	r5, r0
 8006b30:	b118      	cbz	r0, 8006b3a <__swbuf_r+0x12>
 8006b32:	6983      	ldr	r3, [r0, #24]
 8006b34:	b90b      	cbnz	r3, 8006b3a <__swbuf_r+0x12>
 8006b36:	f000 f9b3 	bl	8006ea0 <__sinit>
 8006b3a:	4b22      	ldr	r3, [pc, #136]	; (8006bc4 <__swbuf_r+0x9c>)
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	d101      	bne.n	8006b44 <__swbuf_r+0x1c>
 8006b40:	686c      	ldr	r4, [r5, #4]
 8006b42:	e008      	b.n	8006b56 <__swbuf_r+0x2e>
 8006b44:	4b20      	ldr	r3, [pc, #128]	; (8006bc8 <__swbuf_r+0xa0>)
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d101      	bne.n	8006b4e <__swbuf_r+0x26>
 8006b4a:	68ac      	ldr	r4, [r5, #8]
 8006b4c:	e003      	b.n	8006b56 <__swbuf_r+0x2e>
 8006b4e:	4b1f      	ldr	r3, [pc, #124]	; (8006bcc <__swbuf_r+0xa4>)
 8006b50:	429c      	cmp	r4, r3
 8006b52:	bf08      	it	eq
 8006b54:	68ec      	ldreq	r4, [r5, #12]
 8006b56:	69a3      	ldr	r3, [r4, #24]
 8006b58:	60a3      	str	r3, [r4, #8]
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	071a      	lsls	r2, r3, #28
 8006b5e:	d509      	bpl.n	8006b74 <__swbuf_r+0x4c>
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	b13b      	cbz	r3, 8006b74 <__swbuf_r+0x4c>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	6920      	ldr	r0, [r4, #16]
 8006b68:	1a18      	subs	r0, r3, r0
 8006b6a:	6963      	ldr	r3, [r4, #20]
 8006b6c:	4298      	cmp	r0, r3
 8006b6e:	b2fe      	uxtb	r6, r7
 8006b70:	db0f      	blt.n	8006b92 <__swbuf_r+0x6a>
 8006b72:	e008      	b.n	8006b86 <__swbuf_r+0x5e>
 8006b74:	4621      	mov	r1, r4
 8006b76:	4628      	mov	r0, r5
 8006b78:	f000 f82a 	bl	8006bd0 <__swsetup_r>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d0f1      	beq.n	8006b64 <__swbuf_r+0x3c>
 8006b80:	f04f 36ff 	mov.w	r6, #4294967295
 8006b84:	e01b      	b.n	8006bbe <__swbuf_r+0x96>
 8006b86:	4621      	mov	r1, r4
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f000 f91f 	bl	8006dcc <_fflush_r>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d1f6      	bne.n	8006b80 <__swbuf_r+0x58>
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	60a3      	str	r3, [r4, #8]
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	6022      	str	r2, [r4, #0]
 8006b9e:	701f      	strb	r7, [r3, #0]
 8006ba0:	6963      	ldr	r3, [r4, #20]
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	4298      	cmp	r0, r3
 8006ba6:	d004      	beq.n	8006bb2 <__swbuf_r+0x8a>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	07db      	lsls	r3, r3, #31
 8006bac:	d507      	bpl.n	8006bbe <__swbuf_r+0x96>
 8006bae:	2e0a      	cmp	r6, #10
 8006bb0:	d105      	bne.n	8006bbe <__swbuf_r+0x96>
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 f909 	bl	8006dcc <_fflush_r>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d1e0      	bne.n	8006b80 <__swbuf_r+0x58>
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	080074bc 	.word	0x080074bc
 8006bc8:	080074dc 	.word	0x080074dc
 8006bcc:	080074fc 	.word	0x080074fc

08006bd0 <__swsetup_r>:
 8006bd0:	4b32      	ldr	r3, [pc, #200]	; (8006c9c <__swsetup_r+0xcc>)
 8006bd2:	b570      	push	{r4, r5, r6, lr}
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	b125      	cbz	r5, 8006be6 <__swsetup_r+0x16>
 8006bdc:	69ab      	ldr	r3, [r5, #24]
 8006bde:	b913      	cbnz	r3, 8006be6 <__swsetup_r+0x16>
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 f95d 	bl	8006ea0 <__sinit>
 8006be6:	4b2e      	ldr	r3, [pc, #184]	; (8006ca0 <__swsetup_r+0xd0>)
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d101      	bne.n	8006bf0 <__swsetup_r+0x20>
 8006bec:	686c      	ldr	r4, [r5, #4]
 8006bee:	e008      	b.n	8006c02 <__swsetup_r+0x32>
 8006bf0:	4b2c      	ldr	r3, [pc, #176]	; (8006ca4 <__swsetup_r+0xd4>)
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d101      	bne.n	8006bfa <__swsetup_r+0x2a>
 8006bf6:	68ac      	ldr	r4, [r5, #8]
 8006bf8:	e003      	b.n	8006c02 <__swsetup_r+0x32>
 8006bfa:	4b2b      	ldr	r3, [pc, #172]	; (8006ca8 <__swsetup_r+0xd8>)
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	bf08      	it	eq
 8006c00:	68ec      	ldreq	r4, [r5, #12]
 8006c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	0715      	lsls	r5, r2, #28
 8006c0a:	d41d      	bmi.n	8006c48 <__swsetup_r+0x78>
 8006c0c:	06d0      	lsls	r0, r2, #27
 8006c0e:	d402      	bmi.n	8006c16 <__swsetup_r+0x46>
 8006c10:	2209      	movs	r2, #9
 8006c12:	6032      	str	r2, [r6, #0]
 8006c14:	e03a      	b.n	8006c8c <__swsetup_r+0xbc>
 8006c16:	0751      	lsls	r1, r2, #29
 8006c18:	d512      	bpl.n	8006c40 <__swsetup_r+0x70>
 8006c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c1c:	b141      	cbz	r1, 8006c30 <__swsetup_r+0x60>
 8006c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c22:	4299      	cmp	r1, r3
 8006c24:	d002      	beq.n	8006c2c <__swsetup_r+0x5c>
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff fbe0 	bl	80063ec <_free_r>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	6363      	str	r3, [r4, #52]	; 0x34
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c36:	81a3      	strh	r3, [r4, #12]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6063      	str	r3, [r4, #4]
 8006c3c:	6923      	ldr	r3, [r4, #16]
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	f043 0308 	orr.w	r3, r3, #8
 8006c46:	81a3      	strh	r3, [r4, #12]
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	b94b      	cbnz	r3, 8006c60 <__swsetup_r+0x90>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c56:	d003      	beq.n	8006c60 <__swsetup_r+0x90>
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 f9ce 	bl	8006ffc <__smakebuf_r>
 8006c60:	89a2      	ldrh	r2, [r4, #12]
 8006c62:	f012 0301 	ands.w	r3, r2, #1
 8006c66:	d005      	beq.n	8006c74 <__swsetup_r+0xa4>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60a3      	str	r3, [r4, #8]
 8006c6c:	6963      	ldr	r3, [r4, #20]
 8006c6e:	425b      	negs	r3, r3
 8006c70:	61a3      	str	r3, [r4, #24]
 8006c72:	e003      	b.n	8006c7c <__swsetup_r+0xac>
 8006c74:	0792      	lsls	r2, r2, #30
 8006c76:	bf58      	it	pl
 8006c78:	6963      	ldrpl	r3, [r4, #20]
 8006c7a:	60a3      	str	r3, [r4, #8]
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	b95b      	cbnz	r3, 8006c98 <__swsetup_r+0xc8>
 8006c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c84:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8006c88:	b280      	uxth	r0, r0
 8006c8a:	b130      	cbz	r0, 8006c9a <__swsetup_r+0xca>
 8006c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c90:	81a3      	strh	r3, [r4, #12]
 8006c92:	f04f 30ff 	mov.w	r0, #4294967295
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	2000      	movs	r0, #0
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	200001e0 	.word	0x200001e0
 8006ca0:	080074bc 	.word	0x080074bc
 8006ca4:	080074dc 	.word	0x080074dc
 8006ca8:	080074fc 	.word	0x080074fc

08006cac <abort>:
 8006cac:	b508      	push	{r3, lr}
 8006cae:	2006      	movs	r0, #6
 8006cb0:	f000 fa0c 	bl	80070cc <raise>
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	f000 fb1f 	bl	80072f8 <_exit>
	...

08006cbc <__sflush_r>:
 8006cbc:	898a      	ldrh	r2, [r1, #12]
 8006cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	0710      	lsls	r0, r2, #28
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	d459      	bmi.n	8006d7e <__sflush_r+0xc2>
 8006cca:	684b      	ldr	r3, [r1, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dc02      	bgt.n	8006cd6 <__sflush_r+0x1a>
 8006cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dd17      	ble.n	8006d06 <__sflush_r+0x4a>
 8006cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cd8:	b1ae      	cbz	r6, 8006d06 <__sflush_r+0x4a>
 8006cda:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006cde:	2300      	movs	r3, #0
 8006ce0:	b292      	uxth	r2, r2
 8006ce2:	682f      	ldr	r7, [r5, #0]
 8006ce4:	602b      	str	r3, [r5, #0]
 8006ce6:	b10a      	cbz	r2, 8006cec <__sflush_r+0x30>
 8006ce8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cea:	e015      	b.n	8006d18 <__sflush_r+0x5c>
 8006cec:	6a21      	ldr	r1, [r4, #32]
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b0      	blx	r6
 8006cf4:	1c41      	adds	r1, r0, #1
 8006cf6:	d10f      	bne.n	8006d18 <__sflush_r+0x5c>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b16b      	cbz	r3, 8006d18 <__sflush_r+0x5c>
 8006cfc:	2b1d      	cmp	r3, #29
 8006cfe:	d001      	beq.n	8006d04 <__sflush_r+0x48>
 8006d00:	2b16      	cmp	r3, #22
 8006d02:	d103      	bne.n	8006d0c <__sflush_r+0x50>
 8006d04:	602f      	str	r7, [r5, #0]
 8006d06:	2000      	movs	r0, #0
 8006d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d12:	81a3      	strh	r3, [r4, #12]
 8006d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	075a      	lsls	r2, r3, #29
 8006d1c:	d505      	bpl.n	8006d2a <__sflush_r+0x6e>
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	1ac0      	subs	r0, r0, r3
 8006d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d24:	b10b      	cbz	r3, 8006d2a <__sflush_r+0x6e>
 8006d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d28:	1ac0      	subs	r0, r0, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d30:	6a21      	ldr	r1, [r4, #32]
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b0      	blx	r6
 8006d36:	1c43      	adds	r3, r0, #1
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	d106      	bne.n	8006d4a <__sflush_r+0x8e>
 8006d3c:	6829      	ldr	r1, [r5, #0]
 8006d3e:	291d      	cmp	r1, #29
 8006d40:	d83a      	bhi.n	8006db8 <__sflush_r+0xfc>
 8006d42:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <__sflush_r+0x10c>)
 8006d44:	40ca      	lsrs	r2, r1
 8006d46:	07d6      	lsls	r6, r2, #31
 8006d48:	d536      	bpl.n	8006db8 <__sflush_r+0xfc>
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	6062      	str	r2, [r4, #4]
 8006d4e:	04d9      	lsls	r1, r3, #19
 8006d50:	6922      	ldr	r2, [r4, #16]
 8006d52:	6022      	str	r2, [r4, #0]
 8006d54:	d504      	bpl.n	8006d60 <__sflush_r+0xa4>
 8006d56:	1c42      	adds	r2, r0, #1
 8006d58:	d101      	bne.n	8006d5e <__sflush_r+0xa2>
 8006d5a:	682b      	ldr	r3, [r5, #0]
 8006d5c:	b903      	cbnz	r3, 8006d60 <__sflush_r+0xa4>
 8006d5e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d62:	602f      	str	r7, [r5, #0]
 8006d64:	2900      	cmp	r1, #0
 8006d66:	d0ce      	beq.n	8006d06 <__sflush_r+0x4a>
 8006d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d6c:	4299      	cmp	r1, r3
 8006d6e:	d002      	beq.n	8006d76 <__sflush_r+0xba>
 8006d70:	4628      	mov	r0, r5
 8006d72:	f7ff fb3b 	bl	80063ec <_free_r>
 8006d76:	2000      	movs	r0, #0
 8006d78:	6360      	str	r0, [r4, #52]	; 0x34
 8006d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d7e:	690f      	ldr	r7, [r1, #16]
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	d0c0      	beq.n	8006d06 <__sflush_r+0x4a>
 8006d84:	0793      	lsls	r3, r2, #30
 8006d86:	680e      	ldr	r6, [r1, #0]
 8006d88:	bf08      	it	eq
 8006d8a:	694b      	ldreq	r3, [r1, #20]
 8006d8c:	600f      	str	r7, [r1, #0]
 8006d8e:	bf18      	it	ne
 8006d90:	2300      	movne	r3, #0
 8006d92:	ebc7 0806 	rsb	r8, r7, r6
 8006d96:	608b      	str	r3, [r1, #8]
 8006d98:	e002      	b.n	8006da0 <__sflush_r+0xe4>
 8006d9a:	4407      	add	r7, r0
 8006d9c:	ebc0 0808 	rsb	r8, r0, r8
 8006da0:	f1b8 0f00 	cmp.w	r8, #0
 8006da4:	ddaf      	ble.n	8006d06 <__sflush_r+0x4a>
 8006da6:	4643      	mov	r3, r8
 8006da8:	463a      	mov	r2, r7
 8006daa:	6a21      	ldr	r1, [r4, #32]
 8006dac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b0      	blx	r6
 8006db2:	2800      	cmp	r0, #0
 8006db4:	dcf1      	bgt.n	8006d9a <__sflush_r+0xde>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20400001 	.word	0x20400001

08006dcc <_fflush_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	690b      	ldr	r3, [r1, #16]
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	b1db      	cbz	r3, 8006e0e <_fflush_r+0x42>
 8006dd6:	b118      	cbz	r0, 8006de0 <_fflush_r+0x14>
 8006dd8:	6983      	ldr	r3, [r0, #24]
 8006dda:	b90b      	cbnz	r3, 8006de0 <_fflush_r+0x14>
 8006ddc:	f000 f860 	bl	8006ea0 <__sinit>
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <_fflush_r+0x48>)
 8006de2:	429c      	cmp	r4, r3
 8006de4:	d101      	bne.n	8006dea <_fflush_r+0x1e>
 8006de6:	686c      	ldr	r4, [r5, #4]
 8006de8:	e008      	b.n	8006dfc <_fflush_r+0x30>
 8006dea:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <_fflush_r+0x4c>)
 8006dec:	429c      	cmp	r4, r3
 8006dee:	d101      	bne.n	8006df4 <_fflush_r+0x28>
 8006df0:	68ac      	ldr	r4, [r5, #8]
 8006df2:	e003      	b.n	8006dfc <_fflush_r+0x30>
 8006df4:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <_fflush_r+0x50>)
 8006df6:	429c      	cmp	r4, r3
 8006df8:	bf08      	it	eq
 8006dfa:	68ec      	ldreq	r4, [r5, #12]
 8006dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e00:	b12b      	cbz	r3, 8006e0e <_fflush_r+0x42>
 8006e02:	4621      	mov	r1, r4
 8006e04:	4628      	mov	r0, r5
 8006e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e0a:	f7ff bf57 	b.w	8006cbc <__sflush_r>
 8006e0e:	2000      	movs	r0, #0
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	bf00      	nop
 8006e14:	080074bc 	.word	0x080074bc
 8006e18:	080074dc 	.word	0x080074dc
 8006e1c:	080074fc 	.word	0x080074fc

08006e20 <_cleanup_r>:
 8006e20:	4901      	ldr	r1, [pc, #4]	; (8006e28 <_cleanup_r+0x8>)
 8006e22:	f000 b8a9 	b.w	8006f78 <_fwalk_reent>
 8006e26:	bf00      	nop
 8006e28:	08006dcd 	.word	0x08006dcd

08006e2c <std.isra.0>:
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	b510      	push	{r4, lr}
 8006e30:	4604      	mov	r4, r0
 8006e32:	6003      	str	r3, [r0, #0]
 8006e34:	6043      	str	r3, [r0, #4]
 8006e36:	6083      	str	r3, [r0, #8]
 8006e38:	8181      	strh	r1, [r0, #12]
 8006e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e3c:	81c2      	strh	r2, [r0, #14]
 8006e3e:	6103      	str	r3, [r0, #16]
 8006e40:	6143      	str	r3, [r0, #20]
 8006e42:	6183      	str	r3, [r0, #24]
 8006e44:	4619      	mov	r1, r3
 8006e46:	2208      	movs	r2, #8
 8006e48:	305c      	adds	r0, #92	; 0x5c
 8006e4a:	f7ff fac6 	bl	80063da <memset>
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <std.isra.0+0x38>)
 8006e50:	6263      	str	r3, [r4, #36]	; 0x24
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <std.isra.0+0x3c>)
 8006e54:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <std.isra.0+0x40>)
 8006e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <std.isra.0+0x44>)
 8006e5c:	6224      	str	r4, [r4, #32]
 8006e5e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	bf00      	nop
 8006e64:	08007105 	.word	0x08007105
 8006e68:	08007127 	.word	0x08007127
 8006e6c:	0800715f 	.word	0x0800715f
 8006e70:	08007183 	.word	0x08007183

08006e74 <__sfmoreglue>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	2368      	movs	r3, #104	; 0x68
 8006e78:	1e4d      	subs	r5, r1, #1
 8006e7a:	435d      	muls	r5, r3
 8006e7c:	460e      	mov	r6, r1
 8006e7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e82:	f7ff fb01 	bl	8006488 <_malloc_r>
 8006e86:	4604      	mov	r4, r0
 8006e88:	b140      	cbz	r0, 8006e9c <__sfmoreglue+0x28>
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	e880 0042 	stmia.w	r0, {r1, r6}
 8006e90:	300c      	adds	r0, #12
 8006e92:	60a0      	str	r0, [r4, #8]
 8006e94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e98:	f7ff fa9f 	bl	80063da <memset>
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}

08006ea0 <__sinit>:
 8006ea0:	6983      	ldr	r3, [r0, #24]
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	bb33      	cbnz	r3, 8006ef6 <__sinit+0x56>
 8006ea8:	6483      	str	r3, [r0, #72]	; 0x48
 8006eaa:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006eac:	6503      	str	r3, [r0, #80]	; 0x50
 8006eae:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <__sinit+0x58>)
 8006eb0:	4a12      	ldr	r2, [pc, #72]	; (8006efc <__sinit+0x5c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6282      	str	r2, [r0, #40]	; 0x28
 8006eb6:	4298      	cmp	r0, r3
 8006eb8:	bf04      	itt	eq
 8006eba:	2301      	moveq	r3, #1
 8006ebc:	6183      	streq	r3, [r0, #24]
 8006ebe:	f000 f81f 	bl	8006f00 <__sfp>
 8006ec2:	6060      	str	r0, [r4, #4]
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 f81b 	bl	8006f00 <__sfp>
 8006eca:	60a0      	str	r0, [r4, #8]
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 f817 	bl	8006f00 <__sfp>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	60e0      	str	r0, [r4, #12]
 8006ed6:	2104      	movs	r1, #4
 8006ed8:	6860      	ldr	r0, [r4, #4]
 8006eda:	f7ff ffa7 	bl	8006e2c <std.isra.0>
 8006ede:	2201      	movs	r2, #1
 8006ee0:	2109      	movs	r1, #9
 8006ee2:	68a0      	ldr	r0, [r4, #8]
 8006ee4:	f7ff ffa2 	bl	8006e2c <std.isra.0>
 8006ee8:	2202      	movs	r2, #2
 8006eea:	2112      	movs	r1, #18
 8006eec:	68e0      	ldr	r0, [r4, #12]
 8006eee:	f7ff ff9d 	bl	8006e2c <std.isra.0>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	61a3      	str	r3, [r4, #24]
 8006ef6:	bd10      	pop	{r4, pc}
 8006ef8:	08007484 	.word	0x08007484
 8006efc:	08006e21 	.word	0x08006e21

08006f00 <__sfp>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <__sfp+0x74>)
 8006f04:	681e      	ldr	r6, [r3, #0]
 8006f06:	69b3      	ldr	r3, [r6, #24]
 8006f08:	4607      	mov	r7, r0
 8006f0a:	b913      	cbnz	r3, 8006f12 <__sfp+0x12>
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f7ff ffc7 	bl	8006ea0 <__sinit>
 8006f12:	3648      	adds	r6, #72	; 0x48
 8006f14:	68b4      	ldr	r4, [r6, #8]
 8006f16:	6873      	ldr	r3, [r6, #4]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	d404      	bmi.n	8006f26 <__sfp+0x26>
 8006f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f20:	b17d      	cbz	r5, 8006f42 <__sfp+0x42>
 8006f22:	3468      	adds	r4, #104	; 0x68
 8006f24:	e7f8      	b.n	8006f18 <__sfp+0x18>
 8006f26:	6833      	ldr	r3, [r6, #0]
 8006f28:	b10b      	cbz	r3, 8006f2e <__sfp+0x2e>
 8006f2a:	6836      	ldr	r6, [r6, #0]
 8006f2c:	e7f2      	b.n	8006f14 <__sfp+0x14>
 8006f2e:	2104      	movs	r1, #4
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff ff9f 	bl	8006e74 <__sfmoreglue>
 8006f36:	6030      	str	r0, [r6, #0]
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d1f6      	bne.n	8006f2a <__sfp+0x2a>
 8006f3c:	230c      	movs	r3, #12
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f46:	81e3      	strh	r3, [r4, #14]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	6665      	str	r5, [r4, #100]	; 0x64
 8006f4e:	6025      	str	r5, [r4, #0]
 8006f50:	60a5      	str	r5, [r4, #8]
 8006f52:	6065      	str	r5, [r4, #4]
 8006f54:	6125      	str	r5, [r4, #16]
 8006f56:	6165      	str	r5, [r4, #20]
 8006f58:	61a5      	str	r5, [r4, #24]
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f62:	f7ff fa3a 	bl	80063da <memset>
 8006f66:	6365      	str	r5, [r4, #52]	; 0x34
 8006f68:	63a5      	str	r5, [r4, #56]	; 0x38
 8006f6a:	64a5      	str	r5, [r4, #72]	; 0x48
 8006f6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006f6e:	4620      	mov	r0, r4
 8006f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f72:	bf00      	nop
 8006f74:	08007484 	.word	0x08007484

08006f78 <_fwalk_reent>:
 8006f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	4689      	mov	r9, r1
 8006f80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f84:	2600      	movs	r6, #0
 8006f86:	b194      	cbz	r4, 8006fae <_fwalk_reent+0x36>
 8006f88:	68a5      	ldr	r5, [r4, #8]
 8006f8a:	6867      	ldr	r7, [r4, #4]
 8006f8c:	3f01      	subs	r7, #1
 8006f8e:	d40c      	bmi.n	8006faa <_fwalk_reent+0x32>
 8006f90:	89ab      	ldrh	r3, [r5, #12]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d907      	bls.n	8006fa6 <_fwalk_reent+0x2e>
 8006f96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	d003      	beq.n	8006fa6 <_fwalk_reent+0x2e>
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	47c8      	blx	r9
 8006fa4:	4306      	orrs	r6, r0
 8006fa6:	3568      	adds	r5, #104	; 0x68
 8006fa8:	e7f0      	b.n	8006f8c <_fwalk_reent+0x14>
 8006faa:	6824      	ldr	r4, [r4, #0]
 8006fac:	e7eb      	b.n	8006f86 <_fwalk_reent+0xe>
 8006fae:	4630      	mov	r0, r6
 8006fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006fb4 <__swhatbuf_r>:
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	460e      	mov	r6, r1
 8006fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	b090      	sub	sp, #64	; 0x40
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	461d      	mov	r5, r3
 8006fc4:	da06      	bge.n	8006fd4 <__swhatbuf_r+0x20>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	89b3      	ldrh	r3, [r6, #12]
 8006fcc:	061a      	lsls	r2, r3, #24
 8006fce:	d50e      	bpl.n	8006fee <__swhatbuf_r+0x3a>
 8006fd0:	2340      	movs	r3, #64	; 0x40
 8006fd2:	e00e      	b.n	8006ff2 <__swhatbuf_r+0x3e>
 8006fd4:	aa01      	add	r2, sp, #4
 8006fd6:	f000 f8fb 	bl	80071d0 <_fstat_r>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	dbf3      	blt.n	8006fc6 <__swhatbuf_r+0x12>
 8006fde:	9a02      	ldr	r2, [sp, #8]
 8006fe0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fe4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fe8:	425a      	negs	r2, r3
 8006fea:	415a      	adcs	r2, r3
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	b010      	add	sp, #64	; 0x40
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ffc <__smakebuf_r>:
 8006ffc:	898b      	ldrh	r3, [r1, #12]
 8006ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007000:	079e      	lsls	r6, r3, #30
 8007002:	4605      	mov	r5, r0
 8007004:	460c      	mov	r4, r1
 8007006:	d410      	bmi.n	800702a <__smakebuf_r+0x2e>
 8007008:	ab01      	add	r3, sp, #4
 800700a:	466a      	mov	r2, sp
 800700c:	f7ff ffd2 	bl	8006fb4 <__swhatbuf_r>
 8007010:	9900      	ldr	r1, [sp, #0]
 8007012:	4606      	mov	r6, r0
 8007014:	4628      	mov	r0, r5
 8007016:	f7ff fa37 	bl	8006488 <_malloc_r>
 800701a:	b968      	cbnz	r0, 8007038 <__smakebuf_r+0x3c>
 800701c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007020:	059a      	lsls	r2, r3, #22
 8007022:	d422      	bmi.n	800706a <__smakebuf_r+0x6e>
 8007024:	f043 0302 	orr.w	r3, r3, #2
 8007028:	81a3      	strh	r3, [r4, #12]
 800702a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	2301      	movs	r3, #1
 8007034:	6163      	str	r3, [r4, #20]
 8007036:	e018      	b.n	800706a <__smakebuf_r+0x6e>
 8007038:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <__smakebuf_r+0x74>)
 800703a:	62ab      	str	r3, [r5, #40]	; 0x28
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	6020      	str	r0, [r4, #0]
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	9b00      	ldr	r3, [sp, #0]
 8007048:	6163      	str	r3, [r4, #20]
 800704a:	9b01      	ldr	r3, [sp, #4]
 800704c:	6120      	str	r0, [r4, #16]
 800704e:	b14b      	cbz	r3, 8007064 <__smakebuf_r+0x68>
 8007050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007054:	4628      	mov	r0, r5
 8007056:	f000 f8cd 	bl	80071f4 <_isatty_r>
 800705a:	b118      	cbz	r0, 8007064 <__smakebuf_r+0x68>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	89a0      	ldrh	r0, [r4, #12]
 8007066:	4330      	orrs	r0, r6
 8007068:	81a0      	strh	r0, [r4, #12]
 800706a:	b002      	add	sp, #8
 800706c:	bd70      	pop	{r4, r5, r6, pc}
 800706e:	bf00      	nop
 8007070:	08006e21 	.word	0x08006e21

08007074 <__malloc_lock>:
 8007074:	4770      	bx	lr

08007076 <__malloc_unlock>:
 8007076:	4770      	bx	lr

08007078 <_raise_r>:
 8007078:	291f      	cmp	r1, #31
 800707a:	b538      	push	{r3, r4, r5, lr}
 800707c:	4604      	mov	r4, r0
 800707e:	460d      	mov	r5, r1
 8007080:	d904      	bls.n	800708c <_raise_r+0x14>
 8007082:	2316      	movs	r3, #22
 8007084:	6003      	str	r3, [r0, #0]
 8007086:	f04f 30ff 	mov.w	r0, #4294967295
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800708e:	b112      	cbz	r2, 8007096 <_raise_r+0x1e>
 8007090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007094:	b94b      	cbnz	r3, 80070aa <_raise_r+0x32>
 8007096:	4620      	mov	r0, r4
 8007098:	f000 f832 	bl	8007100 <_getpid_r>
 800709c:	462a      	mov	r2, r5
 800709e:	4601      	mov	r1, r0
 80070a0:	4620      	mov	r0, r4
 80070a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a6:	f000 b819 	b.w	80070dc <_kill_r>
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d00c      	beq.n	80070c8 <_raise_r+0x50>
 80070ae:	1c59      	adds	r1, r3, #1
 80070b0:	d103      	bne.n	80070ba <_raise_r+0x42>
 80070b2:	2316      	movs	r3, #22
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	2001      	movs	r0, #1
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
 80070ba:	2400      	movs	r4, #0
 80070bc:	4628      	mov	r0, r5
 80070be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80070c2:	4798      	blx	r3
 80070c4:	4620      	mov	r0, r4
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	2000      	movs	r0, #0
 80070ca:	bd38      	pop	{r3, r4, r5, pc}

080070cc <raise>:
 80070cc:	4b02      	ldr	r3, [pc, #8]	; (80070d8 <raise+0xc>)
 80070ce:	4601      	mov	r1, r0
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	f7ff bfd1 	b.w	8007078 <_raise_r>
 80070d6:	bf00      	nop
 80070d8:	200001e0 	.word	0x200001e0

080070dc <_kill_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4c07      	ldr	r4, [pc, #28]	; (80070fc <_kill_r+0x20>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4605      	mov	r5, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	f000 f8d7 	bl	800729c <_kill>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d102      	bne.n	80070f8 <_kill_r+0x1c>
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	b103      	cbz	r3, 80070f8 <_kill_r+0x1c>
 80070f6:	602b      	str	r3, [r5, #0]
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	bf00      	nop
 80070fc:	20009f90 	.word	0x20009f90

08007100 <_getpid_r>:
 8007100:	f000 b8bc 	b.w	800727c <_getpid>

08007104 <__sread>:
 8007104:	b510      	push	{r4, lr}
 8007106:	460c      	mov	r4, r1
 8007108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710c:	f000 f894 	bl	8007238 <_read_r>
 8007110:	2800      	cmp	r0, #0
 8007112:	bfab      	itete	ge
 8007114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007116:	89a3      	ldrhlt	r3, [r4, #12]
 8007118:	181b      	addge	r3, r3, r0
 800711a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800711e:	bfac      	ite	ge
 8007120:	6563      	strge	r3, [r4, #84]	; 0x54
 8007122:	81a3      	strhlt	r3, [r4, #12]
 8007124:	bd10      	pop	{r4, pc}

08007126 <__swrite>:
 8007126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712a:	461f      	mov	r7, r3
 800712c:	898b      	ldrh	r3, [r1, #12]
 800712e:	05db      	lsls	r3, r3, #23
 8007130:	4605      	mov	r5, r0
 8007132:	460c      	mov	r4, r1
 8007134:	4616      	mov	r6, r2
 8007136:	d505      	bpl.n	8007144 <__swrite+0x1e>
 8007138:	2302      	movs	r3, #2
 800713a:	2200      	movs	r2, #0
 800713c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007140:	f000 f868 	bl	8007214 <_lseek_r>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800714a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	4632      	mov	r2, r6
 8007152:	463b      	mov	r3, r7
 8007154:	4628      	mov	r0, r5
 8007156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800715a:	f000 b817 	b.w	800718c <_write_r>

0800715e <__sseek>:
 800715e:	b510      	push	{r4, lr}
 8007160:	460c      	mov	r4, r1
 8007162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007166:	f000 f855 	bl	8007214 <_lseek_r>
 800716a:	1c43      	adds	r3, r0, #1
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	bf15      	itete	ne
 8007170:	6560      	strne	r0, [r4, #84]	; 0x54
 8007172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800717a:	81a3      	strheq	r3, [r4, #12]
 800717c:	bf18      	it	ne
 800717e:	81a3      	strhne	r3, [r4, #12]
 8007180:	bd10      	pop	{r4, pc}

08007182 <__sclose>:
 8007182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007186:	f000 b813 	b.w	80071b0 <_close_r>
	...

0800718c <_write_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4c07      	ldr	r4, [pc, #28]	; (80071ac <_write_r+0x20>)
 8007190:	4605      	mov	r5, r0
 8007192:	4608      	mov	r0, r1
 8007194:	4611      	mov	r1, r2
 8007196:	2200      	movs	r2, #0
 8007198:	6022      	str	r2, [r4, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	f000 f8a4 	bl	80072e8 <_write>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_write_r+0x1e>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_write_r+0x1e>
 80071a8:	602b      	str	r3, [r5, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	20009f90 	.word	0x20009f90

080071b0 <_close_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4c06      	ldr	r4, [pc, #24]	; (80071cc <_close_r+0x1c>)
 80071b4:	2300      	movs	r3, #0
 80071b6:	4605      	mov	r5, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	f000 f84e 	bl	800725c <_close>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_close_r+0x1a>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_close_r+0x1a>
 80071c8:	602b      	str	r3, [r5, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20009f90 	.word	0x20009f90

080071d0 <_fstat_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4c07      	ldr	r4, [pc, #28]	; (80071f0 <_fstat_r+0x20>)
 80071d4:	2300      	movs	r3, #0
 80071d6:	4605      	mov	r5, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	f000 f845 	bl	800726c <_fstat>
 80071e2:	1c43      	adds	r3, r0, #1
 80071e4:	d102      	bne.n	80071ec <_fstat_r+0x1c>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	b103      	cbz	r3, 80071ec <_fstat_r+0x1c>
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	bf00      	nop
 80071f0:	20009f90 	.word	0x20009f90

080071f4 <_isatty_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4c06      	ldr	r4, [pc, #24]	; (8007210 <_isatty_r+0x1c>)
 80071f8:	2300      	movs	r3, #0
 80071fa:	4605      	mov	r5, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	f000 f844 	bl	800728c <_isatty>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d102      	bne.n	800720e <_isatty_r+0x1a>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	b103      	cbz	r3, 800720e <_isatty_r+0x1a>
 800720c:	602b      	str	r3, [r5, #0]
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	20009f90 	.word	0x20009f90

08007214 <_lseek_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4c07      	ldr	r4, [pc, #28]	; (8007234 <_lseek_r+0x20>)
 8007218:	4605      	mov	r5, r0
 800721a:	4608      	mov	r0, r1
 800721c:	4611      	mov	r1, r2
 800721e:	2200      	movs	r2, #0
 8007220:	6022      	str	r2, [r4, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	f000 f842 	bl	80072ac <_lseek>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_lseek_r+0x1e>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	b103      	cbz	r3, 8007232 <_lseek_r+0x1e>
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	20009f90 	.word	0x20009f90

08007238 <_read_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4c07      	ldr	r4, [pc, #28]	; (8007258 <_read_r+0x20>)
 800723c:	4605      	mov	r5, r0
 800723e:	4608      	mov	r0, r1
 8007240:	4611      	mov	r1, r2
 8007242:	2200      	movs	r2, #0
 8007244:	6022      	str	r2, [r4, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f000 f838 	bl	80072bc <_read>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_read_r+0x1e>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	b103      	cbz	r3, 8007256 <_read_r+0x1e>
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20009f90 	.word	0x20009f90

0800725c <_close>:
 800725c:	4b02      	ldr	r3, [pc, #8]	; (8007268 <_close+0xc>)
 800725e:	2258      	movs	r2, #88	; 0x58
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	f04f 30ff 	mov.w	r0, #4294967295
 8007266:	4770      	bx	lr
 8007268:	20009f90 	.word	0x20009f90

0800726c <_fstat>:
 800726c:	4b02      	ldr	r3, [pc, #8]	; (8007278 <_fstat+0xc>)
 800726e:	2258      	movs	r2, #88	; 0x58
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	f04f 30ff 	mov.w	r0, #4294967295
 8007276:	4770      	bx	lr
 8007278:	20009f90 	.word	0x20009f90

0800727c <_getpid>:
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <_getpid+0xc>)
 800727e:	2258      	movs	r2, #88	; 0x58
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	4770      	bx	lr
 8007288:	20009f90 	.word	0x20009f90

0800728c <_isatty>:
 800728c:	4b02      	ldr	r3, [pc, #8]	; (8007298 <_isatty+0xc>)
 800728e:	2258      	movs	r2, #88	; 0x58
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	2000      	movs	r0, #0
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	20009f90 	.word	0x20009f90

0800729c <_kill>:
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <_kill+0xc>)
 800729e:	2258      	movs	r2, #88	; 0x58
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295
 80072a6:	4770      	bx	lr
 80072a8:	20009f90 	.word	0x20009f90

080072ac <_lseek>:
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <_lseek+0xc>)
 80072ae:	2258      	movs	r2, #88	; 0x58
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	f04f 30ff 	mov.w	r0, #4294967295
 80072b6:	4770      	bx	lr
 80072b8:	20009f90 	.word	0x20009f90

080072bc <_read>:
 80072bc:	4b02      	ldr	r3, [pc, #8]	; (80072c8 <_read+0xc>)
 80072be:	2258      	movs	r2, #88	; 0x58
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	f04f 30ff 	mov.w	r0, #4294967295
 80072c6:	4770      	bx	lr
 80072c8:	20009f90 	.word	0x20009f90

080072cc <_sbrk>:
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <_sbrk+0x14>)
 80072ce:	4905      	ldr	r1, [pc, #20]	; (80072e4 <_sbrk+0x18>)
 80072d0:	6813      	ldr	r3, [r2, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bf08      	it	eq
 80072d6:	460b      	moveq	r3, r1
 80072d8:	4418      	add	r0, r3
 80072da:	6010      	str	r0, [r2, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	4770      	bx	lr
 80072e0:	20008f28 	.word	0x20008f28
 80072e4:	20009f98 	.word	0x20009f98

080072e8 <_write>:
 80072e8:	4b02      	ldr	r3, [pc, #8]	; (80072f4 <_write+0xc>)
 80072ea:	2258      	movs	r2, #88	; 0x58
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295
 80072f2:	4770      	bx	lr
 80072f4:	20009f90 	.word	0x20009f90

080072f8 <_exit>:
 80072f8:	e7fe      	b.n	80072f8 <_exit>
 80072fa:	bf00      	nop

080072fc <_init>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr

08007308 <_fini>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr
