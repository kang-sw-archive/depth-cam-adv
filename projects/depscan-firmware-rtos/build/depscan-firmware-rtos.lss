
build/depscan-firmware-rtos.elf:     file format elf32-littlearm
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800703d


Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084a0 	.word	0x080084a0

080001c4 <frame_dummy>:
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <frame_dummy+0x24>)
 80001c6:	b510      	push	{r4, lr}
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <frame_dummy+0x28>)
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <frame_dummy+0x2c>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	4808      	ldr	r0, [pc, #32]	; (80001f4 <frame_dummy+0x30>)
 80001d4:	6803      	ldr	r3, [r0, #0]
 80001d6:	b903      	cbnz	r3, 80001da <frame_dummy+0x16>
 80001d8:	bd10      	pop	{r4, pc}
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <frame_dummy+0x34>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d0fb      	beq.n	80001d8 <frame_dummy+0x14>
 80001e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001e4:	4718      	bx	r3
 80001e6:	bf00      	nop
 80001e8:	00000000 	.word	0x00000000
 80001ec:	200001ec 	.word	0x200001ec
 80001f0:	080084a0 	.word	0x080084a0
 80001f4:	200001e8 	.word	0x200001e8
 80001f8:	00000000 	.word	0x00000000

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr
 800020c:	0000      	movs	r0, r0
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97e 	b.w	80005c4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460e      	mov	r6, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9d08      	ldr	r5, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d150      	bne.n	8000392 <__udivmoddi4+0xb2>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96c      	bls.n	80003d0 <__udivmoddi4+0xf0>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0420 	rsb	r4, lr, #32
 8000304:	fa20 f404 	lsr.w	r4, r0, r4
 8000308:	fa01 f60e 	lsl.w	r6, r1, lr
 800030c:	ea44 0c06 	orr.w	ip, r4, r6
 8000310:	fa02 f70e 	lsl.w	r7, r2, lr
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	fbbc f0f9 	udiv	r0, ip, r9
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb09 c610 	mls	r6, r9, r0, ip
 800032a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800032e:	fb00 f308 	mul.w	r3, r0, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x6a>
 8000336:	19f6      	adds	r6, r6, r7
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	f080 8122 	bcs.w	8000584 <__udivmoddi4+0x2a4>
 8000340:	42b3      	cmp	r3, r6
 8000342:	f240 811f 	bls.w	8000584 <__udivmoddi4+0x2a4>
 8000346:	3802      	subs	r0, #2
 8000348:	443e      	add	r6, r7
 800034a:	1af6      	subs	r6, r6, r3
 800034c:	b2a2      	uxth	r2, r4
 800034e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000352:	fb09 6613 	mls	r6, r9, r3, r6
 8000356:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800035a:	fb03 f808 	mul.w	r8, r3, r8
 800035e:	45a0      	cmp	r8, r4
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x96>
 8000362:	19e4      	adds	r4, r4, r7
 8000364:	f103 32ff 	add.w	r2, r3, #4294967295
 8000368:	f080 810a 	bcs.w	8000580 <__udivmoddi4+0x2a0>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f240 8107 	bls.w	8000580 <__udivmoddi4+0x2a0>
 8000372:	3b02      	subs	r3, #2
 8000374:	443c      	add	r4, r7
 8000376:	ebc8 0404 	rsb	r4, r8, r4
 800037a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037e:	2100      	movs	r1, #0
 8000380:	2d00      	cmp	r5, #0
 8000382:	d062      	beq.n	800044a <__udivmoddi4+0x16a>
 8000384:	fa24 f40e 	lsr.w	r4, r4, lr
 8000388:	2300      	movs	r3, #0
 800038a:	602c      	str	r4, [r5, #0]
 800038c:	606b      	str	r3, [r5, #4]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d907      	bls.n	80003a6 <__udivmoddi4+0xc6>
 8000396:	2d00      	cmp	r5, #0
 8000398:	d055      	beq.n	8000446 <__udivmoddi4+0x166>
 800039a:	2100      	movs	r1, #0
 800039c:	e885 0041 	stmia.w	r5, {r0, r6}
 80003a0:	4608      	mov	r0, r1
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x1f0>
 80003b0:	42b3      	cmp	r3, r6
 80003b2:	d302      	bcc.n	80003ba <__udivmoddi4+0xda>
 80003b4:	4282      	cmp	r2, r0
 80003b6:	f200 80f8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 80003ba:	1a84      	subs	r4, r0, r2
 80003bc:	eb66 0603 	sbc.w	r6, r6, r3
 80003c0:	2001      	movs	r0, #1
 80003c2:	46b4      	mov	ip, r6
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d040      	beq.n	800044a <__udivmoddi4+0x16a>
 80003c8:	e885 1010 	stmia.w	r5, {r4, ip}
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	b912      	cbnz	r2, 80003d8 <__udivmoddi4+0xf8>
 80003d2:	2701      	movs	r7, #1
 80003d4:	fbb7 f7f2 	udiv	r7, r7, r2
 80003d8:	fab7 fe87 	clz	lr, r7
 80003dc:	f1be 0f00 	cmp.w	lr, #0
 80003e0:	d135      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e2:	1bf3      	subs	r3, r6, r7
 80003e4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f2:	0c22      	lsrs	r2, r4, #16
 80003f4:	fb08 3610 	mls	r6, r8, r0, r3
 80003f8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80003fc:	fb0c f300 	mul.w	r3, ip, r0
 8000400:	42b3      	cmp	r3, r6
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19f6      	adds	r6, r6, r7
 8000406:	f100 32ff 	add.w	r2, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42b3      	cmp	r3, r6
 800040e:	f200 80ce 	bhi.w	80005ae <__udivmoddi4+0x2ce>
 8000412:	4610      	mov	r0, r2
 8000414:	1af6      	subs	r6, r6, r3
 8000416:	b2a2      	uxth	r2, r4
 8000418:	fbb6 f3f8 	udiv	r3, r6, r8
 800041c:	fb08 6613 	mls	r6, r8, r3, r6
 8000420:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000424:	fb0c fc03 	mul.w	ip, ip, r3
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b5 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 800043a:	4613      	mov	r3, r2
 800043c:	ebcc 0404 	rsb	r4, ip, r4
 8000440:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000444:	e79c      	b.n	8000380 <__udivmoddi4+0xa0>
 8000446:	4629      	mov	r1, r5
 8000448:	4628      	mov	r0, r5
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0120 	rsb	r1, lr, #32
 8000452:	fa06 f30e 	lsl.w	r3, r6, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f901 	lsr.w	r9, r0, r1
 800045e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000462:	40ce      	lsrs	r6, r1
 8000464:	ea49 0903 	orr.w	r9, r9, r3
 8000468:	fbb6 faf8 	udiv	sl, r6, r8
 800046c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000470:	fb08 661a 	mls	r6, r8, sl, r6
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800047c:	fb0a f20c 	mul.w	r2, sl, ip
 8000480:	429a      	cmp	r2, r3
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d90a      	bls.n	800049e <__udivmoddi4+0x1be>
 8000488:	19db      	adds	r3, r3, r7
 800048a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800048e:	f080 8087 	bcs.w	80005a0 <__udivmoddi4+0x2c0>
 8000492:	429a      	cmp	r2, r3
 8000494:	f240 8084 	bls.w	80005a0 <__udivmoddi4+0x2c0>
 8000498:	f1aa 0a02 	sub.w	sl, sl, #2
 800049c:	443b      	add	r3, r7
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fa1f f989 	uxth.w	r9, r9
 80004a4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ac:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80004b0:	fb01 f60c 	mul.w	r6, r1, ip
 80004b4:	429e      	cmp	r6, r3
 80004b6:	d907      	bls.n	80004c8 <__udivmoddi4+0x1e8>
 80004b8:	19db      	adds	r3, r3, r7
 80004ba:	f101 32ff 	add.w	r2, r1, #4294967295
 80004be:	d26b      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d969      	bls.n	8000598 <__udivmoddi4+0x2b8>
 80004c4:	3902      	subs	r1, #2
 80004c6:	443b      	add	r3, r7
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80004ce:	e78e      	b.n	80003ee <__udivmoddi4+0x10e>
 80004d0:	f1c1 0e20 	rsb	lr, r1, #32
 80004d4:	fa22 f40e 	lsr.w	r4, r2, lr
 80004d8:	408b      	lsls	r3, r1
 80004da:	4323      	orrs	r3, r4
 80004dc:	fa20 f70e 	lsr.w	r7, r0, lr
 80004e0:	fa06 f401 	lsl.w	r4, r6, r1
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	fa26 f60e 	lsr.w	r6, r6, lr
 80004ec:	433c      	orrs	r4, r7
 80004ee:	fbb6 f9fc 	udiv	r9, r6, ip
 80004f2:	0c27      	lsrs	r7, r4, #16
 80004f4:	fb0c 6619 	mls	r6, ip, r9, r6
 80004f8:	fa1f f883 	uxth.w	r8, r3
 80004fc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000500:	fb09 f708 	mul.w	r7, r9, r8
 8000504:	42b7      	cmp	r7, r6
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	fa00 fa01 	lsl.w	sl, r0, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x242>
 8000510:	18f6      	adds	r6, r6, r3
 8000512:	f109 30ff 	add.w	r0, r9, #4294967295
 8000516:	d241      	bcs.n	800059c <__udivmoddi4+0x2bc>
 8000518:	42b7      	cmp	r7, r6
 800051a:	d93f      	bls.n	800059c <__udivmoddi4+0x2bc>
 800051c:	f1a9 0902 	sub.w	r9, r9, #2
 8000520:	441e      	add	r6, r3
 8000522:	1bf6      	subs	r6, r6, r7
 8000524:	b2a0      	uxth	r0, r4
 8000526:	fbb6 f4fc 	udiv	r4, r6, ip
 800052a:	fb0c 6614 	mls	r6, ip, r4, r6
 800052e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000532:	fb04 f808 	mul.w	r8, r4, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x26a>
 800053a:	18ff      	adds	r7, r7, r3
 800053c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000540:	d228      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d926      	bls.n	8000594 <__udivmoddi4+0x2b4>
 8000546:	3c02      	subs	r4, #2
 8000548:	441f      	add	r7, r3
 800054a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800054e:	ebc8 0707 	rsb	r7, r8, r7
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	4644      	mov	r4, r8
 800055a:	464e      	mov	r6, r9
 800055c:	d314      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	d029      	beq.n	80005b4 <__udivmoddi4+0x2d4>
 8000560:	b365      	cbz	r5, 80005bc <__udivmoddi4+0x2dc>
 8000562:	ebba 0304 	subs.w	r3, sl, r4
 8000566:	eb67 0706 	sbc.w	r7, r7, r6
 800056a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800056e:	40cb      	lsrs	r3, r1
 8000570:	40cf      	lsrs	r7, r1
 8000572:	ea4e 0303 	orr.w	r3, lr, r3
 8000576:	e885 0088 	stmia.w	r5, {r3, r7}
 800057a:	2100      	movs	r1, #0
 800057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000580:	4613      	mov	r3, r2
 8000582:	e6f8      	b.n	8000376 <__udivmoddi4+0x96>
 8000584:	4610      	mov	r0, r2
 8000586:	e6e0      	b.n	800034a <__udivmoddi4+0x6a>
 8000588:	ebb8 0402 	subs.w	r4, r8, r2
 800058c:	eb69 0603 	sbc.w	r6, r9, r3
 8000590:	3801      	subs	r0, #1
 8000592:	e7e5      	b.n	8000560 <__udivmoddi4+0x280>
 8000594:	4604      	mov	r4, r0
 8000596:	e7d8      	b.n	800054a <__udivmoddi4+0x26a>
 8000598:	4611      	mov	r1, r2
 800059a:	e795      	b.n	80004c8 <__udivmoddi4+0x1e8>
 800059c:	4681      	mov	r9, r0
 800059e:	e7c0      	b.n	8000522 <__udivmoddi4+0x242>
 80005a0:	468a      	mov	sl, r1
 80005a2:	e77c      	b.n	800049e <__udivmoddi4+0x1be>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e748      	b.n	800043c <__udivmoddi4+0x15c>
 80005aa:	4608      	mov	r0, r1
 80005ac:	e70a      	b.n	80003c4 <__udivmoddi4+0xe4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	443e      	add	r6, r7
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x134>
 80005b4:	45c2      	cmp	sl, r8
 80005b6:	d3e7      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80005b8:	463e      	mov	r6, r7
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x280>
 80005bc:	4629      	mov	r1, r5
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	2400      	movs	r4, #0
 80005ce:	9405      	str	r4, [sp, #20]
 80005d0:	9406      	str	r4, [sp, #24]
 80005d2:	9407      	str	r4, [sp, #28]
 80005d4:	9408      	str	r4, [sp, #32]
 80005d6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d8:	9401      	str	r4, [sp, #4]
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <MX_GPIO_Init+0xb8>)
 80005dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005e2:	631a      	str	r2, [r3, #48]	; 0x30
 80005e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	9402      	str	r4, [sp, #8]
 80005f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f2:	f042 0204 	orr.w	r2, r2, #4
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	f002 0204 	and.w	r2, r2, #4
 80005fe:	9202      	str	r2, [sp, #8]
 8000600:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	9403      	str	r4, [sp, #12]
 8000604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000606:	f042 0201 	orr.w	r2, r2, #1
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
 800060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060e:	f002 0201 	and.w	r2, r2, #1
 8000612:	9203      	str	r2, [sp, #12]
 8000614:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	9404      	str	r4, [sp, #16]
 8000618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061a:	f042 0202 	orr.w	r2, r2, #2
 800061e:	631a      	str	r2, [r3, #48]	; 0x30
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	9304      	str	r3, [sp, #16]
 8000628:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 800062a:	4e16      	ldr	r6, [pc, #88]	; (8000684 <MX_GPIO_Init+0xbc>)
 800062c:	4622      	mov	r2, r4
 800062e:	2101      	movs	r1, #1
 8000630:	4630      	mov	r0, r6
 8000632:	f002 fc97 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);
 8000636:	4f14      	ldr	r7, [pc, #80]	; (8000688 <MX_GPIO_Init+0xc0>)
 8000638:	4622      	mov	r2, r4
 800063a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800063e:	4638      	mov	r0, r7
 8000640:	f002 fc90 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
 8000644:	2501      	movs	r5, #1
 8000646:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);
 800064e:	a905      	add	r1, sp, #20
 8000650:	4630      	mov	r0, r6
 8000652:	f002 fbb1 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
 8000656:	2302      	movs	r3, #2
 8000658:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_GPIO_Init+0xc4>)
 800065c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000660:	a905      	add	r1, sp, #20
 8000662:	4630      	mov	r0, r6
 8000664:	f002 fba8 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
  GPIO_InitStruct.Pin = MOT_DIR_1_Pin|MOT_DIR_2_Pin;
 8000668:	f44f 7340 	mov.w	r3, #768	; 0x300
 800066c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	a905      	add	r1, sp, #20
 8000676:	4638      	mov	r0, r7
 8000678:	f002 fb9e 	bl	8002db8 <HAL_GPIO_Init>

}
 800067c:	b00b      	add	sp, #44	; 0x2c
 800067e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020800 	.word	0x40020800
 8000688:	40020400 	.word	0x40020400
 800068c:	10110000 	.word	0x10110000

08000690 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000690:	b510      	push	{r4, lr}
 8000692:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000694:	2400      	movs	r4, #0
 8000696:	9401      	str	r4, [sp, #4]
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_DMA_Init+0x40>)
 800069a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80006ac:	4622      	mov	r2, r4
 80006ae:	2105      	movs	r1, #5
 80006b0:	203a      	movs	r0, #58	; 0x3a
 80006b2:	f002 fe29 	bl	8003308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006b6:	203a      	movs	r0, #58	; 0x3a
 80006b8:	f002 fe58 	bl	800336c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80006bc:	4622      	mov	r2, r4
 80006be:	2105      	movs	r1, #5
 80006c0:	203b      	movs	r0, #59	; 0x3b
 80006c2:	f002 fe21 	bl	8003308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006c6:	203b      	movs	r0, #59	; 0x3b
 80006c8:	f002 fe50 	bl	800336c <HAL_NVIC_EnableIRQ>

}
 80006cc:	b002      	add	sp, #8
 80006ce:	bd10      	pop	{r4, pc}
 80006d0:	40023800 	.word	0x40023800

080006d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	b097      	sub	sp, #92	; 0x5c

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d8:	2400      	movs	r4, #0
 80006da:	9412      	str	r4, [sp, #72]	; 0x48
 80006dc:	9413      	str	r4, [sp, #76]	; 0x4c
 80006de:	9414      	str	r4, [sp, #80]	; 0x50
 80006e0:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	9410      	str	r4, [sp, #64]	; 0x40
 80006e4:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e6:	9409      	str	r4, [sp, #36]	; 0x24
 80006e8:	940a      	str	r4, [sp, #40]	; 0x28
 80006ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80006ec:	940c      	str	r4, [sp, #48]	; 0x30
 80006ee:	940d      	str	r4, [sp, #52]	; 0x34
 80006f0:	940e      	str	r4, [sp, #56]	; 0x38
 80006f2:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f4:	2220      	movs	r2, #32
 80006f6:	4621      	mov	r1, r4
 80006f8:	a801      	add	r0, sp, #4
 80006fa:	f006 fd4c 	bl	8007196 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006fe:	4d1e      	ldr	r5, [pc, #120]	; (8000778 <MX_TIM1_Init+0xa4>)
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM1_Init+0xa8>)
 8000702:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8000704:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8000708:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800070c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000710:	4628      	mov	r0, r5
 8000712:	f002 ffa1 	bl	8003658 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800071c:	a912      	add	r1, sp, #72	; 0x48
 800071e:	4628      	mov	r0, r5
 8000720:	f003 f8ca 	bl	80038b8 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000724:	4628      	mov	r0, r5
 8000726:	f002 ffcf 	bl	80036c8 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072a:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072e:	a910      	add	r1, sp, #64	; 0x40
 8000730:	4628      	mov	r0, r5
 8000732:	f003 f933 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000736:	2360      	movs	r3, #96	; 0x60
 8000738:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800073a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800073c:	2302      	movs	r3, #2
 800073e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000740:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000742:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000744:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000746:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000748:	4622      	mov	r2, r4
 800074a:	a909      	add	r1, sp, #36	; 0x24
 800074c:	4628      	mov	r0, r5
 800074e:	f003 f837 	bl	80037c0 <HAL_TIM_PWM_ConfigChannel>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000752:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000754:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000756:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000758:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075a:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000762:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000764:	a901      	add	r1, sp, #4
 8000766:	4628      	mov	r0, r5
 8000768:	f003 f956 	bl	8003a18 <HAL_TIMEx_ConfigBreakDeadTime>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800076c:	4628      	mov	r0, r5
 800076e:	f000 fc99 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000772:	b017      	add	sp, #92	; 0x5c
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop
 8000778:	20004c44 	.word	0x20004c44
 800077c:	40010000 	.word	0x40010000

08000780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000784:	2400      	movs	r4, #0
 8000786:	940a      	str	r4, [sp, #40]	; 0x28
 8000788:	940b      	str	r4, [sp, #44]	; 0x2c
 800078a:	940c      	str	r4, [sp, #48]	; 0x30
 800078c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078e:	9408      	str	r4, [sp, #32]
 8000790:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000792:	9401      	str	r4, [sp, #4]
 8000794:	9402      	str	r4, [sp, #8]
 8000796:	9403      	str	r4, [sp, #12]
 8000798:	9404      	str	r4, [sp, #16]
 800079a:	9405      	str	r4, [sp, #20]
 800079c:	9406      	str	r4, [sp, #24]
 800079e:	9407      	str	r4, [sp, #28]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a0:	4d15      	ldr	r5, [pc, #84]	; (80007f8 <MX_TIM3_Init+0x78>)
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_TIM3_Init+0x7c>)
 80007a4:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 80007a6:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
 80007aa:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b0:	4628      	mov	r0, r5
 80007b2:	f002 ff51 	bl	8003658 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007bc:	a90a      	add	r1, sp, #40	; 0x28
 80007be:	4628      	mov	r0, r5
 80007c0:	f003 f87a 	bl	80038b8 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007c4:	4628      	mov	r0, r5
 80007c6:	f002 ff7f 	bl	80036c8 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ce:	a908      	add	r1, sp, #32
 80007d0:	4628      	mov	r0, r5
 80007d2:	f003 f8e3 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	; 0x60
 80007d8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80007da:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80007dc:	2302      	movs	r3, #2
 80007de:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e0:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e2:	4622      	mov	r2, r4
 80007e4:	a901      	add	r1, sp, #4
 80007e6:	4628      	mov	r0, r5
 80007e8:	f002 ffea 	bl	80037c0 <HAL_TIM_PWM_ConfigChannel>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ec:	4628      	mov	r0, r5
 80007ee:	f000 fc59 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 80007f2:	b00f      	add	sp, #60	; 0x3c
 80007f4:	bd30      	pop	{r4, r5, pc}
 80007f6:	bf00      	nop
 80007f8:	20004c00 	.word	0x20004c00
 80007fc:	40000400 	.word	0x40000400

08000800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000800:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_SPI1_Init+0x38>)
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_SPI1_Init+0x3c>)
 8000806:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000808:	f44f 7382 	mov.w	r3, #260	; 0x104
 800080c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	2300      	movs	r3, #0
 8000810:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000812:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000814:	2202      	movs	r2, #2
 8000816:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000818:	2201      	movs	r2, #1
 800081a:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000822:	2208      	movs	r2, #8
 8000824:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000826:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000828:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082c:	230a      	movs	r3, #10
 800082e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	f005 fe3c 	bl	80064ac <HAL_SPI_Init>
 8000834:	bd08      	pop	{r3, pc}
 8000836:	bf00      	nop
 8000838:	20005484 	.word	0x20005484
 800083c:	40013000 	.word	0x40013000

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000844:	2400      	movs	r4, #0
 8000846:	940a      	str	r4, [sp, #40]	; 0x28
 8000848:	940b      	str	r4, [sp, #44]	; 0x2c
 800084a:	940c      	str	r4, [sp, #48]	; 0x30
 800084c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	9408      	str	r4, [sp, #32]
 8000850:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	9401      	str	r4, [sp, #4]
 8000854:	9402      	str	r4, [sp, #8]
 8000856:	9403      	str	r4, [sp, #12]
 8000858:	9404      	str	r4, [sp, #16]
 800085a:	9405      	str	r4, [sp, #20]
 800085c:	9406      	str	r4, [sp, #24]
 800085e:	9407      	str	r4, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000860:	4d14      	ldr	r5, [pc, #80]	; (80008b4 <MX_TIM2_Init+0x74>)
 8000862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000866:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 83;
 8000868:	2353      	movs	r3, #83	; 0x53
 800086a:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 999999999;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_TIM2_Init+0x78>)
 8000870:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000872:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000876:	4628      	mov	r0, r5
 8000878:	f002 feee 	bl	8003658 <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000880:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000882:	a90a      	add	r1, sp, #40	; 0x28
 8000884:	4628      	mov	r0, r5
 8000886:	f003 f817 	bl	80038b8 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800088a:	4628      	mov	r0, r5
 800088c:	f002 ff00 	bl	8003690 <HAL_TIM_OC_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	a908      	add	r1, sp, #32
 8000896:	4628      	mov	r0, r5
 8000898:	f003 f880 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800089c:	9401      	str	r4, [sp, #4]
  sConfigOC.Pulse = 0;
 800089e:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a0:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a2:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a4:	4622      	mov	r2, r4
 80008a6:	a901      	add	r1, sp, #4
 80008a8:	4628      	mov	r0, r5
 80008aa:	f002 ff59 	bl	8003760 <HAL_TIM_OC_ConfigChannel>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ae:	b00f      	add	sp, #60	; 0x3c
 80008b0:	bd30      	pop	{r4, r5, pc}
 80008b2:	bf00      	nop
 80008b4:	20005538 	.word	0x20005538
 80008b8:	3b9ac9ff 	.word	0x3b9ac9ff

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b530      	push	{r4, r5, lr}
 80008be:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c0:	2230      	movs	r2, #48	; 0x30
 80008c2:	2100      	movs	r1, #0
 80008c4:	a808      	add	r0, sp, #32
 80008c6:	f006 fc66 	bl	8007196 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ca:	2400      	movs	r4, #0
 80008cc:	9403      	str	r4, [sp, #12]
 80008ce:	9404      	str	r4, [sp, #16]
 80008d0:	9405      	str	r4, [sp, #20]
 80008d2:	9406      	str	r4, [sp, #24]
 80008d4:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	9401      	str	r4, [sp, #4]
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <SystemClock_Config+0x94>)
 80008da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ec:	9402      	str	r4, [sp, #8]
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <SystemClock_Config+0x98>)
 80008f0:	6813      	ldr	r3, [r2, #0]
 80008f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	6813      	ldr	r3, [r2, #0]
 80008fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000906:	2301      	movs	r3, #1
 8000908:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2502      	movs	r5, #2
 8000912:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000914:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000918:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800091a:	2308      	movs	r3, #8
 800091c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800091e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000922:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000924:	2304      	movs	r3, #4
 8000926:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000928:	2307      	movs	r3, #7
 800092a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	a808      	add	r0, sp, #32
 800092e:	f001 fee9 	bl	8002704 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000942:	4629      	mov	r1, r5
 8000944:	a803      	add	r0, sp, #12
 8000946:	f002 f94f 	bl	8002be8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800094a:	b015      	add	sp, #84	; 0x54
 800094c:	bd30      	pop	{r4, r5, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b508      	push	{r3, lr}
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f002 fd2b 	bl	80033b4 <HAL_Init>

  /* USER CODE BEGIN Init */
    HAL_SYSTICK_Config( SystemCoreClock / ( 1000U / uwTickFreq ) );
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <main+0x54>)
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f2 	udiv	r3, r3, r2
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <main+0x58>)
 800096c:	6810      	ldr	r0, [r2, #0]
 800096e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000972:	f002 fd09 	bl	8003388 <HAL_SYSTICK_Config>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f7ff ffa1 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f7ff fe25 	bl	80005c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800097e:	f7ff fe87 	bl	8000690 <MX_DMA_Init>
  MX_TIM1_Init();
 8000982:	f7ff fea7 	bl	80006d4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000986:	f7ff fefb 	bl	8000780 <MX_TIM3_Init>
  MX_SPI1_Init();
 800098a:	f7ff ff39 	bl	8000800 <MX_SPI1_Init>
  MX_TIM2_Init();
 800098e:	f7ff ff57 	bl	8000840 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000992:	f004 fb5d 	bl	8005050 <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HostIO */
  HostIOHandle = osThreadNew(StartDefaultTask, NULL, &HostIO_attributes);
 8000996:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <main+0x5c>)
 8000998:	2100      	movs	r1, #0
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <main+0x60>)
 800099c:	f004 fba0 	bl	80050e0 <osThreadNew>
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <main+0x64>)
 80009a2:	6018      	str	r0, [r3, #0]
    /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009a4:	f004 fb76 	bl	8005094 <osKernelStart>
 80009a8:	e7fe      	b.n	80009a8 <main+0x50>
 80009aa:	bf00      	nop
 80009ac:	20000068 	.word	0x20000068
 80009b0:	2000006c 	.word	0x2000006c
 80009b4:	080084b8 	.word	0x080084b8
 80009b8:	0800667d 	.word	0x0800667d
 80009bc:	20004c40 	.word	0x20004c40

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80009c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80009c6:	2200      	movs	r2, #0
 80009c8:	490d      	ldr	r1, [pc, #52]	; (8000a00 <MX_USB_DEVICE_Init+0x3c>)
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <MX_USB_DEVICE_Init+0x40>)
 80009cc:	f004 fef2 	bl	80057b4 <USBD_Init>
 80009d0:	b108      	cbz	r0, 80009d6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80009d2:	f7ff fff5 	bl	80009c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <MX_USB_DEVICE_Init+0x44>)
 80009d8:	480a      	ldr	r0, [pc, #40]	; (8000a04 <MX_USB_DEVICE_Init+0x40>)
 80009da:	f004 ff03 	bl	80057e4 <USBD_RegisterClass>
 80009de:	b108      	cbz	r0, 80009e4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80009e0:	f7ff ffee 	bl	80009c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80009e4:	4909      	ldr	r1, [pc, #36]	; (8000a0c <MX_USB_DEVICE_Init+0x48>)
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_USB_DEVICE_Init+0x40>)
 80009e8:	f005 fd16 	bl	8006418 <USBD_CDC_RegisterInterface>
 80009ec:	b108      	cbz	r0, 80009f2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80009ee:	f7ff ffe7 	bl	80009c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_USB_DEVICE_Init+0x40>)
 80009f4:	f004 fefe 	bl	80057f4 <USBD_Start>
 80009f8:	b108      	cbz	r0, 80009fe <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80009fa:	f7ff ffe1 	bl	80009c0 <Error_Handler>
 80009fe:	bd08      	pop	{r3, pc}
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20005638 	.word	0x20005638
 8000a08:	200000b8 	.word	0x200000b8
 8000a0c:	20000054 	.word	0x20000054

08000a10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a12:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	2300      	movs	r3, #0
 8000a16:	9303      	str	r3, [sp, #12]
 8000a18:	9304      	str	r3, [sp, #16]
 8000a1a:	9305      	str	r3, [sp, #20]
 8000a1c:	9306      	str	r3, [sp, #24]
 8000a1e:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000a20:	6803      	ldr	r3, [r0, #0]
 8000a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a26:	d139      	bne.n	8000a9c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	2500      	movs	r5, #0
 8000a2a:	9501      	str	r5, [sp, #4]
 8000a2c:	4c1c      	ldr	r4, [pc, #112]	; (8000aa0 <HAL_PCD_MspInit+0x90>)
 8000a2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6323      	str	r3, [r4, #48]	; 0x30
 8000a36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	9b01      	ldr	r3, [sp, #4]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a40:	ae08      	add	r6, sp, #32
 8000a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a46:	f846 3d14 	str.w	r3, [r6, #-20]!
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	4f16      	ldr	r7, [pc, #88]	; (8000aa4 <HAL_PCD_MspInit+0x94>)
 8000a4c:	4631      	mov	r1, r6
 8000a4e:	4638      	mov	r0, r7
 8000a50:	f002 f9b2 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a64:	230a      	movs	r3, #10
 8000a66:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	4631      	mov	r1, r6
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	f002 f9a4 	bl	8002db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a76:	6363      	str	r3, [r4, #52]	; 0x34
 8000a78:	9502      	str	r5, [sp, #8]
 8000a7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6463      	str	r3, [r4, #68]	; 0x44
 8000a82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a88:	9302      	str	r3, [sp, #8]
 8000a8a:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000a8c:	462a      	mov	r2, r5
 8000a8e:	4629      	mov	r1, r5
 8000a90:	2043      	movs	r0, #67	; 0x43
 8000a92:	f002 fc39 	bl	8003308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000a96:	2043      	movs	r0, #67	; 0x43
 8000a98:	f002 fc68 	bl	800336c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000a9c:	b009      	add	sp, #36	; 0x24
 8000a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000aa8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000aaa:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8000aae:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ab2:	f004 febb 	bl	800582c <USBD_LL_SetupStage>
 8000ab6:	bd08      	pop	{r3, pc}

08000ab8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ab8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000aba:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000abe:	0093      	lsls	r3, r2, #2
 8000ac0:	4403      	add	r3, r0
 8000ac2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000ac6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000aca:	f004 fedd 	bl	8005888 <USBD_LL_DataOutStage>
 8000ace:	bd08      	pop	{r3, pc}

08000ad0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ad0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000ad2:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000ad6:	0093      	lsls	r3, r2, #2
 8000ad8:	4403      	add	r3, r0
 8000ada:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000adc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ae0:	f004 ff1c 	bl	800591c <USBD_LL_DataInStage>
 8000ae4:	bd08      	pop	{r3, pc}
 8000ae6:	bf00      	nop

08000ae8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ae8:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000aea:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000aee:	f004 ffb9 	bl	8005a64 <USBD_LL_SOF>
 8000af2:	bd08      	pop	{r3, pc}

08000af4 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8000af4:	b510      	push	{r4, lr}
 8000af6:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000af8:	68c3      	ldr	r3, [r0, #12]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d001      	beq.n	8000b02 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8000afe:	f7ff ff5f 	bl	80009c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000b02:	2101      	movs	r1, #1
 8000b04:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000b08:	f004 ff98 	bl	8005a3c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000b0c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000b10:	f004 ff6c 	bl	80059ec <USBD_LL_Reset>
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	bf00      	nop

08000b18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b18:	b510      	push	{r4, lr}
 8000b1a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000b1c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b20:	f004 ff90 	bl	8005a44 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000b32:	6a23      	ldr	r3, [r4, #32]
 8000b34:	b123      	cbz	r3, 8000b40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000b36:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_PCD_SuspendCallback+0x2c>)
 8000b38:	6913      	ldr	r3, [r2, #16]
 8000b3a:	f043 0306 	orr.w	r3, r3, #6
 8000b3e:	6113      	str	r3, [r2, #16]
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000b4a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b4e:	f004 ff83 	bl	8005a58 <USBD_LL_Resume>
 8000b52:	bd08      	pop	{r3, pc}

08000b54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b54:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000b56:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b5a:	f004 ff91 	bl	8005a80 <USBD_LL_IsoOUTIncomplete>
 8000b5e:	bd08      	pop	{r3, pc}

08000b60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b60:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000b62:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b66:	f004 ff89 	bl	8005a7c <USBD_LL_IsoINIncomplete>
 8000b6a:	bd08      	pop	{r3, pc}

08000b6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b6c:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8000b6e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b72:	f004 ff87 	bl	8005a84 <USBD_LL_DevConnected>
 8000b76:	bd08      	pop	{r3, pc}

08000b78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000b78:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8000b7a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000b7e:	f004 ff83 	bl	8005a88 <USBD_LL_DevDisconnected>
 8000b82:	bd08      	pop	{r3, pc}

08000b84 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8000b84:	7803      	ldrb	r3, [r0, #0]
 8000b86:	bb63      	cbnz	r3, 8000be2 <USBD_LL_Init+0x5e>
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	4603      	mov	r3, r0
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000b8c:	4816      	ldr	r0, [pc, #88]	; (8000be8 <USBD_LL_Init+0x64>)
 8000b8e:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8000b92:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b9a:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ba8:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000baa:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bac:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bae:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb4:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bb6:	f000 fb29 	bl	800120c <HAL_PCD_Init>
 8000bba:	b108      	cbz	r0, 8000bc0 <USBD_LL_Init+0x3c>
  {
    Error_Handler( );
 8000bbc:	f7ff ff00 	bl	80009c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8000bc0:	4c09      	ldr	r4, [pc, #36]	; (8000be8 <USBD_LL_Init+0x64>)
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f001 f835 	bl	8001c34 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8000bca:	2240      	movs	r2, #64	; 0x40
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f001 f80c 	bl	8001bec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f001 f807 	bl	8001bec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8000bde:	2000      	movs	r0, #0
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	2000      	movs	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200058d4 	.word	0x200058d4

08000bec <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000bec:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
  
  if((ep_addr & 0x80) == 0x80)
 8000bf0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000bf4:	d008      	beq.n	8000c08 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000bf6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000bfa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000bfe:	008b      	lsls	r3, r1, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8000c06:	4770      	bx	lr
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000c08:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000c0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000c10:	008b      	lsls	r3, r1, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c1c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000c1e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c22:	f000 ff37 	bl	8001a94 <HAL_PCD_EP_GetRxCount>
}
 8000c26:	bd08      	pop	{r3, pc}

08000c28 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8000c28:	b110      	cbz	r0, 8000c30 <USBD_Get_USB_Status+0x8>
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d002      	beq.n	8000c34 <USBD_Get_USB_Status+0xc>
 8000c2e:	e003      	b.n	8000c38 <USBD_Get_USB_Status+0x10>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8000c30:	2000      	movs	r0, #0
 8000c32:	4770      	bx	lr
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000c34:	2001      	movs	r0, #1
    break;
 8000c36:	4770      	bx	lr
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8000c38:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8000c3a:	4770      	bx	lr

08000c3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000c3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8000c3e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c42:	f000 fb77 	bl	8001334 <HAL_PCD_Start>
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8000c46:	f7ff ffef 	bl	8000c28 <USBD_Get_USB_Status>
  
  return usb_status;
}
 8000c4a:	bd08      	pop	{r3, pc}

08000c4c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000c50:	4613      	mov	r3, r2
 8000c52:	4622      	mov	r2, r4
 8000c54:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c58:	f000 fe76 	bl	8001948 <HAL_PCD_EP_Open>

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000c5c:	f7ff ffe4 	bl	8000c28 <USBD_Get_USB_Status>
  
  return usb_status;
}
 8000c60:	bd10      	pop	{r4, pc}
 8000c62:	bf00      	nop

08000c64 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000c66:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c6a:	f000 fead 	bl	80019c8 <HAL_PCD_EP_Close>
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8000c6e:	f7ff ffdb 	bl	8000c28 <USBD_Get_USB_Status>
 
  return usb_status;  
}
 8000c72:	bd08      	pop	{r3, pc}

08000c74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c74:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000c76:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c7a:	f000 ff3f 	bl	8001afc <HAL_PCD_EP_SetStall>

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000c7e:	f7ff ffd3 	bl	8000c28 <USBD_Get_USB_Status>
  
  return usb_status;  
}
 8000c82:	bd08      	pop	{r3, pc}

08000c84 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000c86:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c8a:	f000 ff77 	bl	8001b7c <HAL_PCD_EP_ClrStall>
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8000c8e:	f7ff ffcb 	bl	8000c28 <USBD_Get_USB_Status>
  
  return usb_status; 
}
 8000c92:	bd08      	pop	{r3, pc}

08000c94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000c94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000c96:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c9a:	f000 fe41 	bl	8001920 <HAL_PCD_SetAddress>
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000c9e:	f7ff ffc3 	bl	8000c28 <USBD_Get_USB_Status>
  
  return usb_status;  
}
 8000ca2:	bd08      	pop	{r3, pc}

08000ca4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000ca4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000ca6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000caa:	f000 fefd 	bl	8001aa8 <HAL_PCD_EP_Transmit>
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8000cae:	f7ff ffbb 	bl	8000c28 <USBD_Get_USB_Status>
  
  return usb_status;    
}
 8000cb2:	bd08      	pop	{r3, pc}

08000cb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000cb4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000cb6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000cba:	f000 febd 	bl	8001a38 <HAL_PCD_EP_Receive>
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8000cbe:	f7ff ffb3 	bl	8000c28 <USBD_Get_USB_Status>
  
  return usb_status; 
}
 8000cc2:	bd08      	pop	{r3, pc}

08000cc4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000cc4:	2312      	movs	r3, #18
 8000cc6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8000cc8:	4800      	ldr	r0, [pc, #0]	; (8000ccc <USBD_FS_DeviceDescriptor+0x8>)
 8000cca:	4770      	bx	lr
 8000ccc:	20000040 	.word	0x20000040

08000cd0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8000cd4:	4800      	ldr	r0, [pc, #0]	; (8000cd8 <USBD_FS_LangIDStrDescriptor+0x8>)
 8000cd6:	4770      	bx	lr
 8000cd8:	20000020 	.word	0x20000020

08000cdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000cdc:	b430      	push	{r4, r5}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e010      	b.n	8000d04 <IntToUnicode+0x28>
  {
    if (((value >> 28)) < 0xA)
 8000ce2:	0f04      	lsrs	r4, r0, #28
 8000ce4:	2c09      	cmp	r4, #9
 8000ce6:	d803      	bhi.n	8000cf0 <IntToUnicode+0x14>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000ce8:	3430      	adds	r4, #48	; 0x30
 8000cea:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8000cee:	e002      	b.n	8000cf6 <IntToUnicode+0x1a>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000cf0:	3437      	adds	r4, #55	; 0x37
 8000cf2:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8000cf6:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8000cf8:	005c      	lsls	r4, r3, #1
 8000cfa:	3401      	adds	r4, #1
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	550d      	strb	r5, [r1, r4]
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000d00:	3301      	adds	r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d3ec      	bcc.n	8000ce2 <IntToUnicode+0x6>

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
  }
}
 8000d08:	bc30      	pop	{r4, r5}
 8000d0a:	4770      	bx	lr

08000d0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000d0c:	b538      	push	{r3, r4, r5, lr}
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <Get_SerialNum+0x2c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <Get_SerialNum+0x30>)
 8000d14:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000d16:	3204      	adds	r2, #4
 8000d18:	6810      	ldr	r0, [r2, #0]

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
 8000d1a:	1818      	adds	r0, r3, r0
 8000d1c:	d00a      	beq.n	8000d34 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000d1e:	4d08      	ldr	r5, [pc, #32]	; (8000d40 <Get_SerialNum+0x34>)
 8000d20:	2208      	movs	r2, #8
 8000d22:	1ca9      	adds	r1, r5, #2
 8000d24:	f7ff ffda 	bl	8000cdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000d28:	2204      	movs	r2, #4
 8000d2a:	f105 0112 	add.w	r1, r5, #18
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f7ff ffd4 	bl	8000cdc <IntToUnicode>
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop
 8000d38:	1fff7a10 	.word	0x1fff7a10
 8000d3c:	1fff7a14 	.word	0x1fff7a14
 8000d40:	20000024 	.word	0x20000024

08000d44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d44:	b508      	push	{r3, lr}
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000d46:	231a      	movs	r3, #26
 8000d48:	800b      	strh	r3, [r1, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000d4a:	f7ff ffdf 	bl	8000d0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
}
 8000d4e:	4801      	ldr	r0, [pc, #4]	; (8000d54 <USBD_FS_SerialStrDescriptor+0x10>)
 8000d50:	bd08      	pop	{r3, pc}
 8000d52:	bf00      	nop
 8000d54:	20000024 	.word	0x20000024

08000d58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d58:	b508      	push	{r3, lr}
 8000d5a:	460a      	mov	r2, r1
  if(speed == 0)
 8000d5c:	b920      	cbnz	r0, 8000d68 <USBD_FS_ProductStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000d5e:	4905      	ldr	r1, [pc, #20]	; (8000d74 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <USBD_FS_ProductStrDescriptor+0x20>)
 8000d62:	f005 f9a5 	bl	80060b0 <USBD_GetString>
 8000d66:	e003      	b.n	8000d70 <USBD_FS_ProductStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000d68:	4902      	ldr	r1, [pc, #8]	; (8000d74 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000d6a:	4803      	ldr	r0, [pc, #12]	; (8000d78 <USBD_FS_ProductStrDescriptor+0x20>)
 8000d6c:	f005 f9a0 	bl	80060b0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000d70:	4800      	ldr	r0, [pc, #0]	; (8000d74 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000d72:	bd08      	pop	{r3, pc}
 8000d74:	20005cdc 	.word	0x20005cdc
 8000d78:	080084e4 	.word	0x080084e4

08000d7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d7c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000d7e:	4c04      	ldr	r4, [pc, #16]	; (8000d90 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8000d80:	460a      	mov	r2, r1
 8000d82:	4621      	mov	r1, r4
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8000d86:	f005 f993 	bl	80060b0 <USBD_GetString>
  return USBD_StrDesc;
}
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	bd10      	pop	{r4, pc}
 8000d8e:	bf00      	nop
 8000d90:	20005cdc 	.word	0x20005cdc
 8000d94:	080084fc 	.word	0x080084fc

08000d98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d98:	b508      	push	{r3, lr}
 8000d9a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8000d9c:	b920      	cbnz	r0, 8000da8 <USBD_FS_ConfigStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000d9e:	4905      	ldr	r1, [pc, #20]	; (8000db4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <USBD_FS_ConfigStrDescriptor+0x20>)
 8000da2:	f005 f985 	bl	80060b0 <USBD_GetString>
 8000da6:	e003      	b.n	8000db0 <USBD_FS_ConfigStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000da8:	4902      	ldr	r1, [pc, #8]	; (8000db4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <USBD_FS_ConfigStrDescriptor+0x20>)
 8000dac:	f005 f980 	bl	80060b0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000db0:	4800      	ldr	r0, [pc, #0]	; (8000db4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8000db2:	bd08      	pop	{r3, pc}
 8000db4:	20005cdc 	.word	0x20005cdc
 8000db8:	08008510 	.word	0x08008510

08000dbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dbc:	b508      	push	{r3, lr}
 8000dbe:	460a      	mov	r2, r1
  if(speed == 0)
 8000dc0:	b920      	cbnz	r0, 8000dcc <USBD_FS_InterfaceStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000dc2:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <USBD_FS_InterfaceStrDescriptor+0x20>)
 8000dc6:	f005 f973 	bl	80060b0 <USBD_GetString>
 8000dca:	e003      	b.n	8000dd4 <USBD_FS_InterfaceStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000dcc:	4902      	ldr	r1, [pc, #8]	; (8000dd8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <USBD_FS_InterfaceStrDescriptor+0x20>)
 8000dd0:	f005 f96e 	bl	80060b0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000dd4:	4800      	ldr	r0, [pc, #0]	; (8000dd8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000dd6:	bd08      	pop	{r3, pc}
 8000dd8:	20005cdc 	.word	0x20005cdc
 8000ddc:	0800851c 	.word	0x0800851c

08000de0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
    return ( USBD_OK );
  /* USER CODE END 4 */
}
 8000de0:	2000      	movs	r0, #0
 8000de2:	4770      	bx	lr

08000de4 <CDC_Control_FS>:
        break;
    }

    return ( USBD_OK );
  /* USER CODE END 5 */
}
 8000de4:	2000      	movs	r0, #0
 8000de6:	4770      	bx	lr

08000de8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000de8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
    void CdcReceiveHandler( char* Buf, size_t len );
    CdcReceiveHandler( (char*)Buf, (size_t)*Len );
 8000dea:	6809      	ldr	r1, [r1, #0]
 8000dec:	f006 f90a 	bl	8007004 <CdcReceiveHandler>
    return ( USBD_OK );
  /* USER CODE END 6 */
}
 8000df0:	2000      	movs	r0, #0
 8000df2:	bd08      	pop	{r3, pc}

08000df4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000df4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, UserTxBufferFS, 0 );
 8000df6:	4c06      	ldr	r4, [pc, #24]	; (8000e10 <CDC_Init_FS+0x1c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4906      	ldr	r1, [pc, #24]	; (8000e14 <CDC_Init_FS+0x20>)
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f005 fb13 	bl	8006428 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, UserRxBufferFS );
 8000e02:	4905      	ldr	r1, [pc, #20]	; (8000e18 <CDC_Init_FS+0x24>)
 8000e04:	4620      	mov	r0, r4
 8000e06:	f005 fb17 	bl	8006438 <USBD_CDC_SetRxBuffer>
    return ( USBD_OK );
  /* USER CODE END 3 */
}
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	bd10      	pop	{r4, pc}
 8000e0e:	bf00      	nop
 8000e10:	20005638 	.word	0x20005638
 8000e14:	20005fdc 	.word	0x20005fdc
 8000e18:	20005edc 	.word	0x20005edc

08000e1c <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <CDC_Transmit_FS+0x28>)
 8000e1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
    if ( hcdc->TxState != 0 ) {
 8000e22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000e26:	b953      	cbnz	r3, 8000e3e <CDC_Transmit_FS+0x22>
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	4601      	mov	r1, r0
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
 8000e2e:	4c05      	ldr	r4, [pc, #20]	; (8000e44 <CDC_Transmit_FS+0x28>)
 8000e30:	4620      	mov	r0, r4
 8000e32:	f005 faf9 	bl	8006428 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8000e36:	4620      	mov	r0, r4
 8000e38:	f005 fb04 	bl	8006444 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
 8000e3c:	bd10      	pop	{r4, pc}
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20005638 	.word	0x20005638

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <HardFault_Handler>:
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
    *(volatile int*)0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	e7fe      	b.n	8000e50 <HardFault_Handler+0x4>
 8000e52:	bf00      	nop

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler>
 8000e56:	bf00      	nop

08000e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e58:	e7fe      	b.n	8000e58 <BusFault_Handler>
 8000e5a:	bf00      	nop

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler>
 8000e5e:	bf00      	nop

08000e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <TIM1_UP_TIM10_IRQHandler>:
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim1, TIM_IT_UPDATE );
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f06f 0201 	mvn.w	r2, #1
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	4770      	bx	lr
 8000e70:	20004c44 	.word	0x20004c44

08000e74 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
    HAL_IncTick();
 8000e76:	f002 fab7 	bl	80033e8 <HAL_IncTick>
    __HAL_TIM_CLEAR_FLAG( &htim11, TIM_IT_UPDATE );
 8000e7a:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f06f 0201 	mvn.w	r2, #1
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	bd08      	pop	{r3, pc}
 8000e86:	bf00      	nop
 8000e88:	20006020 	.word	0x20006020

08000e8c <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim3, TIM_IT_UPDATE );
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <TIM3_IRQHandler+0xc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f06f 0201 	mvn.w	r2, #1
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	4770      	bx	lr
 8000e98:	20004c00 	.word	0x20004c00

08000e9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e9e:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <DMA2_Stream2_IRQHandler+0xc>)
 8000ea0:	f002 f934 	bl	800310c <HAL_DMA_IRQHandler>
 8000ea4:	bd08      	pop	{r3, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20005578 	.word	0x20005578

08000eac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000eac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000eae:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <DMA2_Stream3_IRQHandler+0xc>)
 8000eb0:	f002 f92c 	bl	800310c <HAL_DMA_IRQHandler>
 8000eb4:	bd08      	pop	{r3, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200055d8 	.word	0x200055d8

08000ebc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ebc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ebe:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <OTG_FS_IRQHandler+0xc>)
 8000ec0:	f000 fb08 	bl	80014d4 <HAL_PCD_IRQHandler>
 8000ec4:	bd08      	pop	{r3, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200058d4 	.word	0x200058d4

08000ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b500      	push	{lr}
 8000ece:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	9200      	str	r2, [sp, #0]
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_MspInit+0x40>)
 8000ed6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000ed8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000edc:	6459      	str	r1, [r3, #68]	; 0x44
 8000ede:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000ee0:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000ee4:	9100      	str	r1, [sp, #0]
 8000ee6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	9201      	str	r2, [sp, #4]
 8000eea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000eec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000ef0:	6419      	str	r1, [r3, #64]	; 0x40
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000efc:	210f      	movs	r1, #15
 8000efe:	f06f 0001 	mvn.w	r0, #1
 8000f02:	f002 fa01 	bl	8003308 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	b003      	add	sp, #12
 8000f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f10:	b530      	push	{r4, r5, lr}
 8000f12:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	2300      	movs	r3, #0
 8000f16:	9303      	str	r3, [sp, #12]
 8000f18:	9304      	str	r3, [sp, #16]
 8000f1a:	9305      	str	r3, [sp, #20]
 8000f1c:	9306      	str	r3, [sp, #24]
 8000f1e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000f20:	6802      	ldr	r2, [r0, #0]
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_SPI_MspInit+0xc8>)
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d155      	bne.n	8000fd4 <HAL_SPI_MspInit+0xc4>
 8000f28:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f2a:	2500      	movs	r5, #0
 8000f2c:	9501      	str	r5, [sp, #4]
 8000f2e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f38:	645a      	str	r2, [r3, #68]	; 0x44
 8000f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000f40:	9201      	str	r2, [sp, #4]
 8000f42:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	9502      	str	r5, [sp, #8]
 8000f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f48:	f042 0201 	orr.w	r2, r2, #1
 8000f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f58:	23e0      	movs	r3, #224	; 0xe0
 8000f5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f64:	2305      	movs	r3, #5
 8000f66:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	a903      	add	r1, sp, #12
 8000f6a:	481c      	ldr	r0, [pc, #112]	; (8000fdc <HAL_SPI_MspInit+0xcc>)
 8000f6c:	f001 ff24 	bl	8002db8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000f70:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <HAL_SPI_MspInit+0xd0>)
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_SPI_MspInit+0xd4>)
 8000f74:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f76:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000f7a:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7c:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7e:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f86:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f88:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f8a:	61c5      	str	r5, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f8c:	6205      	str	r5, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f8e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f90:	f002 f854 	bl	800303c <HAL_DMA_Init>
 8000f94:	b108      	cbz	r0, 8000f9a <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
 8000f96:	f7ff fd13 	bl	80009c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_SPI_MspInit+0xd0>)
 8000f9c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000f9e:	639c      	str	r4, [r3, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000fa0:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <HAL_SPI_MspInit+0xd8>)
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_SPI_MspInit+0xdc>)
 8000fa4:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000fa6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000faa:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fac:	2340      	movs	r3, #64	; 0x40
 8000fae:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb8:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fba:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fbc:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000fbe:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc0:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc2:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fc4:	f002 f83a 	bl	800303c <HAL_DMA_Init>
 8000fc8:	b108      	cbz	r0, 8000fce <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000fca:	f7ff fcf9 	bl	80009c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_SPI_MspInit+0xd8>)
 8000fd0:	64a3      	str	r3, [r4, #72]	; 0x48
 8000fd2:	639c      	str	r4, [r3, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fd4:	b009      	add	sp, #36	; 0x24
 8000fd6:	bd30      	pop	{r4, r5, pc}
 8000fd8:	40013000 	.word	0x40013000
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	20005578 	.word	0x20005578
 8000fe4:	40026440 	.word	0x40026440
 8000fe8:	200055d8 	.word	0x200055d8
 8000fec:	40026458 	.word	0x40026458

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8000ff4:	6803      	ldr	r3, [r0, #0]
 8000ff6:	4a28      	ldr	r2, [pc, #160]	; (8001098 <HAL_TIM_Base_MspInit+0xa8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d11c      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffc:	2400      	movs	r4, #0
 8000ffe:	9401      	str	r4, [sp, #4]
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <HAL_TIM_Base_MspInit+0xac>)
 8001002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001014:	4622      	mov	r2, r4
 8001016:	4621      	mov	r1, r4
 8001018:	2019      	movs	r0, #25
 800101a:	f002 f975 	bl	8003308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800101e:	2019      	movs	r0, #25
 8001020:	f002 f9a4 	bl	800336c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001024:	4622      	mov	r2, r4
 8001026:	4621      	mov	r1, r4
 8001028:	201a      	movs	r0, #26
 800102a:	f002 f96d 	bl	8003308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800102e:	201a      	movs	r0, #26
 8001030:	f002 f99c 	bl	800336c <HAL_NVIC_EnableIRQ>
 8001034:	e02d      	b.n	8001092 <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800103a:	d114      	bne.n	8001066 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103c:	2200      	movs	r2, #0
 800103e:	9202      	str	r2, [sp, #8]
 8001040:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001044:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001046:	f041 0101 	orr.w	r1, r1, #1
 800104a:	6419      	str	r1, [r3, #64]	; 0x40
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	9b02      	ldr	r3, [sp, #8]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001056:	2105      	movs	r1, #5
 8001058:	201c      	movs	r0, #28
 800105a:	f002 f955 	bl	8003308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800105e:	201c      	movs	r0, #28
 8001060:	f002 f984 	bl	800336c <HAL_NVIC_EnableIRQ>
 8001064:	e015      	b.n	8001092 <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_TIM_Base_MspInit+0xb0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d112      	bne.n	8001092 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106c:	2100      	movs	r1, #0
 800106e:	9103      	str	r1, [sp, #12]
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_TIM_Base_MspInit+0xac>)
 8001072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001074:	f042 0202 	orr.w	r2, r2, #2
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	9303      	str	r3, [sp, #12]
 8001082:	9b03      	ldr	r3, [sp, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001084:	460a      	mov	r2, r1
 8001086:	201d      	movs	r0, #29
 8001088:	f002 f93e 	bl	8003308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800108c:	201d      	movs	r0, #29
 800108e:	f002 f96d 	bl	800336c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001092:	b004      	add	sp, #16
 8001094:	bd10      	pop	{r4, pc}
 8001096:	bf00      	nop
 8001098:	40010000 	.word	0x40010000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40000400 	.word	0x40000400

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b500      	push	{lr}
 80010a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	2300      	movs	r3, #0
 80010aa:	9303      	str	r3, [sp, #12]
 80010ac:	9304      	str	r3, [sp, #16]
 80010ae:	9305      	str	r3, [sp, #20]
 80010b0:	9306      	str	r3, [sp, #24]
 80010b2:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80010b4:	6803      	ldr	r3, [r0, #0]
 80010b6:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_TIM_MspPostInit+0x80>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d117      	bne.n	80010ec <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_TIM_MspPostInit+0x84>)
 80010c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c4:	f042 0201 	orr.w	r2, r2, #1
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP1_Pin;
 80010d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010de:	2301      	movs	r3, #1
 80010e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP1_GPIO_Port, &GPIO_InitStruct);
 80010e2:	a903      	add	r1, sp, #12
 80010e4:	4811      	ldr	r0, [pc, #68]	; (800112c <HAL_TIM_MspPostInit+0x88>)
 80010e6:	f001 fe67 	bl	8002db8 <HAL_GPIO_Init>
 80010ea:	e017      	b.n	800111c <HAL_TIM_MspPostInit+0x78>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80010ec:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_TIM_MspPostInit+0x8c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d114      	bne.n	800111c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_TIM_MspPostInit+0x84>)
 80010f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010fa:	f042 0202 	orr.w	r2, r2, #2
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	9b02      	ldr	r3, [sp, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP2_Pin;
 800110a:	2310      	movs	r3, #16
 800110c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001112:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP2_GPIO_Port, &GPIO_InitStruct);
 8001114:	a903      	add	r1, sp, #12
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <HAL_TIM_MspPostInit+0x90>)
 8001118:	f001 fe4e 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800111c:	b009      	add	sp, #36	; 0x24
 800111e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001122:	bf00      	nop
 8001124:	40010000 	.word	0x40010000
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	40000400 	.word	0x40000400
 8001134:	40020400 	.word	0x40020400

08001138 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800113c:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800113e:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001142:	00ca      	lsls	r2, r1, #3
 8001144:	1a52      	subs	r2, r2, r1
 8001146:	0093      	lsls	r3, r2, #2
 8001148:	4403      	add	r3, r0
 800114a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800114c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800114e:	429a      	cmp	r2, r3
 8001150:	d856      	bhi.n	8001200 <PCD_WriteEmptyTxFifo+0xc8>
 8001152:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001154:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001156:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 800115a:	00a2      	lsls	r2, r4, #2
 800115c:	4402      	add	r2, r0
 800115e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001160:	4293      	cmp	r3, r2
 8001162:	d800      	bhi.n	8001166 <PCD_WriteEmptyTxFifo+0x2e>
  if (ep->xfer_count > ep->xfer_len)
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001164:	461a      	mov	r2, r3
 8001166:	460c      	mov	r4, r1
 8001168:	4607      	mov	r7, r0
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800116a:	f102 0a03 	add.w	sl, r2, #3
 800116e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001172:	e01e      	b.n	80011b2 <PCD_WriteEmptyTxFifo+0x7a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001174:	1a5b      	subs	r3, r3, r1

    if (len > ep->maxpacket)
 8001176:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800117a:	008a      	lsls	r2, r1, #2
 800117c:	443a      	add	r2, r7
 800117e:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8001180:	42b3      	cmp	r3, r6
 8001182:	d800      	bhi.n	8001186 <PCD_WriteEmptyTxFifo+0x4e>

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001184:	461e      	mov	r6, r3

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001186:	f106 0a03 	add.w	sl, r6, #3
 800118a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800118e:	00e3      	lsls	r3, r4, #3
 8001190:	1b1b      	subs	r3, r3, r4
 8001192:	009d      	lsls	r5, r3, #2
 8001194:	443d      	add	r5, r7
 8001196:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001198:	7c3b      	ldrb	r3, [r7, #16]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	b2b3      	uxth	r3, r6
 800119e:	b2e2      	uxtb	r2, r4
 80011a0:	4640      	mov	r0, r8
 80011a2:	f001 f87b 	bl	800229c <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80011a6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80011a8:	4433      	add	r3, r6
 80011aa:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80011ac:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80011ae:	441e      	add	r6, r3
 80011b0:	656e      	str	r6, [r5, #84]	; 0x54
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011b2:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 80011b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	459a      	cmp	sl, r3
 80011c0:	d809      	bhi.n	80011d6 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80011c2:	00e3      	lsls	r3, r4, #3
 80011c4:	1b1b      	subs	r3, r3, r4
 80011c6:	009a      	lsls	r2, r3, #2
 80011c8:	443a      	add	r2, r7
 80011ca:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80011cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011ce:	4299      	cmp	r1, r3
 80011d0:	d201      	bcs.n	80011d6 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1ce      	bne.n	8001174 <PCD_WriteEmptyTxFifo+0x3c>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if (ep->xfer_len <= ep->xfer_count)
 80011d6:	00e3      	lsls	r3, r4, #3
 80011d8:	1b1b      	subs	r3, r3, r4
 80011da:	0098      	lsls	r0, r3, #2
 80011dc:	4407      	add	r7, r0
 80011de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d80e      	bhi.n	8001204 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80011e6:	f004 040f 	and.w	r4, r4, #15
 80011ea:	2301      	movs	r3, #1
 80011ec:	fa03 f404 	lsl.w	r4, r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80011f0:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 80011f4:	ea23 0404 	bic.w	r4, r3, r4
 80011f8:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 80011fc:	2000      	movs	r0, #0
 80011fe:	e002      	b.n	8001206 <PCD_WriteEmptyTxFifo+0xce>

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
  {
    return HAL_ERROR;
 8001200:	2001      	movs	r0, #1
 8001202:	e000      	b.n	8001206 <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
  }

  return HAL_OK;
 8001204:	2000      	movs	r0, #0
}
 8001206:	b002      	add	sp, #8
 8001208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800120c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001210:	2800      	cmp	r0, #0
 8001212:	f000 808a 	beq.w	800132a <HAL_PCD_Init+0x11e>
 8001216:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001218:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800121a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800121e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001222:	d104      	bne.n	800122e <HAL_PCD_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001224:	2300      	movs	r3, #0
 8001226:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800122a:	f7ff fbf1 	bl	8000a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800122e:	2303      	movs	r3, #3
 8001230:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001234:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001236:	f413 7f80 	tst.w	r3, #256	; 0x100
 800123a:	d101      	bne.n	8001240 <HAL_PCD_Init+0x34>
  {
    hpcd->Init.dma_enable = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001240:	6820      	ldr	r0, [r4, #0]
 8001242:	f000 fddb 	bl	8001dfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001246:	4625      	mov	r5, r4
 8001248:	f855 7b10 	ldr.w	r7, [r5], #16
 800124c:	466e      	mov	r6, sp
 800124e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001250:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001254:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001256:	e895 0003 	ldmia.w	r5, {r0, r1}
 800125a:	e886 0003 	stmia.w	r6, {r0, r1}
 800125e:	1d23      	adds	r3, r4, #4
 8001260:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001262:	4638      	mov	r0, r7
 8001264:	f000 fd0a 	bl	8001c7c <USB_CoreInit>
 8001268:	b120      	cbz	r0, 8001274 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800126a:	2302      	movs	r3, #2
 800126c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001270:	2501      	movs	r5, #1
 8001272:	e05b      	b.n	800132c <HAL_PCD_Init+0x120>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001274:	2100      	movs	r1, #0
 8001276:	6820      	ldr	r0, [r4, #0]
 8001278:	f000 fdc6 	bl	8001e08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	e015      	b.n	80012ac <HAL_PCD_Init+0xa0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001280:	00d9      	lsls	r1, r3, #3
 8001282:	1ac8      	subs	r0, r1, r3
 8001284:	0082      	lsls	r2, r0, #2
 8001286:	4422      	add	r2, r4
 8001288:	2001      	movs	r0, #1
 800128a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800128e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001292:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001296:	2000      	movs	r0, #0
 8001298:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800129c:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800129e:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a0:	1aca      	subs	r2, r1, r3
 80012a2:	0091      	lsls	r1, r2, #2
 80012a4:	4421      	add	r1, r4
 80012a6:	6508      	str	r0, [r1, #80]	; 0x50

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	6865      	ldr	r5, [r4, #4]
 80012ae:	42ab      	cmp	r3, r5
 80012b0:	d3e6      	bcc.n	8001280 <HAL_PCD_Init+0x74>
 80012b2:	2300      	movs	r3, #0
 80012b4:	e015      	b.n	80012e2 <HAL_PCD_Init+0xd6>
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012b6:	00d8      	lsls	r0, r3, #3
 80012b8:	1ac1      	subs	r1, r0, r3
 80012ba:	008a      	lsls	r2, r1, #2
 80012bc:	4422      	add	r2, r4
 80012be:	2100      	movs	r1, #0
 80012c0:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80012c4:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012c8:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012cc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012d0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012d4:	1ac2      	subs	r2, r0, r3
 80012d6:	0090      	lsls	r0, r2, #2
 80012d8:	4420      	add	r0, r4
 80012da:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012de:	3301      	adds	r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	429d      	cmp	r5, r3
 80012e4:	d8e7      	bhi.n	80012b6 <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012e6:	4625      	mov	r5, r4
 80012e8:	f855 7b10 	ldr.w	r7, [r5], #16
 80012ec:	466e      	mov	r6, sp
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012fa:	e886 0003 	stmia.w	r6, {r0, r1}
 80012fe:	1d23      	adds	r3, r4, #4
 8001300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001302:	4638      	mov	r0, r7
 8001304:	f000 fdc6 	bl	8001e94 <USB_DevInit>
 8001308:	4605      	mov	r5, r0
 800130a:	b120      	cbz	r0, 8001316 <HAL_PCD_Init+0x10a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800130c:	2302      	movs	r3, #2
 800130e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001312:	2501      	movs	r5, #1
 8001314:	e00a      	b.n	800132c <HAL_PCD_Init+0x120>
  }

  hpcd->USB_Address = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800131c:	2301      	movs	r3, #1
 800131e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001322:	6820      	ldr	r0, [r4, #0]
 8001324:	f001 f960 	bl	80025e8 <USB_DevDisconnect>

  return HAL_OK;
 8001328:	e000      	b.n	800132c <HAL_PCD_Init+0x120>
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 800132a:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800132c:	4628      	mov	r0, r5
 800132e:	b00b      	add	sp, #44	; 0x2c
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001332:	bf00      	nop

08001334 <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001334:	6802      	ldr	r2, [r0, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001336:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800133a:	2b01      	cmp	r3, #1
 800133c:	d018      	beq.n	8001370 <HAL_PCD_Start+0x3c>
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800133e:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001340:	2301      	movs	r3, #1
 8001342:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001346:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <HAL_PCD_Start+0x26>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800134c:	6983      	ldr	r3, [r0, #24]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800134e:	2b01      	cmp	r3, #1
 8001350:	d003      	beq.n	800135a <HAL_PCD_Start+0x26>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001352:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6393      	str	r3, [r2, #56]	; 0x38
 800135a:	4604      	mov	r4, r0
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800135c:	6800      	ldr	r0, [r0, #0]
 800135e:	f001 f937 	bl	80025d0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001362:	6820      	ldr	r0, [r4, #0]
 8001364:	f000 fd44 	bl	8001df0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001368:	2000      	movs	r0, #0
 800136a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800136e:	bd10      	pop	{r4, pc}
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001370:	2002      	movs	r0, #2
 8001372:	4770      	bx	lr

08001374 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	4605      	mov	r5, r0
 8001378:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800137a:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800137c:	6c19      	ldr	r1, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800137e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8001382:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8001386:	68a3      	ldr	r3, [r4, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001388:	6902      	ldr	r2, [r0, #16]
 800138a:	2a01      	cmp	r2, #1
 800138c:	d150      	bne.n	8001430 <PCD_EP_OutXfrComplete_int+0xbc>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800138e:	f013 0f08 	tst.w	r3, #8
 8001392:	d014      	beq.n	80013be <PCD_EP_OutXfrComplete_int+0x4a>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001394:	4a33      	ldr	r2, [pc, #204]	; (8001464 <PCD_EP_OutXfrComplete_int+0xf0>)
 8001396:	4291      	cmp	r1, r2
 8001398:	d905      	bls.n	80013a6 <PCD_EP_OutXfrComplete_int+0x32>
 800139a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800139e:	d002      	beq.n	80013a6 <PCD_EP_OutXfrComplete_int+0x32>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80013a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013a4:	60a3      	str	r3, [r4, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80013a6:	4628      	mov	r0, r5
 80013a8:	f7ff fb7e 	bl	8000aa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013ac:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 80013b0:	2101      	movs	r1, #1
 80013b2:	6828      	ldr	r0, [r5, #0]
 80013b4:	f001 f978 	bl	80026a8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013b8:	2308      	movs	r3, #8
 80013ba:	60a3      	str	r3, [r4, #8]
 80013bc:	e04f      	b.n	800145e <PCD_EP_OutXfrComplete_int+0xea>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80013be:	f013 0f20 	tst.w	r3, #32
 80013c2:	d002      	beq.n	80013ca <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013c4:	2320      	movs	r3, #32
 80013c6:	60a3      	str	r3, [r4, #8]
 80013c8:	e049      	b.n	800145e <PCD_EP_OutXfrComplete_int+0xea>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80013ca:	f013 0f28 	tst.w	r3, #40	; 0x28
 80013ce:	d146      	bne.n	800145e <PCD_EP_OutXfrComplete_int+0xea>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80013d0:	4a24      	ldr	r2, [pc, #144]	; (8001464 <PCD_EP_OutXfrComplete_int+0xf0>)
 80013d2:	4291      	cmp	r1, r2
 80013d4:	d906      	bls.n	80013e4 <PCD_EP_OutXfrComplete_int+0x70>
 80013d6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80013da:	d003      	beq.n	80013e4 <PCD_EP_OutXfrComplete_int+0x70>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80013dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e0:	60a3      	str	r3, [r4, #8]
 80013e2:	e03c      	b.n	800145e <PCD_EP_OutXfrComplete_int+0xea>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80013e4:	00f2      	lsls	r2, r6, #3
 80013e6:	1b92      	subs	r2, r2, r6
 80013e8:	0093      	lsls	r3, r2, #2
 80013ea:	442b      	add	r3, r5
 80013ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80013f0:	6921      	ldr	r1, [r4, #16]
 80013f2:	f3c1 0112 	ubfx	r1, r1, #0, #19
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80013f6:	1a52      	subs	r2, r2, r1
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
 80013f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80013fc:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8001400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001404:	440a      	add	r2, r1
 8001406:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800140a:	b2f1      	uxtb	r1, r6
 800140c:	4628      	mov	r0, r5
 800140e:	f7ff fb53 	bl	8000ab8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001412:	bb26      	cbnz	r6, 800145e <PCD_EP_OutXfrComplete_int+0xea>
 8001414:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001418:	00b3      	lsls	r3, r6, #2
 800141a:	442b      	add	r3, r5
 800141c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001420:	b9eb      	cbnz	r3, 800145e <PCD_EP_OutXfrComplete_int+0xea>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001422:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8001426:	2101      	movs	r1, #1
 8001428:	6828      	ldr	r0, [r5, #0]
 800142a:	f001 f93d 	bl	80026a8 <USB_EP0_OutStart>
 800142e:	e016      	b.n	800145e <PCD_EP_OutXfrComplete_int+0xea>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <PCD_EP_OutXfrComplete_int+0xf4>)
 8001432:	4291      	cmp	r1, r2
 8001434:	d110      	bne.n	8001458 <PCD_EP_OutXfrComplete_int+0xe4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001436:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800143a:	d003      	beq.n	8001444 <PCD_EP_OutXfrComplete_int+0xd0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800143c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001440:	60a3      	str	r3, [r4, #8]
 8001442:	e00c      	b.n	800145e <PCD_EP_OutXfrComplete_int+0xea>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001444:	f013 0f20 	tst.w	r3, #32
 8001448:	d001      	beq.n	800144e <PCD_EP_OutXfrComplete_int+0xda>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800144a:	2320      	movs	r3, #32
 800144c:	60a3      	str	r3, [r4, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800144e:	b2f1      	uxtb	r1, r6
 8001450:	4628      	mov	r0, r5
 8001452:	f7ff fb31 	bl	8000ab8 <HAL_PCD_DataOutStageCallback>
 8001456:	e002      	b.n	800145e <PCD_EP_OutXfrComplete_int+0xea>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001458:	b2f1      	uxtb	r1, r6
 800145a:	f7ff fb2d 	bl	8000ab8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800145e:	2000      	movs	r0, #0
 8001460:	bd70      	pop	{r4, r5, r6, pc}
 8001462:	bf00      	nop
 8001464:	4f54300a 	.word	0x4f54300a
 8001468:	4f54310a 	.word	0x4f54310a

0800146c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800146c:	b538      	push	{r3, r4, r5, lr}
 800146e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001470:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001472:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001474:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8001478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800147c:	688a      	ldr	r2, [r1, #8]

  if (hpcd->Init.dma_enable == 1U)
 800147e:	6903      	ldr	r3, [r0, #16]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d109      	bne.n	8001498 <PCD_EP_OutSetupPacket_int+0x2c>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <PCD_EP_OutSetupPacket_int+0x60>)
 8001486:	429d      	cmp	r5, r3
 8001488:	d90f      	bls.n	80014aa <PCD_EP_OutSetupPacket_int+0x3e>
 800148a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800148e:	d00c      	beq.n	80014aa <PCD_EP_OutSetupPacket_int+0x3e>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001494:	608b      	str	r3, [r1, #8]
 8001496:	e008      	b.n	80014aa <PCD_EP_OutSetupPacket_int+0x3e>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <PCD_EP_OutSetupPacket_int+0x64>)
 800149a:	429d      	cmp	r5, r3
 800149c:	d105      	bne.n	80014aa <PCD_EP_OutSetupPacket_int+0x3e>
 800149e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80014a2:	d002      	beq.n	80014aa <PCD_EP_OutSetupPacket_int+0x3e>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80014a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a8:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff fafc 	bl	8000aa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <PCD_EP_OutSetupPacket_int+0x60>)
 80014b2:	429d      	cmp	r5, r3
 80014b4:	d908      	bls.n	80014c8 <PCD_EP_OutSetupPacket_int+0x5c>
 80014b6:	6923      	ldr	r3, [r4, #16]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d105      	bne.n	80014c8 <PCD_EP_OutSetupPacket_int+0x5c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014bc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80014c0:	2101      	movs	r1, #1
 80014c2:	6820      	ldr	r0, [r4, #0]
 80014c4:	f001 f8f0 	bl	80026a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
}
 80014c8:	2000      	movs	r0, #0
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	4f54300a 	.word	0x4f54300a
 80014d0:	4f54310a 	.word	0x4f54310a

080014d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014d8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014da:	6805      	ldr	r5, [r0, #0]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014dc:	4628      	mov	r0, r5
 80014de:	f001 f8c3 	bl	8002668 <USB_GetMode>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	f040 8219 	bne.w	800191a <HAL_PCD_IRQHandler+0x446>
 80014e8:	462e      	mov	r6, r5
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014ea:	6820      	ldr	r0, [r4, #0]
 80014ec:	f001 f888 	bl	8002600 <USB_ReadInterrupts>
 80014f0:	2800      	cmp	r0, #0
 80014f2:	f000 8212 	beq.w	800191a <HAL_PCD_IRQHandler+0x446>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	f001 f882 	bl	8002600 <USB_ReadInterrupts>
 80014fc:	f010 0f02 	tst.w	r0, #2
 8001500:	d004      	beq.n	800150c <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	6953      	ldr	r3, [r2, #20]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	6153      	str	r3, [r2, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800150c:	6820      	ldr	r0, [r4, #0]
 800150e:	f001 f877 	bl	8002600 <USB_ReadInterrupts>
 8001512:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8001516:	d04e      	beq.n	80015b6 <HAL_PCD_IRQHandler+0xe2>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001518:	6820      	ldr	r0, [r4, #0]
 800151a:	f001 f875 	bl	8002608 <USB_ReadDevAllOutEpInterrupt>
 800151e:	4607      	mov	r7, r0
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 8001520:	f04f 0800 	mov.w	r8, #0

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 8001524:	e045      	b.n	80015b2 <HAL_PCD_IRQHandler+0xde>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001526:	f017 0f01 	tst.w	r7, #1
 800152a:	d03f      	beq.n	80015ac <HAL_PCD_IRQHandler+0xd8>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800152c:	fa5f f188 	uxtb.w	r1, r8
 8001530:	6820      	ldr	r0, [r4, #0]
 8001532:	f001 f879 	bl	8002628 <USB_ReadDevOutEPInterrupt>
 8001536:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001538:	f010 0f01 	tst.w	r0, #1
 800153c:	d008      	beq.n	8001550 <HAL_PCD_IRQHandler+0x7c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800153e:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001542:	2201      	movs	r2, #1
 8001544:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001548:	4641      	mov	r1, r8
 800154a:	4620      	mov	r0, r4
 800154c:	f7ff ff12 	bl	8001374 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001550:	f019 0f08 	tst.w	r9, #8
 8001554:	d008      	beq.n	8001568 <HAL_PCD_IRQHandler+0x94>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001556:	4641      	mov	r1, r8
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff ff87 	bl	800146c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800155e:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001562:	2208      	movs	r2, #8
 8001564:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001568:	f019 0f10 	tst.w	r9, #16
 800156c:	d004      	beq.n	8001578 <HAL_PCD_IRQHandler+0xa4>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800156e:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001572:	2210      	movs	r2, #16
 8001574:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001578:	f019 0f20 	tst.w	r9, #32
 800157c:	d00d      	beq.n	800159a <HAL_PCD_IRQHandler+0xc6>
          {
            if (hpcd->Init.dma_enable == 1U)
 800157e:	6923      	ldr	r3, [r4, #16]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_PCD_IRQHandler+0xbc>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001584:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001588:	2101      	movs	r1, #1
 800158a:	6820      	ldr	r0, [r4, #0]
 800158c:	f001 f88c 	bl	80026a8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001590:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001594:	2220      	movs	r2, #32
 8001596:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800159a:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800159e:	d005      	beq.n	80015ac <HAL_PCD_IRQHandler+0xd8>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015a0:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 80015a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }
        }
        epnum++;
 80015ac:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80015b0:	087f      	lsrs	r7, r7, #1
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 80015b2:	2f00      	cmp	r7, #0
 80015b4:	d1b7      	bne.n	8001526 <HAL_PCD_IRQHandler+0x52>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015b6:	6820      	ldr	r0, [r4, #0]
 80015b8:	f001 f822 	bl	8002600 <USB_ReadInterrupts>
 80015bc:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80015c0:	d071      	beq.n	80016a6 <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015c2:	6820      	ldr	r0, [r4, #0]
 80015c4:	f001 f828 	bl	8002618 <USB_ReadDevAllInEpInterrupt>
 80015c8:	4607      	mov	r7, r0

      epnum = 0U;
 80015ca:	f04f 0800 	mov.w	r8, #0

      while (ep_intr != 0U)
 80015ce:	e068      	b.n	80016a2 <HAL_PCD_IRQHandler+0x1ce>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015d0:	f017 0f01 	tst.w	r7, #1
 80015d4:	d062      	beq.n	800169c <HAL_PCD_IRQHandler+0x1c8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015d6:	fa5f fa88 	uxtb.w	sl, r8
 80015da:	4651      	mov	r1, sl
 80015dc:	6820      	ldr	r0, [r4, #0]
 80015de:	f001 f82d 	bl	800263c <USB_ReadDevInEPInterrupt>
 80015e2:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015e4:	f010 0f01 	tst.w	r0, #1
 80015e8:	d031      	beq.n	800164e <HAL_PCD_IRQHandler+0x17a>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015ea:	f008 030f 	and.w	r3, r8, #15
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015f4:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 80015f8:	ea23 0302 	bic.w	r3, r3, r2
 80015fc:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001600:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001604:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908

            if (hpcd->Init.dma_enable == 1U)
 8001608:	6923      	ldr	r3, [r4, #16]
 800160a:	428b      	cmp	r3, r1
 800160c:	d109      	bne.n	8001622 <HAL_PCD_IRQHandler+0x14e>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800160e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001612:	ebc8 0202 	rsb	r2, r8, r2
 8001616:	0093      	lsls	r3, r2, #2
 8001618:	4423      	add	r3, r4
 800161a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800161c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800161e:	440a      	add	r2, r1
 8001620:	649a      	str	r2, [r3, #72]	; 0x48
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001622:	4651      	mov	r1, sl
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fa53 	bl	8000ad0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800162a:	6923      	ldr	r3, [r4, #16]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10e      	bne.n	800164e <HAL_PCD_IRQHandler+0x17a>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001630:	f1b8 0f00 	cmp.w	r8, #0
 8001634:	d10b      	bne.n	800164e <HAL_PCD_IRQHandler+0x17a>
 8001636:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 800163a:	0093      	lsls	r3, r2, #2
 800163c:	4423      	add	r3, r4
 800163e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001640:	b92b      	cbnz	r3, 800164e <HAL_PCD_IRQHandler+0x17a>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001642:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001646:	2101      	movs	r1, #1
 8001648:	6820      	ldr	r0, [r4, #0]
 800164a:	f001 f82d 	bl	80026a8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800164e:	f019 0f08 	tst.w	r9, #8
 8001652:	d004      	beq.n	800165e <HAL_PCD_IRQHandler+0x18a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001654:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001658:	2208      	movs	r2, #8
 800165a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800165e:	f019 0f10 	tst.w	r9, #16
 8001662:	d004      	beq.n	800166e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001664:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001668:	2210      	movs	r2, #16
 800166a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800166e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001672:	d004      	beq.n	800167e <HAL_PCD_IRQHandler+0x1aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001674:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001678:	2240      	movs	r2, #64	; 0x40
 800167a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800167e:	f019 0f02 	tst.w	r9, #2
 8001682:	d004      	beq.n	800168e <HAL_PCD_IRQHandler+0x1ba>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001684:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8001688:	2202      	movs	r2, #2
 800168a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800168e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001692:	d003      	beq.n	800169c <HAL_PCD_IRQHandler+0x1c8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001694:	4641      	mov	r1, r8
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff fd4e 	bl	8001138 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800169c:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80016a0:	087f      	lsrs	r7, r7, #1
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);

      epnum = 0U;

      while (ep_intr != 0U)
 80016a2:	2f00      	cmp	r7, #0
 80016a4:	d194      	bne.n	80015d0 <HAL_PCD_IRQHandler+0xfc>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016a6:	6820      	ldr	r0, [r4, #0]
 80016a8:	f000 ffaa 	bl	8002600 <USB_ReadInterrupts>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	da18      	bge.n	80016e2 <HAL_PCD_IRQHandler+0x20e>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016b0:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 80016bc:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d106      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x1fe>
      {
        hpcd->LPM_State = LPM_L0;
 80016c4:	2100      	movs	r1, #0
 80016c6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016ca:	4620      	mov	r0, r4
 80016cc:	f000 fab6 	bl	8001c3c <HAL_PCDEx_LPM_Callback>
 80016d0:	e002      	b.n	80016d8 <HAL_PCD_IRQHandler+0x204>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff fa38 	bl	8000b48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016d8:	6822      	ldr	r2, [r4, #0]
 80016da:	6953      	ldr	r3, [r2, #20]
 80016dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016e0:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016e2:	6820      	ldr	r0, [r4, #0]
 80016e4:	f000 ff8c 	bl	8002600 <USB_ReadInterrupts>
 80016e8:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80016ec:	d00c      	beq.n	8001708 <HAL_PCD_IRQHandler+0x234>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016ee:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80016f2:	f013 0f01 	tst.w	r3, #1
 80016f6:	d002      	beq.n	80016fe <HAL_PCD_IRQHandler+0x22a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff fa0d 	bl	8000b18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016fe:	6822      	ldr	r2, [r4, #0]
 8001700:	6953      	ldr	r3, [r2, #20]
 8001702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001706:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001708:	6820      	ldr	r0, [r4, #0]
 800170a:	f000 ff79 	bl	8002600 <USB_ReadInterrupts>
 800170e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001712:	d04f      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x2e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001714:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001720:	2110      	movs	r1, #16
 8001722:	6820      	ldr	r0, [r4, #0]
 8001724:	f000 fb88 	bl	8001e38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	2200      	movs	r2, #0
 800172a:	e014      	b.n	8001756 <HAL_PCD_IRQHandler+0x282>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800172c:	eb06 1342 	add.w	r3, r6, r2, lsl #5
 8001730:	f64f 307f 	movw	r0, #64383	; 0xfb7f
 8001734:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001738:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800173c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8001740:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001744:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001748:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800174c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8001750:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001754:	3201      	adds	r2, #1
 8001756:	6863      	ldr	r3, [r4, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d3e7      	bcc.n	800172c <HAL_PCD_IRQHandler+0x258>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001762:	61fb      	str	r3, [r7, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001766:	b153      	cbz	r3, 800177e <HAL_PCD_IRQHandler+0x2aa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800176c:	f043 030b 	orr.w	r3, r3, #11
 8001770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001776:	f043 030b 	orr.w	r3, r3, #11
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
 800177c:	e009      	b.n	8001792 <HAL_PCD_IRQHandler+0x2be>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001784:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001788:	617b      	str	r3, [r7, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f043 030b 	orr.w	r3, r3, #11
 8001790:	613b      	str	r3, [r7, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001792:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8001796:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800179a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800179e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80017a2:	7c21      	ldrb	r1, [r4, #16]
 80017a4:	6820      	ldr	r0, [r4, #0]
 80017a6:	f000 ff7f 	bl	80026a8 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017aa:	6822      	ldr	r2, [r4, #0]
 80017ac:	6953      	ldr	r3, [r2, #20]
 80017ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017b4:	6820      	ldr	r0, [r4, #0]
 80017b6:	f000 ff23 	bl	8002600 <USB_ReadInterrupts>
 80017ba:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80017be:	d016      	beq.n	80017ee <HAL_PCD_IRQHandler+0x31a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017c0:	6820      	ldr	r0, [r4, #0]
 80017c2:	f000 ff55 	bl	8002670 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017c6:	6820      	ldr	r0, [r4, #0]
 80017c8:	f000 fc34 	bl	8002034 <USB_GetDevSpeed>
 80017cc:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017ce:	6826      	ldr	r6, [r4, #0]
 80017d0:	f001 fabe 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 80017d4:	7b22      	ldrb	r2, [r4, #12]
 80017d6:	4601      	mov	r1, r0
 80017d8:	4630      	mov	r0, r6
 80017da:	f000 fa93 	bl	8001d04 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff f988 	bl	8000af4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017e4:	6822      	ldr	r2, [r4, #0]
 80017e6:	6953      	ldr	r3, [r2, #20]
 80017e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ec:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017ee:	6820      	ldr	r0, [r4, #0]
 80017f0:	f000 ff06 	bl	8002600 <USB_ReadInterrupts>
 80017f4:	f010 0f10 	tst.w	r0, #16
 80017f8:	d043      	beq.n	8001882 <HAL_PCD_IRQHandler+0x3ae>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	6993      	ldr	r3, [r2, #24]
 80017fe:	f023 0310 	bic.w	r3, r3, #16
 8001802:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8001804:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001806:	f006 070f 	and.w	r7, r6, #15

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800180a:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800180e:	2b02      	cmp	r3, #2
 8001810:	d11f      	bne.n	8001852 <HAL_PCD_IRQHandler+0x37e>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001812:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001816:	421e      	tst	r6, r3
 8001818:	d02e      	beq.n	8001878 <HAL_PCD_IRQHandler+0x3a4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800181a:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800181e:	ebc7 0309 	rsb	r3, r7, r9
 8001822:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001826:	44a0      	add	r8, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001828:	0936      	lsrs	r6, r6, #4

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800182a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800182e:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8001832:	4628      	mov	r0, r5
 8001834:	f000 fe4e 	bl	80024d4 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001838:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800183c:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8001840:	4433      	add	r3, r6
 8001842:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001846:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 800184a:	441e      	add	r6, r3
 800184c:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
 8001850:	e012      	b.n	8001878 <HAL_PCD_IRQHandler+0x3a4>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001852:	2b06      	cmp	r3, #6
 8001854:	d110      	bne.n	8001878 <HAL_PCD_IRQHandler+0x3a4>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001856:	2208      	movs	r2, #8
 8001858:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800185c:	4628      	mov	r0, r5
 800185e:	f000 fe39 	bl	80024d4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001862:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001866:	00fb      	lsls	r3, r7, #3
 8001868:	1bd9      	subs	r1, r3, r7
 800186a:	008a      	lsls	r2, r1, #2
 800186c:	4422      	add	r2, r4
 800186e:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001872:	4433      	add	r3, r6
 8001874:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001878:	6822      	ldr	r2, [r4, #0]
 800187a:	6993      	ldr	r3, [r2, #24]
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001882:	6820      	ldr	r0, [r4, #0]
 8001884:	f000 febc 	bl	8002600 <USB_ReadInterrupts>
 8001888:	f010 0f08 	tst.w	r0, #8
 800188c:	d007      	beq.n	800189e <HAL_PCD_IRQHandler+0x3ca>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff f92a 	bl	8000ae8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001894:	6822      	ldr	r2, [r4, #0]
 8001896:	6953      	ldr	r3, [r2, #20]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800189e:	6820      	ldr	r0, [r4, #0]
 80018a0:	f000 feae 	bl	8002600 <USB_ReadInterrupts>
 80018a4:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80018a8:	d008      	beq.n	80018bc <HAL_PCD_IRQHandler+0x3e8>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018aa:	2100      	movs	r1, #0
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff f957 	bl	8000b60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018b2:	6822      	ldr	r2, [r4, #0]
 80018b4:	6953      	ldr	r3, [r2, #20]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	f000 fe9f 	bl	8002600 <USB_ReadInterrupts>
 80018c2:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80018c6:	d008      	beq.n	80018da <HAL_PCD_IRQHandler+0x406>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018c8:	2100      	movs	r1, #0
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff f942 	bl	8000b54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018d0:	6822      	ldr	r2, [r4, #0]
 80018d2:	6953      	ldr	r3, [r2, #20]
 80018d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018da:	6820      	ldr	r0, [r4, #0]
 80018dc:	f000 fe90 	bl	8002600 <USB_ReadInterrupts>
 80018e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80018e4:	d007      	beq.n	80018f6 <HAL_PCD_IRQHandler+0x422>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff f940 	bl	8000b6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018ec:	6822      	ldr	r2, [r4, #0]
 80018ee:	6953      	ldr	r3, [r2, #20]
 80018f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018f4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	f000 fe82 	bl	8002600 <USB_ReadInterrupts>
 80018fc:	f010 0f04 	tst.w	r0, #4
 8001900:	d00b      	beq.n	800191a <HAL_PCD_IRQHandler+0x446>
    {
      temp = hpcd->Instance->GOTGINT;
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001906:	f015 0f04 	tst.w	r5, #4
 800190a:	d002      	beq.n	8001912 <HAL_PCD_IRQHandler+0x43e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800190c:	4620      	mov	r0, r4
 800190e:	f7ff f933 	bl	8000b78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	6853      	ldr	r3, [r2, #4]
 8001916:	432b      	orrs	r3, r5
 8001918:	6053      	str	r3, [r2, #4]
 800191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800191e:	bf00      	nop

08001920 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001920:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001924:	2b01      	cmp	r3, #1
 8001926:	d00d      	beq.n	8001944 <HAL_PCD_SetAddress+0x24>
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001928:	b510      	push	{r4, lr}
 800192a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800192c:	2301      	movs	r3, #1
 800192e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001932:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001936:	6800      	ldr	r0, [r0, #0]
 8001938:	f000 fe3a 	bl	80025b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800193c:	2000      	movs	r0, #0
 800193e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001942:	bd10      	pop	{r4, pc}
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001944:	2002      	movs	r0, #2
 8001946:	4770      	bx	lr

08001948 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800194a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800194e:	d00e      	beq.n	800196e <HAL_PCD_EP_Open+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001950:	f001 060f 	and.w	r6, r1, #15
 8001954:	00f5      	lsls	r5, r6, #3
 8001956:	1baf      	subs	r7, r5, r6
 8001958:	00bc      	lsls	r4, r7, #2
 800195a:	4627      	mov	r7, r4
 800195c:	3438      	adds	r4, #56	; 0x38
 800195e:	4404      	add	r4, r0
 8001960:	3404      	adds	r4, #4
    ep->is_in = 1U;
 8001962:	463e      	mov	r6, r7
 8001964:	4406      	add	r6, r0
 8001966:	2501      	movs	r5, #1
 8001968:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 800196c:	e00e      	b.n	800198c <HAL_PCD_EP_Open+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800196e:	f001 060f 	and.w	r6, r1, #15
 8001972:	00f5      	lsls	r5, r6, #3
 8001974:	1baf      	subs	r7, r5, r6
 8001976:	00bc      	lsls	r4, r7, #2
 8001978:	4627      	mov	r7, r4
 800197a:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 800197e:	4404      	add	r4, r0
 8001980:	3404      	adds	r4, #4
    ep->is_in = 0U;
 8001982:	463e      	mov	r6, r7
 8001984:	4406      	add	r6, r0
 8001986:	2500      	movs	r5, #0
 8001988:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800198c:	f001 010f 	and.w	r1, r1, #15
 8001990:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 8001992:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8001994:	70e3      	strb	r3, [r4, #3]

  if (ep->is_in != 0U)
 8001996:	7862      	ldrb	r2, [r4, #1]
 8001998:	b102      	cbz	r2, 800199c <HAL_PCD_EP_Open+0x54>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800199a:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800199c:	2b02      	cmp	r3, #2
 800199e:	d101      	bne.n	80019a4 <HAL_PCD_EP_Open+0x5c>
  {
    ep->data_pid_start = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	7123      	strb	r3, [r4, #4]
  }

  __HAL_LOCK(hpcd);
 80019a4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d00b      	beq.n	80019c4 <HAL_PCD_EP_Open+0x7c>
 80019ac:	4605      	mov	r5, r0
 80019ae:	2301      	movs	r3, #1
 80019b0:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019b4:	4621      	mov	r1, r4
 80019b6:	6800      	ldr	r0, [r0, #0]
 80019b8:	f000 fb4e 	bl	8002058 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019bc:	2000      	movs	r0, #0
 80019be:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc

  return ret;
 80019c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ep_type == EP_TYPE_BULK)
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 80019c4:	2002      	movs	r0, #2
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return ret;
}
 80019c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019c8:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019ce:	d00e      	beq.n	80019ee <HAL_PCD_EP_Close+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019d0:	f001 040f 	and.w	r4, r1, #15
 80019d4:	00e2      	lsls	r2, r4, #3
 80019d6:	1b15      	subs	r5, r2, r4
 80019d8:	00ab      	lsls	r3, r5, #2
 80019da:	461d      	mov	r5, r3
 80019dc:	3338      	adds	r3, #56	; 0x38
 80019de:	4403      	add	r3, r0
 80019e0:	3304      	adds	r3, #4
    ep->is_in = 1U;
 80019e2:	462c      	mov	r4, r5
 80019e4:	4404      	add	r4, r0
 80019e6:	2201      	movs	r2, #1
 80019e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80019ec:	e00e      	b.n	8001a0c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ee:	f001 040f 	and.w	r4, r1, #15
 80019f2:	00e2      	lsls	r2, r4, #3
 80019f4:	1b15      	subs	r5, r2, r4
 80019f6:	00ab      	lsls	r3, r5, #2
 80019f8:	461d      	mov	r5, r3
 80019fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019fe:	4403      	add	r3, r0
 8001a00:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001a02:	462c      	mov	r4, r5
 8001a04:	4404      	add	r4, r0
 8001a06:	2200      	movs	r2, #0
 8001a08:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a0c:	f001 010f 	and.w	r1, r1, #15
 8001a10:	7019      	strb	r1, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a12:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001a16:	2a01      	cmp	r2, #1
 8001a18:	d00b      	beq.n	8001a32 <HAL_PCD_EP_Close+0x6a>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a22:	4619      	mov	r1, r3
 8001a24:	6800      	ldr	r0, [r0, #0]
 8001a26:	f000 fb63 	bl	80020f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001a30:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001a32:	2002      	movs	r0, #2
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001a34:	bd38      	pop	{r3, r4, r5, pc}
 8001a36:	bf00      	nop

08001a38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
 8001a3a:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3e:	00ee      	lsls	r6, r5, #3
 8001a40:	1b71      	subs	r1, r6, r5
 8001a42:	008c      	lsls	r4, r1, #2
 8001a44:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001a48:	4404      	add	r4, r0
 8001a4a:	1d21      	adds	r1, r4, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a4c:	1b76      	subs	r6, r6, r5
 8001a4e:	00b4      	lsls	r4, r6, #2
 8001a50:	4404      	add	r4, r0
 8001a52:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8001a56:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001a60:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a64:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc

  if (hpcd->Init.dma_enable == 1U)
 8001a68:	6903      	ldr	r3, [r0, #16]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d105      	bne.n	8001a7a <HAL_PCD_EP_Receive+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a6e:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001a72:	00b4      	lsls	r4, r6, #2
 8001a74:	4404      	add	r4, r0
 8001a76:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a7a:	b925      	cbnz	r5, 8001a86 <HAL_PCD_EP_Receive+0x4e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	6800      	ldr	r0, [r0, #0]
 8001a80:	f000 fb7e 	bl	8002180 <USB_EP0StartXfer>
 8001a84:	e003      	b.n	8001a8e <HAL_PCD_EP_Receive+0x56>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	6800      	ldr	r0, [r0, #0]
 8001a8a:	f000 fc1d 	bl	80022c8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001a8e:	2000      	movs	r0, #0
 8001a90:	bd70      	pop	{r4, r5, r6, pc}
 8001a92:	bf00      	nop

08001a94 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a94:	f001 010f 	and.w	r1, r1, #15
 8001a98:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001a9c:	008b      	lsls	r3, r1, #2
 8001a9e:	4418      	add	r0, r3
}
 8001aa0:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aa8:	b570      	push	{r4, r5, r6, lr}
 8001aaa:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aae:	00ee      	lsls	r6, r5, #3
 8001ab0:	1b71      	subs	r1, r6, r5
 8001ab2:	008c      	lsls	r4, r1, #2
 8001ab4:	3438      	adds	r4, #56	; 0x38
 8001ab6:	4404      	add	r4, r0
 8001ab8:	1d21      	adds	r1, r4, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aba:	1b76      	subs	r6, r6, r5
 8001abc:	00b4      	lsls	r4, r6, #2
 8001abe:	4404      	add	r4, r0
 8001ac0:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8001ac2:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ace:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c

  if (hpcd->Init.dma_enable == 1U)
 8001ad2:	6903      	ldr	r3, [r0, #16]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d104      	bne.n	8001ae2 <HAL_PCD_EP_Transmit+0x3a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ad8:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001adc:	00b4      	lsls	r4, r6, #2
 8001ade:	4404      	add	r4, r0
 8001ae0:	64e2      	str	r2, [r4, #76]	; 0x4c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ae2:	b925      	cbnz	r5, 8001aee <HAL_PCD_EP_Transmit+0x46>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	6800      	ldr	r0, [r0, #0]
 8001ae8:	f000 fb4a 	bl	8002180 <USB_EP0StartXfer>
 8001aec:	e003      	b.n	8001af6 <HAL_PCD_EP_Transmit+0x4e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	6800      	ldr	r0, [r0, #0]
 8001af2:	f000 fbe9 	bl	80022c8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001af6:	2000      	movs	r0, #0
 8001af8:	bd70      	pop	{r4, r5, r6, pc}
 8001afa:	bf00      	nop

08001afc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b02:	6843      	ldr	r3, [r0, #4]
 8001b04:	429d      	cmp	r5, r3
 8001b06:	d835      	bhi.n	8001b74 <HAL_PCD_EP_SetStall+0x78>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b08:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b0c:	d00b      	beq.n	8001b26 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b0e:	00ea      	lsls	r2, r5, #3
 8001b10:	1b51      	subs	r1, r2, r5
 8001b12:	008b      	lsls	r3, r1, #2
 8001b14:	4619      	mov	r1, r3
 8001b16:	3338      	adds	r3, #56	; 0x38
 8001b18:	4403      	add	r3, r0
 8001b1a:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8001b1c:	4401      	add	r1, r0
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 8001b24:	e00c      	b.n	8001b40 <HAL_PCD_EP_SetStall+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b26:	00ca      	lsls	r2, r1, #3
 8001b28:	1a54      	subs	r4, r2, r1
 8001b2a:	00a3      	lsls	r3, r4, #2
 8001b2c:	461c      	mov	r4, r3
 8001b2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b32:	4403      	add	r3, r0
 8001b34:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001b36:	4622      	mov	r2, r4
 8001b38:	4402      	add	r2, r0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  }

  ep->is_stall = 1U;
 8001b40:	2201      	movs	r2, #1
 8001b42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b44:	701d      	strb	r5, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b46:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001b4a:	2a01      	cmp	r2, #1
 8001b4c:	d014      	beq.n	8001b78 <HAL_PCD_EP_SetStall+0x7c>
 8001b4e:	4604      	mov	r4, r0
 8001b50:	2201      	movs	r2, #1
 8001b52:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b56:	4619      	mov	r1, r3
 8001b58:	6800      	ldr	r0, [r0, #0]
 8001b5a:	f000 fccd 	bl	80024f8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b5e:	b92d      	cbnz	r5, 8001b6c <HAL_PCD_EP_SetStall+0x70>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b60:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001b64:	7c21      	ldrb	r1, [r4, #16]
 8001b66:	6820      	ldr	r0, [r4, #0]
 8001b68:	f000 fd9e 	bl	80026a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001b74:	2001      	movs	r0, #1
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
  }

  ep->is_stall = 1U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001b78:	2002      	movs	r0, #2
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}

08001b7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7c:	f001 030f 	and.w	r3, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b80:	6842      	ldr	r2, [r0, #4]
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d82d      	bhi.n	8001be2 <HAL_PCD_EP_ClrStall+0x66>
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b86:	b510      	push	{r4, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b88:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b8e:	00da      	lsls	r2, r3, #3
 8001b90:	1ad4      	subs	r4, r2, r3
 8001b92:	00a1      	lsls	r1, r4, #2
 8001b94:	460c      	mov	r4, r1
 8001b96:	3138      	adds	r1, #56	; 0x38
 8001b98:	4401      	add	r1, r0
 8001b9a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001b9c:	4404      	add	r4, r0
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001ba4:	e00b      	b.n	8001bbe <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba6:	00da      	lsls	r2, r3, #3
 8001ba8:	1ad4      	subs	r4, r2, r3
 8001baa:	00a1      	lsls	r1, r4, #2
 8001bac:	460c      	mov	r4, r1
 8001bae:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001bb2:	4401      	add	r1, r0
 8001bb4:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001bb6:	4404      	add	r4, r0
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  }

  ep->is_stall = 0U;
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc2:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8001bc4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d00c      	beq.n	8001be6 <HAL_PCD_EP_ClrStall+0x6a>
 8001bcc:	4604      	mov	r4, r0
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bd4:	6800      	ldr	r0, [r0, #0]
 8001bd6:	f000 fcbd 	bl	8002554 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001be0:	bd10      	pop	{r4, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001be2:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001be4:	4770      	bx	lr
  }

  ep->is_stall = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001be6:	2002      	movs	r0, #2
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001be8:	bd10      	pop	{r4, pc}
 8001bea:	bf00      	nop

08001bec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001bec:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001bee:	6804      	ldr	r4, [r0, #0]
 8001bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001bf2:	b919      	cbnz	r1, 8001bfc <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001bf4:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8001bf8:	62a0      	str	r0, [r4, #40]	; 0x28
 8001bfa:	e018      	b.n	8001c2e <HAL_PCDEx_SetTxFiFo+0x42>
 8001bfc:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001bfe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c00:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	e008      	b.n	8001c1a <HAL_PCDEx_SetTxFiFo+0x2e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001c08:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001c0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001c10:	6849      	ldr	r1, [r1, #4]
 8001c12:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
    for (i = 0U; i < (fifo - 1U); i++)
 8001c16:	3301      	adds	r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	1e69      	subs	r1, r5, #1
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	d3f3      	bcc.n	8001c08 <HAL_PCDEx_SetTxFiFo+0x1c>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001c20:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001c24:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8001c28:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001c2c:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8001c2e:	2000      	movs	r0, #0
 8001c30:	bc30      	pop	{r4, r5}
 8001c32:	4770      	bx	lr

08001c34 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001c34:	6803      	ldr	r3, [r0, #0]
 8001c36:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001c38:	2000      	movs	r0, #0
 8001c3a:	4770      	bx	lr

08001c3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8001c40:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <USB_CoreReset+0x38>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d811      	bhi.n	8001c6e <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001c4a:	6902      	ldr	r2, [r0, #16]
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	daf8      	bge.n	8001c42 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001c50:	6903      	ldr	r3, [r0, #16]
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6103      	str	r3, [r0, #16]
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);

  /* Core Soft Reset */
  count = 0U;
 8001c58:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <USB_CoreReset+0x38>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d807      	bhi.n	8001c72 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001c62:	6902      	ldr	r2, [r0, #16]
 8001c64:	f012 0f01 	tst.w	r2, #1
 8001c68:	d1f7      	bne.n	8001c5a <USB_CoreReset+0x1a>

  return HAL_OK;
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	4770      	bx	lr
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001c6e:	2003      	movs	r0, #3
 8001c70:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001c72:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	00030d40 	.word	0x00030d40

08001c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	b510      	push	{r4, lr}
 8001c80:	4604      	mov	r4, r0
 8001c82:	a803      	add	r0, sp, #12
 8001c84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c88:	9b08      	ldr	r3, [sp, #32]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d118      	bne.n	8001cc0 <USB_CoreInit+0x44>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001c8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c94:	63a3      	str	r3, [r4, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001c96:	68e3      	ldr	r3, [r4, #12]
 8001c98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ca0:	60e3      	str	r3, [r4, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001ca2:	68e3      	ldr	r3, [r4, #12]
 8001ca4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001ca8:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8001caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d103      	bne.n	8001cb8 <USB_CoreInit+0x3c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001cb0:	68e3      	ldr	r3, [r4, #12]
 8001cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cb6:	60e3      	str	r3, [r4, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff ffc1 	bl	8001c40 <USB_CoreReset>
 8001cbe:	e011      	b.n	8001ce4 <USB_CoreInit+0x68>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001cc0:	68e3      	ldr	r3, [r4, #12]
 8001cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc6:	60e3      	str	r3, [r4, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff ffb9 	bl	8001c40 <USB_CoreReset>

    if (cfg.battery_charging_enable == 0U)
 8001cce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001cd0:	b923      	cbnz	r3, 8001cdc <USB_CoreInit+0x60>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8001cda:	e003      	b.n	8001ce4 <USB_CoreInit+0x68>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001cdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce2:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8001ce4:	9b06      	ldr	r3, [sp, #24]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d107      	bne.n	8001cfa <USB_CoreInit+0x7e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001cea:	68a3      	ldr	r3, [r4, #8]
 8001cec:	f043 0306 	orr.w	r3, r3, #6
 8001cf0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001cf2:	68a3      	ldr	r3, [r4, #8]
 8001cf4:	f043 0320 	orr.w	r3, r3, #32
 8001cf8:	60a3      	str	r3, [r4, #8]
  }

  return ret;
}
 8001cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cfe:	b004      	add	sp, #16
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8001d04:	2a02      	cmp	r2, #2
 8001d06:	d142      	bne.n	8001d8e <USB_SetTurnaroundTime+0x8a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <USB_SetTurnaroundTime+0xc4>)
 8001d0a:	440b      	add	r3, r1
 8001d0c:	4a2f      	ldr	r2, [pc, #188]	; (8001dcc <USB_SetTurnaroundTime+0xc8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d93f      	bls.n	8001d92 <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <USB_SetTurnaroundTime+0xcc>)
 8001d14:	440b      	add	r3, r1
 8001d16:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <USB_SetTurnaroundTime+0xd0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d93c      	bls.n	8001d96 <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8001d1c:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8001d20:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8001d24:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <USB_SetTurnaroundTime+0xd4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d937      	bls.n	8001d9a <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8001d2a:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8001d2e:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8001d32:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8001d36:	32a0      	adds	r2, #160	; 0xa0
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d930      	bls.n	8001d9e <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <USB_SetTurnaroundTime+0xd8>)
 8001d3e:	440b      	add	r3, r1
 8001d40:	4a27      	ldr	r2, [pc, #156]	; (8001de0 <USB_SetTurnaroundTime+0xdc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d92d      	bls.n	8001da2 <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <USB_SetTurnaroundTime+0xe0>)
 8001d48:	440b      	add	r3, r1
 8001d4a:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8001d4e:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d927      	bls.n	8001da6 <USB_SetTurnaroundTime+0xa2>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8001d56:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <USB_SetTurnaroundTime+0xe4>)
 8001d58:	440b      	add	r3, r1
 8001d5a:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8001d5e:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d921      	bls.n	8001daa <USB_SetTurnaroundTime+0xa6>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8001d66:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8001d6a:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8001d6e:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8001d72:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d919      	bls.n	8001dae <USB_SetTurnaroundTime+0xaa>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <USB_SetTurnaroundTime+0xe8>)
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8001d82:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d813      	bhi.n	8001db2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8001d8a:	2107      	movs	r1, #7
 8001d8c:	e012      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
      UsbTrd = 0x6U;
    }
  }
  else if (speed == USBD_HS_SPEED)
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8001d8e:	2109      	movs	r1, #9
 8001d90:	e010      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
  if (speed == USBD_FS_SPEED)
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8001d92:	210f      	movs	r1, #15
 8001d94:	e00e      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8001d96:	210e      	movs	r1, #14
 8001d98:	e00c      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8001d9a:	210d      	movs	r1, #13
 8001d9c:	e00a      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8001d9e:	210c      	movs	r1, #12
 8001da0:	e008      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8001da2:	210b      	movs	r1, #11
 8001da4:	e006      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8001da6:	210a      	movs	r1, #10
 8001da8:	e004      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8001daa:	2109      	movs	r1, #9
 8001dac:	e002      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8001dae:	2108      	movs	r1, #8
 8001db0:	e000      	b.n	8001db4 <USB_SetTurnaroundTime+0xb0>
      UsbTrd = 0x7U;
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8001db2:	2106      	movs	r1, #6
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001db4:	68c2      	ldr	r2, [r0, #12]
 8001db6:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001dba:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8001dbc:	68c3      	ldr	r3, [r0, #12]
 8001dbe:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001dc2:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	4770      	bx	lr
 8001dc8:	ff275340 	.word	0xff275340
 8001dcc:	000c34ff 	.word	0x000c34ff
 8001dd0:	ff1b1e40 	.word	0xff1b1e40
 8001dd4:	000f423f 	.word	0x000f423f
 8001dd8:	00124f7f 	.word	0x00124f7f
 8001ddc:	fee5b660 	.word	0xfee5b660
 8001de0:	0016e35f 	.word	0x0016e35f
 8001de4:	feced300 	.word	0xfeced300
 8001de8:	feb35bc0 	.word	0xfeb35bc0
 8001dec:	fe5954e0 	.word	0xfe5954e0

08001df0 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001df0:	6883      	ldr	r3, [r0, #8]
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001df8:	2000      	movs	r0, #0
 8001dfa:	4770      	bx	lr

08001dfc <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001dfc:	6883      	ldr	r3, [r0, #8]
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001e04:	2000      	movs	r0, #0
 8001e06:	4770      	bx	lr

08001e08 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001e08:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001e0a:	68c3      	ldr	r3, [r0, #12]
 8001e0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001e10:	60c3      	str	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 8001e12:	2901      	cmp	r1, #1
 8001e14:	d104      	bne.n	8001e20 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001e16:	68c3      	ldr	r3, [r0, #12]
 8001e18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e1c:	60c3      	str	r3, [r0, #12]
 8001e1e:	e004      	b.n	8001e2a <USB_SetCurrentMode+0x22>
  }
  else if (mode == USB_DEVICE_MODE)
 8001e20:	b941      	cbnz	r1, 8001e34 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001e22:	68c3      	ldr	r3, [r0, #12]
 8001e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e28:	60c3      	str	r3, [r0, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  HAL_Delay(50U);
 8001e2a:	2032      	movs	r0, #50	; 0x32
 8001e2c:	f001 faee 	bl	800340c <HAL_Delay>

  return HAL_OK;
 8001e30:	2000      	movs	r0, #0
 8001e32:	bd08      	pop	{r3, pc}
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
  }
  else
  {
    return HAL_ERROR;
 8001e34:	2001      	movs	r0, #1
  }
  HAL_Delay(50U);

  return HAL_OK;
}
 8001e36:	bd08      	pop	{r3, pc}

08001e38 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001e38:	0189      	lsls	r1, r1, #6
 8001e3a:	f041 0120 	orr.w	r1, r1, #32
 8001e3e:	6101      	str	r1, [r0, #16]
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;
 8001e40:	2300      	movs	r3, #0

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));

  do
  {
    if (++count > 200000U)
 8001e42:	3301      	adds	r3, #1
 8001e44:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <USB_FlushTxFifo+0x24>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d805      	bhi.n	8001e56 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001e4a:	6902      	ldr	r2, [r0, #16]
 8001e4c:	f012 0f20 	tst.w	r2, #32
 8001e50:	d1f7      	bne.n	8001e42 <USB_FlushTxFifo+0xa>

  return HAL_OK;
 8001e52:	2000      	movs	r0, #0
 8001e54:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001e56:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);

  return HAL_OK;
}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	00030d40 	.word	0x00030d40

08001e60 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001e60:	2310      	movs	r3, #16
 8001e62:	6103      	str	r3, [r0, #16]
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
 8001e64:	2300      	movs	r3, #0

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;

  do
  {
    if (++count > 200000U)
 8001e66:	3301      	adds	r3, #1
 8001e68:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <USB_FlushRxFifo+0x20>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d805      	bhi.n	8001e7a <USB_FlushRxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001e6e:	6902      	ldr	r2, [r0, #16]
 8001e70:	f012 0f10 	tst.w	r2, #16
 8001e74:	d1f7      	bne.n	8001e66 <USB_FlushRxFifo+0x6>

  return HAL_OK;
 8001e76:	2000      	movs	r0, #0
 8001e78:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001e7a:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);

  return HAL_OK;
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	00030d40 	.word	0x00030d40

08001e84 <USB_SetDevSpeed>:
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG |= speed;
 8001e84:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001e88:	4319      	orrs	r1, r3
 8001e8a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001e8e:	2000      	movs	r0, #0
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001e94:	b084      	sub	sp, #16
 8001e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	a807      	add	r0, sp, #28
 8001e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea2:	4625      	mov	r5, r4
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e006      	b.n	8001eb6 <USB_DevInit+0x22>
  {
    USBx->DIEPTXF[i] = 0U;
 8001ea8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001eac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6051      	str	r1, [r2, #4]
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	2b0e      	cmp	r3, #14
 8001eb8:	d9f6      	bls.n	8001ea8 <USB_DevInit+0x14>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8001eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001ebc:	b963      	cbnz	r3, 8001ed8 <USB_DevInit+0x44>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001ebe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001ec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ec8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ecc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed4:	63a3      	str	r3, [r4, #56]	; 0x38
 8001ed6:	e007      	b.n	8001ee8 <USB_DevInit+0x54>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ede:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ee6:	63a3      	str	r3, [r4, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001eee:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8001ef2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001ef6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d10b      	bne.n	8001f18 <USB_DevInit+0x84>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8001f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f02:	b923      	cbnz	r3, 8001f0e <USB_DevInit+0x7a>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8001f04:	2100      	movs	r1, #0
 8001f06:	4620      	mov	r0, r4
 8001f08:	f7ff ffbc 	bl	8001e84 <USB_SetDevSpeed>
 8001f0c:	e008      	b.n	8001f20 <USB_DevInit+0x8c>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff ffb7 	bl	8001e84 <USB_SetDevSpeed>
 8001f16:	e003      	b.n	8001f20 <USB_DevInit+0x8c>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001f18:	2103      	movs	r1, #3
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff ffb2 	bl	8001e84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001f20:	2110      	movs	r1, #16
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ff88 	bl	8001e38 <USB_FlushTxFifo>
 8001f28:	b910      	cbnz	r0, 8001f30 <USB_DevInit+0x9c>
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret = HAL_OK;
 8001f2a:	f04f 0800 	mov.w	r8, #0
 8001f2e:	e001      	b.n	8001f34 <USB_DevInit+0xa0>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
  {
    ret = HAL_ERROR;
 8001f30:	f04f 0801 	mov.w	r8, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff ff93 	bl	8001e60 <USB_FlushRxFifo>
 8001f3a:	b108      	cbz	r0, 8001f40 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8001f3c:	f04f 0801 	mov.w	r8, #1
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8001f44:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001f46:	61f3      	str	r3, [r6, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f48:	e01b      	b.n	8001f82 <USB_DevInit+0xee>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001f4a:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001f4e:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8001f52:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8001f56:	2800      	cmp	r0, #0
 8001f58:	da0a      	bge.n	8001f70 <USB_DevInit+0xdc>
    {
      if (i == 0U)
 8001f5a:	b923      	cbnz	r3, 8001f66 <USB_DevInit+0xd2>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001f5c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f60:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8001f64:	e007      	b.n	8001f76 <USB_DevInit+0xe2>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8001f6e:	e002      	b.n	8001f76 <USB_DevInit+0xe2>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001f70:	2000      	movs	r0, #0
 8001f72:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001f76:	2200      	movs	r2, #0
 8001f78:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001f7a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8001f7e:	608a      	str	r2, [r1, #8]
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f80:	3301      	adds	r3, #1
 8001f82:	9907      	ldr	r1, [sp, #28]
 8001f84:	428b      	cmp	r3, r1
 8001f86:	d3e0      	bcc.n	8001f4a <USB_DevInit+0xb6>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e01b      	b.n	8001fc4 <USB_DevInit+0x130>
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001f8c:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001f90:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8001f94:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 8001f98:	2f00      	cmp	r7, #0
 8001f9a:	da0a      	bge.n	8001fb2 <USB_DevInit+0x11e>
    {
      if (i == 0U)
 8001f9c:	b923      	cbnz	r3, 8001fa8 <USB_DevInit+0x114>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001f9e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8001fa2:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8001fa6:	e007      	b.n	8001fb8 <USB_DevInit+0x124>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001fa8:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8001fac:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8001fb0:	e002      	b.n	8001fb8 <USB_DevInit+0x124>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001fb2:	2700      	movs	r7, #0
 8001fb4:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001fbc:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8001fc0:	6082      	str	r2, [r0, #8]

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d3e1      	bcc.n	8001f8c <USB_DevInit+0xf8>

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001fc8:	6933      	ldr	r3, [r6, #16]
 8001fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fce:	6133      	str	r3, [r6, #16]

  if (cfg.dma_enable == 1U)
 8001fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <USB_DevInit+0x152>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001fd6:	4a15      	ldr	r2, [pc, #84]	; (800202c <USB_DevInit+0x198>)
 8001fd8:	6332      	str	r2, [r6, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001fda:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8001fdc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fe0:	f042 0203 	orr.w	r2, r2, #3
 8001fe4:	6332      	str	r2, [r6, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61a2      	str	r2, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001fea:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8001fee:	6162      	str	r2, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8001ff0:	b91b      	cbnz	r3, 8001ffa <USB_DevInit+0x166>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001ff2:	69a3      	ldr	r3, [r4, #24]
 8001ff4:	f043 0310 	orr.w	r3, r3, #16
 8001ff8:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001ffa:	69a2      	ldr	r2, [r4, #24]
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <USB_DevInit+0x19c>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61a3      	str	r3, [r4, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002004:	b11b      	cbz	r3, 800200e <USB_DevInit+0x17a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002006:	69a3      	ldr	r3, [r4, #24]
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800200e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <USB_DevInit+0x18c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002014:	69a3      	ldr	r3, [r4, #24]
 8002016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800201a:	f043 0304 	orr.w	r3, r3, #4
 800201e:	61a3      	str	r3, [r4, #24]
  }

  return ret;
}
 8002020:	4640      	mov	r0, r8
 8002022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002026:	b004      	add	sp, #16
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	00800100 	.word	0x00800100
 8002030:	803c3800 	.word	0x803c3800

08002034 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002034:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002038:	f013 0306 	ands.w	r3, r3, #6
 800203c:	d005      	beq.n	800204a <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800203e:	2b02      	cmp	r3, #2
 8002040:	d005      	beq.n	800204e <USB_GetDevSpeed+0x1a>
 8002042:	2b06      	cmp	r3, #6
 8002044:	d105      	bne.n	8002052 <USB_GetDevSpeed+0x1e>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002046:	2002      	movs	r0, #2
 8002048:	4770      	bx	lr
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USBD_HS_SPEED;
 800204a:	2000      	movs	r0, #0
 800204c:	4770      	bx	lr
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800204e:	2002      	movs	r0, #2
 8002050:	4770      	bx	lr
  }
  else
  {
    speed = 0xFU;
 8002052:	200f      	movs	r0, #15
  }

  return speed;
}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop

08002058 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002058:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800205a:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 800205c:	784a      	ldrb	r2, [r1, #1]
 800205e:	2a01      	cmp	r2, #1
 8002060:	d123      	bne.n	80020aa <USB_ActivateEndpoint+0x52>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002062:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8002066:	f003 020f 	and.w	r2, r3, #15
 800206a:	2401      	movs	r4, #1
 800206c:	fa04 f202 	lsl.w	r2, r4, r2
 8002070:	b292      	uxth	r2, r2
 8002072:	4332      	orrs	r2, r6
 8002074:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002078:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800207c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002080:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002084:	d131      	bne.n	80020ea <USB_ActivateEndpoint+0x92>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002086:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 800208a:	688a      	ldr	r2, [r1, #8]
 800208c:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002090:	78c9      	ldrb	r1, [r1, #3]
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002092:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002096:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800209a:	4323      	orrs	r3, r4
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80020a8:	e01f      	b.n	80020ea <USB_ActivateEndpoint+0x92>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80020aa:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 80020ae:	f003 060f 	and.w	r6, r3, #15
 80020b2:	2201      	movs	r2, #1
 80020b4:	40b2      	lsls	r2, r6
 80020b6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80020ba:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80020be:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80020c2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80020c6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80020ca:	d10e      	bne.n	80020ea <USB_ActivateEndpoint+0x92>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80020cc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80020d0:	688a      	ldr	r2, [r1, #8]
 80020d2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80020d6:	78c9      	ldrb	r1, [r1, #3]
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80020d8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80020dc:	4313      	orrs	r3, r2
 80020de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 80020ea:	2000      	movs	r0, #0
 80020ec:	bc70      	pop	{r4, r5, r6}
 80020ee:	4770      	bx	lr

080020f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80020f0:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80020f2:	780c      	ldrb	r4, [r1, #0]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80020f4:	784b      	ldrb	r3, [r1, #1]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d11e      	bne.n	8002138 <USB_DeactivateEndpoint+0x48>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80020fa:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 80020fe:	f004 020f 	and.w	r2, r4, #15
 8002102:	fa03 f202 	lsl.w	r2, r3, r2
 8002106:	b292      	uxth	r2, r2
 8002108:	ea26 0202 	bic.w	r2, r6, r2
 800210c:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002110:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002114:	7809      	ldrb	r1, [r1, #0]
 8002116:	f001 010f 	and.w	r1, r1, #15
 800211a:	408b      	lsls	r3, r1
 800211c:	b29b      	uxth	r3, r3
 800211e:	ea22 0303 	bic.w	r3, r2, r3
 8002122:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002126:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800212a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <USB_DeactivateEndpoint+0x88>)
 8002130:	4013      	ands	r3, r2
 8002132:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002136:	e01c      	b.n	8002172 <USB_DeactivateEndpoint+0x82>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002138:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 800213c:	f004 050f 	and.w	r5, r4, #15
 8002140:	2201      	movs	r2, #1
 8002142:	fa02 f505 	lsl.w	r5, r2, r5
 8002146:	ea26 4505 	bic.w	r5, r6, r5, lsl #16
 800214a:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800214e:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8002152:	7809      	ldrb	r1, [r1, #0]
 8002154:	f001 010f 	and.w	r1, r1, #15
 8002158:	408a      	lsls	r2, r1
 800215a:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 800215e:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002162:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002166:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <USB_DeactivateEndpoint+0x8c>)
 800216c:	4013      	ands	r3, r2
 800216e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
}
 8002172:	2000      	movs	r0, #0
 8002174:	bc70      	pop	{r4, r5, r6}
 8002176:	4770      	bx	lr
 8002178:	ec337800 	.word	0xec337800
 800217c:	eff37800 	.word	0xeff37800

08002180 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002180:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002182:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002184:	784c      	ldrb	r4, [r1, #1]
 8002186:	2c01      	cmp	r4, #1
 8002188:	d15d      	bne.n	8002246 <USB_EP0StartXfer+0xc6>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800218a:	694c      	ldr	r4, [r1, #20]
 800218c:	b9b4      	cbnz	r4, 80021bc <USB_EP0StartXfer+0x3c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800218e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002192:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002196:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800219a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800219e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80021a2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80021a6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80021aa:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80021ae:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80021b2:	0ced      	lsrs	r5, r5, #19
 80021b4:	04ed      	lsls	r5, r5, #19
 80021b6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 80021ba:	e01c      	b.n	80021f6 <USB_EP0StartXfer+0x76>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80021bc:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80021c0:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 80021c4:	6925      	ldr	r5, [r4, #16]
 80021c6:	0ced      	lsrs	r5, r5, #19
 80021c8:	04ed      	lsls	r5, r5, #19
 80021ca:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80021cc:	6925      	ldr	r5, [r4, #16]
 80021ce:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80021d2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80021d6:	6125      	str	r5, [r4, #16]

      if (ep->xfer_len > ep->maxpacket)
 80021d8:	694e      	ldr	r6, [r1, #20]
 80021da:	688d      	ldr	r5, [r1, #8]
 80021dc:	42ae      	cmp	r6, r5
 80021de:	d900      	bls.n	80021e2 <USB_EP0StartXfer+0x62>
      {
        ep->xfer_len = ep->maxpacket;
 80021e0:	614d      	str	r5, [r1, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80021e2:	6925      	ldr	r5, [r4, #16]
 80021e4:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80021e8:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80021ea:	6926      	ldr	r6, [r4, #16]
 80021ec:	694d      	ldr	r5, [r1, #20]
 80021ee:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80021f2:	4335      	orrs	r5, r6
 80021f4:	6125      	str	r5, [r4, #16]
    }

    if (dma == 1U)
 80021f6:	2a01      	cmp	r2, #1
 80021f8:	d10e      	bne.n	8002218 <USB_EP0StartXfer+0x98>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80021fa:	690a      	ldr	r2, [r1, #16]
 80021fc:	b11a      	cbz	r2, 8002206 <USB_EP0StartXfer+0x86>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80021fe:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002202:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002206:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800220a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800220e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002212:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002216:	e03d      	b.n	8002294 <USB_EP0StartXfer+0x114>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002218:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800221c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002220:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002224:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8002228:	694b      	ldr	r3, [r1, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d032      	beq.n	8002294 <USB_EP0StartXfer+0x114>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800222e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8002232:	780a      	ldrb	r2, [r1, #0]
 8002234:	f002 020f 	and.w	r2, r2, #15
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	431a      	orrs	r2, r3
 8002240:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002244:	e026      	b.n	8002294 <USB_EP0StartXfer+0x114>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002246:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800224a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800224e:	691c      	ldr	r4, [r3, #16]
 8002250:	0ce4      	lsrs	r4, r4, #19
 8002252:	04e4      	lsls	r4, r4, #19
 8002254:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002256:	691c      	ldr	r4, [r3, #16]
 8002258:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800225c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002260:	611c      	str	r4, [r3, #16]

    if (ep->xfer_len > 0U)
 8002262:	694c      	ldr	r4, [r1, #20]
 8002264:	b10c      	cbz	r4, 800226a <USB_EP0StartXfer+0xea>
    {
      ep->xfer_len = ep->maxpacket;
 8002266:	688c      	ldr	r4, [r1, #8]
 8002268:	614c      	str	r4, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800226a:	691c      	ldr	r4, [r3, #16]
 800226c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002270:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002272:	691d      	ldr	r5, [r3, #16]
 8002274:	688c      	ldr	r4, [r1, #8]
 8002276:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800227a:	432c      	orrs	r4, r5
 800227c:	611c      	str	r4, [r3, #16]

    if (dma == 1U)
 800227e:	2a01      	cmp	r2, #1
 8002280:	d102      	bne.n	8002288 <USB_EP0StartXfer+0x108>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002282:	68ca      	ldr	r2, [r1, #12]
 8002284:	b102      	cbz	r2, 8002288 <USB_EP0StartXfer+0x108>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002286:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002288:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800228c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002290:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8002294:	2000      	movs	r0, #0
 8002296:	bc70      	pop	{r4, r5, r6}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800229c:	b470      	push	{r4, r5, r6}
 800229e:	f89d 400c 	ldrb.w	r4, [sp, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 80022a2:	b96c      	cbnz	r4, 80022c0 <USB_WritePacket+0x24>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80022a4:	3303      	adds	r3, #3
 80022a6:	089b      	lsrs	r3, r3, #2
    for (i = 0U; i < count32b; i++)
 80022a8:	2500      	movs	r5, #0
 80022aa:	e007      	b.n	80022bc <USB_WritePacket+0x20>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80022ac:	eb00 3402 	add.w	r4, r0, r2, lsl #12
 80022b0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80022b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80022b8:	6026      	str	r6, [r4, #0]
  uint32_t count32b, i;

  if (dma == 0U)
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
 80022ba:	3501      	adds	r5, #1
 80022bc:	429d      	cmp	r5, r3
 80022be:	d3f5      	bcc.n	80022ac <USB_WritePacket+0x10>
      pSrc++;
    }
  }

  return HAL_OK;
}
 80022c0:	2000      	movs	r0, #0
 80022c2:	bc70      	pop	{r4, r5, r6}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80022c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ca:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80022cc:	780c      	ldrb	r4, [r1, #0]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80022ce:	784b      	ldrb	r3, [r1, #1]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 80ab 	bne.w	800242c <USB_EPStartXfer+0x164>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80022d6:	694b      	ldr	r3, [r1, #20]
 80022d8:	b9b3      	cbnz	r3, 8002308 <USB_EPStartXfer+0x40>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80022da:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80022de:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80022e2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80022e6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80022ea:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80022ee:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80022f2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80022f6:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80022fa:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80022fe:	0ced      	lsrs	r5, r5, #19
 8002300:	04ed      	lsls	r5, r5, #19
 8002302:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
 8002306:	e032      	b.n	800236e <USB_EPStartXfer+0xa6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002308:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800230c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002310:	0ced      	lsrs	r5, r5, #19
 8002312:	04ed      	lsls	r5, r5, #19
 8002314:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002318:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800231c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002320:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002324:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002328:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 800232c:	694d      	ldr	r5, [r1, #20]
 800232e:	688e      	ldr	r6, [r1, #8]
 8002330:	4435      	add	r5, r6
 8002332:	3d01      	subs	r5, #1
 8002334:	fbb5 f5f6 	udiv	r5, r5, r6
 8002338:	4e65      	ldr	r6, [pc, #404]	; (80024d0 <USB_EPStartXfer+0x208>)
 800233a:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 800233e:	433d      	orrs	r5, r7
 8002340:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002344:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8002348:	694d      	ldr	r5, [r1, #20]
 800234a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800234e:	4335      	orrs	r5, r6
 8002350:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);

      if (ep->type == EP_TYPE_ISOC)
 8002358:	78cd      	ldrb	r5, [r1, #3]
 800235a:	2d01      	cmp	r5, #1
 800235c:	d107      	bne.n	800236e <USB_EPStartXfer+0xa6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800235e:	691d      	ldr	r5, [r3, #16]
 8002360:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002364:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002366:	691d      	ldr	r5, [r3, #16]
 8002368:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800236c:	611d      	str	r5, [r3, #16]
      }
    }

    if (dma == 1U)
 800236e:	2a01      	cmp	r2, #1
 8002370:	d127      	bne.n	80023c2 <USB_EPStartXfer+0xfa>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002372:	690b      	ldr	r3, [r1, #16]
 8002374:	b11b      	cbz	r3, 800237e <USB_EPStartXfer+0xb6>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002376:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800237a:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
      }

      if (ep->type == EP_TYPE_ISOC)
 800237e:	78cb      	ldrb	r3, [r1, #3]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d115      	bne.n	80023b0 <USB_EPStartXfer+0xe8>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002384:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002388:	f413 7f80 	tst.w	r3, #256	; 0x100
 800238c:	d108      	bne.n	80023a0 <USB_EPStartXfer+0xd8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800238e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002392:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800239a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 800239e:	e007      	b.n	80023b0 <USB_EPStartXfer+0xe8>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80023a0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80023a4:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80023b0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80023b4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80023b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80023bc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 80023c0:	e083      	b.n	80024ca <USB_EPStartXfer+0x202>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80023c2:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80023c6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80023ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80023ce:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900

      if (ep->type != EP_TYPE_ISOC)
 80023d2:	78cb      	ldrb	r3, [r1, #3]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d00e      	beq.n	80023f6 <USB_EPStartXfer+0x12e>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80023d8:	694b      	ldr	r3, [r1, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d075      	beq.n	80024ca <USB_EPStartXfer+0x202>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80023de:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80023e2:	780b      	ldrb	r3, [r1, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	2201      	movs	r2, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	4323      	orrs	r3, r4
 80023f0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80023f4:	e069      	b.n	80024ca <USB_EPStartXfer+0x202>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80023f6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80023fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023fe:	d106      	bne.n	800240e <USB_EPStartXfer+0x146>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002400:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002404:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002408:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800240c:	e005      	b.n	800241a <USB_EPStartXfer+0x152>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800240e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002416:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800241a:	4614      	mov	r4, r2
 800241c:	460b      	mov	r3, r1
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800241e:	68c9      	ldr	r1, [r1, #12]
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	8a9b      	ldrh	r3, [r3, #20]
 8002424:	9400      	str	r4, [sp, #0]
 8002426:	f7ff ff39 	bl	800229c <USB_WritePacket>
 800242a:	e04e      	b.n	80024ca <USB_EPStartXfer+0x202>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800242c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002430:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002434:	691d      	ldr	r5, [r3, #16]
 8002436:	0ced      	lsrs	r5, r5, #19
 8002438:	04ed      	lsls	r5, r5, #19
 800243a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800243c:	691d      	ldr	r5, [r3, #16]
 800243e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002442:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002446:	611d      	str	r5, [r3, #16]

    if (ep->xfer_len == 0U)
 8002448:	694d      	ldr	r5, [r1, #20]
 800244a:	b955      	cbnz	r5, 8002462 <USB_EPStartXfer+0x19a>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800244c:	691e      	ldr	r6, [r3, #16]
 800244e:	688d      	ldr	r5, [r1, #8]
 8002450:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002454:	4335      	orrs	r5, r6
 8002456:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002458:	691d      	ldr	r5, [r3, #16]
 800245a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800245e:	611d      	str	r5, [r3, #16]
 8002460:	e013      	b.n	800248a <USB_EPStartXfer+0x1c2>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002462:	688e      	ldr	r6, [r1, #8]
 8002464:	4435      	add	r5, r6
 8002466:	3d01      	subs	r5, #1
 8002468:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800246c:	691f      	ldr	r7, [r3, #16]
 800246e:	4e18      	ldr	r6, [pc, #96]	; (80024d0 <USB_EPStartXfer+0x208>)
 8002470:	ea06 46c5 	and.w	r6, r6, r5, lsl #19
 8002474:	433e      	orrs	r6, r7
 8002476:	611e      	str	r6, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002478:	691f      	ldr	r7, [r3, #16]
 800247a:	688e      	ldr	r6, [r1, #8]
 800247c:	b2ad      	uxth	r5, r5
 800247e:	fb06 f505 	mul.w	r5, r6, r5
 8002482:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002486:	433d      	orrs	r5, r7
 8002488:	611d      	str	r5, [r3, #16]
    }

    if (dma == 1U)
 800248a:	2a01      	cmp	r2, #1
 800248c:	d102      	bne.n	8002494 <USB_EPStartXfer+0x1cc>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800248e:	68ca      	ldr	r2, [r1, #12]
 8002490:	b102      	cbz	r2, 8002494 <USB_EPStartXfer+0x1cc>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002492:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8002494:	78cb      	ldrb	r3, [r1, #3]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d111      	bne.n	80024be <USB_EPStartXfer+0x1f6>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800249a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800249e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024a2:	d106      	bne.n	80024b2 <USB_EPStartXfer+0x1ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80024a4:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80024a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024ac:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 80024b0:	e005      	b.n	80024be <USB_EPStartXfer+0x1f6>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80024b2:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ba:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80024be:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80024c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80024c6:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  }

  return HAL_OK;
}
 80024ca:	2000      	movs	r0, #0
 80024cc:	b003      	add	sp, #12
 80024ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d0:	1ff80000 	.word	0x1ff80000

080024d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80024d4:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80024d6:	3203      	adds	r2, #3
 80024d8:	0892      	lsrs	r2, r2, #2

  for (i = 0U; i < count32b; i++)
 80024da:	2300      	movs	r3, #0
 80024dc:	e005      	b.n	80024ea <USB_ReadPacket+0x16>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80024de:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80024e2:	6824      	ldr	r4, [r4, #0]
 80024e4:	f841 4b04 	str.w	r4, [r1], #4
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
 80024e8:	3301      	adds	r3, #1
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d3f7      	bcc.n	80024de <USB_ReadPacket+0xa>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
    pDest++;
  }

  return ((void *)pDest);
}
 80024ee:	4608      	mov	r0, r1
 80024f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop

080024f8 <USB_EPSetStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80024f8:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 80024fa:	784a      	ldrb	r2, [r1, #1]
 80024fc:	2a01      	cmp	r2, #1
 80024fe:	d113      	bne.n	8002528 <USB_EPSetStall+0x30>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002500:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002504:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002508:	2a00      	cmp	r2, #0
 800250a:	db06      	blt.n	800251a <USB_EPSetStall+0x22>
 800250c:	b12b      	cbz	r3, 800251a <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800250e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002516:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800251a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800251e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002522:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002526:	e012      	b.n	800254e <USB_EPSetStall+0x56>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002528:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800252c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002530:	2a00      	cmp	r2, #0
 8002532:	db06      	blt.n	8002542 <USB_EPSetStall+0x4a>
 8002534:	b12b      	cbz	r3, 8002542 <USB_EPSetStall+0x4a>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002536:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800253a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800253e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002542:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800254a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800254e:	2000      	movs	r0, #0
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <USB_EPClearStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8002554:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8002556:	784a      	ldrb	r2, [r1, #1]
 8002558:	2a01      	cmp	r2, #1
 800255a:	d113      	bne.n	8002584 <USB_EPClearStall+0x30>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800255c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002560:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002564:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002568:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800256c:	78cb      	ldrb	r3, [r1, #3]
 800256e:	3b02      	subs	r3, #2
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d819      	bhi.n	80025aa <USB_EPClearStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002576:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002582:	e012      	b.n	80025aa <USB_EPClearStall+0x56>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002584:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002588:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800258c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002590:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002594:	78cb      	ldrb	r3, [r1, #3]
 8002596:	3b02      	subs	r3, #2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d805      	bhi.n	80025aa <USB_EPClearStall+0x56>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800259e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
  }
  return HAL_OK;
}
 80025aa:	2000      	movs	r0, #0
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop

080025b0 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80025b0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80025b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025b8:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80025bc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80025c0:	0109      	lsls	r1, r1, #4
 80025c2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80025c6:	4319      	orrs	r1, r3
 80025c8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800

  return HAL_OK;
}
 80025cc:	2000      	movs	r0, #0
 80025ce:	4770      	bx	lr

080025d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80025d0:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80025d2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80025d6:	f023 0302 	bic.w	r3, r3, #2
 80025da:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80025de:	2003      	movs	r0, #3
 80025e0:	f000 ff14 	bl	800340c <HAL_Delay>

  return HAL_OK;
}
 80025e4:	2000      	movs	r0, #0
 80025e6:	bd08      	pop	{r3, pc}

080025e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80025e8:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80025ea:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80025f6:	2003      	movs	r0, #3
 80025f8:	f000 ff08 	bl	800340c <HAL_Delay>

  return HAL_OK;
}
 80025fc:	2000      	movs	r0, #0
 80025fe:	bd08      	pop	{r3, pc}

08002600 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002600:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002602:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8002604:	4010      	ands	r0, r2
 8002606:	4770      	bx	lr

08002608 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8002608:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800260c:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
 8002614:	0c00      	lsrs	r0, r0, #16
 8002616:	4770      	bx	lr

08002618 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8002618:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800261c:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
 8002624:	b280      	uxth	r0, r0
 8002626:	4770      	bx	lr

08002628 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002628:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800262c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002630:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8002634:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 8002636:	4010      	ands	r0, r2
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop

0800263c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800263c:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800263e:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002642:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002646:	f001 030f 	and.w	r3, r1, #15
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	01db      	lsls	r3, r3, #7
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002654:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8002658:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800265c:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
}
 800265e:	4018      	ands	r0, r3
 8002660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8002668:	6940      	ldr	r0, [r0, #20]
}
 800266a:	f000 0001 	and.w	r0, r0, #1
 800266e:	4770      	bx	lr

08002670 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002670:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002674:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002678:	f023 0307 	bic.w	r3, r3, #7
 800267c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002680:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	f002 0206 	and.w	r2, r2, #6
 800268a:	2a04      	cmp	r2, #4
 800268c:	d105      	bne.n	800269a <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800268e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002692:	f042 0203 	orr.w	r2, r2, #3
 8002696:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 80026a2:	2000      	movs	r0, #0
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop

080026a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80026a8:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026aa:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <USB_EP0_OutStart+0x58>)
 80026ae:	429c      	cmp	r4, r3
 80026b0:	d903      	bls.n	80026ba <USB_EP0_OutStart+0x12>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80026b2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db1e      	blt.n	80026f8 <USB_EP0_OutStart+0x50>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80026ba:	2400      	movs	r4, #0
 80026bc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80026c0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80026c4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80026c8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80026cc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80026d0:	f044 0418 	orr.w	r4, r4, #24
 80026d4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80026d8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80026dc:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80026e0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
 80026e4:	2901      	cmp	r1, #1
 80026e6:	d107      	bne.n	80026f8 <USB_EP0_OutStart+0x50>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80026e8:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80026ec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80026f0:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80026f4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 80026f8:	2000      	movs	r0, #0
 80026fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	4f54300a 	.word	0x4f54300a

08002704 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002704:	2800      	cmp	r0, #0
 8002706:	f000 81d7 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x3b4>
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270a:	b570      	push	{r4, r5, r6, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002710:	6803      	ldr	r3, [r0, #0]
 8002712:	f013 0f01 	tst.w	r3, #1
 8002716:	d05a      	beq.n	80027ce <HAL_RCC_OscConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002718:	4ba0      	ldr	r3, [pc, #640]	; (800299c <HAL_RCC_OscConfig+0x298>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b04      	cmp	r3, #4
 8002722:	d00a      	beq.n	800273a <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002724:	4b9d      	ldr	r3, [pc, #628]	; (800299c <HAL_RCC_OscConfig+0x298>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800272c:	2b08      	cmp	r3, #8
 800272e:	d10d      	bne.n	800274c <HAL_RCC_OscConfig+0x48>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002730:	4b9a      	ldr	r3, [pc, #616]	; (800299c <HAL_RCC_OscConfig+0x298>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002738:	d008      	beq.n	800274c <HAL_RCC_OscConfig+0x48>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273a:	4b98      	ldr	r3, [pc, #608]	; (800299c <HAL_RCC_OscConfig+0x298>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002742:	d044      	beq.n	80027ce <HAL_RCC_OscConfig+0xca>
 8002744:	6863      	ldr	r3, [r4, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d141      	bne.n	80027ce <HAL_RCC_OscConfig+0xca>
 800274a:	e1b7      	b.n	8002abc <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	6863      	ldr	r3, [r4, #4]
 800274e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002752:	d105      	bne.n	8002760 <HAL_RCC_OscConfig+0x5c>
 8002754:	4a91      	ldr	r2, [pc, #580]	; (800299c <HAL_RCC_OscConfig+0x298>)
 8002756:	6813      	ldr	r3, [r2, #0]
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e015      	b.n	800278c <HAL_RCC_OscConfig+0x88>
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002764:	d109      	bne.n	800277a <HAL_RCC_OscConfig+0x76>
 8002766:	4b8d      	ldr	r3, [pc, #564]	; (800299c <HAL_RCC_OscConfig+0x298>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x88>
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x298>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800278a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800278c:	6863      	ldr	r3, [r4, #4]
 800278e:	b17b      	cbz	r3, 80027b0 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f000 fe36 	bl	8003400 <HAL_GetTick>
 8002794:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	e005      	b.n	80027a4 <HAL_RCC_OscConfig+0xa0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002798:	f000 fe32 	bl	8003400 <HAL_GetTick>
 800279c:	1b40      	subs	r0, r0, r5
 800279e:	2864      	cmp	r0, #100	; 0x64
 80027a0:	f200 818e 	bhi.w	8002ac0 <HAL_RCC_OscConfig+0x3bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a4:	4b7d      	ldr	r3, [pc, #500]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027ac:	d0f4      	beq.n	8002798 <HAL_RCC_OscConfig+0x94>
 80027ae:	e00e      	b.n	80027ce <HAL_RCC_OscConfig+0xca>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f000 fe26 	bl	8003400 <HAL_GetTick>
 80027b4:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	e005      	b.n	80027c4 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b8:	f000 fe22 	bl	8003400 <HAL_GetTick>
 80027bc:	1b40      	subs	r0, r0, r5
 80027be:	2864      	cmp	r0, #100	; 0x64
 80027c0:	f200 8180 	bhi.w	8002ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027cc:	d1f4      	bne.n	80027b8 <HAL_RCC_OscConfig+0xb4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	f013 0f02 	tst.w	r3, #2
 80027d4:	d050      	beq.n	8002878 <HAL_RCC_OscConfig+0x174>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d6:	4b71      	ldr	r3, [pc, #452]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f013 0f0c 	tst.w	r3, #12
 80027de:	d00a      	beq.n	80027f6 <HAL_RCC_OscConfig+0xf2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e0:	4b6e      	ldr	r3, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d116      	bne.n	800281a <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ec:	4b6b      	ldr	r3, [pc, #428]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80027f4:	d111      	bne.n	800281a <HAL_RCC_OscConfig+0x116>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	4b69      	ldr	r3, [pc, #420]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f013 0f02 	tst.w	r3, #2
 80027fe:	d003      	beq.n	8002808 <HAL_RCC_OscConfig+0x104>
 8002800:	68e3      	ldr	r3, [r4, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	f040 8160 	bne.w	8002ac8 <HAL_RCC_OscConfig+0x3c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4a64      	ldr	r2, [pc, #400]	; (800299c <HAL_RCC_OscConfig+0x298>)
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002810:	6921      	ldr	r1, [r4, #16]
 8002812:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002816:	6013      	str	r3, [r2, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002818:	e02e      	b.n	8002878 <HAL_RCC_OscConfig+0x174>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281a:	68e3      	ldr	r3, [r4, #12]
 800281c:	b1d3      	cbz	r3, 8002854 <HAL_RCC_OscConfig+0x150>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281e:	2201      	movs	r2, #1
 8002820:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <HAL_RCC_OscConfig+0x29c>)
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f000 fdec 	bl	8003400 <HAL_GetTick>
 8002828:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	e005      	b.n	8002838 <HAL_RCC_OscConfig+0x134>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282c:	f000 fde8 	bl	8003400 <HAL_GetTick>
 8002830:	1b40      	subs	r0, r0, r5
 8002832:	2802      	cmp	r0, #2
 8002834:	f200 814a 	bhi.w	8002acc <HAL_RCC_OscConfig+0x3c8>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	4b58      	ldr	r3, [pc, #352]	; (800299c <HAL_RCC_OscConfig+0x298>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f013 0f02 	tst.w	r3, #2
 8002840:	d0f4      	beq.n	800282c <HAL_RCC_OscConfig+0x128>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_RCC_OscConfig+0x298>)
 8002844:	6813      	ldr	r3, [r2, #0]
 8002846:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800284a:	6921      	ldr	r1, [r4, #16]
 800284c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e011      	b.n	8002878 <HAL_RCC_OscConfig+0x174>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002854:	2200      	movs	r2, #0
 8002856:	4b52      	ldr	r3, [pc, #328]	; (80029a0 <HAL_RCC_OscConfig+0x29c>)
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f000 fdd1 	bl	8003400 <HAL_GetTick>
 800285e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002860:	e005      	b.n	800286e <HAL_RCC_OscConfig+0x16a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002862:	f000 fdcd 	bl	8003400 <HAL_GetTick>
 8002866:	1b40      	subs	r0, r0, r5
 8002868:	2802      	cmp	r0, #2
 800286a:	f200 8131 	bhi.w	8002ad0 <HAL_RCC_OscConfig+0x3cc>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	4b4b      	ldr	r3, [pc, #300]	; (800299c <HAL_RCC_OscConfig+0x298>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f013 0f02 	tst.w	r3, #2
 8002876:	d1f4      	bne.n	8002862 <HAL_RCC_OscConfig+0x15e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	f013 0f08 	tst.w	r3, #8
 800287e:	d026      	beq.n	80028ce <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002880:	6963      	ldr	r3, [r4, #20]
 8002882:	b193      	cbz	r3, 80028aa <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002884:	2201      	movs	r2, #1
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_OscConfig+0x2a0>)
 8002888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288a:	f000 fdb9 	bl	8003400 <HAL_GetTick>
 800288e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002890:	e005      	b.n	800289e <HAL_RCC_OscConfig+0x19a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002892:	f000 fdb5 	bl	8003400 <HAL_GetTick>
 8002896:	1b40      	subs	r0, r0, r5
 8002898:	2802      	cmp	r0, #2
 800289a:	f200 811b 	bhi.w	8002ad4 <HAL_RCC_OscConfig+0x3d0>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a2:	f013 0f02 	tst.w	r3, #2
 80028a6:	d0f4      	beq.n	8002892 <HAL_RCC_OscConfig+0x18e>
 80028a8:	e011      	b.n	80028ce <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	2200      	movs	r2, #0
 80028ac:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_OscConfig+0x2a0>)
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f000 fda6 	bl	8003400 <HAL_GetTick>
 80028b4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_OscConfig+0x1c0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b8:	f000 fda2 	bl	8003400 <HAL_GetTick>
 80028bc:	1b40      	subs	r0, r0, r5
 80028be:	2802      	cmp	r0, #2
 80028c0:	f200 810a 	bhi.w	8002ad8 <HAL_RCC_OscConfig+0x3d4>

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f013 0f02 	tst.w	r3, #2
 80028cc:	d1f4      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1b4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	f013 0f04 	tst.w	r3, #4
 80028d4:	d07d      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2ce>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80028de:	d10d      	bne.n	80028fc <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_OscConfig+0x298>)
 80028e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028f8:	2501      	movs	r5, #1
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x1fa>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fc:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_RCC_OscConfig+0x2a4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002906:	d113      	bne.n	8002930 <HAL_RCC_OscConfig+0x22c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <HAL_RCC_OscConfig+0x2a4>)
 800290a:	6813      	ldr	r3, [r2, #0]
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f000 fd75 	bl	8003400 <HAL_GetTick>
 8002916:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e005      	b.n	8002926 <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f000 fd71 	bl	8003400 <HAL_GetTick>
 800291e:	1b80      	subs	r0, r0, r6
 8002920:	2802      	cmp	r0, #2
 8002922:	f200 80db 	bhi.w	8002adc <HAL_RCC_OscConfig+0x3d8>
      SET_BIT(PWR->CR, PWR_CR_DBP);

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_OscConfig+0x2a4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800292e:	d0f4      	beq.n	800291a <HAL_RCC_OscConfig+0x216>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	68a3      	ldr	r3, [r4, #8]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d105      	bne.n	8002942 <HAL_RCC_OscConfig+0x23e>
 8002936:	4a19      	ldr	r2, [pc, #100]	; (800299c <HAL_RCC_OscConfig+0x298>)
 8002938:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
 8002940:	e014      	b.n	800296c <HAL_RCC_OscConfig+0x268>
 8002942:	2b05      	cmp	r3, #5
 8002944:	d109      	bne.n	800295a <HAL_RCC_OscConfig+0x256>
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_RCC_OscConfig+0x298>)
 8002948:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800294a:	f042 0204 	orr.w	r2, r2, #4
 800294e:	671a      	str	r2, [r3, #112]	; 0x70
 8002950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	671a      	str	r2, [r3, #112]	; 0x70
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x268>
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_RCC_OscConfig+0x298>)
 800295c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	671a      	str	r2, [r3, #112]	; 0x70
 8002964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002966:	f022 0204 	bic.w	r2, r2, #4
 800296a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800296c:	68a3      	ldr	r3, [r4, #8]
 800296e:	b18b      	cbz	r3, 8002994 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f000 fd46 	bl	8003400 <HAL_GetTick>
 8002974:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002976:	e007      	b.n	8002988 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f000 fd42 	bl	8003400 <HAL_GetTick>
 800297c:	1b80      	subs	r0, r0, r6
 800297e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002982:	4298      	cmp	r0, r3
 8002984:	f200 80ac 	bhi.w	8002ae0 <HAL_RCC_OscConfig+0x3dc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_RCC_OscConfig+0x298>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	f013 0f02 	tst.w	r3, #2
 8002990:	d0f2      	beq.n	8002978 <HAL_RCC_OscConfig+0x274>
 8002992:	e018      	b.n	80029c6 <HAL_RCC_OscConfig+0x2c2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f000 fd34 	bl	8003400 <HAL_GetTick>
 8002998:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299a:	e00f      	b.n	80029bc <HAL_RCC_OscConfig+0x2b8>
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470000 	.word	0x42470000
 80029a4:	42470e80 	.word	0x42470e80
 80029a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f000 fd28 	bl	8003400 <HAL_GetTick>
 80029b0:	1b80      	subs	r0, r0, r6
 80029b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80029b6:	4298      	cmp	r0, r3
 80029b8:	f200 8094 	bhi.w	8002ae4 <HAL_RCC_OscConfig+0x3e0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029bc:	4b55      	ldr	r3, [pc, #340]	; (8002b14 <HAL_RCC_OscConfig+0x410>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	f013 0f02 	tst.w	r3, #2
 80029c4:	d1f2      	bne.n	80029ac <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c6:	b125      	cbz	r5, 80029d2 <HAL_RCC_OscConfig+0x2ce>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_RCC_OscConfig+0x410>)
 80029ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d2:	69a3      	ldr	r3, [r4, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8087 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x3e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029da:	4a4e      	ldr	r2, [pc, #312]	; (8002b14 <HAL_RCC_OscConfig+0x410>)
 80029dc:	6892      	ldr	r2, [r2, #8]
 80029de:	f002 020c 	and.w	r2, r2, #12
 80029e2:	2a08      	cmp	r2, #8
 80029e4:	d048      	beq.n	8002a78 <HAL_RCC_OscConfig+0x374>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d133      	bne.n	8002a52 <HAL_RCC_OscConfig+0x34e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ea:	2200      	movs	r2, #0
 80029ec:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <HAL_RCC_OscConfig+0x414>)
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f000 fd06 	bl	8003400 <HAL_GetTick>
 80029f4:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f6:	e004      	b.n	8002a02 <HAL_RCC_OscConfig+0x2fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f8:	f000 fd02 	bl	8003400 <HAL_GetTick>
 80029fc:	1b40      	subs	r0, r0, r5
 80029fe:	2802      	cmp	r0, #2
 8002a00:	d874      	bhi.n	8002aec <HAL_RCC_OscConfig+0x3e8>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	4b44      	ldr	r3, [pc, #272]	; (8002b14 <HAL_RCC_OscConfig+0x410>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a0a:	d1f5      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0c:	69e2      	ldr	r2, [r4, #28]
 8002a0e:	6a23      	ldr	r3, [r4, #32]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a1a:	0852      	lsrs	r2, r2, #1
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a28:	4a3a      	ldr	r2, [pc, #232]	; (8002b14 <HAL_RCC_OscConfig+0x410>)
 8002a2a:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <HAL_RCC_OscConfig+0x414>)
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f000 fce5 	bl	8003400 <HAL_GetTick>
 8002a36:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a38:	e004      	b.n	8002a44 <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3a:	f000 fce1 	bl	8003400 <HAL_GetTick>
 8002a3e:	1b00      	subs	r0, r0, r4
 8002a40:	2802      	cmp	r0, #2
 8002a42:	d855      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x3ec>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <HAL_RCC_OscConfig+0x410>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a4c:	d0f5      	beq.n	8002a3a <HAL_RCC_OscConfig+0x336>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e05d      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	2200      	movs	r2, #0
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_RCC_OscConfig+0x414>)
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f000 fcd2 	bl	8003400 <HAL_GetTick>
 8002a5c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e004      	b.n	8002a6a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f000 fcce 	bl	8003400 <HAL_GetTick>
 8002a64:	1b00      	subs	r0, r0, r4
 8002a66:	2802      	cmp	r0, #2
 8002a68:	d844      	bhi.n	8002af4 <HAL_RCC_OscConfig+0x3f0>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <HAL_RCC_OscConfig+0x410>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a72:	d1f5      	bne.n	8002a60 <HAL_RCC_OscConfig+0x35c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e04a      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d03d      	beq.n	8002af8 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_RCC_OscConfig+0x410>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a80:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002a84:	69e2      	ldr	r2, [r4, #28]
 8002a86:	4291      	cmp	r1, r2
 8002a88:	d138      	bne.n	8002afc <HAL_RCC_OscConfig+0x3f8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a8e:	6a21      	ldr	r1, [r4, #32]
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	428a      	cmp	r2, r1
 8002a92:	d135      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3fc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a94:	6a61      	ldr	r1, [r4, #36]	; 0x24
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a96:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	428a      	cmp	r2, r1
 8002a9e:	d131      	bne.n	8002b04 <HAL_RCC_OscConfig+0x400>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aa0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aa4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002aa6:	428a      	cmp	r2, r1
 8002aa8:	d12e      	bne.n	8002b08 <HAL_RCC_OscConfig+0x404>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002aaa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002aae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d02b      	beq.n	8002b0c <HAL_RCC_OscConfig+0x408>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
        {
          return HAL_ERROR;
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	e02a      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 8002ab8:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002aba:	4770      	bx	lr
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8002abc:	2001      	movs	r0, #1
 8002abe:	e026      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002ac0:	2003      	movs	r0, #3
 8002ac2:	e024      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	e022      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 8002ac8:	2001      	movs	r0, #1
 8002aca:	e020      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002acc:	2003      	movs	r0, #3
 8002ace:	e01e      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	e01c      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	e01a      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002ad8:	2003      	movs	r0, #3
 8002ada:	e018      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002adc:	2003      	movs	r0, #3
 8002ade:	e016      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	e012      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e010      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
 8002aee:	e00e      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002af0:	2003      	movs	r0, #3
 8002af2:	e00c      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002af4:	2003      	movs	r0, #3
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002af8:	2001      	movs	r0, #1
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
        {
          return HAL_ERROR;
 8002afc:	2001      	movs	r0, #1
 8002afe:	e006      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
 8002b00:	2001      	movs	r0, #1
 8002b02:	e004      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
 8002b04:	2001      	movs	r0, #1
 8002b06:	e002      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
 8002b08:	2001      	movs	r0, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  return HAL_OK;
 8002b0c:	2000      	movs	r0, #0
}
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	42470060 	.word	0x42470060

08002b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b1c:	b538      	push	{r3, r4, r5, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d055      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0xba>
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b2e:	482c      	ldr	r0, [pc, #176]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b30:	bd38      	pop	{r3, r4, r5, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b40:	d020      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x68>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002b4a:	00dc      	lsls	r4, r3, #3
 8002b4c:	2500      	movs	r5, #0
 8002b4e:	0169      	lsls	r1, r5, #5
 8002b50:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 8002b54:	0160      	lsls	r0, r4, #5
 8002b56:	1b04      	subs	r4, r0, r4
 8002b58:	eb61 0505 	sbc.w	r5, r1, r5
 8002b5c:	01a9      	lsls	r1, r5, #6
 8002b5e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002b62:	01a0      	lsls	r0, r4, #6
 8002b64:	1b00      	subs	r0, r0, r4
 8002b66:	eb61 0105 	sbc.w	r1, r1, r5
 8002b6a:	18c0      	adds	r0, r0, r3
 8002b6c:	f141 0100 	adc.w	r1, r1, #0
 8002b70:	024b      	lsls	r3, r1, #9
 8002b72:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002b76:	0244      	lsls	r4, r0, #9
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f7fd fb97 	bl	80002b0 <__aeabi_uldivmod>
 8002b82:	e01f      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b84:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002b8c:	00dc      	lsls	r4, r3, #3
 8002b8e:	2500      	movs	r5, #0
 8002b90:	0169      	lsls	r1, r5, #5
 8002b92:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 8002b96:	0160      	lsls	r0, r4, #5
 8002b98:	1b04      	subs	r4, r0, r4
 8002b9a:	eb61 0505 	sbc.w	r5, r1, r5
 8002b9e:	01a9      	lsls	r1, r5, #6
 8002ba0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002ba4:	01a0      	lsls	r0, r4, #6
 8002ba6:	1b00      	subs	r0, r0, r4
 8002ba8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bac:	18c0      	adds	r0, r0, r3
 8002bae:	f141 0100 	adc.w	r1, r1, #0
 8002bb2:	028b      	lsls	r3, r1, #10
 8002bb4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002bb8:	0284      	lsls	r4, r0, #10
 8002bba:	4620      	mov	r0, r4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f7fd fb76 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002bcc:	3301      	adds	r3, #1
 8002bce:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002bd0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002bd4:	bd38      	pop	{r3, r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd6:	4803      	ldr	r0, [pc, #12]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002bd8:	bd38      	pop	{r3, r4, r5, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be8:	2800      	cmp	r0, #0
 8002bea:	f000 8098 	beq.w	8002d1e <HAL_RCC_ClockConfig+0x136>
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bee:	b570      	push	{r4, r5, r6, lr}
 8002bf0:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf2:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <HAL_RCC_ClockConfig+0x154>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	428b      	cmp	r3, r1
 8002bfc:	d208      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	b2cb      	uxtb	r3, r1
 8002c00:	4a4e      	ldr	r2, [pc, #312]	; (8002d3c <HAL_RCC_ClockConfig+0x154>)
 8002c02:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c04:	6813      	ldr	r3, [r2, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	4299      	cmp	r1, r3
 8002c0c:	f040 8089 	bne.w	8002d22 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	f013 0f02 	tst.w	r3, #2
 8002c16:	d017      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	f013 0f04 	tst.w	r3, #4
 8002c1c:	d004      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c1e:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002c20:	6893      	ldr	r3, [r2, #8]
 8002c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	f013 0f08 	tst.w	r3, #8
 8002c2e:	d004      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x52>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c30:	4a43      	ldr	r2, [pc, #268]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002c32:	6893      	ldr	r3, [r2, #8]
 8002c34:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c38:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3a:	4841      	ldr	r0, [pc, #260]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002c3c:	6883      	ldr	r3, [r0, #8]
 8002c3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c42:	68a3      	ldr	r3, [r4, #8]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	6083      	str	r3, [r0, #8]
 8002c48:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	f013 0f01 	tst.w	r3, #1
 8002c50:	d02f      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	6862      	ldr	r2, [r4, #4]
 8002c54:	2a01      	cmp	r2, #1
 8002c56:	d105      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x7c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c58:	4b39      	ldr	r3, [pc, #228]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c60:	d10e      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x98>
 8002c62:	e060      	b.n	8002d26 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c64:	1e93      	subs	r3, r2, #2
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d805      	bhi.n	8002c76 <HAL_RCC_ClockConfig+0x8e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c72:	d105      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x98>
 8002c74:	e059      	b.n	8002d2a <HAL_RCC_ClockConfig+0x142>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f013 0f02 	tst.w	r3, #2
 8002c7e:	d056      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x146>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c80:	492f      	ldr	r1, [pc, #188]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002c82:	688b      	ldr	r3, [r1, #8]
 8002c84:	f023 0303 	bic.w	r3, r3, #3
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c8c:	f000 fbb8 	bl	8003400 <HAL_GetTick>
 8002c90:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e006      	b.n	8002ca2 <HAL_RCC_ClockConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f000 fbb4 	bl	8003400 <HAL_GetTick>
 8002c98:	1b80      	subs	r0, r0, r6
 8002c9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c9e:	4298      	cmp	r0, r3
 8002ca0:	d847      	bhi.n	8002d32 <HAL_RCC_ClockConfig+0x14a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	6862      	ldr	r2, [r4, #4]
 8002cac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_RCC_ClockConfig+0x154>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	429d      	cmp	r5, r3
 8002cbc:	d207      	bcs.n	8002cce <HAL_RCC_ClockConfig+0xe6>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	b2ea      	uxtb	r2, r5
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <HAL_RCC_ClockConfig+0x154>)
 8002cc2:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	429d      	cmp	r5, r3
 8002ccc:	d133      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x14e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	f013 0f04 	tst.w	r3, #4
 8002cd4:	d006      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd6:	491a      	ldr	r1, [pc, #104]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002cd8:	688b      	ldr	r3, [r1, #8]
 8002cda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cde:	68e3      	ldr	r3, [r4, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	f013 0f08 	tst.w	r3, #8
 8002cea:	d007      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002cee:	6893      	ldr	r3, [r2, #8]
 8002cf0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002cf4:	6921      	ldr	r1, [r4, #16]
 8002cf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cfa:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cfc:	f7ff ff0e 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_RCC_ClockConfig+0x158>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d08:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <HAL_RCC_ClockConfig+0x15c>)
 8002d0a:	5cd3      	ldrb	r3, [r2, r3]
 8002d0c:	40d8      	lsrs	r0, r3
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_RCC_ClockConfig+0x160>)
 8002d10:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <HAL_RCC_ClockConfig+0x164>)
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	f003 fc0b 	bl	8006530 <HAL_InitTick>

  return HAL_OK;
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 8002d1e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002d20:	4770      	bx	lr

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8002d22:	2001      	movs	r0, #1
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 8002d2e:	2001      	movs	r0, #1
 8002d30:	bd70      	pop	{r4, r5, r6, pc}

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8002d32:	2003      	movs	r0, #3
 8002d34:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8002d36:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002d38:	bd70      	pop	{r4, r5, r6, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023c00 	.word	0x40023c00
 8002d40:	40023800 	.word	0x40023800
 8002d44:	08008534 	.word	0x08008534
 8002d48:	2000006c 	.word	0x2000006c
 8002d4c:	20000064 	.word	0x20000064

08002d50 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002d50:	4b01      	ldr	r3, [pc, #4]	; (8002d58 <HAL_RCC_GetHCLKFreq+0x8>)
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	2000006c 	.word	0x2000006c

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d5e:	f7ff fff7 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d62:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002d6a:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d6e:	40d8      	lsrs	r0, r3
 8002d70:	bd08      	pop	{r3, pc}
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08008544 	.word	0x08008544

08002d7c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d7c:	230f      	movs	r3, #15
 8002d7e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_GetClockConfig+0x34>)
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	f002 0203 	and.w	r2, r2, #3
 8002d88:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002d90:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002d98:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	08db      	lsrs	r3, r3, #3
 8002d9e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002da2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetClockConfig+0x38>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	600b      	str	r3, [r1, #0]
 8002dae:	4770      	bx	lr
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40023c00 	.word	0x40023c00

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dbc:	b082      	sub	sp, #8
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e0c1      	b.n	8002f46 <HAL_GPIO_Init+0x18e>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	680c      	ldr	r4, [r1, #0]
 8002dc8:	ea02 0504 	and.w	r5, r2, r4

    if(iocurrent == ioposition)
 8002dcc:	42aa      	cmp	r2, r5
 8002dce:	f040 80b9 	bne.w	8002f44 <HAL_GPIO_Init+0x18c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dd2:	684c      	ldr	r4, [r1, #4]
 8002dd4:	1e66      	subs	r6, r4, #1
 8002dd6:	2e01      	cmp	r6, #1
 8002dd8:	d903      	bls.n	8002de2 <HAL_GPIO_Init+0x2a>
 8002dda:	2c11      	cmp	r4, #17
 8002ddc:	d001      	beq.n	8002de2 <HAL_GPIO_Init+0x2a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dde:	2c12      	cmp	r4, #18
 8002de0:	d115      	bne.n	8002e0e <HAL_GPIO_Init+0x56>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002de2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002de8:	2603      	movs	r6, #3
 8002dea:	fa06 f60e 	lsl.w	r6, r6, lr
 8002dee:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002df2:	68cc      	ldr	r4, [r1, #12]
 8002df4:	fa04 f40e 	lsl.w	r4, r4, lr
 8002df8:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002dfa:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfe:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e02:	684c      	ldr	r4, [r1, #4]
 8002e04:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002e08:	409c      	lsls	r4, r3
 8002e0a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002e0c:	6042      	str	r2, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e0e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e10:	005f      	lsls	r7, r3, #1
 8002e12:	2403      	movs	r4, #3
 8002e14:	40bc      	lsls	r4, r7
 8002e16:	43e4      	mvns	r4, r4
 8002e18:	ea06 0204 	and.w	r2, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e1c:	688e      	ldr	r6, [r1, #8]
 8002e1e:	40be      	lsls	r6, r7
 8002e20:	4316      	orrs	r6, r2
      GPIOx->PUPDR = temp;
 8002e22:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e24:	684a      	ldr	r2, [r1, #4]
 8002e26:	2a02      	cmp	r2, #2
 8002e28:	d001      	beq.n	8002e2e <HAL_GPIO_Init+0x76>
 8002e2a:	2a12      	cmp	r2, #18
 8002e2c:	d113      	bne.n	8002e56 <HAL_GPIO_Init+0x9e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2e:	08de      	lsrs	r6, r3, #3
 8002e30:	3608      	adds	r6, #8
 8002e32:	f850 8026 	ldr.w	r8, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e36:	f003 0207 	and.w	r2, r3, #7
 8002e3a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8002e3e:	220f      	movs	r2, #15
 8002e40:	fa02 f20e 	lsl.w	r2, r2, lr
 8002e44:	ea28 0c02 	bic.w	ip, r8, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e48:	690a      	ldr	r2, [r1, #16]
 8002e4a:	fa02 f20e 	lsl.w	r2, r2, lr
 8002e4e:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3U] = temp;
 8002e52:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e56:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e58:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5a:	684a      	ldr	r2, [r1, #4]
 8002e5c:	f002 0403 	and.w	r4, r2, #3
 8002e60:	fa04 f207 	lsl.w	r2, r4, r7
 8002e64:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 8002e66:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e68:	684a      	ldr	r2, [r1, #4]
 8002e6a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002e6e:	d069      	beq.n	8002f44 <HAL_GPIO_Init+0x18c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e70:	2200      	movs	r2, #0
 8002e72:	9201      	str	r2, [sp, #4]
 8002e74:	4a37      	ldr	r2, [pc, #220]	; (8002f54 <HAL_GPIO_Init+0x19c>)
 8002e76:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002e78:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002e7c:	6454      	str	r4, [r2, #68]	; 0x44
 8002e7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e80:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e84:	9201      	str	r2, [sp, #4]
 8002e86:	9a01      	ldr	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e88:	089e      	lsrs	r6, r3, #2
 8002e8a:	1cb4      	adds	r4, r6, #2
 8002e8c:	4a32      	ldr	r2, [pc, #200]	; (8002f58 <HAL_GPIO_Init+0x1a0>)
 8002e8e:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e92:	f003 0203 	and.w	r2, r3, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	270f      	movs	r7, #15
 8002e9a:	4097      	lsls	r7, r2
 8002e9c:	ea24 0707 	bic.w	r7, r4, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea0:	4c2e      	ldr	r4, [pc, #184]	; (8002f5c <HAL_GPIO_Init+0x1a4>)
 8002ea2:	42a0      	cmp	r0, r4
 8002ea4:	d011      	beq.n	8002eca <HAL_GPIO_Init+0x112>
 8002ea6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002eaa:	42a0      	cmp	r0, r4
 8002eac:	d00f      	beq.n	8002ece <HAL_GPIO_Init+0x116>
 8002eae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002eb2:	42a0      	cmp	r0, r4
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_GPIO_Init+0x11a>
 8002eb6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002eba:	42a0      	cmp	r0, r4
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_GPIO_Init+0x11e>
 8002ebe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ec2:	42a0      	cmp	r0, r4
 8002ec4:	d109      	bne.n	8002eda <HAL_GPIO_Init+0x122>
 8002ec6:	2404      	movs	r4, #4
 8002ec8:	e008      	b.n	8002edc <HAL_GPIO_Init+0x124>
 8002eca:	2400      	movs	r4, #0
 8002ecc:	e006      	b.n	8002edc <HAL_GPIO_Init+0x124>
 8002ece:	2401      	movs	r4, #1
 8002ed0:	e004      	b.n	8002edc <HAL_GPIO_Init+0x124>
 8002ed2:	2402      	movs	r4, #2
 8002ed4:	e002      	b.n	8002edc <HAL_GPIO_Init+0x124>
 8002ed6:	2403      	movs	r4, #3
 8002ed8:	e000      	b.n	8002edc <HAL_GPIO_Init+0x124>
 8002eda:	2407      	movs	r4, #7
 8002edc:	fa04 f202 	lsl.w	r2, r4, r2
 8002ee0:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee2:	3602      	adds	r6, #2
 8002ee4:	4c1c      	ldr	r4, [pc, #112]	; (8002f58 <HAL_GPIO_Init+0x1a0>)
 8002ee6:	f844 2026 	str.w	r2, [r4, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eea:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_GPIO_Init+0x1a8>)
 8002eec:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	43ea      	mvns	r2, r5
 8002ef0:	ea04 0602 	and.w	r6, r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef4:	684f      	ldr	r7, [r1, #4]
 8002ef6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002efa:	d001      	beq.n	8002f00 <HAL_GPIO_Init+0x148>
        {
          temp |= iocurrent;
 8002efc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002f00:	4c17      	ldr	r4, [pc, #92]	; (8002f60 <HAL_GPIO_Init+0x1a8>)
 8002f02:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002f04:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f0a:	684f      	ldr	r7, [r1, #4]
 8002f0c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002f10:	d001      	beq.n	8002f16 <HAL_GPIO_Init+0x15e>
        {
          temp |= iocurrent;
 8002f12:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002f16:	4c12      	ldr	r4, [pc, #72]	; (8002f60 <HAL_GPIO_Init+0x1a8>)
 8002f18:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002f1c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f20:	684f      	ldr	r7, [r1, #4]
 8002f22:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002f26:	d001      	beq.n	8002f2c <HAL_GPIO_Init+0x174>
        {
          temp |= iocurrent;
 8002f28:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002f2c:	4c0c      	ldr	r4, [pc, #48]	; (8002f60 <HAL_GPIO_Init+0x1a8>)
 8002f2e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002f30:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f34:	684e      	ldr	r6, [r1, #4]
 8002f36:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002f3a:	d001      	beq.n	8002f40 <HAL_GPIO_Init+0x188>
        {
          temp |= iocurrent;
 8002f3c:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002f40:	4c07      	ldr	r4, [pc, #28]	; (8002f60 <HAL_GPIO_Init+0x1a8>)
 8002f42:	60e2      	str	r2, [r4, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f44:	3301      	adds	r3, #1
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	f67f af3b 	bls.w	8002dc2 <HAL_GPIO_Init+0xa>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8002f4c:	b002      	add	sp, #8
 8002f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40013c00 	.word	0x40013c00

08002f64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f64:	b10a      	cbz	r2, 8002f6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	6181      	str	r1, [r0, #24]
 8002f68:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f6a:	0409      	lsls	r1, r1, #16
 8002f6c:	6181      	str	r1, [r0, #24]
 8002f6e:	4770      	bx	lr

08002f70 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f70:	6802      	ldr	r2, [r0, #0]
 8002f72:	b2d3      	uxtb	r3, r2
 8002f74:	3b10      	subs	r3, #16
 8002f76:	490b      	ldr	r1, [pc, #44]	; (8002fa4 <DMA_CalcBaseAndBitshift+0x34>)
 8002f78:	fba1 1303 	umull	r1, r3, r1, r3
 8002f7c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f7e:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <DMA_CalcBaseAndBitshift+0x38>)
 8002f80:	5cc9      	ldrb	r1, [r1, r3]
 8002f82:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d906      	bls.n	8002f96 <DMA_CalcBaseAndBitshift+0x26>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f88:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002f8c:	f022 0203 	bic.w	r2, r2, #3
 8002f90:	3204      	adds	r2, #4
 8002f92:	6582      	str	r2, [r0, #88]	; 0x58
 8002f94:	e004      	b.n	8002fa0 <DMA_CalcBaseAndBitshift+0x30>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f96:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002f9a:	f022 0203 	bic.w	r2, r2, #3
 8002f9e:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002fa0:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002fa2:	4770      	bx	lr
 8002fa4:	aaaaaaab 	.word	0xaaaaaaab
 8002fa8:	0800852c 	.word	0x0800852c

08002fac <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fac:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fae:	6982      	ldr	r2, [r0, #24]
 8002fb0:	b982      	cbnz	r2, 8002fd4 <DMA_CheckFifoParam+0x28>
  {
    switch (tmp)
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d008      	beq.n	8002fc8 <DMA_CheckFifoParam+0x1c>
 8002fb6:	b10b      	cbz	r3, 8002fbc <DMA_CheckFifoParam+0x10>
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d12e      	bne.n	800301a <DMA_CheckFifoParam+0x6e>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002fbe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002fc2:	d12c      	bne.n	800301e <DMA_CheckFifoParam+0x72>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fc8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002fca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fce:	d028      	beq.n	8003022 <DMA_CheckFifoParam+0x76>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fd4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002fd8:	d113      	bne.n	8003002 <DMA_CheckFifoParam+0x56>
  {
    switch (tmp)
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d803      	bhi.n	8002fe6 <DMA_CheckFifoParam+0x3a>
 8002fde:	e8df f003 	tbb	[pc, r3]
 8002fe2:	0422      	.short	0x0422
 8002fe4:	0a22      	.short	0x0a22
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002fec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002ff0:	d11b      	bne.n	800302a <DMA_CheckFifoParam+0x7e>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ff6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ffc:	d017      	beq.n	800302e <DMA_CheckFifoParam+0x82>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002ffe:	2000      	movs	r0, #0
 8003000:	4770      	bx	lr
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003002:	2b02      	cmp	r3, #2
 8003004:	d915      	bls.n	8003032 <DMA_CheckFifoParam+0x86>
 8003006:	2b03      	cmp	r3, #3
 8003008:	d001      	beq.n	800300e <DMA_CheckFifoParam+0x62>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 800300a:	2000      	movs	r0, #0
 800300c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003010:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003014:	d10f      	bne.n	8003036 <DMA_CheckFifoParam+0x8a>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	2000      	movs	r0, #0
 8003018:	4770      	bx	lr
 800301a:	2000      	movs	r0, #0
 800301c:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 800301e:	2001      	movs	r0, #1
 8003020:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 8003022:	2001      	movs	r0, #1
 8003024:	4770      	bx	lr
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003026:	2001      	movs	r0, #1
 8003028:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 800302a:	2001      	movs	r0, #1
 800302c:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 800302e:	2001      	movs	r0, #1
 8003030:	4770      	bx	lr
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003032:	2001      	movs	r0, #1
 8003034:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8003036:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop

0800303c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003040:	f000 f9de 	bl	8003400 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003044:	2c00      	cmp	r4, #0
 8003046:	d05c      	beq.n	8003102 <HAL_DMA_Init+0xc6>
 8003048:	4605      	mov	r5, r0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800304a:	2300      	movs	r3, #0
 800304c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003050:	2302      	movs	r3, #2
 8003052:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	6813      	ldr	r3, [r2, #0]
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003060:	e00a      	b.n	8003078 <HAL_DMA_Init+0x3c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003062:	f000 f9cd 	bl	8003400 <HAL_GetTick>
 8003066:	1b40      	subs	r0, r0, r5
 8003068:	2805      	cmp	r0, #5
 800306a:	d905      	bls.n	8003078 <HAL_DMA_Init+0x3c>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800306c:	2320      	movs	r3, #32
 800306e:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003070:	2003      	movs	r0, #3
 8003072:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003076:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	f012 0f01 	tst.w	r2, #1
 8003080:	d1ef      	bne.n	8003062 <HAL_DMA_Init+0x26>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003082:	681a      	ldr	r2, [r3, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003084:	4820      	ldr	r0, [pc, #128]	; (8003108 <HAL_DMA_Init+0xcc>)
 8003086:	4010      	ands	r0, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003088:	6861      	ldr	r1, [r4, #4]
 800308a:	68a2      	ldr	r2, [r4, #8]
 800308c:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308e:	68e2      	ldr	r2, [r4, #12]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003090:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003092:	6922      	ldr	r2, [r4, #16]
 8003094:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003096:	6962      	ldr	r2, [r4, #20]
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003098:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309a:	69a2      	ldr	r2, [r4, #24]
 800309c:	4311      	orrs	r1, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800309e:	69e2      	ldr	r2, [r4, #28]
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a0:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a2:	6a21      	ldr	r1, [r4, #32]
 80030a4:	4311      	orrs	r1, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a6:	ea40 0201 	orr.w	r2, r0, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030ac:	2904      	cmp	r1, #4
 80030ae:	d103      	bne.n	80030b8 <HAL_DMA_Init+0x7c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80030b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80030b4:	4301      	orrs	r1, r0
 80030b6:	430a      	orrs	r2, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030b8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030ba:	6826      	ldr	r6, [r4, #0]
 80030bc:	6975      	ldr	r5, [r6, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030be:	f025 0507 	bic.w	r5, r5, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030c4:	431d      	orrs	r5, r3

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d10d      	bne.n	80030e6 <HAL_DMA_Init+0xaa>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030cc:	431d      	orrs	r5, r3
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030d0:	b14b      	cbz	r3, 80030e6 <HAL_DMA_Init+0xaa>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030d2:	4620      	mov	r0, r4
 80030d4:	f7ff ff6a 	bl	8002fac <DMA_CheckFifoParam>
 80030d8:	b128      	cbz	r0, 80030e6 <HAL_DMA_Init+0xaa>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030da:	2340      	movs	r3, #64	; 0x40
 80030dc:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030de:	2001      	movs	r0, #1
 80030e0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_ERROR; 
 80030e4:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030e6:	6175      	str	r5, [r6, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7ff ff41 	bl	8002f70 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80030f0:	233f      	movs	r3, #63	; 0x3f
 80030f2:	4093      	lsls	r3, r2
 80030f4:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f6:	2000      	movs	r0, #0
 80030f8:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8003100:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003102:	2001      	movs	r0, #1
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8003104:	bd70      	pop	{r4, r5, r6, pc}
 8003106:	bf00      	nop
 8003108:	f010803f 	.word	0xf010803f

0800310c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b083      	sub	sp, #12
 8003110:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003116:	4b71      	ldr	r3, [pc, #452]	; (80032dc <HAL_DMA_IRQHandler+0x1d0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4d71      	ldr	r5, [pc, #452]	; (80032e0 <HAL_DMA_IRQHandler+0x1d4>)
 800311c:	fba5 3503 	umull	r3, r5, r5, r3
 8003120:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003122:	6d87      	ldr	r7, [r0, #88]	; 0x58

  tmpisr = regs->ISR;
 8003124:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003126:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003128:	2308      	movs	r3, #8
 800312a:	4093      	lsls	r3, r2
 800312c:	421e      	tst	r6, r3
 800312e:	d010      	beq.n	8003152 <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003130:	6803      	ldr	r3, [r0, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f012 0f04 	tst.w	r2, #4
 8003138:	d00b      	beq.n	8003152 <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	f022 0204 	bic.w	r2, r2, #4
 8003140:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003142:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003144:	2308      	movs	r3, #8
 8003146:	4093      	lsls	r3, r2
 8003148:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800314a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6543      	str	r3, [r0, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003152:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003154:	2301      	movs	r3, #1
 8003156:	4093      	lsls	r3, r2
 8003158:	421e      	tst	r6, r3
 800315a:	d009      	beq.n	8003170 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800315c:	6822      	ldr	r2, [r4, #0]
 800315e:	6952      	ldr	r2, [r2, #20]
 8003160:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003164:	d004      	beq.n	8003170 <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003166:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003168:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800316a:	f043 0302 	orr.w	r3, r3, #2
 800316e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003170:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003172:	2304      	movs	r3, #4
 8003174:	4093      	lsls	r3, r2
 8003176:	421e      	tst	r6, r3
 8003178:	d009      	beq.n	800318e <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	f012 0f02 	tst.w	r2, #2
 8003182:	d004      	beq.n	800318e <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003184:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003186:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800318e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003190:	2310      	movs	r3, #16
 8003192:	4093      	lsls	r3, r2
 8003194:	421e      	tst	r6, r3
 8003196:	d024      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003198:	6822      	ldr	r2, [r4, #0]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	f012 0f08 	tst.w	r2, #8
 80031a0:	d01f      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031a2:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80031ac:	d00d      	beq.n	80031ca <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80031b4:	d104      	bne.n	80031c0 <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b8:	b19b      	cbz	r3, 80031e2 <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031ba:	4620      	mov	r0, r4
 80031bc:	4798      	blx	r3
 80031be:	e010      	b.n	80031e2 <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80031c2:	b173      	cbz	r3, 80031e2 <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031c4:	4620      	mov	r0, r4
 80031c6:	4798      	blx	r3
 80031c8:	e00b      	b.n	80031e2 <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80031d0:	d103      	bne.n	80031da <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	f022 0208 	bic.w	r2, r2, #8
 80031d8:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031dc:	b10b      	cbz	r3, 80031e2 <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031de:	4620      	mov	r0, r4
 80031e0:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80031e4:	2320      	movs	r3, #32
 80031e6:	4093      	lsls	r3, r2
 80031e8:	421e      	tst	r6, r3
 80031ea:	d052      	beq.n	8003292 <HAL_DMA_IRQHandler+0x186>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	f012 0f10 	tst.w	r2, #16
 80031f4:	d04d      	beq.n	8003292 <HAL_DMA_IRQHandler+0x186>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031f6:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031f8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d122      	bne.n	8003248 <HAL_DMA_IRQHandler+0x13c>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	6813      	ldr	r3, [r2, #0]
 8003206:	f023 0316 	bic.w	r3, r3, #22
 800320a:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800320c:	6822      	ldr	r2, [r4, #0]
 800320e:	6953      	ldr	r3, [r2, #20]
 8003210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003214:	6153      	str	r3, [r2, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003218:	b90b      	cbnz	r3, 800321e <HAL_DMA_IRQHandler+0x112>
 800321a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800321c:	b123      	cbz	r3, 8003228 <HAL_DMA_IRQHandler+0x11c>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	6813      	ldr	r3, [r2, #0]
 8003222:	f023 0308 	bic.w	r3, r3, #8
 8003226:	6013      	str	r3, [r2, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003228:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800322a:	233f      	movs	r3, #63	; 0x3f
 800322c:	4093      	lsls	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003230:	2300      	movs	r3, #0
 8003232:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003236:	2301      	movs	r3, #1
 8003238:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800323c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800323e:	2b00      	cmp	r3, #0
 8003240:	d049      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x1ca>
        {
          hdma->XferAbortCallback(hdma);
 8003242:	4620      	mov	r0, r4
 8003244:	4798      	blx	r3
 8003246:	e046      	b.n	80032d6 <HAL_DMA_IRQHandler+0x1ca>
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003250:	d00d      	beq.n	800326e <HAL_DMA_IRQHandler+0x162>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003258:	d104      	bne.n	8003264 <HAL_DMA_IRQHandler+0x158>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800325a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800325c:	b1cb      	cbz	r3, 8003292 <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800325e:	4620      	mov	r0, r4
 8003260:	4798      	blx	r3
 8003262:	e016      	b.n	8003292 <HAL_DMA_IRQHandler+0x186>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003264:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003266:	b1a3      	cbz	r3, 8003292 <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003268:	4620      	mov	r0, r4
 800326a:	4798      	blx	r3
 800326c:	e011      	b.n	8003292 <HAL_DMA_IRQHandler+0x186>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003274:	d109      	bne.n	800328a <HAL_DMA_IRQHandler+0x17e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	f022 0210 	bic.w	r2, r2, #16
 800327c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800327e:	2300      	movs	r3, #0
 8003280:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003284:	2301      	movs	r3, #1
 8003286:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800328a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800328c:	b10b      	cbz	r3, 8003292 <HAL_DMA_IRQHandler+0x186>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800328e:	4620      	mov	r0, r4
 8003290:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003292:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003294:	b1fb      	cbz	r3, 80032d6 <HAL_DMA_IRQHandler+0x1ca>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003296:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003298:	f013 0f01 	tst.w	r3, #1
 800329c:	d017      	beq.n	80032ce <HAL_DMA_IRQHandler+0x1c2>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800329e:	2305      	movs	r3, #5
 80032a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032a4:	6822      	ldr	r2, [r4, #0]
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 80032ae:	9b01      	ldr	r3, [sp, #4]
 80032b0:	3301      	adds	r3, #1
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	429d      	cmp	r5, r3
 80032b6:	d304      	bcc.n	80032c2 <HAL_DMA_IRQHandler+0x1b6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f013 0f01 	tst.w	r3, #1
 80032c0:	d1f5      	bne.n	80032ae <HAL_DMA_IRQHandler+0x1a2>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032c2:	2300      	movs	r3, #0
 80032c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80032ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032d0:	b10b      	cbz	r3, 80032d6 <HAL_DMA_IRQHandler+0x1ca>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032d2:	4620      	mov	r0, r4
 80032d4:	4798      	blx	r3
    }
  }
}
 80032d6:	b003      	add	sp, #12
 80032d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032da:	bf00      	nop
 80032dc:	2000006c 	.word	0x2000006c
 80032e0:	1b4e81b5 	.word	0x1b4e81b5

080032e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e4:	4a07      	ldr	r2, [pc, #28]	; (8003304 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80032e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f0:	0200      	lsls	r0, r0, #8
 80032f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f6:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80032f8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80032fc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8003300:	60d0      	str	r0, [r2, #12]
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003308:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_NVIC_SetPriority+0x5c>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003312:	f1c3 0407 	rsb	r4, r3, #7
 8003316:	2c04      	cmp	r4, #4
 8003318:	bf28      	it	cs
 800331a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331c:	1d1d      	adds	r5, r3, #4
 800331e:	2d06      	cmp	r5, #6
 8003320:	d901      	bls.n	8003326 <HAL_NVIC_SetPriority+0x1e>
 8003322:	1edd      	subs	r5, r3, #3
 8003324:	e000      	b.n	8003328 <HAL_NVIC_SetPriority+0x20>
 8003326:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	2301      	movs	r3, #1
 800332a:	fa03 f404 	lsl.w	r4, r3, r4
 800332e:	3c01      	subs	r4, #1
 8003330:	4021      	ands	r1, r4
 8003332:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003334:	40ab      	lsls	r3, r5
 8003336:	3b01      	subs	r3, #1
 8003338:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800333a:	430a      	orrs	r2, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800333c:	2800      	cmp	r0, #0
 800333e:	db08      	blt.n	8003352 <HAL_NVIC_SetPriority+0x4a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003340:	0112      	lsls	r2, r2, #4
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003348:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800334c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8003350:	e005      	b.n	800335e <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003352:	f000 000f 	and.w	r0, r0, #15
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_NVIC_SetPriority+0x60>)
 800335c:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800335e:	bc30      	pop	{r4, r5}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000ed00 	.word	0xe000ed00
 8003368:	e000ed14 	.word	0xe000ed14

0800336c <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800336c:	2800      	cmp	r0, #0
 800336e:	db08      	blt.n	8003382 <HAL_NVIC_EnableIRQ+0x16>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003370:	0942      	lsrs	r2, r0, #5
 8003372:	f000 001f 	and.w	r0, r0, #31
 8003376:	2301      	movs	r3, #1
 8003378:	fa03 f000 	lsl.w	r0, r3, r0
 800337c:	4b01      	ldr	r3, [pc, #4]	; (8003384 <HAL_NVIC_EnableIRQ+0x18>)
 800337e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100

08003388 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003388:	3801      	subs	r0, #1
 800338a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800338e:	d20a      	bcs.n	80033a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_SYSTICK_Config+0x24>)
 8003392:	6058      	str	r0, [r3, #4]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003394:	21f0      	movs	r1, #240	; 0xf0
 8003396:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <HAL_SYSTICK_Config+0x28>)
 8003398:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	2000      	movs	r0, #0
 800339e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80033a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000e010 	.word	0xe000e010
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_Init+0x30>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d0:	2003      	movs	r0, #3
 80033d2:	f7ff ff87 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f003 f8aa 	bl	8006530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033dc:	f7fd fd76 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80033e0:	2000      	movs	r0, #0
 80033e2:	bd08      	pop	{r3, pc}
 80033e4:	40023c00 	.word	0x40023c00

080033e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80033e8:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <HAL_IncTick+0x10>)
 80033ea:	6813      	ldr	r3, [r2, #0]
 80033ec:	4903      	ldr	r1, [pc, #12]	; (80033fc <HAL_IncTick+0x14>)
 80033ee:	7809      	ldrb	r1, [r1, #0]
 80033f0:	440b      	add	r3, r1
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20005fdc 	.word	0x20005fdc
 80033fc:	20000068 	.word	0x20000068

08003400 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003400:	4b01      	ldr	r3, [pc, #4]	; (8003408 <HAL_GetTick+0x8>)
 8003402:	6818      	ldr	r0, [r3, #0]
}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20005fdc 	.word	0x20005fdc

0800340c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7ff fff6 	bl	8003400 <HAL_GetTick>
 8003414:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003416:	f1b4 3fff 	cmp.w	r4, #4294967295
 800341a:	d002      	beq.n	8003422 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <HAL_Delay+0x24>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003422:	f7ff ffed 	bl	8003400 <HAL_GetTick>
 8003426:	1b40      	subs	r0, r0, r5
 8003428:	4284      	cmp	r4, r0
 800342a:	d8fa      	bhi.n	8003422 <HAL_Delay+0x16>
  {
  }
}
 800342c:	bd38      	pop	{r3, r4, r5, pc}
 800342e:	bf00      	nop
 8003430:	20000068 	.word	0x20000068

08003434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003434:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003436:	6a03      	ldr	r3, [r0, #32]
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003442:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003444:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003448:	680c      	ldr	r4, [r1, #0]
 800344a:	ea42 0504 	orr.w	r5, r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800344e:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003452:	688b      	ldr	r3, [r1, #8]
 8003454:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003456:	4c0c      	ldr	r4, [pc, #48]	; (8003488 <TIM_OC1_SetConfig+0x54>)
 8003458:	42a0      	cmp	r0, r4
 800345a:	d105      	bne.n	8003468 <TIM_OC1_SetConfig+0x34>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800345c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003460:	68ca      	ldr	r2, [r1, #12]
 8003462:	4313      	orrs	r3, r2
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003464:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003468:	4c07      	ldr	r4, [pc, #28]	; (8003488 <TIM_OC1_SetConfig+0x54>)
 800346a:	42a0      	cmp	r0, r4
 800346c:	d105      	bne.n	800347a <TIM_OC1_SetConfig+0x46>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800346e:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003472:	694a      	ldr	r2, [r1, #20]
 8003474:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003476:	698e      	ldr	r6, [r1, #24]
 8003478:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347a:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347c:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800347e:	684a      	ldr	r2, [r1, #4]
 8003480:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003482:	6203      	str	r3, [r0, #32]
}
 8003484:	bc70      	pop	{r4, r5, r6}
 8003486:	4770      	bx	lr
 8003488:	40010000 	.word	0x40010000

0800348c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800348e:	6a03      	ldr	r3, [r0, #32]
 8003490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003494:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003496:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800349c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a0:	680c      	ldr	r4, [r1, #0]
 80034a2:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034a8:	688c      	ldr	r4, [r1, #8]
 80034aa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ae:	4c0e      	ldr	r4, [pc, #56]	; (80034e8 <TIM_OC3_SetConfig+0x5c>)
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	d106      	bne.n	80034c2 <TIM_OC3_SetConfig+0x36>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b8:	68cc      	ldr	r4, [r1, #12]
 80034ba:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c2:	4c09      	ldr	r4, [pc, #36]	; (80034e8 <TIM_OC3_SetConfig+0x5c>)
 80034c4:	42a0      	cmp	r0, r4
 80034c6:	d107      	bne.n	80034d8 <TIM_OC3_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034c8:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034cc:	694c      	ldr	r4, [r1, #20]
 80034ce:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034d2:	698c      	ldr	r4, [r1, #24]
 80034d4:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034da:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034dc:	684a      	ldr	r2, [r1, #4]
 80034de:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e0:	6203      	str	r3, [r0, #32]
}
 80034e2:	bc30      	pop	{r4, r5}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40010000 	.word	0x40010000

080034ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ee:	6a03      	ldr	r3, [r0, #32]
 80034f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034fc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003500:	680d      	ldr	r5, [r1, #0]
 8003502:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800350a:	688d      	ldr	r5, [r1, #8]
 800350c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003510:	4d07      	ldr	r5, [pc, #28]	; (8003530 <TIM_OC4_SetConfig+0x44>)
 8003512:	42a8      	cmp	r0, r5
 8003514:	d104      	bne.n	8003520 <TIM_OC4_SetConfig+0x34>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003516:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800351a:	694d      	ldr	r5, [r1, #20]
 800351c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003520:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003522:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003524:	684a      	ldr	r2, [r1, #4]
 8003526:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003528:	6203      	str	r3, [r0, #32]
}
 800352a:	bc30      	pop	{r4, r5}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000

08003534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003534:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003536:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003538:	6a04      	ldr	r4, [r0, #32]
 800353a:	f024 0401 	bic.w	r4, r4, #1
 800353e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003540:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003542:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003546:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800354a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800354e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003550:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003552:	6201      	str	r1, [r0, #32]
}
 8003554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop

0800355c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355e:	6a03      	ldr	r3, [r0, #32]
 8003560:	f023 0310 	bic.w	r3, r3, #16
 8003564:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003568:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800356a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800356e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003572:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003576:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800357a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800357c:	6201      	str	r1, [r0, #32]
}
 800357e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003582:	4770      	bx	lr

08003584 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003584:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800358a:	4319      	orrs	r1, r3
 800358c:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003590:	6081      	str	r1, [r0, #8]
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003594:	6802      	ldr	r2, [r0, #0]
 8003596:	68d3      	ldr	r3, [r2, #12]
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359e:	6802      	ldr	r2, [r0, #0]
 80035a0:	6893      	ldr	r3, [r2, #8]
 80035a2:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80035b2:	2000      	movs	r0, #0
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop

080035b8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop

080035c0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c2:	4a24      	ldr	r2, [pc, #144]	; (8003654 <TIM_Base_SetConfig+0x94>)
 80035c4:	4290      	cmp	r0, r2
 80035c6:	d00e      	beq.n	80035e6 <TIM_Base_SetConfig+0x26>
 80035c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80035cc:	d00b      	beq.n	80035e6 <TIM_Base_SetConfig+0x26>
 80035ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80035d2:	4290      	cmp	r0, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_Base_SetConfig+0x26>
 80035d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035da:	4290      	cmp	r0, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_Base_SetConfig+0x26>
 80035de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035e2:	4290      	cmp	r0, r2
 80035e4:	d103      	bne.n	80035ee <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80035ea:	684a      	ldr	r2, [r1, #4]
 80035ec:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ee:	4a19      	ldr	r2, [pc, #100]	; (8003654 <TIM_Base_SetConfig+0x94>)
 80035f0:	4290      	cmp	r0, r2
 80035f2:	d01a      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 80035f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80035f8:	d017      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 80035fa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80035fe:	4290      	cmp	r0, r2
 8003600:	d013      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 8003602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003606:	4290      	cmp	r0, r2
 8003608:	d00f      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 800360a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800360e:	4290      	cmp	r0, r2
 8003610:	d00b      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 8003612:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003616:	4290      	cmp	r0, r2
 8003618:	d007      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 800361a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800361e:	4290      	cmp	r0, r2
 8003620:	d003      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 8003622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003626:	4290      	cmp	r0, r2
 8003628:	d103      	bne.n	8003632 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362e:	68ca      	ldr	r2, [r1, #12]
 8003630:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003636:	694a      	ldr	r2, [r1, #20]
 8003638:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800363a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363c:	688b      	ldr	r3, [r1, #8]
 800363e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003640:	680b      	ldr	r3, [r1, #0]
 8003642:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <TIM_Base_SetConfig+0x94>)
 8003646:	4298      	cmp	r0, r3
 8003648:	d101      	bne.n	800364e <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364a:	690b      	ldr	r3, [r1, #16]
 800364c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800364e:	2301      	movs	r3, #1
 8003650:	6143      	str	r3, [r0, #20]
 8003652:	4770      	bx	lr
 8003654:	40010000 	.word	0x40010000

08003658 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	b1b8      	cbz	r0, 800368a <HAL_TIM_Base_Init+0x32>
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800365a:	b510      	push	{r4, lr}
 800365c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003662:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003666:	d104      	bne.n	8003672 <HAL_TIM_Base_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003668:	2300      	movs	r3, #0
 800366a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800366e:	f7fd fcbf 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003672:	2302      	movs	r3, #2
 8003674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003678:	1d21      	adds	r1, r4, #4
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	f7ff ffa0 	bl	80035c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003680:	2301      	movs	r3, #1
 8003682:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8003686:	2000      	movs	r0, #0
 8003688:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop

08003690 <HAL_TIM_OC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	b1b8      	cbz	r0, 80036c2 <HAL_TIM_OC_Init+0x32>
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b510      	push	{r4, lr}
 8003694:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003696:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800369a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800369e:	d104      	bne.n	80036aa <HAL_TIM_OC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80036a6:	f7ff ff87 	bl	80035b8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036aa:	2302      	movs	r3, #2
 80036ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80036b0:	1d21      	adds	r1, r4, #4
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	f7ff ff84 	bl	80035c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 80036be:	2000      	movs	r0, #0
 80036c0:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 80036c2:	2001      	movs	r0, #1
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop

080036c8 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c8:	b1b8      	cbz	r0, 80036fa <HAL_TIM_PWM_Init+0x32>
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036ca:	b510      	push	{r4, lr}
 80036cc:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d8:	2300      	movs	r3, #0
 80036da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036de:	f7ff ff6d 	bl	80035bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e8:	1d21      	adds	r1, r4, #4
 80036ea:	6820      	ldr	r0, [r4, #0]
 80036ec:	f7ff ff68 	bl	80035c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 80036f6:	2000      	movs	r0, #0
 80036f8:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 80036fa:	2001      	movs	r0, #1
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003702:	6a03      	ldr	r3, [r0, #32]
 8003704:	f023 0310 	bic.w	r3, r3, #16
 8003708:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800370c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003710:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003714:	680d      	ldr	r5, [r1, #0]
 8003716:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800371a:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800371e:	688d      	ldr	r5, [r1, #8]
 8003720:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003724:	4d0d      	ldr	r5, [pc, #52]	; (800375c <TIM_OC2_SetConfig+0x5c>)
 8003726:	42a8      	cmp	r0, r5
 8003728:	d106      	bne.n	8003738 <TIM_OC2_SetConfig+0x38>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800372a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800372e:	68cd      	ldr	r5, [r1, #12]
 8003730:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003734:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003738:	4d08      	ldr	r5, [pc, #32]	; (800375c <TIM_OC2_SetConfig+0x5c>)
 800373a:	42a8      	cmp	r0, r5
 800373c:	d107      	bne.n	800374e <TIM_OC2_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800373e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003742:	694d      	ldr	r5, [r1, #20]
 8003744:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003748:	698d      	ldr	r5, [r1, #24]
 800374a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800374e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003750:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003752:	684a      	ldr	r2, [r1, #4]
 8003754:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003756:	6203      	str	r3, [r0, #32]
}
 8003758:	bc30      	pop	{r4, r5}
 800375a:	4770      	bx	lr
 800375c:	40010000 	.word	0x40010000

08003760 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003760:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d028      	beq.n	80037ba <HAL_TIM_OC_ConfigChannel+0x5a>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003768:	b510      	push	{r4, lr}
 800376a:	4604      	mov	r4, r0
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800376c:	2301      	movs	r3, #1
 800376e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 8003778:	2a0c      	cmp	r2, #12
 800377a:	d817      	bhi.n	80037ac <HAL_TIM_OC_ConfigChannel+0x4c>
 800377c:	e8df f002 	tbb	[pc, r2]
 8003780:	16161607 	.word	0x16161607
 8003784:	1616160b 	.word	0x1616160b
 8003788:	1616160f 	.word	0x1616160f
 800378c:	13          	.byte	0x13
 800378d:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800378e:	6800      	ldr	r0, [r0, #0]
 8003790:	f7ff fe50 	bl	8003434 <TIM_OC1_SetConfig>
      break;
 8003794:	e00a      	b.n	80037ac <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003796:	6800      	ldr	r0, [r0, #0]
 8003798:	f7ff ffb2 	bl	8003700 <TIM_OC2_SetConfig>
      break;
 800379c:	e006      	b.n	80037ac <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	f7ff fe74 	bl	800348c <TIM_OC3_SetConfig>
      break;
 80037a4:	e002      	b.n	80037ac <HAL_TIM_OC_ConfigChannel+0x4c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037a6:	6800      	ldr	r0, [r0, #0]
 80037a8:	f7ff fea0 	bl	80034ec <TIM_OC4_SetConfig>

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b2:	2000      	movs	r0, #0
 80037b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 80037b8:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ba:	2002      	movs	r0, #2
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop

080037c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037c0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d066      	beq.n	8003898 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80037ca:	460d      	mov	r5, r1
 80037cc:	4604      	mov	r4, r0
 80037ce:	2301      	movs	r3, #1
 80037d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 80037da:	2a0c      	cmp	r2, #12
 80037dc:	d855      	bhi.n	800388a <HAL_TIM_PWM_ConfigChannel+0xca>
 80037de:	e8df f002 	tbb	[pc, r2]
 80037e2:	5407      	.short	0x5407
 80037e4:	541a5454 	.word	0x541a5454
 80037e8:	542e5454 	.word	0x542e5454
 80037ec:	5454      	.short	0x5454
 80037ee:	41          	.byte	0x41
 80037ef:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f0:	6800      	ldr	r0, [r0, #0]
 80037f2:	f7ff fe1f 	bl	8003434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037f6:	6822      	ldr	r2, [r4, #0]
 80037f8:	6993      	ldr	r3, [r2, #24]
 80037fa:	f043 0308 	orr.w	r3, r3, #8
 80037fe:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003800:	6822      	ldr	r2, [r4, #0]
 8003802:	6993      	ldr	r3, [r2, #24]
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800380a:	6822      	ldr	r2, [r4, #0]
 800380c:	6991      	ldr	r1, [r2, #24]
 800380e:	692b      	ldr	r3, [r5, #16]
 8003810:	430b      	orrs	r3, r1
 8003812:	6193      	str	r3, [r2, #24]
      break;
 8003814:	e039      	b.n	800388a <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003816:	6800      	ldr	r0, [r0, #0]
 8003818:	f7ff ff72 	bl	8003700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800381c:	6822      	ldr	r2, [r4, #0]
 800381e:	6993      	ldr	r3, [r2, #24]
 8003820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003824:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003826:	6822      	ldr	r2, [r4, #0]
 8003828:	6993      	ldr	r3, [r2, #24]
 800382a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003830:	6822      	ldr	r2, [r4, #0]
 8003832:	6993      	ldr	r3, [r2, #24]
 8003834:	6929      	ldr	r1, [r5, #16]
 8003836:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800383a:	6193      	str	r3, [r2, #24]
      break;
 800383c:	e025      	b.n	800388a <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383e:	6800      	ldr	r0, [r0, #0]
 8003840:	f7ff fe24 	bl	800348c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003844:	6822      	ldr	r2, [r4, #0]
 8003846:	69d3      	ldr	r3, [r2, #28]
 8003848:	f043 0308 	orr.w	r3, r3, #8
 800384c:	61d3      	str	r3, [r2, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384e:	6822      	ldr	r2, [r4, #0]
 8003850:	69d3      	ldr	r3, [r2, #28]
 8003852:	f023 0304 	bic.w	r3, r3, #4
 8003856:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	69d1      	ldr	r1, [r2, #28]
 800385c:	692b      	ldr	r3, [r5, #16]
 800385e:	430b      	orrs	r3, r1
 8003860:	61d3      	str	r3, [r2, #28]
      break;
 8003862:	e012      	b.n	800388a <HAL_TIM_PWM_ConfigChannel+0xca>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003864:	6800      	ldr	r0, [r0, #0]
 8003866:	f7ff fe41 	bl	80034ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	69d3      	ldr	r3, [r2, #28]
 800386e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003872:	61d3      	str	r3, [r2, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	69d3      	ldr	r3, [r2, #28]
 8003878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	69d3      	ldr	r3, [r2, #28]
 8003882:	6929      	ldr	r1, [r5, #16]
 8003884:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003888:	61d3      	str	r3, [r2, #28]

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800388a:	2301      	movs	r3, #1
 800388c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003890:	2000      	movs	r0, #0
 8003892:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8003896:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003898:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 800389a:	bd38      	pop	{r3, r4, r5, pc}

0800389c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800389c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800389e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80038a8:	4319      	orrs	r1, r3
 80038aa:	ea44 0301 	orr.w	r3, r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ae:	6083      	str	r3, [r0, #8]
}
 80038b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop

080038b8 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d06a      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0xde>
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c0:	b510      	push	{r4, lr}
 80038c2:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c4:	2301      	movs	r3, #1
 80038c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ca:	2302      	movs	r3, #2
 80038cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d0:	6802      	ldr	r2, [r0, #0]
 80038d2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80038dc:	6093      	str	r3, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 80038de:	680b      	ldr	r3, [r1, #0]
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d043      	beq.n	800396c <HAL_TIM_ConfigClockSource+0xb4>
 80038e4:	d80a      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x44>
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d04a      	beq.n	8003980 <HAL_TIM_ConfigClockSource+0xc8>
 80038ea:	d802      	bhi.n	80038f2 <HAL_TIM_ConfigClockSource+0x3a>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d047      	beq.n	8003980 <HAL_TIM_ConfigClockSource+0xc8>
 80038f0:	e04a      	b.n	8003988 <HAL_TIM_ConfigClockSource+0xd0>
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d044      	beq.n	8003980 <HAL_TIM_ConfigClockSource+0xc8>
 80038f6:	2b30      	cmp	r3, #48	; 0x30
 80038f8:	d042      	beq.n	8003980 <HAL_TIM_ConfigClockSource+0xc8>
 80038fa:	e045      	b.n	8003988 <HAL_TIM_ConfigClockSource+0xd0>
 80038fc:	2b60      	cmp	r3, #96	; 0x60
 80038fe:	d02b      	beq.n	8003958 <HAL_TIM_ConfigClockSource+0xa0>
 8003900:	d802      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x50>
 8003902:	2b50      	cmp	r3, #80	; 0x50
 8003904:	d01e      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x8c>
 8003906:	e03f      	b.n	8003988 <HAL_TIM_ConfigClockSource+0xd0>
 8003908:	2b70      	cmp	r3, #112	; 0x70
 800390a:	d003      	beq.n	8003914 <HAL_TIM_ConfigClockSource+0x5c>
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003910:	d00c      	beq.n	800392c <HAL_TIM_ConfigClockSource+0x74>
 8003912:	e039      	b.n	8003988 <HAL_TIM_ConfigClockSource+0xd0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003914:	68cb      	ldr	r3, [r1, #12]
 8003916:	684a      	ldr	r2, [r1, #4]
 8003918:	6889      	ldr	r1, [r1, #8]
 800391a:	6800      	ldr	r0, [r0, #0]
 800391c:	f7ff ffbe 	bl	800389c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003920:	6822      	ldr	r2, [r4, #0]
 8003922:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003928:	6093      	str	r3, [r2, #8]
      break;
 800392a:	e02d      	b.n	8003988 <HAL_TIM_ConfigClockSource+0xd0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800392c:	68cb      	ldr	r3, [r1, #12]
 800392e:	684a      	ldr	r2, [r1, #4]
 8003930:	6889      	ldr	r1, [r1, #8]
 8003932:	6800      	ldr	r0, [r0, #0]
 8003934:	f7ff ffb2 	bl	800389c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	6893      	ldr	r3, [r2, #8]
 800393c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003940:	6093      	str	r3, [r2, #8]
      break;
 8003942:	e021      	b.n	8003988 <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003944:	68ca      	ldr	r2, [r1, #12]
 8003946:	6849      	ldr	r1, [r1, #4]
 8003948:	6800      	ldr	r0, [r0, #0]
 800394a:	f7ff fdf3 	bl	8003534 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800394e:	2150      	movs	r1, #80	; 0x50
 8003950:	6820      	ldr	r0, [r4, #0]
 8003952:	f7ff fe17 	bl	8003584 <TIM_ITRx_SetConfig>
      break;
 8003956:	e017      	b.n	8003988 <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003958:	68ca      	ldr	r2, [r1, #12]
 800395a:	6849      	ldr	r1, [r1, #4]
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	f7ff fdfd 	bl	800355c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003962:	2160      	movs	r1, #96	; 0x60
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	f7ff fe0d 	bl	8003584 <TIM_ITRx_SetConfig>
      break;
 800396a:	e00d      	b.n	8003988 <HAL_TIM_ConfigClockSource+0xd0>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396c:	68ca      	ldr	r2, [r1, #12]
 800396e:	6849      	ldr	r1, [r1, #4]
 8003970:	6800      	ldr	r0, [r0, #0]
 8003972:	f7ff fddf 	bl	8003534 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003976:	2140      	movs	r1, #64	; 0x40
 8003978:	6820      	ldr	r0, [r4, #0]
 800397a:	f7ff fe03 	bl	8003584 <TIM_ITRx_SetConfig>
      break;
 800397e:	e003      	b.n	8003988 <HAL_TIM_ConfigClockSource+0xd0>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003980:	4619      	mov	r1, r3
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	f7ff fdfe 	bl	8003584 <TIM_ITRx_SetConfig>
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8003988:	2301      	movs	r3, #1
 800398a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800398e:	2000      	movs	r0, #0
 8003990:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8003994:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003996:	2002      	movs	r0, #2
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop

0800399c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d032      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a4:	b430      	push	{r4, r5}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a6:	2301      	movs	r3, #1
 80039a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	2302      	movs	r3, #2
 80039ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b2:	6803      	ldr	r3, [r0, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b6:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b8:	f022 0470 	bic.w	r4, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039bc:	680a      	ldr	r2, [r1, #0]
 80039be:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c2:	6803      	ldr	r3, [r0, #0]
 80039c4:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d012      	beq.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80039ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ce:	d00f      	beq.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80039d0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80039d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039dc:	4293      	cmp	r3, r2
 80039de:	d007      	beq.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80039e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80039e8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d104      	bne.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039f0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f4:	684a      	ldr	r2, [r1, #4]
 80039f6:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f8:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a00:	2300      	movs	r3, #0
 8003a02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003a06:	4618      	mov	r0, r3
 8003a08:	e001      	b.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0a:	2002      	movs	r0, #2
 8003a0c:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8003a0e:	bc30      	pop	{r4, r5}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40010000 	.word	0x40010000

08003a18 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d022      	beq.n	8003a66 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8003a20:	2301      	movs	r3, #1
 8003a22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a26:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a2c:	688b      	ldr	r3, [r1, #8]
 8003a2e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a34:	684b      	ldr	r3, [r1, #4]
 8003a36:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a3c:	680b      	ldr	r3, [r1, #0]
 8003a3e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a44:	690b      	ldr	r3, [r1, #16]
 8003a46:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a4c:	694b      	ldr	r3, [r1, #20]
 8003a4e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a54:	69ca      	ldr	r2, [r1, #28]
 8003a56:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a58:	6802      	ldr	r2, [r0, #0]
 8003a5a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003a62:	4618      	mov	r0, r3
 8003a64:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a66:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop

08003a6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <SystemInit+0x18>)
 8003a6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a72:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a88:	f100 0308 	add.w	r3, r0, #8
 8003a8c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a92:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a94:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a96:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6003      	str	r3, [r0, #0]
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6103      	str	r3, [r0, #16]
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop

08003aa8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aa8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003aaa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ab4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ab6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003ab8:	6803      	ldr	r3, [r0, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	6003      	str	r3, [r0, #0]
 8003abe:	4770      	bx	lr

08003ac0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ac0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ac2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ac4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ac8:	d101      	bne.n	8003ace <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003aca:	6902      	ldr	r2, [r0, #16]
 8003acc:	e007      	b.n	8003ade <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ace:	f100 0208 	add.w	r2, r0, #8
 8003ad2:	e000      	b.n	8003ad6 <vListInsert+0x16>
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6853      	ldr	r3, [r2, #4]
 8003ad8:	681c      	ldr	r4, [r3, #0]
 8003ada:	42a5      	cmp	r5, r4
 8003adc:	d2fa      	bcs.n	8003ad4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ade:	6853      	ldr	r3, [r2, #4]
 8003ae0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ae2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ae4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ae6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ae8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003aea:	6803      	ldr	r3, [r0, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	6003      	str	r3, [r0, #0]
}
 8003af0:	bc30      	pop	{r4, r5}
 8003af2:	4770      	bx	lr

08003af4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003af4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003af6:	6842      	ldr	r2, [r0, #4]
 8003af8:	6881      	ldr	r1, [r0, #8]
 8003afa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003afc:	6882      	ldr	r2, [r0, #8]
 8003afe:	6841      	ldr	r1, [r0, #4]
 8003b00:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	4290      	cmp	r0, r2
 8003b06:	d101      	bne.n	8003b0c <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b08:	6882      	ldr	r2, [r0, #8]
 8003b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	3a01      	subs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b16:	6818      	ldr	r0, [r3, #0]
}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b20:	f001 fcf0 	bl	8005504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d101      	bne.n	8003b30 <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
 8003b2c:	2401      	movs	r4, #1
 8003b2e:	e000      	b.n	8003b32 <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
 8003b30:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003b32:	f001 fd09 	bl	8005548 <vPortExitCritical>

	return xReturn;
}
 8003b36:	4620      	mov	r0, r4
 8003b38:	bd10      	pop	{r4, pc}
 8003b3a:	bf00      	nop

08003b3c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b40:	f001 fce0 	bl	8005504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b46:	b90b      	cbnz	r3, 8003b4c <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
 8003b48:	2401      	movs	r4, #1
 8003b4a:	e000      	b.n	8003b4e <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
 8003b4c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003b4e:	f001 fcfb 	bl	8005548 <vPortExitCritical>

	return xReturn;
}
 8003b52:	4620      	mov	r0, r4
 8003b54:	bd10      	pop	{r4, pc}
 8003b56:	bf00      	nop

08003b58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b5e:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b60:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003b62:	b93a      	cbnz	r2, 8003b74 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b64:	6803      	ldr	r3, [r0, #0]
 8003b66:	bb43      	cbnz	r3, 8003bba <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b68:	6840      	ldr	r0, [r0, #4]
 8003b6a:	f000 ffe5 	bl	8004b38 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6063      	str	r3, [r4, #4]
 8003b72:	e029      	b.n	8003bc8 <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b74:	b96e      	cbnz	r6, 8003b92 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b76:	6880      	ldr	r0, [r0, #8]
 8003b78:	f003 fb02 	bl	8007180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b7c:	68a2      	ldr	r2, [r4, #8]
 8003b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b80:	4413      	add	r3, r2
 8003b82:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b84:	6862      	ldr	r2, [r4, #4]
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d319      	bcc.n	8003bbe <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e01a      	b.n	8003bc8 <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b92:	68c0      	ldr	r0, [r0, #12]
 8003b94:	f003 faf4 	bl	8007180 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b9a:	425b      	negs	r3, r3
 8003b9c:	68e2      	ldr	r2, [r4, #12]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ba2:	6821      	ldr	r1, [r4, #0]
 8003ba4:	428a      	cmp	r2, r1
 8003ba6:	d202      	bcs.n	8003bae <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ba8:	6862      	ldr	r2, [r4, #4]
 8003baa:	4413      	add	r3, r2
 8003bac:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bae:	2e02      	cmp	r6, #2
 8003bb0:	d107      	bne.n	8003bc2 <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bb2:	b145      	cbz	r5, 8003bc6 <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bb4:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e006      	b.n	8003bc8 <prvCopyDataToQueue+0x70>
 8003bba:	2000      	movs	r0, #0
 8003bbc:	e004      	b.n	8003bc8 <prvCopyDataToQueue+0x70>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e002      	b.n	8003bc8 <prvCopyDataToQueue+0x70>
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e000      	b.n	8003bc8 <prvCopyDataToQueue+0x70>
 8003bc6:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bc8:	3501      	adds	r5, #1
 8003bca:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 8003bcc:	bd70      	pop	{r4, r5, r6, pc}
 8003bce:	bf00      	nop

08003bd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003bd2:	b172      	cbz	r2, 8003bf2 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003bd8:	68c4      	ldr	r4, [r0, #12]
 8003bda:	4414      	add	r4, r2
 8003bdc:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bde:	6840      	ldr	r0, [r0, #4]
 8003be0:	4284      	cmp	r4, r0
 8003be2:	d301      	bcc.n	8003be8 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	60d8      	str	r0, [r3, #12]
 8003be8:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003bea:	68d9      	ldr	r1, [r3, #12]
 8003bec:	f003 fac8 	bl	8007180 <memcpy>
 8003bf0:	bd10      	pop	{r4, pc}
 8003bf2:	4770      	bx	lr

08003bf4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bf8:	f001 fc84 	bl	8005504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bfc:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003c00:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c02:	e00a      	b.n	8003c1a <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c06:	b153      	cbz	r3, 8003c1e <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c08:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003c0c:	f000 feec 	bl	80049e8 <xTaskRemoveFromEventList>
 8003c10:	b108      	cbz	r0, 8003c16 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c12:	f000 ff7b 	bl	8004b0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c16:	3c01      	subs	r4, #1
 8003c18:	b264      	sxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c1a:	2c00      	cmp	r4, #0
 8003c1c:	dcf2      	bgt.n	8003c04 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c1e:	23ff      	movs	r3, #255	; 0xff
 8003c20:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c24:	f001 fc90 	bl	8005548 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c28:	f001 fc6c 	bl	8005504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c2c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8003c30:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c32:	e00a      	b.n	8003c4a <prvUnlockQueue+0x56>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c34:	692b      	ldr	r3, [r5, #16]
 8003c36:	b153      	cbz	r3, 8003c4e <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c38:	f105 0010 	add.w	r0, r5, #16
 8003c3c:	f000 fed4 	bl	80049e8 <xTaskRemoveFromEventList>
 8003c40:	b108      	cbz	r0, 8003c46 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 8003c42:	f000 ff63 	bl	8004b0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c46:	3c01      	subs	r4, #1
 8003c48:	b264      	sxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c4a:	2c00      	cmp	r4, #0
 8003c4c:	dcf2      	bgt.n	8003c34 <prvUnlockQueue+0x40>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c4e:	23ff      	movs	r3, #255	; 0xff
 8003c50:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c54:	f001 fc78 	bl	8005548 <vPortExitCritical>
 8003c58:	bd38      	pop	{r3, r4, r5, pc}
 8003c5a:	bf00      	nop

08003c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c5c:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003c5e:	b940      	cbnz	r0, 8003c72 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	e7fe      	b.n	8003c70 <xQueueGenericReset+0x14>
 8003c72:	4604      	mov	r4, r0
 8003c74:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 8003c76:	f001 fc45 	bl	8005504 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c7a:	6821      	ldr	r1, [r4, #0]
 8003c7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c80:	fb03 1002 	mla	r0, r3, r2, r1
 8003c84:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c86:	2000      	movs	r0, #0
 8003c88:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c8a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	fb02 1303 	mla	r3, r2, r3, r1
 8003c92:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c94:	23ff      	movs	r3, #255	; 0xff
 8003c96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c9e:	b97d      	cbnz	r5, 8003cc0 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ca0:	6923      	ldr	r3, [r4, #16]
 8003ca2:	b1ab      	cbz	r3, 8003cd0 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ca4:	f104 0010 	add.w	r0, r4, #16
 8003ca8:	f000 fe9e 	bl	80049e8 <xTaskRemoveFromEventList>
 8003cac:	b180      	cbz	r0, 8003cd0 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <xQueueGenericReset+0x7c>)
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	e007      	b.n	8003cd0 <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cc0:	f104 0010 	add.w	r0, r4, #16
 8003cc4:	f7ff fee0 	bl	8003a88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ccc:	f7ff fedc 	bl	8003a88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cd0:	f001 fc3a 	bl	8005548 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	461d      	mov	r5, r3
 8003ce0:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	b909      	cbnz	r1, 8003cea <prvInitialiseNewQueue+0xe>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ce6:	6024      	str	r4, [r4, #0]
 8003ce8:	e000      	b.n	8003cec <prvInitialiseNewQueue+0x10>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cea:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cec:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003cee:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff ffb2 	bl	8003c5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003cf8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8003cfc:	bd38      	pop	{r3, r4, r5, pc}
 8003cfe:	bf00      	nop

08003d00 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d00:	b940      	cbnz	r0, 8003d14 <xQueueGenericCreateStatic+0x14>
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	e7fe      	b.n	8003d12 <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d14:	b510      	push	{r4, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d1a:	b943      	cbnz	r3, 8003d2e <xQueueGenericCreateStatic+0x2e>
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	e7fe      	b.n	8003d2c <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d2e:	b112      	cbz	r2, 8003d36 <xQueueGenericCreateStatic+0x36>
 8003d30:	b119      	cbz	r1, 8003d3a <xQueueGenericCreateStatic+0x3a>
 8003d32:	2001      	movs	r0, #1
 8003d34:	e002      	b.n	8003d3c <xQueueGenericCreateStatic+0x3c>
 8003d36:	2001      	movs	r0, #1
 8003d38:	e000      	b.n	8003d3c <xQueueGenericCreateStatic+0x3c>
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	b940      	cbnz	r0, 8003d50 <xQueueGenericCreateStatic+0x50>
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	e7fe      	b.n	8003d4e <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d50:	b912      	cbnz	r2, 8003d58 <xQueueGenericCreateStatic+0x58>
 8003d52:	b919      	cbnz	r1, 8003d5c <xQueueGenericCreateStatic+0x5c>
 8003d54:	2001      	movs	r0, #1
 8003d56:	e002      	b.n	8003d5e <xQueueGenericCreateStatic+0x5e>
 8003d58:	2001      	movs	r0, #1
 8003d5a:	e000      	b.n	8003d5e <xQueueGenericCreateStatic+0x5e>
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	b940      	cbnz	r0, 8003d72 <xQueueGenericCreateStatic+0x72>
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	e7fe      	b.n	8003d70 <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d72:	2050      	movs	r0, #80	; 0x50
 8003d74:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d76:	9803      	ldr	r0, [sp, #12]
 8003d78:	2850      	cmp	r0, #80	; 0x50
 8003d7a:	d008      	beq.n	8003d8e <xQueueGenericCreateStatic+0x8e>
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	e7fe      	b.n	8003d8c <xQueueGenericCreateStatic+0x8c>
 8003d8e:	4620      	mov	r0, r4
 8003d90:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
 8003d92:	b13b      	cbz	r3, 8003da4 <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d9a:	9400      	str	r4, [sp, #0]
 8003d9c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003da0:	f7ff ff9c 	bl	8003cdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
 8003da4:	4620      	mov	r0, r4
 8003da6:	b004      	add	sp, #16
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	bf00      	nop

08003dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dae:	b085      	sub	sp, #20
 8003db0:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003db2:	b940      	cbnz	r0, 8003dc6 <xQueueGenericSend+0x1a>
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueGenericSend+0x18>
 8003dc6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dc8:	b919      	cbnz	r1, 8003dd2 <xQueueGenericSend+0x26>
 8003dca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003dcc:	b91a      	cbnz	r2, 8003dd6 <xQueueGenericSend+0x2a>
 8003dce:	2201      	movs	r2, #1
 8003dd0:	e002      	b.n	8003dd8 <xQueueGenericSend+0x2c>
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	e000      	b.n	8003dd8 <xQueueGenericSend+0x2c>
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	b942      	cbnz	r2, 8003dec <xQueueGenericSend+0x40>
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	e7fe      	b.n	8003dea <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d103      	bne.n	8003df8 <xQueueGenericSend+0x4c>
 8003df0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003df2:	2a01      	cmp	r2, #1
 8003df4:	d102      	bne.n	8003dfc <xQueueGenericSend+0x50>
 8003df6:	e002      	b.n	8003dfe <xQueueGenericSend+0x52>
 8003df8:	2201      	movs	r2, #1
 8003dfa:	e000      	b.n	8003dfe <xQueueGenericSend+0x52>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	b942      	cbnz	r2, 8003e12 <xQueueGenericSend+0x66>
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	e7fe      	b.n	8003e10 <xQueueGenericSend+0x64>
 8003e12:	461d      	mov	r5, r3
 8003e14:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e16:	f000 fe7f 	bl	8004b18 <xTaskGetSchedulerState>
 8003e1a:	b918      	cbnz	r0, 8003e24 <xQueueGenericSend+0x78>
 8003e1c:	9b01      	ldr	r3, [sp, #4]
 8003e1e:	b91b      	cbnz	r3, 8003e28 <xQueueGenericSend+0x7c>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e002      	b.n	8003e2a <xQueueGenericSend+0x7e>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <xQueueGenericSend+0x7e>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	b943      	cbnz	r3, 8003e3e <xQueueGenericSend+0x92>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	e7fe      	b.n	8003e3c <xQueueGenericSend+0x90>
 8003e3e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e40:	f001 fb60 	bl	8005504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d301      	bcc.n	8003e50 <xQueueGenericSend+0xa4>
 8003e4c:	2d02      	cmp	r5, #2
 8003e4e:	d121      	bne.n	8003e94 <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e50:	462a      	mov	r2, r5
 8003e52:	4631      	mov	r1, r6
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7ff fe7f 	bl	8003b58 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e5c:	b16b      	cbz	r3, 8003e7a <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e62:	f000 fdc1 	bl	80049e8 <xTaskRemoveFromEventList>
 8003e66:	b188      	cbz	r0, 8003e8c <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6c:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <xQueueGenericSend+0x18c>)
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	e008      	b.n	8003e8c <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e7a:	b138      	cbz	r0, 8003e8c <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e80:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <xQueueGenericSend+0x18c>)
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e8c:	f001 fb5c 	bl	8005548 <vPortExitCritical>
				return pdPASS;
 8003e90:	2001      	movs	r0, #1
 8003e92:	e04e      	b.n	8003f32 <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e94:	9b01      	ldr	r3, [sp, #4]
 8003e96:	b91b      	cbnz	r3, 8003ea0 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e98:	f001 fb56 	bl	8005548 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	e048      	b.n	8003f32 <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ea0:	b91f      	cbnz	r7, 8003eaa <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ea2:	a802      	add	r0, sp, #8
 8003ea4:	f000 fde6 	bl	8004a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea8:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eaa:	f001 fb4d 	bl	8005548 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eae:	f000 fbd7 	bl	8004660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eb2:	f001 fb27 	bl	8005504 <vPortEnterCritical>
 8003eb6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003eba:	b25b      	sxtb	r3, r3
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d102      	bne.n	8003ec8 <xQueueGenericSend+0x11c>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003ec8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d102      	bne.n	8003eda <xQueueGenericSend+0x12e>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eda:	f001 fb35 	bl	8005548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ede:	a901      	add	r1, sp, #4
 8003ee0:	a802      	add	r0, sp, #8
 8003ee2:	f000 fdd3 	bl	8004a8c <xTaskCheckForTimeOut>
 8003ee6:	b9f0      	cbnz	r0, 8003f26 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7ff fe17 	bl	8003b1c <prvIsQueueFull>
 8003eee:	b1a0      	cbz	r0, 8003f1a <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ef0:	9901      	ldr	r1, [sp, #4]
 8003ef2:	f104 0010 	add.w	r0, r4, #16
 8003ef6:	f000 fd43 	bl	8004980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003efa:	4620      	mov	r0, r4
 8003efc:	f7ff fe7a 	bl	8003bf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f00:	f000 fc4e 	bl	80047a0 <xTaskResumeAll>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d19b      	bne.n	8003e40 <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
 8003f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <xQueueGenericSend+0x18c>)
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	e792      	b.n	8003e40 <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff fe6a 	bl	8003bf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f20:	f000 fc3e 	bl	80047a0 <xTaskResumeAll>
 8003f24:	e78c      	b.n	8003e40 <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f26:	4620      	mov	r0, r4
 8003f28:	f7ff fe64 	bl	8003bf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f2c:	f000 fc38 	bl	80047a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f30:	2000      	movs	r0, #0
		}
	}
}
 8003f32:	b005      	add	sp, #20
 8003f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f36:	bf00      	nop
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003f40:	b940      	cbnz	r0, 8003f54 <xQueueGenericSendFromISR+0x18>
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	e7fe      	b.n	8003f52 <xQueueGenericSendFromISR+0x16>
 8003f54:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f56:	b919      	cbnz	r1, 8003f60 <xQueueGenericSendFromISR+0x24>
 8003f58:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003f5a:	b918      	cbnz	r0, 8003f64 <xQueueGenericSendFromISR+0x28>
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	e002      	b.n	8003f66 <xQueueGenericSendFromISR+0x2a>
 8003f60:	2001      	movs	r0, #1
 8003f62:	e000      	b.n	8003f66 <xQueueGenericSendFromISR+0x2a>
 8003f64:	2000      	movs	r0, #0
 8003f66:	b940      	cbnz	r0, 8003f7a <xQueueGenericSendFromISR+0x3e>
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	e7fe      	b.n	8003f78 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d103      	bne.n	8003f86 <xQueueGenericSendFromISR+0x4a>
 8003f7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003f80:	2801      	cmp	r0, #1
 8003f82:	d102      	bne.n	8003f8a <xQueueGenericSendFromISR+0x4e>
 8003f84:	e002      	b.n	8003f8c <xQueueGenericSendFromISR+0x50>
 8003f86:	2001      	movs	r0, #1
 8003f88:	e000      	b.n	8003f8c <xQueueGenericSendFromISR+0x50>
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	b940      	cbnz	r0, 8003fa0 <xQueueGenericSendFromISR+0x64>
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	e7fe      	b.n	8003f9e <xQueueGenericSendFromISR+0x62>
 8003fa0:	461f      	mov	r7, r3
 8003fa2:	4690      	mov	r8, r2
 8003fa4:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fa6:	f001 fbd7 	bl	8005758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003faa:	f3ef 8611 	mrs	r6, BASEPRI
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d301      	bcc.n	8003fca <xQueueGenericSendFromISR+0x8e>
 8003fc6:	2f02      	cmp	r7, #2
 8003fc8:	d11e      	bne.n	8004008 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fca:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003fce:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fd0:	463a      	mov	r2, r7
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f7ff fdbf 	bl	8003b58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fda:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003fde:	d10d      	bne.n	8003ffc <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fe2:	b19b      	cbz	r3, 800400c <xQueueGenericSendFromISR+0xd0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fe8:	f000 fcfe 	bl	80049e8 <xTaskRemoveFromEventList>
 8003fec:	b180      	cbz	r0, 8004010 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fee:	f1b8 0f00 	cmp.w	r8, #0
 8003ff2:	d00f      	beq.n	8004014 <xQueueGenericSendFromISR+0xd8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f8c8 0000 	str.w	r0, [r8]
 8003ffa:	e00c      	b.n	8004016 <xQueueGenericSendFromISR+0xda>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ffc:	1c6b      	adds	r3, r5, #1
 8003ffe:	b25b      	sxtb	r3, r3
 8004000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004004:	2001      	movs	r0, #1
 8004006:	e006      	b.n	8004016 <xQueueGenericSendFromISR+0xda>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004008:	2000      	movs	r0, #0
 800400a:	e004      	b.n	8004016 <xQueueGenericSendFromISR+0xda>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
 800400c:	2001      	movs	r0, #1
 800400e:	e002      	b.n	8004016 <xQueueGenericSendFromISR+0xda>
 8004010:	2001      	movs	r0, #1
 8004012:	e000      	b.n	8004016 <xQueueGenericSendFromISR+0xda>
 8004014:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004016:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 800401a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800401e:	bf00      	nop

08004020 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004022:	b085      	sub	sp, #20
 8004024:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004026:	b940      	cbnz	r0, 800403a <xQueueReceive+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	e7fe      	b.n	8004038 <xQueueReceive+0x18>
 800403a:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800403c:	b919      	cbnz	r1, 8004046 <xQueueReceive+0x26>
 800403e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004040:	b91b      	cbnz	r3, 800404a <xQueueReceive+0x2a>
 8004042:	2301      	movs	r3, #1
 8004044:	e002      	b.n	800404c <xQueueReceive+0x2c>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <xQueueReceive+0x2c>
 800404a:	2300      	movs	r3, #0
 800404c:	b943      	cbnz	r3, 8004060 <xQueueReceive+0x40>
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	e7fe      	b.n	800405e <xQueueReceive+0x3e>
 8004060:	460e      	mov	r6, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004062:	f000 fd59 	bl	8004b18 <xTaskGetSchedulerState>
 8004066:	b918      	cbnz	r0, 8004070 <xQueueReceive+0x50>
 8004068:	9b01      	ldr	r3, [sp, #4]
 800406a:	b91b      	cbnz	r3, 8004074 <xQueueReceive+0x54>
 800406c:	2301      	movs	r3, #1
 800406e:	e002      	b.n	8004076 <xQueueReceive+0x56>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <xQueueReceive+0x56>
 8004074:	2300      	movs	r3, #0
 8004076:	b943      	cbnz	r3, 800408a <xQueueReceive+0x6a>
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	e7fe      	b.n	8004088 <xQueueReceive+0x68>
 800408a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800408c:	f001 fa3a 	bl	8005504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004090:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004092:	b1c5      	cbz	r5, 80040c6 <xQueueReceive+0xa6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004094:	4631      	mov	r1, r6
 8004096:	4620      	mov	r0, r4
 8004098:	f7ff fd9a 	bl	8003bd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800409c:	3d01      	subs	r5, #1
 800409e:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	b163      	cbz	r3, 80040be <xQueueReceive+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040a4:	f104 0010 	add.w	r0, r4, #16
 80040a8:	f000 fc9e 	bl	80049e8 <xTaskRemoveFromEventList>
 80040ac:	b138      	cbz	r0, 80040be <xQueueReceive+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <xQueueReceive+0x154>)
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040be:	f001 fa43 	bl	8005548 <vPortExitCritical>
				return pdPASS;
 80040c2:	2001      	movs	r0, #1
 80040c4:	e053      	b.n	800416e <xQueueReceive+0x14e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040c6:	9b01      	ldr	r3, [sp, #4]
 80040c8:	b91b      	cbnz	r3, 80040d2 <xQueueReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040ca:	f001 fa3d 	bl	8005548 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040ce:	2000      	movs	r0, #0
 80040d0:	e04d      	b.n	800416e <xQueueReceive+0x14e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040d2:	b91f      	cbnz	r7, 80040dc <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040d4:	a802      	add	r0, sp, #8
 80040d6:	f000 fccd 	bl	8004a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040da:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040dc:	f001 fa34 	bl	8005548 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040e0:	f000 fabe 	bl	8004660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040e4:	f001 fa0e 	bl	8005504 <vPortEnterCritical>
 80040e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80040ec:	b25b      	sxtb	r3, r3
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d102      	bne.n	80040fa <xQueueReceive+0xda>
 80040f4:	2300      	movs	r3, #0
 80040f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80040fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80040fe:	b25b      	sxtb	r3, r3
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d102      	bne.n	800410c <xQueueReceive+0xec>
 8004106:	2300      	movs	r3, #0
 8004108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800410c:	f001 fa1c 	bl	8005548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004110:	a901      	add	r1, sp, #4
 8004112:	a802      	add	r0, sp, #8
 8004114:	f000 fcba 	bl	8004a8c <xTaskCheckForTimeOut>
 8004118:	b9f0      	cbnz	r0, 8004158 <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800411a:	4620      	mov	r0, r4
 800411c:	f7ff fd0e 	bl	8003b3c <prvIsQueueEmpty>
 8004120:	b1a0      	cbz	r0, 800414c <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004122:	9901      	ldr	r1, [sp, #4]
 8004124:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004128:	f000 fc2a 	bl	8004980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800412c:	4620      	mov	r0, r4
 800412e:	f7ff fd61 	bl	8003bf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004132:	f000 fb35 	bl	80047a0 <xTaskResumeAll>
 8004136:	2800      	cmp	r0, #0
 8004138:	d1a8      	bne.n	800408c <xQueueReceive+0x6c>
				{
					portYIELD_WITHIN_API();
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <xQueueReceive+0x154>)
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	e79f      	b.n	800408c <xQueueReceive+0x6c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800414c:	4620      	mov	r0, r4
 800414e:	f7ff fd51 	bl	8003bf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004152:	f000 fb25 	bl	80047a0 <xTaskResumeAll>
 8004156:	e799      	b.n	800408c <xQueueReceive+0x6c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004158:	4620      	mov	r0, r4
 800415a:	f7ff fd4b 	bl	8003bf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800415e:	f000 fb1f 	bl	80047a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004162:	4620      	mov	r0, r4
 8004164:	f7ff fcea 	bl	8003b3c <prvIsQueueEmpty>
 8004168:	2800      	cmp	r0, #0
 800416a:	d08f      	beq.n	800408c <xQueueReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800416c:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800416e:	b005      	add	sp, #20
 8004170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004172:	bf00      	nop
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004178:	2300      	movs	r3, #0
 800417a:	e00b      	b.n	8004194 <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800417c:	4a07      	ldr	r2, [pc, #28]	; (800419c <vQueueAddToRegistry+0x24>)
 800417e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004182:	b932      	cbnz	r2, 8004192 <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004184:	4a05      	ldr	r2, [pc, #20]	; (800419c <vQueueAddToRegistry+0x24>)
 8004186:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800418a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800418e:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004190:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004192:	3301      	adds	r3, #1
 8004194:	2b07      	cmp	r3, #7
 8004196:	d9f1      	bls.n	800417c <vQueueAddToRegistry+0x4>
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20005fe0 	.word	0x20005fe0

080041a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4604      	mov	r4, r0
 80041a4:	460d      	mov	r5, r1
 80041a6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041a8:	f001 f9ac 	bl	8005504 <vPortEnterCritical>
 80041ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80041b0:	b25b      	sxtb	r3, r3
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b6:	d102      	bne.n	80041be <vQueueWaitForMessageRestricted+0x1e>
 80041b8:	2300      	movs	r3, #0
 80041ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80041be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80041c2:	b25b      	sxtb	r3, r3
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d102      	bne.n	80041d0 <vQueueWaitForMessageRestricted+0x30>
 80041ca:	2300      	movs	r3, #0
 80041cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041d0:	f001 f9ba 	bl	8005548 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041d6:	b92b      	cbnz	r3, 80041e4 <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041d8:	4632      	mov	r2, r6
 80041da:	4629      	mov	r1, r5
 80041dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041e0:	f000 fbe6 	bl	80049b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041e4:	4620      	mov	r0, r4
 80041e6:	f7ff fd05 	bl	8003bf4 <prvUnlockQueue>
 80041ea:	bd70      	pop	{r4, r5, r6, pc}

080041ec <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <prvResetNextTaskUnblockTime+0x2c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	b90b      	cbnz	r3, 80041f8 <prvResetNextTaskUnblockTime+0xc>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <prvResetNextTaskUnblockTime+0xe>
 80041f8:	2300      	movs	r3, #0
 80041fa:	b123      	cbz	r3, 8004206 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <prvResetNextTaskUnblockTime+0x30>)
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004206:	4b04      	ldr	r3, [pc, #16]	; (8004218 <prvResetNextTaskUnblockTime+0x2c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4b02      	ldr	r3, [pc, #8]	; (800421c <prvResetNextTaskUnblockTime+0x30>)
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000204 	.word	0x20000204
 800421c:	200006b4 	.word	0x200006b4

08004220 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004224:	4681      	mov	r9, r0
 8004226:	460d      	mov	r5, r1
 8004228:	4617      	mov	r7, r2
 800422a:	469a      	mov	sl, r3
 800422c:	9e08      	ldr	r6, [sp, #32]
 800422e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004232:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004234:	0092      	lsls	r2, r2, #2
 8004236:	21a5      	movs	r1, #165	; 0xa5
 8004238:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800423a:	f002 ffac 	bl	8007196 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800423e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004240:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8004244:	3a01      	subs	r2, #1
 8004246:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800424a:	f027 0707 	bic.w	r7, r7, #7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800424e:	2300      	movs	r3, #0
 8004250:	e006      	b.n	8004260 <prvInitialiseNewTask+0x40>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004252:	5ce9      	ldrb	r1, [r5, r3]
 8004254:	18e2      	adds	r2, r4, r3
 8004256:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800425a:	5cea      	ldrb	r2, [r5, r3]
 800425c:	b112      	cbz	r2, 8004264 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800425e:	3301      	adds	r3, #1
 8004260:	2b0f      	cmp	r3, #15
 8004262:	d9f6      	bls.n	8004252 <prvInitialiseNewTask+0x32>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004264:	2300      	movs	r3, #0
 8004266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800426a:	2e37      	cmp	r6, #55	; 0x37
 800426c:	d900      	bls.n	8004270 <prvInitialiseNewTask+0x50>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800426e:	2637      	movs	r6, #55	; 0x37
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004270:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004272:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004274:	2500      	movs	r5, #0
 8004276:	6525      	str	r5, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004278:	1d20      	adds	r0, r4, #4
 800427a:	f7ff fc11 	bl	8003aa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800427e:	f104 0018 	add.w	r0, r4, #24
 8004282:	f7ff fc0d 	bl	8003aa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004286:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004288:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800428c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800428e:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004290:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004292:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004296:	4652      	mov	r2, sl
 8004298:	4649      	mov	r1, r9
 800429a:	4638      	mov	r0, r7
 800429c:	f001 f906 	bl	80054ac <pxPortInitialiseStack>
 80042a0:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042a2:	f1b8 0f00 	cmp.w	r8, #0
 80042a6:	d001      	beq.n	80042ac <prvInitialiseNewTask+0x8c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042a8:	f8c8 4000 	str.w	r4, [r8]
 80042ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080042b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042b0:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042b2:	2400      	movs	r4, #0
 80042b4:	e007      	b.n	80042c6 <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80042ba:	0093      	lsls	r3, r2, #2
 80042bc:	480e      	ldr	r0, [pc, #56]	; (80042f8 <prvInitialiseTaskLists+0x48>)
 80042be:	4418      	add	r0, r3
 80042c0:	f7ff fbe2 	bl	8003a88 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042c4:	3401      	adds	r4, #1
 80042c6:	2c37      	cmp	r4, #55	; 0x37
 80042c8:	d9f5      	bls.n	80042b6 <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80042ca:	4d0c      	ldr	r5, [pc, #48]	; (80042fc <prvInitialiseTaskLists+0x4c>)
 80042cc:	4628      	mov	r0, r5
 80042ce:	f7ff fbdb 	bl	8003a88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042d2:	4c0b      	ldr	r4, [pc, #44]	; (8004300 <prvInitialiseTaskLists+0x50>)
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7ff fbd7 	bl	8003a88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042da:	480a      	ldr	r0, [pc, #40]	; (8004304 <prvInitialiseTaskLists+0x54>)
 80042dc:	f7ff fbd4 	bl	8003a88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042e0:	4809      	ldr	r0, [pc, #36]	; (8004308 <prvInitialiseTaskLists+0x58>)
 80042e2:	f7ff fbd1 	bl	8003a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042e6:	4809      	ldr	r0, [pc, #36]	; (800430c <prvInitialiseTaskLists+0x5c>)
 80042e8:	f7ff fbce 	bl	8003a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <prvInitialiseTaskLists+0x60>)
 80042ee:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <prvInitialiseTaskLists+0x64>)
 80042f2:	601c      	str	r4, [r3, #0]
 80042f4:	bd38      	pop	{r3, r4, r5, pc}
 80042f6:	bf00      	nop
 80042f8:	20000228 	.word	0x20000228
 80042fc:	200006bc 	.word	0x200006bc
 8004300:	200006d0 	.word	0x200006d0
 8004304:	20000698 	.word	0x20000698
 8004308:	2000020c 	.word	0x2000020c
 800430c:	200006e4 	.word	0x200006e4
 8004310:	20000204 	.word	0x20000204
 8004314:	20000220 	.word	0x20000220

08004318 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004318:	b510      	push	{r4, lr}
 800431a:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800431c:	f001 f8f2 	bl	8005504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <prvAddNewTaskToReadyList+0x8c>)
 8004322:	6813      	ldr	r3, [r2, #0]
 8004324:	3301      	adds	r3, #1
 8004326:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004328:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <prvAddNewTaskToReadyList+0x90>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	b93b      	cbnz	r3, 800433e <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <prvAddNewTaskToReadyList+0x90>)
 8004330:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d10d      	bne.n	8004354 <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004338:	f7ff ffba 	bl	80042b0 <prvInitialiseTaskLists>
 800433c:	e00a      	b.n	8004354 <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <prvAddNewTaskToReadyList+0x94>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b93b      	cbnz	r3, 8004354 <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004344:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <prvAddNewTaskToReadyList+0x90>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800434c:	429a      	cmp	r2, r3
 800434e:	d801      	bhi.n	8004354 <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
 8004350:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <prvAddNewTaskToReadyList+0x90>)
 8004352:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004354:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <prvAddNewTaskToReadyList+0x98>)
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800435c:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800435e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <prvAddNewTaskToReadyList+0x9c>)
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <prvAddNewTaskToReadyList+0x54>
 8004368:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <prvAddNewTaskToReadyList+0x9c>)
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004370:	009a      	lsls	r2, r3, #2
 8004372:	1d21      	adds	r1, r4, #4
 8004374:	4810      	ldr	r0, [pc, #64]	; (80043b8 <prvAddNewTaskToReadyList+0xa0>)
 8004376:	4410      	add	r0, r2
 8004378:	f7ff fb96 	bl	8003aa8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800437c:	f001 f8e4 	bl	8005548 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004380:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <prvAddNewTaskToReadyList+0x94>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	b16b      	cbz	r3, 80043a2 <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <prvAddNewTaskToReadyList+0x90>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800438e:	429a      	cmp	r2, r3
 8004390:	d207      	bcs.n	80043a2 <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <prvAddNewTaskToReadyList+0xa4>)
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	bd10      	pop	{r4, pc}
 80043a4:	20000690 	.word	0x20000690
 80043a8:	20000694 	.word	0x20000694
 80043ac:	20000208 	.word	0x20000208
 80043b0:	200006b8 	.word	0x200006b8
 80043b4:	200006f8 	.word	0x200006f8
 80043b8:	20000228 	.word	0x20000228
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043c4:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 80043c8:	b933      	cbnz	r3, 80043d8 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043ca:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80043cc:	f000 fff4 	bl	80053b8 <vPortFree>
				vPortFree( pxTCB );
 80043d0:	4620      	mov	r0, r4
 80043d2:	f000 fff1 	bl	80053b8 <vPortFree>
 80043d6:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d102      	bne.n	80043e2 <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 80043dc:	f000 ffec 	bl	80053b8 <vPortFree>
 80043e0:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d008      	beq.n	80043f8 <prvDeleteTCB+0x38>
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	e7fe      	b.n	80043f6 <prvDeleteTCB+0x36>
 80043f8:	bd10      	pop	{r4, pc}
 80043fa:	bf00      	nop

080043fc <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043fc:	b510      	push	{r4, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043fe:	e014      	b.n	800442a <prvCheckTasksWaitingTermination+0x2e>
		{
			taskENTER_CRITICAL();
 8004400:	f001 f880 	bl	8005504 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <prvCheckTasksWaitingTermination+0x38>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800440a:	1d20      	adds	r0, r4, #4
 800440c:	f7ff fb72 	bl	8003af4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004410:	4a09      	ldr	r2, [pc, #36]	; (8004438 <prvCheckTasksWaitingTermination+0x3c>)
 8004412:	6813      	ldr	r3, [r2, #0]
 8004414:	3b01      	subs	r3, #1
 8004416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004418:	4a08      	ldr	r2, [pc, #32]	; (800443c <prvCheckTasksWaitingTermination+0x40>)
 800441a:	6813      	ldr	r3, [r2, #0]
 800441c:	3b01      	subs	r3, #1
 800441e:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004420:	f001 f892 	bl	8005548 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004424:	4620      	mov	r0, r4
 8004426:	f7ff ffcb 	bl	80043c0 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800442a:	4b04      	ldr	r3, [pc, #16]	; (800443c <prvCheckTasksWaitingTermination+0x40>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <prvCheckTasksWaitingTermination+0x4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004432:	bd10      	pop	{r4, pc}
 8004434:	2000020c 	.word	0x2000020c
 8004438:	20000690 	.word	0x20000690
 800443c:	2000068c 	.word	0x2000068c

08004440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004440:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004442:	f7ff ffdb 	bl	80043fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <prvIdleTask+0x20>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d9f9      	bls.n	8004442 <prvIdleTask+0x2>
			{
				taskYIELD();
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	4b04      	ldr	r3, [pc, #16]	; (8004464 <prvIdleTask+0x24>)
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	e7f0      	b.n	8004442 <prvIdleTask+0x2>
 8004460:	20000228 	.word	0x20000228
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4604      	mov	r4, r0
 800446c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <prvAddCurrentTaskToDelayedList+0x64>)
 8004470:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004472:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	3004      	adds	r0, #4
 8004478:	f7ff fb3c 	bl	8003af4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800447c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004480:	d107      	bne.n	8004492 <prvAddCurrentTaskToDelayedList+0x2a>
 8004482:	b136      	cbz	r6, 8004492 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004486:	6819      	ldr	r1, [r3, #0]
 8004488:	3104      	adds	r1, #4
 800448a:	4812      	ldr	r0, [pc, #72]	; (80044d4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800448c:	f7ff fb0c 	bl	8003aa8 <vListInsertEnd>
 8004490:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004492:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800449a:	42a5      	cmp	r5, r4
 800449c:	d907      	bls.n	80044ae <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800449e:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <prvAddCurrentTaskToDelayedList+0x70>)
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <prvAddCurrentTaskToDelayedList+0x68>)
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	3104      	adds	r1, #4
 80044a8:	f7ff fb0a 	bl	8003ac0 <vListInsert>
 80044ac:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <prvAddCurrentTaskToDelayedList+0x74>)
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <prvAddCurrentTaskToDelayedList+0x68>)
 80044b4:	6819      	ldr	r1, [r3, #0]
 80044b6:	3104      	adds	r1, #4
 80044b8:	f7ff fb02 	bl	8003ac0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <prvAddCurrentTaskToDelayedList+0x78>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	429c      	cmp	r4, r3
 80044c2:	d201      	bcs.n	80044c8 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <prvAddCurrentTaskToDelayedList+0x78>)
 80044c6:	601c      	str	r4, [r3, #0]
 80044c8:	bd70      	pop	{r4, r5, r6, pc}
 80044ca:	bf00      	nop
 80044cc:	200006b0 	.word	0x200006b0
 80044d0:	20000694 	.word	0x20000694
 80044d4:	200006e4 	.word	0x200006e4
 80044d8:	20000220 	.word	0x20000220
 80044dc:	20000204 	.word	0x20000204
 80044e0:	200006b4 	.word	0x200006b4

080044e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044e4:	b570      	push	{r4, r5, r6, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80044ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044ec:	b945      	cbnz	r5, 8004500 <xTaskCreateStatic+0x1c>
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	e7fe      	b.n	80044fe <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004500:	b944      	cbnz	r4, 8004514 <xTaskCreateStatic+0x30>
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	e7fe      	b.n	8004512 <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004514:	265c      	movs	r6, #92	; 0x5c
 8004516:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004518:	9e04      	ldr	r6, [sp, #16]
 800451a:	2e5c      	cmp	r6, #92	; 0x5c
 800451c:	d008      	beq.n	8004530 <xTaskCreateStatic+0x4c>
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	e7fe      	b.n	800452e <xTaskCreateStatic+0x4a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004530:	b18c      	cbz	r4, 8004556 <xTaskCreateStatic+0x72>
 8004532:	b185      	cbz	r5, 8004556 <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004534:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004536:	2502      	movs	r5, #2
 8004538:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800453c:	2500      	movs	r5, #0
 800453e:	9503      	str	r5, [sp, #12]
 8004540:	9402      	str	r4, [sp, #8]
 8004542:	ad05      	add	r5, sp, #20
 8004544:	9501      	str	r5, [sp, #4]
 8004546:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004548:	9500      	str	r5, [sp, #0]
 800454a:	f7ff fe69 	bl	8004220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff fee2 	bl	8004318 <prvAddNewTaskToReadyList>
 8004554:	e001      	b.n	800455a <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
 800455a:	9805      	ldr	r0, [sp, #20]
 800455c:	b006      	add	sp, #24
 800455e:	bd70      	pop	{r4, r5, r6, pc}

08004560 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004564:	b085      	sub	sp, #20
 8004566:	4606      	mov	r6, r0
 8004568:	460f      	mov	r7, r1
 800456a:	4615      	mov	r5, r2
 800456c:	4698      	mov	r8, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456e:	0090      	lsls	r0, r2, #2
 8004570:	f000 fea0 	bl	80052b4 <pvPortMalloc>

			if( pxStack != NULL )
 8004574:	b160      	cbz	r0, 8004590 <xTaskCreate+0x30>
 8004576:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004578:	205c      	movs	r0, #92	; 0x5c
 800457a:	f000 fe9b 	bl	80052b4 <pvPortMalloc>

				if( pxNewTCB != NULL )
 800457e:	4604      	mov	r4, r0
 8004580:	b110      	cbz	r0, 8004588 <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004582:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
 8004586:	e004      	b.n	8004592 <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004588:	4648      	mov	r0, r9
 800458a:	f000 ff15 	bl	80053b8 <vPortFree>
 800458e:	e000      	b.n	8004592 <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004590:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004592:	b19c      	cbz	r4, 80045bc <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004594:	2300      	movs	r3, #0
 8004596:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800459a:	9303      	str	r3, [sp, #12]
 800459c:	9402      	str	r4, [sp, #8]
 800459e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4643      	mov	r3, r8
 80045a8:	462a      	mov	r2, r5
 80045aa:	4639      	mov	r1, r7
 80045ac:	4630      	mov	r0, r6
 80045ae:	f7ff fe37 	bl	8004220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045b2:	4620      	mov	r0, r4
 80045b4:	f7ff feb0 	bl	8004318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045b8:	2001      	movs	r0, #1
 80045ba:	e001      	b.n	80045c0 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 80045c0:	b005      	add	sp, #20
 80045c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045c6:	bf00      	nop

080045c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045c8:	b510      	push	{r4, lr}
 80045ca:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045cc:	2400      	movs	r4, #0
 80045ce:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045d0:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045d2:	aa07      	add	r2, sp, #28
 80045d4:	a906      	add	r1, sp, #24
 80045d6:	a805      	add	r0, sp, #20
 80045d8:	f000 fdf6 	bl	80051c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045dc:	9b05      	ldr	r3, [sp, #20]
 80045de:	9302      	str	r3, [sp, #8]
 80045e0:	9b06      	ldr	r3, [sp, #24]
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	9400      	str	r4, [sp, #0]
 80045e6:	4623      	mov	r3, r4
 80045e8:	9a07      	ldr	r2, [sp, #28]
 80045ea:	4918      	ldr	r1, [pc, #96]	; (800464c <vTaskStartScheduler+0x84>)
 80045ec:	4818      	ldr	r0, [pc, #96]	; (8004650 <vTaskStartScheduler+0x88>)
 80045ee:	f7ff ff79 	bl	80044e4 <xTaskCreateStatic>
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045f2:	b108      	cbz	r0, 80045f8 <vTaskStartScheduler+0x30>
		{
			xReturn = pdPASS;
 80045f4:	2001      	movs	r0, #1
 80045f6:	e000      	b.n	80045fa <vTaskStartScheduler+0x32>
		}
		else
		{
			xReturn = pdFAIL;
 80045f8:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045fa:	2801      	cmp	r0, #1
 80045fc:	d101      	bne.n	8004602 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
 80045fe:	f000 fb89 	bl	8004d14 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004602:	2801      	cmp	r0, #1
 8004604:	d114      	bne.n	8004630 <vTaskStartScheduler+0x68>
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004616:	f04f 32ff 	mov.w	r2, #4294967295
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <vTaskStartScheduler+0x8c>)
 800461c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800461e:	2201      	movs	r2, #1
 8004620:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <vTaskStartScheduler+0x90>)
 8004622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004624:	2200      	movs	r2, #0
 8004626:	4b0d      	ldr	r3, [pc, #52]	; (800465c <vTaskStartScheduler+0x94>)
 8004628:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800462a:	f001 f80d 	bl	8005648 <xPortStartScheduler>
 800462e:	e00b      	b.n	8004648 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004630:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004634:	d108      	bne.n	8004648 <vTaskStartScheduler+0x80>
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	e7fe      	b.n	8004646 <vTaskStartScheduler+0x7e>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004648:	b008      	add	sp, #32
 800464a:	bd10      	pop	{r4, pc}
 800464c:	0800854c 	.word	0x0800854c
 8004650:	08004441 	.word	0x08004441
 8004654:	200006b4 	.word	0x200006b4
 8004658:	20000208 	.word	0x20000208
 800465c:	200006b0 	.word	0x200006b0

08004660 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004660:	4a02      	ldr	r2, [pc, #8]	; (800466c <vTaskSuspendAll+0xc>)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000688 	.word	0x20000688

08004670 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004670:	4b01      	ldr	r3, [pc, #4]	; (8004678 <xTaskGetTickCount+0x8>)
 8004672:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	200006b0 	.word	0x200006b0

0800467c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800467e:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <xTaskIncrementTick+0xf8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d168      	bne.n	8004758 <xTaskIncrementTick+0xdc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004686:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <xTaskIncrementTick+0xfc>)
 8004688:	681d      	ldr	r5, [r3, #0]
 800468a:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800468c:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800468e:	b9c5      	cbnz	r5, 80046c2 <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8004690:	4b3a      	ldr	r3, [pc, #232]	; (800477c <xTaskIncrementTick+0x100>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b143      	cbz	r3, 80046aa <xTaskIncrementTick+0x2e>
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	e7fe      	b.n	80046a8 <xTaskIncrementTick+0x2c>
 80046aa:	4a34      	ldr	r2, [pc, #208]	; (800477c <xTaskIncrementTick+0x100>)
 80046ac:	6811      	ldr	r1, [r2, #0]
 80046ae:	4b34      	ldr	r3, [pc, #208]	; (8004780 <xTaskIncrementTick+0x104>)
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	6010      	str	r0, [r2, #0]
 80046b4:	6019      	str	r1, [r3, #0]
 80046b6:	4a33      	ldr	r2, [pc, #204]	; (8004784 <xTaskIncrementTick+0x108>)
 80046b8:	6813      	ldr	r3, [r2, #0]
 80046ba:	3301      	adds	r3, #1
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	f7ff fd95 	bl	80041ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046c2:	4b31      	ldr	r3, [pc, #196]	; (8004788 <xTaskIncrementTick+0x10c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	429d      	cmp	r5, r3
 80046c8:	d203      	bcs.n	80046d2 <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ca:	2400      	movs	r4, #0
 80046cc:	e039      	b.n	8004742 <xTaskIncrementTick+0xc6>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
 80046ce:	2401      	movs	r4, #1
 80046d0:	e000      	b.n	80046d4 <xTaskIncrementTick+0x58>
 80046d2:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <xTaskIncrementTick+0x100>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	b90b      	cbnz	r3, 80046e0 <xTaskIncrementTick+0x64>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <xTaskIncrementTick+0x66>
 80046e0:	2300      	movs	r3, #0
 80046e2:	b123      	cbz	r3, 80046ee <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046e4:	f04f 32ff 	mov.w	r2, #4294967295
 80046e8:	4b27      	ldr	r3, [pc, #156]	; (8004788 <xTaskIncrementTick+0x10c>)
 80046ea:	601a      	str	r2, [r3, #0]
					break;
 80046ec:	e029      	b.n	8004742 <xTaskIncrementTick+0xc6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046ee:	4b23      	ldr	r3, [pc, #140]	; (800477c <xTaskIncrementTick+0x100>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046f6:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
 80046f8:	429d      	cmp	r5, r3
 80046fa:	d202      	bcs.n	8004702 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046fc:	4a22      	ldr	r2, [pc, #136]	; (8004788 <xTaskIncrementTick+0x10c>)
 80046fe:	6013      	str	r3, [r2, #0]
						break;
 8004700:	e01f      	b.n	8004742 <xTaskIncrementTick+0xc6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004702:	1d37      	adds	r7, r6, #4
 8004704:	4638      	mov	r0, r7
 8004706:	f7ff f9f5 	bl	8003af4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800470a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800470c:	b11b      	cbz	r3, 8004716 <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800470e:	f106 0018 	add.w	r0, r6, #24
 8004712:	f7ff f9ef 	bl	8003af4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004716:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004718:	4a1c      	ldr	r2, [pc, #112]	; (800478c <xTaskIncrementTick+0x110>)
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <xTaskIncrementTick+0xa8>
 8004720:	4a1a      	ldr	r2, [pc, #104]	; (800478c <xTaskIncrementTick+0x110>)
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004728:	009a      	lsls	r2, r3, #2
 800472a:	4639      	mov	r1, r7
 800472c:	4818      	ldr	r0, [pc, #96]	; (8004790 <xTaskIncrementTick+0x114>)
 800472e:	4410      	add	r0, r2
 8004730:	f7ff f9ba 	bl	8003aa8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004734:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004736:	4b17      	ldr	r3, [pc, #92]	; (8004794 <xTaskIncrementTick+0x118>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	429a      	cmp	r2, r3
 800473e:	d2c6      	bcs.n	80046ce <xTaskIncrementTick+0x52>
 8004740:	e7c8      	b.n	80046d4 <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <xTaskIncrementTick+0x118>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800474c:	009a      	lsls	r2, r3, #2
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <xTaskIncrementTick+0x114>)
 8004750:	589b      	ldr	r3, [r3, r2]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d806      	bhi.n	8004764 <xTaskIncrementTick+0xe8>
 8004756:	e006      	b.n	8004766 <xTaskIncrementTick+0xea>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004758:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <xTaskIncrementTick+0x11c>)
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	3301      	adds	r3, #1
 800475e:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004760:	2400      	movs	r4, #0
 8004762:	e000      	b.n	8004766 <xTaskIncrementTick+0xea>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 8004764:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <xTaskIncrementTick+0x120>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	b103      	cbz	r3, 800476e <xTaskIncrementTick+0xf2>
		{
			xSwitchRequired = pdTRUE;
 800476c:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 800476e:	4620      	mov	r0, r4
 8004770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004772:	bf00      	nop
 8004774:	20000688 	.word	0x20000688
 8004778:	200006b0 	.word	0x200006b0
 800477c:	20000204 	.word	0x20000204
 8004780:	20000220 	.word	0x20000220
 8004784:	200006ac 	.word	0x200006ac
 8004788:	200006b4 	.word	0x200006b4
 800478c:	200006f8 	.word	0x200006f8
 8004790:	20000228 	.word	0x20000228
 8004794:	20000694 	.word	0x20000694
 8004798:	20000224 	.word	0x20000224
 800479c:	200006fc 	.word	0x200006fc

080047a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047a0:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047a2:	4b34      	ldr	r3, [pc, #208]	; (8004874 <xTaskResumeAll+0xd4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	b943      	cbnz	r3, 80047ba <xTaskResumeAll+0x1a>
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	e7fe      	b.n	80047b8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ba:	f000 fea3 	bl	8005504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047be:	4b2d      	ldr	r3, [pc, #180]	; (8004874 <xTaskResumeAll+0xd4>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	3a01      	subs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d14b      	bne.n	8004864 <xTaskResumeAll+0xc4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047cc:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <xTaskResumeAll+0xd8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	bb2b      	cbnz	r3, 800481e <xTaskResumeAll+0x7e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 80047d2:	2400      	movs	r4, #0
 80047d4:	e049      	b.n	800486a <xTaskResumeAll+0xca>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <xTaskResumeAll+0xdc>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047dc:	f104 0018 	add.w	r0, r4, #24
 80047e0:	f7ff f988 	bl	8003af4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e4:	1d25      	adds	r5, r4, #4
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7ff f984 	bl	8003af4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047ee:	4a24      	ldr	r2, [pc, #144]	; (8004880 <xTaskResumeAll+0xe0>)
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <xTaskResumeAll+0x5a>
 80047f6:	4a22      	ldr	r2, [pc, #136]	; (8004880 <xTaskResumeAll+0xe0>)
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047fe:	009a      	lsls	r2, r3, #2
 8004800:	4629      	mov	r1, r5
 8004802:	4820      	ldr	r0, [pc, #128]	; (8004884 <xTaskResumeAll+0xe4>)
 8004804:	4410      	add	r0, r2
 8004806:	f7ff f94f 	bl	8003aa8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800480a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800480c:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <xTaskResumeAll+0xe8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	429a      	cmp	r2, r3
 8004814:	d304      	bcc.n	8004820 <xTaskResumeAll+0x80>
					{
						xYieldPending = pdTRUE;
 8004816:	2201      	movs	r2, #1
 8004818:	4b1c      	ldr	r3, [pc, #112]	; (800488c <xTaskResumeAll+0xec>)
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e000      	b.n	8004820 <xTaskResumeAll+0x80>
 800481e:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004820:	4b16      	ldr	r3, [pc, #88]	; (800487c <xTaskResumeAll+0xdc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1d6      	bne.n	80047d6 <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004828:	b10c      	cbz	r4, 800482e <xTaskResumeAll+0x8e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800482a:	f7ff fcdf 	bl	80041ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800482e:	4b18      	ldr	r3, [pc, #96]	; (8004890 <xTaskResumeAll+0xf0>)
 8004830:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004832:	b154      	cbz	r4, 800484a <xTaskResumeAll+0xaa>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004834:	f7ff ff22 	bl	800467c <xTaskIncrementTick>
 8004838:	b110      	cbz	r0, 8004840 <xTaskResumeAll+0xa0>
							{
								xYieldPending = pdTRUE;
 800483a:	2201      	movs	r2, #1
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <xTaskResumeAll+0xec>)
 800483e:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004840:	3c01      	subs	r4, #1
 8004842:	d1f7      	bne.n	8004834 <xTaskResumeAll+0x94>

						uxPendedTicks = 0;
 8004844:	2200      	movs	r2, #0
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <xTaskResumeAll+0xf0>)
 8004848:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <xTaskResumeAll+0xec>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b15b      	cbz	r3, 8004868 <xTaskResumeAll+0xc8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <xTaskResumeAll+0xf4>)
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004860:	2401      	movs	r4, #1
 8004862:	e002      	b.n	800486a <xTaskResumeAll+0xca>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8004864:	2400      	movs	r4, #0
 8004866:	e000      	b.n	800486a <xTaskResumeAll+0xca>
 8004868:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800486a:	f000 fe6d 	bl	8005548 <vPortExitCritical>

	return xAlreadyYielded;
}
 800486e:	4620      	mov	r0, r4
 8004870:	bd38      	pop	{r3, r4, r5, pc}
 8004872:	bf00      	nop
 8004874:	20000688 	.word	0x20000688
 8004878:	20000690 	.word	0x20000690
 800487c:	20000698 	.word	0x20000698
 8004880:	200006f8 	.word	0x200006f8
 8004884:	20000228 	.word	0x20000228
 8004888:	20000694 	.word	0x20000694
 800488c:	200006fc 	.word	0x200006fc
 8004890:	20000224 	.word	0x20000224
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004898:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800489a:	b1a8      	cbz	r0, 80048c8 <vTaskDelay+0x30>
 800489c:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <vTaskDelay+0x48>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b143      	cbz	r3, 80048b6 <vTaskDelay+0x1e>
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	e7fe      	b.n	80048b4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80048b6:	f7ff fed3 	bl	8004660 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048ba:	2100      	movs	r1, #0
 80048bc:	4620      	mov	r0, r4
 80048be:	f7ff fdd3 	bl	8004468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048c2:	f7ff ff6d 	bl	80047a0 <xTaskResumeAll>
 80048c6:	e000      	b.n	80048ca <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
 80048c8:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048ca:	b938      	cbnz	r0, 80048dc <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 80048cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <vTaskDelay+0x4c>)
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	bf00      	nop
 80048e0:	20000688 	.word	0x20000688
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048e8:	4b20      	ldr	r3, [pc, #128]	; (800496c <vTaskSwitchContext+0x84>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	b11b      	cbz	r3, 80048f6 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048ee:	2201      	movs	r2, #1
 80048f0:	4b1f      	ldr	r3, [pc, #124]	; (8004970 <vTaskSwitchContext+0x88>)
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
 80048f6:	2200      	movs	r2, #0
 80048f8:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <vTaskSwitchContext+0x88>)
 80048fa:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <vTaskSwitchContext+0x8c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	e00a      	b.n	8004918 <vTaskSwitchContext+0x30>
 8004902:	b943      	cbnz	r3, 8004916 <vTaskSwitchContext+0x2e>
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	e7fe      	b.n	8004914 <vTaskSwitchContext+0x2c>
 8004916:	3b01      	subs	r3, #1
 8004918:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800491c:	008a      	lsls	r2, r1, #2
 800491e:	4916      	ldr	r1, [pc, #88]	; (8004978 <vTaskSwitchContext+0x90>)
 8004920:	588a      	ldr	r2, [r1, r2]
 8004922:	2a00      	cmp	r2, #0
 8004924:	d0ed      	beq.n	8004902 <vTaskSwitchContext+0x1a>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004926:	b430      	push	{r4, r5}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004928:	460d      	mov	r5, r1
 800492a:	0099      	lsls	r1, r3, #2
 800492c:	18ca      	adds	r2, r1, r3
 800492e:	0090      	lsls	r0, r2, #2
 8004930:	4428      	add	r0, r5
 8004932:	6842      	ldr	r2, [r0, #4]
 8004934:	6854      	ldr	r4, [r2, #4]
 8004936:	6044      	str	r4, [r0, #4]
 8004938:	4419      	add	r1, r3
 800493a:	008a      	lsls	r2, r1, #2
 800493c:	3208      	adds	r2, #8
 800493e:	442a      	add	r2, r5
 8004940:	4294      	cmp	r4, r2
 8004942:	d105      	bne.n	8004950 <vTaskSwitchContext+0x68>
 8004944:	6860      	ldr	r0, [r4, #4]
 8004946:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800494a:	008a      	lsls	r2, r1, #2
 800494c:	442a      	add	r2, r5
 800494e:	6050      	str	r0, [r2, #4]
 8004950:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004954:	008a      	lsls	r2, r1, #2
 8004956:	4908      	ldr	r1, [pc, #32]	; (8004978 <vTaskSwitchContext+0x90>)
 8004958:	440a      	add	r2, r1
 800495a:	6852      	ldr	r2, [r2, #4]
 800495c:	68d1      	ldr	r1, [r2, #12]
 800495e:	4a07      	ldr	r2, [pc, #28]	; (800497c <vTaskSwitchContext+0x94>)
 8004960:	6011      	str	r1, [r2, #0]
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <vTaskSwitchContext+0x8c>)
 8004964:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004966:	bc30      	pop	{r4, r5}
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000688 	.word	0x20000688
 8004970:	200006fc 	.word	0x200006fc
 8004974:	200006f8 	.word	0x200006f8
 8004978:	20000228 	.word	0x20000228
 800497c:	20000694 	.word	0x20000694

08004980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
 8004980:	b940      	cbnz	r0, 8004994 <vTaskPlaceOnEventList+0x14>
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	e7fe      	b.n	8004992 <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004994:	b510      	push	{r4, lr}
 8004996:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <vTaskPlaceOnEventList+0x2c>)
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	3118      	adds	r1, #24
 800499e:	f7ff f88f 	bl	8003ac0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049a2:	2101      	movs	r1, #1
 80049a4:	4620      	mov	r0, r4
 80049a6:	f7ff fd5f 	bl	8004468 <prvAddCurrentTaskToDelayedList>
 80049aa:	bd10      	pop	{r4, pc}
 80049ac:	20000694 	.word	0x20000694

080049b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049b0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80049b2:	b940      	cbnz	r0, 80049c6 <vTaskPlaceOnEventListRestricted+0x16>
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	e7fe      	b.n	80049c4 <vTaskPlaceOnEventListRestricted+0x14>
 80049c6:	460c      	mov	r4, r1
 80049c8:	4615      	mov	r5, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049ca:	4a06      	ldr	r2, [pc, #24]	; (80049e4 <vTaskPlaceOnEventListRestricted+0x34>)
 80049cc:	6811      	ldr	r1, [r2, #0]
 80049ce:	3118      	adds	r1, #24
 80049d0:	f7ff f86a 	bl	8003aa8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049d4:	b10d      	cbz	r5, 80049da <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
 80049d6:	f04f 34ff 	mov.w	r4, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049da:	4629      	mov	r1, r5
 80049dc:	4620      	mov	r0, r4
 80049de:	f7ff fd43 	bl	8004468 <prvAddCurrentTaskToDelayedList>
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	20000694 	.word	0x20000694

080049e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049e8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80049ea:	68c3      	ldr	r3, [r0, #12]
 80049ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80049ee:	b944      	cbnz	r4, 8004a02 <xTaskRemoveFromEventList+0x1a>
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	e7fe      	b.n	8004a00 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a02:	f104 0518 	add.w	r5, r4, #24
 8004a06:	4628      	mov	r0, r5
 8004a08:	f7ff f874 	bl	8003af4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <xTaskRemoveFromEventList+0x74>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	b99b      	cbnz	r3, 8004a3a <xTaskRemoveFromEventList+0x52>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a12:	1d25      	adds	r5, r4, #4
 8004a14:	4628      	mov	r0, r5
 8004a16:	f7ff f86d 	bl	8003af4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a1c:	4a10      	ldr	r2, [pc, #64]	; (8004a60 <xTaskRemoveFromEventList+0x78>)
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d901      	bls.n	8004a28 <xTaskRemoveFromEventList+0x40>
 8004a24:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <xTaskRemoveFromEventList+0x78>)
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004a2c:	009a      	lsls	r2, r3, #2
 8004a2e:	4629      	mov	r1, r5
 8004a30:	480c      	ldr	r0, [pc, #48]	; (8004a64 <xTaskRemoveFromEventList+0x7c>)
 8004a32:	4410      	add	r0, r2
 8004a34:	f7ff f838 	bl	8003aa8 <vListInsertEnd>
 8004a38:	e003      	b.n	8004a42 <xTaskRemoveFromEventList+0x5a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	480a      	ldr	r0, [pc, #40]	; (8004a68 <xTaskRemoveFromEventList+0x80>)
 8004a3e:	f7ff f833 	bl	8003aa8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <xTaskRemoveFromEventList+0x84>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d903      	bls.n	8004a56 <xTaskRemoveFromEventList+0x6e>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a4e:	2001      	movs	r0, #1
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <xTaskRemoveFromEventList+0x88>)
 8004a52:	6018      	str	r0, [r3, #0]
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
 8004a56:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8004a58:	bd38      	pop	{r3, r4, r5, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000688 	.word	0x20000688
 8004a60:	200006f8 	.word	0x200006f8
 8004a64:	20000228 	.word	0x20000228
 8004a68:	20000698 	.word	0x20000698
 8004a6c:	20000694 	.word	0x20000694
 8004a70:	200006fc 	.word	0x200006fc

08004a74 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <vTaskInternalSetTimeOutState+0x10>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a7a:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <vTaskInternalSetTimeOutState+0x14>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6043      	str	r3, [r0, #4]
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	200006ac 	.word	0x200006ac
 8004a88:	200006b0 	.word	0x200006b0

08004a8c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a8e:	b940      	cbnz	r0, 8004aa2 <xTaskCheckForTimeOut+0x16>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	e7fe      	b.n	8004aa0 <xTaskCheckForTimeOut+0x14>
 8004aa2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8004aa4:	b941      	cbnz	r1, 8004ab8 <xTaskCheckForTimeOut+0x2c>
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	e7fe      	b.n	8004ab6 <xTaskCheckForTimeOut+0x2a>
 8004ab8:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
 8004aba:	f000 fd23 	bl	8005504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004abe:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <xTaskCheckForTimeOut+0x78>)
 8004ac0:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ac2:	6869      	ldr	r1, [r5, #4]
 8004ac4:	1a42      	subs	r2, r0, r1
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d013      	beq.n	8004af6 <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ace:	682f      	ldr	r7, [r5, #0]
 8004ad0:	4e0d      	ldr	r6, [pc, #52]	; (8004b08 <xTaskCheckForTimeOut+0x7c>)
 8004ad2:	6836      	ldr	r6, [r6, #0]
 8004ad4:	42b7      	cmp	r7, r6
 8004ad6:	d001      	beq.n	8004adc <xTaskCheckForTimeOut+0x50>
 8004ad8:	4288      	cmp	r0, r1
 8004ada:	d20e      	bcs.n	8004afa <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d206      	bcs.n	8004aee <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f7ff ffc5 	bl	8004a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004aea:	2400      	movs	r4, #0
 8004aec:	e006      	b.n	8004afc <xTaskCheckForTimeOut+0x70>
		}
		else
		{
			*pxTicksToWait = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004af2:	2401      	movs	r4, #1
 8004af4:	e002      	b.n	8004afc <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004af6:	2400      	movs	r4, #0
 8004af8:	e000      	b.n	8004afc <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004afa:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8004afc:	f000 fd24 	bl	8005548 <vPortExitCritical>

	return xReturn;
}
 8004b00:	4620      	mov	r0, r4
 8004b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b04:	200006b0 	.word	0x200006b0
 8004b08:	200006ac 	.word	0x200006ac

08004b0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <vTaskMissedYield+0x8>)
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	4770      	bx	lr
 8004b14:	200006fc 	.word	0x200006fc

08004b18 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <xTaskGetSchedulerState+0x18>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	b123      	cbz	r3, 8004b28 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <xTaskGetSchedulerState+0x1c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	b91b      	cbnz	r3, 8004b2c <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b24:	2002      	movs	r0, #2
 8004b26:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b28:	2001      	movs	r0, #1
 8004b2a:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b2c:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
 8004b2e:	4770      	bx	lr
 8004b30:	20000208 	.word	0x20000208
 8004b34:	20000688 	.word	0x20000688

08004b38 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d03a      	beq.n	8004bb2 <xTaskPriorityDisinherit+0x7a>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b40:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <xTaskPriorityDisinherit+0x88>)
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	4290      	cmp	r0, r2
 8004b46:	d008      	beq.n	8004b5a <xTaskPriorityDisinherit+0x22>
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	e7fe      	b.n	8004b58 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b5a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004b5c:	b942      	cbnz	r2, 8004b70 <xTaskPriorityDisinherit+0x38>
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	e7fe      	b.n	8004b6e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8004b70:	3a01      	subs	r2, #1
 8004b72:	6502      	str	r2, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b74:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004b76:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004b78:	4288      	cmp	r0, r1
 8004b7a:	d01c      	beq.n	8004bb6 <xTaskPriorityDisinherit+0x7e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b7c:	b9ea      	cbnz	r2, 8004bba <xTaskPriorityDisinherit+0x82>
 8004b7e:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b80:	1d1d      	adds	r5, r3, #4
 8004b82:	4628      	mov	r0, r5
 8004b84:	f7fe ffb6 	bl	8003af4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b88:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b8a:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b90:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b92:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <xTaskPriorityDisinherit+0x8c>)
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <xTaskPriorityDisinherit+0x66>
 8004b9a:	4a0a      	ldr	r2, [pc, #40]	; (8004bc4 <xTaskPriorityDisinherit+0x8c>)
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ba2:	009a      	lsls	r2, r3, #2
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4808      	ldr	r0, [pc, #32]	; (8004bc8 <xTaskPriorityDisinherit+0x90>)
 8004ba8:	4410      	add	r0, r2
 8004baa:	f7fe ff7d 	bl	8003aa8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bae:	2001      	movs	r0, #1
 8004bb0:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8004bb2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8004bb4:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	bd38      	pop	{r3, r4, r5, pc}
 8004bba:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8004bbc:	bd38      	pop	{r3, r4, r5, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000694 	.word	0x20000694
 8004bc4:	200006f8 	.word	0x200006f8
 8004bc8:	20000228 	.word	0x20000228

08004bcc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4605      	mov	r5, r0
 8004bd0:	460c      	mov	r4, r1
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004bd2:	f000 fc97 	bl	8005504 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004bd6:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <ulTaskNotifyTake+0x6c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	b98b      	cbnz	r3, 8004c02 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004bde:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <ulTaskNotifyTake+0x6c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004be8:	b15c      	cbz	r4, 8004c02 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bea:	4611      	mov	r1, r2
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7ff fc3b 	bl	8004468 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <ulTaskNotifyTake+0x70>)
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004c02:	f000 fca1 	bl	8005548 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004c06:	f000 fc7d 	bl	8005504 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <ulTaskNotifyTake+0x6c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6d5c      	ldr	r4, [r3, #84]	; 0x54

			if( ulReturn != 0UL )
 8004c10:	b14c      	cbz	r4, 8004c26 <ulTaskNotifyTake+0x5a>
			{
				if( xClearCountOnExit != pdFALSE )
 8004c12:	b125      	cbz	r5, 8004c1e <ulTaskNotifyTake+0x52>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004c14:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <ulTaskNotifyTake+0x6c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
 8004c1c:	e003      	b.n	8004c26 <ulTaskNotifyTake+0x5a>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <ulTaskNotifyTake+0x6c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	1e62      	subs	r2, r4, #1
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <ulTaskNotifyTake+0x6c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8004c30:	f000 fc8a 	bl	8005548 <vPortExitCritical>

		return ulReturn;
	}
 8004c34:	4620      	mov	r0, r4
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	20000694 	.word	0x20000694
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c40:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <prvGetNextExpireTime+0x1c>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	6813      	ldr	r3, [r2, #0]
 8004c46:	fab3 f383 	clz	r3, r3
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c4e:	b913      	cbnz	r3, 8004c56 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c50:	68d3      	ldr	r3, [r2, #12]
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c56:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000700 	.word	0x20000700

08004c60 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c60:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c62:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c64:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c66:	4291      	cmp	r1, r2
 8004c68:	d80a      	bhi.n	8004c80 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c6a:	1ad2      	subs	r2, r2, r3
 8004c6c:	6983      	ldr	r3, [r0, #24]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d211      	bcs.n	8004c96 <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c72:	1d01      	adds	r1, r0, #4
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <prvInsertTimerInActiveList+0x40>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	f7fe ff22 	bl	8003ac0 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d201      	bcs.n	8004c88 <prvInsertTimerInActiveList+0x28>
 8004c84:	4299      	cmp	r1, r3
 8004c86:	d208      	bcs.n	8004c9a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c88:	1d01      	adds	r1, r0, #4
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <prvInsertTimerInActiveList+0x44>)
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	f7fe ff17 	bl	8003ac0 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8004c92:	2000      	movs	r0, #0
 8004c94:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c96:	2001      	movs	r0, #1
 8004c98:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c9a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8004c9c:	bd08      	pop	{r3, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000824 	.word	0x20000824
 8004ca4:	20000700 	.word	0x20000700

08004ca8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ca8:	b530      	push	{r4, r5, lr}
 8004caa:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cac:	f000 fc2a 	bl	8005504 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <prvCheckForValidListAndQueue+0x4c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	b9cb      	cbnz	r3, 8004cea <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cb6:	4d10      	ldr	r5, [pc, #64]	; (8004cf8 <prvCheckForValidListAndQueue+0x50>)
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f7fe fee5 	bl	8003a88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cbe:	4c0f      	ldr	r4, [pc, #60]	; (8004cfc <prvCheckForValidListAndQueue+0x54>)
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7fe fee1 	bl	8003a88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cc6:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <prvCheckForValidListAndQueue+0x58>)
 8004cc8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <prvCheckForValidListAndQueue+0x5c>)
 8004ccc:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <prvCheckForValidListAndQueue+0x60>)
 8004cd4:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <prvCheckForValidListAndQueue+0x64>)
 8004cd6:	2110      	movs	r1, #16
 8004cd8:	200a      	movs	r0, #10
 8004cda:	f7ff f811 	bl	8003d00 <xQueueGenericCreateStatic>
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <prvCheckForValidListAndQueue+0x4c>)
 8004ce0:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ce2:	b110      	cbz	r0, 8004cea <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ce4:	490a      	ldr	r1, [pc, #40]	; (8004d10 <prvCheckForValidListAndQueue+0x68>)
 8004ce6:	f7ff fa47 	bl	8004178 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cea:	f000 fc2d 	bl	8005548 <vPortExitCritical>
}
 8004cee:	b003      	add	sp, #12
 8004cf0:	bd30      	pop	{r4, r5, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000820 	.word	0x20000820
 8004cf8:	20000704 	.word	0x20000704
 8004cfc:	20000718 	.word	0x20000718
 8004d00:	20000700 	.word	0x20000700
 8004d04:	20000824 	.word	0x20000824
 8004d08:	200007d0 	.word	0x200007d0
 8004d0c:	20000730 	.word	0x20000730
 8004d10:	08008554 	.word	0x08008554

08004d14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d14:	b510      	push	{r4, lr}
 8004d16:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d18:	f7ff ffc6 	bl	8004ca8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d1c:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <xTimerCreateTimerTask+0x60>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	b1d3      	cbz	r3, 8004d58 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d22:	2400      	movs	r4, #0
 8004d24:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d26:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d28:	aa07      	add	r2, sp, #28
 8004d2a:	a906      	add	r1, sp, #24
 8004d2c:	a805      	add	r0, sp, #20
 8004d2e:	f000 fa57 	bl	80051e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d32:	9b05      	ldr	r3, [sp, #20]
 8004d34:	9302      	str	r3, [sp, #8]
 8004d36:	9b06      	ldr	r3, [sp, #24]
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	4623      	mov	r3, r4
 8004d40:	9a07      	ldr	r2, [sp, #28]
 8004d42:	490d      	ldr	r1, [pc, #52]	; (8004d78 <xTimerCreateTimerTask+0x64>)
 8004d44:	480d      	ldr	r0, [pc, #52]	; (8004d7c <xTimerCreateTimerTask+0x68>)
 8004d46:	f7ff fbcd 	bl	80044e4 <xTaskCreateStatic>
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <xTimerCreateTimerTask+0x6c>)
 8004d4c:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d4e:	b908      	cbnz	r0, 8004d54 <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8004d50:	4620      	mov	r0, r4
 8004d52:	e002      	b.n	8004d5a <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
 8004d54:	2001      	movs	r0, #1
 8004d56:	e000      	b.n	8004d5a <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8004d58:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d5a:	b940      	cbnz	r0, 8004d6e <xTimerCreateTimerTask+0x5a>
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	e7fe      	b.n	8004d6c <xTimerCreateTimerTask+0x58>
	return xReturn;
}
 8004d6e:	b008      	add	sp, #32
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	bf00      	nop
 8004d74:	20000820 	.word	0x20000820
 8004d78:	0800855c 	.word	0x0800855c
 8004d7c:	08005039 	.word	0x08005039
 8004d80:	20000828 	.word	0x20000828

08004d84 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d84:	b940      	cbnz	r0, 8004d98 <xTimerGenericCommand+0x14>
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	e7fe      	b.n	8004d96 <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d98:	b530      	push	{r4, r5, lr}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	4615      	mov	r5, r2
 8004d9e:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004da0:	4a12      	ldr	r2, [pc, #72]	; (8004dec <xTimerGenericCommand+0x68>)
 8004da2:	6810      	ldr	r0, [r2, #0]
 8004da4:	b1f0      	cbz	r0, 8004de4 <xTimerGenericCommand+0x60>
 8004da6:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004da8:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004daa:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004dac:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dae:	2905      	cmp	r1, #5
 8004db0:	dc13      	bgt.n	8004dda <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004db2:	f7ff feb1 	bl	8004b18 <xTaskGetSchedulerState>
 8004db6:	2802      	cmp	r0, #2
 8004db8:	d107      	bne.n	8004dca <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9a08      	ldr	r2, [sp, #32]
 8004dbe:	4669      	mov	r1, sp
 8004dc0:	480a      	ldr	r0, [pc, #40]	; (8004dec <xTimerGenericCommand+0x68>)
 8004dc2:	6800      	ldr	r0, [r0, #0]
 8004dc4:	f7fe fff2 	bl	8003dac <xQueueGenericSend>
 8004dc8:	e00d      	b.n	8004de6 <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dca:	2300      	movs	r3, #0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4669      	mov	r1, sp
 8004dd0:	4806      	ldr	r0, [pc, #24]	; (8004dec <xTimerGenericCommand+0x68>)
 8004dd2:	6800      	ldr	r0, [r0, #0]
 8004dd4:	f7fe ffea 	bl	8003dac <xQueueGenericSend>
 8004dd8:	e005      	b.n	8004de6 <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dda:	2300      	movs	r3, #0
 8004ddc:	4669      	mov	r1, sp
 8004dde:	f7ff f8ad 	bl	8003f3c <xQueueGenericSendFromISR>
 8004de2:	e000      	b.n	8004de6 <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 8004de4:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8004de6:	b005      	add	sp, #20
 8004de8:	bd30      	pop	{r4, r5, pc}
 8004dea:	bf00      	nop
 8004dec:	20000820 	.word	0x20000820

08004df0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004df4:	e029      	b.n	8004e4a <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dfa:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dfc:	1d25      	adds	r5, r4, #4
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f7fe fe78 	bl	8003af4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e06:	4620      	mov	r0, r4
 8004e08:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e0a:	69e3      	ldr	r3, [r4, #28]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d11c      	bne.n	8004e4a <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e10:	69a3      	ldr	r3, [r4, #24]
 8004e12:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8004e14:	429e      	cmp	r6, r3
 8004e16:	d207      	bcs.n	8004e28 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e18:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e1a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <prvSwitchTimerLists+0x74>)
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	f7fe fe4d 	bl	8003ac0 <vListInsert>
 8004e26:	e010      	b.n	8004e4a <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e28:	2100      	movs	r1, #0
 8004e2a:	9100      	str	r1, [sp, #0]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4632      	mov	r2, r6
 8004e30:	4620      	mov	r0, r4
 8004e32:	f7ff ffa7 	bl	8004d84 <xTimerGenericCommand>
				configASSERT( xResult );
 8004e36:	b940      	cbnz	r0, 8004e4a <prvSwitchTimerLists+0x5a>
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	e7fe      	b.n	8004e48 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <prvSwitchTimerLists+0x74>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	d1d0      	bne.n	8004df6 <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8004e54:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <prvSwitchTimerLists+0x78>)
 8004e56:	6810      	ldr	r0, [r2, #0]
 8004e58:	4902      	ldr	r1, [pc, #8]	; (8004e64 <prvSwitchTimerLists+0x74>)
 8004e5a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8004e5c:	6013      	str	r3, [r2, #0]
}
 8004e5e:	b002      	add	sp, #8
 8004e60:	bd70      	pop	{r4, r5, r6, pc}
 8004e62:	bf00      	nop
 8004e64:	20000700 	.word	0x20000700
 8004e68:	20000824 	.word	0x20000824

08004e6c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e70:	f7ff fbfe 	bl	8004670 <xTaskGetTickCount>
 8004e74:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <prvSampleTimeNow+0x28>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4298      	cmp	r0, r3
 8004e7c:	d204      	bcs.n	8004e88 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
 8004e7e:	f7ff ffb7 	bl	8004df0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	e001      	b.n	8004e8c <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
 8004e8c:	4b01      	ldr	r3, [pc, #4]	; (8004e94 <prvSampleTimeNow+0x28>)
 8004e8e:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
 8004e90:	4620      	mov	r0, r4
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	2000072c 	.word	0x2000072c

08004e98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <prvProcessExpiredTimer+0x58>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ea8:	1d20      	adds	r0, r4, #4
 8004eaa:	f7fe fe23 	bl	8003af4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004eae:	69e3      	ldr	r3, [r4, #28]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d118      	bne.n	8004ee6 <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004eb4:	69a1      	ldr	r1, [r4, #24]
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	4632      	mov	r2, r6
 8004eba:	4429      	add	r1, r5
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7ff fecf 	bl	8004c60 <prvInsertTimerInActiveList>
 8004ec2:	b180      	cbz	r0, 8004ee6 <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	9100      	str	r1, [sp, #0]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	462a      	mov	r2, r5
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f7ff ff59 	bl	8004d84 <xTimerGenericCommand>
			configASSERT( xResult );
 8004ed2:	b940      	cbnz	r0, 8004ee6 <prvProcessExpiredTimer+0x4e>
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	e7fe      	b.n	8004ee4 <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ee8:	4620      	mov	r0, r4
 8004eea:	4798      	blx	r3
}
 8004eec:	b002      	add	sp, #8
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	20000700 	.word	0x20000700

08004ef4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	4606      	mov	r6, r0
 8004efa:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004efc:	f7ff fbb0 	bl	8004660 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f00:	a801      	add	r0, sp, #4
 8004f02:	f7ff ffb3 	bl	8004e6c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8004f06:	9b01      	ldr	r3, [sp, #4]
 8004f08:	bb1b      	cbnz	r3, 8004f52 <prvProcessTimerOrBlockTask+0x5e>
 8004f0a:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f0c:	b944      	cbnz	r4, 8004f20 <prvProcessTimerOrBlockTask+0x2c>
 8004f0e:	42b0      	cmp	r0, r6
 8004f10:	d306      	bcc.n	8004f20 <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
 8004f12:	f7ff fc45 	bl	80047a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f16:	4629      	mov	r1, r5
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff ffbd 	bl	8004e98 <prvProcessExpiredTimer>
 8004f1e:	e01a      	b.n	8004f56 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8004f20:	b12c      	cbz	r4, 8004f2e <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f22:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <prvProcessTimerOrBlockTask+0x68>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681c      	ldr	r4, [r3, #0]
 8004f28:	fab4 f484 	clz	r4, r4
 8004f2c:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f2e:	4622      	mov	r2, r4
 8004f30:	1b71      	subs	r1, r6, r5
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <prvProcessTimerOrBlockTask+0x6c>)
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	f7ff f933 	bl	80041a0 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8004f3a:	f7ff fc31 	bl	80047a0 <xTaskResumeAll>
 8004f3e:	b950      	cbnz	r0, 8004f56 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8004f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f44:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <prvProcessTimerOrBlockTask+0x70>)
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	e001      	b.n	8004f56 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8004f52:	f7ff fc25 	bl	80047a0 <xTaskResumeAll>
		}
	}
}
 8004f56:	b002      	add	sp, #8
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000824 	.word	0x20000824
 8004f60:	20000820 	.word	0x20000820
 8004f64:	e000ed04 	.word	0xe000ed04

08004f68 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f68:	b530      	push	{r4, r5, lr}
 8004f6a:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f6c:	e057      	b.n	800501e <prvProcessReceivedCommands+0xb6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da03      	bge.n	8004f7c <prvProcessReceivedCommands+0x14>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f74:	9907      	ldr	r1, [sp, #28]
 8004f76:	9806      	ldr	r0, [sp, #24]
 8004f78:	9b05      	ldr	r3, [sp, #20]
 8004f7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f7c:	9b04      	ldr	r3, [sp, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	db4d      	blt.n	800501e <prvProcessReceivedCommands+0xb6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f82:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f84:	6963      	ldr	r3, [r4, #20]
 8004f86:	b113      	cbz	r3, 8004f8e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f88:	1d20      	adds	r0, r4, #4
 8004f8a:	f7fe fdb3 	bl	8003af4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f8e:	a803      	add	r0, sp, #12
 8004f90:	f7ff ff6c 	bl	8004e6c <prvSampleTimeNow>

			switch( xMessage.xMessageID )
 8004f94:	9b04      	ldr	r3, [sp, #16]
 8004f96:	2b09      	cmp	r3, #9
 8004f98:	d841      	bhi.n	800501e <prvProcessReceivedCommands+0xb6>
 8004f9a:	e8df f003 	tbb	[pc, r3]
 8004f9e:	0505      	.short	0x0505
 8004fa0:	3a274005 	.word	0x3a274005
 8004fa4:	27400505 	.word	0x27400505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fa8:	9905      	ldr	r1, [sp, #20]
 8004faa:	69a5      	ldr	r5, [r4, #24]
 8004fac:	460b      	mov	r3, r1
 8004fae:	4602      	mov	r2, r0
 8004fb0:	4429      	add	r1, r5
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f7ff fe54 	bl	8004c60 <prvInsertTimerInActiveList>
 8004fb8:	b388      	cbz	r0, 800501e <prvProcessReceivedCommands+0xb6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fc0:	69e3      	ldr	r3, [r4, #28]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d12b      	bne.n	800501e <prvProcessReceivedCommands+0xb6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fc6:	69a2      	ldr	r2, [r4, #24]
 8004fc8:	2100      	movs	r1, #0
 8004fca:	9100      	str	r1, [sp, #0]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	9805      	ldr	r0, [sp, #20]
 8004fd0:	4402      	add	r2, r0
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f7ff fed6 	bl	8004d84 <xTimerGenericCommand>
							configASSERT( xResult );
 8004fd8:	bb08      	cbnz	r0, 800501e <prvProcessReceivedCommands+0xb6>
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	e7fe      	b.n	8004fea <prvProcessReceivedCommands+0x82>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fec:	9905      	ldr	r1, [sp, #20]
 8004fee:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ff0:	b941      	cbnz	r1, 8005004 <prvProcessReceivedCommands+0x9c>
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	e7fe      	b.n	8005002 <prvProcessReceivedCommands+0x9a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005004:	4603      	mov	r3, r0
 8005006:	4602      	mov	r2, r0
 8005008:	4401      	add	r1, r0
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff fe28 	bl	8004c60 <prvInsertTimerInActiveList>
					break;
 8005010:	e005      	b.n	800501e <prvProcessReceivedCommands+0xb6>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005012:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005016:	b913      	cbnz	r3, 800501e <prvProcessReceivedCommands+0xb6>
						{
							vPortFree( pxTimer );
 8005018:	4620      	mov	r0, r4
 800501a:	f000 f9cd 	bl	80053b8 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800501e:	2200      	movs	r2, #0
 8005020:	a904      	add	r1, sp, #16
 8005022:	4b04      	ldr	r3, [pc, #16]	; (8005034 <prvProcessReceivedCommands+0xcc>)
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	f7fe fffb 	bl	8004020 <xQueueReceive>
 800502a:	2800      	cmp	r0, #0
 800502c:	d19f      	bne.n	8004f6e <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800502e:	b009      	add	sp, #36	; 0x24
 8005030:	bd30      	pop	{r4, r5, pc}
 8005032:	bf00      	nop
 8005034:	20000820 	.word	0x20000820

08005038 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005038:	b500      	push	{lr}
 800503a:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800503c:	a801      	add	r0, sp, #4
 800503e:	f7ff fdff 	bl	8004c40 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005042:	9901      	ldr	r1, [sp, #4]
 8005044:	f7ff ff56 	bl	8004ef4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005048:	f7ff ff8e 	bl	8004f68 <prvProcessReceivedCommands>
 800504c:	e7f6      	b.n	800503c <prvTimerTask+0x4>
 800504e:	bf00      	nop

08005050 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005050:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005054:	b97b      	cbnz	r3, 8005076 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005056:	f3ef 8310 	mrs	r3, PRIMASK
 800505a:	b97b      	cbnz	r3, 800507c <osKernelInitialize+0x2c>
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <osKernelInitialize+0x40>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d102      	bne.n	800506a <osKernelInitialize+0x1a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005064:	f3ef 8211 	mrs	r2, BASEPRI
 8005068:	b95a      	cbnz	r2, 8005082 <osKernelInitialize+0x32>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800506a:	b96b      	cbnz	r3, 8005088 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800506c:	2201      	movs	r2, #1
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <osKernelInitialize+0x40>)
 8005070:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005072:	2000      	movs	r0, #0
 8005074:	4770      	bx	lr

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 8005076:	f06f 0005 	mvn.w	r0, #5
 800507a:	4770      	bx	lr
 800507c:	f06f 0005 	mvn.w	r0, #5
 8005080:	4770      	bx	lr
 8005082:	f06f 0005 	mvn.w	r0, #5
 8005086:	4770      	bx	lr
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000e88 	.word	0x20000e88

08005094 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005094:	b508      	push	{r3, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005096:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800509a:	b993      	cbnz	r3, 80050c2 <osKernelStart+0x2e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509c:	f3ef 8310 	mrs	r3, PRIMASK
 80050a0:	b993      	cbnz	r3, 80050c8 <osKernelStart+0x34>
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <osKernelStart+0x48>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d102      	bne.n	80050b0 <osKernelStart+0x1c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050aa:	f3ef 8211 	mrs	r2, BASEPRI
 80050ae:	b972      	cbnz	r2, 80050ce <osKernelStart+0x3a>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d10f      	bne.n	80050d4 <osKernelStart+0x40>
      KernelState = osKernelRunning;
 80050b4:	2202      	movs	r2, #2
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <osKernelStart+0x48>)
 80050b8:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80050ba:	f7ff fa85 	bl	80045c8 <vTaskStartScheduler>
      stat = osOK;
 80050be:	2000      	movs	r0, #0
 80050c0:	bd08      	pop	{r3, pc}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
    stat = osErrorISR;
 80050c2:	f06f 0005 	mvn.w	r0, #5
 80050c6:	bd08      	pop	{r3, pc}
 80050c8:	f06f 0005 	mvn.w	r0, #5
 80050cc:	bd08      	pop	{r3, pc}
 80050ce:	f06f 0005 	mvn.w	r0, #5
 80050d2:	bd08      	pop	{r3, pc}
    if (KernelState == osKernelReady) {
      KernelState = osKernelRunning;
      vTaskStartScheduler();
      stat = osOK;
    } else {
      stat = osError;
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80050d8:	bd08      	pop	{r3, pc}
 80050da:	bf00      	nop
 80050dc:	20000e88 	.word	0x20000e88

080050e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050e4:	2400      	movs	r4, #0
 80050e6:	9404      	str	r4, [sp, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e8:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80050ec:	2c00      	cmp	r4, #0
 80050ee:	d161      	bne.n	80051b4 <osThreadNew+0xd4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f0:	f3ef 8310 	mrs	r3, PRIMASK
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d15d      	bne.n	80051b4 <osThreadNew+0xd4>
 80050f8:	4b32      	ldr	r3, [pc, #200]	; (80051c4 <osThreadNew+0xe4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d103      	bne.n	8005108 <osThreadNew+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005100:	f3ef 8311 	mrs	r3, BASEPRI
 8005104:	2b00      	cmp	r3, #0
 8005106:	d155      	bne.n	80051b4 <osThreadNew+0xd4>
 8005108:	2800      	cmp	r0, #0
 800510a:	d053      	beq.n	80051b4 <osThreadNew+0xd4>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800510c:	2300      	movs	r3, #0
 800510e:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005112:	b322      	cbz	r2, 800515e <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8005114:	6816      	ldr	r6, [r2, #0]
 8005116:	b90e      	cbnz	r6, 800511c <osThreadNew+0x3c>
  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8005118:	f10d 0617 	add.w	r6, sp, #23

    if (attr != NULL) {
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800511c:	6994      	ldr	r4, [r2, #24]
 800511e:	b904      	cbnz	r4, 8005122 <osThreadNew+0x42>

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;
 8005120:	2418      	movs	r4, #24
      }
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005122:	1e63      	subs	r3, r4, #1
 8005124:	2b37      	cmp	r3, #55	; 0x37
 8005126:	d847      	bhi.n	80051b8 <osThreadNew+0xd8>
 8005128:	6853      	ldr	r3, [r2, #4]
 800512a:	f013 0f01 	tst.w	r3, #1
 800512e:	d145      	bne.n	80051bc <osThreadNew+0xdc>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005130:	6953      	ldr	r3, [r2, #20]
 8005132:	b113      	cbz	r3, 800513a <osThreadNew+0x5a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005134:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8005138:	e001      	b.n	800513e <osThreadNew+0x5e>
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 800513a:	f04f 0e80 	mov.w	lr, #128	; 0x80
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800513e:	6895      	ldr	r5, [r2, #8]
 8005140:	b12d      	cbz	r5, 800514e <osThreadNew+0x6e>
 8005142:	68d7      	ldr	r7, [r2, #12]
 8005144:	2f5b      	cmp	r7, #91	; 0x5b
 8005146:	d902      	bls.n	800514e <osThreadNew+0x6e>
 8005148:	6917      	ldr	r7, [r2, #16]
 800514a:	b107      	cbz	r7, 800514e <osThreadNew+0x6e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800514c:	b973      	cbnz	r3, 800516c <osThreadNew+0x8c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800514e:	b97d      	cbnz	r5, 8005170 <osThreadNew+0x90>
 8005150:	68d3      	ldr	r3, [r2, #12]
 8005152:	b983      	cbnz	r3, 8005176 <osThreadNew+0x96>
 8005154:	6913      	ldr	r3, [r2, #16]
 8005156:	b18b      	cbz	r3, 800517c <osThreadNew+0x9c>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
    mem   = -1;
 8005158:	f04f 35ff 	mov.w	r5, #4294967295
 800515c:	e00f      	b.n	800517e <osThreadNew+0x9e>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800515e:	2500      	movs	r5, #0

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;
 8005160:	2418      	movs	r4, #24
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 8005162:	f04f 0e80 	mov.w	lr, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8005166:	f10d 0617 	add.w	r6, sp, #23
 800516a:	e008      	b.n	800517e <osThreadNew+0x9e>
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
 800516c:	2501      	movs	r5, #1
 800516e:	e006      	b.n	800517e <osThreadNew+0x9e>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
    mem   = -1;
 8005170:	f04f 35ff 	mov.w	r5, #4294967295
 8005174:	e003      	b.n	800517e <osThreadNew+0x9e>
 8005176:	f04f 35ff 	mov.w	r5, #4294967295
 800517a:	e000      	b.n	800517e <osThreadNew+0x9e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
          mem = 0;
 800517c:	2500      	movs	r5, #0
 800517e:	460b      	mov	r3, r1
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8005180:	2d01      	cmp	r5, #1
 8005182:	d10a      	bne.n	800519a <osThreadNew+0xba>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005184:	6911      	ldr	r1, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005186:	6892      	ldr	r2, [r2, #8]
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005188:	9202      	str	r2, [sp, #8]
 800518a:	9101      	str	r1, [sp, #4]
 800518c:	9400      	str	r4, [sp, #0]
 800518e:	4672      	mov	r2, lr
 8005190:	4631      	mov	r1, r6
 8005192:	f7ff f9a7 	bl	80044e4 <xTaskCreateStatic>
 8005196:	9004      	str	r0, [sp, #16]
 8005198:	e00c      	b.n	80051b4 <osThreadNew+0xd4>
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800519a:	b95d      	cbnz	r5, 80051b4 <osThreadNew+0xd4>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800519c:	aa04      	add	r2, sp, #16
 800519e:	9201      	str	r2, [sp, #4]
 80051a0:	9400      	str	r4, [sp, #0]
 80051a2:	fa1f f28e 	uxth.w	r2, lr
 80051a6:	4631      	mov	r1, r6
 80051a8:	f7ff f9da 	bl	8004560 <xTaskCreate>
 80051ac:	2801      	cmp	r0, #1
 80051ae:	d001      	beq.n	80051b4 <osThreadNew+0xd4>
          hTask = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	9304      	str	r3, [sp, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051b4:	9804      	ldr	r0, [sp, #16]
 80051b6:	e002      	b.n	80051be <osThreadNew+0xde>
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
        return (NULL);
 80051b8:	2000      	movs	r0, #0
 80051ba:	e000      	b.n	80051be <osThreadNew+0xde>
 80051bc:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 80051be:	b007      	add	sp, #28
 80051c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000e88 	.word	0x20000e88

080051c8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <vApplicationGetIdleTaskMemory+0x10>)
 80051ca:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <vApplicationGetIdleTaskMemory+0x14>)
 80051ce:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051d0:	2380      	movs	r3, #128	; 0x80
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000a2c 	.word	0x20000a2c
 80051dc:	2000082c 	.word	0x2000082c

080051e0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051e0:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <vApplicationGetTimerTaskMemory+0x10>)
 80051e2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051e4:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <vApplicationGetTimerTaskMemory+0x14>)
 80051e6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	4770      	bx	lr
 80051f0:	20000e8c 	.word	0x20000e8c
 80051f4:	20000a88 	.word	0x20000a88

080051f8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051f8:	4a12      	ldr	r2, [pc, #72]	; (8005244 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051fa:	f012 0f07 	tst.w	r2, #7
 80051fe:	d007      	beq.n	8005210 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005200:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005202:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005206:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800520a:	4413      	add	r3, r2
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800520c:	460a      	mov	r2, r1
 800520e:	e001      	b.n	8005214 <prvHeapInit+0x1c>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005210:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005214:	480c      	ldr	r0, [pc, #48]	; (8005248 <prvHeapInit+0x50>)
 8005216:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005218:	2100      	movs	r1, #0
 800521a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800521c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800521e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005220:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005224:	4809      	ldr	r0, [pc, #36]	; (800524c <prvHeapInit+0x54>)
 8005226:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005228:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800522a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800522c:	1a99      	subs	r1, r3, r2
 800522e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005230:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005232:	4b07      	ldr	r3, [pc, #28]	; (8005250 <prvHeapInit+0x58>)
 8005234:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <prvHeapInit+0x5c>)
 8005238:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800523a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800523e:	4b06      	ldr	r3, [pc, #24]	; (8005258 <prvHeapInit+0x60>)
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	4770      	bx	lr
 8005244:	20000ef8 	.word	0x20000ef8
 8005248:	20000ef0 	.word	0x20000ef0
 800524c:	20000eec 	.word	0x20000eec
 8005250:	20002efc 	.word	0x20002efc
 8005254:	20000ee8 	.word	0x20000ee8
 8005258:	20002ef8 	.word	0x20002ef8

0800525c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800525c:	4b13      	ldr	r3, [pc, #76]	; (80052ac <prvInsertBlockIntoFreeList+0x50>)
 800525e:	e000      	b.n	8005262 <prvInsertBlockIntoFreeList+0x6>
 8005260:	4613      	mov	r3, r2
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4282      	cmp	r2, r0
 8005266:	d3fb      	bcc.n	8005260 <prvInsertBlockIntoFreeList+0x4>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005268:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800526a:	685c      	ldr	r4, [r3, #4]
 800526c:	1919      	adds	r1, r3, r4
 800526e:	4288      	cmp	r0, r1
 8005270:	d103      	bne.n	800527a <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005272:	6841      	ldr	r1, [r0, #4]
 8005274:	4421      	add	r1, r4
 8005276:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005278:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800527a:	6844      	ldr	r4, [r0, #4]
 800527c:	1901      	adds	r1, r0, r4
 800527e:	428a      	cmp	r2, r1
 8005280:	d10c      	bne.n	800529c <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005282:	490b      	ldr	r1, [pc, #44]	; (80052b0 <prvInsertBlockIntoFreeList+0x54>)
 8005284:	6809      	ldr	r1, [r1, #0]
 8005286:	428a      	cmp	r2, r1
 8005288:	d006      	beq.n	8005298 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800528a:	6852      	ldr	r2, [r2, #4]
 800528c:	4422      	add	r2, r4
 800528e:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	6002      	str	r2, [r0, #0]
 8005296:	e002      	b.n	800529e <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005298:	6001      	str	r1, [r0, #0]
 800529a:	e000      	b.n	800529e <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800529c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800529e:	4298      	cmp	r0, r3
 80052a0:	d000      	beq.n	80052a4 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052a2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000ef0 	.word	0x20000ef0
 80052b0:	20000eec 	.word	0x20000eec

080052b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80052b8:	f7ff f9d2 	bl	8004660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052bc:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <pvPortMalloc+0xf0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	b90b      	cbnz	r3, 80052c6 <pvPortMalloc+0x12>
		{
			prvHeapInit();
 80052c2:	f7ff ff99 	bl	80051f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052c6:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <pvPortMalloc+0xf4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	421c      	tst	r4, r3
 80052cc:	d153      	bne.n	8005376 <pvPortMalloc+0xc2>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052ce:	b194      	cbz	r4, 80052f6 <pvPortMalloc+0x42>
			{
				xWantedSize += xHeapStructSize;
 80052d0:	3408      	adds	r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052d2:	f014 0f07 	tst.w	r4, #7
 80052d6:	d00e      	beq.n	80052f6 <pvPortMalloc+0x42>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052d8:	f024 0407 	bic.w	r4, r4, #7
 80052dc:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052de:	f004 0307 	and.w	r3, r4, #7
 80052e2:	b143      	cbz	r3, 80052f6 <pvPortMalloc+0x42>
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	e7fe      	b.n	80052f4 <pvPortMalloc+0x40>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052f6:	2c00      	cmp	r4, #0
 80052f8:	d03f      	beq.n	800537a <pvPortMalloc+0xc6>
 80052fa:	4b2c      	ldr	r3, [pc, #176]	; (80053ac <pvPortMalloc+0xf8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	429c      	cmp	r4, r3
 8005300:	d83d      	bhi.n	800537e <pvPortMalloc+0xca>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8005302:	4b2b      	ldr	r3, [pc, #172]	; (80053b0 <pvPortMalloc+0xfc>)
 8005304:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005306:	e001      	b.n	800530c <pvPortMalloc+0x58>
				{
					pxPreviousBlock = pxBlock;
 8005308:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800530a:	4615      	mov	r5, r2
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800530c:	686a      	ldr	r2, [r5, #4]
 800530e:	4294      	cmp	r4, r2
 8005310:	d902      	bls.n	8005318 <pvPortMalloc+0x64>
 8005312:	682a      	ldr	r2, [r5, #0]
 8005314:	2a00      	cmp	r2, #0
 8005316:	d1f7      	bne.n	8005308 <pvPortMalloc+0x54>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005318:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <pvPortMalloc+0xf0>)
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	4295      	cmp	r5, r2
 800531e:	d030      	beq.n	8005382 <pvPortMalloc+0xce>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005320:	681e      	ldr	r6, [r3, #0]
 8005322:	3608      	adds	r6, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005324:	682a      	ldr	r2, [r5, #0]
 8005326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005328:	686b      	ldr	r3, [r5, #4]
 800532a:	1b1b      	subs	r3, r3, r4
 800532c:	2b10      	cmp	r3, #16
 800532e:	d910      	bls.n	8005352 <pvPortMalloc+0x9e>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005330:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005332:	f010 0f07 	tst.w	r0, #7
 8005336:	d008      	beq.n	800534a <pvPortMalloc+0x96>
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	e7fe      	b.n	8005348 <pvPortMalloc+0x94>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800534a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800534c:	606c      	str	r4, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800534e:	f7ff ff85 	bl	800525c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005352:	686a      	ldr	r2, [r5, #4]
 8005354:	4915      	ldr	r1, [pc, #84]	; (80053ac <pvPortMalloc+0xf8>)
 8005356:	680b      	ldr	r3, [r1, #0]
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800535c:	4915      	ldr	r1, [pc, #84]	; (80053b4 <pvPortMalloc+0x100>)
 800535e:	6809      	ldr	r1, [r1, #0]
 8005360:	428b      	cmp	r3, r1
 8005362:	d201      	bcs.n	8005368 <pvPortMalloc+0xb4>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005364:	4913      	ldr	r1, [pc, #76]	; (80053b4 <pvPortMalloc+0x100>)
 8005366:	600b      	str	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <pvPortMalloc+0xf4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	431a      	orrs	r2, r3
 800536e:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005370:	2300      	movs	r3, #0
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	e006      	b.n	8005384 <pvPortMalloc+0xd0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005376:	2600      	movs	r6, #0
 8005378:	e004      	b.n	8005384 <pvPortMalloc+0xd0>
 800537a:	2600      	movs	r6, #0
 800537c:	e002      	b.n	8005384 <pvPortMalloc+0xd0>
 800537e:	2600      	movs	r6, #0
 8005380:	e000      	b.n	8005384 <pvPortMalloc+0xd0>
 8005382:	2600      	movs	r6, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005384:	f7ff fa0c 	bl	80047a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005388:	f016 0f07 	tst.w	r6, #7
 800538c:	d008      	beq.n	80053a0 <pvPortMalloc+0xec>
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	e7fe      	b.n	800539e <pvPortMalloc+0xea>
	return pvReturn;
}
 80053a0:	4630      	mov	r0, r6
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
 80053a4:	20000eec 	.word	0x20000eec
 80053a8:	20002ef8 	.word	0x20002ef8
 80053ac:	20000ee8 	.word	0x20000ee8
 80053b0:	20000ef0 	.word	0x20000ef0
 80053b4:	20002efc 	.word	0x20002efc

080053b8 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80053b8:	b3a0      	cbz	r0, 8005424 <vPortFree+0x6c>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053ba:	b538      	push	{r3, r4, r5, lr}
 80053bc:	4603      	mov	r3, r0

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053be:	f1a0 0508 	sub.w	r5, r0, #8

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80053c6:	4918      	ldr	r1, [pc, #96]	; (8005428 <vPortFree+0x70>)
 80053c8:	6809      	ldr	r1, [r1, #0]
 80053ca:	ea12 0401 	ands.w	r4, r2, r1
 80053ce:	d108      	bne.n	80053e2 <vPortFree+0x2a>
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	e7fe      	b.n	80053e0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053e2:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80053e6:	b140      	cbz	r0, 80053fa <vPortFree+0x42>
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	e7fe      	b.n	80053f8 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053fa:	b194      	cbz	r4, 8005422 <vPortFree+0x6a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053fc:	b988      	cbnz	r0, 8005422 <vPortFree+0x6a>
 80053fe:	461c      	mov	r4, r3
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005400:	ea22 0201 	bic.w	r2, r2, r1
 8005404:	f843 2c04 	str.w	r2, [r3, #-4]

				vTaskSuspendAll();
 8005408:	f7ff f92a 	bl	8004660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800540c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005410:	4a06      	ldr	r2, [pc, #24]	; (800542c <vPortFree+0x74>)
 8005412:	6811      	ldr	r1, [r2, #0]
 8005414:	440b      	add	r3, r1
 8005416:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005418:	4628      	mov	r0, r5
 800541a:	f7ff ff1f 	bl	800525c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800541e:	f7ff f9bf 	bl	80047a0 <xTaskResumeAll>
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20002ef8 	.word	0x20002ef8
 800542c:	20000ee8 	.word	0x20000ee8

08005430 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005430:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005436:	4b0d      	ldr	r3, [pc, #52]	; (800546c <prvTaskExitError+0x3c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d008      	beq.n	8005452 <prvTaskExitError+0x22>
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	e7fe      	b.n	8005450 <prvTaskExitError+0x20>
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005462:	9b01      	ldr	r3, [sp, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0fc      	beq.n	8005462 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005468:	b002      	add	sp, #8
 800546a:	4770      	bx	lr
 800546c:	20000070 	.word	0x20000070

08005470 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005470:	4808      	ldr	r0, [pc, #32]	; (8005494 <prvPortStartFirstTask+0x24>)
 8005472:	6800      	ldr	r0, [r0, #0]
 8005474:	6800      	ldr	r0, [r0, #0]
 8005476:	f380 8808 	msr	MSP, r0
 800547a:	f04f 0000 	mov.w	r0, #0
 800547e:	f380 8814 	msr	CONTROL, r0
 8005482:	b662      	cpsie	i
 8005484:	b661      	cpsie	f
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	df00      	svc	0
 8005490:	bf00      	nop
 8005492:	0000      	.short	0x0000
 8005494:	e000ed08 	.word	0xe000ed08

08005498 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005498:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054a8 <vPortEnableVFP+0x10>
 800549c:	6801      	ldr	r1, [r0, #0]
 800549e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054a2:	6001      	str	r1, [r0, #0]
 80054a4:	4770      	bx	lr
 80054a6:	0000      	.short	0x0000
 80054a8:	e000ed88 	.word	0xe000ed88

080054ac <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054b0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054b4:	f021 0101 	bic.w	r1, r1, #1
 80054b8:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <pxPortInitialiseStack+0x28>)
 80054be:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054c2:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054c6:	f06f 0302 	mvn.w	r3, #2
 80054ca:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80054ce:	3844      	subs	r0, #68	; 0x44
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	08005431 	.word	0x08005431
	...

080054e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <pxCurrentTCBConst2>)
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	6808      	ldr	r0, [r1, #0]
 80054e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ea:	f380 8809 	msr	PSP, r0
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f04f 0000 	mov.w	r0, #0
 80054f6:	f380 8811 	msr	BASEPRI, r0
 80054fa:	4770      	bx	lr
 80054fc:	f3af 8000 	nop.w

08005500 <pxCurrentTCBConst2>:
 8005500:	20000694 	.word	0x20000694

08005504 <vPortEnterCritical>:
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005514:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <vPortEnterCritical+0x3c>)
 8005516:	6813      	ldr	r3, [r2, #0]
 8005518:	3301      	adds	r3, #1
 800551a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10d      	bne.n	800553c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <vPortEnterCritical+0x40>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005528:	d008      	beq.n	800553c <vPortEnterCritical+0x38>
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	e7fe      	b.n	800553a <vPortEnterCritical+0x36>
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000070 	.word	0x20000070
 8005544:	e000ed04 	.word	0xe000ed04

08005548 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8005548:	4b09      	ldr	r3, [pc, #36]	; (8005570 <vPortExitCritical+0x28>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	b943      	cbnz	r3, 8005560 <vPortExitCritical+0x18>
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	e7fe      	b.n	800555e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005560:	3b01      	subs	r3, #1
 8005562:	4a03      	ldr	r2, [pc, #12]	; (8005570 <vPortExitCritical+0x28>)
 8005564:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005566:	b90b      	cbnz	r3, 800556c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000070 	.word	0x20000070
	...

08005580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005580:	f3ef 8009 	mrs	r0, PSP
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <pxCurrentTCBConst>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	f01e 0f10 	tst.w	lr, #16
 8005590:	bf08      	it	eq
 8005592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	6010      	str	r0, [r2, #0]
 800559c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055a4:	f380 8811 	msr	BASEPRI, r0
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f7ff f99a 	bl	80048e8 <vTaskSwitchContext>
 80055b4:	f04f 0000 	mov.w	r0, #0
 80055b8:	f380 8811 	msr	BASEPRI, r0
 80055bc:	bc09      	pop	{r0, r3}
 80055be:	6819      	ldr	r1, [r3, #0]
 80055c0:	6808      	ldr	r0, [r1, #0]
 80055c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c6:	f01e 0f10 	tst.w	lr, #16
 80055ca:	bf08      	it	eq
 80055cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055d0:	f380 8809 	msr	PSP, r0
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	f3af 8000 	nop.w

080055e0 <pxCurrentTCBConst>:
 80055e0:	20000694 	.word	0x20000694

080055e4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055e4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055f6:	f7ff f841 	bl	800467c <xTaskIncrementTick>
 80055fa:	b118      	cbz	r0, 8005604 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005600:	4b02      	ldr	r3, [pc, #8]	; (800560c <SysTick_Handler+0x28>)
 8005602:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005604:	2300      	movs	r3, #0
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	bd08      	pop	{r3, pc}
 800560c:	e000ed04 	.word	0xe000ed04

08005610 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005610:	4a08      	ldr	r2, [pc, #32]	; (8005634 <vPortSetupTimerInterrupt+0x24>)
 8005612:	2300      	movs	r3, #0
 8005614:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005616:	4908      	ldr	r1, [pc, #32]	; (8005638 <vPortSetupTimerInterrupt+0x28>)
 8005618:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <vPortSetupTimerInterrupt+0x2c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4908      	ldr	r1, [pc, #32]	; (8005640 <vPortSetupTimerInterrupt+0x30>)
 8005620:	fba1 1303 	umull	r1, r3, r1, r3
 8005624:	099b      	lsrs	r3, r3, #6
 8005626:	3b01      	subs	r3, #1
 8005628:	4906      	ldr	r1, [pc, #24]	; (8005644 <vPortSetupTimerInterrupt+0x34>)
 800562a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800562c:	2307      	movs	r3, #7
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	e000e010 	.word	0xe000e010
 8005638:	e000e018 	.word	0xe000e018
 800563c:	2000006c 	.word	0x2000006c
 8005640:	10624dd3 	.word	0x10624dd3
 8005644:	e000e014 	.word	0xe000e014

08005648 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005648:	4b3a      	ldr	r3, [pc, #232]	; (8005734 <xPortStartScheduler+0xec>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <xPortStartScheduler+0xf0>)
 800564e:	429a      	cmp	r2, r3
 8005650:	d108      	bne.n	8005664 <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	e7fe      	b.n	8005662 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005664:	4b33      	ldr	r3, [pc, #204]	; (8005734 <xPortStartScheduler+0xec>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4b34      	ldr	r3, [pc, #208]	; (800573c <xPortStartScheduler+0xf4>)
 800566a:	429a      	cmp	r2, r3
 800566c:	d108      	bne.n	8005680 <xPortStartScheduler+0x38>
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	e7fe      	b.n	800567e <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005680:	b510      	push	{r4, lr}
 8005682:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005684:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <xPortStartScheduler+0xf8>)
 8005686:	781a      	ldrb	r2, [r3, #0]
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800568c:	22ff      	movs	r2, #255	; 0xff
 800568e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005698:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800569c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056a0:	4a28      	ldr	r2, [pc, #160]	; (8005744 <xPortStartScheduler+0xfc>)
 80056a2:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056a4:	2207      	movs	r2, #7
 80056a6:	4b28      	ldr	r3, [pc, #160]	; (8005748 <xPortStartScheduler+0x100>)
 80056a8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056aa:	e009      	b.n	80056c0 <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <xPortStartScheduler+0x100>)
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80056c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80056c8:	d1f0      	bne.n	80056ac <xPortStartScheduler+0x64>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056ca:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <xPortStartScheduler+0x100>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d008      	beq.n	80056e4 <xPortStartScheduler+0x9c>
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	e7fe      	b.n	80056e2 <xPortStartScheduler+0x9a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056e4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ea:	4a17      	ldr	r2, [pc, #92]	; (8005748 <xPortStartScheduler+0x100>)
 80056ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056ee:	9b01      	ldr	r3, [sp, #4]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	4a13      	ldr	r2, [pc, #76]	; (8005740 <xPortStartScheduler+0xf8>)
 80056f4:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056f6:	4b15      	ldr	r3, [pc, #84]	; (800574c <xPortStartScheduler+0x104>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80056fe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005706:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005708:	f7ff ff82 	bl	8005610 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800570c:	2400      	movs	r4, #0
 800570e:	4b10      	ldr	r3, [pc, #64]	; (8005750 <xPortStartScheduler+0x108>)
 8005710:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005712:	f7ff fec1 	bl	8005498 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005716:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <xPortStartScheduler+0x10c>)
 8005718:	6813      	ldr	r3, [r2, #0]
 800571a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800571e:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005720:	f7ff fea6 	bl	8005470 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005724:	f7ff f8e0 	bl	80048e8 <vTaskSwitchContext>
	prvTaskExitError();
 8005728:	f7ff fe82 	bl	8005430 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
 800572c:	4620      	mov	r0, r4
 800572e:	b002      	add	sp, #8
 8005730:	bd10      	pop	{r4, pc}
 8005732:	bf00      	nop
 8005734:	e000ed00 	.word	0xe000ed00
 8005738:	410fc271 	.word	0x410fc271
 800573c:	410fc270 	.word	0x410fc270
 8005740:	e000e400 	.word	0xe000e400
 8005744:	20002f00 	.word	0x20002f00
 8005748:	20002f04 	.word	0x20002f04
 800574c:	e000ed20 	.word	0xe000ed20
 8005750:	20000070 	.word	0x20000070
 8005754:	e000ef34 	.word	0xe000ef34

08005758 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005758:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800575c:	2b0f      	cmp	r3, #15
 800575e:	d90f      	bls.n	8005780 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005760:	4a10      	ldr	r2, [pc, #64]	; (80057a4 <vPortValidateInterruptPriority+0x4c>)
 8005762:	5c9b      	ldrb	r3, [r3, r2]
 8005764:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005766:	4a10      	ldr	r2, [pc, #64]	; (80057a8 <vPortValidateInterruptPriority+0x50>)
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	4293      	cmp	r3, r2
 800576c:	d208      	bcs.n	8005780 <vPortValidateInterruptPriority+0x28>
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	e7fe      	b.n	800577e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <vPortValidateInterruptPriority+0x54>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <vPortValidateInterruptPriority+0x58>)
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	4293      	cmp	r3, r2
 800578e:	d908      	bls.n	80057a2 <vPortValidateInterruptPriority+0x4a>
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	e7fe      	b.n	80057a0 <vPortValidateInterruptPriority+0x48>
 80057a2:	4770      	bx	lr
 80057a4:	e000e3f0 	.word	0xe000e3f0
 80057a8:	20002f00 	.word	0x20002f00
 80057ac:	e000ed0c 	.word	0xe000ed0c
 80057b0:	20002f04 	.word	0x20002f04

080057b4 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80057b4:	b198      	cbz	r0, 80057de <USBD_Init+0x2a>
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057b6:	b508      	push	{r3, lr}
 80057b8:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80057ba:	f8d0 028c 	ldr.w	r0, [r0, #652]	; 0x28c
 80057be:	b110      	cbz	r0, 80057c6 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80057c0:	2000      	movs	r0, #0
 80057c2:	f8c3 028c 	str.w	r0, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80057c6:	b109      	cbz	r1, 80057cc <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80057c8:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
 80057cc:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80057d4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057d6:	f7fb f9d5 	bl	8000b84 <USBD_LL_Init>

  return USBD_OK;
 80057da:	2000      	movs	r0, #0
 80057dc:	bd08      	pop	{r3, pc}
  if(pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80057de:	2002      	movs	r0, #2
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop

080057e4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80057e4:	b119      	cbz	r1, 80057ee <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057e6:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80057ea:	2000      	movs	r0, #0
 80057ec:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057ee:	2002      	movs	r0, #2
  }

  return status;
}
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop

080057f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80057f4:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80057f6:	f7fb fa21 	bl	8000c3c <USBD_LL_Start>

  return USBD_OK;
}
 80057fa:	2000      	movs	r0, #0
 80057fc:	bd08      	pop	{r3, pc}
 80057fe:	bf00      	nop

08005800 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005800:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8005802:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005806:	b123      	cbz	r3, 8005812 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4798      	blx	r3
 800580c:	b118      	cbz	r0, 8005816 <USBD_SetClassConfig+0x16>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800580e:	2002      	movs	r0, #2
 8005810:	bd08      	pop	{r3, pc}
 8005812:	2002      	movs	r0, #2
 8005814:	bd08      	pop	{r3, pc}
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
    {
      ret = USBD_OK;
 8005816:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8005818:	bd08      	pop	{r3, pc}
 800581a:	bf00      	nop

0800581c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800581c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800581e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	4798      	blx	r3
  return USBD_OK;
}
 8005826:	2000      	movs	r0, #0
 8005828:	bd08      	pop	{r3, pc}
 800582a:	bf00      	nop

0800582c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005830:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8005834:	4628      	mov	r0, r5
 8005836:	f000 f947 	bl	8005ac8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800583a:	2301      	movs	r3, #1
 800583c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8005840:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8005844:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8005848:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
 800584c:	f001 031f 	and.w	r3, r1, #31
 8005850:	2b01      	cmp	r3, #1
 8005852:	d008      	beq.n	8005866 <USBD_LL_SetupStage+0x3a>
 8005854:	b113      	cbz	r3, 800585c <USBD_LL_SetupStage+0x30>
 8005856:	2b02      	cmp	r3, #2
 8005858:	d00a      	beq.n	8005870 <USBD_LL_SetupStage+0x44>
 800585a:	e00e      	b.n	800587a <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800585c:	4629      	mov	r1, r5
 800585e:	4620      	mov	r0, r4
 8005860:	f000 faba 	bl	8005dd8 <USBD_StdDevReq>
    break;
 8005864:	e00e      	b.n	8005884 <USBD_LL_SetupStage+0x58>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005866:	4629      	mov	r1, r5
 8005868:	4620      	mov	r0, r4
 800586a:	f000 faeb 	bl	8005e44 <USBD_StdItfReq>
    break;
 800586e:	e009      	b.n	8005884 <USBD_LL_SetupStage+0x58>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005870:	4629      	mov	r1, r5
 8005872:	4620      	mov	r0, r4
 8005874:	f000 fb14 	bl	8005ea0 <USBD_StdEPReq>
    break;
 8005878:	e004      	b.n	8005884 <USBD_LL_SetupStage+0x58>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800587a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800587e:	4620      	mov	r0, r4
 8005880:	f7fb f9f8 	bl	8000c74 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8005884:	2000      	movs	r0, #0
 8005886:	bd38      	pop	{r3, r4, r5, pc}

08005888 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800588c:	bb91      	cbnz	r1, 80058f4 <USBD_LL_DataOutStage+0x6c>
 800588e:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005890:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 8005894:	2b03      	cmp	r3, #3
 8005896:	d122      	bne.n	80058de <USBD_LL_DataOutStage+0x56>
    {
      if(pep->rem_length > pep->maxpacket)
 8005898:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 800589c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d90d      	bls.n	80058c0 <USBD_LL_DataOutStage+0x38>
      {
        pep->rem_length -=  pep->maxpacket;
 80058a4:	1ad2      	subs	r2, r2, r3
 80058a6:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c

        USBD_CtlContinueRx (pdev,
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <USBD_LL_DataOutStage+0x2a>
 80058ae:	b292      	uxth	r2, r2
 80058b0:	e000      	b.n	80058b4 <USBD_LL_DataOutStage+0x2c>
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	4601      	mov	r1, r0
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 fc3c 	bl	8006134 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80058bc:	2000      	movs	r0, #0
 80058be:	bd38      	pop	{r3, r4, r5, pc}
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80058c0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	b12b      	cbz	r3, 80058d4 <USBD_LL_DataOutStage+0x4c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058c8:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80058cc:	2a03      	cmp	r2, #3
 80058ce:	d101      	bne.n	80058d4 <USBD_LL_DataOutStage+0x4c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev);
 80058d0:	4620      	mov	r0, r4
 80058d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 fc35 	bl	8006144 <USBD_CtlSendStatus>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80058da:	2000      	movs	r0, #0
 80058dc:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d115      	bne.n	800590e <USBD_LL_DataOutStage+0x86>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80058e2:	2500      	movs	r5, #0
 80058e4:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80058e8:	4629      	mov	r1, r5
 80058ea:	4620      	mov	r0, r4
 80058ec:	f7fb f9c2 	bl	8000c74 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80058f0:	4628      	mov	r0, r5
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	460a      	mov	r2, r1
        pdev->ep0_state = USBD_EP0_IDLE;
        USBD_LL_StallEP(pdev, 0U);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80058f6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	b14b      	cbz	r3, 8005912 <USBD_LL_DataOutStage+0x8a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058fe:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
        pdev->ep0_state = USBD_EP0_IDLE;
        USBD_LL_StallEP(pdev, 0U);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005902:	2903      	cmp	r1, #3
 8005904:	d107      	bne.n	8005916 <USBD_LL_DataOutStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005906:	4611      	mov	r1, r2
 8005908:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800590a:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 800590c:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800590e:	2000      	movs	r0, #0
 8005910:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->DataOut(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005912:	2002      	movs	r0, #2
 8005914:	bd38      	pop	{r3, r4, r5, pc}
 8005916:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 8005918:	bd38      	pop	{r3, r4, r5, pc}
 800591a:	bf00      	nop

0800591c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800591c:	b510      	push	{r4, lr}
 800591e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005920:	2900      	cmp	r1, #0
 8005922:	d150      	bne.n	80059c6 <USBD_LL_DataInStage+0xaa>
 8005924:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005926:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 800592a:	2b02      	cmp	r3, #2
 800592c:	d13c      	bne.n	80059a8 <USBD_LL_DataInStage+0x8c>
    {
      if(pep->rem_length > pep->maxpacket)
 800592e:	6a22      	ldr	r2, [r4, #32]
 8005930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005932:	429a      	cmp	r2, r3
 8005934:	d90d      	bls.n	8005952 <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -= pep->maxpacket;
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	6222      	str	r2, [r4, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800593a:	b292      	uxth	r2, r2
 800593c:	4601      	mov	r1, r0
 800593e:	4620      	mov	r0, r4
 8005940:	f000 fbe0 	bl	8006104 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005944:	2300      	movs	r3, #0
 8005946:	461a      	mov	r2, r3
 8005948:	4619      	mov	r1, r3
 800594a:	4620      	mov	r0, r4
 800594c:	f7fb f9b2 	bl	8000cb4 <USBD_LL_PrepareReceive>
 8005950:	e031      	b.n	80059b6 <USBD_LL_DataInStage+0x9a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005952:	69e1      	ldr	r1, [r4, #28]
 8005954:	fbb1 f2f3 	udiv	r2, r1, r3
 8005958:	fb03 1212 	mls	r2, r3, r2, r1
 800595c:	b992      	cbnz	r2, 8005984 <USBD_LL_DataInStage+0x68>
 800595e:	428b      	cmp	r3, r1
 8005960:	d810      	bhi.n	8005984 <USBD_LL_DataInStage+0x68>
           (pep->total_length >= pep->maxpacket) &&
           (pep->total_length < pdev->ep0_data_len))
 8005962:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
           (pep->total_length >= pep->maxpacket) &&
 8005966:	4299      	cmp	r1, r3
 8005968:	d20c      	bcs.n	8005984 <USBD_LL_DataInStage+0x68>
           (pep->total_length < pdev->ep0_data_len))
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800596a:	4611      	mov	r1, r2
 800596c:	4620      	mov	r0, r4
 800596e:	f000 fbc9 	bl	8006104 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005972:	2100      	movs	r1, #0
 8005974:	f8c4 1270 	str.w	r1, [r4, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005978:	460b      	mov	r3, r1
 800597a:	460a      	mov	r2, r1
 800597c:	4620      	mov	r0, r4
 800597e:	f7fb f999 	bl	8000cb4 <USBD_LL_PrepareReceive>
 8005982:	e018      	b.n	80059b6 <USBD_LL_DataInStage+0x9a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005984:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	b12b      	cbz	r3, 8005998 <USBD_LL_DataInStage+0x7c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800598c:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005990:	2a03      	cmp	r2, #3
 8005992:	d101      	bne.n	8005998 <USBD_LL_DataInStage+0x7c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005994:	4620      	mov	r0, r4
 8005996:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005998:	2180      	movs	r1, #128	; 0x80
 800599a:	4620      	mov	r0, r4
 800599c:	f7fb f96a 	bl	8000c74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 fbdb 	bl	800615c <USBD_CtlReceiveStatus>
 80059a6:	e006      	b.n	80059b6 <USBD_LL_DataInStage+0x9a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d000      	beq.n	80059ae <USBD_LL_DataInStage+0x92>
 80059ac:	b91b      	cbnz	r3, 80059b6 <USBD_LL_DataInStage+0x9a>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7fb f95f 	bl	8000c74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80059b6:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d110      	bne.n	80059e0 <USBD_LL_DataInStage+0xc4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80059be:	2000      	movs	r0, #0
 80059c0:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	460a      	mov	r2, r1
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80059c8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	b14b      	cbz	r3, 80059e4 <USBD_LL_DataInStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059d0:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80059d4:	2903      	cmp	r1, #3
 80059d6:	d107      	bne.n	80059e8 <USBD_LL_DataInStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80059d8:	4611      	mov	r1, r2
 80059da:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80059dc:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80059de:	bd10      	pop	{r4, pc}
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80059e0:	2000      	movs	r0, #0
 80059e2:	bd10      	pop	{r4, pc}
    pdev->pClass->DataIn(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80059e4:	2002      	movs	r0, #2
 80059e6:	bd10      	pop	{r4, pc}
 80059e8:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 80059ea:	bd10      	pop	{r4, pc}

080059ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059f0:	2340      	movs	r3, #64	; 0x40
 80059f2:	2200      	movs	r2, #0
 80059f4:	4611      	mov	r1, r2
 80059f6:	f7fb f929 	bl	8000c4c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059fa:	2501      	movs	r5, #1
 80059fc:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a00:	2640      	movs	r6, #64	; 0x40
 8005a02:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a06:	4633      	mov	r3, r6
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f7fb f91d 	bl	8000c4c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a12:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a14:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a16:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005a20:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a22:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 8005a26:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8005a2a:	b12b      	cbz	r3, 8005a38 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a2c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2100      	movs	r1, #0
 8005a34:	4620      	mov	r0, r4
 8005a36:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005a38:	2000      	movs	r0, #0
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}

08005a3c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005a3c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8005a3e:	2000      	movs	r0, #0
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop

08005a44 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005a44:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005a48:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8005a52:	2000      	movs	r0, #0
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop

08005a58 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8005a58:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8005a5c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8005a60:	2000      	movs	r0, #0
 8005a62:	4770      	bx	lr

08005a64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005a64:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a66:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d104      	bne.n	8005a78 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8005a6e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	b103      	cbz	r3, 8005a78 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005a76:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8005a78:	2000      	movs	r0, #0
 8005a7a:	bd08      	pop	{r3, pc}

08005a7c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	4770      	bx	lr

08005a80 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005a80:	2000      	movs	r0, #0
 8005a82:	4770      	bx	lr

08005a84 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8005a84:	2000      	movs	r0, #0
 8005a86:	4770      	bx	lr

08005a88 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005a88:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a90:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8005a94:	6852      	ldr	r2, [r2, #4]
 8005a96:	7901      	ldrb	r1, [r0, #4]
 8005a98:	4790      	blx	r2

  return USBD_OK;
}
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	bd08      	pop	{r3, pc}
 8005a9e:	bf00      	nop

08005aa0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005aa0:	4603      	mov	r3, r0
    uint8_t  len = 0U;
 8005aa2:	2000      	movs	r0, #0

    while (*buf != '\0')
 8005aa4:	e002      	b.n	8005aac <USBD_GetLen+0xc>
    {
        len++;
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	b2c0      	uxtb	r0, r0
        buf++;
 8005aaa:	3301      	adds	r3, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	d1f9      	bne.n	8005aa6 <USBD_GetLen+0x6>
        len++;
        buf++;
    }

    return len;
}
 8005ab2:	4770      	bx	lr

08005ab4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005ab4:	b508      	push	{r3, lr}

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ab6:	884b      	ldrh	r3, [r1, #2]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d103      	bne.n	8005ac4 <USBD_SetFeature+0x10>
  {
    pdev->dev_remote_wakeup = 1U;
 8005abc:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005ac0:	f000 fb40 	bl	8006144 <USBD_CtlSendStatus>
 8005ac4:	bd08      	pop	{r3, pc}
 8005ac6:	bf00      	nop

08005ac8 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005ac8:	780b      	ldrb	r3, [r1, #0]
 8005aca:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005acc:	784b      	ldrb	r3, [r1, #1]
 8005ace:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005ad0:	788b      	ldrb	r3, [r1, #2]
 8005ad2:	78ca      	ldrb	r2, [r1, #3]
 8005ad4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ad8:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005ada:	790b      	ldrb	r3, [r1, #4]
 8005adc:	794a      	ldrb	r2, [r1, #5]
 8005ade:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ae2:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005ae4:	798b      	ldrb	r3, [r1, #6]
 8005ae6:	79ca      	ldrb	r2, [r1, #7]
 8005ae8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005aec:	80c3      	strh	r3, [r0, #6]
 8005aee:	4770      	bx	lr

08005af0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005af0:	b510      	push	{r4, lr}
 8005af2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8005af4:	2180      	movs	r1, #128	; 0x80
 8005af6:	f7fb f8bd 	bl	8000c74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005afa:	2100      	movs	r1, #0
 8005afc:	4620      	mov	r0, r4
 8005afe:	f7fb f8b9 	bl	8000c74 <USBD_LL_StallEP>
 8005b02:	bd10      	pop	{r4, pc}

08005b04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005b04:	b530      	push	{r4, r5, lr}
 8005b06:	b083      	sub	sp, #12
 8005b08:	4605      	mov	r5, r0
 8005b0a:	460c      	mov	r4, r1
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005b0c:	884a      	ldrh	r2, [r1, #2]
 8005b0e:	0a13      	lsrs	r3, r2, #8
 8005b10:	3b01      	subs	r3, #1
 8005b12:	2b06      	cmp	r3, #6
 8005b14:	d879      	bhi.n	8005c0a <USBD_GetDescriptor+0x106>
 8005b16:	e8df f003 	tbb	[pc, r3]
 8005b1a:	0c04      	.short	0x0c04
 8005b1c:	5c787820 	.word	0x5c787820
 8005b20:	69          	.byte	0x69
 8005b21:	00          	.byte	0x00
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b22:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f10d 0106 	add.w	r1, sp, #6
 8005b2c:	7c00      	ldrb	r0, [r0, #16]
 8005b2e:	4798      	blx	r3
    break;
 8005b30:	e06f      	b.n	8005c12 <USBD_GetDescriptor+0x10e>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005b32:	7c03      	ldrb	r3, [r0, #16]
 8005b34:	b943      	cbnz	r3, 8005b48 <USBD_GetDescriptor+0x44>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005b36:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	f10d 0006 	add.w	r0, sp, #6
 8005b40:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b42:	2302      	movs	r3, #2
 8005b44:	7043      	strb	r3, [r0, #1]
 8005b46:	e064      	b.n	8005c12 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005b48:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	f10d 0006 	add.w	r0, sp, #6
 8005b52:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b54:	2302      	movs	r3, #2
 8005b56:	7043      	strb	r3, [r0, #1]
 8005b58:	e05b      	b.n	8005c12 <USBD_GetDescriptor+0x10e>
    }
    break;

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	2a05      	cmp	r2, #5
 8005b5e:	d834      	bhi.n	8005bca <USBD_GetDescriptor+0xc6>
 8005b60:	e8df f002 	tbb	[pc, r2]
 8005b64:	1b130b03 	.word	0x1b130b03
 8005b68:	2b23      	.short	0x2b23
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b6a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f10d 0106 	add.w	r1, sp, #6
 8005b74:	7c00      	ldrb	r0, [r0, #16]
 8005b76:	4798      	blx	r3
      break;
 8005b78:	e04b      	b.n	8005c12 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b7a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f10d 0106 	add.w	r1, sp, #6
 8005b84:	7c00      	ldrb	r0, [r0, #16]
 8005b86:	4798      	blx	r3
      break;
 8005b88:	e043      	b.n	8005c12 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b8a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f10d 0106 	add.w	r1, sp, #6
 8005b94:	7c00      	ldrb	r0, [r0, #16]
 8005b96:	4798      	blx	r3
      break;
 8005b98:	e03b      	b.n	8005c12 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b9a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f10d 0106 	add.w	r1, sp, #6
 8005ba4:	7c00      	ldrb	r0, [r0, #16]
 8005ba6:	4798      	blx	r3
      break;
 8005ba8:	e033      	b.n	8005c12 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005baa:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f10d 0106 	add.w	r1, sp, #6
 8005bb4:	7c00      	ldrb	r0, [r0, #16]
 8005bb6:	4798      	blx	r3
      break;
 8005bb8:	e02b      	b.n	8005c12 <USBD_GetDescriptor+0x10e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bba:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f10d 0106 	add.w	r1, sp, #6
 8005bc4:	7c00      	ldrb	r0, [r0, #16]
 8005bc6:	4798      	blx	r3
      break;
 8005bc8:	e023      	b.n	8005c12 <USBD_GetDescriptor+0x10e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005bca:	4621      	mov	r1, r4
 8005bcc:	f7ff ff90 	bl	8005af0 <USBD_CtlError>
      return;
 8005bd0:	e032      	b.n	8005c38 <USBD_GetDescriptor+0x134>
#endif
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd2:	7c03      	ldrb	r3, [r0, #16]
 8005bd4:	b933      	cbnz	r3, 8005be4 <USBD_GetDescriptor+0xe0>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005bd6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bdc:	f10d 0006 	add.w	r0, sp, #6
 8005be0:	4798      	blx	r3
      break;
 8005be2:	e016      	b.n	8005c12 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005be4:	4621      	mov	r1, r4
 8005be6:	f7ff ff83 	bl	8005af0 <USBD_CtlError>
      return;
 8005bea:	e025      	b.n	8005c38 <USBD_GetDescriptor+0x134>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005bec:	7c03      	ldrb	r3, [r0, #16]
 8005bee:	b943      	cbnz	r3, 8005c02 <USBD_GetDescriptor+0xfe>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005bf0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	f10d 0006 	add.w	r0, sp, #6
 8005bfa:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bfc:	2307      	movs	r3, #7
 8005bfe:	7043      	strb	r3, [r0, #1]
      break;
 8005c00:	e007      	b.n	8005c12 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005c02:	4621      	mov	r1, r4
 8005c04:	f7ff ff74 	bl	8005af0 <USBD_CtlError>
      return;
 8005c08:	e016      	b.n	8005c38 <USBD_GetDescriptor+0x134>
    }

  default:
     USBD_CtlError(pdev , req);
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	f7ff ff70 	bl	8005af0 <USBD_CtlError>
    return;
 8005c10:	e012      	b.n	8005c38 <USBD_GetDescriptor+0x134>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005c12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005c16:	b153      	cbz	r3, 8005c2e <USBD_GetDescriptor+0x12a>
 8005c18:	88e2      	ldrh	r2, [r4, #6]
 8005c1a:	b142      	cbz	r2, 8005c2e <USBD_GetDescriptor+0x12a>
  {

    len = MIN(len, req->wLength);
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	bf28      	it	cs
 8005c20:	461a      	movcs	r2, r3
 8005c22:	f8ad 2006 	strh.w	r2, [sp, #6]

    USBD_CtlSendData (pdev, pbuf, len);
 8005c26:	4601      	mov	r1, r0
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 fa5d 	bl	80060e8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005c2e:	88e3      	ldrh	r3, [r4, #6]
 8005c30:	b913      	cbnz	r3, 8005c38 <USBD_GetDescriptor+0x134>
  {
   USBD_CtlSendStatus(pdev);
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 fa86 	bl	8006144 <USBD_CtlSendStatus>
  }
}
 8005c38:	b003      	add	sp, #12
 8005c3a:	bd30      	pop	{r4, r5, pc}

08005c3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4604      	mov	r4, r0
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c40:	888b      	ldrh	r3, [r1, #4]
 8005c42:	b9f3      	cbnz	r3, 8005c82 <USBD_SetAddress+0x46>
 8005c44:	88cb      	ldrh	r3, [r1, #6]
 8005c46:	b9e3      	cbnz	r3, 8005c82 <USBD_SetAddress+0x46>
 8005c48:	884b      	ldrh	r3, [r1, #2]
 8005c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c4c:	d819      	bhi.n	8005c82 <USBD_SetAddress+0x46>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c4e:	f003 057f 	and.w	r5, r3, #127	; 0x7f

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c52:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d102      	bne.n	8005c60 <USBD_SetAddress+0x24>
    {
      USBD_CtlError(pdev , req);
 8005c5a:	f7ff ff49 	bl	8005af0 <USBD_CtlError>
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c60:	f880 5276 	strb.w	r5, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c64:	4629      	mov	r1, r5
 8005c66:	f7fb f815 	bl	8000c94 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 fa6a 	bl	8006144 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c70:	b11d      	cbz	r5, 8005c7a <USBD_SetAddress+0x3e>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c72:	2302      	movs	r3, #2
 8005c74:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8005c78:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8005c80:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7ff ff34 	bl	8005af0 <USBD_CtlError>
 8005c88:	bd38      	pop	{r3, r4, r5, pc}
 8005c8a:	bf00      	nop

08005c8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4604      	mov	r4, r0
 8005c90:	460d      	mov	r5, r1
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c92:	7889      	ldrb	r1, [r1, #2]
 8005c94:	4b28      	ldr	r3, [pc, #160]	; (8005d38 <USBD_SetConfig+0xac>)
 8005c96:	7019      	strb	r1, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c98:	2901      	cmp	r1, #1
 8005c9a:	d903      	bls.n	8005ca4 <USBD_SetConfig+0x18>
  {
    USBD_CtlError(pdev, req);
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	f7ff ff27 	bl	8005af0 <USBD_CtlError>
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (pdev->dev_state)
 8005ca4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d002      	beq.n	8005cb2 <USBD_SetConfig+0x26>
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d015      	beq.n	8005cdc <USBD_SetConfig+0x50>
 8005cb0:	e039      	b.n	8005d26 <USBD_SetConfig+0x9a>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005cb2:	b181      	cbz	r1, 8005cd6 <USBD_SetConfig+0x4a>
      {
        pdev->dev_config = cfgidx;
 8005cb4:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005cbc:	f7ff fda0 	bl	8005800 <USBD_SetClassConfig>
 8005cc0:	2802      	cmp	r0, #2
 8005cc2:	d104      	bne.n	8005cce <USBD_SetConfig+0x42>
        {
          USBD_CtlError(pdev, req);
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f7ff ff12 	bl	8005af0 <USBD_CtlError>
          return;
 8005ccc:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 fa38 	bl	8006144 <USBD_CtlSendStatus>
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8005cd6:	f000 fa35 	bl	8006144 <USBD_CtlSendStatus>
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005cdc:	b949      	cbnz	r1, 8005cf2 <USBD_SetConfig+0x66>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005ce4:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8005ce6:	f7ff fd99 	bl	800581c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 fa2a 	bl	8006144 <USBD_CtlSendStatus>
 8005cf0:	bd38      	pop	{r3, r4, r5, pc}
      }
      else if (cfgidx != pdev->dev_config)
 8005cf2:	6843      	ldr	r3, [r0, #4]
 8005cf4:	4299      	cmp	r1, r3
 8005cf6:	d013      	beq.n	8005d20 <USBD_SetConfig+0x94>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cf8:	b2d9      	uxtb	r1, r3
 8005cfa:	f7ff fd8f 	bl	800581c <USBD_ClrClassConfig>

        /* set new configuration */
        pdev->dev_config = cfgidx;
 8005cfe:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <USBD_SetConfig+0xac>)
 8005d00:	7819      	ldrb	r1, [r3, #0]
 8005d02:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d04:	4620      	mov	r0, r4
 8005d06:	f7ff fd7b 	bl	8005800 <USBD_SetClassConfig>
 8005d0a:	2802      	cmp	r0, #2
 8005d0c:	d104      	bne.n	8005d18 <USBD_SetConfig+0x8c>
        {
          USBD_CtlError(pdev, req);
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4620      	mov	r0, r4
 8005d12:	f7ff feed 	bl	8005af0 <USBD_CtlError>
          return;
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fa13 	bl	8006144 <USBD_CtlSendStatus>
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8005d20:	f000 fa10 	bl	8006144 <USBD_CtlSendStatus>
 8005d24:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8005d26:	4629      	mov	r1, r5
 8005d28:	f7ff fee2 	bl	8005af0 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005d2c:	4b02      	ldr	r3, [pc, #8]	; (8005d38 <USBD_SetConfig+0xac>)
 8005d2e:	7819      	ldrb	r1, [r3, #0]
 8005d30:	4620      	mov	r0, r4
 8005d32:	f7ff fd73 	bl	800581c <USBD_ClrClassConfig>
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	20002f08 	.word	0x20002f08

08005d3c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d3c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8005d3e:	88cb      	ldrh	r3, [r1, #6]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d002      	beq.n	8005d4a <USBD_GetConfig+0xe>
  {
    USBD_CtlError(pdev , req);
 8005d44:	f7ff fed4 	bl	8005af0 <USBD_CtlError>
 8005d48:	bd08      	pop	{r3, pc}
  }
  else
  {
    switch (pdev->dev_state)
 8005d4a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005d4e:	b18b      	cbz	r3, 8005d74 <USBD_GetConfig+0x38>
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d902      	bls.n	8005d5a <USBD_GetConfig+0x1e>
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d008      	beq.n	8005d6a <USBD_GetConfig+0x2e>
 8005d58:	e00c      	b.n	8005d74 <USBD_GetConfig+0x38>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
      pdev->dev_default_config = 0U;
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d62:	2201      	movs	r2, #1
 8005d64:	f000 f9c0 	bl	80060e8 <USBD_CtlSendData>
      break;
 8005d68:	bd08      	pop	{r3, pc}

    case USBD_STATE_CONFIGURED:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	1d01      	adds	r1, r0, #4
 8005d6e:	f000 f9bb 	bl	80060e8 <USBD_CtlSendData>
      break;
 8005d72:	bd08      	pop	{r3, pc}

    default:
      USBD_CtlError(pdev , req);
 8005d74:	f7ff febc 	bl	8005af0 <USBD_CtlError>
 8005d78:	bd08      	pop	{r3, pc}
 8005d7a:	bf00      	nop

08005d7c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d7c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005d7e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005d82:	3b01      	subs	r3, #1
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d812      	bhi.n	8005dae <USBD_GetStatus+0x32>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8005d88:	88cb      	ldrh	r3, [r1, #6]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d002      	beq.n	8005d94 <USBD_GetStatus+0x18>
    {
      USBD_CtlError(pdev, req);
 8005d8e:	f7ff feaf 	bl	8005af0 <USBD_CtlError>
      break;
 8005d92:	bd08      	pop	{r3, pc}
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d94:	2301      	movs	r3, #1
 8005d96:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005d98:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8005d9c:	b10b      	cbz	r3, 8005da2 <USBD_GetStatus+0x26>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	60c3      	str	r3, [r0, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005da2:	2202      	movs	r2, #2
 8005da4:	f100 010c 	add.w	r1, r0, #12
 8005da8:	f000 f99e 	bl	80060e8 <USBD_CtlSendData>
    break;
 8005dac:	bd08      	pop	{r3, pc}

  default :
    USBD_CtlError(pdev , req);
 8005dae:	f7ff fe9f 	bl	8005af0 <USBD_CtlError>
 8005db2:	bd08      	pop	{r3, pc}

08005db4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005db4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005db6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d808      	bhi.n	8005dd2 <USBD_ClrFeature+0x1e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dc0:	884b      	ldrh	r3, [r1, #2]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d107      	bne.n	8005dd6 <USBD_ClrFeature+0x22>
    {
      pdev->dev_remote_wakeup = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8005dcc:	f000 f9ba 	bl	8006144 <USBD_CtlSendStatus>
 8005dd0:	bd08      	pop	{r3, pc}
    }
    break;

  default :
     USBD_CtlError(pdev , req);
 8005dd2:	f7ff fe8d 	bl	8005af0 <USBD_CtlError>
 8005dd6:	bd08      	pop	{r3, pc}

08005dd8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005dd8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dda:	780b      	ldrb	r3, [r1, #0]
 8005ddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d003      	beq.n	8005dec <USBD_StdDevReq+0x14>
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d001      	beq.n	8005dec <USBD_StdDevReq+0x14>
 8005de8:	bb3b      	cbnz	r3, 8005e3a <USBD_StdDevReq+0x62>
 8005dea:	e004      	b.n	8005df6 <USBD_StdDevReq+0x1e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005dec:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	4798      	blx	r3
    break;
 8005df4:	e023      	b.n	8005e3e <USBD_StdDevReq+0x66>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005df6:	784b      	ldrb	r3, [r1, #1]
 8005df8:	2b09      	cmp	r3, #9
 8005dfa:	d81b      	bhi.n	8005e34 <USBD_StdDevReq+0x5c>
 8005dfc:	e8df f003 	tbb	[pc, r3]
 8005e00:	141a1711 	.word	0x141a1711
 8005e04:	1a05081a 	.word	0x1a05081a
 8005e08:	0b0e      	.short	0x0b0e
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005e0a:	f7ff fe7b 	bl	8005b04 <USBD_GetDescriptor>
      break;
 8005e0e:	e016      	b.n	8005e3e <USBD_StdDevReq+0x66>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005e10:	f7ff ff14 	bl	8005c3c <USBD_SetAddress>
      break;
 8005e14:	e013      	b.n	8005e3e <USBD_StdDevReq+0x66>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005e16:	f7ff ff39 	bl	8005c8c <USBD_SetConfig>
      break;
 8005e1a:	e010      	b.n	8005e3e <USBD_StdDevReq+0x66>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005e1c:	f7ff ff8e 	bl	8005d3c <USBD_GetConfig>
      break;
 8005e20:	e00d      	b.n	8005e3e <USBD_StdDevReq+0x66>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005e22:	f7ff ffab 	bl	8005d7c <USBD_GetStatus>
      break;
 8005e26:	e00a      	b.n	8005e3e <USBD_StdDevReq+0x66>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005e28:	f7ff fe44 	bl	8005ab4 <USBD_SetFeature>
      break;
 8005e2c:	e007      	b.n	8005e3e <USBD_StdDevReq+0x66>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8005e2e:	f7ff ffc1 	bl	8005db4 <USBD_ClrFeature>
      break;
 8005e32:	e004      	b.n	8005e3e <USBD_StdDevReq+0x66>

    default:
      USBD_CtlError(pdev, req);
 8005e34:	f7ff fe5c 	bl	8005af0 <USBD_CtlError>
      break;
 8005e38:	e001      	b.n	8005e3e <USBD_StdDevReq+0x66>
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8005e3a:	f7ff fe59 	bl	8005af0 <USBD_CtlError>
    break;
  }

  return ret;
}
 8005e3e:	2000      	movs	r0, #0
 8005e40:	bd08      	pop	{r3, pc}
 8005e42:	bf00      	nop

08005e44 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4605      	mov	r5, r0
 8005e48:	460c      	mov	r4, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e4a:	780b      	ldrb	r3, [r1, #0]
 8005e4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d002      	beq.n	8005e5a <USBD_StdItfReq+0x16>
 8005e54:	2b40      	cmp	r3, #64	; 0x40
 8005e56:	d000      	beq.n	8005e5a <USBD_StdItfReq+0x16>
 8005e58:	b9f3      	cbnz	r3, 8005e98 <USBD_StdItfReq+0x54>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005e5a:	f895 3274 	ldrb.w	r3, [r5, #628]	; 0x274
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d814      	bhi.n	8005e8e <USBD_StdItfReq+0x4a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e64:	7923      	ldrb	r3, [r4, #4]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d80c      	bhi.n	8005e84 <USBD_StdItfReq+0x40>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005e6a:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	4621      	mov	r1, r4
 8005e72:	4628      	mov	r0, r5
 8005e74:	4798      	blx	r3

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e76:	88e3      	ldrh	r3, [r4, #6]
 8005e78:	b983      	cbnz	r3, 8005e9c <USBD_StdItfReq+0x58>
 8005e7a:	b978      	cbnz	r0, 8005e9c <USBD_StdItfReq+0x58>
        {
          USBD_CtlSendStatus(pdev);
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 f961 	bl	8006144 <USBD_CtlSendStatus>
 8005e82:	e00b      	b.n	8005e9c <USBD_StdItfReq+0x58>
        }
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f7ff fe32 	bl	8005af0 <USBD_CtlError>
 8005e8c:	e006      	b.n	8005e9c <USBD_StdItfReq+0x58>
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f7ff fe2d 	bl	8005af0 <USBD_CtlError>
      break;
 8005e96:	e001      	b.n	8005e9c <USBD_StdItfReq+0x58>
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8005e98:	f7ff fe2a 	bl	8005af0 <USBD_CtlError>
    break;
  }

  return USBD_OK;
}
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}

08005ea0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4604      	mov	r4, r0

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005ea4:	888a      	ldrh	r2, [r1, #4]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ea6:	780b      	ldrb	r3, [r1, #0]
 8005ea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d006      	beq.n	8005ebe <USBD_StdEPReq+0x1e>
 8005eb0:	b2d0      	uxtb	r0, r2
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	d003      	beq.n	8005ebe <USBD_StdEPReq+0x1e>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 80f3 	bne.w	80060a2 <USBD_StdEPReq+0x202>
 8005ebc:	e006      	b.n	8005ecc <USBD_StdEPReq+0x2c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005ebe:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4798      	blx	r3
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005ec8:	2000      	movs	r0, #0
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
    break;
 8005eca:	bd38      	pop	{r3, r4, r5, pc}

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d105      	bne.n	8005edc <USBD_StdEPReq+0x3c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005ed0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	4798      	blx	r3

      return ret;
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
    }

    switch (req->bRequest)
 8005edc:	784b      	ldrb	r3, [r1, #1]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d032      	beq.n	8005f48 <USBD_StdEPReq+0xa8>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d05e      	beq.n	8005fa4 <USBD_StdEPReq+0x104>
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	f040 80d6 	bne.w	8006098 <USBD_StdEPReq+0x1f8>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005eec:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d002      	beq.n	8005efa <USBD_StdEPReq+0x5a>
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d012      	beq.n	8005f1e <USBD_StdEPReq+0x7e>
 8005ef8:	e021      	b.n	8005f3e <USBD_StdEPReq+0x9e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005efa:	b158      	cbz	r0, 8005f14 <USBD_StdEPReq+0x74>
 8005efc:	2880      	cmp	r0, #128	; 0x80
 8005efe:	d009      	beq.n	8005f14 <USBD_StdEPReq+0x74>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005f00:	4601      	mov	r1, r0
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7fa feb6 	bl	8000c74 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005f08:	2180      	movs	r1, #128	; 0x80
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f7fa feb2 	bl	8000c74 <USBD_LL_StallEP>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f10:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
          USBD_CtlError(pdev, req);
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7ff fdeb 	bl	8005af0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005f1e:	884b      	ldrh	r3, [r1, #2]
 8005f20:	b943      	cbnz	r3, 8005f34 <USBD_StdEPReq+0x94>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f22:	b138      	cbz	r0, 8005f34 <USBD_StdEPReq+0x94>
 8005f24:	2880      	cmp	r0, #128	; 0x80
 8005f26:	d005      	beq.n	8005f34 <USBD_StdEPReq+0x94>
 8005f28:	88cb      	ldrh	r3, [r1, #6]
 8005f2a:	b91b      	cbnz	r3, 8005f34 <USBD_StdEPReq+0x94>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005f2c:	4601      	mov	r1, r0
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f7fa fea0 	bl	8000c74 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 f905 	bl	8006144 <USBD_CtlSendStatus>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f3a:	2000      	movs	r0, #0
            USBD_LL_StallEP(pdev, ep_addr);
          }
        }
        USBD_CtlSendStatus(pdev);

        break;
 8005f3c:	bd38      	pop	{r3, r4, r5, pc}

      default:
        USBD_CtlError(pdev, req);
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff fdd6 	bl	8005af0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f44:	2000      	movs	r0, #0

        break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005f48:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d002      	beq.n	8005f56 <USBD_StdEPReq+0xb6>
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d012      	beq.n	8005f7a <USBD_StdEPReq+0xda>
 8005f54:	e021      	b.n	8005f9a <USBD_StdEPReq+0xfa>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f56:	b158      	cbz	r0, 8005f70 <USBD_StdEPReq+0xd0>
 8005f58:	2880      	cmp	r0, #128	; 0x80
 8005f5a:	d009      	beq.n	8005f70 <USBD_StdEPReq+0xd0>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005f5c:	4601      	mov	r1, r0
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f7fa fe88 	bl	8000c74 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005f64:	2180      	movs	r1, #128	; 0x80
 8005f66:	4620      	mov	r0, r4
 8005f68:	f7fa fe84 	bl	8000c74 <USBD_LL_StallEP>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f6c:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
          USBD_CtlError(pdev, req);
 8005f70:	4620      	mov	r0, r4
 8005f72:	f7ff fdbd 	bl	8005af0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f76:	2000      	movs	r0, #0
 8005f78:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005f7a:	884b      	ldrh	r3, [r1, #2]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f040 8095 	bne.w	80060ac <USBD_StdEPReq+0x20c>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005f82:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8005f86:	d003      	beq.n	8005f90 <USBD_StdEPReq+0xf0>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f88:	4601      	mov	r1, r0
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f7fa fe7a 	bl	8000c84 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 f8d7 	bl	8006144 <USBD_CtlSendStatus>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005f96:	2000      	movs	r0, #0
 8005f98:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlSendStatus(pdev);
        }
        break;

      default:
        USBD_CtlError(pdev, req);
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f7ff fda8 	bl	8005af0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005fa0:	2000      	movs	r0, #0
        }
        break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005fa4:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d002      	beq.n	8005fb2 <USBD_StdEPReq+0x112>
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d025      	beq.n	8005ffc <USBD_StdEPReq+0x15c>
 8005fb0:	e06d      	b.n	800608e <USBD_StdEPReq+0x1ee>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb2:	b130      	cbz	r0, 8005fc2 <USBD_StdEPReq+0x122>
 8005fb4:	2880      	cmp	r0, #128	; 0x80
 8005fb6:	d004      	beq.n	8005fc2 <USBD_StdEPReq+0x122>
        {
          USBD_CtlError(pdev, req);
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7ff fd99 	bl	8005af0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005fbe:	2000      	movs	r0, #0
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_CtlError(pdev, req);
          break;
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005fc2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005fc6:	d009      	beq.n	8005fdc <USBD_StdEPReq+0x13c>
 8005fc8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005fcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fd0:	0083      	lsls	r3, r0, #2
 8005fd2:	f103 0110 	add.w	r1, r3, #16
 8005fd6:	4421      	add	r1, r4
 8005fd8:	3104      	adds	r1, #4
 8005fda:	e007      	b.n	8005fec <USBD_StdEPReq+0x14c>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005fdc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_CtlError(pdev, req);
          break;
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005fe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fe4:	0083      	lsls	r3, r0, #2
 8005fe6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005fea:	18e1      	adds	r1, r4, r3
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;
 8005fec:	2500      	movs	r5, #0
 8005fee:	600d      	str	r5, [r1, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f878 	bl	80060e8 <USBD_CtlSendData>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8005ff8:	4628      	mov	r0, r5
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005ffc:	b252      	sxtb	r2, r2
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	da0c      	bge.n	800601c <USBD_StdEPReq+0x17c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006002:	f000 030f 	and.w	r3, r0, #15
 8006006:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800600a:	009d      	lsls	r5, r3, #2
 800600c:	4425      	add	r5, r4
 800600e:	69ab      	ldr	r3, [r5, #24]
 8006010:	b993      	cbnz	r3, 8006038 <USBD_StdEPReq+0x198>
          {
            USBD_CtlError(pdev, req);
 8006012:	4620      	mov	r0, r4
 8006014:	f7ff fd6c 	bl	8005af0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006018:	2000      	movs	r0, #0
        if((ep_addr & 0x80U) == 0x80U)
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
          {
            USBD_CtlError(pdev, req);
            break;
 800601a:	bd38      	pop	{r3, r4, r5, pc}
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800601c:	f000 030f 	and.w	r3, r0, #15
 8006020:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006024:	009d      	lsls	r5, r3, #2
 8006026:	4425      	add	r5, r4
 8006028:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 800602c:	b923      	cbnz	r3, 8006038 <USBD_StdEPReq+0x198>
          {
            USBD_CtlError(pdev, req);
 800602e:	4620      	mov	r0, r4
 8006030:	f7ff fd5e 	bl	8005af0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006034:	2000      	movs	r0, #0
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
          {
            USBD_CtlError(pdev, req);
            break;
 8006036:	bd38      	pop	{r3, r4, r5, pc}
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006038:	2a00      	cmp	r2, #0
 800603a:	da09      	bge.n	8006050 <USBD_StdEPReq+0x1b0>
 800603c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8006040:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006044:	0093      	lsls	r3, r2, #2
 8006046:	f103 0510 	add.w	r5, r3, #16
 800604a:	4425      	add	r5, r4
 800604c:	3504      	adds	r5, #4
 800604e:	e007      	b.n	8006060 <USBD_StdEPReq+0x1c0>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006050:	f000 027f 	and.w	r2, r0, #127	; 0x7f
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006054:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006058:	0093      	lsls	r3, r2, #2
 800605a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800605e:	18e5      	adds	r5, r4, r3
          &pdev->ep_out[ep_addr & 0x7FU];

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006060:	b108      	cbz	r0, 8006066 <USBD_StdEPReq+0x1c6>
 8006062:	2880      	cmp	r0, #128	; 0x80
 8006064:	d102      	bne.n	800606c <USBD_StdEPReq+0x1cc>
          {
            pep->status = 0x0000U;
 8006066:	2300      	movs	r3, #0
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	e009      	b.n	8006080 <USBD_StdEPReq+0x1e0>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800606c:	4601      	mov	r1, r0
 800606e:	4620      	mov	r0, r4
 8006070:	f7fa fdbc 	bl	8000bec <USBD_LL_IsStallEP>
 8006074:	b110      	cbz	r0, 800607c <USBD_StdEPReq+0x1dc>
          {
            pep->status = 0x0001U;
 8006076:	2301      	movs	r3, #1
 8006078:	602b      	str	r3, [r5, #0]
 800607a:	e001      	b.n	8006080 <USBD_StdEPReq+0x1e0>
          }
          else
          {
            pep->status = 0x0000U;
 800607c:	2300      	movs	r3, #0
 800607e:	602b      	str	r3, [r5, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006080:	2202      	movs	r2, #2
 8006082:	4629      	mov	r1, r5
 8006084:	4620      	mov	r0, r4
 8006086:	f000 f82f 	bl	80060e8 <USBD_CtlSendData>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 800608a:	2000      	movs	r0, #0
          {
            pep->status = 0x0000U;
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;
 800608c:	bd38      	pop	{r3, r4, r5, pc}

      default:
        USBD_CtlError(pdev, req);
 800608e:	4620      	mov	r0, r4
 8006090:	f7ff fd2e 	bl	8005af0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 8006094:	2000      	movs	r0, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;

      default:
        USBD_CtlError(pdev, req);
        break;
 8006096:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8006098:	4620      	mov	r0, r4
 800609a:	f7ff fd29 	bl	8005af0 <USBD_CtlError>
  default:
    USBD_CtlError(pdev, req);
    break;
  }

  return ret;
 800609e:	2000      	movs	r0, #0
      }
      break;

    default:
      USBD_CtlError(pdev, req);
      break;
 80060a0:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7ff fd24 	bl	8005af0 <USBD_CtlError>
    break;
  }

  return ret;
 80060a8:	2000      	movs	r0, #0
    }
    break;

  default:
    USBD_CtlError(pdev, req);
    break;
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
  }

  return ret;
 80060ac:	2000      	movs	r0, #0
}
 80060ae:	bd38      	pop	{r3, r4, r5, pc}

080060b0 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80060b0:	b1c8      	cbz	r0, 80060e6 <USBD_GetString+0x36>
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80060b2:	b570      	push	{r4, r5, r6, lr}
 80060b4:	460d      	mov	r5, r1
 80060b6:	4616      	mov	r6, r2
 80060b8:	4604      	mov	r4, r0
  uint8_t idx = 0U;

  if (desc != NULL)
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80060ba:	f7ff fcf1 	bl	8005aa0 <USBD_GetLen>
 80060be:	3001      	adds	r0, #1
 80060c0:	0040      	lsls	r0, r0, #1
 80060c2:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80060c4:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80060c6:	2303      	movs	r3, #3
 80060c8:	706b      	strb	r3, [r5, #1]
 80060ca:	2302      	movs	r3, #2

    while (*desc != '\0')
 80060cc:	e007      	b.n	80060de <USBD_GetString+0x2e>
    {
      unicode[idx++] = *desc++;
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	3401      	adds	r4, #1
 80060d4:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 80060d6:	3302      	adds	r3, #2
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2100      	movs	r1, #0
 80060dc:	54a9      	strb	r1, [r5, r2]
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
    unicode[idx++] = *(uint8_t *)(void *)len;
    unicode[idx++] = USB_DESC_TYPE_STRING;

    while (*desc != '\0')
 80060de:	7821      	ldrb	r1, [r4, #0]
 80060e0:	2900      	cmp	r1, #0
 80060e2:	d1f4      	bne.n	80060ce <USBD_GetString+0x1e>
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
 80060e6:	4770      	bx	lr

080060e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80060e8:	b510      	push	{r4, lr}
 80060ea:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060ec:	2202      	movs	r2, #2
 80060ee:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80060f2:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 80060f4:	6203      	str	r3, [r0, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80060f6:	460a      	mov	r2, r1
 80060f8:	2100      	movs	r1, #0
 80060fa:	f7fa fdd3 	bl	8000ca4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80060fe:	2000      	movs	r0, #0
 8006100:	bd10      	pop	{r4, pc}
 8006102:	bf00      	nop

08006104 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006104:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006106:	4613      	mov	r3, r2
 8006108:	460a      	mov	r2, r1
 800610a:	2100      	movs	r1, #0
 800610c:	f7fa fdca 	bl	8000ca4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006110:	2000      	movs	r0, #0
 8006112:	bd08      	pop	{r3, pc}

08006114 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006114:	b510      	push	{r4, lr}
 8006116:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006118:	2203      	movs	r2, #3
 800611a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800611e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006122:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006126:	460a      	mov	r2, r1
 8006128:	2100      	movs	r1, #0
 800612a:	f7fa fdc3 	bl	8000cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800612e:	2000      	movs	r0, #0
 8006130:	bd10      	pop	{r4, pc}
 8006132:	bf00      	nop

08006134 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006134:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006136:	4613      	mov	r3, r2
 8006138:	460a      	mov	r2, r1
 800613a:	2100      	movs	r1, #0
 800613c:	f7fa fdba 	bl	8000cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006140:	2000      	movs	r0, #0
 8006142:	bd08      	pop	{r3, pc}

08006144 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006144:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006146:	2304      	movs	r3, #4
 8006148:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800614c:	2300      	movs	r3, #0
 800614e:	461a      	mov	r2, r3
 8006150:	4619      	mov	r1, r3
 8006152:	f7fa fda7 	bl	8000ca4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006156:	2000      	movs	r0, #0
 8006158:	bd08      	pop	{r3, pc}
 800615a:	bf00      	nop

0800615c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800615c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800615e:	2305      	movs	r3, #5
 8006160:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006164:	2300      	movs	r3, #0
 8006166:	461a      	mov	r2, r3
 8006168:	4619      	mov	r1, r3
 800616a:	f7fa fda3 	bl	8000cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800616e:	2000      	movs	r0, #0
 8006170:	bd08      	pop	{r3, pc}
 8006172:	bf00      	nop

08006174 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006174:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006176:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800617a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800617e:	b15b      	cbz	r3, 8006198 <USBD_CDC_EP0_RxReady+0x24>
 8006180:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006184:	28ff      	cmp	r0, #255	; 0xff
 8006186:	d007      	beq.n	8006198 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800618e:	4621      	mov	r1, r4
 8006190:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8006192:	23ff      	movs	r3, #255	; 0xff
 8006194:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8006198:	2000      	movs	r0, #0
 800619a:	bd10      	pop	{r4, pc}

0800619c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800619c:	2343      	movs	r3, #67	; 0x43
 800619e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80061a0:	4800      	ldr	r0, [pc, #0]	; (80061a4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80061a2:	4770      	bx	lr
 80061a4:	20000074 	.word	0x20000074

080061a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80061a8:	2343      	movs	r3, #67	; 0x43
 80061aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80061ac:	4800      	ldr	r0, [pc, #0]	; (80061b0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80061ae:	4770      	bx	lr
 80061b0:	20000140 	.word	0x20000140

080061b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80061b4:	2343      	movs	r3, #67	; 0x43
 80061b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80061b8:	4800      	ldr	r0, [pc, #0]	; (80061bc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80061ba:	4770      	bx	lr
 80061bc:	200000fc 	.word	0x200000fc

080061c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80061c0:	230a      	movs	r3, #10
 80061c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80061c4:	4800      	ldr	r0, [pc, #0]	; (80061c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80061c6:	4770      	bx	lr
 80061c8:	200000f0 	.word	0x200000f0

080061cc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80061d0:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80061d4:	f7fa fd22 	bl	8000c1c <USBD_LL_GetRxDataSize>
 80061d8:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80061dc:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 80061e0:	b14b      	cbz	r3, 80061f6 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061e2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80061ec:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80061f0:	4798      	blx	r3

    return USBD_OK;
 80061f2:	2000      	movs	r0, #0
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 80061f6:	2002      	movs	r0, #2
  }
}
 80061f8:	bd38      	pop	{r3, r4, r5, pc}
 80061fa:	bf00      	nop

080061fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061fc:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80061fe:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006202:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298

  if(pdev->pClassData != NULL)
 8006206:	b1fa      	cbz	r2, 8006248 <USBD_CDC_DataIn+0x4c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006208:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800620c:	00a3      	lsls	r3, r4, #2
 800620e:	4403      	add	r3, r0
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	b1ab      	cbz	r3, 8006240 <USBD_CDC_DataIn+0x44>
 8006214:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8006218:	00b4      	lsls	r4, r6, #2
 800621a:	442c      	add	r4, r5
 800621c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800621e:	fbb3 f4f5 	udiv	r4, r3, r5
 8006222:	fb05 3314 	mls	r3, r5, r4, r3
 8006226:	b95b      	cbnz	r3, 8006240 <USBD_CDC_DataIn+0x44>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006228:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800622c:	0093      	lsls	r3, r2, #2
 800622e:	4403      	add	r3, r0
 8006230:	2400      	movs	r4, #0
 8006232:	61dc      	str	r4, [r3, #28]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006234:	4623      	mov	r3, r4
 8006236:	4622      	mov	r2, r4
 8006238:	f7fa fd34 	bl	8000ca4 <USBD_LL_Transmit>
    }
    else
    {
      hcdc->TxState = 0U;
    }
    return USBD_OK;
 800623c:	4620      	mov	r0, r4
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800623e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
      hcdc->TxState = 0U;
 8006240:	2000      	movs	r0, #0
 8006242:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8006246:	bd70      	pop	{r4, r5, r6, pc}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8006248:	2002      	movs	r0, #2
  }
}
 800624a:	bd70      	pop	{r4, r5, r6, pc}

0800624c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	4605      	mov	r5, r0
 8006252:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006254:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800625e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006262:	780b      	ldrb	r3, [r1, #0]
 8006264:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8006268:	d027      	beq.n	80062ba <USBD_CDC_Setup+0x6e>
 800626a:	2a20      	cmp	r2, #32
 800626c:	d154      	bne.n	8006318 <USBD_CDC_Setup+0xcc>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800626e:	88ca      	ldrh	r2, [r1, #6]
 8006270:	b1da      	cbz	r2, 80062aa <USBD_CDC_Setup+0x5e>
    {
      if (req->bmRequest & 0x80U)
 8006272:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006276:	d00c      	beq.n	8006292 <USBD_CDC_Setup+0x46>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006278:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	4631      	mov	r1, r6
 8006280:	7860      	ldrb	r0, [r4, #1]
 8006282:	4798      	blx	r3
                                                          (uint8_t *)(void *)hcdc->data,
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006284:	88e2      	ldrh	r2, [r4, #6]
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	f7ff ff2d 	bl	80060e8 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 800628e:	2000      	movs	r0, #0
 8006290:	e047      	b.n	8006322 <USBD_CDC_Setup+0xd6>

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8006292:	784b      	ldrb	r3, [r1, #1]
 8006294:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006298:	798b      	ldrb	r3, [r1, #6]
 800629a:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201

        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800629e:	88ca      	ldrh	r2, [r1, #6]
 80062a0:	4631      	mov	r1, r6
 80062a2:	f7ff ff37 	bl	8006114 <USBD_CtlPrepareRx>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80062a6:	2000      	movs	r0, #0
 80062a8:	e03b      	b.n	8006322 <USBD_CDC_Setup+0xd6>
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062aa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2200      	movs	r2, #0
 80062b2:	7848      	ldrb	r0, [r1, #1]
 80062b4:	4798      	blx	r3
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80062b6:	2000      	movs	r0, #0
 80062b8:	e033      	b.n	8006322 <USBD_CDC_Setup+0xd6>
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80062ba:	784b      	ldrb	r3, [r1, #1]
 80062bc:	2b0a      	cmp	r3, #10
 80062be:	d010      	beq.n	80062e2 <USBD_CDC_Setup+0x96>
 80062c0:	2b0b      	cmp	r3, #11
 80062c2:	d01d      	beq.n	8006300 <USBD_CDC_Setup+0xb4>
 80062c4:	bb23      	cbnz	r3, 8006310 <USBD_CDC_Setup+0xc4>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d105      	bne.n	80062da <USBD_CDC_Setup+0x8e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80062ce:	2202      	movs	r2, #2
 80062d0:	a901      	add	r1, sp, #4
 80062d2:	f7ff ff09 	bl	80060e8 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80062d6:	2000      	movs	r0, #0
 80062d8:	e023      	b.n	8006322 <USBD_CDC_Setup+0xd6>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 80062da:	f7ff fc09 	bl	8005af0 <USBD_CtlError>
			  ret = USBD_FAIL;
 80062de:	2002      	movs	r0, #2
 80062e0:	e01f      	b.n	8006322 <USBD_CDC_Setup+0xd6>
      }
      break;

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d106      	bne.n	80062f8 <USBD_CDC_Setup+0xac>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80062ea:	2201      	movs	r2, #1
 80062ec:	f10d 0107 	add.w	r1, sp, #7
 80062f0:	f7ff fefa 	bl	80060e8 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80062f4:	2000      	movs	r0, #0
 80062f6:	e014      	b.n	8006322 <USBD_CDC_Setup+0xd6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 80062f8:	f7ff fbfa 	bl	8005af0 <USBD_CtlError>
			  ret = USBD_FAIL;
 80062fc:	2002      	movs	r0, #2
 80062fe:	e010      	b.n	8006322 <USBD_CDC_Setup+0xd6>
      }
      break;

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006300:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006304:	2b03      	cmp	r3, #3
 8006306:	d00b      	beq.n	8006320 <USBD_CDC_Setup+0xd4>
      {
        USBD_CtlError (pdev, req);
 8006308:	f7ff fbf2 	bl	8005af0 <USBD_CtlError>
			  ret = USBD_FAIL;
 800630c:	2002      	movs	r0, #2
 800630e:	e008      	b.n	8006322 <USBD_CDC_Setup+0xd6>
      }
      break;

    default:
      USBD_CtlError (pdev, req);
 8006310:	f7ff fbee 	bl	8005af0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006314:	2002      	movs	r0, #2
      break;
 8006316:	e004      	b.n	8006322 <USBD_CDC_Setup+0xd6>
    }
    break;

  default:
    USBD_CtlError (pdev, req);
 8006318:	f7ff fbea 	bl	8005af0 <USBD_CtlError>
    ret = USBD_FAIL;
 800631c:	2002      	movs	r0, #2
    break;
 800631e:	e000      	b.n	8006322 <USBD_CDC_Setup+0xd6>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 8006320:	2000      	movs	r0, #0
    ret = USBD_FAIL;
    break;
  }

  return ret;
}
 8006322:	b002      	add	sp, #8
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	bf00      	nop

08006328 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4604      	mov	r4, r0
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800632c:	2181      	movs	r1, #129	; 0x81
 800632e:	f7fa fc99 	bl	8000c64 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006332:	2500      	movs	r5, #0
 8006334:	62e5      	str	r5, [r4, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006336:	2101      	movs	r1, #1
 8006338:	4620      	mov	r0, r4
 800633a:	f7fa fc93 	bl	8000c64 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800633e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006342:	2182      	movs	r1, #130	; 0x82
 8006344:	4620      	mov	r0, r4
 8006346:	f7fa fc8d 	bl	8000c64 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800634a:	6425      	str	r5, [r4, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800634c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8006350:	b14b      	cbz	r3, 8006366 <USBD_CDC_DeInit+0x3e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006352:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800635a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800635e:	f000 ff07 	bl	8007170 <free>
    pdev->pClassData = NULL;
 8006362:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
  }

  return ret;
}
 8006366:	2000      	movs	r0, #0
 8006368:	bd38      	pop	{r3, r4, r5, pc}
 800636a:	bf00      	nop

0800636c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4604      	mov	r4, r0
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006370:	7c03      	ldrb	r3, [r0, #16]
 8006372:	b98b      	cbnz	r3, 8006398 <USBD_CDC_Init+0x2c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006378:	2202      	movs	r2, #2
 800637a:	2181      	movs	r1, #129	; 0x81
 800637c:	f7fa fc66 	bl	8000c4c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006380:	2501      	movs	r5, #1
 8006382:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006388:	2202      	movs	r2, #2
 800638a:	4629      	mov	r1, r5
 800638c:	4620      	mov	r0, r4
 800638e:	f7fa fc5d 	bl	8000c4c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006392:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8006396:	e00e      	b.n	80063b6 <USBD_CDC_Init+0x4a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006398:	2340      	movs	r3, #64	; 0x40
 800639a:	2202      	movs	r2, #2
 800639c:	2181      	movs	r1, #129	; 0x81
 800639e:	f7fa fc55 	bl	8000c4c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063a2:	2501      	movs	r5, #1
 80063a4:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063a6:	2340      	movs	r3, #64	; 0x40
 80063a8:	2202      	movs	r2, #2
 80063aa:	4629      	mov	r1, r5
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7fa fc4d 	bl	8000c4c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063b2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063b6:	2308      	movs	r3, #8
 80063b8:	2203      	movs	r2, #3
 80063ba:	2182      	movs	r1, #130	; 0x82
 80063bc:	4620      	mov	r0, r4
 80063be:	f7fa fc45 	bl	8000c4c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063c2:	2301      	movs	r3, #1
 80063c4:	6423      	str	r3, [r4, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80063c6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063ca:	f000 fec9 	bl	8007160 <malloc>
 80063ce:	4605      	mov	r5, r0
 80063d0:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80063d4:	b1e8      	cbz	r0, 8006412 <USBD_CDC_Init+0xa6>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063d6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80063e4:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80063e8:	7c23      	ldrb	r3, [r4, #16]
 80063ea:	b94b      	cbnz	r3, 8006400 <USBD_CDC_Init+0x94>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80063f4:	2101      	movs	r1, #1
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7fa fc5c 	bl	8000cb4 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 80063fc:	2000      	movs	r0, #0
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006406:	2101      	movs	r1, #1
 8006408:	4620      	mov	r0, r4
 800640a:	f7fa fc53 	bl	8000cb4 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 800640e:	2000      	movs	r0, #0
 8006410:	bd38      	pop	{r3, r4, r5, pc}

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));

  if(pdev->pClassData == NULL)
  {
    ret = 1U;
 8006412:	2001      	movs	r0, #1
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
}
 8006414:	bd38      	pop	{r3, r4, r5, pc}
 8006416:	bf00      	nop

08006418 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8006418:	b119      	cbz	r1, 8006422 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800641a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 800641e:	2000      	movs	r0, #0
 8006420:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8006422:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;
  }

  return ret;
}
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop

08006428 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006428:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
 800642c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006430:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8006434:	2000      	movs	r0, #0
 8006436:	4770      	bx	lr

08006438 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006438:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->RxBuffer = pbuff;
 800643c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8006440:	2000      	movs	r0, #0
 8006442:	4770      	bx	lr

08006444 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006444:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 8006448:	b192      	cbz	r2, 8006470 <USBD_CDC_TransmitPacket+0x2c>
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800644a:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0U)
 800644c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8006450:	b983      	cbnz	r3, 8006474 <USBD_CDC_TransmitPacket+0x30>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006452:	2301      	movs	r3, #1
 8006454:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006458:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800645c:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800645e:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8006462:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8006466:	2181      	movs	r1, #129	; 0x81
 8006468:	f7fa fc1c 	bl	8000ca4 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800646c:	2000      	movs	r0, #0
 800646e:	bd08      	pop	{r3, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8006470:	2002      	movs	r0, #2
  }
}
 8006472:	4770      	bx	lr

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8006474:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006476:	bd08      	pop	{r3, pc}

08006478 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006478:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800647c:	b19a      	cbz	r2, 80064a6 <USBD_CDC_ReceivePacket+0x2e>
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800647e:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006480:	7c03      	ldrb	r3, [r0, #16]
 8006482:	b943      	cbnz	r3, 8006496 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006488:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800648c:	2101      	movs	r1, #1
 800648e:	f7fa fc11 	bl	8000cb4 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006492:	2000      	movs	r0, #0
 8006494:	bd08      	pop	{r3, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006496:	2340      	movs	r3, #64	; 0x40
 8006498:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800649c:	2101      	movs	r1, #1
 800649e:	f7fa fc09 	bl	8000cb4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80064a2:	2000      	movs	r0, #0
 80064a4:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USBD_FAIL;
 80064a6:	2002      	movs	r0, #2
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop

080064ac <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d03c      	beq.n	800652a <HAL_SPI_Init+0x7e>
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064b0:	b510      	push	{r4, lr}
 80064b2:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064b8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80064bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80064c0:	d104      	bne.n	80064cc <HAL_SPI_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064c2:	2300      	movs	r3, #0
 80064c4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064c8:	f7fa fd22 	bl	8000f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064cc:	2302      	movs	r3, #2
 80064ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	6813      	ldr	r3, [r2, #0]
 80064d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064da:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80064dc:	6821      	ldr	r1, [r4, #0]
 80064de:	6862      	ldr	r2, [r4, #4]
 80064e0:	68a3      	ldr	r3, [r4, #8]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	68e3      	ldr	r3, [r4, #12]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	6963      	ldr	r3, [r4, #20]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	69a3      	ldr	r3, [r4, #24]
 80064f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f6:	4313      	orrs	r3, r2
 80064f8:	69e2      	ldr	r2, [r4, #28]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	6a22      	ldr	r2, [r4, #32]
 80064fe:	4313      	orrs	r3, r2
 8006500:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006502:	431a      	orrs	r2, r3
 8006504:	600a      	str	r2, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006506:	6821      	ldr	r1, [r4, #0]
 8006508:	8b63      	ldrh	r3, [r4, #26]
 800650a:	f003 0204 	and.w	r2, r3, #4
 800650e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	69d3      	ldr	r3, [r2, #28]
 8006518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800651c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800651e:	2000      	movs	r0, #0
 8006520:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006522:	2301      	movs	r3, #1
 8006524:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8006528:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 800652a:	2001      	movs	r0, #1
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop

08006530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006530:	b510      	push	{r4, lr}
 8006532:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0); 
 8006534:	2200      	movs	r2, #0
 8006536:	4601      	mov	r1, r0
 8006538:	201a      	movs	r0, #26
 800653a:	f7fc fee5 	bl	8003308 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); 
 800653e:	201a      	movs	r0, #26
 8006540:	f7fc ff14 	bl	800336c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006544:	2400      	movs	r4, #0
 8006546:	9401      	str	r4, [sp, #4]
 8006548:	4b13      	ldr	r3, [pc, #76]	; (8006598 <HAL_InitTick+0x68>)
 800654a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800654c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006550:	645a      	str	r2, [r3, #68]	; 0x44
 8006552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800655c:	a902      	add	r1, sp, #8
 800655e:	a803      	add	r0, sp, #12
 8006560:	f7fc fc0c 	bl	8002d7c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006564:	f7fc fbfa 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <HAL_InitTick+0x6c>)
 800656a:	fba3 2300 	umull	r2, r3, r3, r0
 800656e:	0c9b      	lsrs	r3, r3, #18
 8006570:	3b01      	subs	r3, #1
  
  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8006572:	480b      	ldr	r0, [pc, #44]	; (80065a0 <HAL_InitTick+0x70>)
 8006574:	4a0b      	ldr	r2, [pc, #44]	; (80065a4 <HAL_InitTick+0x74>)
 8006576:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 8006578:	f240 32e7 	movw	r2, #999	; 0x3e7
 800657c:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800657e:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8006580:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006582:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8006584:	f7fd f868 	bl	8003658 <HAL_TIM_Base_Init>
 8006588:	b918      	cbnz	r0, 8006592 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 800658a:	4805      	ldr	r0, [pc, #20]	; (80065a0 <HAL_InitTick+0x70>)
 800658c:	f7fd f802 	bl	8003594 <HAL_TIM_Base_Start_IT>
 8006590:	e000      	b.n	8006594 <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006592:	2001      	movs	r0, #1
}
 8006594:	b008      	add	sp, #32
 8006596:	bd10      	pop	{r4, pc}
 8006598:	40023800 	.word	0x40023800
 800659c:	431bde83 	.word	0x431bde83
 80065a0:	20006020 	.word	0x20006020
 80065a4:	40014800 	.word	0x40014800

080065a8 <InitRW>:
transceiver_handle_t OpenUsbHostConnection();

/////////////////////////////////////////////////////////////////////////////
// Defs
void InitRW()
{
 80065a8:	b508      	push	{r3, lr}
    gHostConnection = OpenUsbHostConnection();
 80065aa:	f000 fd0f 	bl	8006fcc <OpenUsbHostConnection>
 80065ae:	4b01      	ldr	r3, [pc, #4]	; (80065b4 <InitRW+0xc>)
 80065b0:	6018      	str	r0, [r3, #0]
 80065b2:	bd08      	pop	{r3, pc}
 80065b4:	20006060 	.word	0x20006060

080065b8 <InitHW>:
    //! @todo. Implement VBUS detection
    return false;
}

void InitHW()
{
 80065b8:	b508      	push	{r3, lr}
    MX_USB_DEVICE_Init();
 80065ba:	f7fa fa03 	bl	80009c4 <MX_USB_DEVICE_Init>
    HW_TIMER_INIT();
 80065be:	f000 fb0b 	bl	8006bd8 <HW_TIMER_INIT>
 80065c2:	bd08      	pop	{r3, pc}

080065c4 <ring_buffer_init>:
#include "uassert.h"
#include <stdlib.h>

void ring_buffer_init( ring_buffer_t* s, void* buff, size_t buffSz )
{
    s->buff = buff;
 80065c4:	6001      	str	r1, [r0, #0]
    s->cap  = buffSz;
 80065c6:	6042      	str	r2, [r0, #4]
    s->head = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	6083      	str	r3, [r0, #8]
    s->tail = 0;
 80065cc:	60c3      	str	r3, [r0, #12]
 80065ce:	4770      	bx	lr

080065d0 <ring_buffer_write>:
}

void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
 80065d0:	b470      	push	{r4, r5, r6}
 80065d2:	b083      	sub	sp, #12
    const size_t nxt[2] = { -1, s->cap - 1 };
 80065d4:	f04f 33ff 	mov.w	r3, #4294967295
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	6843      	ldr	r3, [r0, #4]
 80065dc:	3b01      	subs	r3, #1
 80065de:	9301      	str	r3, [sp, #4]
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 80065e0:	2500      	movs	r5, #0
 80065e2:	e012      	b.n	800660a <ring_buffer_write+0x3a>
        s->buff[s->head] = ( (char const*)d )[i];
 80065e4:	6804      	ldr	r4, [r0, #0]
 80065e6:	6883      	ldr	r3, [r0, #8]
 80065e8:	5d4e      	ldrb	r6, [r1, r5]
 80065ea:	54e6      	strb	r6, [r4, r3]
void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 80065ec:	3501      	adds	r5, #1
 80065ee:	6884      	ldr	r4, [r0, #8]
 80065f0:	6843      	ldr	r3, [r0, #4]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	429c      	cmp	r4, r3
 80065f6:	bf14      	ite	ne
 80065f8:	2300      	movne	r3, #0
 80065fa:	2301      	moveq	r3, #1
 80065fc:	ae02      	add	r6, sp, #8
 80065fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006602:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8006606:	1ae4      	subs	r4, r4, r3
 8006608:	6084      	str	r4, [r0, #8]
 800660a:	4295      	cmp	r5, r2
 800660c:	d3ea      	bcc.n	80065e4 <ring_buffer_write+0x14>
        s->buff[s->head] = ( (char const*)d )[i];
    }
}
 800660e:	b003      	add	sp, #12
 8006610:	bc70      	pop	{r4, r5, r6}
 8006612:	4770      	bx	lr

08006614 <ring_buffer_consume>:

void ring_buffer_consume( ring_buffer_t* s, size_t len )
{
    s->tail += len;
 8006614:	68c3      	ldr	r3, [r0, #12]
 8006616:	4419      	add	r1, r3
 8006618:	60c1      	str	r1, [r0, #12]

    if ( s->tail >= s->cap ) {
 800661a:	6843      	ldr	r3, [r0, #4]
 800661c:	4299      	cmp	r1, r3
 800661e:	d301      	bcc.n	8006624 <ring_buffer_consume+0x10>
        s->tail = s->tail - s->cap;
 8006620:	1ac9      	subs	r1, r1, r3
 8006622:	60c1      	str	r1, [r0, #12]
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop

08006628 <ring_buffer_peek>:
    }
}

void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
 8006628:	b530      	push	{r4, r5, lr}
 800662a:	b083      	sub	sp, #12
    const size_t nxt[2] = { -1, s->cap - 1 };
 800662c:	f04f 33ff 	mov.w	r3, #4294967295
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6843      	ldr	r3, [r0, #4]
 8006634:	3b01      	subs	r3, #1
 8006636:	9301      	str	r3, [sp, #4]
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8006638:	68c5      	ldr	r5, [r0, #12]
 800663a:	2400      	movs	r4, #0
 800663c:	e010      	b.n	8006660 <ring_buffer_peek+0x38>
        ( (char*)b )[i] = s->buff[t];
 800663e:	6803      	ldr	r3, [r0, #0]
 8006640:	5d5b      	ldrb	r3, [r3, r5]
 8006642:	550b      	strb	r3, [r1, r4]
void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8006644:	3401      	adds	r4, #1
 8006646:	6843      	ldr	r3, [r0, #4]
 8006648:	3b01      	subs	r3, #1
 800664a:	429d      	cmp	r5, r3
 800664c:	bf14      	ite	ne
 800664e:	2300      	movne	r3, #0
 8006650:	2301      	moveq	r3, #1
 8006652:	f10d 0e08 	add.w	lr, sp, #8
 8006656:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 800665a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800665e:	1aed      	subs	r5, r5, r3
 8006660:	4294      	cmp	r4, r2
 8006662:	d3ec      	bcc.n	800663e <ring_buffer_peek+0x16>
        ( (char*)b )[i] = s->buff[t];
    }
}
 8006664:	b003      	add	sp, #12
 8006666:	bd30      	pop	{r4, r5, pc}

08006668 <ring_buffer_size>:

size_t ring_buffer_size( ring_buffer_t const* s )
{
    if ( s->head >= s->tail )
 8006668:	6883      	ldr	r3, [r0, #8]
 800666a:	68c2      	ldr	r2, [r0, #12]
 800666c:	4293      	cmp	r3, r2
 800666e:	d301      	bcc.n	8006674 <ring_buffer_size+0xc>
        return s->head - s->tail;
 8006670:	1a98      	subs	r0, r3, r2
 8006672:	4770      	bx	lr
    else
        return s->cap - s->tail + s->head;
 8006674:	6840      	ldr	r0, [r0, #4]
 8006676:	1a80      	subs	r0, r0, r2
 8006678:	4418      	add	r0, r3
}
 800667a:	4770      	bx	lr

0800667c <StartDefaultTask>:
// - Launches host communication process
// - Launches command queue/procedure process
// - Initializes hi-precision hardware timer
// - Initializes motor control logic
extern "C" void StartDefaultTask( void* nouse_ )
{
 800667c:	b508      	push	{r3, lr}
    InitHW();
 800667e:	f7ff ff9b 	bl	80065b8 <InitHW>
    InitRW();
 8006682:	f7ff ff91 	bl	80065a8 <InitRW>

    // launch hw timer manager
    //! @todo. implement this
    
    // this function never returns.
    AppProc_HostIO( NULL );
 8006686:	2000      	movs	r0, #0
 8006688:	f000 f8d6 	bl	8006838 <AppProc_HostIO>

0800668c <_ZL14stringToTokensPcPS_j>:
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
    // Consume all initial spaces
    while ( *str == ' ' )
 800668c:	7803      	ldrb	r3, [r0, #0]
 800668e:	2b20      	cmp	r3, #32
 8006690:	d101      	bne.n	8006696 <_ZL14stringToTokensPcPS_j+0xa>
        ++str;
 8006692:	3001      	adds	r0, #1
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
    // Consume all initial spaces
    while ( *str == ' ' )
 8006694:	e7fa      	b.n	800668c <_ZL14stringToTokensPcPS_j>
        ++str;

    // Ignore space-only string.
    if ( *str == 0 )
 8006696:	b1eb      	cbz	r3, 80066d4 <_ZL14stringToTokensPcPS_j+0x48>

    putstr( "warning: failed to process binary data\n" );
}

int stringToTokens( char* str, char* argv[], size_t argv_len )
{
 8006698:	b470      	push	{r4, r5, r6}
 800669a:	4603      	mov	r3, r0
 800669c:	2400      	movs	r4, #0
 800669e:	e001      	b.n	80066a4 <_ZL14stringToTokensPcPS_j+0x18>

        argv[num_token++] = str;
        if ( *head == 0 )
            break;

        for ( *head = 0; *++head == ' '; ) { }
 80066a0:	4603      	mov	r3, r0
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 80066a2:	4634      	mov	r4, r6
        return 0;

    int   num_token = 0;
    char* head      = str;

    for ( ; num_token < (int)argv_len; ) {
 80066a4:	4294      	cmp	r4, r2
 80066a6:	da17      	bge.n	80066d8 <_ZL14stringToTokensPcPS_j+0x4c>
        if ( *head != ' ' && *head != '\0' ) {
 80066a8:	781d      	ldrb	r5, [r3, #0]
 80066aa:	2d20      	cmp	r5, #32
 80066ac:	d002      	beq.n	80066b4 <_ZL14stringToTokensPcPS_j+0x28>
 80066ae:	b10d      	cbz	r5, 80066b4 <_ZL14stringToTokensPcPS_j+0x28>
            ++head;
 80066b0:	3301      	adds	r3, #1
            continue;
 80066b2:	e7f7      	b.n	80066a4 <_ZL14stringToTokensPcPS_j+0x18>
        }

        argv[num_token++] = str;
 80066b4:	1c66      	adds	r6, r4, #1
 80066b6:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
        if ( *head == 0 )
 80066ba:	781d      	ldrb	r5, [r3, #0]
 80066bc:	b175      	cbz	r5, 80066dc <_ZL14stringToTokensPcPS_j+0x50>
            break;

        for ( *head = 0; *++head == ' '; ) { }
 80066be:	2000      	movs	r0, #0
 80066c0:	7018      	strb	r0, [r3, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d0fb      	beq.n	80066c4 <_ZL14stringToTokensPcPS_j+0x38>

        if ( *head == 0 )
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e7      	bne.n	80066a0 <_ZL14stringToTokensPcPS_j+0x14>
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 80066d0:	4630      	mov	r0, r6
 80066d2:	e004      	b.n	80066de <_ZL14stringToTokensPcPS_j+0x52>
    while ( *str == ' ' )
        ++str;

    // Ignore space-only string.
    if ( *str == 0 )
        return 0;
 80066d4:	2000      	movs	r0, #0

        str = head; // Non-space character pos
    }

    return num_token;
}
 80066d6:	4770      	bx	lr
 80066d8:	4620      	mov	r0, r4
 80066da:	e000      	b.n	80066de <_ZL14stringToTokensPcPS_j+0x52>
        if ( *head != ' ' && *head != '\0' ) {
            ++head;
            continue;
        }

        argv[num_token++] = str;
 80066dc:	4630      	mov	r0, r6

        str = head; // Non-space character pos
    }

    return num_token;
}
 80066de:	bc70      	pop	{r4, r5, r6}
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop

080066e4 <_ZL17flushTransmitDatav>:
    memcpy( s_hostTrBuf + s_hostTrBufHead - len, d, len );
    --s_writingTask;
}

void flushTransmitData()
{
 80066e4:	b538      	push	{r3, r4, r5, lr}
    if ( s_hostTrBufHead == 0 )
 80066e6:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <_ZL17flushTransmitDatav+0x40>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	b1d3      	cbz	r3, 8006722 <_ZL17flushTransmitDatav+0x3e>
        return;

    // Wait for all async write process done
    while ( s_writingTask > 0 )
 80066ec:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <_ZL17flushTransmitDatav+0x44>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dd08      	ble.n	8006706 <_ZL17flushTransmitDatav+0x22>
        taskYIELD();
 80066f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <_ZL17flushTransmitDatav+0x48>)
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	f3bf 8f6f 	isb	sy
{
    if ( s_hostTrBufHead == 0 )
        return;

    // Wait for all async write process done
    while ( s_writingTask > 0 )
 8006704:	e7f2      	b.n	80066ec <_ZL17flushTransmitDatav+0x8>
        taskYIELD();

    s_bFlushing = true;
 8006706:	4c0a      	ldr	r4, [pc, #40]	; (8006730 <_ZL17flushTransmitDatav+0x4c>)
 8006708:	2301      	movs	r3, #1
 800670a:	7023      	strb	r3, [r4, #0]
    td_write( gHostConnection, s_hostTrBuf, s_hostTrBufHead );
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <_ZL17flushTransmitDatav+0x50>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4d04      	ldr	r5, [pc, #16]	; (8006724 <_ZL17flushTransmitDatav+0x40>)
}

//! Write data into the transceiver
static inline transceiver_result_t td_write( transceiver_handle_t desc, char* buf, size_t wrcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 8006712:	6803      	ldr	r3, [r0, #0]
    return td->write( (void*)desc, buf, wrcnt );
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	682a      	ldr	r2, [r5, #0]
 8006718:	4907      	ldr	r1, [pc, #28]	; (8006738 <_ZL17flushTransmitDatav+0x54>)
 800671a:	4798      	blx	r3
    s_hostTrBufHead = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	602b      	str	r3, [r5, #0]
    s_bFlushing     = false;
 8006720:	7023      	strb	r3, [r4, #0]
 8006722:	bd38      	pop	{r3, r4, r5, pc}
 8006724:	20002f0c 	.word	0x20002f0c
 8006728:	20003f10 	.word	0x20003f10
 800672c:	e000ed04 	.word	0xe000ed04
 8006730:	20002f09 	.word	0x20002f09
 8006734:	20006060 	.word	0x20006060
 8006738:	20002f10 	.word	0x20002f10

0800673c <_ZL12readHostConnPvj>:
}

/////////////////////////////////////////////////////////////////////////////
// Utility defs
bool readHostConn( void* dst, size_t len )
{
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	4606      	mov	r6, r0
 8006740:	460d      	mov	r5, r1
    size_t numRetries = 5;
 8006742:	2705      	movs	r7, #5
    for ( ; numRetries; ) {
 8006744:	b1cf      	cbz	r7, 800677a <_ZL12readHostConnPvj+0x3e>
        // Flush transmit data before try read
        flushTransmitData();
 8006746:	f7ff ffcd 	bl	80066e4 <_ZL17flushTransmitDatav>

        auto result = td_read( gHostConnection, (char*)dst, len );
 800674a:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <_ZL12readHostConnPvj+0x44>)
 800674c:	6818      	ldr	r0, [r3, #0]
typedef intptr_t transceiver_handle_t;

//! Read data from the transceiver.
static inline transceiver_result_t td_read( transceiver_handle_t desc, char* buf, size_t rdcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 800674e:	6803      	ldr	r3, [r0, #0]
    return td->read( (void*)desc, buf, rdcnt );
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	462a      	mov	r2, r5
 8006754:	4631      	mov	r1, r6
 8006756:	4798      	blx	r3

        // If there's nothing to read, sleep for 1 cycle
        if ( result == 0 ) {
 8006758:	4604      	mov	r4, r0
 800675a:	b918      	cbnz	r0, 8006764 <_ZL12readHostConnPvj+0x28>
            vTaskDelay( 1 );
 800675c:	2001      	movs	r0, #1
 800675e:	f7fe f89b 	bl	8004898 <vTaskDelay>
            continue;
 8006762:	e7ef      	b.n	8006744 <_ZL12readHostConnPvj+0x8>
        }
        else if ( result < 0 ) {
 8006764:	2800      	cmp	r0, #0
 8006766:	da03      	bge.n	8006770 <_ZL12readHostConnPvj+0x34>
            vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8006768:	200a      	movs	r0, #10
 800676a:	f7fe f895 	bl	8004898 <vTaskDelay>
            --numRetries;
 800676e:	3f01      	subs	r7, #1
        }

        len -= result;
        dst = (char*)dst + result;
 8006770:	4426      	add	r6, r4

        if ( len == 0 ) {
 8006772:	1b2d      	subs	r5, r5, r4
 8006774:	d1e6      	bne.n	8006744 <_ZL12readHostConnPvj+0x8>
            return true;
 8006776:	2001      	movs	r0, #1
 8006778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }
    return false;
 800677a:	2000      	movs	r0, #0
}
 800677c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800677e:	bf00      	nop
 8006780:	20006060 	.word	0x20006060

08006784 <_ZL13apndToHostBufPKvj>:

    return num_token;
}

void apndToHostBuf( void const* d, size_t len )
{
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	460a      	mov	r2, r1
    uassert( s_hostTrBufHead + len < sizeof( s_hostTrBuf ) );
 8006788:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <_ZL13apndToHostBufPKvj+0x5c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	440b      	add	r3, r1
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006792:	d305      	bcc.n	80067a0 <_ZL13apndToHostBufPKvj+0x1c>
 8006794:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <_ZL13apndToHostBufPKvj+0x60>)
 8006796:	4a14      	ldr	r2, [pc, #80]	; (80067e8 <_ZL13apndToHostBufPKvj+0x64>)
 8006798:	21f1      	movs	r1, #241	; 0xf1
 800679a:	4814      	ldr	r0, [pc, #80]	; (80067ec <_ZL13apndToHostBufPKvj+0x68>)
 800679c:	f000 fc7c 	bl	8007098 <__assert_func>

    while ( s_bFlushing )
 80067a0:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <_ZL13apndToHostBufPKvj+0x6c>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80067a8:	d008      	beq.n	80067bc <_ZL13apndToHostBufPKvj+0x38>
        taskYIELD();
 80067aa:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 80067ae:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <_ZL13apndToHostBufPKvj+0x70>)
 80067b0:	601c      	str	r4, [r3, #0]
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	f3bf 8f6f 	isb	sy

void apndToHostBuf( void const* d, size_t len )
{
    uassert( s_hostTrBufHead + len < sizeof( s_hostTrBuf ) );

    while ( s_bFlushing )
 80067ba:	e7f1      	b.n	80067a0 <_ZL13apndToHostBufPKvj+0x1c>
        taskYIELD();

    ++s_writingTask;
 80067bc:	4c0e      	ldr	r4, [pc, #56]	; (80067f8 <_ZL13apndToHostBufPKvj+0x74>)
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	6023      	str	r3, [r4, #0]
    s_hostTrBufHead += len;
 80067c4:	4906      	ldr	r1, [pc, #24]	; (80067e0 <_ZL13apndToHostBufPKvj+0x5c>)
 80067c6:	680b      	ldr	r3, [r1, #0]
 80067c8:	18d5      	adds	r5, r2, r3
 80067ca:	600d      	str	r5, [r1, #0]
    memcpy( s_hostTrBuf + s_hostTrBufHead - len, d, len );
 80067cc:	4601      	mov	r1, r0
 80067ce:	480b      	ldr	r0, [pc, #44]	; (80067fc <_ZL13apndToHostBufPKvj+0x78>)
 80067d0:	4418      	add	r0, r3
 80067d2:	f000 fcd5 	bl	8007180 <memcpy>
    --s_writingTask;
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	3b01      	subs	r3, #1
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	20002f0c 	.word	0x20002f0c
 80067e4:	0800858c 	.word	0x0800858c
 80067e8:	08008564 	.word	0x08008564
 80067ec:	080085bc 	.word	0x080085bc
 80067f0:	20002f09 	.word	0x20002f09
 80067f4:	e000ed04 	.word	0xe000ed04
 80067f8:	20003f10 	.word	0x20003f10
 80067fc:	20002f10 	.word	0x20002f10

08006800 <_ZN3upp4hash8fnv1a_32EPKcm>:
constexpr uint32_t prime_32_const = 0x1000193;
constexpr uint64_t val_64_const   = 0xcbf29ce484222325;
constexpr uint64_t prime_64_const = 0x100000001b3;

inline constexpr uint32_t fnv1a_32( const char* const str, const uint32_t value = val_32_const ) noexcept
{
 8006800:	b508      	push	{r3, lr}
    return ( str[0] == '\0' ) ? value : fnv1a_32( &str[1], ( value ^ uint32_t( str[0] ) ) * prime_32_const );
 8006802:	7803      	ldrb	r3, [r0, #0]
 8006804:	b1a3      	cbz	r3, 8006830 <_ZN3upp4hash8fnv1a_32EPKcm+0x30>
 8006806:	1c42      	adds	r2, r0, #1
 8006808:	4059      	eors	r1, r3
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <_ZN3upp4hash8fnv1a_32EPKcm+0x34>)
 800680c:	fb03 f101 	mul.w	r1, r3, r1
 8006810:	7843      	ldrb	r3, [r0, #1]
 8006812:	b16b      	cbz	r3, 8006830 <_ZN3upp4hash8fnv1a_32EPKcm+0x30>
 8006814:	4059      	eors	r1, r3
 8006816:	4b07      	ldr	r3, [pc, #28]	; (8006834 <_ZN3upp4hash8fnv1a_32EPKcm+0x34>)
 8006818:	fb03 f101 	mul.w	r1, r3, r1
 800681c:	7853      	ldrb	r3, [r2, #1]
 800681e:	b13b      	cbz	r3, 8006830 <_ZN3upp4hash8fnv1a_32EPKcm+0x30>
 8006820:	4059      	eors	r1, r3
 8006822:	4b04      	ldr	r3, [pc, #16]	; (8006834 <_ZN3upp4hash8fnv1a_32EPKcm+0x34>)
 8006824:	fb03 f101 	mul.w	r1, r3, r1
 8006828:	1c90      	adds	r0, r2, #2
 800682a:	f7ff ffe9 	bl	8006800 <_ZN3upp4hash8fnv1a_32EPKcm>
 800682e:	4601      	mov	r1, r0
}
 8006830:	4608      	mov	r0, r1
 8006832:	bd08      	pop	{r3, pc}
 8006834:	01000193 	.word	0x01000193

08006838 <AppProc_HostIO>:
static bool readHostConn( void* dst, size_t len );

/////////////////////////////////////////////////////////////////////////////
// Primary Procedure
extern "C" _Noreturn void AppProc_HostIO( void* nouse_ )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
        if ( readHostConn( buf, len ) == false )
            continue;

        // Call command procedure
        ( PACKET_IS_STR( packet ) ? stringCmdHandler : binaryCmdHandler )( buf, len );
    }
 800683e:	466c      	mov	r4, sp
{
    packetinfo_t packet;

    for ( ;; ) {
        // Check if read data has valid protocol.
        if ( readHostConn( &packet, PACKET_SIZE ) == false )
 8006840:	2104      	movs	r1, #4
 8006842:	1878      	adds	r0, r7, r1
 8006844:	f7ff ff7a 	bl	800673c <_ZL12readHostConnPvj>
 8006848:	b1f8      	cbz	r0, 800688a <AppProc_HostIO+0x52>
            continue;

        // Check packet validity
        // If any data was delivered in bad condition, it'll consume all pending bytes.
        if ( PACKET_IS_PACKET( packet ) == false )
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 8006850:	f1b3 4f68 	cmp.w	r3, #3892314112	; 0xe8000000
 8006854:	d119      	bne.n	800688a <AppProc_HostIO+0x52>
            continue;

        // Should be aware of maximum stack depth!
        // Packet size must be less than 2kByte at once
        // Allocate packet receive memory using VLA
        auto len = PACKET_LENGTH( packet );
 8006856:	f3c1 0516 	ubfx	r5, r1, #0, #23
        char buf[len + 1];
 800685a:	f105 0308 	add.w	r3, r5, #8
 800685e:	f023 0307 	bic.w	r3, r3, #7
 8006862:	ebad 0d03 	sub.w	sp, sp, r3
 8006866:	466e      	mov	r6, sp
        if ( readHostConn( buf, len ) == false )
 8006868:	4629      	mov	r1, r5
 800686a:	4668      	mov	r0, sp
 800686c:	f7ff ff66 	bl	800673c <_ZL12readHostConnPvj>
 8006870:	b158      	cbz	r0, 800688a <AppProc_HostIO+0x52>
            continue;

        // Call command procedure
        ( PACKET_IS_STR( packet ) ? stringCmdHandler : binaryCmdHandler )( buf, len );
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006878:	d001      	beq.n	800687e <AppProc_HostIO+0x46>
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <AppProc_HostIO+0x58>)
 800687c:	e000      	b.n	8006880 <AppProc_HostIO+0x48>
 800687e:	4b05      	ldr	r3, [pc, #20]	; (8006894 <AppProc_HostIO+0x5c>)
 8006880:	4629      	mov	r1, r5
 8006882:	4630      	mov	r0, r6
 8006884:	4798      	blx	r3
 8006886:	46a5      	mov	sp, r4
 8006888:	e7d9      	b.n	800683e <AppProc_HostIO+0x6>
    packetinfo_t packet;

    for ( ;; ) {
        // Check if read data has valid protocol.
        if ( readHostConn( &packet, PACKET_SIZE ) == false )
            continue;
 800688a:	46a5      	mov	sp, r4
 800688c:	e7d7      	b.n	800683e <AppProc_HostIO+0x6>
 800688e:	bf00      	nop
 8006890:	08006981 	.word	0x08006981
 8006894:	08006a65 	.word	0x08006a65

08006898 <API_SendHostBinary>:
}

/////////////////////////////////////////////////////////////////////////////
// Global function defs
void API_SendHostBinary( void const* data, size_t len )
{
 8006898:	b530      	push	{r4, r5, lr}
 800689a:	b083      	sub	sp, #12
 800689c:	4605      	mov	r5, r0
 800689e:	460c      	mov	r4, r1
    packetinfo_t packet = PACKET_MAKE( false, len );
 80068a0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80068a4:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
 80068a8:	a802      	add	r0, sp, #8
 80068aa:	f840 3d04 	str.w	r3, [r0, #-4]!
    apndToHostBuf( &packet, sizeof packet );
 80068ae:	2104      	movs	r1, #4
 80068b0:	f7ff ff68 	bl	8006784 <_ZL13apndToHostBufPKvj>
    apndToHostBuf( data, len );
 80068b4:	4621      	mov	r1, r4
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7ff ff64 	bl	8006784 <_ZL13apndToHostBufPKvj>
}
 80068bc:	b003      	add	sp, #12
 80068be:	bd30      	pop	{r4, r5, pc}

080068c0 <API_SendHostString>:

void API_SendHostString( void const* data, size_t len )
{
 80068c0:	b530      	push	{r4, r5, lr}
 80068c2:	b083      	sub	sp, #12
 80068c4:	4605      	mov	r5, r0
 80068c6:	460c      	mov	r4, r1
    packetinfo_t packet = PACKET_MAKE( true, len );
 80068c8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80068cc:	f043 4368 	orr.w	r3, r3, #3892314112	; 0xe8000000
 80068d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068d4:	a802      	add	r0, sp, #8
 80068d6:	f840 3d04 	str.w	r3, [r0, #-4]!
    apndToHostBuf( &packet, sizeof packet );
 80068da:	2104      	movs	r1, #4
 80068dc:	f7ff ff52 	bl	8006784 <_ZL13apndToHostBufPKvj>
    apndToHostBuf( data, len );
 80068e0:	4621      	mov	r1, r4
 80068e2:	4628      	mov	r0, r5
 80068e4:	f7ff ff4e 	bl	8006784 <_ZL13apndToHostBufPKvj>
}
 80068e8:	b003      	add	sp, #12
 80068ea:	bd30      	pop	{r4, r5, pc}

080068ec <print>:
{
    apndToHostBuf( data, len );
}

extern "C" void print( char const* fmt, ... )
{
 80068ec:	b40f      	push	{r0, r1, r2, r3}
 80068ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	f107 0320 	add.w	r3, r7, #32
 80068f8:	f853 5b04 	ldr.w	r5, [r3], #4
    va_list vp;
    va_list vp2;
    va_start( vp, fmt );
 80068fc:	607b      	str	r3, [r7, #4]
    size_t allocsz = vsnprintf( NULL, 0, fmt, vp ) + 1;
 80068fe:	462a      	mov	r2, r5
 8006900:	2100      	movs	r1, #0
 8006902:	4608      	mov	r0, r1
 8006904:	f001 f81a 	bl	800793c <vsniprintf>
 8006908:	1c46      	adds	r6, r0, #1
    va_end( vp );

    va_copy( vp2, vp );
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	603a      	str	r2, [r7, #0]
    char* buf = (char*)alloca( allocsz );
 800690e:	300f      	adds	r0, #15
 8006910:	f020 0007 	bic.w	r0, r0, #7
 8006914:	ebad 0d00 	sub.w	sp, sp, r0
    vsprintf( buf, fmt, vp2 );
 8006918:	4629      	mov	r1, r5
 800691a:	4668      	mov	r0, sp
 800691c:	f001 f834 	bl	8007988 <vsiprintf>
    va_end( vp2 );

    API_SendHostString( buf, allocsz );
 8006920:	4631      	mov	r1, r6
 8006922:	4668      	mov	r0, sp
 8006924:	f7ff ffcc 	bl	80068c0 <API_SendHostString>
}
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006930:	b004      	add	sp, #16
 8006932:	4770      	bx	lr

08006934 <putstr>:

extern "C" int putstr( char const* txt )
{
 8006934:	b510      	push	{r4, lr}
 8006936:	4604      	mov	r4, r0
    API_SendHostString( txt, strlen( txt ) + 1 );
 8006938:	f7f9 fc60 	bl	80001fc <strlen>
 800693c:	1c41      	adds	r1, r0, #1
 800693e:	4620      	mov	r0, r4
 8006940:	f7ff ffbe 	bl	80068c0 <API_SendHostString>
    return 0;
}
 8006944:	2000      	movs	r0, #0
 8006946:	bd10      	pop	{r4, pc}

08006948 <AppHandler_CaptureCommand>:
    }
}

extern "C" __weak_symbol bool
AppHandler_CaptureCommand( int argc, char* argv[] )
{
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	4605      	mov	r5, r0
 800694c:	460e      	mov	r6, r1
    print( "info: Receiving :: " );
 800694e:	4809      	ldr	r0, [pc, #36]	; (8006974 <AppHandler_CaptureCommand+0x2c>)
 8006950:	f7ff ffcc 	bl	80068ec <print>
    for ( int i = 0; i < argc; i++ ) {
 8006954:	2400      	movs	r4, #0
 8006956:	42ac      	cmp	r4, r5
 8006958:	da06      	bge.n	8006968 <AppHandler_CaptureCommand+0x20>
        print( "%s ", argv[i] );
 800695a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800695e:	4806      	ldr	r0, [pc, #24]	; (8006978 <AppHandler_CaptureCommand+0x30>)
 8006960:	f7ff ffc4 	bl	80068ec <print>

extern "C" __weak_symbol bool
AppHandler_CaptureCommand( int argc, char* argv[] )
{
    print( "info: Receiving :: " );
    for ( int i = 0; i < argc; i++ ) {
 8006964:	3401      	adds	r4, #1
 8006966:	e7f6      	b.n	8006956 <AppHandler_CaptureCommand+0xe>
        print( "%s ", argv[i] );
    }
    putstr( "\n" );
 8006968:	4804      	ldr	r0, [pc, #16]	; (800697c <AppHandler_CaptureCommand+0x34>)
 800696a:	f7ff ffe3 	bl	8006934 <putstr>
    return true;
}
 800696e:	2001      	movs	r0, #1
 8006970:	bd70      	pop	{r4, r5, r6, pc}
 8006972:	bf00      	nop
 8006974:	080085d4 	.word	0x080085d4
 8006978:	080085e8 	.word	0x080085e8
 800697c:	080085ec 	.word	0x080085ec

08006980 <_ZL16stringCmdHandlerPcj>:

/////////////////////////////////////////////////////////////////////////////
//

void stringCmdHandler( char* str, size_t len )
{
 8006980:	b530      	push	{r4, r5, lr}
 8006982:	b091      	sub	sp, #68	; 0x44
    // Append last byte as null ch
    str[len + 1] = '\0';
 8006984:	3101      	adds	r1, #1
 8006986:	2200      	movs	r2, #0
 8006988:	5442      	strb	r2, [r0, r1]

    // Make tokens from string ... Maximum token = 16
    char* argv[16];
    int   argc = stringToTokens( str, argv, sizeof( argv ) / sizeof( *argv ) );
 800698a:	2210      	movs	r2, #16
 800698c:	4669      	mov	r1, sp
 800698e:	f7ff fe7d 	bl	800668c <_ZL14stringToTokensPcPS_j>

    if ( argc == 0 )
 8006992:	2800      	cmp	r0, #0
 8006994:	d054      	beq.n	8006a40 <_ZL16stringCmdHandlerPcj+0xc0>
 8006996:	4604      	mov	r4, r0
        return;

#define STRCASE( v ) upp::hash::fnv1a_32( v )
    uint32_t cmdidx = STRCASE( argv[0] );
 8006998:	9b00      	ldr	r3, [sp, #0]
constexpr uint64_t val_64_const   = 0xcbf29ce484222325;
constexpr uint64_t prime_64_const = 0x100000001b3;

inline constexpr uint32_t fnv1a_32( const char* const str, const uint32_t value = val_32_const ) noexcept
{
    return ( str[0] == '\0' ) ? value : fnv1a_32( &str[1], ( value ^ uint32_t( str[0] ) ) * prime_32_const );
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	2a00      	cmp	r2, #0
 800699e:	d037      	beq.n	8006a10 <_ZL16stringCmdHandlerPcj+0x90>
 80069a0:	1c5d      	adds	r5, r3, #1
 80069a2:	4928      	ldr	r1, [pc, #160]	; (8006a44 <_ZL16stringCmdHandlerPcj+0xc4>)
 80069a4:	4051      	eors	r1, r2
 80069a6:	4828      	ldr	r0, [pc, #160]	; (8006a48 <_ZL16stringCmdHandlerPcj+0xc8>)
 80069a8:	fb00 f001 	mul.w	r0, r0, r1
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	b383      	cbz	r3, 8006a12 <_ZL16stringCmdHandlerPcj+0x92>
 80069b0:	4058      	eors	r0, r3
 80069b2:	4b25      	ldr	r3, [pc, #148]	; (8006a48 <_ZL16stringCmdHandlerPcj+0xc8>)
 80069b4:	fb03 f000 	mul.w	r0, r3, r0
 80069b8:	786b      	ldrb	r3, [r5, #1]
 80069ba:	b353      	cbz	r3, 8006a12 <_ZL16stringCmdHandlerPcj+0x92>
 80069bc:	1ca9      	adds	r1, r5, #2
 80069be:	4058      	eors	r0, r3
 80069c0:	4b21      	ldr	r3, [pc, #132]	; (8006a48 <_ZL16stringCmdHandlerPcj+0xc8>)
 80069c2:	fb03 f000 	mul.w	r0, r3, r0
 80069c6:	78ab      	ldrb	r3, [r5, #2]
 80069c8:	b31b      	cbz	r3, 8006a12 <_ZL16stringCmdHandlerPcj+0x92>
 80069ca:	1cea      	adds	r2, r5, #3
 80069cc:	4058      	eors	r0, r3
 80069ce:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <_ZL16stringCmdHandlerPcj+0xc8>)
 80069d0:	fb03 f000 	mul.w	r0, r3, r0
 80069d4:	784b      	ldrb	r3, [r1, #1]
 80069d6:	b1e3      	cbz	r3, 8006a12 <_ZL16stringCmdHandlerPcj+0x92>
 80069d8:	3102      	adds	r1, #2
 80069da:	4058      	eors	r0, r3
 80069dc:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <_ZL16stringCmdHandlerPcj+0xc8>)
 80069de:	fb03 f000 	mul.w	r0, r3, r0
 80069e2:	7853      	ldrb	r3, [r2, #1]
 80069e4:	b1ab      	cbz	r3, 8006a12 <_ZL16stringCmdHandlerPcj+0x92>
 80069e6:	3202      	adds	r2, #2
 80069e8:	4058      	eors	r0, r3
 80069ea:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <_ZL16stringCmdHandlerPcj+0xc8>)
 80069ec:	fb03 f000 	mul.w	r0, r3, r0
 80069f0:	784b      	ldrb	r3, [r1, #1]
 80069f2:	b173      	cbz	r3, 8006a12 <_ZL16stringCmdHandlerPcj+0x92>
 80069f4:	4043      	eors	r3, r0
 80069f6:	4814      	ldr	r0, [pc, #80]	; (8006a48 <_ZL16stringCmdHandlerPcj+0xc8>)
 80069f8:	fb00 f003 	mul.w	r0, r0, r3
 80069fc:	788b      	ldrb	r3, [r1, #2]
 80069fe:	b143      	cbz	r3, 8006a12 <_ZL16stringCmdHandlerPcj+0x92>
 8006a00:	4043      	eors	r3, r0
 8006a02:	4911      	ldr	r1, [pc, #68]	; (8006a48 <_ZL16stringCmdHandlerPcj+0xc8>)
 8006a04:	fb01 f103 	mul.w	r1, r1, r3
 8006a08:	1c90      	adds	r0, r2, #2
 8006a0a:	f7ff fef9 	bl	8006800 <_ZN3upp4hash8fnv1a_32EPKcm>
 8006a0e:	e000      	b.n	8006a12 <_ZL16stringCmdHandlerPcj+0x92>
 8006a10:	480c      	ldr	r0, [pc, #48]	; (8006a44 <_ZL16stringCmdHandlerPcj+0xc4>)

    switch ( cmdidx ) {
 8006a12:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <_ZL16stringCmdHandlerPcj+0xcc>)
 8006a14:	4298      	cmp	r0, r3
 8006a16:	d006      	beq.n	8006a26 <_ZL16stringCmdHandlerPcj+0xa6>
 8006a18:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <_ZL16stringCmdHandlerPcj+0xd0>)
 8006a1a:	4298      	cmp	r0, r3
 8006a1c:	d010      	beq.n	8006a40 <_ZL16stringCmdHandlerPcj+0xc0>
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <_ZL16stringCmdHandlerPcj+0xd4>)
 8006a20:	4298      	cmp	r0, r3
 8006a22:	d109      	bne.n	8006a38 <_ZL16stringCmdHandlerPcj+0xb8>
 8006a24:	e003      	b.n	8006a2e <_ZL16stringCmdHandlerPcj+0xae>
    case STRCASE( "app-os-report" ):

        break;

    case STRCASE( "test-input" ):
        print( "Hello, world!\n" );
 8006a26:	480c      	ldr	r0, [pc, #48]	; (8006a58 <_ZL16stringCmdHandlerPcj+0xd8>)
 8006a28:	f7ff ff60 	bl	80068ec <print>
        break;
 8006a2c:	e008      	b.n	8006a40 <_ZL16stringCmdHandlerPcj+0xc0>

    case STRCASE( "ping" ):
        API_SendHostBinary( "ping", 4 );
 8006a2e:	2104      	movs	r1, #4
 8006a30:	480a      	ldr	r0, [pc, #40]	; (8006a5c <_ZL16stringCmdHandlerPcj+0xdc>)
 8006a32:	f7ff ff31 	bl	8006898 <API_SendHostBinary>
        break;
 8006a36:	e003      	b.n	8006a40 <_ZL16stringCmdHandlerPcj+0xc0>

    default:
        AppHandler_CaptureCommand( argc, argv );
 8006a38:	4669      	mov	r1, sp
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f7ff ff84 	bl	8006948 <AppHandler_CaptureCommand>
        break;
    }
}
 8006a40:	b011      	add	sp, #68	; 0x44
 8006a42:	bd30      	pop	{r4, r5, pc}
 8006a44:	811c9dc5 	.word	0x811c9dc5
 8006a48:	01000193 	.word	0x01000193
 8006a4c:	4eecbbec 	.word	0x4eecbbec
 8006a50:	c50d20e2 	.word	0xc50d20e2
 8006a54:	165df089 	.word	0x165df089
 8006a58:	080085f0 	.word	0x080085f0
 8006a5c:	08008600 	.word	0x08008600

08006a60 <AppHandler_CaptureBinary>:

extern "C" __weak_symbol bool
AppHandler_CaptureBinary( char* data, size_t len )
{
    return false;
}
 8006a60:	2000      	movs	r0, #0
 8006a62:	4770      	bx	lr

08006a64 <_ZL16binaryCmdHandlerPcj>:

void binaryCmdHandler( char* data, size_t len )
{
 8006a64:	b508      	push	{r3, lr}
    if ( AppHandler_CaptureBinary( data, len ) ) {
 8006a66:	f7ff fffb 	bl	8006a60 <AppHandler_CaptureBinary>
 8006a6a:	b910      	cbnz	r0, 8006a72 <_ZL16binaryCmdHandlerPcj+0xe>
        return;
    }

    putstr( "warning: failed to process binary data\n" );
 8006a6c:	4801      	ldr	r0, [pc, #4]	; (8006a74 <_ZL16binaryCmdHandlerPcj+0x10>)
 8006a6e:	f7ff ff61 	bl	8006934 <putstr>
 8006a72:	bd08      	pop	{r3, pc}
 8006a74:	08008608 	.word	0x08008608

08006a78 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_>:
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8006a78:	4a02      	ldr	r2, [pc, #8]	; (8006a84 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_+0xc>)
 8006a7a:	60c2      	str	r2, [r0, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006a7c:	4a02      	ldr	r2, [pc, #8]	; (8006a88 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_+0x10>)
 8006a7e:	6082      	str	r2, [r0, #8]
	  }
      }
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	08006c95 	.word	0x08006c95
 8006a88:	08006a8d 	.word	0x08006a8d

08006a8c <_ZNSt14_Function_base13_Base_managerIZ13HW_TIMER_INITEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8006a8c:	2a01      	cmp	r2, #1
 8006a8e:	d100      	bne.n	8006a92 <_ZNSt14_Function_base13_Base_managerIZ13HW_TIMER_INITEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006a90:	6001      	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8006a92:	2000      	movs	r0, #0
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop

08006a98 <_Z41__static_initialization_and_destruction_0ii>:
void __throw_bad_function_call()
{
    uassert( false );
    for ( ;; ) { }
}
 8006a98:	2801      	cmp	r0, #1
 8006a9a:	d13b      	bne.n	8006b14 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006aa2:	4299      	cmp	r1, r3
 8006aa4:	d135      	bne.n	8006b12 <_Z41__static_initialization_and_destruction_0ii+0x7a>
    using size_type       = nty_;
    using difference_type = ptrdiff_t;
    using node_type       = fslist_node<size_type>;
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
 8006aa6:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	7013      	strb	r3, [r2, #0]
 8006aac:	2128      	movs	r1, #40	; 0x28
 8006aae:	7051      	strb	r1, [r2, #1]
 8006ab0:	21ff      	movs	r1, #255	; 0xff
 8006ab2:	7091      	strb	r1, [r2, #2]
 8006ab4:	70d1      	strb	r1, [r2, #3]
 8006ab6:	7113      	strb	r3, [r2, #4]
 8006ab8:	f502 7174 	add.w	r1, r2, #976	; 0x3d0
 8006abc:	6091      	str	r1, [r2, #8]
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
 8006abe:	2b27      	cmp	r3, #39	; 0x27
 8006ac0:	d80d      	bhi.n	8006ade <_Z41__static_initialization_and_destruction_0ii+0x46>
            auto p  = narray_ + i;
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006ac4:	6894      	ldr	r4, [r2, #8]
 8006ac6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8006aca:	1821      	adds	r1, r4, r0
            p->nxt_ = static_cast<size_type>( i + 1 );
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	1c55      	adds	r5, r2, #1
 8006ad0:	5425      	strb	r5, [r4, r0]
            p->cur_ = NODE_NONE;
 8006ad2:	20ff      	movs	r0, #255	; 0xff
 8006ad4:	7088      	strb	r0, [r1, #2]
            p->prv_ = static_cast<size_type>( i - 1 );
 8006ad6:	3a01      	subs	r2, #1
 8006ad8:	704a      	strb	r2, [r1, #1]
    enum { NODE_NONE = (size_type)-1 };

    fslist_alloc_base( size_type capacity, node_type* narray ) noexcept : size_( 0 ), capacity_( capacity ), head_( NODE_NONE ), tail_( NODE_NONE ), idle_( 0 ), narray_( narray )
    {
        // Link all available nodes
        for ( size_t i = 0; i < capacity; i++ ) {
 8006ada:	3301      	adds	r3, #1
 8006adc:	e7ef      	b.n	8006abe <_Z41__static_initialization_and_destruction_0ii+0x26>
            auto p  = narray_ + i;
            p->nxt_ = static_cast<size_type>( i + 1 );
            p->cur_ = NODE_NONE;
            p->prv_ = static_cast<size_type>( i - 1 );
        }
        narray_[0].prv_             = NODE_NONE;
 8006ade:	480e      	ldr	r0, [pc, #56]	; (8006b18 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006ae0:	6883      	ldr	r3, [r0, #8]
 8006ae2:	22ff      	movs	r2, #255	; 0xff
 8006ae4:	705a      	strb	r2, [r3, #1]
        narray_[capacity_ - 1].nxt_ = NODE_NONE;
 8006ae6:	7843      	ldrb	r3, [r0, #1]
 8006ae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006aec:	3b03      	subs	r3, #3
 8006aee:	6881      	ldr	r1, [r0, #8]
 8006af0:	54ca      	strb	r2, [r1, r3]
            i      = super::next( i );
            super::dealloc_node( k );
        }
    }

    fslist_base( size_type capacity, pointer varray, node_type* narray ) noexcept : super_type( capacity, narray ), varray_( varray )
 8006af2:	f100 0310 	add.w	r3, r0, #16
 8006af6:	60c3      	str	r3, [r0, #12]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8006af8:	2300      	movs	r3, #0
 8006afa:	f8c0 3450 	str.w	r3, [r0, #1104]	; 0x450
    timer_cb_t cb_;
};

template <typename tick_ty__,
          typename list_container__>
class timer_logic {
 8006afe:	f500 638b 	add.w	r3, r0, #1112	; 0x458
 8006b02:	2400      	movs	r4, #0
 8006b04:	2500      	movs	r5, #0
 8006b06:	e9c3 4500 	strd	r4, r5, [r3]
extern TIM_HandleTypeDef htim2;

/////////////////////////////////////////////////////////////////////////////
// Statics
using timer_t = upp::static_timer_logic<usec_t, uint8_t, NUM_MAX_HWTIMER_NODE>;
static timer_t            s_tim;
 8006b0a:	4a04      	ldr	r2, [pc, #16]	; (8006b1c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006b0c:	4904      	ldr	r1, [pc, #16]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006b0e:	f000 fabe 	bl	800708e <__aeabi_atexit>
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20003f18 	.word	0x20003f18
 8006b1c:	20000000 	.word	0x20000000
 8006b20:	08006b25 	.word	0x08006b25

08006b24 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	4604      	mov	r4, r0

    ~_Function_base()
    {
      if (_M_manager)
 8006b28:	f8d0 3450 	ldr.w	r3, [r0, #1104]	; 0x450
 8006b2c:	b123      	cbz	r3, 8006b38 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x14>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8006b2e:	f500 6089 	add.w	r0, r0, #1096	; 0x448
 8006b32:	2203      	movs	r2, #3
 8006b34:	4601      	mov	r1, r0
 8006b36:	4798      	blx	r3
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8006b38:	78a3      	ldrb	r3, [r4, #2]
        clear();
    }

    void clear() noexcept
    {
        for ( size_type i = super::head(); i != NODE_NONE; ) {
 8006b3a:	2bff      	cmp	r3, #255	; 0xff
 8006b3c:	d041      	beq.n	8006bc2 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x9e>
    }

    size_type head() const noexcept { return head_; }
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
 8006b3e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8006b42:	68a1      	ldr	r1, [r4, #8]
 8006b44:	180d      	adds	r5, r1, r0
 8006b46:	5c0e      	ldrb	r6, [r1, r0]
    }

    void dealloc_node( size_type i ) noexcept
    {
        auto& n = narray_[i];
        uassert( n.cur_ != NODE_NONE );
 8006b48:	78aa      	ldrb	r2, [r5, #2]
 8006b4a:	2aff      	cmp	r2, #255	; 0xff
 8006b4c:	d105      	bne.n	8006b5a <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x36>
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	; (8006bc8 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xa4>)
 8006b50:	4a1e      	ldr	r2, [pc, #120]	; (8006bcc <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xa8>)
 8006b52:	216b      	movs	r1, #107	; 0x6b
 8006b54:	481e      	ldr	r0, [pc, #120]	; (8006bd0 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xac>)
 8006b56:	f000 fa9f 	bl	8007098 <__assert_func>
        uassert( i >= 0 && i < capacity_ );
 8006b5a:	7862      	ldrb	r2, [r4, #1]
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d305      	bcc.n	8006b6c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x48>
 8006b60:	4b1c      	ldr	r3, [pc, #112]	; (8006bd4 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xb0>)
 8006b62:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xa8>)
 8006b64:	216c      	movs	r1, #108	; 0x6c
 8006b66:	481a      	ldr	r0, [pc, #104]	; (8006bd0 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0xac>)
 8006b68:	f000 fa96 	bl	8007098 <__assert_func>

        if ( n.nxt_ != NODE_NONE ) {
 8006b6c:	5c0a      	ldrb	r2, [r1, r0]
 8006b6e:	2aff      	cmp	r2, #255	; 0xff
 8006b70:	d005      	beq.n	8006b7e <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x5a>
            narray_[n.nxt_].prv_ = n.prv_;
 8006b72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006b76:	440a      	add	r2, r1
 8006b78:	786f      	ldrb	r7, [r5, #1]
 8006b7a:	7057      	strb	r7, [r2, #1]
 8006b7c:	e001      	b.n	8006b82 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x5e>
        }
        else { // It's tail
            tail_ = n.prv_;
 8006b7e:	786a      	ldrb	r2, [r5, #1]
 8006b80:	70e2      	strb	r2, [r4, #3]
        }

        if ( n.prv_ != NODE_NONE ) {
 8006b82:	786a      	ldrb	r2, [r5, #1]
 8006b84:	2aff      	cmp	r2, #255	; 0xff
 8006b86:	d007      	beq.n	8006b98 <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x74>
            narray_[n.prv_].nxt_ = n.nxt_;
 8006b88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006b8c:	68a7      	ldr	r7, [r4, #8]
 8006b8e:	f811 e000 	ldrb.w	lr, [r1, r0]
 8006b92:	f807 e002 	strb.w	lr, [r7, r2]
 8006b96:	e001      	b.n	8006b9c <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x78>
        }
        else { // It's head
            head_ = n.nxt_;
 8006b98:	5c0a      	ldrb	r2, [r1, r0]
 8006b9a:	70a2      	strb	r2, [r4, #2]
        }

        if ( idle_ != NODE_NONE ) {
 8006b9c:	7922      	ldrb	r2, [r4, #4]
 8006b9e:	2aff      	cmp	r2, #255	; 0xff
 8006ba0:	d004      	beq.n	8006bac <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x88>
            narray_[idle_].prv_ = i;
 8006ba2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006ba6:	68a7      	ldr	r7, [r4, #8]
 8006ba8:	443a      	add	r2, r7
 8006baa:	7053      	strb	r3, [r2, #1]
        }
        n.prv_ = NODE_NONE;
 8006bac:	22ff      	movs	r2, #255	; 0xff
 8006bae:	706a      	strb	r2, [r5, #1]
        n.cur_ = NODE_NONE;
 8006bb0:	70aa      	strb	r2, [r5, #2]
        n.nxt_ = idle_;
 8006bb2:	7922      	ldrb	r2, [r4, #4]
 8006bb4:	540a      	strb	r2, [r1, r0]
        idle_  = i;
 8006bb6:	7123      	strb	r3, [r4, #4]
        --size_;
 8006bb8:	7823      	ldrb	r3, [r4, #0]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	7023      	strb	r3, [r4, #0]
    void clear() noexcept
    {
        for ( size_type i = super::head(); i != NODE_NONE; ) {
            varray_[i].~value_type();
            auto k = i;
            i      = super::next( i );
 8006bbe:	4633      	mov	r3, r6
 8006bc0:	e7bb      	b.n	8006b3a <_ZN3upp11timer_logicIyNS_13static_fslistINS_16timer_logic_descIyEEhLj40EEEED1Ev+0x16>
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	08008958 	.word	0x08008958
 8006bcc:	08008c30 	.word	0x08008c30
 8006bd0:	0800896c 	.word	0x0800896c
 8006bd4:	080089a0 	.word	0x080089a0

08006bd8 <HW_TIMER_INIT>:
//

/////////////////////////////////////////////////////////////////////////////
// Defs
extern "C" void HW_TIMER_INIT()
{
 8006bd8:	b530      	push	{r4, r5, lr}
 8006bda:	b08b      	sub	sp, #44	; 0x2c
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8006bdc:	ac06      	add	r4, sp, #24
 8006bde:	f04f 0100 	mov.w	r1, #0
 8006be2:	4620      	mov	r0, r4
 8006be4:	f7ff ff48 	bl	8006a78 <_ZNSt8functionIFyvEEC1IZ13HW_TIMER_INITEUlvE_vvEET_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006be8:	ad04      	add	r5, sp, #16
 8006bea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006bee:	e885 0003 	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006bf2:	4b17      	ldr	r3, [pc, #92]	; (8006c50 <HW_TIMER_INIT+0x78>)
 8006bf4:	f503 6289 	add.w	r2, r3, #1096	; 0x448
 8006bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bfc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006c00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006c04:	e882 0003 	stmia.w	r2, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006c08:	9908      	ldr	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 8006c0a:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 8006c0e:	9208      	str	r2, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 8006c10:	f8c3 1450 	str.w	r1, [r3, #1104]	; 0x450
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006c14:	9909      	ldr	r1, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 8006c16:	f8d3 0454 	ldr.w	r0, [r3, #1108]	; 0x454
 8006c1a:	9009      	str	r0, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
 8006c1c:	f8c3 1454 	str.w	r1, [r3, #1108]	; 0x454

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8006c20:	b122      	cbz	r2, 8006c2c <HW_TIMER_INIT+0x54>
 8006c22:	4613      	mov	r3, r2
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8006c24:	2203      	movs	r2, #3
 8006c26:	a906      	add	r1, sp, #24
 8006c28:	4608      	mov	r0, r1
 8006c2a:	4798      	blx	r3
    s_tim.tick_function( []() { return API_GetTime_us(); } );

    sTimerTask = xTaskCreateStatic(
 8006c2c:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <HW_TIMER_INIT+0x7c>)
 8006c2e:	9302      	str	r3, [sp, #8]
 8006c30:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HW_TIMER_INIT+0x80>)
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	2337      	movs	r3, #55	; 0x37
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c3e:	4907      	ldr	r1, [pc, #28]	; (8006c5c <HW_TIMER_INIT+0x84>)
 8006c40:	4807      	ldr	r0, [pc, #28]	; (8006c60 <HW_TIMER_INIT+0x88>)
 8006c42:	f7fd fc4f 	bl	80044e4 <xTaskCreateStatic>
        "TIMER",
        sizeof( sTimerStack ) / sizeof( *sTimerStack ),
        NULL,
        configMAX_PRIORITIES - 1,
        sTimerStack,
        &sTimerTaskStaticCb );
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <HW_TIMER_INIT+0x8c>)
 8006c48:	6018      	str	r0, [r3, #0]
}
 8006c4a:	b00b      	add	sp, #44	; 0x2c
 8006c4c:	bd30      	pop	{r4, r5, pc}
 8006c4e:	bf00      	nop
 8006c50:	20003f18 	.word	0x20003f18
 8006c54:	2000477c 	.word	0x2000477c
 8006c58:	2000437c 	.word	0x2000437c
 8006c5c:	080089b8 	.word	0x080089b8
 8006c60:	08006cc9 	.word	0x08006cc9
 8006c64:	20004378 	.word	0x20004378

08006c68 <API_GetTime_us>:
        portYIELD_FROM_ISR( pdTRUE );
    }
}

extern "C" usec_t API_GetTime_us()
{
 8006c68:	f84d bd04 	str.w	fp, [sp, #-4]!
    return s_total_us + GET_US();
 8006c6c:	4b07      	ldr	r3, [pc, #28]	; (8006c8c <API_GetTime_us+0x24>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <API_GetTime_us+0x28>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8006c78:	eb12 0b00 	adds.w	fp, r2, r0
 8006c7c:	f143 0c00 	adc.w	ip, r3, #0
 8006c80:	4658      	mov	r0, fp
 8006c82:	4661      	mov	r1, ip
 8006c84:	f85d bb04 	ldr.w	fp, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20005538 	.word	0x20005538
 8006c90:	200047d8 	.word	0x200047d8

08006c94 <_ZNSt17_Function_handlerIFyvEZ13HW_TIMER_INITEUlvE_E9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006c94:	b508      	push	{r3, lr}

/////////////////////////////////////////////////////////////////////////////
// Defs
extern "C" void HW_TIMER_INIT()
{
    s_tim.tick_function( []() { return API_GetTime_us(); } );
 8006c96:	f7ff ffe7 	bl	8006c68 <API_GetTime_us>
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 8006c9a:	bd08      	pop	{r3, pc}

08006c9c <_ZSt25__throw_bad_function_callv>:
    }
}

namespace std {
void __throw_bad_function_call()
{
 8006c9c:	b508      	push	{r3, lr}
    uassert( false );
 8006c9e:	4b03      	ldr	r3, [pc, #12]	; (8006cac <_ZSt25__throw_bad_function_callv+0x10>)
 8006ca0:	4a03      	ldr	r2, [pc, #12]	; (8006cb0 <_ZSt25__throw_bad_function_callv+0x14>)
 8006ca2:	2176      	movs	r1, #118	; 0x76
 8006ca4:	4803      	ldr	r0, [pc, #12]	; (8006cb4 <_ZSt25__throw_bad_function_callv+0x18>)
 8006ca6:	f000 f9f7 	bl	8007098 <__assert_func>
 8006caa:	bf00      	nop
 8006cac:	08008a20 	.word	0x08008a20
 8006cb0:	08008930 	.word	0x08008930
 8006cb4:	08008a28 	.word	0x08008a28

08006cb8 <_ZNKSt8functionIFyvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8006cb8:	b508      	push	{r3, lr}
      if (_M_manager)
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }
 8006cba:	6883      	ldr	r3, [r0, #8]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8006cbc:	b90b      	cbnz	r3, 8006cc2 <_ZNKSt8functionIFyvEEclEv+0xa>
	__throw_bad_function_call();
 8006cbe:	f7ff ffed 	bl	8006c9c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006cc2:	68c3      	ldr	r3, [r0, #12]
 8006cc4:	4798      	blx	r3
    }
 8006cc6:	bd08      	pop	{r3, pc}

08006cc8 <_ZL15TimerUpdateTaskPv>:
    }
    taskEXIT_CRITICAL();
}

_Noreturn void TimerUpdateTask( void* nouse__ )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08c      	sub	sp, #48	; 0x30
    for ( ;; ) {
        ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8006ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f7fd ff7b 	bl	8004bcc <ulTaskNotifyTake>

        __HAL_TIM_DISABLE_IT( &htim, TIM_FLAG_CC1 );
 8006cd6:	4b8e      	ldr	r3, [pc, #568]	; (8006f10 <_ZL15TimerUpdateTaskPv+0x248>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68d3      	ldr	r3, [r2, #12]
 8006cdc:	f023 0302 	bic.w	r3, r3, #2
 8006ce0:	60d3      	str	r3, [r2, #12]
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8006ce2:	4b8c      	ldr	r3, [pc, #560]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006ce4:	9302      	str	r3, [sp, #8]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8006ce6:	789b      	ldrb	r3, [r3, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 8006ce8:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    iterator begin() noexcept
    {
        auto d = cbegin();
        return static_cast<iterator&>( d );
 8006cec:	aa02      	add	r2, sp, #8
 8006cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cf2:	e88d 0003 	stmia.w	sp, {r0, r1}
    fslist_const_iterator<dty_, nty_>& operator--() noexcept;
    fslist_const_iterator<dty_, nty_>  operator--( int ) noexcept;
    reference                          operator*() const noexcept;
    pointer                            operator->() const noexcept;

    bool operator!=( const fslist_const_iterator<dty_, nty_>& r ) const noexcept { return r.container_ != container_ || r.cur_ != cur_; }
 8006cf6:	9a00      	ldr	r2, [sp, #0]
 8006cf8:	4b86      	ldr	r3, [pc, #536]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d105      	bne.n	8006d0a <_ZL15TimerUpdateTaskPv+0x42>
 8006cfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d02:	2bff      	cmp	r3, #255	; 0xff
 8006d04:	d003      	beq.n	8006d0e <_ZL15TimerUpdateTaskPv+0x46>
 8006d06:	2401      	movs	r4, #1
 8006d08:	e002      	b.n	8006d10 <_ZL15TimerUpdateTaskPv+0x48>
 8006d0a:	2401      	movs	r4, #1
 8006d0c:	e000      	b.n	8006d10 <_ZL15TimerUpdateTaskPv+0x48>
 8006d0e:	2400      	movs	r4, #0
        return true;
    }

    tick_type update() noexcept
    {
        for ( auto it = node_.begin();
 8006d10:	b36c      	cbz	r4, 8006d6e <_ZL15TimerUpdateTaskPv+0xa6>

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
    return c->get_arg( cur_ );
 8006d12:	f89d 3004 	ldrb.w	r3, [sp, #4]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8006d16:	2bff      	cmp	r3, #255	; 0xff
 8006d18:	d106      	bne.n	8006d28 <_ZL15TimerUpdateTaskPv+0x60>
 8006d1a:	4b7f      	ldr	r3, [pc, #508]	; (8006f18 <_ZL15TimerUpdateTaskPv+0x250>)
 8006d1c:	4a7f      	ldr	r2, [pc, #508]	; (8006f1c <_ZL15TimerUpdateTaskPv+0x254>)
 8006d1e:	f240 11af 	movw	r1, #431	; 0x1af
 8006d22:	487f      	ldr	r0, [pc, #508]	; (8006f20 <_ZL15TimerUpdateTaskPv+0x258>)
 8006d24:	f000 f9b8 	bl	8007098 <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8006d28:	2bff      	cmp	r3, #255	; 0xff
 8006d2a:	d008      	beq.n	8006d3e <_ZL15TimerUpdateTaskPv+0x76>
 8006d2c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006d30:	6890      	ldr	r0, [r2, #8]
 8006d32:	4401      	add	r1, r0
 8006d34:	7889      	ldrb	r1, [r1, #2]
 8006d36:	29ff      	cmp	r1, #255	; 0xff
 8006d38:	d102      	bne.n	8006d40 <_ZL15TimerUpdateTaskPv+0x78>
 8006d3a:	2400      	movs	r4, #0
 8006d3c:	e000      	b.n	8006d40 <_ZL15TimerUpdateTaskPv+0x78>
 8006d3e:	2400      	movs	r4, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8006d40:	b934      	cbnz	r4, 8006d50 <_ZL15TimerUpdateTaskPv+0x88>
 8006d42:	4b78      	ldr	r3, [pc, #480]	; (8006f24 <_ZL15TimerUpdateTaskPv+0x25c>)
 8006d44:	4a75      	ldr	r2, [pc, #468]	; (8006f1c <_ZL15TimerUpdateTaskPv+0x254>)
 8006d46:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006d4a:	4875      	ldr	r0, [pc, #468]	; (8006f20 <_ZL15TimerUpdateTaskPv+0x258>)
 8006d4c:	f000 f9a4 	bl	8007098 <__assert_func>
        return varray_ + node;
 8006d50:	68d1      	ldr	r1, [r2, #12]
 8006d52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006d56:	00da      	lsls	r2, r3, #3
 8006d58:	440a      	add	r2, r1
              it != node_.end() && it->trigger_at_ <= tick_();
 8006d5a:	e9d2 6702 	ldrd	r6, r7, [r2, #8]
 8006d5e:	4872      	ldr	r0, [pc, #456]	; (8006f28 <_ZL15TimerUpdateTaskPv+0x260>)
 8006d60:	f7ff ffaa 	bl	8006cb8 <_ZNKSt8functionIFyvEEclEv>
        return true;
    }

    tick_type update() noexcept
    {
        for ( auto it = node_.begin();
 8006d64:	42b9      	cmp	r1, r7
 8006d66:	bf08      	it	eq
 8006d68:	42b0      	cmpeq	r0, r6
 8006d6a:	d200      	bcs.n	8006d6e <_ZL15TimerUpdateTaskPv+0xa6>
 8006d6c:	2400      	movs	r4, #0
 8006d6e:	2c00      	cmp	r4, #0
 8006d70:	f000 8088 	beq.w	8006e84 <_ZL15TimerUpdateTaskPv+0x1bc>
}

template <typename dty_, typename nty_>
inline typename fslist_const_iterator<dty_, nty_>::pointer fslist_const_iterator<dty_, nty_>::operator->() const noexcept
{
    auto c = static_cast<fslist_base<dty_, nty_>*>( const_cast<fslist_alloc_base<nty_>*>( container_ ) );
 8006d74:	9900      	ldr	r1, [sp, #0]
    return c->get_arg( cur_ );
 8006d76:	f89d 3004 	ldrb.w	r3, [sp, #4]
        super::dealloc_node( n );
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
 8006d7a:	2bff      	cmp	r3, #255	; 0xff
 8006d7c:	d106      	bne.n	8006d8c <_ZL15TimerUpdateTaskPv+0xc4>
 8006d7e:	4b66      	ldr	r3, [pc, #408]	; (8006f18 <_ZL15TimerUpdateTaskPv+0x250>)
 8006d80:	4a66      	ldr	r2, [pc, #408]	; (8006f1c <_ZL15TimerUpdateTaskPv+0x254>)
 8006d82:	f240 11af 	movw	r1, #431	; 0x1af
 8006d86:	4866      	ldr	r0, [pc, #408]	; (8006f20 <_ZL15TimerUpdateTaskPv+0x258>)
 8006d88:	f000 f986 	bl	8007098 <__assert_func>
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8006d8c:	2bff      	cmp	r3, #255	; 0xff
 8006d8e:	d008      	beq.n	8006da2 <_ZL15TimerUpdateTaskPv+0xda>
 8006d90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006d94:	6888      	ldr	r0, [r1, #8]
 8006d96:	4402      	add	r2, r0
 8006d98:	7892      	ldrb	r2, [r2, #2]
 8006d9a:	2aff      	cmp	r2, #255	; 0xff
 8006d9c:	d102      	bne.n	8006da4 <_ZL15TimerUpdateTaskPv+0xdc>
 8006d9e:	2400      	movs	r4, #0
 8006da0:	e000      	b.n	8006da4 <_ZL15TimerUpdateTaskPv+0xdc>
 8006da2:	2400      	movs	r4, #0
    }

    pointer get_arg( size_type node ) noexcept
    {
        uassert( node != NODE_NONE );
        uassert( super::valid_node( node ) );
 8006da4:	b934      	cbnz	r4, 8006db4 <_ZL15TimerUpdateTaskPv+0xec>
 8006da6:	4b5f      	ldr	r3, [pc, #380]	; (8006f24 <_ZL15TimerUpdateTaskPv+0x25c>)
 8006da8:	4a5c      	ldr	r2, [pc, #368]	; (8006f1c <_ZL15TimerUpdateTaskPv+0x254>)
 8006daa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006dae:	485c      	ldr	r0, [pc, #368]	; (8006f20 <_ZL15TimerUpdateTaskPv+0x258>)
 8006db0:	f000 f972 	bl	8007098 <__assert_func>
        return varray_ + node;
 8006db4:	68c9      	ldr	r1, [r1, #12]
 8006db6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006dba:	00da      	lsls	r2, r3, #3
 8006dbc:	188b      	adds	r3, r1, r2
              it != node_.end() && it->trigger_at_ <= tick_();
              it = node_.begin() ) {
            auto cb  = it->cb_;
 8006dbe:	695d      	ldr	r5, [r3, #20]
            auto obj = it->obj_;
 8006dc0:	6918      	ldr	r0, [r3, #16]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8006dc2:	4b54      	ldr	r3, [pc, #336]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006dc4:	789a      	ldrb	r2, [r3, #2]
    template <typename ty1_, typename ty2_>
    friend class fslist_const_iterator;

    void release( size_type n )
    {
        uassert( n != NODE_NONE );
 8006dc6:	2aff      	cmp	r2, #255	; 0xff
 8006dc8:	d106      	bne.n	8006dd8 <_ZL15TimerUpdateTaskPv+0x110>
 8006dca:	4b58      	ldr	r3, [pc, #352]	; (8006f2c <_ZL15TimerUpdateTaskPv+0x264>)
 8006dcc:	4a58      	ldr	r2, [pc, #352]	; (8006f30 <_ZL15TimerUpdateTaskPv+0x268>)
 8006dce:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8006dd2:	4853      	ldr	r0, [pc, #332]	; (8006f20 <_ZL15TimerUpdateTaskPv+0x258>)
 8006dd4:	f000 f960 	bl	8007098 <__assert_func>
        }
    }

    void dealloc_node( size_type i ) noexcept
    {
        auto& n = narray_[i];
 8006dd8:	4b4e      	ldr	r3, [pc, #312]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006dda:	689e      	ldr	r6, [r3, #8]
 8006ddc:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8006de0:	19f1      	adds	r1, r6, r7
        uassert( n.cur_ != NODE_NONE );
 8006de2:	788b      	ldrb	r3, [r1, #2]
 8006de4:	2bff      	cmp	r3, #255	; 0xff
 8006de6:	d105      	bne.n	8006df4 <_ZL15TimerUpdateTaskPv+0x12c>
 8006de8:	4b52      	ldr	r3, [pc, #328]	; (8006f34 <_ZL15TimerUpdateTaskPv+0x26c>)
 8006dea:	4a53      	ldr	r2, [pc, #332]	; (8006f38 <_ZL15TimerUpdateTaskPv+0x270>)
 8006dec:	216b      	movs	r1, #107	; 0x6b
 8006dee:	484c      	ldr	r0, [pc, #304]	; (8006f20 <_ZL15TimerUpdateTaskPv+0x258>)
 8006df0:	f000 f952 	bl	8007098 <__assert_func>
        uassert( i >= 0 && i < capacity_ );
 8006df4:	4b47      	ldr	r3, [pc, #284]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d305      	bcc.n	8006e08 <_ZL15TimerUpdateTaskPv+0x140>
 8006dfc:	4b4f      	ldr	r3, [pc, #316]	; (8006f3c <_ZL15TimerUpdateTaskPv+0x274>)
 8006dfe:	4a4e      	ldr	r2, [pc, #312]	; (8006f38 <_ZL15TimerUpdateTaskPv+0x270>)
 8006e00:	216c      	movs	r1, #108	; 0x6c
 8006e02:	4847      	ldr	r0, [pc, #284]	; (8006f20 <_ZL15TimerUpdateTaskPv+0x258>)
 8006e04:	f000 f948 	bl	8007098 <__assert_func>

        if ( n.nxt_ != NODE_NONE ) {
 8006e08:	5df3      	ldrb	r3, [r6, r7]
 8006e0a:	2bff      	cmp	r3, #255	; 0xff
 8006e0c:	d005      	beq.n	8006e1a <_ZL15TimerUpdateTaskPv+0x152>
            narray_[n.nxt_].prv_ = n.prv_;
 8006e0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e12:	4433      	add	r3, r6
 8006e14:	784c      	ldrb	r4, [r1, #1]
 8006e16:	705c      	strb	r4, [r3, #1]
 8006e18:	e002      	b.n	8006e20 <_ZL15TimerUpdateTaskPv+0x158>
        }
        else { // It's tail
            tail_ = n.prv_;
 8006e1a:	784c      	ldrb	r4, [r1, #1]
 8006e1c:	4b3d      	ldr	r3, [pc, #244]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006e1e:	70dc      	strb	r4, [r3, #3]
        }

        if ( n.prv_ != NODE_NONE ) {
 8006e20:	784b      	ldrb	r3, [r1, #1]
 8006e22:	2bff      	cmp	r3, #255	; 0xff
 8006e24:	d008      	beq.n	8006e38 <_ZL15TimerUpdateTaskPv+0x170>
            narray_[n.prv_].nxt_ = n.nxt_;
 8006e26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e2a:	4c3a      	ldr	r4, [pc, #232]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006e2c:	68a4      	ldr	r4, [r4, #8]
 8006e2e:	f816 e007 	ldrb.w	lr, [r6, r7]
 8006e32:	f804 e003 	strb.w	lr, [r4, r3]
 8006e36:	e002      	b.n	8006e3e <_ZL15TimerUpdateTaskPv+0x176>
        }
        else { // It's head
            head_ = n.nxt_;
 8006e38:	5df4      	ldrb	r4, [r6, r7]
 8006e3a:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006e3c:	709c      	strb	r4, [r3, #2]
        }

        if ( idle_ != NODE_NONE ) {
 8006e3e:	4b35      	ldr	r3, [pc, #212]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006e40:	791b      	ldrb	r3, [r3, #4]
 8006e42:	2bff      	cmp	r3, #255	; 0xff
 8006e44:	d005      	beq.n	8006e52 <_ZL15TimerUpdateTaskPv+0x18a>
            narray_[idle_].prv_ = i;
 8006e46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e4a:	4c32      	ldr	r4, [pc, #200]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006e4c:	68a4      	ldr	r4, [r4, #8]
 8006e4e:	4423      	add	r3, r4
 8006e50:	705a      	strb	r2, [r3, #1]
        }
        n.prv_ = NODE_NONE;
 8006e52:	23ff      	movs	r3, #255	; 0xff
 8006e54:	704b      	strb	r3, [r1, #1]
        n.cur_ = NODE_NONE;
 8006e56:	708b      	strb	r3, [r1, #2]
        n.nxt_ = idle_;
 8006e58:	4c2e      	ldr	r4, [pc, #184]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006e5a:	7923      	ldrb	r3, [r4, #4]
 8006e5c:	55f3      	strb	r3, [r6, r7]
        idle_  = i;
 8006e5e:	7122      	strb	r2, [r4, #4]
        --size_;
 8006e60:	7823      	ldrb	r3, [r4, #0]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	7023      	strb	r3, [r4, #0]

            node_.pop_front();
            cb( obj );
 8006e66:	47a8      	blx	r5
    }

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
 8006e68:	9402      	str	r4, [sp, #8]
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8006e6a:	78a3      	ldrb	r3, [r4, #2]

    const_iterator cbegin() const noexcept
    {
        const_iterator i;
        i.container_ = this;
        i.cur_       = super::head();
 8006e6c:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    iterator begin() noexcept
    {
        auto d = cbegin();
        return static_cast<iterator&>( d );
 8006e70:	ab0a      	add	r3, sp, #40	; 0x28
 8006e72:	aa02      	add	r2, sp, #8
 8006e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e78:	e883 0003 	stmia.w	r3, {r0, r1}
        return true;
    }

    tick_type update() noexcept
    {
        for ( auto it = node_.begin();
 8006e7c:	9000      	str	r0, [sp, #0]
 8006e7e:	f88d 1004 	strb.w	r1, [sp, #4]
 8006e82:	e738      	b.n	8006cf6 <_ZL15TimerUpdateTaskPv+0x2e>

public:
    size_type max_size() const noexcept { return capacity_; }
    size_type capacity() const noexcept { return capacity_ - size_; }
    size_type size() const noexcept { return size_; }
    bool      empty() const noexcept { return size_ == 0; }
 8006e84:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
        }
    }

    tick_type next_trig() const noexcept
    {
        if ( empty() ) {
 8006e88:	b323      	cbz	r3, 8006ed4 <_ZL15TimerUpdateTaskPv+0x20c>
        n.nxt_ = idle_;
        idle_  = i;
        --size_;
    }

    size_type head() const noexcept { return head_; }
 8006e8a:	4b22      	ldr	r3, [pc, #136]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006e8c:	789b      	ldrb	r3, [r3, #2]
    size_type tail() const noexcept { return tail_; }

    size_type next( size_type n ) const noexcept { return narray_[n].nxt_; }
    size_type prev( size_type n ) const noexcept { return narray_[n].prv_; }

    bool valid_node( size_type n ) const noexcept { return n != NODE_NONE && narray_[n].cur_ != NODE_NONE; }
 8006e8e:	2bff      	cmp	r3, #255	; 0xff
 8006e90:	d008      	beq.n	8006ea4 <_ZL15TimerUpdateTaskPv+0x1dc>
 8006e92:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006e96:	491f      	ldr	r1, [pc, #124]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006e98:	6889      	ldr	r1, [r1, #8]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	7892      	ldrb	r2, [r2, #2]
 8006e9e:	2aff      	cmp	r2, #255	; 0xff
 8006ea0:	d000      	beq.n	8006ea4 <_ZL15TimerUpdateTaskPv+0x1dc>
 8006ea2:	2401      	movs	r4, #1
        return static_cast<iterator&>( d );
    }

    const_reference front() const noexcept
    {
        uassert( super::valid_node( super::head() ) );
 8006ea4:	b934      	cbnz	r4, 8006eb4 <_ZL15TimerUpdateTaskPv+0x1ec>
 8006ea6:	4b26      	ldr	r3, [pc, #152]	; (8006f40 <_ZL15TimerUpdateTaskPv+0x278>)
 8006ea8:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <_ZL15TimerUpdateTaskPv+0x27c>)
 8006eaa:	f240 1157 	movw	r1, #343	; 0x157
 8006eae:	481c      	ldr	r0, [pc, #112]	; (8006f20 <_ZL15TimerUpdateTaskPv+0x258>)
 8006eb0:	f000 f8f2 	bl	8007098 <__assert_func>
        return varray_[super::head()];
 8006eb4:	4a17      	ldr	r2, [pc, #92]	; (8006f14 <_ZL15TimerUpdateTaskPv+0x24c>)
 8006eb6:	68d4      	ldr	r4, [r2, #12]
 8006eb8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006ebc:	00d3      	lsls	r3, r2, #3
 8006ebe:	ad04      	add	r5, sp, #16
 8006ec0:	441c      	add	r4, r3
 8006ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ec6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006eca:	e885 0003 	stmia.w	r5, {r0, r1}
            return TIMER_INVALID;
        }
        return node_.front().trigger_at_;
 8006ece:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006ed2:	e003      	b.n	8006edc <_ZL15TimerUpdateTaskPv+0x214>
    }

    tick_type next_trig() const noexcept
    {
        if ( empty() ) {
            return TIMER_INVALID;
 8006ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ed8:	f04f 35ff 	mov.w	r5, #4294967295
        auto next = s_tim.update();

        if ( next != (usec_t)-1 ) {
 8006edc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006ee0:	bf08      	it	eq
 8006ee2:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8006ee6:	f43f aef1 	beq.w	8006ccc <_ZL15TimerUpdateTaskPv+0x4>
            int delay = next - API_GetTime_us();
 8006eea:	f7ff febd 	bl	8006c68 <API_GetTime_us>
 8006eee:	1a20      	subs	r0, r4, r0
            int cnt   = htim.Instance->CNT;
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <_ZL15TimerUpdateTaskPv+0x248>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            int arr   = htim.Instance->ARR;
 8006ef6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

            if ( cnt + delay > arr )
 8006ef8:	4410      	add	r0, r2
 8006efa:	4281      	cmp	r1, r0
 8006efc:	da02      	bge.n	8006f04 <_ZL15TimerUpdateTaskPv+0x23c>
                htim.Instance->CCR1 = ( cnt + delay ) - arr;
 8006efe:	1a40      	subs	r0, r0, r1
 8006f00:	6358      	str	r0, [r3, #52]	; 0x34
 8006f02:	e000      	b.n	8006f06 <_ZL15TimerUpdateTaskPv+0x23e>
            else
                htim.Instance->CCR1 = ( cnt + delay );
 8006f04:	6358      	str	r0, [r3, #52]	; 0x34

            __HAL_TIM_ENABLE_IT( &htim, TIM_FLAG_CC1 );
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	f042 0202 	orr.w	r2, r2, #2
 8006f0c:	60da      	str	r2, [r3, #12]
 8006f0e:	e6dd      	b.n	8006ccc <_ZL15TimerUpdateTaskPv+0x4>
 8006f10:	20005538 	.word	0x20005538
 8006f14:	20003f18 	.word	0x20003f18
 8006f18:	080089c0 	.word	0x080089c0
 8006f1c:	08008630 	.word	0x08008630
 8006f20:	0800896c 	.word	0x0800896c
 8006f24:	080089d4 	.word	0x080089d4
 8006f28:	20004360 	.word	0x20004360
 8006f2c:	08008a10 	.word	0x08008a10
 8006f30:	08008b3c 	.word	0x08008b3c
 8006f34:	08008958 	.word	0x08008958
 8006f38:	08008c30 	.word	0x08008c30
 8006f3c:	080089a0 	.word	0x080089a0
 8006f40:	08008a40 	.word	0x08008a40
 8006f44:	0800880c 	.word	0x0800880c

08006f48 <_GLOBAL__sub_I_HW_TIMER_INIT>:
void __throw_bad_function_call()
{
    uassert( false );
    for ( ;; ) { }
}
 8006f48:	b508      	push	{r3, lr}
 8006f4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f4e:	2001      	movs	r0, #1
 8006f50:	f7ff fda2 	bl	8006a98 <_Z41__static_initialization_and_destruction_0ii>
 8006f54:	bd08      	pop	{r3, pc}
 8006f56:	bf00      	nop

08006f58 <_ZL9cdc_ioctlPvi>:
#include <uEmbedded/transceiver.h>
#include <uEmbedded/uassert.h>
#include <usbd_cdc_if.h>
static transceiver_result_t cdc_read( void* desc, char* buf, size_t len );
static transceiver_result_t cdc_write( void* desc, char const* buf, size_t len );
static transceiver_result_t cdc_ioctl( void* desc, intptr_t cmd ) { return TRANSCEIVER_OK; }
 8006f58:	2000      	movs	r0, #0
 8006f5a:	4770      	bx	lr

08006f5c <_Z41__static_initialization_and_destruction_0ii>:
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
    ring_buffer_write( &s_rw.rdqueue_, Buf, len );
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
}
 8006f5c:	2801      	cmp	r0, #1
 8006f5e:	d106      	bne.n	8006f6e <_Z41__static_initialization_and_destruction_0ii+0x12>
 8006f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f64:	4299      	cmp	r1, r3
 8006f66:	d102      	bne.n	8006f6e <_Z41__static_initialization_and_destruction_0ii+0x12>
    .read  = cdc_read,
    .write = cdc_write,
    .ioctl = cdc_ioctl,
    .close = cdc_close };

static struct usb_rw {
 8006f68:	4a01      	ldr	r2, [pc, #4]	; (8006f70 <_Z41__static_initialization_and_destruction_0ii+0x14>)
 8006f6a:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <_Z41__static_initialization_and_destruction_0ii+0x18>)
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	4770      	bx	lr
 8006f70:	08008d28 	.word	0x08008d28
 8006f74:	200047e0 	.word	0x200047e0

08006f78 <_ZL9cdc_closePv>:
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
}

transceiver_result_t cdc_close( void* desc )
{
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4604      	mov	r4, r0
}

static inline void AppFree( void* ptr )
{
    void vPortFree( void* );
    vPortFree( ptr );
 8006f7c:	6840      	ldr	r0, [r0, #4]
 8006f7e:	f7fe fa1b 	bl	80053b8 <vPortFree>
    auto td = reinterpret_cast<usb_rw*>( desc );
    AppFree( td->rdqueue_.buff );
    td->rdqueue_.buff = nullptr;
 8006f82:	2000      	movs	r0, #0
 8006f84:	6060      	str	r0, [r4, #4]
    return TRANSCEIVER_OK;
}
 8006f86:	bd10      	pop	{r4, pc}

08006f88 <_ZL9cdc_writePvPKcj>:
    auto rd = ring_buffer_read( &td->rdqueue_, buf, len );
    return rd;
}

transceiver_result_t cdc_write( void* nouse_, char const* buf, size_t len )
{
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	4608      	mov	r0, r1
 8006f8c:	4614      	mov	r4, r2
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
 8006f8e:	b291      	uxth	r1, r2
 8006f90:	f7f9 ff44 	bl	8000e1c <CDC_Transmit_FS>
 8006f94:	b908      	cbnz	r0, 8006f9a <_ZL9cdc_writePvPKcj+0x12>
 8006f96:	4620      	mov	r0, r4
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	2000      	movs	r0, #0
}
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	bf00      	nop

08006fa0 <_ZL8cdc_readPvPcj>:
    ring_buffer_init( &ret->rdqueue_, s_rw.rdbuf_, sizeof s_rw.rdbuf_ );
    return reinterpret_cast<transceiver_handle_t>( ret );
}

static transceiver_result_t cdc_read( void* desc, char* buf, size_t len )
{
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	460f      	mov	r7, r1
 8006fa4:	4616      	mov	r6, r2
    auto td = reinterpret_cast<usb_rw*>( desc );
    auto rd = ring_buffer_read( &td->rdqueue_, buf, len );
 8006fa6:	1d05      	adds	r5, r0, #4

/*! \breif      Do peeking and consuming at once.
    \return     Number of byte actually read. */
static inline size_t ring_buffer_read(ring_buffer_t *s, void *b, size_t len)
{
    size_t sz = ring_buffer_size(s);
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f7ff fb5d 	bl	8006668 <ring_buffer_size>
 8006fae:	4604      	mov	r4, r0
    if (sz < len)
 8006fb0:	4286      	cmp	r6, r0
 8006fb2:	d800      	bhi.n	8006fb6 <_ZL8cdc_readPvPcj+0x16>
 8006fb4:	4634      	mov	r4, r6
        len = sz;
    ring_buffer_peek(s, b, len);
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	4639      	mov	r1, r7
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7ff fb34 	bl	8006628 <ring_buffer_peek>
    ring_buffer_consume(s, len);
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f7ff fb26 	bl	8006614 <ring_buffer_consume>
    return rd;
}
 8006fc8:	4620      	mov	r0, r4
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fcc <OpenUsbHostConnection>:
    ring_buffer                 rdqueue_;
    char                        rdbuf_[USB_READ_BUF_SIZE];
} s_rw;

extern "C" transceiver_handle_t OpenUsbHostConnection()
{
 8006fcc:	b510      	push	{r4, lr}
    uassert( s_rw.rdqueue_.buff == nullptr );
 8006fce:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <OpenUsbHostConnection+0x28>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	b12b      	cbz	r3, 8006fe0 <OpenUsbHostConnection+0x14>
 8006fd4:	4b08      	ldr	r3, [pc, #32]	; (8006ff8 <OpenUsbHostConnection+0x2c>)
 8006fd6:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <OpenUsbHostConnection+0x30>)
 8006fd8:	2121      	movs	r1, #33	; 0x21
 8006fda:	4809      	ldr	r0, [pc, #36]	; (8007000 <OpenUsbHostConnection+0x34>)
 8006fdc:	f000 f85c 	bl	8007098 <__assert_func>
    auto ret = &s_rw;
    ring_buffer_init( &ret->rdqueue_, s_rw.rdbuf_, sizeof s_rw.rdbuf_ );
 8006fe0:	4c04      	ldr	r4, [pc, #16]	; (8006ff4 <OpenUsbHostConnection+0x28>)
 8006fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fe6:	f104 0114 	add.w	r1, r4, #20
 8006fea:	1d20      	adds	r0, r4, #4
 8006fec:	f7ff faea 	bl	80065c4 <ring_buffer_init>
    return reinterpret_cast<transceiver_handle_t>( ret );
}
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	bd10      	pop	{r4, pc}
 8006ff4:	200047e0 	.word	0x200047e0
 8006ff8:	08008cf0 	.word	0x08008cf0
 8006ffc:	08008d38 	.word	0x08008d38
 8007000:	08008d10 	.word	0x08008d10

08007004 <CdcReceiveHandler>:
    return TRANSCEIVER_OK;
}

// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4605      	mov	r5, r0
    ring_buffer_write( &s_rw.rdqueue_, Buf, len );
 8007008:	460a      	mov	r2, r1
 800700a:	4601      	mov	r1, r0
 800700c:	4805      	ldr	r0, [pc, #20]	; (8007024 <CdcReceiveHandler+0x20>)
 800700e:	f7ff fadf 	bl	80065d0 <ring_buffer_write>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
 8007012:	4c05      	ldr	r4, [pc, #20]	; (8007028 <CdcReceiveHandler+0x24>)
 8007014:	4629      	mov	r1, r5
 8007016:	4620      	mov	r0, r4
 8007018:	f7ff fa0e 	bl	8006438 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 800701c:	4620      	mov	r0, r4
 800701e:	f7ff fa2b 	bl	8006478 <USBD_CDC_ReceivePacket>
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	200047e4 	.word	0x200047e4
 8007028:	20005638 	.word	0x20005638

0800702c <_GLOBAL__sub_I_OpenUsbHostConnection>:
}
 800702c:	b508      	push	{r3, lr}
 800702e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007032:	2001      	movs	r0, #1
 8007034:	f7ff ff92 	bl	8006f5c <_Z41__static_initialization_and_destruction_0ii>
 8007038:	bd08      	pop	{r3, pc}
 800703a:	bf00      	nop

0800703c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800703c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007074 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007040:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007042:	e003      	b.n	800704c <LoopCopyDataInit>

08007044 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007044:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007046:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007048:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800704a:	3104      	adds	r1, #4

0800704c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800704c:	480b      	ldr	r0, [pc, #44]	; (800707c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800704e:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007050:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007052:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007054:	d3f6      	bcc.n	8007044 <CopyDataInit>
  ldr  r2, =_sbss
 8007056:	4a0b      	ldr	r2, [pc, #44]	; (8007084 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007058:	e002      	b.n	8007060 <LoopFillZerobss>

0800705a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800705a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800705c:	f842 3b04 	str.w	r3, [r2], #4

08007060 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007060:	4b09      	ldr	r3, [pc, #36]	; (8007088 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007062:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007064:	d3f9      	bcc.n	800705a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007066:	f7fc fd01 	bl	8003a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800706a:	f000 f853 	bl	8007114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800706e:	f7f9 fc73 	bl	8000958 <main>
  bx  lr    
 8007072:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007074:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8007078:	08008e54 	.word	0x08008e54
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800707c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007080:	200001e8 	.word	0x200001e8
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8007084:	200001e8 	.word	0x200001e8
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007088:	20006068 	.word	0x20006068

0800708c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800708c:	e7fe      	b.n	800708c <ADC_IRQHandler>

0800708e <__aeabi_atexit>:
 800708e:	460b      	mov	r3, r1
 8007090:	4601      	mov	r1, r0
 8007092:	4618      	mov	r0, r3
 8007094:	f000 b81e 	b.w	80070d4 <__cxa_atexit>

08007098 <__assert_func>:
 8007098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800709a:	461c      	mov	r4, r3
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <__assert_func+0x2c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4605      	mov	r5, r0
 80070a2:	68d8      	ldr	r0, [r3, #12]
 80070a4:	b912      	cbnz	r2, 80070ac <__assert_func+0x14>
 80070a6:	4b08      	ldr	r3, [pc, #32]	; (80070c8 <__assert_func+0x30>)
 80070a8:	461a      	mov	r2, r3
 80070aa:	e000      	b.n	80070ae <__assert_func+0x16>
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <__assert_func+0x34>)
 80070ae:	9202      	str	r2, [sp, #8]
 80070b0:	e88d 000a 	stmia.w	sp, {r1, r3}
 80070b4:	4622      	mov	r2, r4
 80070b6:	462b      	mov	r3, r5
 80070b8:	4905      	ldr	r1, [pc, #20]	; (80070d0 <__assert_func+0x38>)
 80070ba:	f000 f819 	bl	80070f0 <fiprintf>
 80070be:	f000 fd2f 	bl	8007b20 <abort>
 80070c2:	bf00      	nop
 80070c4:	200001e4 	.word	0x200001e4
 80070c8:	08008da0 	.word	0x08008da0
 80070cc:	08008d65 	.word	0x08008d65
 80070d0:	08008d72 	.word	0x08008d72

080070d4 <__cxa_atexit>:
 80070d4:	b510      	push	{r4, lr}
 80070d6:	4c05      	ldr	r4, [pc, #20]	; (80070ec <__cxa_atexit+0x18>)
 80070d8:	4613      	mov	r3, r2
 80070da:	b12c      	cbz	r4, 80070e8 <__cxa_atexit+0x14>
 80070dc:	460a      	mov	r2, r1
 80070de:	4601      	mov	r1, r0
 80070e0:	2002      	movs	r0, #2
 80070e2:	f3af 8000 	nop.w
 80070e6:	bd10      	pop	{r4, pc}
 80070e8:	4620      	mov	r0, r4
 80070ea:	bd10      	pop	{r4, pc}
 80070ec:	00000000 	.word	0x00000000

080070f0 <fiprintf>:
 80070f0:	b40e      	push	{r1, r2, r3}
 80070f2:	b503      	push	{r0, r1, lr}
 80070f4:	4601      	mov	r1, r0
 80070f6:	ab03      	add	r3, sp, #12
 80070f8:	4805      	ldr	r0, [pc, #20]	; (8007110 <fiprintf+0x20>)
 80070fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	f000 f927 	bl	8007354 <_vfiprintf_r>
 8007106:	b002      	add	sp, #8
 8007108:	f85d eb04 	ldr.w	lr, [sp], #4
 800710c:	b003      	add	sp, #12
 800710e:	4770      	bx	lr
 8007110:	200001e4 	.word	0x200001e4

08007114 <__libc_init_array>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <__libc_init_array+0x3c>)
 8007118:	4c0e      	ldr	r4, [pc, #56]	; (8007154 <__libc_init_array+0x40>)
 800711a:	1ae4      	subs	r4, r4, r3
 800711c:	10a4      	asrs	r4, r4, #2
 800711e:	2500      	movs	r5, #0
 8007120:	461e      	mov	r6, r3
 8007122:	42a5      	cmp	r5, r4
 8007124:	d004      	beq.n	8007130 <__libc_init_array+0x1c>
 8007126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800712a:	4798      	blx	r3
 800712c:	3501      	adds	r5, #1
 800712e:	e7f8      	b.n	8007122 <__libc_init_array+0xe>
 8007130:	f001 f9b6 	bl	80084a0 <_init>
 8007134:	4c08      	ldr	r4, [pc, #32]	; (8007158 <__libc_init_array+0x44>)
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <__libc_init_array+0x48>)
 8007138:	1ae4      	subs	r4, r4, r3
 800713a:	10a4      	asrs	r4, r4, #2
 800713c:	2500      	movs	r5, #0
 800713e:	461e      	mov	r6, r3
 8007140:	42a5      	cmp	r5, r4
 8007142:	d004      	beq.n	800714e <__libc_init_array+0x3a>
 8007144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007148:	4798      	blx	r3
 800714a:	3501      	adds	r5, #1
 800714c:	e7f8      	b.n	8007140 <__libc_init_array+0x2c>
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	08008e44 	.word	0x08008e44
 8007154:	08008e44 	.word	0x08008e44
 8007158:	08008e50 	.word	0x08008e50
 800715c:	08008e44 	.word	0x08008e44

08007160 <malloc>:
 8007160:	4b02      	ldr	r3, [pc, #8]	; (800716c <malloc+0xc>)
 8007162:	4601      	mov	r1, r0
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f000 b86d 	b.w	8007244 <_malloc_r>
 800716a:	bf00      	nop
 800716c:	200001e4 	.word	0x200001e4

08007170 <free>:
 8007170:	4b02      	ldr	r3, [pc, #8]	; (800717c <free+0xc>)
 8007172:	4601      	mov	r1, r0
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	f000 b817 	b.w	80071a8 <_free_r>
 800717a:	bf00      	nop
 800717c:	200001e4 	.word	0x200001e4

08007180 <memcpy>:
 8007180:	b510      	push	{r4, lr}
 8007182:	1e43      	subs	r3, r0, #1
 8007184:	440a      	add	r2, r1
 8007186:	4291      	cmp	r1, r2
 8007188:	d004      	beq.n	8007194 <memcpy+0x14>
 800718a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007192:	e7f8      	b.n	8007186 <memcpy+0x6>
 8007194:	bd10      	pop	{r4, pc}

08007196 <memset>:
 8007196:	4402      	add	r2, r0
 8007198:	4603      	mov	r3, r0
 800719a:	4293      	cmp	r3, r2
 800719c:	d002      	beq.n	80071a4 <memset+0xe>
 800719e:	f803 1b01 	strb.w	r1, [r3], #1
 80071a2:	e7fa      	b.n	800719a <memset+0x4>
 80071a4:	4770      	bx	lr
	...

080071a8 <_free_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4605      	mov	r5, r0
 80071ac:	2900      	cmp	r1, #0
 80071ae:	d046      	beq.n	800723e <_free_r+0x96>
 80071b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b4:	1f0c      	subs	r4, r1, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfb8      	it	lt
 80071ba:	18e4      	addlt	r4, r4, r3
 80071bc:	f000 feaf 	bl	8007f1e <__malloc_lock>
 80071c0:	4a1f      	ldr	r2, [pc, #124]	; (8007240 <_free_r+0x98>)
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	4611      	mov	r1, r2
 80071c6:	b913      	cbnz	r3, 80071ce <_free_r+0x26>
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	6014      	str	r4, [r2, #0]
 80071cc:	e032      	b.n	8007234 <_free_r+0x8c>
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	d90e      	bls.n	80071f0 <_free_r+0x48>
 80071d2:	6822      	ldr	r2, [r4, #0]
 80071d4:	18a0      	adds	r0, r4, r2
 80071d6:	4283      	cmp	r3, r0
 80071d8:	bf04      	itt	eq
 80071da:	6818      	ldreq	r0, [r3, #0]
 80071dc:	685b      	ldreq	r3, [r3, #4]
 80071de:	6063      	str	r3, [r4, #4]
 80071e0:	bf04      	itt	eq
 80071e2:	1812      	addeq	r2, r2, r0
 80071e4:	6022      	streq	r2, [r4, #0]
 80071e6:	600c      	str	r4, [r1, #0]
 80071e8:	e024      	b.n	8007234 <_free_r+0x8c>
 80071ea:	42a2      	cmp	r2, r4
 80071ec:	d803      	bhi.n	80071f6 <_free_r+0x4e>
 80071ee:	4613      	mov	r3, r2
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	d1f9      	bne.n	80071ea <_free_r+0x42>
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	1819      	adds	r1, r3, r0
 80071fa:	42a1      	cmp	r1, r4
 80071fc:	d10b      	bne.n	8007216 <_free_r+0x6e>
 80071fe:	6821      	ldr	r1, [r4, #0]
 8007200:	4401      	add	r1, r0
 8007202:	1858      	adds	r0, r3, r1
 8007204:	4282      	cmp	r2, r0
 8007206:	6019      	str	r1, [r3, #0]
 8007208:	d114      	bne.n	8007234 <_free_r+0x8c>
 800720a:	6810      	ldr	r0, [r2, #0]
 800720c:	6852      	ldr	r2, [r2, #4]
 800720e:	605a      	str	r2, [r3, #4]
 8007210:	4401      	add	r1, r0
 8007212:	6019      	str	r1, [r3, #0]
 8007214:	e00e      	b.n	8007234 <_free_r+0x8c>
 8007216:	d902      	bls.n	800721e <_free_r+0x76>
 8007218:	230c      	movs	r3, #12
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	e00a      	b.n	8007234 <_free_r+0x8c>
 800721e:	6821      	ldr	r1, [r4, #0]
 8007220:	1860      	adds	r0, r4, r1
 8007222:	4282      	cmp	r2, r0
 8007224:	bf04      	itt	eq
 8007226:	6810      	ldreq	r0, [r2, #0]
 8007228:	6852      	ldreq	r2, [r2, #4]
 800722a:	6062      	str	r2, [r4, #4]
 800722c:	bf04      	itt	eq
 800722e:	1809      	addeq	r1, r1, r0
 8007230:	6021      	streq	r1, [r4, #0]
 8007232:	605c      	str	r4, [r3, #4]
 8007234:	4628      	mov	r0, r5
 8007236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800723a:	f000 be71 	b.w	8007f20 <__malloc_unlock>
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	20004bf8 	.word	0x20004bf8

08007244 <_malloc_r>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	1ccd      	adds	r5, r1, #3
 8007248:	f025 0503 	bic.w	r5, r5, #3
 800724c:	3508      	adds	r5, #8
 800724e:	2d0c      	cmp	r5, #12
 8007250:	bf38      	it	cc
 8007252:	250c      	movcc	r5, #12
 8007254:	2d00      	cmp	r5, #0
 8007256:	4606      	mov	r6, r0
 8007258:	db01      	blt.n	800725e <_malloc_r+0x1a>
 800725a:	42a9      	cmp	r1, r5
 800725c:	d902      	bls.n	8007264 <_malloc_r+0x20>
 800725e:	230c      	movs	r3, #12
 8007260:	6033      	str	r3, [r6, #0]
 8007262:	e046      	b.n	80072f2 <_malloc_r+0xae>
 8007264:	f000 fe5b 	bl	8007f1e <__malloc_lock>
 8007268:	4b23      	ldr	r3, [pc, #140]	; (80072f8 <_malloc_r+0xb4>)
 800726a:	681c      	ldr	r4, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	4621      	mov	r1, r4
 8007270:	b1a1      	cbz	r1, 800729c <_malloc_r+0x58>
 8007272:	680b      	ldr	r3, [r1, #0]
 8007274:	1b5b      	subs	r3, r3, r5
 8007276:	d40e      	bmi.n	8007296 <_malloc_r+0x52>
 8007278:	2b0b      	cmp	r3, #11
 800727a:	d903      	bls.n	8007284 <_malloc_r+0x40>
 800727c:	600b      	str	r3, [r1, #0]
 800727e:	18cc      	adds	r4, r1, r3
 8007280:	50cd      	str	r5, [r1, r3]
 8007282:	e01e      	b.n	80072c2 <_malloc_r+0x7e>
 8007284:	428c      	cmp	r4, r1
 8007286:	bf0d      	iteet	eq
 8007288:	6863      	ldreq	r3, [r4, #4]
 800728a:	684b      	ldrne	r3, [r1, #4]
 800728c:	6063      	strne	r3, [r4, #4]
 800728e:	6013      	streq	r3, [r2, #0]
 8007290:	bf18      	it	ne
 8007292:	460c      	movne	r4, r1
 8007294:	e015      	b.n	80072c2 <_malloc_r+0x7e>
 8007296:	460c      	mov	r4, r1
 8007298:	6849      	ldr	r1, [r1, #4]
 800729a:	e7e9      	b.n	8007270 <_malloc_r+0x2c>
 800729c:	4c17      	ldr	r4, [pc, #92]	; (80072fc <_malloc_r+0xb8>)
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	b91b      	cbnz	r3, 80072aa <_malloc_r+0x66>
 80072a2:	4630      	mov	r0, r6
 80072a4:	f000 fb0e 	bl	80078c4 <_sbrk_r>
 80072a8:	6020      	str	r0, [r4, #0]
 80072aa:	4629      	mov	r1, r5
 80072ac:	4630      	mov	r0, r6
 80072ae:	f000 fb09 	bl	80078c4 <_sbrk_r>
 80072b2:	1c43      	adds	r3, r0, #1
 80072b4:	d018      	beq.n	80072e8 <_malloc_r+0xa4>
 80072b6:	1cc4      	adds	r4, r0, #3
 80072b8:	f024 0403 	bic.w	r4, r4, #3
 80072bc:	42a0      	cmp	r0, r4
 80072be:	d10d      	bne.n	80072dc <_malloc_r+0x98>
 80072c0:	6025      	str	r5, [r4, #0]
 80072c2:	4630      	mov	r0, r6
 80072c4:	f000 fe2c 	bl	8007f20 <__malloc_unlock>
 80072c8:	f104 000b 	add.w	r0, r4, #11
 80072cc:	1d23      	adds	r3, r4, #4
 80072ce:	f020 0007 	bic.w	r0, r0, #7
 80072d2:	1ac3      	subs	r3, r0, r3
 80072d4:	d00e      	beq.n	80072f4 <_malloc_r+0xb0>
 80072d6:	425a      	negs	r2, r3
 80072d8:	50e2      	str	r2, [r4, r3]
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	1a21      	subs	r1, r4, r0
 80072de:	4630      	mov	r0, r6
 80072e0:	f000 faf0 	bl	80078c4 <_sbrk_r>
 80072e4:	3001      	adds	r0, #1
 80072e6:	d1eb      	bne.n	80072c0 <_malloc_r+0x7c>
 80072e8:	230c      	movs	r3, #12
 80072ea:	6033      	str	r3, [r6, #0]
 80072ec:	4630      	mov	r0, r6
 80072ee:	f000 fe17 	bl	8007f20 <__malloc_unlock>
 80072f2:	2000      	movs	r0, #0
 80072f4:	bd70      	pop	{r4, r5, r6, pc}
 80072f6:	bf00      	nop
 80072f8:	20004bf8 	.word	0x20004bf8
 80072fc:	20004bf4 	.word	0x20004bf4

08007300 <__sfputc_r>:
 8007300:	6893      	ldr	r3, [r2, #8]
 8007302:	3b01      	subs	r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	b410      	push	{r4}
 8007308:	6093      	str	r3, [r2, #8]
 800730a:	da09      	bge.n	8007320 <__sfputc_r+0x20>
 800730c:	6994      	ldr	r4, [r2, #24]
 800730e:	42a3      	cmp	r3, r4
 8007310:	db02      	blt.n	8007318 <__sfputc_r+0x18>
 8007312:	b2cb      	uxtb	r3, r1
 8007314:	2b0a      	cmp	r3, #10
 8007316:	d103      	bne.n	8007320 <__sfputc_r+0x20>
 8007318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800731c:	f000 bb3e 	b.w	800799c <__swbuf_r>
 8007320:	6813      	ldr	r3, [r2, #0]
 8007322:	1c58      	adds	r0, r3, #1
 8007324:	6010      	str	r0, [r2, #0]
 8007326:	7019      	strb	r1, [r3, #0]
 8007328:	b2c8      	uxtb	r0, r1
 800732a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800732e:	4770      	bx	lr

08007330 <__sfputs_r>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	4606      	mov	r6, r0
 8007334:	460f      	mov	r7, r1
 8007336:	4614      	mov	r4, r2
 8007338:	18d5      	adds	r5, r2, r3
 800733a:	42ac      	cmp	r4, r5
 800733c:	d008      	beq.n	8007350 <__sfputs_r+0x20>
 800733e:	463a      	mov	r2, r7
 8007340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007344:	4630      	mov	r0, r6
 8007346:	f7ff ffdb 	bl	8007300 <__sfputc_r>
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	d1f5      	bne.n	800733a <__sfputs_r+0xa>
 800734e:	e000      	b.n	8007352 <__sfputs_r+0x22>
 8007350:	2000      	movs	r0, #0
 8007352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007354 <_vfiprintf_r>:
 8007354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	b09d      	sub	sp, #116	; 0x74
 800735a:	460c      	mov	r4, r1
 800735c:	4617      	mov	r7, r2
 800735e:	9303      	str	r3, [sp, #12]
 8007360:	4606      	mov	r6, r0
 8007362:	b118      	cbz	r0, 800736c <_vfiprintf_r+0x18>
 8007364:	6983      	ldr	r3, [r0, #24]
 8007366:	b90b      	cbnz	r3, 800736c <_vfiprintf_r+0x18>
 8007368:	f000 fcd4 	bl	8007d14 <__sinit>
 800736c:	4b7f      	ldr	r3, [pc, #508]	; (800756c <_vfiprintf_r+0x218>)
 800736e:	429c      	cmp	r4, r3
 8007370:	d101      	bne.n	8007376 <_vfiprintf_r+0x22>
 8007372:	6874      	ldr	r4, [r6, #4]
 8007374:	e008      	b.n	8007388 <_vfiprintf_r+0x34>
 8007376:	4b7e      	ldr	r3, [pc, #504]	; (8007570 <_vfiprintf_r+0x21c>)
 8007378:	429c      	cmp	r4, r3
 800737a:	d101      	bne.n	8007380 <_vfiprintf_r+0x2c>
 800737c:	68b4      	ldr	r4, [r6, #8]
 800737e:	e003      	b.n	8007388 <_vfiprintf_r+0x34>
 8007380:	4b7c      	ldr	r3, [pc, #496]	; (8007574 <_vfiprintf_r+0x220>)
 8007382:	429c      	cmp	r4, r3
 8007384:	bf08      	it	eq
 8007386:	68f4      	ldreq	r4, [r6, #12]
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	0718      	lsls	r0, r3, #28
 800738c:	d50c      	bpl.n	80073a8 <_vfiprintf_r+0x54>
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	b153      	cbz	r3, 80073a8 <_vfiprintf_r+0x54>
 8007392:	2300      	movs	r3, #0
 8007394:	9309      	str	r3, [sp, #36]	; 0x24
 8007396:	2320      	movs	r3, #32
 8007398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800739c:	2330      	movs	r3, #48	; 0x30
 800739e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073a2:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8007578 <_vfiprintf_r+0x224>
 80073a6:	e044      	b.n	8007432 <_vfiprintf_r+0xde>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4630      	mov	r0, r6
 80073ac:	f000 fb4a 	bl	8007a44 <__swsetup_r>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d0ee      	beq.n	8007392 <_vfiprintf_r+0x3e>
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	e0d5      	b.n	8007566 <_vfiprintf_r+0x212>
 80073ba:	9a03      	ldr	r2, [sp, #12]
 80073bc:	1d11      	adds	r1, r2, #4
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	9103      	str	r1, [sp, #12]
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	f280 808c 	bge.w	80074e0 <_vfiprintf_r+0x18c>
 80073c8:	4252      	negs	r2, r2
 80073ca:	f043 0002 	orr.w	r0, r3, #2
 80073ce:	9207      	str	r2, [sp, #28]
 80073d0:	9004      	str	r0, [sp, #16]
 80073d2:	f898 3000 	ldrb.w	r3, [r8]
 80073d6:	2b2e      	cmp	r3, #46	; 0x2e
 80073d8:	f000 8084 	beq.w	80074e4 <_vfiprintf_r+0x190>
 80073dc:	2203      	movs	r2, #3
 80073de:	f898 1000 	ldrb.w	r1, [r8]
 80073e2:	4865      	ldr	r0, [pc, #404]	; (8007578 <_vfiprintf_r+0x224>)
 80073e4:	f7f8 ff14 	bl	8000210 <memchr>
 80073e8:	b148      	cbz	r0, 80073fe <_vfiprintf_r+0xaa>
 80073ea:	2340      	movs	r3, #64	; 0x40
 80073ec:	ebcb 0000 	rsb	r0, fp, r0
 80073f0:	fa03 f000 	lsl.w	r0, r3, r0
 80073f4:	9b04      	ldr	r3, [sp, #16]
 80073f6:	4318      	orrs	r0, r3
 80073f8:	9004      	str	r0, [sp, #16]
 80073fa:	f108 0801 	add.w	r8, r8, #1
 80073fe:	f898 1000 	ldrb.w	r1, [r8]
 8007402:	485e      	ldr	r0, [pc, #376]	; (800757c <_vfiprintf_r+0x228>)
 8007404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007408:	2206      	movs	r2, #6
 800740a:	f108 0701 	add.w	r7, r8, #1
 800740e:	f7f8 feff 	bl	8000210 <memchr>
 8007412:	2800      	cmp	r0, #0
 8007414:	f000 8095 	beq.w	8007542 <_vfiprintf_r+0x1ee>
 8007418:	4b59      	ldr	r3, [pc, #356]	; (8007580 <_vfiprintf_r+0x22c>)
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 8088 	bne.w	8007530 <_vfiprintf_r+0x1dc>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	3307      	adds	r3, #7
 8007424:	f023 0307 	bic.w	r3, r3, #7
 8007428:	3308      	adds	r3, #8
 800742a:	9303      	str	r3, [sp, #12]
 800742c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742e:	4453      	add	r3, sl
 8007430:	9309      	str	r3, [sp, #36]	; 0x24
 8007432:	46b8      	mov	r8, r7
 8007434:	4645      	mov	r5, r8
 8007436:	f815 3b01 	ldrb.w	r3, [r5], #1
 800743a:	b91b      	cbnz	r3, 8007444 <_vfiprintf_r+0xf0>
 800743c:	ebb8 0907 	subs.w	r9, r8, r7
 8007440:	d00f      	beq.n	8007462 <_vfiprintf_r+0x10e>
 8007442:	e003      	b.n	800744c <_vfiprintf_r+0xf8>
 8007444:	2b25      	cmp	r3, #37	; 0x25
 8007446:	d0f9      	beq.n	800743c <_vfiprintf_r+0xe8>
 8007448:	46a8      	mov	r8, r5
 800744a:	e7f3      	b.n	8007434 <_vfiprintf_r+0xe0>
 800744c:	464b      	mov	r3, r9
 800744e:	463a      	mov	r2, r7
 8007450:	4621      	mov	r1, r4
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff ff6c 	bl	8007330 <__sfputs_r>
 8007458:	3001      	adds	r0, #1
 800745a:	d07f      	beq.n	800755c <_vfiprintf_r+0x208>
 800745c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745e:	444b      	add	r3, r9
 8007460:	9309      	str	r3, [sp, #36]	; 0x24
 8007462:	f898 3000 	ldrb.w	r3, [r8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d078      	beq.n	800755c <_vfiprintf_r+0x208>
 800746a:	2300      	movs	r3, #0
 800746c:	f04f 32ff 	mov.w	r2, #4294967295
 8007470:	9304      	str	r3, [sp, #16]
 8007472:	9307      	str	r3, [sp, #28]
 8007474:	9205      	str	r2, [sp, #20]
 8007476:	9306      	str	r3, [sp, #24]
 8007478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800747c:	931a      	str	r3, [sp, #104]	; 0x68
 800747e:	2701      	movs	r7, #1
 8007480:	2205      	movs	r2, #5
 8007482:	7829      	ldrb	r1, [r5, #0]
 8007484:	483f      	ldr	r0, [pc, #252]	; (8007584 <_vfiprintf_r+0x230>)
 8007486:	f7f8 fec3 	bl	8000210 <memchr>
 800748a:	f105 0801 	add.w	r8, r5, #1
 800748e:	9b04      	ldr	r3, [sp, #16]
 8007490:	b138      	cbz	r0, 80074a2 <_vfiprintf_r+0x14e>
 8007492:	4a3c      	ldr	r2, [pc, #240]	; (8007584 <_vfiprintf_r+0x230>)
 8007494:	1a80      	subs	r0, r0, r2
 8007496:	fa07 f000 	lsl.w	r0, r7, r0
 800749a:	4318      	orrs	r0, r3
 800749c:	9004      	str	r0, [sp, #16]
 800749e:	4645      	mov	r5, r8
 80074a0:	e7ee      	b.n	8007480 <_vfiprintf_r+0x12c>
 80074a2:	06d9      	lsls	r1, r3, #27
 80074a4:	bf44      	itt	mi
 80074a6:	2220      	movmi	r2, #32
 80074a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074ac:	071a      	lsls	r2, r3, #28
 80074ae:	bf44      	itt	mi
 80074b0:	222b      	movmi	r2, #43	; 0x2b
 80074b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074b6:	782a      	ldrb	r2, [r5, #0]
 80074b8:	2a2a      	cmp	r2, #42	; 0x2a
 80074ba:	f43f af7e 	beq.w	80073ba <_vfiprintf_r+0x66>
 80074be:	9a07      	ldr	r2, [sp, #28]
 80074c0:	2100      	movs	r1, #0
 80074c2:	200a      	movs	r0, #10
 80074c4:	46a8      	mov	r8, r5
 80074c6:	3501      	adds	r5, #1
 80074c8:	f898 3000 	ldrb.w	r3, [r8]
 80074cc:	3b30      	subs	r3, #48	; 0x30
 80074ce:	2b09      	cmp	r3, #9
 80074d0:	d803      	bhi.n	80074da <_vfiprintf_r+0x186>
 80074d2:	fb00 3202 	mla	r2, r0, r2, r3
 80074d6:	2101      	movs	r1, #1
 80074d8:	e7f4      	b.n	80074c4 <_vfiprintf_r+0x170>
 80074da:	2900      	cmp	r1, #0
 80074dc:	f43f af79 	beq.w	80073d2 <_vfiprintf_r+0x7e>
 80074e0:	9207      	str	r2, [sp, #28]
 80074e2:	e776      	b.n	80073d2 <_vfiprintf_r+0x7e>
 80074e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80074e8:	2b2a      	cmp	r3, #42	; 0x2a
 80074ea:	d10b      	bne.n	8007504 <_vfiprintf_r+0x1b0>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9203      	str	r2, [sp, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfb8      	it	lt
 80074f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80074fc:	f108 0802 	add.w	r8, r8, #2
 8007500:	9305      	str	r3, [sp, #20]
 8007502:	e76b      	b.n	80073dc <_vfiprintf_r+0x88>
 8007504:	2300      	movs	r3, #0
 8007506:	9305      	str	r3, [sp, #20]
 8007508:	f108 0001 	add.w	r0, r8, #1
 800750c:	4619      	mov	r1, r3
 800750e:	250a      	movs	r5, #10
 8007510:	4680      	mov	r8, r0
 8007512:	3001      	adds	r0, #1
 8007514:	f898 2000 	ldrb.w	r2, [r8]
 8007518:	3a30      	subs	r2, #48	; 0x30
 800751a:	2a09      	cmp	r2, #9
 800751c:	d803      	bhi.n	8007526 <_vfiprintf_r+0x1d2>
 800751e:	fb05 2101 	mla	r1, r5, r1, r2
 8007522:	2301      	movs	r3, #1
 8007524:	e7f4      	b.n	8007510 <_vfiprintf_r+0x1bc>
 8007526:	2b00      	cmp	r3, #0
 8007528:	f43f af58 	beq.w	80073dc <_vfiprintf_r+0x88>
 800752c:	9105      	str	r1, [sp, #20]
 800752e:	e755      	b.n	80073dc <_vfiprintf_r+0x88>
 8007530:	ab03      	add	r3, sp, #12
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	4622      	mov	r2, r4
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <_vfiprintf_r+0x234>)
 8007538:	a904      	add	r1, sp, #16
 800753a:	4630      	mov	r0, r6
 800753c:	f3af 8000 	nop.w
 8007540:	e007      	b.n	8007552 <_vfiprintf_r+0x1fe>
 8007542:	ab03      	add	r3, sp, #12
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	4622      	mov	r2, r4
 8007548:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <_vfiprintf_r+0x234>)
 800754a:	a904      	add	r1, sp, #16
 800754c:	4630      	mov	r0, r6
 800754e:	f000 f893 	bl	8007678 <_printf_i>
 8007552:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007556:	4682      	mov	sl, r0
 8007558:	f47f af68 	bne.w	800742c <_vfiprintf_r+0xd8>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	065b      	lsls	r3, r3, #25
 8007560:	f53f af28 	bmi.w	80073b4 <_vfiprintf_r+0x60>
 8007564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007566:	b01d      	add	sp, #116	; 0x74
 8007568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756c:	08008ddc 	.word	0x08008ddc
 8007570:	08008dfc 	.word	0x08008dfc
 8007574:	08008e1c 	.word	0x08008e1c
 8007578:	08008dae 	.word	0x08008dae
 800757c:	08008db2 	.word	0x08008db2
 8007580:	00000000 	.word	0x00000000
 8007584:	08008da8 	.word	0x08008da8
 8007588:	08007331 	.word	0x08007331

0800758c <_printf_common>:
 800758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	4691      	mov	r9, r2
 8007592:	461f      	mov	r7, r3
 8007594:	690a      	ldr	r2, [r1, #16]
 8007596:	688b      	ldr	r3, [r1, #8]
 8007598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800759c:	4293      	cmp	r3, r2
 800759e:	bfb8      	it	lt
 80075a0:	4613      	movlt	r3, r2
 80075a2:	f8c9 3000 	str.w	r3, [r9]
 80075a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075aa:	4606      	mov	r6, r0
 80075ac:	460c      	mov	r4, r1
 80075ae:	b112      	cbz	r2, 80075b6 <_printf_common+0x2a>
 80075b0:	3301      	adds	r3, #1
 80075b2:	f8c9 3000 	str.w	r3, [r9]
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	0699      	lsls	r1, r3, #26
 80075ba:	bf42      	ittt	mi
 80075bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80075c0:	3302      	addmi	r3, #2
 80075c2:	f8c9 3000 	strmi.w	r3, [r9]
 80075c6:	6825      	ldr	r5, [r4, #0]
 80075c8:	f015 0506 	ands.w	r5, r5, #6
 80075cc:	d110      	bne.n	80075f0 <_printf_common+0x64>
 80075ce:	f104 0a19 	add.w	sl, r4, #25
 80075d2:	e007      	b.n	80075e4 <_printf_common+0x58>
 80075d4:	2301      	movs	r3, #1
 80075d6:	4652      	mov	r2, sl
 80075d8:	4639      	mov	r1, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	47c0      	blx	r8
 80075de:	3001      	adds	r0, #1
 80075e0:	d01a      	beq.n	8007618 <_printf_common+0x8c>
 80075e2:	3501      	adds	r5, #1
 80075e4:	68e3      	ldr	r3, [r4, #12]
 80075e6:	f8d9 2000 	ldr.w	r2, [r9]
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	429d      	cmp	r5, r3
 80075ee:	dbf1      	blt.n	80075d4 <_printf_common+0x48>
 80075f0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	3300      	adds	r3, #0
 80075f8:	bf18      	it	ne
 80075fa:	2301      	movne	r3, #1
 80075fc:	0692      	lsls	r2, r2, #26
 80075fe:	d50f      	bpl.n	8007620 <_printf_common+0x94>
 8007600:	18e1      	adds	r1, r4, r3
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	2030      	movs	r0, #48	; 0x30
 8007606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800760a:	4422      	add	r2, r4
 800760c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007614:	3302      	adds	r3, #2
 8007616:	e003      	b.n	8007620 <_printf_common+0x94>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007624:	4639      	mov	r1, r7
 8007626:	4630      	mov	r0, r6
 8007628:	47c0      	blx	r8
 800762a:	3001      	adds	r0, #1
 800762c:	d0f4      	beq.n	8007618 <_printf_common+0x8c>
 800762e:	6822      	ldr	r2, [r4, #0]
 8007630:	f8d9 5000 	ldr.w	r5, [r9]
 8007634:	68e3      	ldr	r3, [r4, #12]
 8007636:	f002 0206 	and.w	r2, r2, #6
 800763a:	2a04      	cmp	r2, #4
 800763c:	bf08      	it	eq
 800763e:	1b5d      	subeq	r5, r3, r5
 8007640:	6922      	ldr	r2, [r4, #16]
 8007642:	68a3      	ldr	r3, [r4, #8]
 8007644:	bf0c      	ite	eq
 8007646:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800764a:	2500      	movne	r5, #0
 800764c:	4293      	cmp	r3, r2
 800764e:	bfc4      	itt	gt
 8007650:	1a9b      	subgt	r3, r3, r2
 8007652:	18ed      	addgt	r5, r5, r3
 8007654:	f04f 0900 	mov.w	r9, #0
 8007658:	341a      	adds	r4, #26
 800765a:	454d      	cmp	r5, r9
 800765c:	d009      	beq.n	8007672 <_printf_common+0xe6>
 800765e:	2301      	movs	r3, #1
 8007660:	4622      	mov	r2, r4
 8007662:	4639      	mov	r1, r7
 8007664:	4630      	mov	r0, r6
 8007666:	47c0      	blx	r8
 8007668:	3001      	adds	r0, #1
 800766a:	d0d5      	beq.n	8007618 <_printf_common+0x8c>
 800766c:	f109 0901 	add.w	r9, r9, #1
 8007670:	e7f3      	b.n	800765a <_printf_common+0xce>
 8007672:	2000      	movs	r0, #0
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007678 <_printf_i>:
 8007678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800767c:	4617      	mov	r7, r2
 800767e:	7e0a      	ldrb	r2, [r1, #24]
 8007680:	b085      	sub	sp, #20
 8007682:	2a6e      	cmp	r2, #110	; 0x6e
 8007684:	4698      	mov	r8, r3
 8007686:	4606      	mov	r6, r0
 8007688:	460c      	mov	r4, r1
 800768a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800768c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007690:	f000 80ae 	beq.w	80077f0 <_printf_i+0x178>
 8007694:	d811      	bhi.n	80076ba <_printf_i+0x42>
 8007696:	2a63      	cmp	r2, #99	; 0x63
 8007698:	d022      	beq.n	80076e0 <_printf_i+0x68>
 800769a:	d809      	bhi.n	80076b0 <_printf_i+0x38>
 800769c:	2a00      	cmp	r2, #0
 800769e:	f000 80bb 	beq.w	8007818 <_printf_i+0x1a0>
 80076a2:	2a58      	cmp	r2, #88	; 0x58
 80076a4:	f040 80ca 	bne.w	800783c <_printf_i+0x1c4>
 80076a8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80076ac:	4983      	ldr	r1, [pc, #524]	; (80078bc <_printf_i+0x244>)
 80076ae:	e055      	b.n	800775c <_printf_i+0xe4>
 80076b0:	2a64      	cmp	r2, #100	; 0x64
 80076b2:	d01e      	beq.n	80076f2 <_printf_i+0x7a>
 80076b4:	2a69      	cmp	r2, #105	; 0x69
 80076b6:	d01c      	beq.n	80076f2 <_printf_i+0x7a>
 80076b8:	e0c0      	b.n	800783c <_printf_i+0x1c4>
 80076ba:	2a73      	cmp	r2, #115	; 0x73
 80076bc:	f000 80b0 	beq.w	8007820 <_printf_i+0x1a8>
 80076c0:	d809      	bhi.n	80076d6 <_printf_i+0x5e>
 80076c2:	2a6f      	cmp	r2, #111	; 0x6f
 80076c4:	d02e      	beq.n	8007724 <_printf_i+0xac>
 80076c6:	2a70      	cmp	r2, #112	; 0x70
 80076c8:	f040 80b8 	bne.w	800783c <_printf_i+0x1c4>
 80076cc:	680a      	ldr	r2, [r1, #0]
 80076ce:	f042 0220 	orr.w	r2, r2, #32
 80076d2:	600a      	str	r2, [r1, #0]
 80076d4:	e03e      	b.n	8007754 <_printf_i+0xdc>
 80076d6:	2a75      	cmp	r2, #117	; 0x75
 80076d8:	d024      	beq.n	8007724 <_printf_i+0xac>
 80076da:	2a78      	cmp	r2, #120	; 0x78
 80076dc:	d03a      	beq.n	8007754 <_printf_i+0xdc>
 80076de:	e0ad      	b.n	800783c <_printf_i+0x1c4>
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80076e6:	1d11      	adds	r1, r2, #4
 80076e8:	6019      	str	r1, [r3, #0]
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076f0:	e0a8      	b.n	8007844 <_printf_i+0x1cc>
 80076f2:	6821      	ldr	r1, [r4, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80076fa:	d002      	beq.n	8007702 <_printf_i+0x8a>
 80076fc:	1d11      	adds	r1, r2, #4
 80076fe:	6019      	str	r1, [r3, #0]
 8007700:	e008      	b.n	8007714 <_printf_i+0x9c>
 8007702:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007706:	f102 0104 	add.w	r1, r2, #4
 800770a:	6019      	str	r1, [r3, #0]
 800770c:	d002      	beq.n	8007714 <_printf_i+0x9c>
 800770e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007712:	e000      	b.n	8007716 <_printf_i+0x9e>
 8007714:	6813      	ldr	r3, [r2, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	da3c      	bge.n	8007794 <_printf_i+0x11c>
 800771a:	222d      	movs	r2, #45	; 0x2d
 800771c:	425b      	negs	r3, r3
 800771e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007722:	e037      	b.n	8007794 <_printf_i+0x11c>
 8007724:	6821      	ldr	r1, [r4, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	f011 0f80 	tst.w	r1, #128	; 0x80
 800772c:	d002      	beq.n	8007734 <_printf_i+0xbc>
 800772e:	1d11      	adds	r1, r2, #4
 8007730:	6019      	str	r1, [r3, #0]
 8007732:	e007      	b.n	8007744 <_printf_i+0xcc>
 8007734:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007738:	f102 0104 	add.w	r1, r2, #4
 800773c:	6019      	str	r1, [r3, #0]
 800773e:	d001      	beq.n	8007744 <_printf_i+0xcc>
 8007740:	8813      	ldrh	r3, [r2, #0]
 8007742:	e000      	b.n	8007746 <_printf_i+0xce>
 8007744:	6813      	ldr	r3, [r2, #0]
 8007746:	7e22      	ldrb	r2, [r4, #24]
 8007748:	495c      	ldr	r1, [pc, #368]	; (80078bc <_printf_i+0x244>)
 800774a:	2a6f      	cmp	r2, #111	; 0x6f
 800774c:	bf14      	ite	ne
 800774e:	220a      	movne	r2, #10
 8007750:	2208      	moveq	r2, #8
 8007752:	e01b      	b.n	800778c <_printf_i+0x114>
 8007754:	2278      	movs	r2, #120	; 0x78
 8007756:	495a      	ldr	r1, [pc, #360]	; (80078c0 <_printf_i+0x248>)
 8007758:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800775c:	6822      	ldr	r2, [r4, #0]
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007764:	f100 0504 	add.w	r5, r0, #4
 8007768:	601d      	str	r5, [r3, #0]
 800776a:	d103      	bne.n	8007774 <_printf_i+0xfc>
 800776c:	0655      	lsls	r5, r2, #25
 800776e:	d501      	bpl.n	8007774 <_printf_i+0xfc>
 8007770:	8803      	ldrh	r3, [r0, #0]
 8007772:	e000      	b.n	8007776 <_printf_i+0xfe>
 8007774:	6803      	ldr	r3, [r0, #0]
 8007776:	07d0      	lsls	r0, r2, #31
 8007778:	bf44      	itt	mi
 800777a:	f042 0220 	orrmi.w	r2, r2, #32
 800777e:	6022      	strmi	r2, [r4, #0]
 8007780:	b91b      	cbnz	r3, 800778a <_printf_i+0x112>
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	f022 0220 	bic.w	r2, r2, #32
 8007788:	6022      	str	r2, [r4, #0]
 800778a:	2210      	movs	r2, #16
 800778c:	2000      	movs	r0, #0
 800778e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007792:	e001      	b.n	8007798 <_printf_i+0x120>
 8007794:	4949      	ldr	r1, [pc, #292]	; (80078bc <_printf_i+0x244>)
 8007796:	220a      	movs	r2, #10
 8007798:	6865      	ldr	r5, [r4, #4]
 800779a:	60a5      	str	r5, [r4, #8]
 800779c:	2d00      	cmp	r5, #0
 800779e:	db08      	blt.n	80077b2 <_printf_i+0x13a>
 80077a0:	6820      	ldr	r0, [r4, #0]
 80077a2:	f020 0004 	bic.w	r0, r0, #4
 80077a6:	6020      	str	r0, [r4, #0]
 80077a8:	b92b      	cbnz	r3, 80077b6 <_printf_i+0x13e>
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	d17d      	bne.n	80078aa <_printf_i+0x232>
 80077ae:	4675      	mov	r5, lr
 80077b0:	e00c      	b.n	80077cc <_printf_i+0x154>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d079      	beq.n	80078aa <_printf_i+0x232>
 80077b6:	4675      	mov	r5, lr
 80077b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80077bc:	fb02 3310 	mls	r3, r2, r0, r3
 80077c0:	5ccb      	ldrb	r3, [r1, r3]
 80077c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80077c6:	4603      	mov	r3, r0
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d1f5      	bne.n	80077b8 <_printf_i+0x140>
 80077cc:	2a08      	cmp	r2, #8
 80077ce:	d10b      	bne.n	80077e8 <_printf_i+0x170>
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	07da      	lsls	r2, r3, #31
 80077d4:	d508      	bpl.n	80077e8 <_printf_i+0x170>
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	6862      	ldr	r2, [r4, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	bfde      	ittt	le
 80077de:	2330      	movle	r3, #48	; 0x30
 80077e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077e8:	ebc5 030e 	rsb	r3, r5, lr
 80077ec:	6123      	str	r3, [r4, #16]
 80077ee:	e02e      	b.n	800784e <_printf_i+0x1d6>
 80077f0:	6808      	ldr	r0, [r1, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	6949      	ldr	r1, [r1, #20]
 80077f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80077fa:	d003      	beq.n	8007804 <_printf_i+0x18c>
 80077fc:	1d10      	adds	r0, r2, #4
 80077fe:	6018      	str	r0, [r3, #0]
 8007800:	6813      	ldr	r3, [r2, #0]
 8007802:	e008      	b.n	8007816 <_printf_i+0x19e>
 8007804:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007808:	f102 0004 	add.w	r0, r2, #4
 800780c:	6018      	str	r0, [r3, #0]
 800780e:	6813      	ldr	r3, [r2, #0]
 8007810:	d001      	beq.n	8007816 <_printf_i+0x19e>
 8007812:	8019      	strh	r1, [r3, #0]
 8007814:	e000      	b.n	8007818 <_printf_i+0x1a0>
 8007816:	6019      	str	r1, [r3, #0]
 8007818:	2300      	movs	r3, #0
 800781a:	6123      	str	r3, [r4, #16]
 800781c:	4675      	mov	r5, lr
 800781e:	e016      	b.n	800784e <_printf_i+0x1d6>
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	1d11      	adds	r1, r2, #4
 8007824:	6019      	str	r1, [r3, #0]
 8007826:	6815      	ldr	r5, [r2, #0]
 8007828:	6862      	ldr	r2, [r4, #4]
 800782a:	2100      	movs	r1, #0
 800782c:	4628      	mov	r0, r5
 800782e:	f7f8 fcef 	bl	8000210 <memchr>
 8007832:	b108      	cbz	r0, 8007838 <_printf_i+0x1c0>
 8007834:	1b40      	subs	r0, r0, r5
 8007836:	6060      	str	r0, [r4, #4]
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	e004      	b.n	8007846 <_printf_i+0x1ce>
 800783c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007840:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007844:	2301      	movs	r3, #1
 8007846:	6123      	str	r3, [r4, #16]
 8007848:	2300      	movs	r3, #0
 800784a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800784e:	f8cd 8000 	str.w	r8, [sp]
 8007852:	463b      	mov	r3, r7
 8007854:	aa03      	add	r2, sp, #12
 8007856:	4621      	mov	r1, r4
 8007858:	4630      	mov	r0, r6
 800785a:	f7ff fe97 	bl	800758c <_printf_common>
 800785e:	3001      	adds	r0, #1
 8007860:	d102      	bne.n	8007868 <_printf_i+0x1f0>
 8007862:	f04f 30ff 	mov.w	r0, #4294967295
 8007866:	e026      	b.n	80078b6 <_printf_i+0x23e>
 8007868:	6923      	ldr	r3, [r4, #16]
 800786a:	462a      	mov	r2, r5
 800786c:	4639      	mov	r1, r7
 800786e:	4630      	mov	r0, r6
 8007870:	47c0      	blx	r8
 8007872:	3001      	adds	r0, #1
 8007874:	d0f5      	beq.n	8007862 <_printf_i+0x1ea>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	079b      	lsls	r3, r3, #30
 800787a:	d510      	bpl.n	800789e <_printf_i+0x226>
 800787c:	2500      	movs	r5, #0
 800787e:	f104 0919 	add.w	r9, r4, #25
 8007882:	e007      	b.n	8007894 <_printf_i+0x21c>
 8007884:	2301      	movs	r3, #1
 8007886:	464a      	mov	r2, r9
 8007888:	4639      	mov	r1, r7
 800788a:	4630      	mov	r0, r6
 800788c:	47c0      	blx	r8
 800788e:	3001      	adds	r0, #1
 8007890:	d0e7      	beq.n	8007862 <_printf_i+0x1ea>
 8007892:	3501      	adds	r5, #1
 8007894:	68e3      	ldr	r3, [r4, #12]
 8007896:	9a03      	ldr	r2, [sp, #12]
 8007898:	1a9b      	subs	r3, r3, r2
 800789a:	429d      	cmp	r5, r3
 800789c:	dbf2      	blt.n	8007884 <_printf_i+0x20c>
 800789e:	68e0      	ldr	r0, [r4, #12]
 80078a0:	9b03      	ldr	r3, [sp, #12]
 80078a2:	4298      	cmp	r0, r3
 80078a4:	bfb8      	it	lt
 80078a6:	4618      	movlt	r0, r3
 80078a8:	e005      	b.n	80078b6 <_printf_i+0x23e>
 80078aa:	780b      	ldrb	r3, [r1, #0]
 80078ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b4:	e78a      	b.n	80077cc <_printf_i+0x154>
 80078b6:	b005      	add	sp, #20
 80078b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078bc:	08008db9 	.word	0x08008db9
 80078c0:	08008dca 	.word	0x08008dca

080078c4 <_sbrk_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4c06      	ldr	r4, [pc, #24]	; (80078e0 <_sbrk_r+0x1c>)
 80078c8:	2300      	movs	r3, #0
 80078ca:	4605      	mov	r5, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	f000 fdce 	bl	8008470 <_sbrk>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_sbrk_r+0x1a>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	b103      	cbz	r3, 80078de <_sbrk_r+0x1a>
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20006064 	.word	0x20006064

080078e4 <_vsniprintf_r>:
 80078e4:	b530      	push	{r4, r5, lr}
 80078e6:	1e14      	subs	r4, r2, #0
 80078e8:	4605      	mov	r5, r0
 80078ea:	b09b      	sub	sp, #108	; 0x6c
 80078ec:	4618      	mov	r0, r3
 80078ee:	da04      	bge.n	80078fa <_vsniprintf_r+0x16>
 80078f0:	238b      	movs	r3, #139	; 0x8b
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	e01d      	b.n	8007936 <_vsniprintf_r+0x52>
 80078fa:	f44f 7302 	mov.w	r3, #520	; 0x208
 80078fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007902:	bf14      	ite	ne
 8007904:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007908:	4623      	moveq	r3, r4
 800790a:	9302      	str	r3, [sp, #8]
 800790c:	9305      	str	r3, [sp, #20]
 800790e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007912:	9100      	str	r1, [sp, #0]
 8007914:	9104      	str	r1, [sp, #16]
 8007916:	f8ad 300e 	strh.w	r3, [sp, #14]
 800791a:	4602      	mov	r2, r0
 800791c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800791e:	4669      	mov	r1, sp
 8007920:	4628      	mov	r0, r5
 8007922:	f000 fb7d 	bl	8008020 <_svfiprintf_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	bfbc      	itt	lt
 800792a:	238b      	movlt	r3, #139	; 0x8b
 800792c:	602b      	strlt	r3, [r5, #0]
 800792e:	b114      	cbz	r4, 8007936 <_vsniprintf_r+0x52>
 8007930:	9b00      	ldr	r3, [sp, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	b01b      	add	sp, #108	; 0x6c
 8007938:	bd30      	pop	{r4, r5, pc}
	...

0800793c <vsniprintf>:
 800793c:	b507      	push	{r0, r1, r2, lr}
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	460a      	mov	r2, r1
 8007944:	4601      	mov	r1, r0
 8007946:	4803      	ldr	r0, [pc, #12]	; (8007954 <vsniprintf+0x18>)
 8007948:	6800      	ldr	r0, [r0, #0]
 800794a:	f7ff ffcb 	bl	80078e4 <_vsniprintf_r>
 800794e:	b003      	add	sp, #12
 8007950:	f85d fb04 	ldr.w	pc, [sp], #4
 8007954:	200001e4 	.word	0x200001e4

08007958 <_vsiprintf_r>:
 8007958:	b510      	push	{r4, lr}
 800795a:	b09a      	sub	sp, #104	; 0x68
 800795c:	f44f 7402 	mov.w	r4, #520	; 0x208
 8007960:	9100      	str	r1, [sp, #0]
 8007962:	9104      	str	r1, [sp, #16]
 8007964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007968:	9102      	str	r1, [sp, #8]
 800796a:	9105      	str	r1, [sp, #20]
 800796c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007970:	f8ad 100e 	strh.w	r1, [sp, #14]
 8007974:	4669      	mov	r1, sp
 8007976:	f8ad 400c 	strh.w	r4, [sp, #12]
 800797a:	f000 fb51 	bl	8008020 <_svfiprintf_r>
 800797e:	9b00      	ldr	r3, [sp, #0]
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	b01a      	add	sp, #104	; 0x68
 8007986:	bd10      	pop	{r4, pc}

08007988 <vsiprintf>:
 8007988:	4613      	mov	r3, r2
 800798a:	460a      	mov	r2, r1
 800798c:	4601      	mov	r1, r0
 800798e:	4802      	ldr	r0, [pc, #8]	; (8007998 <vsiprintf+0x10>)
 8007990:	6800      	ldr	r0, [r0, #0]
 8007992:	f7ff bfe1 	b.w	8007958 <_vsiprintf_r>
 8007996:	bf00      	nop
 8007998:	200001e4 	.word	0x200001e4

0800799c <__swbuf_r>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	460f      	mov	r7, r1
 80079a0:	4614      	mov	r4, r2
 80079a2:	4605      	mov	r5, r0
 80079a4:	b118      	cbz	r0, 80079ae <__swbuf_r+0x12>
 80079a6:	6983      	ldr	r3, [r0, #24]
 80079a8:	b90b      	cbnz	r3, 80079ae <__swbuf_r+0x12>
 80079aa:	f000 f9b3 	bl	8007d14 <__sinit>
 80079ae:	4b22      	ldr	r3, [pc, #136]	; (8007a38 <__swbuf_r+0x9c>)
 80079b0:	429c      	cmp	r4, r3
 80079b2:	d101      	bne.n	80079b8 <__swbuf_r+0x1c>
 80079b4:	686c      	ldr	r4, [r5, #4]
 80079b6:	e008      	b.n	80079ca <__swbuf_r+0x2e>
 80079b8:	4b20      	ldr	r3, [pc, #128]	; (8007a3c <__swbuf_r+0xa0>)
 80079ba:	429c      	cmp	r4, r3
 80079bc:	d101      	bne.n	80079c2 <__swbuf_r+0x26>
 80079be:	68ac      	ldr	r4, [r5, #8]
 80079c0:	e003      	b.n	80079ca <__swbuf_r+0x2e>
 80079c2:	4b1f      	ldr	r3, [pc, #124]	; (8007a40 <__swbuf_r+0xa4>)
 80079c4:	429c      	cmp	r4, r3
 80079c6:	bf08      	it	eq
 80079c8:	68ec      	ldreq	r4, [r5, #12]
 80079ca:	69a3      	ldr	r3, [r4, #24]
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	071a      	lsls	r2, r3, #28
 80079d2:	d509      	bpl.n	80079e8 <__swbuf_r+0x4c>
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	b13b      	cbz	r3, 80079e8 <__swbuf_r+0x4c>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	6920      	ldr	r0, [r4, #16]
 80079dc:	1a18      	subs	r0, r3, r0
 80079de:	6963      	ldr	r3, [r4, #20]
 80079e0:	4298      	cmp	r0, r3
 80079e2:	b2fe      	uxtb	r6, r7
 80079e4:	db0f      	blt.n	8007a06 <__swbuf_r+0x6a>
 80079e6:	e008      	b.n	80079fa <__swbuf_r+0x5e>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 f82a 	bl	8007a44 <__swsetup_r>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d0f1      	beq.n	80079d8 <__swbuf_r+0x3c>
 80079f4:	f04f 36ff 	mov.w	r6, #4294967295
 80079f8:	e01b      	b.n	8007a32 <__swbuf_r+0x96>
 80079fa:	4621      	mov	r1, r4
 80079fc:	4628      	mov	r0, r5
 80079fe:	f000 f91f 	bl	8007c40 <_fflush_r>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d1f6      	bne.n	80079f4 <__swbuf_r+0x58>
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	60a3      	str	r3, [r4, #8]
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	6022      	str	r2, [r4, #0]
 8007a12:	701f      	strb	r7, [r3, #0]
 8007a14:	6963      	ldr	r3, [r4, #20]
 8007a16:	3001      	adds	r0, #1
 8007a18:	4298      	cmp	r0, r3
 8007a1a:	d004      	beq.n	8007a26 <__swbuf_r+0x8a>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	07db      	lsls	r3, r3, #31
 8007a20:	d507      	bpl.n	8007a32 <__swbuf_r+0x96>
 8007a22:	2e0a      	cmp	r6, #10
 8007a24:	d105      	bne.n	8007a32 <__swbuf_r+0x96>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f000 f909 	bl	8007c40 <_fflush_r>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d1e0      	bne.n	80079f4 <__swbuf_r+0x58>
 8007a32:	4630      	mov	r0, r6
 8007a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a36:	bf00      	nop
 8007a38:	08008ddc 	.word	0x08008ddc
 8007a3c:	08008dfc 	.word	0x08008dfc
 8007a40:	08008e1c 	.word	0x08008e1c

08007a44 <__swsetup_r>:
 8007a44:	4b32      	ldr	r3, [pc, #200]	; (8007b10 <__swsetup_r+0xcc>)
 8007a46:	b570      	push	{r4, r5, r6, lr}
 8007a48:	681d      	ldr	r5, [r3, #0]
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	b125      	cbz	r5, 8007a5a <__swsetup_r+0x16>
 8007a50:	69ab      	ldr	r3, [r5, #24]
 8007a52:	b913      	cbnz	r3, 8007a5a <__swsetup_r+0x16>
 8007a54:	4628      	mov	r0, r5
 8007a56:	f000 f95d 	bl	8007d14 <__sinit>
 8007a5a:	4b2e      	ldr	r3, [pc, #184]	; (8007b14 <__swsetup_r+0xd0>)
 8007a5c:	429c      	cmp	r4, r3
 8007a5e:	d101      	bne.n	8007a64 <__swsetup_r+0x20>
 8007a60:	686c      	ldr	r4, [r5, #4]
 8007a62:	e008      	b.n	8007a76 <__swsetup_r+0x32>
 8007a64:	4b2c      	ldr	r3, [pc, #176]	; (8007b18 <__swsetup_r+0xd4>)
 8007a66:	429c      	cmp	r4, r3
 8007a68:	d101      	bne.n	8007a6e <__swsetup_r+0x2a>
 8007a6a:	68ac      	ldr	r4, [r5, #8]
 8007a6c:	e003      	b.n	8007a76 <__swsetup_r+0x32>
 8007a6e:	4b2b      	ldr	r3, [pc, #172]	; (8007b1c <__swsetup_r+0xd8>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	bf08      	it	eq
 8007a74:	68ec      	ldreq	r4, [r5, #12]
 8007a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	0715      	lsls	r5, r2, #28
 8007a7e:	d41d      	bmi.n	8007abc <__swsetup_r+0x78>
 8007a80:	06d0      	lsls	r0, r2, #27
 8007a82:	d402      	bmi.n	8007a8a <__swsetup_r+0x46>
 8007a84:	2209      	movs	r2, #9
 8007a86:	6032      	str	r2, [r6, #0]
 8007a88:	e03a      	b.n	8007b00 <__swsetup_r+0xbc>
 8007a8a:	0751      	lsls	r1, r2, #29
 8007a8c:	d512      	bpl.n	8007ab4 <__swsetup_r+0x70>
 8007a8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a90:	b141      	cbz	r1, 8007aa4 <__swsetup_r+0x60>
 8007a92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a96:	4299      	cmp	r1, r3
 8007a98:	d002      	beq.n	8007aa0 <__swsetup_r+0x5c>
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff fb84 	bl	80071a8 <_free_r>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	6363      	str	r3, [r4, #52]	; 0x34
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	2300      	movs	r3, #0
 8007aae:	6063      	str	r3, [r4, #4]
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	6023      	str	r3, [r4, #0]
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f043 0308 	orr.w	r3, r3, #8
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	b94b      	cbnz	r3, 8007ad4 <__swsetup_r+0x90>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aca:	d003      	beq.n	8007ad4 <__swsetup_r+0x90>
 8007acc:	4621      	mov	r1, r4
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f000 f9ce 	bl	8007e70 <__smakebuf_r>
 8007ad4:	89a2      	ldrh	r2, [r4, #12]
 8007ad6:	f012 0301 	ands.w	r3, r2, #1
 8007ada:	d005      	beq.n	8007ae8 <__swsetup_r+0xa4>
 8007adc:	2300      	movs	r3, #0
 8007ade:	60a3      	str	r3, [r4, #8]
 8007ae0:	6963      	ldr	r3, [r4, #20]
 8007ae2:	425b      	negs	r3, r3
 8007ae4:	61a3      	str	r3, [r4, #24]
 8007ae6:	e003      	b.n	8007af0 <__swsetup_r+0xac>
 8007ae8:	0792      	lsls	r2, r2, #30
 8007aea:	bf58      	it	pl
 8007aec:	6963      	ldrpl	r3, [r4, #20]
 8007aee:	60a3      	str	r3, [r4, #8]
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	b95b      	cbnz	r3, 8007b0c <__swsetup_r+0xc8>
 8007af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af8:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8007afc:	b280      	uxth	r0, r0
 8007afe:	b130      	cbz	r0, 8007b0e <__swsetup_r+0xca>
 8007b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}
 8007b10:	200001e4 	.word	0x200001e4
 8007b14:	08008ddc 	.word	0x08008ddc
 8007b18:	08008dfc 	.word	0x08008dfc
 8007b1c:	08008e1c 	.word	0x08008e1c

08007b20 <abort>:
 8007b20:	b508      	push	{r3, lr}
 8007b22:	2006      	movs	r0, #6
 8007b24:	f000 fb9a 	bl	800825c <raise>
 8007b28:	2001      	movs	r0, #1
 8007b2a:	f000 fcb7 	bl	800849c <_exit>
	...

08007b30 <__sflush_r>:
 8007b30:	898a      	ldrh	r2, [r1, #12]
 8007b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b36:	4605      	mov	r5, r0
 8007b38:	0710      	lsls	r0, r2, #28
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	d459      	bmi.n	8007bf2 <__sflush_r+0xc2>
 8007b3e:	684b      	ldr	r3, [r1, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dc02      	bgt.n	8007b4a <__sflush_r+0x1a>
 8007b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dd17      	ble.n	8007b7a <__sflush_r+0x4a>
 8007b4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b4c:	b1ae      	cbz	r6, 8007b7a <__sflush_r+0x4a>
 8007b4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007b52:	2300      	movs	r3, #0
 8007b54:	b292      	uxth	r2, r2
 8007b56:	682f      	ldr	r7, [r5, #0]
 8007b58:	602b      	str	r3, [r5, #0]
 8007b5a:	b10a      	cbz	r2, 8007b60 <__sflush_r+0x30>
 8007b5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b5e:	e015      	b.n	8007b8c <__sflush_r+0x5c>
 8007b60:	6a21      	ldr	r1, [r4, #32]
 8007b62:	2301      	movs	r3, #1
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b0      	blx	r6
 8007b68:	1c41      	adds	r1, r0, #1
 8007b6a:	d10f      	bne.n	8007b8c <__sflush_r+0x5c>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b16b      	cbz	r3, 8007b8c <__sflush_r+0x5c>
 8007b70:	2b1d      	cmp	r3, #29
 8007b72:	d001      	beq.n	8007b78 <__sflush_r+0x48>
 8007b74:	2b16      	cmp	r3, #22
 8007b76:	d103      	bne.n	8007b80 <__sflush_r+0x50>
 8007b78:	602f      	str	r7, [r5, #0]
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	075a      	lsls	r2, r3, #29
 8007b90:	d505      	bpl.n	8007b9e <__sflush_r+0x6e>
 8007b92:	6863      	ldr	r3, [r4, #4]
 8007b94:	1ac0      	subs	r0, r0, r3
 8007b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b98:	b10b      	cbz	r3, 8007b9e <__sflush_r+0x6e>
 8007b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b9c:	1ac0      	subs	r0, r0, r3
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ba4:	6a21      	ldr	r1, [r4, #32]
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b0      	blx	r6
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	d106      	bne.n	8007bbe <__sflush_r+0x8e>
 8007bb0:	6829      	ldr	r1, [r5, #0]
 8007bb2:	291d      	cmp	r1, #29
 8007bb4:	d83a      	bhi.n	8007c2c <__sflush_r+0xfc>
 8007bb6:	4a21      	ldr	r2, [pc, #132]	; (8007c3c <__sflush_r+0x10c>)
 8007bb8:	40ca      	lsrs	r2, r1
 8007bba:	07d6      	lsls	r6, r2, #31
 8007bbc:	d536      	bpl.n	8007c2c <__sflush_r+0xfc>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	6062      	str	r2, [r4, #4]
 8007bc2:	04d9      	lsls	r1, r3, #19
 8007bc4:	6922      	ldr	r2, [r4, #16]
 8007bc6:	6022      	str	r2, [r4, #0]
 8007bc8:	d504      	bpl.n	8007bd4 <__sflush_r+0xa4>
 8007bca:	1c42      	adds	r2, r0, #1
 8007bcc:	d101      	bne.n	8007bd2 <__sflush_r+0xa2>
 8007bce:	682b      	ldr	r3, [r5, #0]
 8007bd0:	b903      	cbnz	r3, 8007bd4 <__sflush_r+0xa4>
 8007bd2:	6560      	str	r0, [r4, #84]	; 0x54
 8007bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd6:	602f      	str	r7, [r5, #0]
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	d0ce      	beq.n	8007b7a <__sflush_r+0x4a>
 8007bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007be0:	4299      	cmp	r1, r3
 8007be2:	d002      	beq.n	8007bea <__sflush_r+0xba>
 8007be4:	4628      	mov	r0, r5
 8007be6:	f7ff fadf 	bl	80071a8 <_free_r>
 8007bea:	2000      	movs	r0, #0
 8007bec:	6360      	str	r0, [r4, #52]	; 0x34
 8007bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf2:	690f      	ldr	r7, [r1, #16]
 8007bf4:	2f00      	cmp	r7, #0
 8007bf6:	d0c0      	beq.n	8007b7a <__sflush_r+0x4a>
 8007bf8:	0793      	lsls	r3, r2, #30
 8007bfa:	680e      	ldr	r6, [r1, #0]
 8007bfc:	bf08      	it	eq
 8007bfe:	694b      	ldreq	r3, [r1, #20]
 8007c00:	600f      	str	r7, [r1, #0]
 8007c02:	bf18      	it	ne
 8007c04:	2300      	movne	r3, #0
 8007c06:	ebc7 0806 	rsb	r8, r7, r6
 8007c0a:	608b      	str	r3, [r1, #8]
 8007c0c:	e002      	b.n	8007c14 <__sflush_r+0xe4>
 8007c0e:	4407      	add	r7, r0
 8007c10:	ebc0 0808 	rsb	r8, r0, r8
 8007c14:	f1b8 0f00 	cmp.w	r8, #0
 8007c18:	ddaf      	ble.n	8007b7a <__sflush_r+0x4a>
 8007c1a:	4643      	mov	r3, r8
 8007c1c:	463a      	mov	r2, r7
 8007c1e:	6a21      	ldr	r1, [r4, #32]
 8007c20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c22:	4628      	mov	r0, r5
 8007c24:	47b0      	blx	r6
 8007c26:	2800      	cmp	r0, #0
 8007c28:	dcf1      	bgt.n	8007c0e <__sflush_r+0xde>
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	f04f 30ff 	mov.w	r0, #4294967295
 8007c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20400001 	.word	0x20400001

08007c40 <_fflush_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	690b      	ldr	r3, [r1, #16]
 8007c44:	4605      	mov	r5, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	b1db      	cbz	r3, 8007c82 <_fflush_r+0x42>
 8007c4a:	b118      	cbz	r0, 8007c54 <_fflush_r+0x14>
 8007c4c:	6983      	ldr	r3, [r0, #24]
 8007c4e:	b90b      	cbnz	r3, 8007c54 <_fflush_r+0x14>
 8007c50:	f000 f860 	bl	8007d14 <__sinit>
 8007c54:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <_fflush_r+0x48>)
 8007c56:	429c      	cmp	r4, r3
 8007c58:	d101      	bne.n	8007c5e <_fflush_r+0x1e>
 8007c5a:	686c      	ldr	r4, [r5, #4]
 8007c5c:	e008      	b.n	8007c70 <_fflush_r+0x30>
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <_fflush_r+0x4c>)
 8007c60:	429c      	cmp	r4, r3
 8007c62:	d101      	bne.n	8007c68 <_fflush_r+0x28>
 8007c64:	68ac      	ldr	r4, [r5, #8]
 8007c66:	e003      	b.n	8007c70 <_fflush_r+0x30>
 8007c68:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <_fflush_r+0x50>)
 8007c6a:	429c      	cmp	r4, r3
 8007c6c:	bf08      	it	eq
 8007c6e:	68ec      	ldreq	r4, [r5, #12]
 8007c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c74:	b12b      	cbz	r3, 8007c82 <_fflush_r+0x42>
 8007c76:	4621      	mov	r1, r4
 8007c78:	4628      	mov	r0, r5
 8007c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c7e:	f7ff bf57 	b.w	8007b30 <__sflush_r>
 8007c82:	2000      	movs	r0, #0
 8007c84:	bd38      	pop	{r3, r4, r5, pc}
 8007c86:	bf00      	nop
 8007c88:	08008ddc 	.word	0x08008ddc
 8007c8c:	08008dfc 	.word	0x08008dfc
 8007c90:	08008e1c 	.word	0x08008e1c

08007c94 <_cleanup_r>:
 8007c94:	4901      	ldr	r1, [pc, #4]	; (8007c9c <_cleanup_r+0x8>)
 8007c96:	f000 b8a9 	b.w	8007dec <_fwalk_reent>
 8007c9a:	bf00      	nop
 8007c9c:	08007c41 	.word	0x08007c41

08007ca0 <std.isra.0>:
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	6003      	str	r3, [r0, #0]
 8007ca8:	6043      	str	r3, [r0, #4]
 8007caa:	6083      	str	r3, [r0, #8]
 8007cac:	8181      	strh	r1, [r0, #12]
 8007cae:	6643      	str	r3, [r0, #100]	; 0x64
 8007cb0:	81c2      	strh	r2, [r0, #14]
 8007cb2:	6103      	str	r3, [r0, #16]
 8007cb4:	6143      	str	r3, [r0, #20]
 8007cb6:	6183      	str	r3, [r0, #24]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	2208      	movs	r2, #8
 8007cbc:	305c      	adds	r0, #92	; 0x5c
 8007cbe:	f7ff fa6a 	bl	8007196 <memset>
 8007cc2:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <std.isra.0+0x38>)
 8007cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <std.isra.0+0x3c>)
 8007cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cca:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <std.isra.0+0x40>)
 8007ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <std.isra.0+0x44>)
 8007cd0:	6224      	str	r4, [r4, #32]
 8007cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	bf00      	nop
 8007cd8:	08008295 	.word	0x08008295
 8007cdc:	080082b7 	.word	0x080082b7
 8007ce0:	080082ef 	.word	0x080082ef
 8007ce4:	08008313 	.word	0x08008313

08007ce8 <__sfmoreglue>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	2368      	movs	r3, #104	; 0x68
 8007cec:	1e4d      	subs	r5, r1, #1
 8007cee:	435d      	muls	r5, r3
 8007cf0:	460e      	mov	r6, r1
 8007cf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cf6:	f7ff faa5 	bl	8007244 <_malloc_r>
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	b140      	cbz	r0, 8007d10 <__sfmoreglue+0x28>
 8007cfe:	2100      	movs	r1, #0
 8007d00:	e880 0042 	stmia.w	r0, {r1, r6}
 8007d04:	300c      	adds	r0, #12
 8007d06:	60a0      	str	r0, [r4, #8]
 8007d08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d0c:	f7ff fa43 	bl	8007196 <memset>
 8007d10:	4620      	mov	r0, r4
 8007d12:	bd70      	pop	{r4, r5, r6, pc}

08007d14 <__sinit>:
 8007d14:	6983      	ldr	r3, [r0, #24]
 8007d16:	b510      	push	{r4, lr}
 8007d18:	4604      	mov	r4, r0
 8007d1a:	bb33      	cbnz	r3, 8007d6a <__sinit+0x56>
 8007d1c:	6483      	str	r3, [r0, #72]	; 0x48
 8007d1e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007d20:	6503      	str	r3, [r0, #80]	; 0x50
 8007d22:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <__sinit+0x58>)
 8007d24:	4a12      	ldr	r2, [pc, #72]	; (8007d70 <__sinit+0x5c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6282      	str	r2, [r0, #40]	; 0x28
 8007d2a:	4298      	cmp	r0, r3
 8007d2c:	bf04      	itt	eq
 8007d2e:	2301      	moveq	r3, #1
 8007d30:	6183      	streq	r3, [r0, #24]
 8007d32:	f000 f81f 	bl	8007d74 <__sfp>
 8007d36:	6060      	str	r0, [r4, #4]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 f81b 	bl	8007d74 <__sfp>
 8007d3e:	60a0      	str	r0, [r4, #8]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 f817 	bl	8007d74 <__sfp>
 8007d46:	2200      	movs	r2, #0
 8007d48:	60e0      	str	r0, [r4, #12]
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	6860      	ldr	r0, [r4, #4]
 8007d4e:	f7ff ffa7 	bl	8007ca0 <std.isra.0>
 8007d52:	2201      	movs	r2, #1
 8007d54:	2109      	movs	r1, #9
 8007d56:	68a0      	ldr	r0, [r4, #8]
 8007d58:	f7ff ffa2 	bl	8007ca0 <std.isra.0>
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	2112      	movs	r1, #18
 8007d60:	68e0      	ldr	r0, [r4, #12]
 8007d62:	f7ff ff9d 	bl	8007ca0 <std.isra.0>
 8007d66:	2301      	movs	r3, #1
 8007d68:	61a3      	str	r3, [r4, #24]
 8007d6a:	bd10      	pop	{r4, pc}
 8007d6c:	08008da4 	.word	0x08008da4
 8007d70:	08007c95 	.word	0x08007c95

08007d74 <__sfp>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <__sfp+0x74>)
 8007d78:	681e      	ldr	r6, [r3, #0]
 8007d7a:	69b3      	ldr	r3, [r6, #24]
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	b913      	cbnz	r3, 8007d86 <__sfp+0x12>
 8007d80:	4630      	mov	r0, r6
 8007d82:	f7ff ffc7 	bl	8007d14 <__sinit>
 8007d86:	3648      	adds	r6, #72	; 0x48
 8007d88:	68b4      	ldr	r4, [r6, #8]
 8007d8a:	6873      	ldr	r3, [r6, #4]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	d404      	bmi.n	8007d9a <__sfp+0x26>
 8007d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d94:	b17d      	cbz	r5, 8007db6 <__sfp+0x42>
 8007d96:	3468      	adds	r4, #104	; 0x68
 8007d98:	e7f8      	b.n	8007d8c <__sfp+0x18>
 8007d9a:	6833      	ldr	r3, [r6, #0]
 8007d9c:	b10b      	cbz	r3, 8007da2 <__sfp+0x2e>
 8007d9e:	6836      	ldr	r6, [r6, #0]
 8007da0:	e7f2      	b.n	8007d88 <__sfp+0x14>
 8007da2:	2104      	movs	r1, #4
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff ff9f 	bl	8007ce8 <__sfmoreglue>
 8007daa:	6030      	str	r0, [r6, #0]
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d1f6      	bne.n	8007d9e <__sfp+0x2a>
 8007db0:	230c      	movs	r3, #12
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dba:	81e3      	strh	r3, [r4, #14]
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	6665      	str	r5, [r4, #100]	; 0x64
 8007dc2:	6025      	str	r5, [r4, #0]
 8007dc4:	60a5      	str	r5, [r4, #8]
 8007dc6:	6065      	str	r5, [r4, #4]
 8007dc8:	6125      	str	r5, [r4, #16]
 8007dca:	6165      	str	r5, [r4, #20]
 8007dcc:	61a5      	str	r5, [r4, #24]
 8007dce:	2208      	movs	r2, #8
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dd6:	f7ff f9de 	bl	8007196 <memset>
 8007dda:	6365      	str	r5, [r4, #52]	; 0x34
 8007ddc:	63a5      	str	r5, [r4, #56]	; 0x38
 8007dde:	64a5      	str	r5, [r4, #72]	; 0x48
 8007de0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007de2:	4620      	mov	r0, r4
 8007de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de6:	bf00      	nop
 8007de8:	08008da4 	.word	0x08008da4

08007dec <_fwalk_reent>:
 8007dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	4680      	mov	r8, r0
 8007df2:	4689      	mov	r9, r1
 8007df4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007df8:	2600      	movs	r6, #0
 8007dfa:	b194      	cbz	r4, 8007e22 <_fwalk_reent+0x36>
 8007dfc:	68a5      	ldr	r5, [r4, #8]
 8007dfe:	6867      	ldr	r7, [r4, #4]
 8007e00:	3f01      	subs	r7, #1
 8007e02:	d40c      	bmi.n	8007e1e <_fwalk_reent+0x32>
 8007e04:	89ab      	ldrh	r3, [r5, #12]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d907      	bls.n	8007e1a <_fwalk_reent+0x2e>
 8007e0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	d003      	beq.n	8007e1a <_fwalk_reent+0x2e>
 8007e12:	4629      	mov	r1, r5
 8007e14:	4640      	mov	r0, r8
 8007e16:	47c8      	blx	r9
 8007e18:	4306      	orrs	r6, r0
 8007e1a:	3568      	adds	r5, #104	; 0x68
 8007e1c:	e7f0      	b.n	8007e00 <_fwalk_reent+0x14>
 8007e1e:	6824      	ldr	r4, [r4, #0]
 8007e20:	e7eb      	b.n	8007dfa <_fwalk_reent+0xe>
 8007e22:	4630      	mov	r0, r6
 8007e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007e28 <__swhatbuf_r>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	460e      	mov	r6, r1
 8007e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e30:	2900      	cmp	r1, #0
 8007e32:	b090      	sub	sp, #64	; 0x40
 8007e34:	4614      	mov	r4, r2
 8007e36:	461d      	mov	r5, r3
 8007e38:	da06      	bge.n	8007e48 <__swhatbuf_r+0x20>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	602b      	str	r3, [r5, #0]
 8007e3e:	89b3      	ldrh	r3, [r6, #12]
 8007e40:	061a      	lsls	r2, r3, #24
 8007e42:	d50e      	bpl.n	8007e62 <__swhatbuf_r+0x3a>
 8007e44:	2340      	movs	r3, #64	; 0x40
 8007e46:	e00e      	b.n	8007e66 <__swhatbuf_r+0x3e>
 8007e48:	aa01      	add	r2, sp, #4
 8007e4a:	f000 fa89 	bl	8008360 <_fstat_r>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	dbf3      	blt.n	8007e3a <__swhatbuf_r+0x12>
 8007e52:	9a02      	ldr	r2, [sp, #8]
 8007e54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e5c:	425a      	negs	r2, r3
 8007e5e:	415a      	adcs	r2, r3
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e66:	2000      	movs	r0, #0
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	b010      	add	sp, #64	; 0x40
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e70 <__smakebuf_r>:
 8007e70:	898b      	ldrh	r3, [r1, #12]
 8007e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e74:	079e      	lsls	r6, r3, #30
 8007e76:	4605      	mov	r5, r0
 8007e78:	460c      	mov	r4, r1
 8007e7a:	d410      	bmi.n	8007e9e <__smakebuf_r+0x2e>
 8007e7c:	ab01      	add	r3, sp, #4
 8007e7e:	466a      	mov	r2, sp
 8007e80:	f7ff ffd2 	bl	8007e28 <__swhatbuf_r>
 8007e84:	9900      	ldr	r1, [sp, #0]
 8007e86:	4606      	mov	r6, r0
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f7ff f9db 	bl	8007244 <_malloc_r>
 8007e8e:	b968      	cbnz	r0, 8007eac <__smakebuf_r+0x3c>
 8007e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e94:	059a      	lsls	r2, r3, #22
 8007e96:	d422      	bmi.n	8007ede <__smakebuf_r+0x6e>
 8007e98:	f043 0302 	orr.w	r3, r3, #2
 8007e9c:	81a3      	strh	r3, [r4, #12]
 8007e9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ea2:	6023      	str	r3, [r4, #0]
 8007ea4:	6123      	str	r3, [r4, #16]
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	6163      	str	r3, [r4, #20]
 8007eaa:	e018      	b.n	8007ede <__smakebuf_r+0x6e>
 8007eac:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <__smakebuf_r+0x74>)
 8007eae:	62ab      	str	r3, [r5, #40]	; 0x28
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	6020      	str	r0, [r4, #0]
 8007eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	9b00      	ldr	r3, [sp, #0]
 8007ebc:	6163      	str	r3, [r4, #20]
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	6120      	str	r0, [r4, #16]
 8007ec2:	b14b      	cbz	r3, 8007ed8 <__smakebuf_r+0x68>
 8007ec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 fa5b 	bl	8008384 <_isatty_r>
 8007ece:	b118      	cbz	r0, 8007ed8 <__smakebuf_r+0x68>
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	89a0      	ldrh	r0, [r4, #12]
 8007eda:	4330      	orrs	r0, r6
 8007edc:	81a0      	strh	r0, [r4, #12]
 8007ede:	b002      	add	sp, #8
 8007ee0:	bd70      	pop	{r4, r5, r6, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08007c95 	.word	0x08007c95

08007ee8 <memmove>:
 8007ee8:	4288      	cmp	r0, r1
 8007eea:	b510      	push	{r4, lr}
 8007eec:	eb01 0302 	add.w	r3, r1, r2
 8007ef0:	d801      	bhi.n	8007ef6 <memmove+0xe>
 8007ef2:	1e42      	subs	r2, r0, #1
 8007ef4:	e00b      	b.n	8007f0e <memmove+0x26>
 8007ef6:	4298      	cmp	r0, r3
 8007ef8:	d2fb      	bcs.n	8007ef2 <memmove+0xa>
 8007efa:	1881      	adds	r1, r0, r2
 8007efc:	1ad2      	subs	r2, r2, r3
 8007efe:	42d3      	cmn	r3, r2
 8007f00:	d004      	beq.n	8007f0c <memmove+0x24>
 8007f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f06:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f0a:	e7f8      	b.n	8007efe <memmove+0x16>
 8007f0c:	bd10      	pop	{r4, pc}
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	d004      	beq.n	8007f1c <memmove+0x34>
 8007f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f1a:	e7f8      	b.n	8007f0e <memmove+0x26>
 8007f1c:	bd10      	pop	{r4, pc}

08007f1e <__malloc_lock>:
 8007f1e:	4770      	bx	lr

08007f20 <__malloc_unlock>:
 8007f20:	4770      	bx	lr

08007f22 <_realloc_r>:
 8007f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f24:	4607      	mov	r7, r0
 8007f26:	4615      	mov	r5, r2
 8007f28:	460e      	mov	r6, r1
 8007f2a:	b921      	cbnz	r1, 8007f36 <_realloc_r+0x14>
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f32:	f7ff b987 	b.w	8007244 <_malloc_r>
 8007f36:	b91a      	cbnz	r2, 8007f40 <_realloc_r+0x1e>
 8007f38:	f7ff f936 	bl	80071a8 <_free_r>
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f40:	f000 fa42 	bl	80083c8 <_malloc_usable_size_r>
 8007f44:	4285      	cmp	r5, r0
 8007f46:	d90e      	bls.n	8007f66 <_realloc_r+0x44>
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	f7ff f97a 	bl	8007244 <_malloc_r>
 8007f50:	4604      	mov	r4, r0
 8007f52:	b150      	cbz	r0, 8007f6a <_realloc_r+0x48>
 8007f54:	4631      	mov	r1, r6
 8007f56:	462a      	mov	r2, r5
 8007f58:	f7ff f912 	bl	8007180 <memcpy>
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4638      	mov	r0, r7
 8007f60:	f7ff f922 	bl	80071a8 <_free_r>
 8007f64:	e001      	b.n	8007f6a <_realloc_r+0x48>
 8007f66:	4630      	mov	r0, r6
 8007f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f6e <__ssputs_r>:
 8007f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f72:	688e      	ldr	r6, [r1, #8]
 8007f74:	429e      	cmp	r6, r3
 8007f76:	4682      	mov	sl, r0
 8007f78:	460c      	mov	r4, r1
 8007f7a:	4691      	mov	r9, r2
 8007f7c:	4698      	mov	r8, r3
 8007f7e:	d83e      	bhi.n	8007ffe <__ssputs_r+0x90>
 8007f80:	898a      	ldrh	r2, [r1, #12]
 8007f82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f86:	d03a      	beq.n	8007ffe <__ssputs_r+0x90>
 8007f88:	6825      	ldr	r5, [r4, #0]
 8007f8a:	6909      	ldr	r1, [r1, #16]
 8007f8c:	1a6f      	subs	r7, r5, r1
 8007f8e:	6965      	ldr	r5, [r4, #20]
 8007f90:	2302      	movs	r3, #2
 8007f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f96:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f9a:	1c7b      	adds	r3, r7, #1
 8007f9c:	4443      	add	r3, r8
 8007f9e:	429d      	cmp	r5, r3
 8007fa0:	bf38      	it	cc
 8007fa2:	461d      	movcc	r5, r3
 8007fa4:	0553      	lsls	r3, r2, #21
 8007fa6:	d50f      	bpl.n	8007fc8 <__ssputs_r+0x5a>
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7ff f94b 	bl	8007244 <_malloc_r>
 8007fae:	4606      	mov	r6, r0
 8007fb0:	b198      	cbz	r0, 8007fda <__ssputs_r+0x6c>
 8007fb2:	463a      	mov	r2, r7
 8007fb4:	6921      	ldr	r1, [r4, #16]
 8007fb6:	f7ff f8e3 	bl	8007180 <memcpy>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	e013      	b.n	8007ff0 <__ssputs_r+0x82>
 8007fc8:	462a      	mov	r2, r5
 8007fca:	f7ff ffaa 	bl	8007f22 <_realloc_r>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	b970      	cbnz	r0, 8007ff0 <__ssputs_r+0x82>
 8007fd2:	6921      	ldr	r1, [r4, #16]
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	f7ff f8e7 	bl	80071a8 <_free_r>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	f8ca 3000 	str.w	r3, [sl]
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff0:	6126      	str	r6, [r4, #16]
 8007ff2:	6165      	str	r5, [r4, #20]
 8007ff4:	443e      	add	r6, r7
 8007ff6:	1bed      	subs	r5, r5, r7
 8007ff8:	6026      	str	r6, [r4, #0]
 8007ffa:	60a5      	str	r5, [r4, #8]
 8007ffc:	4646      	mov	r6, r8
 8007ffe:	4546      	cmp	r6, r8
 8008000:	bf28      	it	cs
 8008002:	4646      	movcs	r6, r8
 8008004:	4632      	mov	r2, r6
 8008006:	4649      	mov	r1, r9
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	f7ff ff6d 	bl	8007ee8 <memmove>
 800800e:	68a3      	ldr	r3, [r4, #8]
 8008010:	1b9b      	subs	r3, r3, r6
 8008012:	60a3      	str	r3, [r4, #8]
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	441e      	add	r6, r3
 8008018:	6026      	str	r6, [r4, #0]
 800801a:	2000      	movs	r0, #0
 800801c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008020 <_svfiprintf_r>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	b09d      	sub	sp, #116	; 0x74
 8008026:	4680      	mov	r8, r0
 8008028:	9303      	str	r3, [sp, #12]
 800802a:	898b      	ldrh	r3, [r1, #12]
 800802c:	061c      	lsls	r4, r3, #24
 800802e:	460d      	mov	r5, r1
 8008030:	4616      	mov	r6, r2
 8008032:	d50d      	bpl.n	8008050 <_svfiprintf_r+0x30>
 8008034:	690b      	ldr	r3, [r1, #16]
 8008036:	b95b      	cbnz	r3, 8008050 <_svfiprintf_r+0x30>
 8008038:	2140      	movs	r1, #64	; 0x40
 800803a:	f7ff f903 	bl	8007244 <_malloc_r>
 800803e:	6028      	str	r0, [r5, #0]
 8008040:	6128      	str	r0, [r5, #16]
 8008042:	b918      	cbnz	r0, 800804c <_svfiprintf_r+0x2c>
 8008044:	230c      	movs	r3, #12
 8008046:	f8c8 3000 	str.w	r3, [r8]
 800804a:	e0cd      	b.n	80081e8 <_svfiprintf_r+0x1c8>
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	616b      	str	r3, [r5, #20]
 8008050:	2300      	movs	r3, #0
 8008052:	9309      	str	r3, [sp, #36]	; 0x24
 8008054:	2320      	movs	r3, #32
 8008056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800805a:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80081f8 <_svfiprintf_r+0x1d8>
 800805e:	2330      	movs	r3, #48	; 0x30
 8008060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008064:	4637      	mov	r7, r6
 8008066:	463c      	mov	r4, r7
 8008068:	f814 3b01 	ldrb.w	r3, [r4], #1
 800806c:	b91b      	cbnz	r3, 8008076 <_svfiprintf_r+0x56>
 800806e:	ebb7 0906 	subs.w	r9, r7, r6
 8008072:	d010      	beq.n	8008096 <_svfiprintf_r+0x76>
 8008074:	e003      	b.n	800807e <_svfiprintf_r+0x5e>
 8008076:	2b25      	cmp	r3, #37	; 0x25
 8008078:	d0f9      	beq.n	800806e <_svfiprintf_r+0x4e>
 800807a:	4627      	mov	r7, r4
 800807c:	e7f3      	b.n	8008066 <_svfiprintf_r+0x46>
 800807e:	464b      	mov	r3, r9
 8008080:	4632      	mov	r2, r6
 8008082:	4629      	mov	r1, r5
 8008084:	4640      	mov	r0, r8
 8008086:	f7ff ff72 	bl	8007f6e <__ssputs_r>
 800808a:	3001      	adds	r0, #1
 800808c:	f000 80a7 	beq.w	80081de <_svfiprintf_r+0x1be>
 8008090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008092:	444b      	add	r3, r9
 8008094:	9309      	str	r3, [sp, #36]	; 0x24
 8008096:	783b      	ldrb	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80a0 	beq.w	80081de <_svfiprintf_r+0x1be>
 800809e:	2300      	movs	r3, #0
 80080a0:	f04f 32ff 	mov.w	r2, #4294967295
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9307      	str	r3, [sp, #28]
 80080a8:	9205      	str	r2, [sp, #20]
 80080aa:	9306      	str	r3, [sp, #24]
 80080ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080b0:	931a      	str	r3, [sp, #104]	; 0x68
 80080b2:	2601      	movs	r6, #1
 80080b4:	2205      	movs	r2, #5
 80080b6:	7821      	ldrb	r1, [r4, #0]
 80080b8:	484e      	ldr	r0, [pc, #312]	; (80081f4 <_svfiprintf_r+0x1d4>)
 80080ba:	f7f8 f8a9 	bl	8000210 <memchr>
 80080be:	1c67      	adds	r7, r4, #1
 80080c0:	9b04      	ldr	r3, [sp, #16]
 80080c2:	b138      	cbz	r0, 80080d4 <_svfiprintf_r+0xb4>
 80080c4:	4a4b      	ldr	r2, [pc, #300]	; (80081f4 <_svfiprintf_r+0x1d4>)
 80080c6:	1a80      	subs	r0, r0, r2
 80080c8:	fa06 f000 	lsl.w	r0, r6, r0
 80080cc:	4318      	orrs	r0, r3
 80080ce:	9004      	str	r0, [sp, #16]
 80080d0:	463c      	mov	r4, r7
 80080d2:	e7ef      	b.n	80080b4 <_svfiprintf_r+0x94>
 80080d4:	06d9      	lsls	r1, r3, #27
 80080d6:	bf44      	itt	mi
 80080d8:	2220      	movmi	r2, #32
 80080da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080de:	071a      	lsls	r2, r3, #28
 80080e0:	bf44      	itt	mi
 80080e2:	222b      	movmi	r2, #43	; 0x2b
 80080e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080e8:	7822      	ldrb	r2, [r4, #0]
 80080ea:	2a2a      	cmp	r2, #42	; 0x2a
 80080ec:	d003      	beq.n	80080f6 <_svfiprintf_r+0xd6>
 80080ee:	9a07      	ldr	r2, [sp, #28]
 80080f0:	2100      	movs	r1, #0
 80080f2:	200a      	movs	r0, #10
 80080f4:	e00b      	b.n	800810e <_svfiprintf_r+0xee>
 80080f6:	9a03      	ldr	r2, [sp, #12]
 80080f8:	1d11      	adds	r1, r2, #4
 80080fa:	6812      	ldr	r2, [r2, #0]
 80080fc:	9103      	str	r1, [sp, #12]
 80080fe:	2a00      	cmp	r2, #0
 8008100:	da10      	bge.n	8008124 <_svfiprintf_r+0x104>
 8008102:	4252      	negs	r2, r2
 8008104:	f043 0002 	orr.w	r0, r3, #2
 8008108:	9207      	str	r2, [sp, #28]
 800810a:	9004      	str	r0, [sp, #16]
 800810c:	e00b      	b.n	8008126 <_svfiprintf_r+0x106>
 800810e:	4627      	mov	r7, r4
 8008110:	3401      	adds	r4, #1
 8008112:	783b      	ldrb	r3, [r7, #0]
 8008114:	3b30      	subs	r3, #48	; 0x30
 8008116:	2b09      	cmp	r3, #9
 8008118:	d803      	bhi.n	8008122 <_svfiprintf_r+0x102>
 800811a:	fb00 3202 	mla	r2, r0, r2, r3
 800811e:	2101      	movs	r1, #1
 8008120:	e7f5      	b.n	800810e <_svfiprintf_r+0xee>
 8008122:	b101      	cbz	r1, 8008126 <_svfiprintf_r+0x106>
 8008124:	9207      	str	r2, [sp, #28]
 8008126:	783b      	ldrb	r3, [r7, #0]
 8008128:	2b2e      	cmp	r3, #46	; 0x2e
 800812a:	d11e      	bne.n	800816a <_svfiprintf_r+0x14a>
 800812c:	787b      	ldrb	r3, [r7, #1]
 800812e:	2b2a      	cmp	r3, #42	; 0x2a
 8008130:	d10a      	bne.n	8008148 <_svfiprintf_r+0x128>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	1d1a      	adds	r2, r3, #4
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	9203      	str	r2, [sp, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	bfb8      	it	lt
 800813e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008142:	3702      	adds	r7, #2
 8008144:	9305      	str	r3, [sp, #20]
 8008146:	e010      	b.n	800816a <_svfiprintf_r+0x14a>
 8008148:	2300      	movs	r3, #0
 800814a:	9305      	str	r3, [sp, #20]
 800814c:	1c78      	adds	r0, r7, #1
 800814e:	4619      	mov	r1, r3
 8008150:	240a      	movs	r4, #10
 8008152:	4607      	mov	r7, r0
 8008154:	3001      	adds	r0, #1
 8008156:	783a      	ldrb	r2, [r7, #0]
 8008158:	3a30      	subs	r2, #48	; 0x30
 800815a:	2a09      	cmp	r2, #9
 800815c:	d803      	bhi.n	8008166 <_svfiprintf_r+0x146>
 800815e:	fb04 2101 	mla	r1, r4, r1, r2
 8008162:	2301      	movs	r3, #1
 8008164:	e7f5      	b.n	8008152 <_svfiprintf_r+0x132>
 8008166:	b103      	cbz	r3, 800816a <_svfiprintf_r+0x14a>
 8008168:	9105      	str	r1, [sp, #20]
 800816a:	2203      	movs	r2, #3
 800816c:	7839      	ldrb	r1, [r7, #0]
 800816e:	4822      	ldr	r0, [pc, #136]	; (80081f8 <_svfiprintf_r+0x1d8>)
 8008170:	f7f8 f84e 	bl	8000210 <memchr>
 8008174:	b140      	cbz	r0, 8008188 <_svfiprintf_r+0x168>
 8008176:	2340      	movs	r3, #64	; 0x40
 8008178:	ebcb 0000 	rsb	r0, fp, r0
 800817c:	fa03 f000 	lsl.w	r0, r3, r0
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	4318      	orrs	r0, r3
 8008184:	9004      	str	r0, [sp, #16]
 8008186:	3701      	adds	r7, #1
 8008188:	7839      	ldrb	r1, [r7, #0]
 800818a:	481c      	ldr	r0, [pc, #112]	; (80081fc <_svfiprintf_r+0x1dc>)
 800818c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008190:	2206      	movs	r2, #6
 8008192:	1c7e      	adds	r6, r7, #1
 8008194:	f7f8 f83c 	bl	8000210 <memchr>
 8008198:	b188      	cbz	r0, 80081be <_svfiprintf_r+0x19e>
 800819a:	4b19      	ldr	r3, [pc, #100]	; (8008200 <_svfiprintf_r+0x1e0>)
 800819c:	b933      	cbnz	r3, 80081ac <_svfiprintf_r+0x18c>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	3307      	adds	r3, #7
 80081a2:	f023 0307 	bic.w	r3, r3, #7
 80081a6:	3308      	adds	r3, #8
 80081a8:	9303      	str	r3, [sp, #12]
 80081aa:	e014      	b.n	80081d6 <_svfiprintf_r+0x1b6>
 80081ac:	ab03      	add	r3, sp, #12
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	462a      	mov	r2, r5
 80081b2:	4b14      	ldr	r3, [pc, #80]	; (8008204 <_svfiprintf_r+0x1e4>)
 80081b4:	a904      	add	r1, sp, #16
 80081b6:	4640      	mov	r0, r8
 80081b8:	f3af 8000 	nop.w
 80081bc:	e007      	b.n	80081ce <_svfiprintf_r+0x1ae>
 80081be:	ab03      	add	r3, sp, #12
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	462a      	mov	r2, r5
 80081c4:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <_svfiprintf_r+0x1e4>)
 80081c6:	a904      	add	r1, sp, #16
 80081c8:	4640      	mov	r0, r8
 80081ca:	f7ff fa55 	bl	8007678 <_printf_i>
 80081ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081d2:	4682      	mov	sl, r0
 80081d4:	d003      	beq.n	80081de <_svfiprintf_r+0x1be>
 80081d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d8:	4453      	add	r3, sl
 80081da:	9309      	str	r3, [sp, #36]	; 0x24
 80081dc:	e742      	b.n	8008064 <_svfiprintf_r+0x44>
 80081de:	89ab      	ldrh	r3, [r5, #12]
 80081e0:	065b      	lsls	r3, r3, #25
 80081e2:	d401      	bmi.n	80081e8 <_svfiprintf_r+0x1c8>
 80081e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081e6:	e001      	b.n	80081ec <_svfiprintf_r+0x1cc>
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	b01d      	add	sp, #116	; 0x74
 80081ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f2:	bf00      	nop
 80081f4:	08008da8 	.word	0x08008da8
 80081f8:	08008dae 	.word	0x08008dae
 80081fc:	08008db2 	.word	0x08008db2
 8008200:	00000000 	.word	0x00000000
 8008204:	08007f6f 	.word	0x08007f6f

08008208 <_raise_r>:
 8008208:	291f      	cmp	r1, #31
 800820a:	b538      	push	{r3, r4, r5, lr}
 800820c:	4604      	mov	r4, r0
 800820e:	460d      	mov	r5, r1
 8008210:	d904      	bls.n	800821c <_raise_r+0x14>
 8008212:	2316      	movs	r3, #22
 8008214:	6003      	str	r3, [r0, #0]
 8008216:	f04f 30ff 	mov.w	r0, #4294967295
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800821e:	b112      	cbz	r2, 8008226 <_raise_r+0x1e>
 8008220:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008224:	b94b      	cbnz	r3, 800823a <_raise_r+0x32>
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f832 	bl	8008290 <_getpid_r>
 800822c:	462a      	mov	r2, r5
 800822e:	4601      	mov	r1, r0
 8008230:	4620      	mov	r0, r4
 8008232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008236:	f000 b819 	b.w	800826c <_kill_r>
 800823a:	2b01      	cmp	r3, #1
 800823c:	d00c      	beq.n	8008258 <_raise_r+0x50>
 800823e:	1c59      	adds	r1, r3, #1
 8008240:	d103      	bne.n	800824a <_raise_r+0x42>
 8008242:	2316      	movs	r3, #22
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	2001      	movs	r0, #1
 8008248:	bd38      	pop	{r3, r4, r5, pc}
 800824a:	2400      	movs	r4, #0
 800824c:	4628      	mov	r0, r5
 800824e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008252:	4798      	blx	r3
 8008254:	4620      	mov	r0, r4
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	2000      	movs	r0, #0
 800825a:	bd38      	pop	{r3, r4, r5, pc}

0800825c <raise>:
 800825c:	4b02      	ldr	r3, [pc, #8]	; (8008268 <raise+0xc>)
 800825e:	4601      	mov	r1, r0
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	f7ff bfd1 	b.w	8008208 <_raise_r>
 8008266:	bf00      	nop
 8008268:	200001e4 	.word	0x200001e4

0800826c <_kill_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4c07      	ldr	r4, [pc, #28]	; (800828c <_kill_r+0x20>)
 8008270:	2300      	movs	r3, #0
 8008272:	4605      	mov	r5, r0
 8008274:	4608      	mov	r0, r1
 8008276:	4611      	mov	r1, r2
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	f000 f8e1 	bl	8008440 <_kill>
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	d102      	bne.n	8008288 <_kill_r+0x1c>
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	b103      	cbz	r3, 8008288 <_kill_r+0x1c>
 8008286:	602b      	str	r3, [r5, #0]
 8008288:	bd38      	pop	{r3, r4, r5, pc}
 800828a:	bf00      	nop
 800828c:	20006064 	.word	0x20006064

08008290 <_getpid_r>:
 8008290:	f000 b8c6 	b.w	8008420 <_getpid>

08008294 <__sread>:
 8008294:	b510      	push	{r4, lr}
 8008296:	460c      	mov	r4, r1
 8008298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829c:	f000 f89e 	bl	80083dc <_read_r>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	bfab      	itete	ge
 80082a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082a6:	89a3      	ldrhlt	r3, [r4, #12]
 80082a8:	181b      	addge	r3, r3, r0
 80082aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082ae:	bfac      	ite	ge
 80082b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80082b2:	81a3      	strhlt	r3, [r4, #12]
 80082b4:	bd10      	pop	{r4, pc}

080082b6 <__swrite>:
 80082b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ba:	461f      	mov	r7, r3
 80082bc:	898b      	ldrh	r3, [r1, #12]
 80082be:	05db      	lsls	r3, r3, #23
 80082c0:	4605      	mov	r5, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	4616      	mov	r6, r2
 80082c6:	d505      	bpl.n	80082d4 <__swrite+0x1e>
 80082c8:	2302      	movs	r3, #2
 80082ca:	2200      	movs	r2, #0
 80082cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d0:	f000 f868 	bl	80083a4 <_lseek_r>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	4632      	mov	r2, r6
 80082e2:	463b      	mov	r3, r7
 80082e4:	4628      	mov	r0, r5
 80082e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ea:	f000 b817 	b.w	800831c <_write_r>

080082ee <__sseek>:
 80082ee:	b510      	push	{r4, lr}
 80082f0:	460c      	mov	r4, r1
 80082f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f6:	f000 f855 	bl	80083a4 <_lseek_r>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	bf15      	itete	ne
 8008300:	6560      	strne	r0, [r4, #84]	; 0x54
 8008302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800830a:	81a3      	strheq	r3, [r4, #12]
 800830c:	bf18      	it	ne
 800830e:	81a3      	strhne	r3, [r4, #12]
 8008310:	bd10      	pop	{r4, pc}

08008312 <__sclose>:
 8008312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008316:	f000 b813 	b.w	8008340 <_close_r>
	...

0800831c <_write_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4c07      	ldr	r4, [pc, #28]	; (800833c <_write_r+0x20>)
 8008320:	4605      	mov	r5, r0
 8008322:	4608      	mov	r0, r1
 8008324:	4611      	mov	r1, r2
 8008326:	2200      	movs	r2, #0
 8008328:	6022      	str	r2, [r4, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	f000 f8ae 	bl	800848c <_write>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_write_r+0x1e>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	b103      	cbz	r3, 800833a <_write_r+0x1e>
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20006064 	.word	0x20006064

08008340 <_close_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4c06      	ldr	r4, [pc, #24]	; (800835c <_close_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4605      	mov	r5, r0
 8008348:	4608      	mov	r0, r1
 800834a:	6023      	str	r3, [r4, #0]
 800834c:	f000 f858 	bl	8008400 <_close>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_close_r+0x1a>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	b103      	cbz	r3, 800835a <_close_r+0x1a>
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20006064 	.word	0x20006064

08008360 <_fstat_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4c07      	ldr	r4, [pc, #28]	; (8008380 <_fstat_r+0x20>)
 8008364:	2300      	movs	r3, #0
 8008366:	4605      	mov	r5, r0
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	f000 f84f 	bl	8008410 <_fstat>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	d102      	bne.n	800837c <_fstat_r+0x1c>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	b103      	cbz	r3, 800837c <_fstat_r+0x1c>
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	bd38      	pop	{r3, r4, r5, pc}
 800837e:	bf00      	nop
 8008380:	20006064 	.word	0x20006064

08008384 <_isatty_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4c06      	ldr	r4, [pc, #24]	; (80083a0 <_isatty_r+0x1c>)
 8008388:	2300      	movs	r3, #0
 800838a:	4605      	mov	r5, r0
 800838c:	4608      	mov	r0, r1
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	f000 f84e 	bl	8008430 <_isatty>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_isatty_r+0x1a>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	b103      	cbz	r3, 800839e <_isatty_r+0x1a>
 800839c:	602b      	str	r3, [r5, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	20006064 	.word	0x20006064

080083a4 <_lseek_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4c07      	ldr	r4, [pc, #28]	; (80083c4 <_lseek_r+0x20>)
 80083a8:	4605      	mov	r5, r0
 80083aa:	4608      	mov	r0, r1
 80083ac:	4611      	mov	r1, r2
 80083ae:	2200      	movs	r2, #0
 80083b0:	6022      	str	r2, [r4, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f000 f84c 	bl	8008450 <_lseek>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_lseek_r+0x1e>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_lseek_r+0x1e>
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	20006064 	.word	0x20006064

080083c8 <_malloc_usable_size_r>:
 80083c8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80083cc:	2800      	cmp	r0, #0
 80083ce:	bfbe      	ittt	lt
 80083d0:	1809      	addlt	r1, r1, r0
 80083d2:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80083d6:	18c0      	addlt	r0, r0, r3
 80083d8:	3804      	subs	r0, #4
 80083da:	4770      	bx	lr

080083dc <_read_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4c07      	ldr	r4, [pc, #28]	; (80083fc <_read_r+0x20>)
 80083e0:	4605      	mov	r5, r0
 80083e2:	4608      	mov	r0, r1
 80083e4:	4611      	mov	r1, r2
 80083e6:	2200      	movs	r2, #0
 80083e8:	6022      	str	r2, [r4, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f000 f838 	bl	8008460 <_read>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_read_r+0x1e>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_read_r+0x1e>
 80083f8:	602b      	str	r3, [r5, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	20006064 	.word	0x20006064

08008400 <_close>:
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <_close+0xc>)
 8008402:	2258      	movs	r2, #88	; 0x58
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	f04f 30ff 	mov.w	r0, #4294967295
 800840a:	4770      	bx	lr
 800840c:	20006064 	.word	0x20006064

08008410 <_fstat>:
 8008410:	4b02      	ldr	r3, [pc, #8]	; (800841c <_fstat+0xc>)
 8008412:	2258      	movs	r2, #88	; 0x58
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	4770      	bx	lr
 800841c:	20006064 	.word	0x20006064

08008420 <_getpid>:
 8008420:	4b02      	ldr	r3, [pc, #8]	; (800842c <_getpid+0xc>)
 8008422:	2258      	movs	r2, #88	; 0x58
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	f04f 30ff 	mov.w	r0, #4294967295
 800842a:	4770      	bx	lr
 800842c:	20006064 	.word	0x20006064

08008430 <_isatty>:
 8008430:	4b02      	ldr	r3, [pc, #8]	; (800843c <_isatty+0xc>)
 8008432:	2258      	movs	r2, #88	; 0x58
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	2000      	movs	r0, #0
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	20006064 	.word	0x20006064

08008440 <_kill>:
 8008440:	4b02      	ldr	r3, [pc, #8]	; (800844c <_kill+0xc>)
 8008442:	2258      	movs	r2, #88	; 0x58
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	f04f 30ff 	mov.w	r0, #4294967295
 800844a:	4770      	bx	lr
 800844c:	20006064 	.word	0x20006064

08008450 <_lseek>:
 8008450:	4b02      	ldr	r3, [pc, #8]	; (800845c <_lseek+0xc>)
 8008452:	2258      	movs	r2, #88	; 0x58
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	f04f 30ff 	mov.w	r0, #4294967295
 800845a:	4770      	bx	lr
 800845c:	20006064 	.word	0x20006064

08008460 <_read>:
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <_read+0xc>)
 8008462:	2258      	movs	r2, #88	; 0x58
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	f04f 30ff 	mov.w	r0, #4294967295
 800846a:	4770      	bx	lr
 800846c:	20006064 	.word	0x20006064

08008470 <_sbrk>:
 8008470:	4a04      	ldr	r2, [pc, #16]	; (8008484 <_sbrk+0x14>)
 8008472:	4905      	ldr	r1, [pc, #20]	; (8008488 <_sbrk+0x18>)
 8008474:	6813      	ldr	r3, [r2, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	bf08      	it	eq
 800847a:	460b      	moveq	r3, r1
 800847c:	4418      	add	r0, r3
 800847e:	6010      	str	r0, [r2, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	4770      	bx	lr
 8008484:	20004bfc 	.word	0x20004bfc
 8008488:	20006068 	.word	0x20006068

0800848c <_write>:
 800848c:	4b02      	ldr	r3, [pc, #8]	; (8008498 <_write+0xc>)
 800848e:	2258      	movs	r2, #88	; 0x58
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	f04f 30ff 	mov.w	r0, #4294967295
 8008496:	4770      	bx	lr
 8008498:	20006064 	.word	0x20006064

0800849c <_exit>:
 800849c:	e7fe      	b.n	800849c <_exit>
 800849e:	bf00      	nop

080084a0 <_init>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

080084ac <_fini>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr
