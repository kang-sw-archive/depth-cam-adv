
build/depscan-firmware-rtos.elf:     file format elf32-littlearm
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08005d01


Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d58 	.word	0x08006d58

080001c4 <frame_dummy>:
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <frame_dummy+0x24>)
 80001c6:	b510      	push	{r4, lr}
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <frame_dummy+0x28>)
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <frame_dummy+0x2c>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	4808      	ldr	r0, [pc, #32]	; (80001f4 <frame_dummy+0x30>)
 80001d4:	6803      	ldr	r3, [r0, #0]
 80001d6:	b903      	cbnz	r3, 80001da <frame_dummy+0x16>
 80001d8:	bd10      	pop	{r4, pc}
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <frame_dummy+0x34>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d0fb      	beq.n	80001d8 <frame_dummy+0x14>
 80001e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001e4:	4718      	bx	r3
 80001e6:	bf00      	nop
 80001e8:	00000000 	.word	0x00000000
 80001ec:	200001e8 	.word	0x200001e8
 80001f0:	08006d58 	.word	0x08006d58
 80001f4:	200001e4 	.word	0x200001e4
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97e 	b.w	80005b4 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460e      	mov	r6, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9d08      	ldr	r5, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d150      	bne.n	8000382 <__udivmoddi4+0xb2>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96c      	bls.n	80003c0 <__udivmoddi4+0xf0>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0420 	rsb	r4, lr, #32
 80002f4:	fa20 f404 	lsr.w	r4, r0, r4
 80002f8:	fa01 f60e 	lsl.w	r6, r1, lr
 80002fc:	ea44 0c06 	orr.w	ip, r4, r6
 8000300:	fa02 f70e 	lsl.w	r7, r2, lr
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	fbbc f0f9 	udiv	r0, ip, r9
 8000312:	fa1f f887 	uxth.w	r8, r7
 8000316:	fb09 c610 	mls	r6, r9, r0, ip
 800031a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800031e:	fb00 f308 	mul.w	r3, r0, r8
 8000322:	42b3      	cmp	r3, r6
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x6a>
 8000326:	19f6      	adds	r6, r6, r7
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	f080 8122 	bcs.w	8000574 <__udivmoddi4+0x2a4>
 8000330:	42b3      	cmp	r3, r6
 8000332:	f240 811f 	bls.w	8000574 <__udivmoddi4+0x2a4>
 8000336:	3802      	subs	r0, #2
 8000338:	443e      	add	r6, r7
 800033a:	1af6      	subs	r6, r6, r3
 800033c:	b2a2      	uxth	r2, r4
 800033e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000342:	fb09 6613 	mls	r6, r9, r3, r6
 8000346:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800034a:	fb03 f808 	mul.w	r8, r3, r8
 800034e:	45a0      	cmp	r8, r4
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x96>
 8000352:	19e4      	adds	r4, r4, r7
 8000354:	f103 32ff 	add.w	r2, r3, #4294967295
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x2a0>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x2a0>
 8000362:	3b02      	subs	r3, #2
 8000364:	443c      	add	r4, r7
 8000366:	ebc8 0404 	rsb	r4, r8, r4
 800036a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	2d00      	cmp	r5, #0
 8000372:	d062      	beq.n	800043a <__udivmoddi4+0x16a>
 8000374:	fa24 f40e 	lsr.w	r4, r4, lr
 8000378:	2300      	movs	r3, #0
 800037a:	602c      	str	r4, [r5, #0]
 800037c:	606b      	str	r3, [r5, #4]
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0xc6>
 8000386:	2d00      	cmp	r5, #0
 8000388:	d055      	beq.n	8000436 <__udivmoddi4+0x166>
 800038a:	2100      	movs	r1, #0
 800038c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000390:	4608      	mov	r0, r1
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x1f0>
 80003a0:	42b3      	cmp	r3, r6
 80003a2:	d302      	bcc.n	80003aa <__udivmoddi4+0xda>
 80003a4:	4282      	cmp	r2, r0
 80003a6:	f200 80f8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 80003aa:	1a84      	subs	r4, r0, r2
 80003ac:	eb66 0603 	sbc.w	r6, r6, r3
 80003b0:	2001      	movs	r0, #1
 80003b2:	46b4      	mov	ip, r6
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d040      	beq.n	800043a <__udivmoddi4+0x16a>
 80003b8:	e885 1010 	stmia.w	r5, {r4, ip}
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	b912      	cbnz	r2, 80003c8 <__udivmoddi4+0xf8>
 80003c2:	2701      	movs	r7, #1
 80003c4:	fbb7 f7f2 	udiv	r7, r7, r2
 80003c8:	fab7 fe87 	clz	lr, r7
 80003cc:	f1be 0f00 	cmp.w	lr, #0
 80003d0:	d135      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d2:	1bf3      	subs	r3, r6, r7
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e2:	0c22      	lsrs	r2, r4, #16
 80003e4:	fb08 3610 	mls	r6, r8, r0, r3
 80003e8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80003ec:	fb0c f300 	mul.w	r3, ip, r0
 80003f0:	42b3      	cmp	r3, r6
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19f6      	adds	r6, r6, r7
 80003f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42b3      	cmp	r3, r6
 80003fe:	f200 80ce 	bhi.w	800059e <__udivmoddi4+0x2ce>
 8000402:	4610      	mov	r0, r2
 8000404:	1af6      	subs	r6, r6, r3
 8000406:	b2a2      	uxth	r2, r4
 8000408:	fbb6 f3f8 	udiv	r3, r6, r8
 800040c:	fb08 6613 	mls	r6, r8, r3, r6
 8000410:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000414:	fb0c fc03 	mul.w	ip, ip, r3
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b5 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 800042a:	4613      	mov	r3, r2
 800042c:	ebcc 0404 	rsb	r4, ip, r4
 8000430:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000434:	e79c      	b.n	8000370 <__udivmoddi4+0xa0>
 8000436:	4629      	mov	r1, r5
 8000438:	4628      	mov	r0, r5
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0120 	rsb	r1, lr, #32
 8000442:	fa06 f30e 	lsl.w	r3, r6, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f901 	lsr.w	r9, r0, r1
 800044e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000452:	40ce      	lsrs	r6, r1
 8000454:	ea49 0903 	orr.w	r9, r9, r3
 8000458:	fbb6 faf8 	udiv	sl, r6, r8
 800045c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000460:	fb08 661a 	mls	r6, r8, sl, r6
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800046c:	fb0a f20c 	mul.w	r2, sl, ip
 8000470:	429a      	cmp	r2, r3
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1be>
 8000478:	19db      	adds	r3, r3, r7
 800047a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800047e:	f080 8087 	bcs.w	8000590 <__udivmoddi4+0x2c0>
 8000482:	429a      	cmp	r2, r3
 8000484:	f240 8084 	bls.w	8000590 <__udivmoddi4+0x2c0>
 8000488:	f1aa 0a02 	sub.w	sl, sl, #2
 800048c:	443b      	add	r3, r7
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	fa1f f989 	uxth.w	r9, r9
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80004a0:	fb01 f60c 	mul.w	r6, r1, ip
 80004a4:	429e      	cmp	r6, r3
 80004a6:	d907      	bls.n	80004b8 <__udivmoddi4+0x1e8>
 80004a8:	19db      	adds	r3, r3, r7
 80004aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80004ae:	d26b      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 80004b0:	429e      	cmp	r6, r3
 80004b2:	d969      	bls.n	8000588 <__udivmoddi4+0x2b8>
 80004b4:	3902      	subs	r1, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1b9b      	subs	r3, r3, r6
 80004ba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80004be:	e78e      	b.n	80003de <__udivmoddi4+0x10e>
 80004c0:	f1c1 0e20 	rsb	lr, r1, #32
 80004c4:	fa22 f40e 	lsr.w	r4, r2, lr
 80004c8:	408b      	lsls	r3, r1
 80004ca:	4323      	orrs	r3, r4
 80004cc:	fa20 f70e 	lsr.w	r7, r0, lr
 80004d0:	fa06 f401 	lsl.w	r4, r6, r1
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	fa26 f60e 	lsr.w	r6, r6, lr
 80004dc:	433c      	orrs	r4, r7
 80004de:	fbb6 f9fc 	udiv	r9, r6, ip
 80004e2:	0c27      	lsrs	r7, r4, #16
 80004e4:	fb0c 6619 	mls	r6, ip, r9, r6
 80004e8:	fa1f f883 	uxth.w	r8, r3
 80004ec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80004f0:	fb09 f708 	mul.w	r7, r9, r8
 80004f4:	42b7      	cmp	r7, r6
 80004f6:	fa02 f201 	lsl.w	r2, r2, r1
 80004fa:	fa00 fa01 	lsl.w	sl, r0, r1
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x242>
 8000500:	18f6      	adds	r6, r6, r3
 8000502:	f109 30ff 	add.w	r0, r9, #4294967295
 8000506:	d241      	bcs.n	800058c <__udivmoddi4+0x2bc>
 8000508:	42b7      	cmp	r7, r6
 800050a:	d93f      	bls.n	800058c <__udivmoddi4+0x2bc>
 800050c:	f1a9 0902 	sub.w	r9, r9, #2
 8000510:	441e      	add	r6, r3
 8000512:	1bf6      	subs	r6, r6, r7
 8000514:	b2a0      	uxth	r0, r4
 8000516:	fbb6 f4fc 	udiv	r4, r6, ip
 800051a:	fb0c 6614 	mls	r6, ip, r4, r6
 800051e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000522:	fb04 f808 	mul.w	r8, r4, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x26a>
 800052a:	18ff      	adds	r7, r7, r3
 800052c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000530:	d228      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d926      	bls.n	8000584 <__udivmoddi4+0x2b4>
 8000536:	3c02      	subs	r4, #2
 8000538:	441f      	add	r7, r3
 800053a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800053e:	ebc8 0707 	rsb	r7, r8, r7
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	4644      	mov	r4, r8
 800054a:	464e      	mov	r6, r9
 800054c:	d314      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	d029      	beq.n	80005a4 <__udivmoddi4+0x2d4>
 8000550:	b365      	cbz	r5, 80005ac <__udivmoddi4+0x2dc>
 8000552:	ebba 0304 	subs.w	r3, sl, r4
 8000556:	eb67 0706 	sbc.w	r7, r7, r6
 800055a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800055e:	40cb      	lsrs	r3, r1
 8000560:	40cf      	lsrs	r7, r1
 8000562:	ea4e 0303 	orr.w	r3, lr, r3
 8000566:	e885 0088 	stmia.w	r5, {r3, r7}
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	4613      	mov	r3, r2
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x96>
 8000574:	4610      	mov	r0, r2
 8000576:	e6e0      	b.n	800033a <__udivmoddi4+0x6a>
 8000578:	ebb8 0402 	subs.w	r4, r8, r2
 800057c:	eb69 0603 	sbc.w	r6, r9, r3
 8000580:	3801      	subs	r0, #1
 8000582:	e7e5      	b.n	8000550 <__udivmoddi4+0x280>
 8000584:	4604      	mov	r4, r0
 8000586:	e7d8      	b.n	800053a <__udivmoddi4+0x26a>
 8000588:	4611      	mov	r1, r2
 800058a:	e795      	b.n	80004b8 <__udivmoddi4+0x1e8>
 800058c:	4681      	mov	r9, r0
 800058e:	e7c0      	b.n	8000512 <__udivmoddi4+0x242>
 8000590:	468a      	mov	sl, r1
 8000592:	e77c      	b.n	800048e <__udivmoddi4+0x1be>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e748      	b.n	800042c <__udivmoddi4+0x15c>
 800059a:	4608      	mov	r0, r1
 800059c:	e70a      	b.n	80003b4 <__udivmoddi4+0xe4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443e      	add	r6, r7
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x134>
 80005a4:	45c2      	cmp	sl, r8
 80005a6:	d3e7      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80005a8:	463e      	mov	r6, r7
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x280>
 80005ac:	4629      	mov	r1, r5
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005b8:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005ba:	f000 f9c5 	bl	8000948 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  void InitProcedure();
  InitProcedure();
 80005be:	f005 fafb 	bl	8005bb8 <InitProcedure>
  osThreadExit();
 80005c2:	f004 fa6d 	bl	8004aa0 <osThreadExit>
	...

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005cc:	2230      	movs	r2, #48	; 0x30
 80005ce:	2100      	movs	r1, #0
 80005d0:	a808      	add	r0, sp, #32
 80005d2:	f005 fc30 	bl	8005e36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d6:	2100      	movs	r1, #0
 80005d8:	2214      	movs	r2, #20
 80005da:	a803      	add	r0, sp, #12
 80005dc:	f005 fc2b 	bl	8005e36 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2400      	movs	r4, #0
 80005e2:	4b1e      	ldr	r3, [pc, #120]	; (800065c <SystemClock_Config+0x94>)
 80005e4:	9401      	str	r4, [sp, #4]
 80005e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005f0:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <SystemClock_Config+0x98>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005fa:	9402      	str	r4, [sp, #8]
 80005fc:	6813      	ldr	r3, [r2, #0]
 80005fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	6813      	ldr	r3, [r2, #0]
 800060a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060e:	9302      	str	r3, [sp, #8]
 8000610:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000612:	2301      	movs	r3, #1
 8000614:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000620:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000622:	2308      	movs	r3, #8
 8000624:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000626:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800062a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800062c:	2304      	movs	r3, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000630:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000634:	2307      	movs	r3, #7
 8000636:	9313      	str	r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f001 fe99 	bl	8002370 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000642:	4629      	mov	r1, r5
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000648:	a803      	add	r0, sp, #12
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	f002 f855 	bl	8002700 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000656:	b015      	add	sp, #84	; 0x54
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09a      	sub	sp, #104	; 0x68
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000668:	2400      	movs	r4, #0
 800066a:	4da7      	ldr	r5, [pc, #668]	; (8000908 <main+0x2a4>)
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f002 fb9c 	bl	8002da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f7ff ffaa 	bl	80005c8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	2214      	movs	r2, #20
 8000676:	2100      	movs	r1, #0
 8000678:	a812      	add	r0, sp, #72	; 0x48
 800067a:	f005 fbdc 	bl	8005e36 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	9401      	str	r4, [sp, #4]
 8000680:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 8000682:	48a2      	ldr	r0, [pc, #648]	; (800090c <main+0x2a8>)
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	632b      	str	r3, [r5, #48]	; 0x30
 800068a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800068c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000694:	9402      	str	r4, [sp, #8]
 8000696:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	632b      	str	r3, [r5, #48]	; 0x30
 800069e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	9302      	str	r3, [sp, #8]
 80006a6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	9403      	str	r4, [sp, #12]
 80006aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	632b      	str	r3, [r5, #48]	; 0x30
 80006b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	9303      	str	r3, [sp, #12]
 80006ba:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	9404      	str	r4, [sp, #16]
 80006be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	632b      	str	r3, [r5, #48]	; 0x30
 80006c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 80006ce:	4622      	mov	r2, r4
 80006d0:	2101      	movs	r1, #1

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARGUS_CS_GPIO_Port, ARGUS_CS_Pin, GPIO_PIN_RESET);
 80006d4:	f002 f982 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);
 80006d8:	4622      	mov	r2, r4
 80006da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80006de:	488c      	ldr	r0, [pc, #560]	; (8000910 <main+0x2ac>)
 80006e0:	f002 f97c 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
 80006e4:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);
 80006e6:	a912      	add	r1, sp, #72	; 0x48
 80006e8:	4888      	ldr	r0, [pc, #544]	; (800090c <main+0x2a8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
 80006ea:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
 80006ec:	2702      	movs	r7, #2
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_DIR_1_Pin|MOT_DIR_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ARGUS_CS_Pin */
  GPIO_InitStruct.Pin = ARGUS_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f002 f8a4 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f8:	4b86      	ldr	r3, [pc, #536]	; (8000914 <main+0x2b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80006fa:	4884      	ldr	r0, [pc, #528]	; (800090c <main+0x2a8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fc:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80006fe:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ARGUS_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ARGUS_IRQ_Pin */
  GPIO_InitStruct.Pin = ARGUS_IRQ_Pin;
 8000700:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000704:	f002 f89c 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
  GPIO_InitStruct.Pin = MOT_DIR_1_Pin|MOT_DIR_2_Pin;
 8000708:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	a912      	add	r1, sp, #72	; 0x48
 800070e:	4880      	ldr	r0, [pc, #512]	; (8000910 <main+0x2ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARGUS_IRQ_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : MOT_DIR_1_Pin MOT_DIR_2_Pin */
  GPIO_InitStruct.Pin = MOT_DIR_1_Pin|MOT_DIR_2_Pin;
 8000710:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f002 f892 	bl	8002840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800071c:	4622      	mov	r2, r4
 800071e:	2105      	movs	r1, #5
 8000720:	2007      	movs	r0, #7
 8000722:	f002 fac5 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000726:	2007      	movs	r0, #7
 8000728:	f002 faf6 	bl	8002d18 <HAL_NVIC_EnableIRQ>
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072c:	9400      	str	r4, [sp, #0]
 800072e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000734:	632b      	str	r3, [r5, #48]	; 0x30
 8000736:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000738:	4d77      	ldr	r5, [pc, #476]	; (8000918 <main+0x2b4>)
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800073a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800073e:	4622      	mov	r2, r4
 8000740:	2105      	movs	r1, #5
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000742:	9300      	str	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000744:	203a      	movs	r0, #58	; 0x3a
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000746:	9b00      	ldr	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000748:	f002 fab2 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800074c:	203a      	movs	r0, #58	; 0x3a
 800074e:	f002 fae3 	bl	8002d18 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000752:	4622      	mov	r2, r4
 8000754:	2105      	movs	r1, #5
 8000756:	203b      	movs	r0, #59	; 0x3b
 8000758:	f002 faaa 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800075c:	203b      	movs	r0, #59	; 0x3b
 800075e:	f002 fadb 	bl	8002d18 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000762:	2210      	movs	r2, #16
 8000764:	4621      	mov	r1, r4
 8000766:	a807      	add	r0, sp, #28
 8000768:	f005 fb65 	bl	8005e36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076c:	221c      	movs	r2, #28
 800076e:	4621      	mov	r1, r4
 8000770:	a80b      	add	r0, sp, #44	; 0x2c
  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000772:	9405      	str	r4, [sp, #20]
 8000774:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000776:	f005 fb5e 	bl	8005e36 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800077a:	2220      	movs	r2, #32
 800077c:	4621      	mov	r1, r4
 800077e:	a812      	add	r0, sp, #72	; 0x48
 8000780:	f005 fb59 	bl	8005e36 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000784:	4b65      	ldr	r3, [pc, #404]	; (800091c <main+0x2b8>)
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000788:	4628      	mov	r0, r5

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
 800078a:	e885 0018 	stmia.w	r5, {r3, r4}
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5880 	mov.w	r8, #4096	; 0x1000

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0;
 8000792:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000796:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800079a:	f002 fca7 	bl	80030ec <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800079e:	a907      	add	r1, sp, #28
 80007a0:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a6:	f002 fdb6 	bl	8003316 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007aa:	4628      	mov	r0, r5
 80007ac:	f002 fcd2 	bl	8003154 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b0:	a905      	add	r1, sp, #20
 80007b2:	4628      	mov	r0, r5
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	f04f 0960 	mov.w	r9, #96	; 0x60
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007bc:	f002 fe42 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c0:	4622      	mov	r2, r4
 80007c2:	a90b      	add	r1, sp, #44	; 0x2c
 80007c4:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80007ca:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80007cc:	970d      	str	r7, [sp, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ce:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d0:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007d2:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d4:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	f002 fd31 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007de:	a912      	add	r1, sp, #72	; 0x48
 80007e0:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e2:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e4:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007e6:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e8:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ea:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ec:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ee:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f0:	f002 fe62 	bl	80034b8 <HAL_TIMEx_ConfigBreakDeadTime>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007f4:	4628      	mov	r0, r5
 80007f6:	f000 fc0b 	bl	8001010 <HAL_TIM_MspPostInit>

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	2210      	movs	r2, #16
 80007fc:	4621      	mov	r1, r4
 80007fe:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000800:	4d47      	ldr	r5, [pc, #284]	; (8000920 <main+0x2bc>)

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f005 fb18 	bl	8005e36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000806:	221c      	movs	r2, #28
 8000808:	4621      	mov	r1, r4
 800080a:	a812      	add	r0, sp, #72	; 0x48
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	9407      	str	r4, [sp, #28]
 800080e:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000810:	f005 fb11 	bl	8005e36 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000814:	4b43      	ldr	r3, [pc, #268]	; (8000924 <main+0x2c0>)
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000816:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000818:	4628      	mov	r0, r5

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
 800081a:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 0;
 800081e:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000824:	f002 fc62 	bl	80030ec <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000828:	a90b      	add	r1, sp, #44	; 0x2c
 800082a:	4628      	mov	r0, r5
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000830:	f002 fd71 	bl	8003316 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000834:	4628      	mov	r0, r5
 8000836:	f002 fc8d 	bl	8003154 <HAL_TIM_PWM_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083a:	a907      	add	r1, sp, #28
 800083c:	4628      	mov	r0, r5
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083e:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000842:	f002 fdff 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000846:	a912      	add	r1, sp, #72	; 0x48
 8000848:	4622      	mov	r2, r4
 800084a:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  sConfigOC.Pulse = 0;
 8000850:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000852:	9714      	str	r7, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000854:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000856:	f002 fcf1 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800085a:	4628      	mov	r0, r5
 800085c:	f000 fbd8 	bl	8001010 <HAL_TIM_MspPostInit>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000860:	4831      	ldr	r0, [pc, #196]	; (8000928 <main+0x2c4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000862:	4a32      	ldr	r2, [pc, #200]	; (800092c <main+0x2c8>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000864:	6084      	str	r4, [r0, #8]
  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000866:	f44f 7382 	mov.w	r3, #260	; 0x104
 800086a:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000872:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000874:	2308      	movs	r3, #8
 8000876:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8000878:	230a      	movs	r3, #10
 800087a:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800087e:	6107      	str	r7, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000880:	6146      	str	r6, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000882:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000884:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000886:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000888:	f005 f8f7 	bl	8005a7a <HAL_SPI_Init>

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088c:	2210      	movs	r2, #16
 800088e:	4621      	mov	r1, r4
 8000890:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000892:	4d27      	ldr	r5, [pc, #156]	; (8000930 <main+0x2cc>)

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000894:	f005 facf 	bl	8005e36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000898:	221c      	movs	r2, #28
 800089a:	4621      	mov	r1, r4
 800089c:	a812      	add	r0, sp, #72	; 0x48
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089e:	9407      	str	r4, [sp, #28]
 80008a0:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a2:	f005 fac8 	bl	8005e36 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 83;
 80008a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008aa:	2353      	movs	r3, #83	; 0x53
 80008ac:	e885 000a 	stmia.w	r5, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999999999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b0:	4628      	mov	r0, r5

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 83;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999999999;
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <main+0x2d0>)
 80008b4:	60eb      	str	r3, [r5, #12]
  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 83;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 999999999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008bc:	f002 fc16 	bl	80030ec <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c0:	a90b      	add	r1, sp, #44	; 0x2c
 80008c2:	4628      	mov	r0, r5
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c8:	f002 fd25 	bl	8003316 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80008cc:	4628      	mov	r0, r5
 80008ce:	f002 fc27 	bl	8003120 <HAL_TIM_OC_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d2:	a907      	add	r1, sp, #28
 80008d4:	4628      	mov	r0, r5
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008da:	f002 fdb3 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008de:	4622      	mov	r2, r4
 80008e0:	a912      	add	r1, sp, #72	; 0x48
 80008e2:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008e4:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.Pulse = 0;
 80008e6:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e8:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ea:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ec:	f002 fc78 	bl	80031e0 <HAL_TIM_OC_ConfigChannel>
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80008f0:	f004 f83a 	bl	8004968 <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008f4:	4a10      	ldr	r2, [pc, #64]	; (8000938 <main+0x2d4>)
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <main+0x2d8>)
 80008f8:	4621      	mov	r1, r4
 80008fa:	f004 f875 	bl	80049e8 <osThreadNew>
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <main+0x2dc>)
 8000900:	6018      	str	r0, [r3, #0]
    /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000902:	f004 f84d 	bl	80049a0 <osKernelStart>
 8000906:	e7fe      	b.n	8000906 <main+0x2a2>
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800
 8000910:	40020400 	.word	0x40020400
 8000914:	10110000 	.word	0x10110000
 8000918:	20008f70 	.word	0x20008f70
 800091c:	40010000 	.word	0x40010000
 8000920:	20008f30 	.word	0x20008f30
 8000924:	40000400 	.word	0x40000400
 8000928:	20008fb0 	.word	0x20008fb0
 800092c:	40013000 	.word	0x40013000
 8000930:	20009008 	.word	0x20009008
 8000934:	3b9ac9ff 	.word	0x3b9ac9ff
 8000938:	08006d70 	.word	0x08006d70
 800093c:	080005b9 	.word	0x080005b9
 8000940:	20008f2c 	.word	0x20008f2c

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	4770      	bx	lr
	...

08000948 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000948:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800094a:	2200      	movs	r2, #0
 800094c:	490e      	ldr	r1, [pc, #56]	; (8000988 <MX_USB_DEVICE_Init+0x40>)
 800094e:	480f      	ldr	r0, [pc, #60]	; (800098c <MX_USB_DEVICE_Init+0x44>)
 8000950:	f004 fb6e 	bl	8005030 <USBD_Init>
 8000954:	b108      	cbz	r0, 800095a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8000956:	f7ff fff5 	bl	8000944 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <MX_USB_DEVICE_Init+0x48>)
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <MX_USB_DEVICE_Init+0x44>)
 800095e:	f004 fb7c 	bl	800505a <USBD_RegisterClass>
 8000962:	b108      	cbz	r0, 8000968 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8000964:	f7ff ffee 	bl	8000944 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000968:	490a      	ldr	r1, [pc, #40]	; (8000994 <MX_USB_DEVICE_Init+0x4c>)
 800096a:	4808      	ldr	r0, [pc, #32]	; (800098c <MX_USB_DEVICE_Init+0x44>)
 800096c:	f005 f844 	bl	80059f8 <USBD_CDC_RegisterInterface>
 8000970:	b108      	cbz	r0, 8000976 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8000972:	f7ff ffe7 	bl	8000944 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USB_DEVICE_Init+0x44>)
 8000978:	f004 fb76 	bl	8005068 <USBD_Start>
 800097c:	b118      	cbz	r0, 8000986 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800097e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
  {
    Error_Handler();
 8000982:	f7ff bfdf 	b.w	8000944 <Error_Handler>
 8000986:	bd08      	pop	{r3, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20009108 	.word	0x20009108
 8000990:	200000b4 	.word	0x200000b4
 8000994:	20000050 	.word	0x20000050

08000998 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000998:	b530      	push	{r4, r5, lr}
 800099a:	4604      	mov	r4, r0
 800099c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	2214      	movs	r2, #20
 80009a0:	2100      	movs	r1, #0
 80009a2:	a803      	add	r0, sp, #12
 80009a4:	f005 fa47 	bl	8005e36 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80009a8:	6823      	ldr	r3, [r4, #0]
 80009aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009ae:	d136      	bne.n	8000a1e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4c1c      	ldr	r4, [pc, #112]	; (8000a24 <HAL_PCD_MspInit+0x8c>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	481d      	ldr	r0, [pc, #116]	; (8000a28 <HAL_PCD_MspInit+0x90>)
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	2500      	movs	r5, #0
 80009b6:	9501      	str	r5, [sp, #4]
 80009b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6323      	str	r3, [r4, #48]	; 0x30
 80009c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	9b01      	ldr	r3, [sp, #4]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	a903      	add	r1, sp, #12
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f001 ff35 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	a903      	add	r1, sp, #12

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e6:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <HAL_PCD_MspInit+0x90>)

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f001 ff27 	bl	8002840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6363      	str	r3, [r4, #52]	; 0x34
 80009fa:	9502      	str	r5, [sp, #8]
 80009fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	6463      	str	r3, [r4, #68]	; 0x44
 8000a04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000a0c:	2043      	movs	r0, #67	; 0x43
 8000a0e:	462a      	mov	r2, r5
 8000a10:	2105      	movs	r1, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a12:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000a14:	f002 f94c 	bl	8002cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000a18:	2043      	movs	r0, #67	; 0x43
 8000a1a:	f002 f97d 	bl	8002d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000a1e:	b009      	add	sp, #36	; 0x24
 8000a20:	bd30      	pop	{r4, r5, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000a2c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8000a30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a34:	f004 bb2f 	b.w	8005096 <USBD_LL_SetupStage>

08000a38 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000a38:	231c      	movs	r3, #28
 8000a3a:	fb03 0301 	mla	r3, r3, r1, r0
 8000a3e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a42:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000a46:	f004 bb53 	b.w	80050f0 <USBD_LL_DataOutStage>

08000a4a <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000a4a:	231c      	movs	r3, #28
 8000a4c:	fb03 0301 	mla	r3, r3, r1, r0
 8000a50:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a56:	f004 bb85 	b.w	8005164 <USBD_LL_DataInStage>

08000a5a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000a5a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a5e:	f004 bc16 	b.w	800528e <USBD_LL_SOF>

08000a62 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000a62:	68c3      	ldr	r3, [r0, #12]
 8000a64:	2b02      	cmp	r3, #2
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8000a66:	b510      	push	{r4, lr}
 8000a68:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000a6a:	d001      	beq.n	8000a70 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8000a6c:	f7ff ff6a 	bl	8000944 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000a70:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000a74:	2101      	movs	r1, #1
 8000a76:	f004 fbf8 	bl	800526a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000a7a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8000a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000a82:	f004 bbcb 	b.w	800521c <USBD_LL_Reset>
	...

08000a88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000a88:	b510      	push	{r4, lr}
 8000a8a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000a8c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000a90:	f004 fbee 	bl	8005270 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8000a94:	6822      	ldr	r2, [r4, #0]
 8000a96:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000aa2:	6a23      	ldr	r3, [r4, #32]
 8000aa4:	b123      	cbz	r3, 8000ab0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000aa6:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <HAL_PCD_SuspendCallback+0x2c>)
 8000aa8:	6913      	ldr	r3, [r2, #16]
 8000aaa:	f043 0306 	orr.w	r3, r3, #6
 8000aae:	6113      	str	r3, [r2, #16]
 8000ab0:	bd10      	pop	{r4, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000ab8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000abc:	f004 bbe1 	b.w	8005282 <USBD_LL_Resume>

08000ac0 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000ac0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ac4:	f004 bbf1 	b.w	80052aa <USBD_LL_IsoOUTIncomplete>

08000ac8 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000ac8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000acc:	f004 bbeb 	b.w	80052a6 <USBD_LL_IsoINIncomplete>

08000ad0 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8000ad0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000ad4:	f004 bbeb 	b.w	80052ae <USBD_LL_DevConnected>

08000ad8 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8000ad8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000adc:	f004 bbe9 	b.w	80052b2 <USBD_LL_DevDisconnected>

08000ae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000ae0:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8000ae2:	7802      	ldrb	r2, [r0, #0]
 8000ae4:	bb3a      	cbnz	r2, 8000b36 <USBD_LL_Init+0x56>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ae8:	2104      	movs	r1, #4
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000aea:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8000aee:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000af2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000af6:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000afa:	2102      	movs	r1, #2
 8000afc:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000afe:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b00:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b02:	2101      	movs	r1, #1
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b06:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b0c:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b0e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b10:	f000 fac4 	bl	800109c <HAL_PCD_Init>
 8000b14:	b108      	cbz	r0, 8000b1a <USBD_LL_Init+0x3a>
  {
    Error_Handler( );
 8000b16:	f7ff ff15 	bl	8000944 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <USBD_LL_Init+0x5c>)
 8000b1e:	f000 ff5d 	bl	80019dc <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8000b22:	2240      	movs	r2, #64	; 0x40
 8000b24:	2100      	movs	r1, #0
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <USBD_LL_Init+0x5c>)
 8000b28:	f000 ff37 	bl	800199a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <USBD_LL_Init+0x5c>)
 8000b32:	f000 ff32 	bl	800199a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8000b36:	2000      	movs	r0, #0
 8000b38:	bd08      	pop	{r3, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200093a4 	.word	0x200093a4

08000b40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000b40:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8000b42:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b46:	f000 fb34 	bl	80011b2 <HAL_PCD_Start>
 8000b4a:	2803      	cmp	r0, #3
 8000b4c:	bf9a      	itte	ls
 8000b4e:	4b02      	ldrls	r3, [pc, #8]	; (8000b58 <USBD_LL_Start+0x18>)
 8000b50:	5c18      	ldrbls	r0, [r3, r0]
 8000b52:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8000b54:	bd08      	pop	{r3, pc}
 8000b56:	bf00      	nop
 8000b58:	08006da0 	.word	0x08006da0

08000b5c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000b5c:	b510      	push	{r4, lr}
 8000b5e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000b60:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b64:	4613      	mov	r3, r2
 8000b66:	4622      	mov	r2, r4
 8000b68:	f000 fe0a 	bl	8001780 <HAL_PCD_EP_Open>
 8000b6c:	2803      	cmp	r0, #3
 8000b6e:	bf9a      	itte	ls
 8000b70:	4b01      	ldrls	r3, [pc, #4]	; (8000b78 <USBD_LL_OpenEP+0x1c>)
 8000b72:	5c18      	ldrbls	r0, [r3, r0]
 8000b74:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8000b76:	bd10      	pop	{r4, pc}
 8000b78:	08006da0 	.word	0x08006da0

08000b7c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000b7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000b7e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b82:	f000 fe30 	bl	80017e6 <HAL_PCD_EP_Close>
 8000b86:	2803      	cmp	r0, #3
 8000b88:	bf9a      	itte	ls
 8000b8a:	4b02      	ldrls	r3, [pc, #8]	; (8000b94 <USBD_LL_CloseEP+0x18>)
 8000b8c:	5c18      	ldrbls	r0, [r3, r0]
 8000b8e:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8000b90:	bd08      	pop	{r3, pc}
 8000b92:	bf00      	nop
 8000b94:	08006da0 	.word	0x08006da0

08000b98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000b98:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000b9a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000b9e:	f000 fe94 	bl	80018ca <HAL_PCD_EP_SetStall>
 8000ba2:	2803      	cmp	r0, #3
 8000ba4:	bf9a      	itte	ls
 8000ba6:	4b02      	ldrls	r3, [pc, #8]	; (8000bb0 <USBD_LL_StallEP+0x18>)
 8000ba8:	5c18      	ldrbls	r0, [r3, r0]
 8000baa:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8000bac:	bd08      	pop	{r3, pc}
 8000bae:	bf00      	nop
 8000bb0:	08006da0 	.word	0x08006da0

08000bb4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000bb4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000bb6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000bba:	f000 febd 	bl	8001938 <HAL_PCD_EP_ClrStall>
 8000bbe:	2803      	cmp	r0, #3
 8000bc0:	bf9a      	itte	ls
 8000bc2:	4b02      	ldrls	r3, [pc, #8]	; (8000bcc <USBD_LL_ClearStallEP+0x18>)
 8000bc4:	5c18      	ldrbls	r0, [r3, r0]
 8000bc6:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8000bc8:	bd08      	pop	{r3, pc}
 8000bca:	bf00      	nop
 8000bcc:	08006da0 	.word	0x08006da0

08000bd0 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8000bd0:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000bd4:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000bd8:	bf18      	it	ne
 8000bda:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8000bde:	f04f 001c 	mov.w	r0, #28
 8000be2:	bf15      	itete	ne
 8000be4:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000be8:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000bec:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000bf0:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000bf8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000bfa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000bfe:	f000 fdab 	bl	8001758 <HAL_PCD_SetAddress>
 8000c02:	2803      	cmp	r0, #3
 8000c04:	bf9a      	itte	ls
 8000c06:	4b02      	ldrls	r3, [pc, #8]	; (8000c10 <USBD_LL_SetUSBAddress+0x18>)
 8000c08:	5c18      	ldrbls	r0, [r3, r0]
 8000c0a:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8000c0c:	bd08      	pop	{r3, pc}
 8000c0e:	bf00      	nop
 8000c10:	08006da0 	.word	0x08006da0

08000c14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000c14:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000c16:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c1a:	f000 fe37 	bl	800188c <HAL_PCD_EP_Transmit>
 8000c1e:	2803      	cmp	r0, #3
 8000c20:	bf9a      	itte	ls
 8000c22:	4b02      	ldrls	r3, [pc, #8]	; (8000c2c <USBD_LL_Transmit+0x18>)
 8000c24:	5c18      	ldrbls	r0, [r3, r0]
 8000c26:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8000c28:	bd08      	pop	{r3, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08006da0 	.word	0x08006da0

08000c30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000c30:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000c32:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c36:	f000 fdfe 	bl	8001836 <HAL_PCD_EP_Receive>
 8000c3a:	2803      	cmp	r0, #3
 8000c3c:	bf9a      	itte	ls
 8000c3e:	4b02      	ldrls	r3, [pc, #8]	; (8000c48 <USBD_LL_PrepareReceive+0x18>)
 8000c40:	5c18      	ldrbls	r0, [r3, r0]
 8000c42:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8000c44:	bd08      	pop	{r3, pc}
 8000c46:	bf00      	nop
 8000c48:	08006da0 	.word	0x08006da0

08000c4c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000c4c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000c50:	f000 be14 	b.w	800187c <HAL_PCD_EP_GetRxCount>

08000c54 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000c54:	2312      	movs	r3, #18
 8000c56:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8000c58:	4800      	ldr	r0, [pc, #0]	; (8000c5c <USBD_FS_DeviceDescriptor+0x8>)
 8000c5a:	4770      	bx	lr
 8000c5c:	2000003c 	.word	0x2000003c

08000c60 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000c60:	2304      	movs	r3, #4
 8000c62:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8000c64:	4800      	ldr	r0, [pc, #0]	; (8000c68 <USBD_FS_LangIDStrDescriptor+0x8>)
 8000c66:	4770      	bx	lr
 8000c68:	2000001c 	.word	0x2000001c

08000c6c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000c6c:	2300      	movs	r3, #0
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000c6e:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8000c70:	461d      	mov	r5, r3
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000c72:	b2dc      	uxtb	r4, r3
 8000c74:	42a2      	cmp	r2, r4
 8000c76:	d90c      	bls.n	8000c92 <IntToUnicode+0x26>
  {
    if (((value >> 28)) < 0xA)
 8000c78:	0f04      	lsrs	r4, r0, #28
 8000c7a:	2c09      	cmp	r4, #9
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000c7c:	bf94      	ite	ls
 8000c7e:	3430      	addls	r4, #48	; 0x30
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000c80:	3437      	addhi	r4, #55	; 0x37
 8000c82:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8000c86:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;
 8000c8a:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8000c8c:	7065      	strb	r5, [r4, #1]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	e7ef      	b.n	8000c72 <IntToUnicode+0x6>
  }
}
 8000c92:	bd30      	pop	{r4, r5, pc}

08000c94 <USBD_FS_SerialStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000c94:	231a      	movs	r3, #26
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c96:	b510      	push	{r4, lr}
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000c98:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <USBD_FS_SerialStrDescriptor+0x2c>)
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000c9a:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <USBD_FS_SerialStrDescriptor+0x30>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8000c9e:	6810      	ldr	r0, [r2, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000ca0:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
 8000ca2:	1818      	adds	r0, r3, r0
 8000ca4:	d00a      	beq.n	8000cbc <USBD_FS_SerialStrDescriptor+0x28>
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <USBD_FS_SerialStrDescriptor+0x34>)

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000ca8:	4908      	ldr	r1, [pc, #32]	; (8000ccc <USBD_FS_SerialStrDescriptor+0x38>)
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000caa:	681c      	ldr	r4, [r3, #0]

  deviceserial0 += deviceserial2;

  if (deviceserial0 != 0)
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000cac:	2208      	movs	r2, #8
 8000cae:	f7ff ffdd 	bl	8000c6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	4906      	ldr	r1, [pc, #24]	; (8000cd0 <USBD_FS_SerialStrDescriptor+0x3c>)
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f7ff ffd8 	bl	8000c6c <IntToUnicode>
  Get_SerialNum();
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
}
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <USBD_FS_SerialStrDescriptor+0x40>)
 8000cbe:	bd10      	pop	{r4, pc}
 8000cc0:	1fff7a18 	.word	0x1fff7a18
 8000cc4:	1fff7a10 	.word	0x1fff7a10
 8000cc8:	1fff7a14 	.word	0x1fff7a14
 8000ccc:	20000022 	.word	0x20000022
 8000cd0:	20000032 	.word	0x20000032
 8000cd4:	20000020 	.word	0x20000020

08000cd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000cd8:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000cda:	4c04      	ldr	r4, [pc, #16]	; (8000cec <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8000cde:	460a      	mov	r2, r1
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	f004 fcf1 	bl	80056c8 <USBD_GetString>
  return USBD_StrDesc;
}
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	bd10      	pop	{r4, pc}
 8000cea:	bf00      	nop
 8000cec:	200097ac 	.word	0x200097ac
 8000cf0:	08006da4 	.word	0x08006da4

08000cf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000cf4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000cf6:	4c04      	ldr	r4, [pc, #16]	; (8000d08 <USBD_FS_ProductStrDescriptor+0x14>)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <USBD_FS_ProductStrDescriptor+0x18>)
 8000cfa:	460a      	mov	r2, r1
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	f004 fce3 	bl	80056c8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000d02:	4620      	mov	r0, r4
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	bf00      	nop
 8000d08:	200097ac 	.word	0x200097ac
 8000d0c:	08006db7 	.word	0x08006db7

08000d10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d10:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000d12:	4c04      	ldr	r4, [pc, #16]	; (8000d24 <USBD_FS_ConfigStrDescriptor+0x14>)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <USBD_FS_ConfigStrDescriptor+0x18>)
 8000d16:	460a      	mov	r2, r1
 8000d18:	4621      	mov	r1, r4
 8000d1a:	f004 fcd5 	bl	80056c8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000d1e:	4620      	mov	r0, r4
 8000d20:	bd10      	pop	{r4, pc}
 8000d22:	bf00      	nop
 8000d24:	200097ac 	.word	0x200097ac
 8000d28:	08006dcd 	.word	0x08006dcd

08000d2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d2c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000d2e:	4c04      	ldr	r4, [pc, #16]	; (8000d40 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8000d32:	460a      	mov	r2, r1
 8000d34:	4621      	mov	r1, r4
 8000d36:	f004 fcc7 	bl	80056c8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	bf00      	nop
 8000d40:	200097ac 	.word	0x200097ac
 8000d44:	08006dd8 	.word	0x08006dd8

08000d48 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
    return ( USBD_OK );
  /* USER CODE END 4 */
}
 8000d48:	2000      	movs	r0, #0
 8000d4a:	4770      	bx	lr

08000d4c <CDC_Control_FS>:
        break;
    }

    return ( USBD_OK );
  /* USER CODE END 5 */
}
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	4770      	bx	lr

08000d50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000d50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
    void CdcReceiveHandler( char* Buf, size_t len );
    CdcReceiveHandler( (char*)Buf, (size_t)*Len );
 8000d52:	6809      	ldr	r1, [r1, #0]
 8000d54:	f004 ffb6 	bl	8005cc4 <CdcReceiveHandler>
    return ( USBD_OK );
  /* USER CODE END 6 */
}
 8000d58:	2000      	movs	r0, #0
 8000d5a:	bd08      	pop	{r3, pc}

08000d5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000d5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, UserTxBufferFS, 0 );
 8000d5e:	4c06      	ldr	r4, [pc, #24]	; (8000d78 <CDC_Init_FS+0x1c>)
 8000d60:	4906      	ldr	r1, [pc, #24]	; (8000d7c <CDC_Init_FS+0x20>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	4620      	mov	r0, r4
 8000d66:	f004 fe4e 	bl	8005a06 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, UserRxBufferFS );
 8000d6a:	4905      	ldr	r1, [pc, #20]	; (8000d80 <CDC_Init_FS+0x24>)
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f004 fe52 	bl	8005a16 <USBD_CDC_SetRxBuffer>
    return ( USBD_OK );
  /* USER CODE END 3 */
}
 8000d72:	2000      	movs	r0, #0
 8000d74:	bd10      	pop	{r4, pc}
 8000d76:	bf00      	nop
 8000d78:	20009108 	.word	0x20009108
 8000d7c:	20009aac 	.word	0x20009aac
 8000d80:	200099ac 	.word	0x200099ac

08000d84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000d84:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000d86:	4c09      	ldr	r4, [pc, #36]	; (8000dac <CDC_Transmit_FS+0x28>)
 8000d88:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    if ( hcdc->TxState != 0 ) {
 8000d8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000d90:	460a      	mov	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
 8000d92:	b943      	cbnz	r3, 8000da6 <CDC_Transmit_FS+0x22>
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
 8000d94:	4601      	mov	r1, r0
 8000d96:	4620      	mov	r0, r4
 8000d98:	f004 fe35 	bl	8005a06 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8000d9c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8000d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_CDC_HandleTypeDef* hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    if ( hcdc->TxState != 0 ) {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8000da2:	f004 be3e 	b.w	8005a22 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8000da6:	2001      	movs	r0, #1
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	bf00      	nop
 8000dac:	20009108 	.word	0x20009108

08000db0 <NMI_Handler>:
 8000db0:	4770      	bx	lr

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler>

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	4770      	bx	lr

08000dbc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f001 be13 	b.w	80029e8 <HAL_GPIO_EXTI_IRQHandler>
	...

08000dc4 <TIM1_UP_TIM10_IRQHandler>:
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim1, TIM_IT_UPDATE );
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f06f 0201 	mvn.w	r2, #1
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	4770      	bx	lr
 8000dd0:	20008f70 	.word	0x20008f70

08000dd4 <TIM1_TRG_COM_TIM11_IRQHandler>:
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd4:	4801      	ldr	r0, [pc, #4]	; (8000ddc <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8000dd6:	f002 b898 	b.w	8002f0a <HAL_TIM_IRQHandler>
 8000dda:	bf00      	nop
 8000ddc:	20008f70 	.word	0x20008f70

08000de0 <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
    __HAL_TIM_CLEAR_FLAG( &htim3, TIM_IT_UPDATE );
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <TIM3_IRQHandler+0xc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f06f 0201 	mvn.w	r2, #1
 8000de8:	611a      	str	r2, [r3, #16]
 8000dea:	4770      	bx	lr
 8000dec:	20008f30 	.word	0x20008f30

08000df0 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000df0:	4801      	ldr	r0, [pc, #4]	; (8000df8 <DMA2_Stream2_IRQHandler+0x8>)
 8000df2:	f001 be91 	b.w	8002b18 <HAL_DMA_IRQHandler>
 8000df6:	bf00      	nop
 8000df8:	20009048 	.word	0x20009048

08000dfc <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000dfc:	4801      	ldr	r0, [pc, #4]	; (8000e04 <DMA2_Stream3_IRQHandler+0x8>)
 8000dfe:	f001 be8b 	b.w	8002b18 <HAL_DMA_IRQHandler>
 8000e02:	bf00      	nop
 8000e04:	200090a8 	.word	0x200090a8

08000e08 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e08:	4801      	ldr	r0, [pc, #4]	; (8000e10 <OTG_FS_IRQHandler+0x8>)
 8000e0a:	f000 b9f1 	b.w	80011f0 <HAL_PCD_IRQHandler>
 8000e0e:	bf00      	nop
 8000e10:	200093a4 	.word	0x200093a4

08000e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_MspInit+0x7c>)
 8000e18:	2400      	movs	r4, #0
 8000e1a:	9400      	str	r4, [sp, #0]
 8000e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e22:	645a      	str	r2, [r3, #68]	; 0x44
 8000e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e26:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e2a:	9200      	str	r2, [sp, #0]
 8000e2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	9401      	str	r4, [sp, #4]
 8000e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 8000e40:	4622      	mov	r2, r4
 8000e42:	2105      	movs	r1, #5
 8000e44:	f06f 000b 	mvn.w	r0, #11
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 8000e4a:	f001 ff31 	bl	8002cb0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 5, 0);
 8000e4e:	4622      	mov	r2, r4
 8000e50:	2105      	movs	r1, #5
 8000e52:	f06f 000a 	mvn.w	r0, #10
 8000e56:	f001 ff2b 	bl	8002cb0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 8000e5a:	4622      	mov	r2, r4
 8000e5c:	2105      	movs	r1, #5
 8000e5e:	f06f 0009 	mvn.w	r0, #9
 8000e62:	f001 ff25 	bl	8002cb0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8000e66:	4622      	mov	r2, r4
 8000e68:	2105      	movs	r1, #5
 8000e6a:	f06f 0004 	mvn.w	r0, #4
 8000e6e:	f001 ff1f 	bl	8002cb0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8000e72:	4622      	mov	r2, r4
 8000e74:	2105      	movs	r1, #5
 8000e76:	f06f 0003 	mvn.w	r0, #3
 8000e7a:	f001 ff19 	bl	8002cb0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e7e:	4622      	mov	r2, r4
 8000e80:	210f      	movs	r1, #15
 8000e82:	f06f 0001 	mvn.w	r0, #1
 8000e86:	f001 ff13 	bl	8002cb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd10      	pop	{r4, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800

08000e94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e94:	b570      	push	{r4, r5, r6, lr}
 8000e96:	4606      	mov	r6, r0
 8000e98:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	2214      	movs	r2, #20
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	a803      	add	r0, sp, #12
 8000ea0:	f004 ffc9 	bl	8005e36 <memset>
  if(hspi->Instance==SPI1)
 8000ea4:	6832      	ldr	r2, [r6, #0]
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <HAL_SPI_MspInit+0xc8>)
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d154      	bne.n	8000f56 <HAL_SPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eac:	2500      	movs	r5, #0
 8000eae:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000eb2:	9501      	str	r5, [sp, #4]
 8000eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	482a      	ldr	r0, [pc, #168]	; (8000f60 <HAL_SPI_MspInit+0xcc>)

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000eb8:	4c2a      	ldr	r4, [pc, #168]	; (8000f64 <HAL_SPI_MspInit+0xd0>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44
 8000ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ec2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000ec6:	9201      	str	r2, [sp, #4]
 8000ec8:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	9502      	str	r5, [sp, #8]
 8000ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ede:	23e0      	movs	r3, #224	; 0xe0
 8000ee0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eec:	2305      	movs	r3, #5
 8000eee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f001 fca6 	bl	8002840 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_SPI_MspInit+0xd4>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef6:	60a5      	str	r5, [r4, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000ef8:	f04f 6cc0 	mov.w	ip, #100663296	; 0x6000000
 8000efc:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f00:	4620      	mov	r0, r4
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f06:	60e5      	str	r5, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f08:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0a:	6165      	str	r5, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0c:	61a5      	str	r5, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f0e:	61e5      	str	r5, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	6225      	str	r5, [r4, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f12:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f14:	f001 fd8a 	bl	8002a2c <HAL_DMA_Init>
 8000f18:	b108      	cbz	r0, 8000f1e <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
 8000f1a:	f7ff fd13 	bl	8000944 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_SPI_MspInit+0xd8>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000f20:	64f4      	str	r4, [r6, #76]	; 0x4c
 8000f22:	63a6      	str	r6, [r4, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f24:	4c12      	ldr	r4, [pc, #72]	; (8000f70 <HAL_SPI_MspInit+0xdc>)
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f26:	f04f 65c0 	mov.w	r5, #100663296	; 0x6000000
 8000f2a:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8000f2e:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f32:	f44f 6280 	mov.w	r2, #1024	; 0x400

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f36:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f38:	4620      	mov	r0, r4

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3a:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3c:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3e:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f40:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f42:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f44:	6223      	str	r3, [r4, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f46:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f48:	f001 fd70 	bl	8002a2c <HAL_DMA_Init>
 8000f4c:	b108      	cbz	r0, 8000f52 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000f4e:	f7ff fcf9 	bl	8000944 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f52:	64b4      	str	r4, [r6, #72]	; 0x48
 8000f54:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f56:	b008      	add	sp, #32
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40013000 	.word	0x40013000
 8000f60:	40020000 	.word	0x40020000
 8000f64:	20009048 	.word	0x20009048
 8000f68:	40026440 	.word	0x40026440
 8000f6c:	40026458 	.word	0x40026458
 8000f70:	200090a8 	.word	0x200090a8

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM1)
 8000f76:	6803      	ldr	r3, [r0, #0]
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <HAL_TIM_Base_MspInit+0x90>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d11a      	bne.n	8000fb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f7e:	2400      	movs	r4, #0
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <HAL_TIM_Base_MspInit+0x94>)
 8000f82:	9401      	str	r4, [sp, #4]
 8000f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f003 0301 	and.w	r3, r3, #1
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000f92:	4622      	mov	r2, r4
 8000f94:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f96:	9301      	str	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000f98:	2019      	movs	r0, #25
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9a:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000f9c:	f001 fe88 	bl	8002cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fa0:	2019      	movs	r0, #25
 8000fa2:	f001 feb9 	bl	8002d18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000fa6:	201a      	movs	r0, #26
 8000fa8:	4622      	mov	r2, r4
 8000faa:	4621      	mov	r1, r4
 8000fac:	f001 fe80 	bl	8002cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000fb0:	201a      	movs	r0, #26
 8000fb2:	e023      	b.n	8000ffc <HAL_TIM_Base_MspInit+0x88>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_TIM_Base_MspInit+0x94>)
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	f042 0201 	orr.w	r2, r2, #1
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	9b02      	ldr	r3, [sp, #8]
 8000fd2:	e015      	b.n	8001000 <HAL_TIM_Base_MspInit+0x8c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_TIM_Base_MspInit+0x98>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d112      	bne.n	8001000 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_TIM_Base_MspInit+0x94>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	9203      	str	r2, [sp, #12]
 8000fe0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000fe2:	f041 0102 	orr.w	r1, r1, #2
 8000fe6:	6419      	str	r1, [r3, #64]	; 0x40
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	9303      	str	r3, [sp, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000ff0:	201d      	movs	r0, #29
 8000ff2:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff4:	9b03      	ldr	r3, [sp, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000ff6:	f001 fe5b 	bl	8002cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ffa:	201d      	movs	r0, #29
 8000ffc:	f001 fe8c 	bl	8002d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001000:	b004      	add	sp, #16
 8001002:	bd10      	pop	{r4, pc}
 8001004:	40010000 	.word	0x40010000
 8001008:	40023800 	.word	0x40023800
 800100c:	40000400 	.word	0x40000400

08001010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001010:	b510      	push	{r4, lr}
 8001012:	4604      	mov	r4, r0
 8001014:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	2214      	movs	r2, #20
 8001018:	2100      	movs	r1, #0
 800101a:	a803      	add	r0, sp, #12
 800101c:	f004 ff0b 	bl	8005e36 <memset>
  if(htim->Instance==TIM1)
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_TIM_MspPostInit+0x78>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d115      	bne.n	8001054 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_TIM_MspPostInit+0x7c>)
    GPIO_InitStruct.Pin = MOT_STEP1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(MOT_STEP1_GPIO_Port, &GPIO_InitStruct);
 800102e:	4818      	ldr	r0, [pc, #96]	; (8001090 <HAL_TIM_MspPostInit+0x80>)
  if(htim->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP1_Pin;
 8001042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001046:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800104c:	2301      	movs	r3, #1
 800104e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP1_GPIO_Port, &GPIO_InitStruct);
 8001050:	a903      	add	r1, sp, #12
 8001052:	e015      	b.n	8001080 <HAL_TIM_MspPostInit+0x70>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001054:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <HAL_TIM_MspPostInit+0x84>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d114      	bne.n	8001084 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_TIM_MspPostInit+0x7c>)
    GPIO_InitStruct.Pin = MOT_STEP2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(MOT_STEP2_GPIO_Port, &GPIO_InitStruct);
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <HAL_TIM_MspPostInit+0x88>)
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001064:	f042 0202 	orr.w	r2, r2, #2
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	9b02      	ldr	r3, [sp, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = MOT_STEP2_Pin;
 8001074:	2310      	movs	r3, #16
 8001076:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800107c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOT_STEP2_GPIO_Port, &GPIO_InitStruct);
 800107e:	a903      	add	r1, sp, #12
 8001080:	f001 fbde 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001084:	b008      	add	sp, #32
 8001086:	bd10      	pop	{r4, pc}
 8001088:	40010000 	.word	0x40010000
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	40000400 	.word	0x40000400
 8001098:	40020400 	.word	0x40020400

0800109c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800109c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800109e:	4604      	mov	r4, r0
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a0:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010a2:	2800      	cmp	r0, #0
 80010a4:	f000 8081 	beq.w	80011aa <HAL_PCD_Init+0x10e>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010a8:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010ac:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010b2:	b91b      	cbnz	r3, 80010bc <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010b4:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010b8:	f7ff fc6e 	bl	8000998 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010bc:	2303      	movs	r3, #3
 80010be:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010c2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010c4:	4625      	mov	r5, r4
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010c6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ca:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
  {
    hpcd->Init.dma_enable = 0U;
 80010ce:	bf08      	it	eq
 80010d0:	6123      	streq	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010d2:	f000 fd5b 	bl	8001b8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	466e      	mov	r6, sp
 80010da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010e4:	e886 0003 	stmia.w	r6, {r0, r1}
 80010e8:	4625      	mov	r5, r4
 80010ea:	1d27      	adds	r7, r4, #4
 80010ec:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80010f0:	f855 0b10 	ldr.w	r0, [r5], #16
 80010f4:	f000 fc90 	bl	8001a18 <USB_CoreInit>
 80010f8:	4606      	mov	r6, r0
 80010fa:	b118      	cbz	r0, 8001104 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
 8001102:	e052      	b.n	80011aa <HAL_PCD_Init+0x10e>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001104:	4601      	mov	r1, r0
 8001106:	6820      	ldr	r0, [r4, #0]
 8001108:	f000 fd46 	bl	8001b98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110c:	4630      	mov	r0, r6
 800110e:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001112:	261c      	movs	r6, #28
 8001114:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001118:	4601      	mov	r1, r0
 800111a:	b2c2      	uxtb	r2, r0

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111c:	4596      	cmp	lr, r2
 800111e:	f100 0001 	add.w	r0, r0, #1
 8001122:	d90d      	bls.n	8001140 <HAL_PCD_Init+0xa4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001124:	fb06 4302 	mla	r3, r6, r2, r4
 8001128:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800112c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001130:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001134:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001138:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800113a:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 800113c:	6519      	str	r1, [r3, #80]	; 0x50
 800113e:	e7ec      	b.n	800111a <HAL_PCD_Init+0x7e>
 8001140:	2300      	movs	r3, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001142:	261c      	movs	r6, #28
 8001144:	4619      	mov	r1, r3
 8001146:	b2d8      	uxtb	r0, r3
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001148:	4586      	cmp	lr, r0
 800114a:	f103 0301 	add.w	r3, r3, #1
 800114e:	d90e      	bls.n	800116e <HAL_PCD_Init+0xd2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001150:	fb06 4200 	mla	r2, r6, r0, r4
 8001154:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001158:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800115c:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001160:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001164:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001168:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 800116c:	e7eb      	b.n	8001146 <HAL_PCD_Init+0xaa>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800116e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001170:	466e      	mov	r6, sp
 8001172:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001178:	e895 0003 	ldmia.w	r5, {r0, r1}
 800117c:	e886 0003 	stmia.w	r6, {r0, r1}
 8001180:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001184:	6820      	ldr	r0, [r4, #0]
 8001186:	f000 fd49 	bl	8001c1c <USB_DevInit>
 800118a:	2301      	movs	r3, #1
 800118c:	4605      	mov	r5, r0
 800118e:	b120      	cbz	r0, 800119a <HAL_PCD_Init+0xfe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001190:	2202      	movs	r2, #2
 8001192:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001196:	461d      	mov	r5, r3
 8001198:	e008      	b.n	80011ac <HAL_PCD_Init+0x110>
  }

  hpcd->USB_Address = 0U;
 800119a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800119e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	f001 f859 	bl	800225a <USB_DevDisconnect>

  return HAL_OK;
 80011a8:	e000      	b.n	80011ac <HAL_PCD_Init+0x110>
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 80011aa:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80011ac:	4628      	mov	r0, r5
 80011ae:	b00b      	add	sp, #44	; 0x2c
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011b2 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011b2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80011b6:	2b01      	cmp	r3, #1
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	4604      	mov	r4, r0
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011bc:	d016      	beq.n	80011ec <HAL_PCD_Start+0x3a>
 80011be:	2301      	movs	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011c0:	6800      	ldr	r0, [r0, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011c2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <HAL_PCD_Start+0x28>
 80011cc:	69a3      	ldr	r3, [r4, #24]
 80011ce:	2b01      	cmp	r3, #1
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011d0:	bf1e      	ittt	ne
 80011d2:	6b83      	ldrne	r3, [r0, #56]	; 0x38
 80011d4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 80011d8:	6383      	strne	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80011da:	f001 f832 	bl	8002242 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011de:	6820      	ldr	r0, [r4, #0]
 80011e0:	f000 fcce 	bl	8001b80 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80011ea:	bd10      	pop	{r4, pc}
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011ec:	2002      	movs	r0, #2
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 80011ee:	bd10      	pop	{r4, pc}

080011f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011f4:	6805      	ldr	r5, [r0, #0]
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011f6:	b087      	sub	sp, #28
 80011f8:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011fa:	4628      	mov	r0, r5
 80011fc:	f001 f869 	bl	80022d2 <USB_GetMode>
 8001200:	2800      	cmp	r0, #0
 8001202:	f040 82a5 	bne.w	8001750 <HAL_PCD_IRQHandler+0x560>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001206:	6820      	ldr	r0, [r4, #0]
 8001208:	f001 f833 	bl	8002272 <USB_ReadInterrupts>
 800120c:	2800      	cmp	r0, #0
 800120e:	f000 829f 	beq.w	8001750 <HAL_PCD_IRQHandler+0x560>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001212:	6820      	ldr	r0, [r4, #0]
 8001214:	f001 f82d 	bl	8002272 <USB_ReadInterrupts>
 8001218:	0783      	lsls	r3, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800121a:	bf48      	it	mi
 800121c:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800121e:	6820      	ldr	r0, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001220:	bf42      	ittt	mi
 8001222:	6953      	ldrmi	r3, [r2, #20]
 8001224:	f003 0302 	andmi.w	r3, r3, #2
 8001228:	6153      	strmi	r3, [r2, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800122a:	f001 f822 	bl	8002272 <USB_ReadInterrupts>
 800122e:	0307      	lsls	r7, r0, #12
 8001230:	d406      	bmi.n	8001240 <HAL_PCD_IRQHandler+0x50>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001232:	6820      	ldr	r0, [r4, #0]
 8001234:	f001 f81d 	bl	8002272 <USB_ReadInterrupts>
 8001238:	0346      	lsls	r6, r0, #13
 800123a:	f140 80cc 	bpl.w	80013d6 <HAL_PCD_IRQHandler+0x1e6>
 800123e:	e0be      	b.n	80013be <HAL_PCD_IRQHandler+0x1ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001240:	6820      	ldr	r0, [r4, #0]
 8001242:	f8df b394 	ldr.w	fp, [pc, #916]	; 80015d8 <HAL_PCD_IRQHandler+0x3e8>
 8001246:	f001 f818 	bl	800227a <USB_ReadDevAllOutEpInterrupt>
 800124a:	f505 6630 	add.w	r6, r5, #2816	; 0xb00
 800124e:	4682      	mov	sl, r0
 8001250:	46a0      	mov	r8, r4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 8001252:	2700      	movs	r7, #0

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);

      while (ep_intr != 0U)
 8001254:	f1ba 0f00 	cmp.w	sl, #0
 8001258:	d0eb      	beq.n	8001232 <HAL_PCD_IRQHandler+0x42>
      {
        if ((ep_intr & 0x1U) != 0U)
 800125a:	f01a 0f01 	tst.w	sl, #1
 800125e:	f000 80a7 	beq.w	80013b0 <HAL_PCD_IRQHandler+0x1c0>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001262:	b2fa      	uxtb	r2, r7
 8001264:	4611      	mov	r1, r2
 8001266:	6820      	ldr	r0, [r4, #0]
 8001268:	9203      	str	r2, [sp, #12]
 800126a:	f001 f816 	bl	800229a <USB_ReadDevOutEPInterrupt>

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800126e:	f010 0f01 	tst.w	r0, #1

      while (ep_intr != 0U)
      {
        if ((ep_intr & 0x1U) != 0U)
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001272:	4681      	mov	r9, r0

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001274:	9a03      	ldr	r2, [sp, #12]
 8001276:	d05a      	beq.n	800132e <HAL_PCD_IRQHandler+0x13e>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001278:	2301      	movs	r3, #1
 800127a:	60b3      	str	r3, [r6, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800127c:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 800127e:	6920      	ldr	r0, [r4, #16]
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001280:	f8d3 e040 	ldr.w	lr, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001288:	eb03 1347 	add.w	r3, r3, r7, lsl #5

  if (hpcd->Init.dma_enable == 1U)
 800128c:	2801      	cmp	r0, #1
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800128e:	6899      	ldr	r1, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001290:	d13c      	bne.n	800130c <HAL_PCD_IRQHandler+0x11c>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001292:	0708      	lsls	r0, r1, #28
 8001294:	d513      	bpl.n	80012be <HAL_PCD_IRQHandler+0xce>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001296:	45de      	cmp	lr, fp
 8001298:	d904      	bls.n	80012a4 <HAL_PCD_IRQHandler+0xb4>
 800129a:	040a      	lsls	r2, r1, #16
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800129c:	bf44      	itt	mi
 800129e:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 80012a2:	609a      	strmi	r2, [r3, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80012a4:	4620      	mov	r0, r4
 80012a6:	9303      	str	r3, [sp, #12]
 80012a8:	f7ff fbc0 	bl	8000a2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80012ac:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80012b0:	2101      	movs	r1, #1
 80012b2:	6820      	ldr	r0, [r4, #0]
 80012b4:	f001 f82c 	bl	8002310 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012b8:	2208      	movs	r2, #8
 80012ba:	9b03      	ldr	r3, [sp, #12]
 80012bc:	e02d      	b.n	800131a <HAL_PCD_IRQHandler+0x12a>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80012be:	0688      	lsls	r0, r1, #26
 80012c0:	d501      	bpl.n	80012c6 <HAL_PCD_IRQHandler+0xd6>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012c2:	2220      	movs	r2, #32
 80012c4:	e029      	b.n	800131a <HAL_PCD_IRQHandler+0x12a>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80012c6:	f011 0f28 	tst.w	r1, #40	; 0x28
 80012ca:	d130      	bne.n	800132e <HAL_PCD_IRQHandler+0x13e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80012cc:	45de      	cmp	lr, fp
 80012ce:	d901      	bls.n	80012d4 <HAL_PCD_IRQHandler+0xe4>
 80012d0:	0409      	lsls	r1, r1, #16
 80012d2:	d420      	bmi.n	8001316 <HAL_PCD_IRQHandler+0x126>
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80012d4:	691b      	ldr	r3, [r3, #16]
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80012d6:	f8d8 1204 	ldr.w	r1, [r8, #516]	; 0x204
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
 80012da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012de:	1acb      	subs	r3, r1, r3
 80012e0:	f8c8 3214 	str.w	r3, [r8, #532]	; 0x214
          hpcd->OUT_ep[epnum].maxpacket -
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80012e4:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 80012e8:	4419      	add	r1, r3
 80012ea:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80012ee:	4620      	mov	r0, r4
 80012f0:	4611      	mov	r1, r2
 80012f2:	f7ff fba1 	bl	8000a38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80012f6:	b9d7      	cbnz	r7, 800132e <HAL_PCD_IRQHandler+0x13e>
 80012f8:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80012fc:	b9bb      	cbnz	r3, 800132e <HAL_PCD_IRQHandler+0x13e>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80012fe:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001302:	2101      	movs	r1, #1
 8001304:	6820      	ldr	r0, [r4, #0]
 8001306:	f001 f803 	bl	8002310 <USB_EP0_OutStart>
 800130a:	e010      	b.n	800132e <HAL_PCD_IRQHandler+0x13e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800130c:	48b1      	ldr	r0, [pc, #708]	; (80015d4 <HAL_PCD_IRQHandler+0x3e4>)
 800130e:	4586      	cmp	lr, r0
 8001310:	d109      	bne.n	8001326 <HAL_PCD_IRQHandler+0x136>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001312:	0408      	lsls	r0, r1, #16
 8001314:	d503      	bpl.n	800131e <HAL_PCD_IRQHandler+0x12e>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001316:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	e007      	b.n	800132e <HAL_PCD_IRQHandler+0x13e>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800131e:	0688      	lsls	r0, r1, #26
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001320:	bf44      	itt	mi
 8001322:	2120      	movmi	r1, #32
 8001324:	6099      	strmi	r1, [r3, #8]
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001326:	4611      	mov	r1, r2
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff fb85 	bl	8000a38 <HAL_PCD_DataOutStageCallback>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800132e:	f019 0f08 	tst.w	r9, #8
 8001332:	d025      	beq.n	8001380 <HAL_PCD_IRQHandler+0x190>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001334:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8001336:	6920      	ldr	r0, [r4, #16]
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800133a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133e:	eb03 1347 	add.w	r3, r3, r7, lsl #5

  if (hpcd->Init.dma_enable == 1U)
 8001342:	2801      	cmp	r0, #1
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001344:	6899      	ldr	r1, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001346:	d102      	bne.n	800134e <HAL_PCD_IRQHandler+0x15e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001348:	455a      	cmp	r2, fp
 800134a:	d908      	bls.n	800135e <HAL_PCD_IRQHandler+0x16e>
 800134c:	e002      	b.n	8001354 <HAL_PCD_IRQHandler+0x164>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800134e:	48a1      	ldr	r0, [pc, #644]	; (80015d4 <HAL_PCD_IRQHandler+0x3e4>)
 8001350:	4282      	cmp	r2, r0
 8001352:	d104      	bne.n	800135e <HAL_PCD_IRQHandler+0x16e>
 8001354:	0409      	lsls	r1, r1, #16
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001356:	bf44      	itt	mi
 8001358:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 800135c:	6099      	strmi	r1, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800135e:	4620      	mov	r0, r4
 8001360:	9203      	str	r2, [sp, #12]
 8001362:	f7ff fb63 	bl	8000a2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001366:	9a03      	ldr	r2, [sp, #12]
 8001368:	455a      	cmp	r2, fp
 800136a:	d907      	bls.n	800137c <HAL_PCD_IRQHandler+0x18c>
 800136c:	6921      	ldr	r1, [r4, #16]
 800136e:	2901      	cmp	r1, #1
 8001370:	d104      	bne.n	800137c <HAL_PCD_IRQHandler+0x18c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001372:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001376:	6820      	ldr	r0, [r4, #0]
 8001378:	f000 ffca 	bl	8002310 <USB_EP0_OutStart>

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800137c:	2308      	movs	r3, #8
 800137e:	60b3      	str	r3, [r6, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001380:	f019 0f10 	tst.w	r9, #16
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001384:	bf1c      	itt	ne
 8001386:	2310      	movne	r3, #16
 8001388:	60b3      	strne	r3, [r6, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800138a:	f019 0f20 	tst.w	r9, #32
 800138e:	d009      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x1b4>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001390:	6921      	ldr	r1, [r4, #16]
 8001392:	2901      	cmp	r1, #1
 8001394:	d104      	bne.n	80013a0 <HAL_PCD_IRQHandler+0x1b0>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001396:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800139a:	6820      	ldr	r0, [r4, #0]
 800139c:	f000 ffb8 	bl	8002310 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013a0:	2320      	movs	r3, #32
 80013a2:	60b3      	str	r3, [r6, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013a4:	f419 5f00 	tst.w	r9, #8192	; 0x2000
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013a8:	bf1c      	itt	ne
 80013aa:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 80013ae:	60b3      	strne	r3, [r6, #8]
          }
        }
        epnum++;
 80013b0:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 80013b2:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80013b6:	3620      	adds	r6, #32
 80013b8:	f108 081c 	add.w	r8, r8, #28
 80013bc:	e74a      	b.n	8001254 <HAL_PCD_IRQHandler+0x64>
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013be:	6820      	ldr	r0, [r4, #0]
 80013c0:	f000 ff63 	bl	800228a <USB_ReadDevAllInEpInterrupt>
 80013c4:	4626      	mov	r6, r4
 80013c6:	4683      	mov	fp, r0
 80013c8:	f505 6910 	add.w	r9, r5, #2304	; 0x900

      epnum = 0U;
 80013cc:	f04f 0800 	mov.w	r8, #0

      while (ep_intr != 0U)
 80013d0:	f1bb 0f00 	cmp.w	fp, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_PCD_IRQHandler+0x1f4>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80013d6:	6820      	ldr	r0, [r4, #0]
 80013d8:	f000 ff4b 	bl	8002272 <USB_ReadInterrupts>
 80013dc:	2800      	cmp	r0, #0
 80013de:	f280 80af 	bge.w	8001540 <HAL_PCD_IRQHandler+0x350>
 80013e2:	e094      	b.n	800150e <HAL_PCD_IRQHandler+0x31e>

      epnum = 0U;

      while (ep_intr != 0U)
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013e4:	f01b 0f01 	tst.w	fp, #1
 80013e8:	f000 8089 	beq.w	80014fe <HAL_PCD_IRQHandler+0x30e>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ec:	fa5f fa88 	uxtb.w	sl, r8
 80013f0:	4651      	mov	r1, sl
 80013f2:	6820      	ldr	r0, [r4, #0]
 80013f4:	f000 ff5a 	bl	80022ac <USB_ReadDevInEPInterrupt>

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013f8:	07c3      	lsls	r3, r0, #31

      while (ep_intr != 0U)
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013fa:	4607      	mov	r7, r0

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013fc:	d524      	bpl.n	8001448 <HAL_PCD_IRQHandler+0x258>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013fe:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
 8001402:	2001      	movs	r0, #1
 8001404:	f008 030f 	and.w	r3, r8, #15
 8001408:	fa00 f303 	lsl.w	r3, r0, r3
 800140c:	ea22 0303 	bic.w	r3, r2, r3
 8001410:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);

            if (hpcd->Init.dma_enable == 1U)
 8001414:	6923      	ldr	r3, [r4, #16]
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001416:	f8c9 0008 	str.w	r0, [r9, #8]

            if (hpcd->Init.dma_enable == 1U)
 800141a:	4283      	cmp	r3, r0
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800141c:	bf01      	itttt	eq
 800141e:	6cb2      	ldreq	r2, [r6, #72]	; 0x48
 8001420:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8001422:	189b      	addeq	r3, r3, r2
 8001424:	64b3      	streq	r3, [r6, #72]	; 0x48
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001426:	4651      	mov	r1, sl
 8001428:	4620      	mov	r0, r4
 800142a:	f7ff fb0e 	bl	8000a4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800142e:	6921      	ldr	r1, [r4, #16]
 8001430:	2901      	cmp	r1, #1
 8001432:	d109      	bne.n	8001448 <HAL_PCD_IRQHandler+0x258>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001434:	f1b8 0f00 	cmp.w	r8, #0
 8001438:	d106      	bne.n	8001448 <HAL_PCD_IRQHandler+0x258>
 800143a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800143c:	b923      	cbnz	r3, 8001448 <HAL_PCD_IRQHandler+0x258>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800143e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001442:	6820      	ldr	r0, [r4, #0]
 8001444:	f000 ff64 	bl	8002310 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001448:	0738      	lsls	r0, r7, #28
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800144a:	bf44      	itt	mi
 800144c:	2308      	movmi	r3, #8
 800144e:	f8c9 3008 	strmi.w	r3, [r9, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001452:	06f9      	lsls	r1, r7, #27
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001454:	bf44      	itt	mi
 8001456:	2310      	movmi	r3, #16
 8001458:	f8c9 3008 	strmi.w	r3, [r9, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800145c:	067a      	lsls	r2, r7, #25
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800145e:	bf44      	itt	mi
 8001460:	2340      	movmi	r3, #64	; 0x40
 8001462:	f8c9 3008 	strmi.w	r3, [r9, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001466:	07bb      	lsls	r3, r7, #30
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001468:	bf44      	itt	mi
 800146a:	2302      	movmi	r3, #2
 800146c:	f8c9 3008 	strmi.w	r3, [r9, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001470:	063f      	lsls	r7, r7, #24
 8001472:	d544      	bpl.n	80014fe <HAL_PCD_IRQHandler+0x30e>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001474:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001476:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001478:	429a      	cmp	r2, r3
 800147a:	d840      	bhi.n	80014fe <HAL_PCD_IRQHandler+0x30e>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800147c:	1a9a      	subs	r2, r3, r2

  if (len > ep->maxpacket)
 800147e:	6c73      	ldr	r3, [r6, #68]	; 0x44
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001480:	6821      	ldr	r1, [r4, #0]
 8001482:	9103      	str	r1, [sp, #12]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001484:	4293      	cmp	r3, r2
 8001486:	bf28      	it	cs
 8001488:	4613      	movcs	r3, r2
 800148a:	3303      	adds	r3, #3
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	9304      	str	r3, [sp, #16]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001490:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 8001494:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8001498:	9305      	str	r3, [sp, #20]
 800149a:	9b05      	ldr	r3, [sp, #20]
 800149c:	9a04      	ldr	r2, [sp, #16]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	6d77      	ldr	r7, [r6, #84]	; 0x54
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4293      	cmp	r3, r2
 80014a6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80014a8:	d319      	bcc.n	80014de <HAL_PCD_IRQHandler+0x2ee>
 80014aa:	42bb      	cmp	r3, r7
 80014ac:	d917      	bls.n	80014de <HAL_PCD_IRQHandler+0x2ee>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80014ae:	b1c3      	cbz	r3, 80014e2 <HAL_PCD_IRQHandler+0x2f2>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80014b0:	1bdb      	subs	r3, r3, r7

    if (len > ep->maxpacket)
 80014b2:	6c77      	ldr	r7, [r6, #68]	; 0x44
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80014b4:	9803      	ldr	r0, [sp, #12]
 80014b6:	429f      	cmp	r7, r3
 80014b8:	bf28      	it	cs
 80014ba:	461f      	movcs	r7, r3

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80014bc:	1cfb      	adds	r3, r7, #3
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	9304      	str	r3, [sp, #16]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80014c2:	7c23      	ldrb	r3, [r4, #16]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4652      	mov	r2, sl
 80014c8:	b2bb      	uxth	r3, r7
 80014ca:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80014cc:	f000 fd6c 	bl	8001fa8 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80014d0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80014d2:	443b      	add	r3, r7
 80014d4:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80014d6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80014d8:	441f      	add	r7, r3
 80014da:	6577      	str	r7, [r6, #84]	; 0x54
 80014dc:	e7dd      	b.n	800149a <HAL_PCD_IRQHandler+0x2aa>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80014de:	42bb      	cmp	r3, r7
 80014e0:	d80d      	bhi.n	80014fe <HAL_PCD_IRQHandler+0x30e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014e2:	9b03      	ldr	r3, [sp, #12]
 80014e4:	2101      	movs	r1, #1
 80014e6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80014ea:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 80014ee:	f008 030f 	and.w	r3, r8, #15
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	ea22 0303 	bic.w	r3, r2, r3
 80014fa:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
          }
        }
        epnum++;
 80014fe:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8001502:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8001506:	361c      	adds	r6, #28
 8001508:	f109 0920 	add.w	r9, r9, #32
 800150c:	e760      	b.n	80013d0 <HAL_PCD_IRQHandler+0x1e0>

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800150e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 800151a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800151e:	2b01      	cmp	r3, #1
 8001520:	d106      	bne.n	8001530 <HAL_PCD_IRQHandler+0x340>
      {
        hpcd->LPM_State = LPM_L0;
 8001522:	2100      	movs	r1, #0
 8001524:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001528:	4620      	mov	r0, r4
 800152a:	f000 fa5b 	bl	80019e4 <HAL_PCDEx_LPM_Callback>
 800152e:	e002      	b.n	8001536 <HAL_PCD_IRQHandler+0x346>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff fac1 	bl	8000ab8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001536:	6822      	ldr	r2, [r4, #0]
 8001538:	6953      	ldr	r3, [r2, #20]
 800153a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800153e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001540:	6820      	ldr	r0, [r4, #0]
 8001542:	f000 fe96 	bl	8002272 <USB_ReadInterrupts>
 8001546:	0500      	lsls	r0, r0, #20
 8001548:	d50b      	bpl.n	8001562 <HAL_PCD_IRQHandler+0x372>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800154a:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800154e:	07d9      	lsls	r1, r3, #31
 8001550:	d502      	bpl.n	8001558 <HAL_PCD_IRQHandler+0x368>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff fa98 	bl	8000a88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001558:	6822      	ldr	r2, [r4, #0]
 800155a:	6953      	ldr	r3, [r2, #20]
 800155c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001560:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001562:	6820      	ldr	r0, [r4, #0]
 8001564:	f000 fe85 	bl	8002272 <USB_ReadInterrupts>
 8001568:	04c2      	lsls	r2, r0, #19
 800156a:	d552      	bpl.n	8001612 <HAL_PCD_IRQHandler+0x422>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800156c:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8001570:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001572:	6820      	ldr	r0, [r4, #0]
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800157a:	2110      	movs	r1, #16
 800157c:	f000 fb24 	bl	8001bc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001580:	6867      	ldr	r7, [r4, #4]
 8001582:	f505 6310 	add.w	r3, r5, #2304	; 0x900
 8001586:	2200      	movs	r2, #0
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001588:	f64f 307f 	movw	r0, #64383	; 0xfb7f
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158c:	42ba      	cmp	r2, r7
 800158e:	d00f      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x3c0>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001590:	6098      	str	r0, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001592:	6819      	ldr	r1, [r3, #0]
 8001594:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8001598:	6019      	str	r1, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800159a:	f8c3 0208 	str.w	r0, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800159e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80015a2:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80015a6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015aa:	3201      	adds	r2, #1
 80015ac:	3320      	adds	r3, #32
 80015ae:	e7ed      	b.n	800158c <HAL_PCD_IRQHandler+0x39c>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015b0:	69f3      	ldr	r3, [r6, #28]
 80015b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015b6:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015ba:	b17b      	cbz	r3, 80015dc <HAL_PCD_IRQHandler+0x3ec>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015bc:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80015c0:	f043 030b 	orr.w	r3, r3, #11
 80015c4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015c8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80015ca:	f043 030b 	orr.w	r3, r3, #11
 80015ce:	6473      	str	r3, [r6, #68]	; 0x44
 80015d0:	e00e      	b.n	80015f0 <HAL_PCD_IRQHandler+0x400>
 80015d2:	bf00      	nop
 80015d4:	4f54310a 	.word	0x4f54310a
 80015d8:	4f54300a 	.word	0x4f54300a
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80015dc:	6973      	ldr	r3, [r6, #20]
 80015de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80015e6:	6173      	str	r3, [r6, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80015e8:	6933      	ldr	r3, [r6, #16]
 80015ea:	f043 030b 	orr.w	r3, r3, #11
 80015ee:	6133      	str	r3, [r6, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80015f0:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80015f4:	7c21      	ldrb	r1, [r4, #16]
 80015f6:	6820      	ldr	r0, [r4, #0]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80015f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80015fc:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001600:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001604:	f000 fe84 	bl	8002310 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001608:	6822      	ldr	r2, [r4, #0]
 800160a:	6953      	ldr	r3, [r2, #20]
 800160c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001610:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001612:	6820      	ldr	r0, [r4, #0]
 8001614:	f000 fe2d 	bl	8002272 <USB_ReadInterrupts>
 8001618:	0483      	lsls	r3, r0, #18
 800161a:	d516      	bpl.n	800164a <HAL_PCD_IRQHandler+0x45a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800161c:	6820      	ldr	r0, [r4, #0]
 800161e:	f000 fe5c 	bl	80022da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001622:	6820      	ldr	r0, [r4, #0]
 8001624:	f000 fbb8 	bl	8001d98 <USB_GetDevSpeed>
 8001628:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800162a:	6826      	ldr	r6, [r4, #0]
 800162c:	f001 f902 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8001630:	7b22      	ldrb	r2, [r4, #12]
 8001632:	4601      	mov	r1, r0
 8001634:	4630      	mov	r0, r6
 8001636:	f000 fa2f 	bl	8001a98 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800163a:	4620      	mov	r0, r4
 800163c:	f7ff fa11 	bl	8000a62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	6953      	ldr	r3, [r2, #20]
 8001644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001648:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800164a:	6820      	ldr	r0, [r4, #0]
 800164c:	f000 fe11 	bl	8002272 <USB_ReadInterrupts>
 8001650:	06c7      	lsls	r7, r0, #27
 8001652:	d537      	bpl.n	80016c4 <HAL_PCD_IRQHandler+0x4d4>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	6993      	ldr	r3, [r2, #24]
 8001658:	f023 0310 	bic.w	r3, r3, #16
 800165c:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 800165e:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001660:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8001664:	2b02      	cmp	r3, #2
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);

      temp = USBx->GRXSTSP;

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001666:	f006 080f 	and.w	r8, r6, #15

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800166a:	d114      	bne.n	8001696 <HAL_PCD_IRQHandler+0x4a6>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800166c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001670:	4033      	ands	r3, r6
 8001672:	b313      	cbz	r3, 80016ba <HAL_PCD_IRQHandler+0x4ca>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001674:	271c      	movs	r7, #28
 8001676:	fb07 4708 	mla	r7, r7, r8, r4
 800167a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800167e:	4632      	mov	r2, r6
 8001680:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8001684:	4628      	mov	r0, r5
 8001686:	f000 fd89 	bl	800219c <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800168a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800168e:	4433      	add	r3, r6
 8001690:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8001694:	e00c      	b.n	80016b0 <HAL_PCD_IRQHandler+0x4c0>
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001696:	2b06      	cmp	r3, #6
 8001698:	d10f      	bne.n	80016ba <HAL_PCD_IRQHandler+0x4ca>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800169a:	2208      	movs	r2, #8
 800169c:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80016a0:	4628      	mov	r0, r5
 80016a2:	f000 fd7b 	bl	800219c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016a6:	271c      	movs	r7, #28
 80016a8:	fb07 4708 	mla	r7, r7, r8, r4
 80016ac:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80016b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016b4:	441e      	add	r6, r3
 80016b6:	f8c7 6214 	str.w	r6, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ba:	6822      	ldr	r2, [r4, #0]
 80016bc:	6993      	ldr	r3, [r2, #24]
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016c4:	6820      	ldr	r0, [r4, #0]
 80016c6:	f000 fdd4 	bl	8002272 <USB_ReadInterrupts>
 80016ca:	0706      	lsls	r6, r0, #28
 80016cc:	d507      	bpl.n	80016de <HAL_PCD_IRQHandler+0x4ee>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff f9c3 	bl	8000a5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016d4:	6822      	ldr	r2, [r4, #0]
 80016d6:	6953      	ldr	r3, [r2, #20]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016de:	6820      	ldr	r0, [r4, #0]
 80016e0:	f000 fdc7 	bl	8002272 <USB_ReadInterrupts>
 80016e4:	02c5      	lsls	r5, r0, #11
 80016e6:	d508      	bpl.n	80016fa <HAL_PCD_IRQHandler+0x50a>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016e8:	2100      	movs	r1, #0
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff f9ec 	bl	8000ac8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80016f0:	6822      	ldr	r2, [r4, #0]
 80016f2:	6953      	ldr	r3, [r2, #20]
 80016f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016fa:	6820      	ldr	r0, [r4, #0]
 80016fc:	f000 fdb9 	bl	8002272 <USB_ReadInterrupts>
 8001700:	0280      	lsls	r0, r0, #10
 8001702:	d508      	bpl.n	8001716 <HAL_PCD_IRQHandler+0x526>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001704:	2100      	movs	r1, #0
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff f9da 	bl	8000ac0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	6953      	ldr	r3, [r2, #20]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001716:	6820      	ldr	r0, [r4, #0]
 8001718:	f000 fdab 	bl	8002272 <USB_ReadInterrupts>
 800171c:	0041      	lsls	r1, r0, #1
 800171e:	d507      	bpl.n	8001730 <HAL_PCD_IRQHandler+0x540>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff f9d5 	bl	8000ad0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	6953      	ldr	r3, [r2, #20]
 800172a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800172e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001730:	6820      	ldr	r0, [r4, #0]
 8001732:	f000 fd9e 	bl	8002272 <USB_ReadInterrupts>
 8001736:	0742      	lsls	r2, r0, #29
 8001738:	d50a      	bpl.n	8001750 <HAL_PCD_IRQHandler+0x560>
    {
      temp = hpcd->Instance->GOTGINT;
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800173e:	076b      	lsls	r3, r5, #29
 8001740:	d502      	bpl.n	8001748 <HAL_PCD_IRQHandler+0x558>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff f9c8 	bl	8000ad8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001748:	6822      	ldr	r2, [r4, #0]
 800174a:	6853      	ldr	r3, [r2, #4]
 800174c:	432b      	orrs	r3, r5
 800174e:	6053      	str	r3, [r2, #4]
    }
  }
}
 8001750:	b007      	add	sp, #28
 8001752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001756:	bf00      	nop

08001758 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001758:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800175c:	2a01      	cmp	r2, #1
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800175e:	b510      	push	{r4, lr}
 8001760:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001762:	d00b      	beq.n	800177c <HAL_PCD_SetAddress+0x24>
 8001764:	2201      	movs	r2, #1
 8001766:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800176a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800176e:	6800      	ldr	r0, [r0, #0]
 8001770:	f000 fd57 	bl	8002222 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001774:	2000      	movs	r0, #0
 8001776:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800177a:	bd10      	pop	{r4, pc}
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800177c:	2002      	movs	r0, #2
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 800177e:	bd10      	pop	{r4, pc}

08001780 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001780:	b570      	push	{r4, r5, r6, lr}
 8001782:	4605      	mov	r5, r0
 8001784:	f001 040f 	and.w	r4, r1, #15
 8001788:	201c      	movs	r0, #28
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800178a:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800178e:	fb00 f004 	mul.w	r0, r0, r4
 8001792:	eb05 0100 	add.w	r1, r5, r0
    ep->is_in = 1U;
 8001796:	bf15      	itete	ne
 8001798:	1940      	addne	r0, r0, r5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 800179a:	1940      	addeq	r0, r0, r5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800179c:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800179e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 80017a2:	bf15      	itete	ne
 80017a4:	2601      	movne	r6, #1
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 80017a6:	2600      	moveq	r6, #0
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 80017a8:	f880 603d 	strbne.w	r6, [r0, #61]	; 0x3d
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 80017ac:	f880 61fd 	strbeq.w	r6, [r0, #509]	; 0x1fd
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80017b0:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80017b2:	784a      	ldrb	r2, [r1, #1]
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80017b4:	70cb      	strb	r3, [r1, #3]
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017b6:	b2e4      	uxtb	r4, r4
 80017b8:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80017ba:	b102      	cbz	r2, 80017be <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017bc:	80cc      	strh	r4, [r1, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017be:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80017c0:	bf04      	itt	eq
 80017c2:	2300      	moveq	r3, #0
 80017c4:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80017c6:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d009      	beq.n	80017e2 <HAL_PCD_EP_Open+0x62>
 80017ce:	2301      	movs	r3, #1
 80017d0:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017d4:	6828      	ldr	r0, [r5, #0]
 80017d6:	f000 faeb 	bl	8001db0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017da:	2000      	movs	r0, #0
 80017dc:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc

  return ret;
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
  if (ep_type == EP_TYPE_BULK)
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 80017e2:	2002      	movs	r0, #2
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return ret;
}
 80017e4:	bd70      	pop	{r4, r5, r6, pc}

080017e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017e6:	f001 020f 	and.w	r2, r1, #15
 80017ea:	231c      	movs	r3, #28
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ec:	4353      	muls	r3, r2
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017ee:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017f2:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f4:	eb00 0103 	add.w	r1, r0, r3
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017f8:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 80017fa:	bf15      	itete	ne
 80017fc:	181b      	addne	r3, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 80017fe:	191b      	addeq	r3, r3, r4
{
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001800:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001802:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 8001806:	bf15      	itete	ne
 8001808:	2001      	movne	r0, #1
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 800180a:	2000      	moveq	r0, #0
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 800180c:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001810:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001814:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8001816:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800181a:	2b01      	cmp	r3, #1
 800181c:	d009      	beq.n	8001832 <HAL_PCD_EP_Close+0x4c>
 800181e:	2301      	movs	r3, #1
 8001820:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001824:	6820      	ldr	r0, [r4, #0]
 8001826:	f000 fb05 	bl	8001e34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800182a:	2000      	movs	r0, #0
 800182c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001830:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001832:	2002      	movs	r0, #2
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001834:	bd10      	pop	{r4, pc}

08001836 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001836:	b538      	push	{r3, r4, r5, lr}
 8001838:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800183c:	241c      	movs	r4, #28
 800183e:	436c      	muls	r4, r5
 8001840:	1901      	adds	r1, r0, r4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001842:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001844:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
 8001848:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800184c:	2300      	movs	r3, #0
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800184e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001852:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001856:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800185a:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc

  if (hpcd->Init.dma_enable == 1U)
 800185e:	6903      	ldr	r3, [r0, #16]
 8001860:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001862:	bf08      	it	eq
 8001864:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001868:	6800      	ldr	r0, [r0, #0]
 800186a:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800186c:	b915      	cbnz	r5, 8001874 <HAL_PCD_EP_Receive+0x3e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800186e:	f000 fb1d 	bl	8001eac <USB_EP0StartXfer>
 8001872:	e001      	b.n	8001878 <HAL_PCD_EP_Receive+0x42>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001874:	f000 fbac 	bl	8001fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001878:	2000      	movs	r0, #0
 800187a:	bd38      	pop	{r3, r4, r5, pc}

0800187c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800187c:	f001 010f 	and.w	r1, r1, #15
 8001880:	231c      	movs	r3, #28
 8001882:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001886:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 800188a:	4770      	bx	lr

0800188c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001892:	241c      	movs	r4, #28
 8001894:	436c      	muls	r4, r5
 8001896:	1901      	adds	r1, r0, r4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001898:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800189a:	313c      	adds	r1, #60	; 0x3c

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
 800189c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80018a2:	2301      	movs	r3, #1
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018a4:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 80018a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80018aa:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c

  if (hpcd->Init.dma_enable == 1U)
 80018ae:	6903      	ldr	r3, [r0, #16]
 80018b0:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
 80018b2:	bf08      	it	eq
 80018b4:	64e2      	streq	r2, [r4, #76]	; 0x4c
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018b6:	6800      	ldr	r0, [r0, #0]
 80018b8:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018ba:	b915      	cbnz	r5, 80018c2 <HAL_PCD_EP_Transmit+0x36>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018bc:	f000 faf6 	bl	8001eac <USB_EP0StartXfer>
 80018c0:	e001      	b.n	80018c6 <HAL_PCD_EP_Transmit+0x3a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018c2:	f000 fb85 	bl	8001fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80018c6:	2000      	movs	r0, #0
 80018c8:	bd38      	pop	{r3, r4, r5, pc}

080018ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018cc:	6843      	ldr	r3, [r0, #4]
 80018ce:	f001 050f 	and.w	r5, r1, #15
 80018d2:	429d      	cmp	r5, r3
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d4:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018d6:	d82b      	bhi.n	8001930 <HAL_PCD_EP_SetStall+0x66>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018d8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80018dc:	f04f 031c 	mov.w	r3, #28
 80018e0:	d007      	beq.n	80018f2 <HAL_PCD_EP_SetStall+0x28>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e2:	436b      	muls	r3, r5
 80018e4:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 80018e6:	4403      	add	r3, r0
 80018e8:	2201      	movs	r2, #1
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ea:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80018f0:	e007      	b.n	8001902 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018f2:	434b      	muls	r3, r1
 80018f4:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 80018f6:	4403      	add	r3, r0
 80018f8:	2200      	movs	r2, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018fa:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80018fe:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  }

  ep->is_stall = 1U;
 8001902:	2301      	movs	r3, #1
 8001904:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001906:	700d      	strb	r5, [r1, #0]

  __HAL_LOCK(hpcd);
 8001908:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800190c:	429a      	cmp	r2, r3
 800190e:	d011      	beq.n	8001934 <HAL_PCD_EP_SetStall+0x6a>
 8001910:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001914:	6820      	ldr	r0, [r4, #0]
 8001916:	f000 fc4f 	bl	80021b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800191a:	b92d      	cbnz	r5, 8001928 <HAL_PCD_EP_SetStall+0x5e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800191c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001920:	7c21      	ldrb	r1, [r4, #16]
 8001922:	6820      	ldr	r0, [r4, #0]
 8001924:	f000 fcf4 	bl	8002310 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001928:	2000      	movs	r0, #0
 800192a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 800192e:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001930:	2001      	movs	r0, #1
 8001932:	bd38      	pop	{r3, r4, r5, pc}
  }

  ep->is_stall = 1U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001934:	2002      	movs	r0, #2
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001936:	bd38      	pop	{r3, r4, r5, pc}

08001938 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001938:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800193a:	6843      	ldr	r3, [r0, #4]
 800193c:	f001 020f 	and.w	r2, r1, #15
 8001940:	429a      	cmp	r2, r3
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001942:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001944:	d825      	bhi.n	8001992 <HAL_PCD_EP_ClrStall+0x5a>
 8001946:	231c      	movs	r3, #28
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001948:	4353      	muls	r3, r2
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 800194a:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800194e:	eb00 0103 	add.w	r1, r0, r3
 8001952:	bf19      	ittee	ne
 8001954:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001956:	181b      	addne	r3, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001958:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800195c:	191b      	addeq	r3, r3, r4
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 800195e:	bf14      	ite	ne
 8001960:	2001      	movne	r0, #1
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001962:	2000      	moveq	r0, #0
  }

  ep->is_stall = 0U;
 8001964:	f04f 0500 	mov.w	r5, #0
  }

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 8001968:	bf14      	ite	ne
 800196a:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 800196e:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  }

  ep->is_stall = 0U;
 8001972:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001974:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8001976:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800197a:	2b01      	cmp	r3, #1
 800197c:	d00b      	beq.n	8001996 <HAL_PCD_EP_ClrStall+0x5e>
 800197e:	2301      	movs	r3, #1
 8001980:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	f000 fc32 	bl	80021ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800198a:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc

  return HAL_OK;
 800198e:	4628      	mov	r0, r5
 8001990:	bd38      	pop	{r3, r4, r5, pc}
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
  {
    return HAL_ERROR;
 8001992:	2001      	movs	r0, #1
 8001994:	bd38      	pop	{r3, r4, r5, pc}
  }

  ep->is_stall = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8001996:	2002      	movs	r0, #2
  (void)USB_EPClearStall(hpcd->Instance, ep);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8001998:	bd38      	pop	{r3, r4, r5, pc}

0800199a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800199a:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800199c:	6804      	ldr	r4, [r0, #0]
 800199e:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 80019a0:	b919      	cbnz	r1, 80019aa <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80019a2:	ea40 4302 	orr.w	r3, r0, r2, lsl #16
 80019a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80019a8:	e016      	b.n	80019d8 <HAL_PCDEx_SetTxFiFo+0x3e>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80019aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80019ac:	2500      	movs	r5, #0
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80019ae:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80019b2:	1e4e      	subs	r6, r1, #1
 80019b4:	b2e8      	uxtb	r0, r5
 80019b6:	4286      	cmp	r6, r0
 80019b8:	f105 0501 	add.w	r5, r5, #1
 80019bc:	d906      	bls.n	80019cc <HAL_PCDEx_SetTxFiFo+0x32>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80019be:	3040      	adds	r0, #64	; 0x40
 80019c0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80019c4:	6840      	ldr	r0, [r0, #4]
 80019c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80019ca:	e7f3      	b.n	80019b4 <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80019cc:	313f      	adds	r1, #63	; 0x3f
 80019ce:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80019d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019d6:	6063      	str	r3, [r4, #4]
  }

  return HAL_OK;
}
 80019d8:	2000      	movs	r0, #0
 80019da:	bd70      	pop	{r4, r5, r6, pc}

080019dc <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80019dc:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80019de:	2000      	movs	r0, #0
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80019e0:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80019e2:	4770      	bx	lr

080019e4 <HAL_PCDEx_LPM_Callback>:
 80019e4:	4770      	bx	lr
	...

080019e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80019ea:	3b01      	subs	r3, #1
 80019ec:	d101      	bne.n	80019f2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80019ee:	2003      	movs	r0, #3
 80019f0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80019f2:	6902      	ldr	r2, [r0, #16]
 80019f4:	2a00      	cmp	r2, #0
 80019f6:	daf8      	bge.n	80019ea <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80019f8:	6903      	ldr	r3, [r0, #16]
 80019fa:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <USB_CoreReset+0x2c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001a02:	3a01      	subs	r2, #1
 8001a04:	d0f3      	beq.n	80019ee <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001a06:	6903      	ldr	r3, [r0, #16]
 8001a08:	f013 0301 	ands.w	r3, r3, #1
 8001a0c:	d1f9      	bne.n	8001a02 <USB_CoreReset+0x1a>

  return HAL_OK;
 8001a0e:	4618      	mov	r0, r3
}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	00030d41 	.word	0x00030d41

08001a18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001a18:	b084      	sub	sp, #16
 8001a1a:	b538      	push	{r3, r4, r5, lr}
 8001a1c:	ad05      	add	r5, sp, #20
 8001a1e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a24:	2b01      	cmp	r3, #1
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001a26:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001a28:	d117      	bne.n	8001a5a <USB_CoreInit+0x42>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001a2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a30:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001a32:	68c3      	ldr	r3, [r0, #12]
 8001a34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a3c:	60c3      	str	r3, [r0, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001a3e:	68c3      	ldr	r3, [r0, #12]
 8001a40:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001a44:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001a48:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001a4a:	bf02      	ittt	eq
 8001a4c:	68c3      	ldreq	r3, [r0, #12]
 8001a4e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001a52:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8001a54:	f7ff ffc8 	bl	80019e8 <USB_CoreReset>
 8001a58:	e00f      	b.n	8001a7a <USB_CoreInit+0x62>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001a5a:	68c3      	ldr	r3, [r0, #12]
 8001a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a60:	60c3      	str	r3, [r0, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8001a62:	f7ff ffc1 	bl	80019e8 <USB_CoreReset>

    if (cfg.battery_charging_enable == 0U)
 8001a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a68:	b91b      	cbnz	r3, 8001a72 <USB_CoreInit+0x5a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	e002      	b.n	8001a78 <USB_CoreInit+0x60>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8001a7a:	9b08      	ldr	r3, [sp, #32]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <USB_CoreInit+0x78>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001a80:	68a3      	ldr	r3, [r4, #8]
 8001a82:	f043 0306 	orr.w	r3, r3, #6
 8001a86:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001a88:	68a3      	ldr	r3, [r4, #8]
 8001a8a:	f043 0320 	orr.w	r3, r3, #32
 8001a8e:	60a3      	str	r3, [r4, #8]
  }

  return ret;
}
 8001a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a94:	b004      	add	sp, #16
 8001a96:	4770      	bx	lr

08001a98 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8001a98:	2a02      	cmp	r2, #2
 8001a9a:	d14f      	bne.n	8001b3c <USB_SetTurnaroundTime+0xa4>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <USB_SetTurnaroundTime+0xc0>)
 8001a9e:	4a2f      	ldr	r2, [pc, #188]	; (8001b5c <USB_SetTurnaroundTime+0xc4>)
 8001aa0:	440b      	add	r3, r1
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d93e      	bls.n	8001b24 <USB_SetTurnaroundTime+0x8c>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <USB_SetTurnaroundTime+0xc8>)
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <USB_SetTurnaroundTime+0xcc>)
 8001aaa:	440b      	add	r3, r1
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d93b      	bls.n	8001b28 <USB_SetTurnaroundTime+0x90>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8001ab0:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8001ab4:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <USB_SetTurnaroundTime+0xd0>)
 8001ab6:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d936      	bls.n	8001b2c <USB_SetTurnaroundTime+0x94>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8001abe:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8001ac2:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8001ac6:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8001aca:	32a0      	adds	r2, #160	; 0xa0
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d92f      	bls.n	8001b30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <USB_SetTurnaroundTime+0xd4>)
 8001ad2:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <USB_SetTurnaroundTime+0xd8>)
 8001ad4:	440b      	add	r3, r1
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d92c      	bls.n	8001b34 <USB_SetTurnaroundTime+0x9c>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <USB_SetTurnaroundTime+0xdc>)
 8001adc:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8001ae0:	440b      	add	r3, r1
 8001ae2:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d926      	bls.n	8001b38 <USB_SetTurnaroundTime+0xa0>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <USB_SetTurnaroundTime+0xe0>)
 8001aec:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8001af0:	440b      	add	r3, r1
 8001af2:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d920      	bls.n	8001b3c <USB_SetTurnaroundTime+0xa4>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8001afa:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8001afe:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8001b02:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8001b06:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d918      	bls.n	8001b40 <USB_SetTurnaroundTime+0xa8>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x7U;
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8001b10:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001b14:	440b      	add	r3, r1
      UsbTrd = 0x7U;
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8001b16:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	bf94      	ite	ls
 8001b1e:	2307      	movls	r3, #7
 8001b20:	2306      	movhi	r3, #6
 8001b22:	e00e      	b.n	8001b42 <USB_SetTurnaroundTime+0xaa>
  if (speed == USBD_FS_SPEED)
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8001b24:	230f      	movs	r3, #15
 8001b26:	e00c      	b.n	8001b42 <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8001b28:	230e      	movs	r3, #14
 8001b2a:	e00a      	b.n	8001b42 <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8001b2c:	230d      	movs	r3, #13
 8001b2e:	e008      	b.n	8001b42 <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8001b30:	230c      	movs	r3, #12
 8001b32:	e006      	b.n	8001b42 <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8001b34:	230b      	movs	r3, #11
 8001b36:	e004      	b.n	8001b42 <USB_SetTurnaroundTime+0xaa>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8001b38:	230a      	movs	r3, #10
 8001b3a:	e002      	b.n	8001b42 <USB_SetTurnaroundTime+0xaa>
      UsbTrd = 0x6U;
    }
  }
  else if (speed == USBD_HS_SPEED)
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8001b3c:	2309      	movs	r3, #9
 8001b3e:	e000      	b.n	8001b42 <USB_SetTurnaroundTime+0xaa>
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8001b40:	2308      	movs	r3, #8
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001b42:	68c2      	ldr	r2, [r0, #12]
 8001b44:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001b48:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8001b4a:	68c2      	ldr	r2, [r0, #12]
 8001b4c:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8001b50:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8001b52:	2000      	movs	r0, #0
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	ff275340 	.word	0xff275340
 8001b5c:	000c34ff 	.word	0x000c34ff
 8001b60:	ff1b1e40 	.word	0xff1b1e40
 8001b64:	000f423f 	.word	0x000f423f
 8001b68:	00124f7f 	.word	0x00124f7f
 8001b6c:	fee5b660 	.word	0xfee5b660
 8001b70:	0016e35f 	.word	0x0016e35f
 8001b74:	feced300 	.word	0xfeced300
 8001b78:	feb35bc0 	.word	0xfeb35bc0
 8001b7c:	fe5954e0 	.word	0xfe5954e0

08001b80 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001b80:	6883      	ldr	r3, [r0, #8]
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001b88:	2000      	movs	r0, #0
 8001b8a:	4770      	bx	lr

08001b8c <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001b8c:	6883      	ldr	r3, [r0, #8]
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001b94:	2000      	movs	r0, #0
 8001b96:	4770      	bx	lr

08001b98 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001b98:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b9a:	68c3      	ldr	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 8001b9c:	2901      	cmp	r1, #1
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b9e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001ba2:	60c3      	str	r3, [r0, #12]

  if (mode == USB_HOST_MODE)
 8001ba4:	d103      	bne.n	8001bae <USB_SetCurrentMode+0x16>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001ba6:	68c3      	ldr	r3, [r0, #12]
 8001ba8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bac:	e003      	b.n	8001bb6 <USB_SetCurrentMode+0x1e>
  }
  else if (mode == USB_DEVICE_MODE)
 8001bae:	b941      	cbnz	r1, 8001bc2 <USB_SetCurrentMode+0x2a>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001bb0:	68c3      	ldr	r3, [r0, #12]
 8001bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bb6:	60c3      	str	r3, [r0, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  HAL_Delay(50U);
 8001bb8:	2032      	movs	r0, #50	; 0x32
 8001bba:	f001 f915 	bl	8002de8 <HAL_Delay>

  return HAL_OK;
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	bd08      	pop	{r3, pc}
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
  }
  else
  {
    return HAL_ERROR;
 8001bc2:	2001      	movs	r0, #1
  }
  HAL_Delay(50U);

  return HAL_OK;
}
 8001bc4:	bd08      	pop	{r3, pc}
	...

08001bc8 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001bc8:	0189      	lsls	r1, r1, #6
 8001bca:	f041 0120 	orr.w	r1, r1, #32
 8001bce:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <USB_FlushTxFifo+0x20>)
 8001bd0:	6101      	str	r1, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001bd2:	3a01      	subs	r2, #1
 8001bd4:	d005      	beq.n	8001be2 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001bd6:	6903      	ldr	r3, [r0, #16]
 8001bd8:	f013 0320 	ands.w	r3, r3, #32
 8001bdc:	d1f9      	bne.n	8001bd2 <USB_FlushTxFifo+0xa>

  return HAL_OK;
 8001bde:	4618      	mov	r0, r3
 8001be0:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001be2:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);

  return HAL_OK;
}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	00030d41 	.word	0x00030d41

08001bec <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001bec:	2310      	movs	r3, #16
 8001bee:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <USB_FlushRxFifo+0x1c>)
 8001bf0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001bf2:	3a01      	subs	r2, #1
 8001bf4:	d005      	beq.n	8001c02 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001bf6:	6903      	ldr	r3, [r0, #16]
 8001bf8:	f013 0310 	ands.w	r3, r3, #16
 8001bfc:	d1f9      	bne.n	8001bf2 <USB_FlushRxFifo+0x6>

  return HAL_OK;
 8001bfe:	4618      	mov	r0, r3
 8001c00:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8001c02:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);

  return HAL_OK;
}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	00030d41 	.word	0x00030d41

08001c0c <USB_SetDevSpeed>:
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG |= speed;
 8001c0c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001c10:	4319      	orrs	r1, r3
 8001c12:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001c16:	2000      	movs	r0, #0
 8001c18:	4770      	bx	lr
	...

08001c1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c22:	4604      	mov	r4, r0
 8001c24:	a809      	add	r0, sp, #36	; 0x24
 8001c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001c2e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8001c30:	4688      	mov	r8, r1
  {
    USBx->DIEPTXF[i] = 0U;
 8001c32:	4619      	mov	r1, r3
 8001c34:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001c38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	2b0f      	cmp	r3, #15
  {
    USBx->DIEPTXF[i] = 0U;
 8001c40:	6051      	str	r1, [r2, #4]
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001c42:	d1f7      	bne.n	8001c34 <USB_DevInit+0x18>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8001c44:	b95e      	cbnz	r6, 8001c5e <USB_DevInit+0x42>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001c46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c50:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c54:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001c56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5c:	e006      	b.n	8001c6c <USB_DevInit+0x50>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c64:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c6c:	63a3      	str	r3, [r4, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001c74:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001c78:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c7e:	2b01      	cmp	r3, #1

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001c80:	f504 6500 	add.w	r5, r4, #2048	; 0x800

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c84:	d103      	bne.n	8001c8e <USB_DevInit+0x72>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8001c86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001c88:	b111      	cbz	r1, 8001c90 <USB_DevInit+0x74>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	e000      	b.n	8001c90 <USB_DevInit+0x74>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001c8e:	2103      	movs	r1, #3
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7ff ffbb 	bl	8001c0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001c96:	2110      	movs	r1, #16
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f7ff ff95 	bl	8001bc8 <USB_FlushTxFifo>
 8001c9e:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff ffa3 	bl	8001bec <USB_FlushRxFifo>
 8001ca6:	b918      	cbnz	r0, 8001cb0 <USB_DevInit+0x94>
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret = HAL_OK;
 8001ca8:	1c08      	adds	r0, r1, #0
 8001caa:	bf18      	it	ne
 8001cac:	2001      	movne	r0, #1
 8001cae:	e000      	b.n	8001cb2 <USB_DevInit+0x96>
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
  {
    ret = HAL_ERROR;
 8001cb0:	2001      	movs	r0, #1
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	612b      	str	r3, [r5, #16]
 8001cb6:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8001cba:	616b      	str	r3, [r5, #20]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001cbc:	4619      	mov	r1, r3
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;
 8001cbe:	61eb      	str	r3, [r5, #28]
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001cc0:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      if (i == 0U)
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001cc4:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001cc8:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001ccc:	4543      	cmp	r3, r8
 8001cce:	d012      	beq.n	8001cf6 <USB_DevInit+0xda>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001cd0:	f8d2 a000 	ldr.w	sl, [r2]
 8001cd4:	f1ba 0f00 	cmp.w	sl, #0
 8001cd8:	da06      	bge.n	8001ce8 <USB_DevInit+0xcc>
    {
      if (i == 0U)
 8001cda:	b913      	cbnz	r3, 8001ce2 <USB_DevInit+0xc6>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001cdc:	f8c2 c000 	str.w	ip, [r2]
 8001ce0:	e003      	b.n	8001cea <USB_DevInit+0xce>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001ce2:	f8c2 e000 	str.w	lr, [r2]
 8001ce6:	e000      	b.n	8001cea <USB_DevInit+0xce>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001ce8:	6011      	str	r1, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001cea:	6111      	str	r1, [r2, #16]
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001cec:	3301      	adds	r3, #1
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001cee:	f8c2 9008 	str.w	r9, [r2, #8]
 8001cf2:	3220      	adds	r2, #32
 8001cf4:	e7ea      	b.n	8001ccc <USB_DevInit+0xb0>
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001cfc:	4611      	mov	r1, r2
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001cfe:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      if (i == 0U)
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001d02:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001d06:	f64f 397f 	movw	r9, #64383	; 0xfb7f

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d0a:	4542      	cmp	r2, r8
 8001d0c:	d012      	beq.n	8001d34 <USB_DevInit+0x118>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001d0e:	f8d3 a000 	ldr.w	sl, [r3]
 8001d12:	f1ba 0f00 	cmp.w	sl, #0
 8001d16:	da06      	bge.n	8001d26 <USB_DevInit+0x10a>
    {
      if (i == 0U)
 8001d18:	b912      	cbnz	r2, 8001d20 <USB_DevInit+0x104>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001d1a:	f8c3 c000 	str.w	ip, [r3]
 8001d1e:	e003      	b.n	8001d28 <USB_DevInit+0x10c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001d20:	f8c3 e000 	str.w	lr, [r3]
 8001d24:	e000      	b.n	8001d28 <USB_DevInit+0x10c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001d26:	6019      	str	r1, [r3, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001d28:	6119      	str	r1, [r3, #16]

    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d2a:	3201      	adds	r2, #1
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001d2c:	f8c3 9008 	str.w	r9, [r3, #8]
 8001d30:	3320      	adds	r3, #32
 8001d32:	e7ea      	b.n	8001d0a <USB_DevInit+0xee>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001d34:	692b      	ldr	r3, [r5, #16]

  if (cfg.dma_enable == 1U)
 8001d36:	2f01      	cmp	r7, #1

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d3c:	612b      	str	r3, [r5, #16]

  if (cfg.dma_enable == 1U)
 8001d3e:	d107      	bne.n	8001d50 <USB_DevInit+0x134>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <USB_DevInit+0x174>)
 8001d42:	632b      	str	r3, [r5, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001d44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4a:	f043 0303 	orr.w	r3, r3, #3
 8001d4e:	632b      	str	r3, [r5, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001d54:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001d58:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8001d5a:	b91f      	cbnz	r7, 8001d64 <USB_DevInit+0x148>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001d5c:	69a3      	ldr	r3, [r4, #24]
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001d64:	69a2      	ldr	r2, [r4, #24]
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <USB_DevInit+0x178>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61a3      	str	r3, [r4, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8001d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001d6e:	b11b      	cbz	r3, 8001d78 <USB_DevInit+0x15c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001d70:	69a3      	ldr	r3, [r4, #24]
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8001d78:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001d7a:	bf01      	itttt	eq
 8001d7c:	69a3      	ldreq	r3, [r4, #24]
 8001d7e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001d82:	f043 0304 	orreq.w	r3, r3, #4
 8001d86:	61a3      	streq	r3, [r4, #24]
  }

  return ret;
}
 8001d88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d8c:	b004      	add	sp, #16
 8001d8e:	4770      	bx	lr
 8001d90:	00800100 	.word	0x00800100
 8001d94:	803c3800 	.word	0x803c3800

08001d98 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8001d98:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8001d9c:	f013 0006 	ands.w	r0, r3, #6
 8001da0:	d005      	beq.n	8001dae <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b02      	cmp	r3, #2
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
 8001da8:	bf0c      	ite	eq
 8001daa:	2002      	moveq	r0, #2
 8001dac:	200f      	movne	r0, #15
  }

  return speed;
}
 8001dae:	4770      	bx	lr

08001db0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001db0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001db2:	784a      	ldrb	r2, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001db4:	780e      	ldrb	r6, [r1, #0]

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001db6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8001dba:	f500 6300 	add.w	r3, r0, #2048	; 0x800
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 8001dbe:	2a01      	cmp	r2, #1
 8001dc0:	f006 070f 	and.w	r7, r6, #15
 8001dc4:	d119      	bne.n	8001dfa <USB_ActivateEndpoint+0x4a>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001dc6:	40ba      	lsls	r2, r7

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001dc8:	f44f 6510 	mov.w	r5, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001dcc:	4322      	orrs	r2, r4

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001dce:	eb05 1546 	add.w	r5, r5, r6, lsl #5
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001dd2:	61da      	str	r2, [r3, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001dd4:	582b      	ldr	r3, [r5, r0]
 8001dd6:	041c      	lsls	r4, r3, #16
 8001dd8:	d429      	bmi.n	8001e2e <USB_ActivateEndpoint+0x7e>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001dda:	688b      	ldr	r3, [r1, #8]
 8001ddc:	582c      	ldr	r4, [r5, r0]
 8001dde:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001de2:	f044 5380 	orr.w	r3, r4, #268435456	; 0x10000000
 8001de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dea:	431a      	orrs	r2, r3
 8001dec:	78cb      	ldrb	r3, [r1, #3]
 8001dee:	ea42 4383 	orr.w	r3, r2, r3, lsl #18
 8001df2:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 8001df6:	502b      	str	r3, [r5, r0]
 8001df8:	e019      	b.n	8001e2e <USB_ActivateEndpoint+0x7e>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8001dfa:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8001dfe:	fa05 f207 	lsl.w	r2, r5, r7
 8001e02:	4322      	orrs	r2, r4
 8001e04:	61da      	str	r2, [r3, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001e06:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001e0a:	eb02 1346 	add.w	r3, r2, r6, lsl #5
 8001e0e:	581a      	ldr	r2, [r3, r0]
 8001e10:	0412      	lsls	r2, r2, #16
 8001e12:	d40c      	bmi.n	8001e2e <USB_ActivateEndpoint+0x7e>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8001e14:	688a      	ldr	r2, [r1, #8]
 8001e16:	581c      	ldr	r4, [r3, r0]
 8001e18:	78c9      	ldrb	r1, [r1, #3]
 8001e1a:	f3c2 050a 	ubfx	r5, r2, #0, #11
 8001e1e:	f044 5280 	orr.w	r2, r4, #268435456	; 0x10000000
 8001e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e26:	432a      	orrs	r2, r5
 8001e28:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001e2c:	501a      	str	r2, [r3, r0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 8001e2e:	2000      	movs	r0, #0
 8001e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001e34:	b570      	push	{r4, r5, r6, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8001e36:	784c      	ldrb	r4, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001e38:	780d      	ldrb	r5, [r1, #0]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001e3a:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 8001e3e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8001e42:	2c01      	cmp	r4, #1
 8001e44:	f005 020f 	and.w	r2, r5, #15
 8001e48:	d113      	bne.n	8001e72 <USB_DeactivateEndpoint+0x3e>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001e4a:	fa04 f202 	lsl.w	r2, r4, r2
 8001e4e:	ea26 0202 	bic.w	r2, r6, r2
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001e54:	7809      	ldrb	r1, [r1, #0]
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	f001 010f 	and.w	r1, r1, #15
 8001e5c:	408c      	lsls	r4, r1
 8001e5e:	ea22 0404 	bic.w	r4, r2, r4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8001e62:	f44f 6210 	mov.w	r2, #2304	; 0x900

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001e66:	61dc      	str	r4, [r3, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8001e68:	eb02 1345 	add.w	r3, r2, r5, lsl #5
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <USB_DeactivateEndpoint+0x70>)
 8001e6e:	5819      	ldr	r1, [r3, r0]
 8001e70:	e013      	b.n	8001e9a <USB_DeactivateEndpoint+0x66>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001e72:	2401      	movs	r4, #1
 8001e74:	fa04 f202 	lsl.w	r2, r4, r2
 8001e78:	ea26 4202 	bic.w	r2, r6, r2, lsl #16
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001e7e:	7809      	ldrb	r1, [r1, #0]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	f001 010f 	and.w	r1, r1, #15
 8001e86:	408c      	lsls	r4, r1
 8001e88:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8001e8c:	61dc      	str	r4, [r3, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8001e8e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001e92:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <USB_DeactivateEndpoint+0x74>)
 8001e98:	5819      	ldr	r1, [r3, r0]
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	501a      	str	r2, [r3, r0]
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
}
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
 8001ea2:	bf00      	nop
 8001ea4:	ec337800 	.word	0xec337800
 8001ea8:	eff37800 	.word	0xeff37800

08001eac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001eac:	b570      	push	{r4, r5, r6, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8001eae:	784b      	ldrb	r3, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001eb0:	780d      	ldrb	r5, [r1, #0]
 8001eb2:	694e      	ldr	r6, [r1, #20]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	f04f 0420 	mov.w	r4, #32
 8001eba:	d14f      	bne.n	8001f5c <USB_EP0StartXfer+0xb0>
 8001ebc:	f44f 6310 	mov.w	r3, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001ec0:	fb14 3305 	smlabb	r3, r4, r5, r3
 8001ec4:	4403      	add	r3, r0
 8001ec6:	691c      	ldr	r4, [r3, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8001ec8:	b966      	cbnz	r6, 8001ee4 <USB_EP0StartXfer+0x38>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001eca:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001ece:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001ed2:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001ed4:	691c      	ldr	r4, [r3, #16]
 8001ed6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001eda:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001edc:	691c      	ldr	r4, [r3, #16]
 8001ede:	0ce4      	lsrs	r4, r4, #19
 8001ee0:	04e4      	lsls	r4, r4, #19
 8001ee2:	e015      	b.n	8001f10 <USB_EP0StartXfer+0x64>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001ee4:	0ce4      	lsrs	r4, r4, #19
 8001ee6:	04e4      	lsls	r4, r4, #19
 8001ee8:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001eea:	691c      	ldr	r4, [r3, #16]
 8001eec:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001ef0:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001ef4:	611c      	str	r4, [r3, #16]

      if (ep->xfer_len > ep->maxpacket)
 8001ef6:	688c      	ldr	r4, [r1, #8]
 8001ef8:	42a6      	cmp	r6, r4
      {
        ep->xfer_len = ep->maxpacket;
 8001efa:	bf88      	it	hi
 8001efc:	614c      	strhi	r4, [r1, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001efe:	691c      	ldr	r4, [r3, #16]
 8001f00:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001f04:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001f06:	694c      	ldr	r4, [r1, #20]
 8001f08:	691e      	ldr	r6, [r3, #16]
 8001f0a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001f0e:	4334      	orrs	r4, r6
    }

    if (dma == 1U)
 8001f10:	2a01      	cmp	r2, #1
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001f12:	611c      	str	r4, [r3, #16]
 8001f14:	f04f 0220 	mov.w	r2, #32
    }

    if (dma == 1U)
 8001f18:	d10a      	bne.n	8001f30 <USB_EP0StartXfer+0x84>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8001f1a:	690b      	ldr	r3, [r1, #16]
 8001f1c:	b11b      	cbz	r3, 8001f26 <USB_EP0StartXfer+0x7a>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001f1e:	fb02 0205 	mla	r2, r2, r5, r0
 8001f22:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001f26:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001f2a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8001f2e:	e035      	b.n	8001f9c <USB_EP0StartXfer+0xf0>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001f30:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001f34:	fb12 3305 	smlabb	r3, r2, r5, r3
 8001f38:	58c2      	ldr	r2, [r0, r3]
 8001f3a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8001f3e:	50c2      	str	r2, [r0, r3]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8001f40:	694b      	ldr	r3, [r1, #20]
 8001f42:	b37b      	cbz	r3, 8001fa4 <USB_EP0StartXfer+0xf8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8001f44:	780b      	ldrb	r3, [r1, #0]
 8001f46:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001f5a:	e023      	b.n	8001fa4 <USB_EP0StartXfer+0xf8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f5c:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001f60:	fb14 3305 	smlabb	r3, r4, r5, r3
 8001f64:	181c      	adds	r4, r3, r0
 8001f66:	6925      	ldr	r5, [r4, #16]
 8001f68:	0ced      	lsrs	r5, r5, #19
 8001f6a:	04ed      	lsls	r5, r5, #19
 8001f6c:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8001f6e:	6925      	ldr	r5, [r4, #16]
 8001f70:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001f74:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001f78:	6125      	str	r5, [r4, #16]
 8001f7a:	688d      	ldr	r5, [r1, #8]

    if (ep->xfer_len > 0U)
 8001f7c:	b106      	cbz	r6, 8001f80 <USB_EP0StartXfer+0xd4>
    {
      ep->xfer_len = ep->maxpacket;
 8001f7e:	614d      	str	r5, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001f80:	6926      	ldr	r6, [r4, #16]
 8001f82:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8001f86:	6126      	str	r6, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8001f88:	6926      	ldr	r6, [r4, #16]
 8001f8a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001f8e:	4335      	orrs	r5, r6

    if (dma == 1U)
 8001f90:	2a01      	cmp	r2, #1
    {
      ep->xfer_len = ep->maxpacket;
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8001f92:	6125      	str	r5, [r4, #16]

    if (dma == 1U)
 8001f94:	d102      	bne.n	8001f9c <USB_EP0StartXfer+0xf0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8001f96:	68ca      	ldr	r2, [r1, #12]
 8001f98:	b102      	cbz	r2, 8001f9c <USB_EP0StartXfer+0xf0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001f9a:	6162      	str	r2, [r4, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001f9c:	581a      	ldr	r2, [r3, r0]
 8001f9e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8001fa2:	501a      	str	r2, [r3, r0]
  }

  return HAL_OK;
}
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}

08001fa8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 8001fae:	b96c      	cbnz	r4, 8001fcc <USB_WritePacket+0x24>
 8001fb0:	3303      	adds	r3, #3
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001fb2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8001fb6:	f023 0303 	bic.w	r3, r3, #3
 8001fba:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001fbe:	440b      	add	r3, r1
  uint32_t count32b, i;

  if (dma == 0U)
  {
    count32b = ((uint32_t)len + 3U) / 4U;
    for (i = 0U; i < count32b; i++)
 8001fc0:	4299      	cmp	r1, r3
 8001fc2:	d003      	beq.n	8001fcc <USB_WritePacket+0x24>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001fc4:	f851 2b04 	ldr.w	r2, [r1], #4
 8001fc8:	6002      	str	r2, [r0, #0]
 8001fca:	e7f9      	b.n	8001fc0 <USB_WritePacket+0x18>
      pSrc++;
    }
  }

  return HAL_OK;
}
 8001fcc:	2000      	movs	r0, #0
 8001fce:	bd10      	pop	{r4, pc}

08001fd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8001fd2:	784b      	ldrb	r3, [r1, #1]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8001fd4:	780e      	ldrb	r6, [r1, #0]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f04f 0520 	mov.w	r5, #32
 8001fdc:	694b      	ldr	r3, [r1, #20]
 8001fde:	f040 8091 	bne.w	8002104 <USB_EPStartXfer+0x134>
 8001fe2:	f44f 6410 	mov.w	r4, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8001fe6:	b98b      	cbnz	r3, 800200c <USB_EPStartXfer+0x3c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001fe8:	fb15 4506 	smlabb	r5, r5, r6, r4
 8001fec:	4405      	add	r5, r0
 8001fee:	692c      	ldr	r4, [r5, #16]
 8001ff0:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001ff4:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001ff8:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001ffa:	692c      	ldr	r4, [r5, #16]
 8001ffc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002000:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002002:	692c      	ldr	r4, [r5, #16]
 8002004:	0ce4      	lsrs	r4, r4, #19
 8002006:	04e4      	lsls	r4, r4, #19
 8002008:	612c      	str	r4, [r5, #16]
 800200a:	e02c      	b.n	8002066 <USB_EPStartXfer+0x96>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800200c:	fb15 4406 	smlabb	r4, r5, r6, r4
 8002010:	4404      	add	r4, r0
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002012:	f8d1 e008 	ldr.w	lr, [r1, #8]
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002016:	6925      	ldr	r5, [r4, #16]
 8002018:	0ced      	lsrs	r5, r5, #19
 800201a:	04ed      	lsls	r5, r5, #19
 800201c:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800201e:	6925      	ldr	r5, [r4, #16]
 8002020:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002024:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002028:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800202a:	eb03 050e 	add.w	r5, r3, lr
 800202e:	3d01      	subs	r5, #1
 8002030:	fbb5 f5fe 	udiv	r5, r5, lr
 8002034:	f8df e160 	ldr.w	lr, [pc, #352]	; 8002198 <USB_EPStartXfer+0x1c8>
 8002038:	6927      	ldr	r7, [r4, #16]
 800203a:	04ed      	lsls	r5, r5, #19
 800203c:	ea05 0e0e 	and.w	lr, r5, lr
 8002040:	ea4e 0507 	orr.w	r5, lr, r7
 8002044:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002046:	6925      	ldr	r5, [r4, #16]
 8002048:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800204c:	433d      	orrs	r5, r7
 800204e:	6125      	str	r5, [r4, #16]

      if (ep->type == EP_TYPE_ISOC)
 8002050:	78cd      	ldrb	r5, [r1, #3]
 8002052:	2d01      	cmp	r5, #1
 8002054:	d107      	bne.n	8002066 <USB_EPStartXfer+0x96>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002056:	6925      	ldr	r5, [r4, #16]
 8002058:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800205c:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800205e:	6925      	ldr	r5, [r4, #16]
 8002060:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002064:	6125      	str	r5, [r4, #16]
      }
    }

    if (dma == 1U)
 8002066:	2a01      	cmp	r2, #1
 8002068:	f04f 0520 	mov.w	r5, #32
 800206c:	d11e      	bne.n	80020ac <USB_EPStartXfer+0xdc>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800206e:	690b      	ldr	r3, [r1, #16]
 8002070:	b11b      	cbz	r3, 800207a <USB_EPStartXfer+0xaa>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002072:	fb05 0506 	mla	r5, r5, r6, r0
 8002076:	f8c5 3914 	str.w	r3, [r5, #2324]	; 0x914
      }

      if (ep->type == EP_TYPE_ISOC)
 800207a:	78cb      	ldrb	r3, [r1, #3]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d110      	bne.n	80020a2 <USB_EPStartXfer+0xd2>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002080:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002084:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8002088:	f413 7f80 	tst.w	r3, #256	; 0x100
 800208c:	f04f 0320 	mov.w	r3, #32
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002090:	fb13 2306 	smlabb	r3, r3, r6, r2
 8002094:	58c2      	ldr	r2, [r0, r3]
 8002096:	bf0c      	ite	eq
 8002098:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800209c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80020a0:	50c2      	str	r2, [r0, r3]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80020a2:	f44f 6410 	mov.w	r4, #2304	; 0x900
 80020a6:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 80020aa:	e06d      	b.n	8002188 <USB_EPStartXfer+0x1b8>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80020ac:	f44f 6410 	mov.w	r4, #2304	; 0x900
 80020b0:	fb15 4406 	smlabb	r4, r5, r6, r4
 80020b4:	5905      	ldr	r5, [r0, r4]
 80020b6:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80020ba:	5105      	str	r5, [r0, r4]

      if (ep->type != EP_TYPE_ISOC)
 80020bc:	78cd      	ldrb	r5, [r1, #3]
 80020be:	2d01      	cmp	r5, #1
 80020c0:	d00d      	beq.n	80020de <USB_EPStartXfer+0x10e>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d064      	beq.n	8002190 <USB_EPStartXfer+0x1c0>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80020c6:	780b      	ldrb	r3, [r1, #0]
 80020c8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80020dc:	e058      	b.n	8002190 <USB_EPStartXfer+0x1c0>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80020de:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 80020e2:	f415 7f80 	tst.w	r5, #256	; 0x100
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80020e6:	5905      	ldr	r5, [r0, r4]
 80020e8:	bf0c      	ite	eq
 80020ea:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80020ee:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80020f2:	5105      	str	r5, [r0, r4]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80020f4:	780c      	ldrb	r4, [r1, #0]
 80020f6:	9200      	str	r2, [sp, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4622      	mov	r2, r4
 80020fc:	68c9      	ldr	r1, [r1, #12]
 80020fe:	f7ff ff53 	bl	8001fa8 <USB_WritePacket>
 8002102:	e045      	b.n	8002190 <USB_EPStartXfer+0x1c0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002104:	f44f 6430 	mov.w	r4, #2816	; 0xb00
 8002108:	fb15 4406 	smlabb	r4, r5, r6, r4
 800210c:	1905      	adds	r5, r0, r4
 800210e:	692e      	ldr	r6, [r5, #16]
 8002110:	0cf6      	lsrs	r6, r6, #19
 8002112:	04f6      	lsls	r6, r6, #19
 8002114:	612e      	str	r6, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002116:	692e      	ldr	r6, [r5, #16]
 8002118:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 800211c:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002120:	612e      	str	r6, [r5, #16]
 8002122:	688e      	ldr	r6, [r1, #8]

    if (ep->xfer_len == 0U)
 8002124:	b943      	cbnz	r3, 8002138 <USB_EPStartXfer+0x168>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002126:	692f      	ldr	r7, [r5, #16]
 8002128:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800212c:	433e      	orrs	r6, r7
 800212e:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002130:	692b      	ldr	r3, [r5, #16]
 8002132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002136:	e013      	b.n	8002160 <USB_EPStartXfer+0x190>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002138:	4433      	add	r3, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800213a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8002198 <USB_EPStartXfer+0x1c8>
 800213e:	692f      	ldr	r7, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002140:	3b01      	subs	r3, #1
 8002142:	fbb3 f3f6 	udiv	r3, r3, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002146:	ea4f 4cc3 	mov.w	ip, r3, lsl #19
 800214a:	ea0c 0e0e 	and.w	lr, ip, lr
 800214e:	ea4e 0707 	orr.w	r7, lr, r7
 8002152:	612f      	str	r7, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002154:	b29b      	uxth	r3, r3
 8002156:	692f      	ldr	r7, [r5, #16]
 8002158:	4373      	muls	r3, r6
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	433b      	orrs	r3, r7
    }

    if (dma == 1U)
 8002160:	2a01      	cmp	r2, #1
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002162:	612b      	str	r3, [r5, #16]
    }

    if (dma == 1U)
 8002164:	d102      	bne.n	800216c <USB_EPStartXfer+0x19c>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002166:	68cb      	ldr	r3, [r1, #12]
 8002168:	b103      	cbz	r3, 800216c <USB_EPStartXfer+0x19c>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800216a:	616b      	str	r3, [r5, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800216c:	78cb      	ldrb	r3, [r1, #3]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d10a      	bne.n	8002188 <USB_EPStartXfer+0x1b8>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002172:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002176:	f413 7f80 	tst.w	r3, #256	; 0x100
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800217a:	5903      	ldr	r3, [r0, r4]
 800217c:	bf0c      	ite	eq
 800217e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002182:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8002186:	5103      	str	r3, [r0, r4]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002188:	5903      	ldr	r3, [r0, r4]
 800218a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800218e:	5103      	str	r3, [r0, r4]
  }

  return HAL_OK;
}
 8002190:	2000      	movs	r0, #0
 8002192:	b003      	add	sp, #12
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002196:	bf00      	nop
 8002198:	1ff80000 	.word	0x1ff80000

0800219c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800219c:	3203      	adds	r2, #3
 800219e:	f022 0203 	bic.w	r2, r2, #3
 80021a2:	440a      	add	r2, r1
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80021a4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;

  for (i = 0U; i < count32b; i++)
 80021a8:	4291      	cmp	r1, r2
 80021aa:	d003      	beq.n	80021b4 <USB_ReadPacket+0x18>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80021ac:	6803      	ldr	r3, [r0, #0]
 80021ae:	f841 3b04 	str.w	r3, [r1], #4
 80021b2:	e7f9      	b.n	80021a8 <USB_ReadPacket+0xc>
    pDest++;
  }

  return ((void *)pDest);
}
 80021b4:	4608      	mov	r0, r1
 80021b6:	4770      	bx	lr

080021b8 <USB_EPSetStall>:
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 80021b8:	784b      	ldrb	r3, [r1, #1]
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80021ba:	b510      	push	{r4, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 80021bc:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80021be:	780c      	ldrb	r4, [r1, #0]
 80021c0:	f04f 0220 	mov.w	r2, #32

  if (ep->is_in == 1U)
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80021c4:	bf0c      	ite	eq
 80021c6:	f44f 6310 	moveq.w	r3, #2304	; 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80021ca:	f44f 6330 	movne.w	r3, #2816	; 0xb00
 80021ce:	fb12 3304 	smlabb	r3, r2, r4, r3
 80021d2:	581a      	ldr	r2, [r3, r0]
 80021d4:	2a00      	cmp	r2, #0
 80021d6:	db04      	blt.n	80021e2 <USB_EPSetStall+0x2a>
 80021d8:	b11c      	cbz	r4, 80021e2 <USB_EPSetStall+0x2a>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80021da:	581a      	ldr	r2, [r3, r0]
 80021dc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80021e0:	501a      	str	r2, [r3, r0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80021e2:	581a      	ldr	r2, [r3, r0]
 80021e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80021e8:	501a      	str	r2, [r3, r0]
  }

  return HAL_OK;
}
 80021ea:	2000      	movs	r0, #0
 80021ec:	bd10      	pop	{r4, pc}

080021ee <USB_EPClearStall>:
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 80021ee:	784b      	ldrb	r3, [r1, #1]
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80021f0:	b510      	push	{r4, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
 80021f2:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80021f4:	780c      	ldrb	r4, [r1, #0]

  if (ep->is_in == 1U)
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021f6:	bf0c      	ite	eq
 80021f8:	f44f 6310 	moveq.w	r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021fc:	f44f 6330 	movne.w	r3, #2816	; 0xb00
 8002200:	2220      	movs	r2, #32
 8002202:	fb12 3304 	smlabb	r3, r2, r4, r3
 8002206:	581a      	ldr	r2, [r3, r0]
 8002208:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800220c:	501a      	str	r2, [r3, r0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800220e:	78ca      	ldrb	r2, [r1, #3]
 8002210:	3a02      	subs	r2, #2
 8002212:	2a01      	cmp	r2, #1
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002214:	bf9e      	ittt	ls
 8002216:	581a      	ldrls	r2, [r3, r0]
 8002218:	f042 5280 	orrls.w	r2, r2, #268435456	; 0x10000000
 800221c:	501a      	strls	r2, [r3, r0]
    }
  }
  return HAL_OK;
}
 800221e:	2000      	movs	r0, #0
 8002220:	bd10      	pop	{r4, pc}

08002222 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002222:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002226:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800222a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800222e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002232:	0109      	lsls	r1, r1, #4
 8002234:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002238:	430b      	orrs	r3, r1
 800223a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800

  return HAL_OK;
}
 800223e:	2000      	movs	r0, #0
 8002240:	4770      	bx	lr

08002242 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002242:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002244:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002248:	f023 0302 	bic.w	r3, r3, #2
 800224c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 fdc9 	bl	8002de8 <HAL_Delay>

  return HAL_OK;
}
 8002256:	2000      	movs	r0, #0
 8002258:	bd08      	pop	{r3, pc}

0800225a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800225a:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800225c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002268:	2003      	movs	r0, #3
 800226a:	f000 fdbd 	bl	8002de8 <HAL_Delay>

  return HAL_OK;
}
 800226e:	2000      	movs	r0, #0
 8002270:	bd08      	pop	{r3, pc}

08002272 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002272:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002274:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8002276:	4010      	ands	r0, r2
 8002278:	4770      	bx	lr

0800227a <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800227a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800227e:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002282:	69db      	ldr	r3, [r3, #28]

  return ((tmpreg & 0xffff0000U) >> 16);
 8002284:	4018      	ands	r0, r3
}
 8002286:	0c00      	lsrs	r0, r0, #16
 8002288:	4770      	bx	lr

0800228a <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800228a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800228e:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002292:	69db      	ldr	r3, [r3, #28]

  return ((tmpreg & 0xFFFFU));
 8002294:	4018      	ands	r0, r3
}
 8002296:	b280      	uxth	r0, r0
 8002298:	4770      	bx	lr

0800229a <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800229a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800229e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80022a2:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80022a6:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 80022a8:	4010      	ands	r0, r2
 80022aa:	4770      	bx	lr

080022ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80022ac:	b510      	push	{r4, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80022ae:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80022b2:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;

  return tmpreg;
 80022b6:	f001 030f 	and.w	r3, r1, #15
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80022ba:	eb00 1041 	add.w	r0, r0, r1, lsl #5

  return tmpreg;
 80022be:	fa22 f303 	lsr.w	r3, r2, r3
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80022c2:	f500 6010 	add.w	r0, r0, #2304	; 0x900

  return tmpreg;
 80022c6:	01db      	lsls	r3, r3, #7
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80022c8:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4323      	orrs	r3, r4
}
 80022ce:	4018      	ands	r0, r3
 80022d0:	bd10      	pop	{r4, pc}

080022d2 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 80022d2:	6940      	ldr	r0, [r0, #20]
}
 80022d4:	f000 0001 	and.w	r0, r0, #1
 80022d8:	4770      	bx	lr

080022da <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80022da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80022de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022e2:	f023 0307 	bic.w	r3, r3, #7
 80022e6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80022ea:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	f002 0206 	and.w	r2, r2, #6
 80022f4:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80022f6:	bf02      	ittt	eq
 80022f8:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80022fc:	f042 0203 	orreq.w	r2, r2, #3
 8002300:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 800230c:	2000      	movs	r0, #0
 800230e:	4770      	bx	lr

08002310 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002310:	b510      	push	{r4, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <USB_EP0_OutStart+0x5c>)
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002314:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002316:	429c      	cmp	r4, r3
 8002318:	d903      	bls.n	8002322 <USB_EP0_OutStart+0x12>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800231a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800231e:	2b00      	cmp	r3, #0
 8002320:	db21      	blt.n	8002366 <USB_EP0_OutStart+0x56>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002322:	2400      	movs	r4, #0
 8002324:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002328:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800232c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002330:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002334:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002338:	f044 0418 	orr.w	r4, r4, #24
 800233c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002340:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
 8002344:	2901      	cmp	r1, #1
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002346:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800234a:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800234e:	bf08      	it	eq
 8002350:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002354:	f500 6330 	add.w	r3, r0, #2816	; 0xb00

  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002358:	bf02      	ittt	eq
 800235a:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 800235e:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 8002362:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8002366:	2000      	movs	r0, #0
 8002368:	bd10      	pop	{r4, pc}
 800236a:	bf00      	nop
 800236c:	4f54300a 	.word	0x4f54300a

08002370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	4604      	mov	r4, r0
 8002376:	2800      	cmp	r0, #0
 8002378:	f000 8190 	beq.w	800269c <HAL_RCC_OscConfig+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237c:	6803      	ldr	r3, [r0, #0]
 800237e:	07dd      	lsls	r5, r3, #31
 8002380:	d403      	bmi.n	800238a <HAL_RCC_OscConfig+0x1a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	0798      	lsls	r0, r3, #30
 8002386:	d44a      	bmi.n	800241e <HAL_RCC_OscConfig+0xae>
 8002388:	e08f      	b.n	80024aa <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238a:	4b9b      	ldr	r3, [pc, #620]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	f002 020c 	and.w	r2, r2, #12
 8002392:	2a04      	cmp	r2, #4
 8002394:	d007      	beq.n	80023a6 <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002396:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002398:	f002 020c 	and.w	r2, r2, #12
 800239c:	2a08      	cmp	r2, #8
 800239e:	d10a      	bne.n	80023b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0259      	lsls	r1, r3, #9
 80023a4:	d507      	bpl.n	80023b6 <HAL_RCC_OscConfig+0x46>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	4b94      	ldr	r3, [pc, #592]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	039a      	lsls	r2, r3, #14
 80023ac:	d5e9      	bpl.n	8002382 <HAL_RCC_OscConfig+0x12>
 80023ae:	6863      	ldr	r3, [r4, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e6      	bne.n	8002382 <HAL_RCC_OscConfig+0x12>
 80023b4:	e172      	b.n	800269c <HAL_RCC_OscConfig+0x32c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b6:	6863      	ldr	r3, [r4, #4]
 80023b8:	4d8f      	ldr	r5, [pc, #572]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 80023ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023be:	d006      	beq.n	80023ce <HAL_RCC_OscConfig+0x5e>
 80023c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c4:	d108      	bne.n	80023d8 <HAL_RCC_OscConfig+0x68>
 80023c6:	682b      	ldr	r3, [r5, #0]
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	602b      	str	r3, [r5, #0]
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	602b      	str	r3, [r5, #0]
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x7a>
 80023d8:	682a      	ldr	r2, [r5, #0]
 80023da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023de:	602a      	str	r2, [r5, #0]
 80023e0:	682a      	ldr	r2, [r5, #0]
 80023e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e6:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	b16b      	cbz	r3, 8002406 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f000 fcf7 	bl	8002ddc <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4d82      	ldr	r5, [pc, #520]	; (80025f8 <HAL_RCC_OscConfig+0x288>)

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	039b      	lsls	r3, r3, #14
 80023f6:	d4c4      	bmi.n	8002382 <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f000 fcf0 	bl	8002ddc <HAL_GetTick>
 80023fc:	1b80      	subs	r0, r0, r6
 80023fe:	2864      	cmp	r0, #100	; 0x64
 8002400:	d9f7      	bls.n	80023f2 <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 8002402:	2003      	movs	r0, #3
 8002404:	e14b      	b.n	800269e <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f000 fce9 	bl	8002ddc <HAL_GetTick>
 800240a:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	039f      	lsls	r7, r3, #14
 8002410:	d5b7      	bpl.n	8002382 <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002412:	f000 fce3 	bl	8002ddc <HAL_GetTick>
 8002416:	1b80      	subs	r0, r0, r6
 8002418:	2864      	cmp	r0, #100	; 0x64
 800241a:	d9f7      	bls.n	800240c <HAL_RCC_OscConfig+0x9c>
 800241c:	e7f1      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	f012 0f0c 	tst.w	r2, #12
 8002426:	d007      	beq.n	8002438 <HAL_RCC_OscConfig+0xc8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002428:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800242a:	f002 020c 	and.w	r2, r2, #12
 800242e:	2a08      	cmp	r2, #8
 8002430:	d112      	bne.n	8002458 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	025e      	lsls	r6, r3, #9
 8002436:	d40f      	bmi.n	8002458 <HAL_RCC_OscConfig+0xe8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002438:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	0795      	lsls	r5, r2, #30
 800243e:	d503      	bpl.n	8002448 <HAL_RCC_OscConfig+0xd8>
 8002440:	68e2      	ldr	r2, [r4, #12]
 8002442:	2a01      	cmp	r2, #1
 8002444:	f040 812a 	bne.w	800269c <HAL_RCC_OscConfig+0x32c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	6921      	ldr	r1, [r4, #16]
 800244c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002450:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002454:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	e028      	b.n	80024aa <HAL_RCC_OscConfig+0x13a>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002458:	68e2      	ldr	r2, [r4, #12]
 800245a:	4b68      	ldr	r3, [pc, #416]	; (80025fc <HAL_RCC_OscConfig+0x28c>)
 800245c:	b1ba      	cbz	r2, 800248e <HAL_RCC_OscConfig+0x11e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f000 fcbb 	bl	8002ddc <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4d64      	ldr	r5, [pc, #400]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	682b      	ldr	r3, [r5, #0]
 800246c:	4a62      	ldr	r2, [pc, #392]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 800246e:	0798      	lsls	r0, r3, #30
 8002470:	d405      	bmi.n	800247e <HAL_RCC_OscConfig+0x10e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f000 fcb3 	bl	8002ddc <HAL_GetTick>
 8002476:	1b80      	subs	r0, r0, r6
 8002478:	2802      	cmp	r0, #2
 800247a:	d9f6      	bls.n	800246a <HAL_RCC_OscConfig+0xfa>
 800247c:	e7c1      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	6813      	ldr	r3, [r2, #0]
 8002480:	6921      	ldr	r1, [r4, #16]
 8002482:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002486:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	e00d      	b.n	80024aa <HAL_RCC_OscConfig+0x13a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f000 fca4 	bl	8002ddc <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002494:	4d58      	ldr	r5, [pc, #352]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	0799      	lsls	r1, r3, #30
 800249c:	d505      	bpl.n	80024aa <HAL_RCC_OscConfig+0x13a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249e:	f000 fc9d 	bl	8002ddc <HAL_GetTick>
 80024a2:	1b80      	subs	r0, r0, r6
 80024a4:	2802      	cmp	r0, #2
 80024a6:	d9f7      	bls.n	8002498 <HAL_RCC_OscConfig+0x128>
 80024a8:	e7ab      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	071a      	lsls	r2, r3, #28
 80024ae:	d403      	bmi.n	80024b8 <HAL_RCC_OscConfig+0x148>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	075b      	lsls	r3, r3, #29
 80024b4:	d420      	bmi.n	80024f8 <HAL_RCC_OscConfig+0x188>
 80024b6:	e082      	b.n	80025be <HAL_RCC_OscConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b8:	6962      	ldr	r2, [r4, #20]
 80024ba:	4b51      	ldr	r3, [pc, #324]	; (8002600 <HAL_RCC_OscConfig+0x290>)
 80024bc:	b172      	cbz	r2, 80024dc <HAL_RCC_OscConfig+0x16c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f000 fc8b 	bl	8002ddc <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	4d4c      	ldr	r5, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024cc:	079f      	lsls	r7, r3, #30
 80024ce:	d4ef      	bmi.n	80024b0 <HAL_RCC_OscConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d0:	f000 fc84 	bl	8002ddc <HAL_GetTick>
 80024d4:	1b80      	subs	r0, r0, r6
 80024d6:	2802      	cmp	r0, #2
 80024d8:	d9f7      	bls.n	80024ca <HAL_RCC_OscConfig+0x15a>
 80024da:	e792      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f000 fc7d 	bl	8002ddc <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e2:	4d45      	ldr	r5, [pc, #276]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e4:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024e8:	0798      	lsls	r0, r3, #30
 80024ea:	d5e1      	bpl.n	80024b0 <HAL_RCC_OscConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f000 fc76 	bl	8002ddc <HAL_GetTick>
 80024f0:	1b80      	subs	r0, r0, r6
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d9f7      	bls.n	80024e6 <HAL_RCC_OscConfig+0x176>
 80024f6:	e784      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f8:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 80024fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002500:	d10b      	bne.n	800251a <HAL_RCC_OscConfig+0x1aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	9201      	str	r2, [sp, #4]
 8002504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002506:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002516:	2601      	movs	r6, #1
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x1ac>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	4d39      	ldr	r5, [pc, #228]	; (8002604 <HAL_RCC_OscConfig+0x294>)
 800251e:	682b      	ldr	r3, [r5, #0]
 8002520:	05d9      	lsls	r1, r3, #23
 8002522:	d504      	bpl.n	800252e <HAL_RCC_OscConfig+0x1be>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	68a3      	ldr	r3, [r4, #8]
 8002526:	4d34      	ldr	r5, [pc, #208]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 8002528:	2b01      	cmp	r3, #1
 800252a:	d110      	bne.n	800254e <HAL_RCC_OscConfig+0x1de>
 800252c:	e015      	b.n	800255a <HAL_RCC_OscConfig+0x1ea>
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252e:	682b      	ldr	r3, [r5, #0]
 8002530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002534:	602b      	str	r3, [r5, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002536:	f000 fc51 	bl	8002ddc <HAL_GetTick>
 800253a:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	682b      	ldr	r3, [r5, #0]
 800253e:	05da      	lsls	r2, r3, #23
 8002540:	d4f0      	bmi.n	8002524 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f000 fc4b 	bl	8002ddc <HAL_GetTick>
 8002546:	1bc0      	subs	r0, r0, r7
 8002548:	2802      	cmp	r0, #2
 800254a:	d9f7      	bls.n	800253c <HAL_RCC_OscConfig+0x1cc>
 800254c:	e759      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254e:	2b05      	cmp	r3, #5
 8002550:	d108      	bne.n	8002564 <HAL_RCC_OscConfig+0x1f4>
 8002552:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	672b      	str	r3, [r5, #112]	; 0x70
 800255a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	672b      	str	r3, [r5, #112]	; 0x70
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x206>
 8002564:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	672a      	str	r2, [r5, #112]	; 0x70
 800256c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800256e:	f022 0204 	bic.w	r2, r2, #4
 8002572:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002574:	b173      	cbz	r3, 8002594 <HAL_RCC_OscConfig+0x224>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f000 fc31 	bl	8002ddc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	4d1f      	ldr	r5, [pc, #124]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f241 3888 	movw	r8, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002582:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002584:	079b      	lsls	r3, r3, #30
 8002586:	d40d      	bmi.n	80025a4 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f000 fc28 	bl	8002ddc <HAL_GetTick>
 800258c:	1bc0      	subs	r0, r0, r7
 800258e:	4540      	cmp	r0, r8
 8002590:	d9f7      	bls.n	8002582 <HAL_RCC_OscConfig+0x212>
 8002592:	e736      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002594:	f000 fc22 	bl	8002ddc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025a0:	0798      	lsls	r0, r3, #30
 80025a2:	d406      	bmi.n	80025b2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a4:	b15e      	cbz	r6, 80025be <HAL_RCC_OscConfig+0x24e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 80025a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6413      	str	r3, [r2, #64]	; 0x40
 80025b0:	e005      	b.n	80025be <HAL_RCC_OscConfig+0x24e>
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f000 fc13 	bl	8002ddc <HAL_GetTick>
 80025b6:	1bc0      	subs	r0, r0, r7
 80025b8:	4540      	cmp	r0, r8
 80025ba:	d9f0      	bls.n	800259e <HAL_RCC_OscConfig+0x22e>
 80025bc:	e721      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	69a0      	ldr	r0, [r4, #24]
 80025c0:	b908      	cbnz	r0, 80025c6 <HAL_RCC_OscConfig+0x256>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80025c2:	2000      	movs	r0, #0
 80025c4:	e06b      	b.n	800269e <HAL_RCC_OscConfig+0x32e>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c6:	4d0c      	ldr	r5, [pc, #48]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 80025c8:	68ab      	ldr	r3, [r5, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d045      	beq.n	800265e <HAL_RCC_OscConfig+0x2ee>
 80025d2:	4e0d      	ldr	r6, [pc, #52]	; (8002608 <HAL_RCC_OscConfig+0x298>)
 80025d4:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d8:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025da:	d134      	bne.n	8002646 <HAL_RCC_OscConfig+0x2d6>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f000 fbfe 	bl	8002ddc <HAL_GetTick>
 80025e0:	4680      	mov	r8, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	682b      	ldr	r3, [r5, #0]
 80025e4:	4f04      	ldr	r7, [pc, #16]	; (80025f8 <HAL_RCC_OscConfig+0x288>)
 80025e6:	0199      	lsls	r1, r3, #6
 80025e8:	d510      	bpl.n	800260c <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ea:	f000 fbf7 	bl	8002ddc <HAL_GetTick>
 80025ee:	ebc8 0000 	rsb	r0, r8, r0
 80025f2:	2802      	cmp	r0, #2
 80025f4:	d9f5      	bls.n	80025e2 <HAL_RCC_OscConfig+0x272>
 80025f6:	e704      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	42470000 	.word	0x42470000
 8002600:	42470e80 	.word	0x42470e80
 8002604:	40007000 	.word	0x40007000
 8002608:	42470060 	.word	0x42470060
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800260c:	69e2      	ldr	r2, [r4, #28]
 800260e:	6a23      	ldr	r3, [r4, #32]
 8002610:	4313      	orrs	r3, r2
 8002612:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002614:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002618:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800261a:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 800261e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	3b01      	subs	r3, #1
 8002624:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002628:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262a:	2301      	movs	r3, #1
 800262c:	6033      	str	r3, [r6, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f000 fbd5 	bl	8002ddc <HAL_GetTick>
 8002632:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	019a      	lsls	r2, r3, #6
 8002638:	d4c3      	bmi.n	80025c2 <HAL_RCC_OscConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263a:	f000 fbcf 	bl	8002ddc <HAL_GetTick>
 800263e:	1b00      	subs	r0, r0, r4
 8002640:	2802      	cmp	r0, #2
 8002642:	d9f7      	bls.n	8002634 <HAL_RCC_OscConfig+0x2c4>
 8002644:	e6dd      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f000 fbc9 	bl	8002ddc <HAL_GetTick>
 800264a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	019b      	lsls	r3, r3, #6
 8002650:	d5b7      	bpl.n	80025c2 <HAL_RCC_OscConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002652:	f000 fbc3 	bl	8002ddc <HAL_GetTick>
 8002656:	1b00      	subs	r0, r0, r4
 8002658:	2802      	cmp	r0, #2
 800265a:	d9f7      	bls.n	800264c <HAL_RCC_OscConfig+0x2dc>
 800265c:	e6d1      	b.n	8002402 <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265e:	2801      	cmp	r0, #1
 8002660:	d01d      	beq.n	800269e <HAL_RCC_OscConfig+0x32e>
        return HAL_ERROR;
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002662:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002664:	69e3      	ldr	r3, [r4, #28]
 8002666:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 800266a:	429a      	cmp	r2, r3
 800266c:	d116      	bne.n	800269c <HAL_RCC_OscConfig+0x32c>
 800266e:	6a22      	ldr	r2, [r4, #32]
 8002670:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 8002674:	4293      	cmp	r3, r2
 8002676:	d111      	bne.n	800269c <HAL_RCC_OscConfig+0x32c>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800267c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800267e:	4003      	ands	r3, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x32c>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002684:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002686:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
 800268a:	4293      	cmp	r3, r2
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x32c>
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 800268e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002690:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002694:	1ac0      	subs	r0, r0, r3
 8002696:	bf18      	it	ne
 8002698:	2001      	movne	r0, #1
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x32e>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800269c:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800269e:	b002      	add	sp, #8
 80026a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026a4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a4:	4913      	ldr	r1, [pc, #76]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x50>)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a6:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a8:	688b      	ldr	r3, [r1, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d01c      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x48>
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d11c      	bne.n	80026f0 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026b8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ba:	6849      	ldr	r1, [r1, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c0:	bf14      	ite	ne
 80026c2:	480d      	ldrne	r0, [pc, #52]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c4:	480d      	ldreq	r0, [pc, #52]	; (80026fc <HAL_RCC_GetSysClockFreq+0x58>)
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80026ca:	bf18      	it	ne
 80026cc:	2300      	movne	r3, #0
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d2:	fba1 0100 	umull	r0, r1, r1, r0
 80026d6:	f7fd fde3 	bl	80002a0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80026dc:	685b      	ldr	r3, [r3, #4]

      sysclockfreq = pllvco/pllp;
 80026de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80026e2:	3301      	adds	r3, #1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80026ea:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80026ee:	bd08      	pop	{r3, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <HAL_RCC_GetSysClockFreq+0x58>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80026f2:	bd08      	pop	{r3, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	00f42400 	.word	0x00f42400

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002704:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002706:	4604      	mov	r4, r0
 8002708:	b910      	cbnz	r0, 8002710 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_RCC_ClockConfig+0x120>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	f002 020f 	and.w	r2, r2, #15
 8002718:	428a      	cmp	r2, r1
 800271a:	d317      	bcc.n	800274c <HAL_RCC_ClockConfig+0x4c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	6822      	ldr	r2, [r4, #0]
 800271e:	0796      	lsls	r6, r2, #30
 8002720:	d51c      	bpl.n	800275c <HAL_RCC_ClockConfig+0x5c>
 8002722:	4b40      	ldr	r3, [pc, #256]	; (8002824 <HAL_RCC_ClockConfig+0x124>)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	f012 0f04 	tst.w	r2, #4
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002728:	bf1e      	ittt	ne
 800272a:	6899      	ldrne	r1, [r3, #8]
 800272c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002730:	6099      	strne	r1, [r3, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	0710      	lsls	r0, r2, #28
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	bf42      	ittt	mi
 8002736:	6899      	ldrmi	r1, [r3, #8]
 8002738:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800273c:	6099      	strmi	r1, [r3, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273e:	6899      	ldr	r1, [r3, #8]
 8002740:	f021 00f0 	bic.w	r0, r1, #240	; 0xf0
 8002744:	68a1      	ldr	r1, [r4, #8]
 8002746:	4301      	orrs	r1, r0
 8002748:	6099      	str	r1, [r3, #8]
 800274a:	e007      	b.n	800275c <HAL_RCC_ClockConfig+0x5c>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274c:	b2ca      	uxtb	r2, r1
 800274e:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	4299      	cmp	r1, r3
 8002758:	d1d7      	bne.n	800270a <HAL_RCC_ClockConfig+0xa>
 800275a:	e7df      	b.n	800271c <HAL_RCC_ClockConfig+0x1c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275c:	07d1      	lsls	r1, r2, #31
 800275e:	d406      	bmi.n	800276e <HAL_RCC_ClockConfig+0x6e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <HAL_RCC_ClockConfig+0x120>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	f002 020f 	and.w	r2, r2, #15
 8002768:	4295      	cmp	r5, r2
 800276a:	d32c      	bcc.n	80027c6 <HAL_RCC_ClockConfig+0xc6>
 800276c:	e032      	b.n	80027d4 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	6863      	ldr	r3, [r4, #4]
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <HAL_RCC_ClockConfig+0x124>)
 8002772:	2b01      	cmp	r3, #1
 8002774:	d103      	bne.n	800277e <HAL_RCC_ClockConfig+0x7e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800277c:	e008      	b.n	8002790 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277e:	1e99      	subs	r1, r3, #2
 8002780:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002782:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002784:	d802      	bhi.n	800278c <HAL_RCC_ClockConfig+0x8c>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800278a:	e001      	b.n	8002790 <HAL_RCC_ClockConfig+0x90>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	f012 0f02 	tst.w	r2, #2
 8002790:	d0bb      	beq.n	800270a <HAL_RCC_ClockConfig+0xa>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4e24      	ldr	r6, [pc, #144]	; (8002824 <HAL_RCC_ClockConfig+0x124>)
 8002794:	68b2      	ldr	r2, [r6, #8]
 8002796:	f022 0203 	bic.w	r2, r2, #3
 800279a:	4313      	orrs	r3, r2
 800279c:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800279e:	f000 fb1d 	bl	8002ddc <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a2:	f241 3888 	movw	r8, #5000	; 0x1388
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a6:	4607      	mov	r7, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a8:	68b3      	ldr	r3, [r6, #8]
 80027aa:	6862      	ldr	r2, [r4, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027b4:	d0d4      	beq.n	8002760 <HAL_RCC_ClockConfig+0x60>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b6:	f000 fb11 	bl	8002ddc <HAL_GetTick>
 80027ba:	1bc0      	subs	r0, r0, r7
 80027bc:	4540      	cmp	r0, r8
 80027be:	d9f3      	bls.n	80027a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_TIMEOUT;
 80027c0:	2003      	movs	r0, #3

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80027c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	b2ea      	uxtb	r2, r5
 80027c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	429d      	cmp	r5, r3
 80027d2:	d19a      	bne.n	800270a <HAL_RCC_ClockConfig+0xa>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	6821      	ldr	r1, [r4, #0]
 80027d6:	074a      	lsls	r2, r1, #29
 80027d8:	d506      	bpl.n	80027e8 <HAL_RCC_ClockConfig+0xe8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027da:	4812      	ldr	r0, [pc, #72]	; (8002824 <HAL_RCC_ClockConfig+0x124>)
 80027dc:	6883      	ldr	r3, [r0, #8]
 80027de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027e2:	68e3      	ldr	r3, [r4, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	6083      	str	r3, [r0, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	070b      	lsls	r3, r1, #28
 80027ea:	d507      	bpl.n	80027fc <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <HAL_RCC_ClockConfig+0x124>)
 80027ee:	6921      	ldr	r1, [r4, #16]
 80027f0:	6893      	ldr	r3, [r2, #8]
 80027f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80027f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027fa:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fc:	f7ff ff52 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_RCC_ClockConfig+0x124>)
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x128>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	40d8      	lsrs	r0, r3
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_RCC_ClockConfig+0x12c>)
 8002810:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_RCC_ClockConfig+0x130>)
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	f000 faa3 	bl	8002d60 <HAL_InitTick>

  return HAL_OK;
 800281a:	2000      	movs	r0, #0
 800281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002820:	40023c00 	.word	0x40023c00
 8002824:	40023800 	.word	0x40023800
 8002828:	08006dee 	.word	0x08006dee
 800282c:	20000068 	.word	0x20000068
 8002830:	20000060 	.word	0x20000060

08002834 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002834:	4b01      	ldr	r3, [pc, #4]	; (800283c <HAL_RCC_GetHCLKFreq+0x8>)
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000068 	.word	0x20000068

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002844:	f8df e18c 	ldr.w	lr, [pc, #396]	; 80029d4 <HAL_GPIO_Init+0x194>
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002848:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80029d8 <HAL_GPIO_Init+0x198>
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284e:	b085      	sub	sp, #20
 8002850:	46f0      	mov	r8, lr
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002854:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002856:	2201      	movs	r2, #1
 8002858:	fa02 f403 	lsl.w	r4, r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800285c:	9a01      	ldr	r2, [sp, #4]
 800285e:	ea34 0202 	bics.w	r2, r4, r2
 8002862:	f040 80ad 	bne.w	80029c0 <HAL_GPIO_Init+0x180>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002866:	684a      	ldr	r2, [r1, #4]
 8002868:	f022 0710 	bic.w	r7, r2, #16
 800286c:	1e7d      	subs	r5, r7, #1
 800286e:	2d01      	cmp	r5, #1
 8002870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002874:	d812      	bhi.n	800289c <HAL_GPIO_Init+0x5c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002876:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002878:	2503      	movs	r5, #3
 800287a:	fa05 f50c 	lsl.w	r5, r5, ip
 800287e:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002882:	68cd      	ldr	r5, [r1, #12]
 8002884:	fa05 f50c 	lsl.w	r5, r5, ip
 8002888:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800288a:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800288e:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002892:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002896:	409e      	lsls	r6, r3
 8002898:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800289a:	6045      	str	r5, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800289c:	2603      	movs	r6, #3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
        GPIOx->OTYPER = temp;
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028a0:	fa06 f60c 	lsl.w	r6, r6, ip
 80028a4:	43f6      	mvns	r6, r6
 80028a6:	ea05 0a06 	and.w	sl, r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028aa:	688d      	ldr	r5, [r1, #8]
 80028ac:	fa05 f50c 	lsl.w	r5, r5, ip
 80028b0:	ea45 050a 	orr.w	r5, r5, sl
      GPIOx->PUPDR = temp;

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b4:	2f02      	cmp	r7, #2

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
      temp |= ((GPIO_Init->Pull) << (position * 2U));
      GPIOx->PUPDR = temp;
 80028b6:	60c5      	str	r5, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b8:	d114      	bne.n	80028e4 <HAL_GPIO_Init+0xa4>
 80028ba:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80028be:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c2:	f003 0b07 	and.w	fp, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80028ce:	250f      	movs	r5, #15
 80028d0:	fa05 f50b 	lsl.w	r5, r5, fp
 80028d4:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d8:	690f      	ldr	r7, [r1, #16]
 80028da:	fa07 f70b 	lsl.w	r7, r7, fp
 80028de:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 80028e0:	f8ca 7020 	str.w	r7, [sl, #32]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e6:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e8:	f002 0503 	and.w	r5, r2, #3
 80028ec:	fa05 fc0c 	lsl.w	ip, r5, ip
 80028f0:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f4:	00d5      	lsls	r5, r2, #3

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80028f6:	6006      	str	r6, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f8:	d562      	bpl.n	80029c0 <HAL_GPIO_Init+0x180>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	f04f 0b00 	mov.w	fp, #0
 80028fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8002902:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002906:	4d32      	ldr	r5, [pc, #200]	; (80029d0 <HAL_GPIO_Init+0x190>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002908:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800290c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002910:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002914:	f023 0703 	bic.w	r7, r3, #3
 8002918:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800291c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002920:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002924:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002926:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002930:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002934:	260f      	movs	r6, #15
 8002936:	fa06 f60c 	lsl.w	r6, r6, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293a:	42a8      	cmp	r0, r5
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800293c:	ea2a 0606 	bic.w	r6, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002940:	d012      	beq.n	8002968 <HAL_GPIO_Init+0x128>
 8002942:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002946:	42a8      	cmp	r0, r5
 8002948:	d010      	beq.n	800296c <HAL_GPIO_Init+0x12c>
 800294a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800294e:	42a8      	cmp	r0, r5
 8002950:	d00e      	beq.n	8002970 <HAL_GPIO_Init+0x130>
 8002952:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002956:	42a8      	cmp	r0, r5
 8002958:	d00c      	beq.n	8002974 <HAL_GPIO_Init+0x134>
 800295a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800295e:	42a8      	cmp	r0, r5
 8002960:	bf14      	ite	ne
 8002962:	2507      	movne	r5, #7
 8002964:	2504      	moveq	r5, #4
 8002966:	e006      	b.n	8002976 <HAL_GPIO_Init+0x136>
 8002968:	465d      	mov	r5, fp
 800296a:	e004      	b.n	8002976 <HAL_GPIO_Init+0x136>
 800296c:	2501      	movs	r5, #1
 800296e:	e002      	b.n	8002976 <HAL_GPIO_Init+0x136>
 8002970:	2502      	movs	r5, #2
 8002972:	e000      	b.n	8002976 <HAL_GPIO_Init+0x136>
 8002974:	2503      	movs	r5, #3
 8002976:	fa05 f50c 	lsl.w	r5, r5, ip
 800297a:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297c:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297e:	f8de 5000 	ldr.w	r5, [lr]
        temp &= ~((uint32_t)iocurrent);
 8002982:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002984:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8002986:	bf54      	ite	pl
 8002988:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800298a:	4325      	orrmi	r5, r4
        }
        EXTI->IMR = temp;
 800298c:	f8c8 5000 	str.w	r5, [r8]

        temp = EXTI->EMR;
 8002990:	f8d8 5004 	ldr.w	r5, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002994:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8002996:	bf54      	ite	pl
 8002998:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800299a:	4325      	orrmi	r5, r4
        }
        EXTI->EMR = temp;
 800299c:	f8ce 5004 	str.w	r5, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a0:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a4:	02d7      	lsls	r7, r2, #11
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80029a6:	bf54      	ite	pl
 80029a8:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80029aa:	4325      	orrmi	r5, r4
        }
        EXTI->RTSR = temp;
 80029ac:	f8c8 5008 	str.w	r5, [r8, #8]

        temp = EXTI->FTSR;
 80029b0:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b4:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80029b6:	bf54      	ite	pl
 80029b8:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80029ba:	4325      	orrmi	r5, r4
        }
        EXTI->FTSR = temp;
 80029bc:	f8ce 500c 	str.w	r5, [lr, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c0:	3301      	adds	r3, #1
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	f47f af47 	bne.w	8002856 <HAL_GPIO_Init+0x16>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80029c8:	b005      	add	sp, #20
 80029ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ce:	bf00      	nop
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40013c00 	.word	0x40013c00
 80029d8:	40023800 	.word	0x40023800

080029dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	b902      	cbnz	r2, 80029e0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029de:	0409      	lsls	r1, r1, #16
 80029e0:	6181      	str	r1, [r0, #24]
 80029e2:	4770      	bx	lr

080029e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029e8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80029ec:	6959      	ldr	r1, [r3, #20]
 80029ee:	4201      	tst	r1, r0
 80029f0:	d002      	beq.n	80029f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029f4:	f7ff fff6 	bl	80029e4 <HAL_GPIO_EXTI_Callback>
 80029f8:	bd08      	pop	{r3, pc}
 80029fa:	bf00      	nop
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a00:	6803      	ldr	r3, [r0, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a08:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a0c:	2118      	movs	r1, #24
 8002a0e:	3a10      	subs	r2, #16
 8002a10:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a14:	4904      	ldr	r1, [pc, #16]	; (8002a28 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002a16:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a18:	bf88      	it	hi
 8002a1a:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a1c:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a1e:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a20:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002a22:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	08006de6 	.word	0x08006de6

08002a2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f000 f9d4 	bl	8002ddc <HAL_GetTick>
 8002a34:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a36:	2c00      	cmp	r4, #0
 8002a38:	d064      	beq.n	8002b04 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a40:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a42:	2302      	movs	r3, #2
 8002a44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a48:	6813      	ldr	r3, [r2, #0]
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a50:	6820      	ldr	r0, [r4, #0]
 8002a52:	6803      	ldr	r3, [r0, #0]
 8002a54:	07d9      	lsls	r1, r3, #31
 8002a56:	d508      	bpl.n	8002a6a <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a58:	f000 f9c0 	bl	8002ddc <HAL_GetTick>
 8002a5c:	1b40      	subs	r0, r0, r5
 8002a5e:	2805      	cmp	r0, #5
 8002a60:	d9f6      	bls.n	8002a50 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a62:	2320      	movs	r3, #32
 8002a64:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a66:	2003      	movs	r0, #3
 8002a68:	e051      	b.n	8002b0e <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a6a:	6803      	ldr	r3, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6e:	6861      	ldr	r1, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a70:	69a5      	ldr	r5, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a72:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a74:	68a3      	ldr	r3, [r4, #8]
 8002a76:	4319      	orrs	r1, r3
 8002a78:	68e3      	ldr	r3, [r4, #12]
 8002a7a:	4319      	orrs	r1, r3
 8002a7c:	6923      	ldr	r3, [r4, #16]
 8002a7e:	4319      	orrs	r1, r3
 8002a80:	6963      	ldr	r3, [r4, #20]
 8002a82:	430b      	orrs	r3, r1
 8002a84:	69e1      	ldr	r1, [r4, #28]
 8002a86:	432b      	orrs	r3, r5
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6a21      	ldr	r1, [r4, #32]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a92:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a94:	bf01      	itttt	eq
 8002a96:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 8002a98:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8002a9a:	4331      	orreq	r1, r6
 8002a9c:	430b      	orreq	r3, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a9e:	6003      	str	r3, [r0, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002aa0:	6943      	ldr	r3, [r0, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa2:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa4:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa8:	ea43 0302 	orr.w	r3, r3, r2

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aac:	d11c      	bne.n	8002ae8 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ab0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ab2:	4313      	orrs	r3, r2
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ab4:	b1c1      	cbz	r1, 8002ae8 <HAL_DMA_Init+0xbc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ab6:	b925      	cbnz	r5, 8002ac2 <HAL_DMA_Init+0x96>
  {
    switch (tmp)
 8002ab8:	2a01      	cmp	r2, #1
 8002aba:	d00b      	beq.n	8002ad4 <HAL_DMA_Init+0xa8>
 8002abc:	d312      	bcc.n	8002ae4 <HAL_DMA_Init+0xb8>
 8002abe:	2a02      	cmp	r2, #2
 8002ac0:	e00f      	b.n	8002ae2 <HAL_DMA_Init+0xb6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ac2:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002ac6:	d109      	bne.n	8002adc <HAL_DMA_Init+0xb0>
  {
    switch (tmp)
 8002ac8:	2a03      	cmp	r2, #3
 8002aca:	d80d      	bhi.n	8002ae8 <HAL_DMA_Init+0xbc>
 8002acc:	e8df f002 	tbb	[pc, r2]
 8002ad0:	021c0a1c 	.word	0x021c0a1c
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad4:	f1b1 7fc0 	cmp.w	r1, #25165824	; 0x1800000
 8002ad8:	d106      	bne.n	8002ae8 <HAL_DMA_Init+0xbc>
 8002ada:	e015      	b.n	8002b08 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002adc:	2a02      	cmp	r2, #2
 8002ade:	d913      	bls.n	8002b08 <HAL_DMA_Init+0xdc>
 8002ae0:	2a03      	cmp	r2, #3
 8002ae2:	d101      	bne.n	8002ae8 <HAL_DMA_Init+0xbc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae4:	01ca      	lsls	r2, r1, #7
 8002ae6:	d40f      	bmi.n	8002b08 <HAL_DMA_Init+0xdc>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ae8:	6143      	str	r3, [r0, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff ff88 	bl	8002a00 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002af2:	233f      	movs	r3, #63	; 0x3f
 8002af4:	4093      	lsls	r3, r2
 8002af6:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af8:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002afa:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afc:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002afe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002b04:	2001      	movs	r0, #1
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b08:	2340      	movs	r3, #64	; 0x40
 8002b0a:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	f010803f 	.word	0xf010803f

08002b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b24:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8002b26:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b28:	2308      	movs	r3, #8
 8002b2a:	4093      	lsls	r3, r2
 8002b2c:	421e      	tst	r6, r3
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b2e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b30:	d00c      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b32:	6801      	ldr	r1, [r0, #0]
 8002b34:	6808      	ldr	r0, [r1, #0]
 8002b36:	0740      	lsls	r0, r0, #29
 8002b38:	d508      	bpl.n	8002b4c <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b3a:	6808      	ldr	r0, [r1, #0]
 8002b3c:	f020 0004 	bic.w	r0, r0, #4
 8002b40:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b42:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	4093      	lsls	r3, r2
 8002b50:	421e      	tst	r6, r3
 8002b52:	d008      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b54:	6821      	ldr	r1, [r4, #0]
 8002b56:	6949      	ldr	r1, [r1, #20]
 8002b58:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b5a:	bf41      	itttt	mi
 8002b5c:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b5e:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8002b60:	f043 0302 	orrmi.w	r3, r3, #2
 8002b64:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b66:	2304      	movs	r3, #4
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	421e      	tst	r6, r3
 8002b6c:	d008      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b6e:	6821      	ldr	r1, [r4, #0]
 8002b70:	6809      	ldr	r1, [r1, #0]
 8002b72:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b74:	bf41      	itttt	mi
 8002b76:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b78:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8002b7a:	f043 0304 	orrmi.w	r3, r3, #4
 8002b7e:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	2310      	movs	r3, #16
 8002b82:	fa03 f202 	lsl.w	r2, r3, r2
 8002b86:	4216      	tst	r6, r2
 8002b88:	d017      	beq.n	8002bba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	6819      	ldr	r1, [r3, #0]
 8002b8e:	0709      	lsls	r1, r1, #28
 8002b90:	d513      	bpl.n	8002bba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b92:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	0350      	lsls	r0, r2, #13
 8002b98:	d504      	bpl.n	8002ba4 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0319      	lsls	r1, r3, #12
 8002b9e:	d508      	bpl.n	8002bb2 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ba0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ba2:	e007      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba8:	bf5e      	ittt	pl
 8002baa:	681a      	ldrpl	r2, [r3, #0]
 8002bac:	f022 0208 	bicpl.w	r2, r2, #8
 8002bb0:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bb4:	b10b      	cbz	r3, 8002bba <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	408a      	lsls	r2, r1
 8002bc0:	4216      	tst	r6, r2
 8002bc2:	d03b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	06c6      	lsls	r6, r0, #27
 8002bca:	d537      	bpl.n	8002c3c <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bcc:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bce:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002bd2:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd4:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bd6:	d119      	bne.n	8002c0c <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd8:	f022 0216 	bic.w	r2, r2, #22
 8002bdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002be8:	b90a      	cbnz	r2, 8002bee <HAL_DMA_IRQHandler+0xd6>
 8002bea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002bec:	b11a      	cbz	r2, 8002bf6 <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f022 0208 	bic.w	r2, r2, #8
 8002bf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf6:	233f      	movs	r3, #63	; 0x3f
 8002bf8:	408b      	lsls	r3, r1
 8002bfa:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002c0a:	e037      	b.n	8002c7c <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c0c:	0350      	lsls	r0, r2, #13
 8002c0e:	d504      	bpl.n	8002c1a <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0319      	lsls	r1, r3, #12
 8002c14:	d40e      	bmi.n	8002c34 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c18:	e00d      	b.n	8002c36 <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002c20:	d108      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	f021 0110 	bic.w	r1, r1, #16
 8002c28:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c2c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c36:	b10b      	cbz	r3, 8002c3c <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c38:	4620      	mov	r0, r4
 8002c3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c3e:	b303      	cbz	r3, 8002c82 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c42:	07da      	lsls	r2, r3, #31
 8002c44:	d519      	bpl.n	8002c7a <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c46:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c48:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c4a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c56:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002c5a:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8002c5e:	9b01      	ldr	r3, [sp, #4]
 8002c60:	3301      	adds	r3, #1
 8002c62:	429f      	cmp	r7, r3
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	d302      	bcc.n	8002c6e <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c68:	6813      	ldr	r3, [r2, #0]
 8002c6a:	07db      	lsls	r3, r3, #31
 8002c6c:	d4f7      	bmi.n	8002c5e <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c7c:	b10b      	cbz	r3, 8002c82 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c7e:	4620      	mov	r0, r4
 8002c80:	4798      	blx	r3
    }
  }
}
 8002c82:	b003      	add	sp, #12
 8002c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000068 	.word	0x20000068

08002c8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c8c:	4a07      	ldr	r2, [pc, #28]	; (8002cac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c8e:	68d3      	ldr	r3, [r2, #12]
 8002c90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	0c1b      	lsrs	r3, r3, #16
 8002c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002c9c:	0200      	lsls	r0, r0, #8
 8002c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002ca6:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002ca8:	60d3      	str	r3, [r2, #12]
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <HAL_NVIC_SetPriority+0x60>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb8:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cba:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cbe:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc0:	2c04      	cmp	r4, #4
 8002cc2:	bf28      	it	cs
 8002cc4:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	2d06      	cmp	r5, #6

  return (
 8002cc8:	f04f 0501 	mov.w	r5, #1
 8002ccc:	fa05 f404 	lsl.w	r4, r5, r4
 8002cd0:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd4:	bf8c      	ite	hi
 8002cd6:	3b03      	subhi	r3, #3
 8002cd8:	2300      	movls	r3, #0

  return (
 8002cda:	400c      	ands	r4, r1
 8002cdc:	409c      	lsls	r4, r3
 8002cde:	fa05 f303 	lsl.w	r3, r5, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	401a      	ands	r2, r3
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002ce8:	ea42 0204 	orr.w	r2, r2, r4
 8002cec:	ea4f 1202 	mov.w	r2, r2, lsl #4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf0:	bfad      	iteet	ge
 8002cf2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	f000 000f 	andlt.w	r0, r0, #15
 8002cfa:	4b06      	ldrlt	r3, [pc, #24]	; (8002d14 <HAL_NVIC_SetPriority+0x64>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d00:	bfb5      	itete	lt
 8002d02:	b2d2      	uxtblt	r2, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	b2d2      	uxtbge	r2, r2
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d06:	541a      	strblt	r2, [r3, r0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d08:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002d0c:	bd30      	pop	{r4, r5, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00
 8002d14:	e000ed14 	.word	0xe000ed14

08002d18 <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	db08      	blt.n	8002d2e <HAL_NVIC_EnableIRQ+0x16>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1c:	0942      	lsrs	r2, r0, #5
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f000 001f 	and.w	r0, r0, #31
 8002d24:	fa03 f000 	lsl.w	r0, r3, r0
 8002d28:	4b01      	ldr	r3, [pc, #4]	; (8002d30 <HAL_NVIC_EnableIRQ+0x18>)
 8002d2a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100

08002d34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d34:	3801      	subs	r0, #1
 8002d36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002d3a:	d20a      	bcs.n	8002d52 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_SYSTICK_Config+0x24>)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d40:	6058      	str	r0, [r3, #4]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	21f0      	movs	r1, #240	; 0xf0
 8002d44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d48:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d4c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d52:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_InitTick+0x3c>)
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_InitTick+0x40>)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d66:	4605      	mov	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d68:	7818      	ldrb	r0, [r3, #0]
 8002d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d72:	6810      	ldr	r0, [r2, #0]
 8002d74:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d78:	f7ff ffdc 	bl	8002d34 <HAL_SYSTICK_Config>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	b958      	cbnz	r0, 8002d98 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d80:	2d0f      	cmp	r5, #15
 8002d82:	d809      	bhi.n	8002d98 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d84:	4602      	mov	r2, r0
 8002d86:	4629      	mov	r1, r5
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f7ff ff90 	bl	8002cb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <HAL_InitTick+0x44>)
 8002d92:	4620      	mov	r0, r4
 8002d94:	601d      	str	r5, [r3, #0]
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
  {
    return HAL_ERROR;
 8002d98:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002d9a:	bd38      	pop	{r3, r4, r5, pc}
 8002d9c:	20000068 	.word	0x20000068
 8002da0:	20000064 	.word	0x20000064
 8002da4:	20000060 	.word	0x20000060

08002da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_Init+0x30>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dba:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f7ff ff61 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dca:	200f      	movs	r0, #15
 8002dcc:	f7ff ffc8 	bl	8002d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd0:	f7fe f820 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	bd08      	pop	{r3, pc}
 8002dd8:	40023c00 	.word	0x40023c00

08002ddc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ddc:	4b01      	ldr	r3, [pc, #4]	; (8002de4 <HAL_GetTick+0x8>)
 8002dde:	6818      	ldr	r0, [r3, #0]
}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20009aac 	.word	0x20009aac

08002de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff fff6 	bl	8002ddc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002df2:	bf1c      	itt	ne
 8002df4:	4b05      	ldrne	r3, [pc, #20]	; (8002e0c <HAL_Delay+0x24>)
 8002df6:	781b      	ldrbne	r3, [r3, #0]
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 8002df8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	bf18      	it	ne
 8002dfc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dfe:	f7ff ffed 	bl	8002ddc <HAL_GetTick>
 8002e02:	1b40      	subs	r0, r0, r5
 8002e04:	4284      	cmp	r4, r0
 8002e06:	d8fa      	bhi.n	8002dfe <HAL_Delay+0x16>
  {
  }
}
 8002e08:	bd38      	pop	{r3, r4, r5, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000064 	.word	0x20000064

08002e10 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e10:	6a03      	ldr	r3, [r0, #32]
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e18:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e1c:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e1e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e20:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e22:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e26:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e28:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e2c:	688b      	ldr	r3, [r1, #8]
 8002e2e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e30:	4c0a      	ldr	r4, [pc, #40]	; (8002e5c <TIM_OC1_SetConfig+0x4c>)
 8002e32:	42a0      	cmp	r0, r4
 8002e34:	d10b      	bne.n	8002e4e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e36:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e38:	694e      	ldr	r6, [r1, #20]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e3a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e3e:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e40:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e46:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e48:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e4c:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e4e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e50:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e52:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e54:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e56:	6203      	str	r3, [r0, #32]
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000

08002e60 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e60:	6a03      	ldr	r3, [r0, #32]
 8002e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e66:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e68:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e6a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e6e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e70:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e72:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e76:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e78:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e82:	4d0c      	ldr	r5, [pc, #48]	; (8002eb4 <TIM_OC3_SetConfig+0x54>)
 8002e84:	42a8      	cmp	r0, r5
 8002e86:	d10e      	bne.n	8002ea6 <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e88:	68cd      	ldr	r5, [r1, #12]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e92:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e94:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e98:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e9c:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ea2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ea8:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eaa:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eac:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eae:	6203      	str	r3, [r0, #32]
 8002eb0:	bd30      	pop	{r4, r5, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000

08002eb8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eb8:	6a03      	ldr	r3, [r0, #32]
 8002eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ebe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec0:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ec6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ec8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ece:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ed2:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ed8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002edc:	4d06      	ldr	r5, [pc, #24]	; (8002ef8 <TIM_OC4_SetConfig+0x40>)
 8002ede:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee0:	bf02      	ittt	eq
 8002ee2:	694d      	ldreq	r5, [r1, #20]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ee4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eee:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ef0:	684a      	ldr	r2, [r1, #4]
 8002ef2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef4:	6203      	str	r3, [r0, #32]
 8002ef6:	bd30      	pop	{r4, r5, pc}
 8002ef8:	40010000 	.word	0x40010000

08002efc <HAL_TIM_OC_MspInit>:
 8002efc:	4770      	bx	lr

08002efe <HAL_TIM_PWM_MspInit>:
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIM_PeriodElapsedCallback>:
 8002f00:	4770      	bx	lr

08002f02 <HAL_TIM_OC_DelayElapsedCallback>:
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_IC_CaptureCallback>:
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIM_TriggerCallback>:
 8002f08:	4770      	bx	lr

08002f0a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f0a:	6803      	ldr	r3, [r0, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f10:	b510      	push	{r4, lr}
 8002f12:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f14:	d514      	bpl.n	8002f40 <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	0792      	lsls	r2, r2, #30
 8002f1a:	d511      	bpl.n	8002f40 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f1c:	f06f 0202 	mvn.w	r2, #2
 8002f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f22:	699b      	ldr	r3, [r3, #24]
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f24:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f26:	079b      	lsls	r3, r3, #30
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f28:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f2a:	d002      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x28>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f2c:	f7ff ffea 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002f30:	e004      	b.n	8002f3c <HAL_TIM_IRQHandler+0x32>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	f7ff ffe6 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff ffe5 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	0750      	lsls	r0, r2, #29
 8002f46:	d516      	bpl.n	8002f76 <HAL_TIM_IRQHandler+0x6c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	0751      	lsls	r1, r2, #29
 8002f4c:	d513      	bpl.n	8002f76 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f4e:	f06f 0204 	mvn.w	r2, #4
 8002f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f54:	699b      	ldr	r3, [r3, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f56:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f58:	f413 7f40 	tst.w	r3, #768	; 0x300
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	4620      	mov	r0, r4
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f60:	d002      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x5e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	f7ff ffcf 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002f66:	e004      	b.n	8002f72 <HAL_TIM_IRQHandler+0x68>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f68:	f7ff ffcb 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7ff ffca 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	2300      	movs	r3, #0
 8002f74:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	0712      	lsls	r2, r2, #28
 8002f7c:	d515      	bpl.n	8002faa <HAL_TIM_IRQHandler+0xa0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	0710      	lsls	r0, r2, #28
 8002f82:	d512      	bpl.n	8002faa <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f84:	f06f 0208 	mvn.w	r2, #8
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f8a:	69db      	ldr	r3, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f8c:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f8e:	0799      	lsls	r1, r3, #30
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f90:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	4620      	mov	r0, r4
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f94:	d002      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x92>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	f7ff ffb5 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002f9a:	e004      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9c:	f7ff ffb1 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7ff ffb0 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	06d2      	lsls	r2, r2, #27
 8002fb0:	d516      	bpl.n	8002fe0 <HAL_TIM_IRQHandler+0xd6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	06d0      	lsls	r0, r2, #27
 8002fb6:	d513      	bpl.n	8002fe0 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb8:	f06f 0210 	mvn.w	r2, #16
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fbe:	69db      	ldr	r3, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc0:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc2:	f413 7f40 	tst.w	r3, #768	; 0x300
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc8:	4620      	mov	r0, r4
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fca:	d002      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0xc8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fcc:	f7ff ff9a 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e004      	b.n	8002fdc <HAL_TIM_IRQHandler+0xd2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	f7ff ff96 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff ff95 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	07d1      	lsls	r1, r2, #31
 8002fe6:	d508      	bpl.n	8002ffa <HAL_TIM_IRQHandler+0xf0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	07d2      	lsls	r2, r2, #31
 8002fec:	d505      	bpl.n	8002ffa <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fee:	f06f 0201 	mvn.w	r2, #1
 8002ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7ff ff83 	bl	8002f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	0610      	lsls	r0, r2, #24
 8003000:	d508      	bpl.n	8003014 <HAL_TIM_IRQHandler+0x10a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	0611      	lsls	r1, r2, #24
 8003006:	d505      	bpl.n	8003014 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300e:	4620      	mov	r0, r4
 8003010:	f000 fa79 	bl	8003506 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	0652      	lsls	r2, r2, #25
 800301a:	d508      	bpl.n	800302e <HAL_TIM_IRQHandler+0x124>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	0650      	lsls	r0, r2, #25
 8003020:	d505      	bpl.n	800302e <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003022:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff ff6d 	bl	8002f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	0691      	lsls	r1, r2, #26
 8003034:	d50a      	bpl.n	800304c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	0692      	lsls	r2, r2, #26
 800303a:	d507      	bpl.n	800304c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800303c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003040:	4620      	mov	r0, r4
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003042:	611a      	str	r2, [r3, #16]
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003048:	f000 ba5c 	b.w	8003504 <HAL_TIMEx_CommutCallback>
 800304c:	bd10      	pop	{r4, pc}
	...

08003050 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003050:	4a24      	ldr	r2, [pc, #144]	; (80030e4 <TIM_Base_SetConfig+0x94>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003052:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003054:	4290      	cmp	r0, r2
 8003056:	d00e      	beq.n	8003076 <TIM_Base_SetConfig+0x26>
 8003058:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800305c:	d00b      	beq.n	8003076 <TIM_Base_SetConfig+0x26>
 800305e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003062:	4290      	cmp	r0, r2
 8003064:	d007      	beq.n	8003076 <TIM_Base_SetConfig+0x26>
 8003066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800306a:	4290      	cmp	r0, r2
 800306c:	d003      	beq.n	8003076 <TIM_Base_SetConfig+0x26>
 800306e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003072:	4290      	cmp	r0, r2
 8003074:	d115      	bne.n	80030a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003076:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800307c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307e:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <TIM_Base_SetConfig+0x94>)
 8003080:	4290      	cmp	r0, r2
 8003082:	d019      	beq.n	80030b8 <TIM_Base_SetConfig+0x68>
 8003084:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003088:	d016      	beq.n	80030b8 <TIM_Base_SetConfig+0x68>
 800308a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800308e:	4290      	cmp	r0, r2
 8003090:	d012      	beq.n	80030b8 <TIM_Base_SetConfig+0x68>
 8003092:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003096:	4290      	cmp	r0, r2
 8003098:	d00e      	beq.n	80030b8 <TIM_Base_SetConfig+0x68>
 800309a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800309e:	4290      	cmp	r0, r2
 80030a0:	d00a      	beq.n	80030b8 <TIM_Base_SetConfig+0x68>
 80030a2:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <TIM_Base_SetConfig+0x98>)
 80030a4:	4290      	cmp	r0, r2
 80030a6:	d007      	beq.n	80030b8 <TIM_Base_SetConfig+0x68>
 80030a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ac:	4290      	cmp	r0, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_Base_SetConfig+0x68>
 80030b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030b4:	4290      	cmp	r0, r2
 80030b6:	d103      	bne.n	80030c0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b8:	68ca      	ldr	r2, [r1, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030be:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c0:	694a      	ldr	r2, [r1, #20]
 80030c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80030c8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ca:	688b      	ldr	r3, [r1, #8]
 80030cc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030ce:	680b      	ldr	r3, [r1, #0]
 80030d0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <TIM_Base_SetConfig+0x94>)
 80030d4:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d6:	bf04      	itt	eq
 80030d8:	690b      	ldreq	r3, [r1, #16]
 80030da:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030dc:	2301      	movs	r3, #1
 80030de:	6143      	str	r3, [r0, #20]
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40014000 	.word	0x40014000

080030ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ec:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ee:	4604      	mov	r4, r0
 80030f0:	b1a0      	cbz	r0, 800311c <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030fa:	b91b      	cbnz	r3, 8003104 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003100:	f7fd ff38 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	2302      	movs	r3, #2
 8003106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800310a:	6820      	ldr	r0, [r4, #0]
 800310c:	1d21      	adds	r1, r4, #4
 800310e:	f7ff ff9f 	bl	8003050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003112:	2301      	movs	r3, #1
 8003114:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8003118:	2000      	movs	r0, #0
 800311a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 800311c:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;

  return HAL_OK;
}
 800311e:	bd10      	pop	{r4, pc}

08003120 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003120:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003122:	4604      	mov	r4, r0
 8003124:	b1a0      	cbz	r0, 8003150 <HAL_TIM_OC_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003126:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800312a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800312e:	b91b      	cbnz	r3, 8003138 <HAL_TIM_OC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003130:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003134:	f7ff fee2 	bl	8002efc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	2302      	movs	r3, #2
 800313a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800313e:	6820      	ldr	r0, [r4, #0]
 8003140:	1d21      	adds	r1, r4, #4
 8003142:	f7ff ff85 	bl	8003050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003146:	2301      	movs	r3, #1
 8003148:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 800314c:	2000      	movs	r0, #0
 800314e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8003150:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8003152:	bd10      	pop	{r4, pc}

08003154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003154:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003156:	4604      	mov	r4, r0
 8003158:	b1a0      	cbz	r0, 8003184 <HAL_TIM_PWM_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800315e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003162:	b91b      	cbnz	r3, 800316c <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003164:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003168:	f7ff fec9 	bl	8002efe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	2302      	movs	r3, #2
 800316e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	1d21      	adds	r1, r4, #4
 8003176:	f7ff ff6b 	bl	8003050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317a:	2301      	movs	r3, #1
 800317c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8003180:	2000      	movs	r0, #0
 8003182:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8003184:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8003186:	bd10      	pop	{r4, pc}

08003188 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003188:	6a03      	ldr	r3, [r0, #32]
 800318a:	f023 0310 	bic.w	r3, r3, #16
 800318e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003190:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003192:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003194:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003196:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003198:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800319a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800319e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031a2:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a4:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031ac:	4d0b      	ldr	r5, [pc, #44]	; (80031dc <TIM_OC2_SetConfig+0x54>)
 80031ae:	42a8      	cmp	r0, r5
 80031b0:	d10e      	bne.n	80031d0 <TIM_OC2_SetConfig+0x48>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b2:	68cd      	ldr	r5, [r1, #12]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031bc:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031c6:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031cc:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031d2:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031d4:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031d6:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d8:	6203      	str	r3, [r0, #32]
 80031da:	bd30      	pop	{r4, r5, pc}
 80031dc:	40010000 	.word	0x40010000

080031e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80031e0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031e6:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80031e8:	4604      	mov	r4, r0
 80031ea:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ee:	d024      	beq.n	800323a <HAL_TIM_OC_ConfigChannel+0x5a>
 80031f0:	2301      	movs	r3, #1
 80031f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031f6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80031fa:	461d      	mov	r5, r3

  switch (Channel)
 80031fc:	2a0c      	cmp	r2, #12
 80031fe:	d817      	bhi.n	8003230 <HAL_TIM_OC_ConfigChannel+0x50>
 8003200:	e8df f002 	tbb	[pc, r2]
 8003204:	16161607 	.word	0x16161607
 8003208:	1616160b 	.word	0x1616160b
 800320c:	1616160f 	.word	0x1616160f
 8003210:	13          	.byte	0x13
 8003211:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003212:	6820      	ldr	r0, [r4, #0]
 8003214:	f7ff fdfc 	bl	8002e10 <TIM_OC1_SetConfig>
      break;
 8003218:	e00a      	b.n	8003230 <HAL_TIM_OC_ConfigChannel+0x50>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800321a:	6820      	ldr	r0, [r4, #0]
 800321c:	f7ff ffb4 	bl	8003188 <TIM_OC2_SetConfig>
      break;
 8003220:	e006      	b.n	8003230 <HAL_TIM_OC_ConfigChannel+0x50>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	f7ff fe1c 	bl	8002e60 <TIM_OC3_SetConfig>
      break;
 8003228:	e002      	b.n	8003230 <HAL_TIM_OC_ConfigChannel+0x50>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800322a:	6820      	ldr	r0, [r4, #0]
 800322c:	f7ff fe44 	bl	8002eb8 <TIM_OC4_SetConfig>
      break;
  }

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003230:	2000      	movs	r0, #0

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8003232:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003236:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 800323a:	bd38      	pop	{r3, r4, r5, pc}

0800323c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800323c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800323e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003242:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003244:	4604      	mov	r4, r0
 8003246:	460d      	mov	r5, r1
 8003248:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800324c:	d058      	beq.n	8003300 <HAL_TIM_PWM_ConfigChannel+0xc4>
 800324e:	2301      	movs	r3, #1
 8003250:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

  switch (Channel)
 8003258:	2a0c      	cmp	r2, #12
 800325a:	d84b      	bhi.n	80032f4 <HAL_TIM_PWM_ConfigChannel+0xb8>
 800325c:	e8df f002 	tbb	[pc, r2]
 8003260:	4a4a4a07 	.word	0x4a4a4a07
 8003264:	4a4a4a17 	.word	0x4a4a4a17
 8003268:	4a4a4a29 	.word	0x4a4a4a29
 800326c:	39          	.byte	0x39
 800326d:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800326e:	6820      	ldr	r0, [r4, #0]
 8003270:	f7ff fdce 	bl	8002e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	f042 0208 	orr.w	r2, r2, #8
 800327c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800327e:	699a      	ldr	r2, [r3, #24]
 8003280:	f022 0204 	bic.w	r2, r2, #4
 8003284:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003286:	6999      	ldr	r1, [r3, #24]
 8003288:	692a      	ldr	r2, [r5, #16]
 800328a:	430a      	orrs	r2, r1
 800328c:	e00f      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x72>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	f7ff ff7a 	bl	8003188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003294:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003296:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800329e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032ae:	619a      	str	r2, [r3, #24]
      break;
 80032b0:	e020      	b.n	80032f4 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032b2:	6820      	ldr	r0, [r4, #0]
 80032b4:	f7ff fdd4 	bl	8002e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	f042 0208 	orr.w	r2, r2, #8
 80032c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	f022 0204 	bic.w	r2, r2, #4
 80032c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ca:	69d9      	ldr	r1, [r3, #28]
 80032cc:	692a      	ldr	r2, [r5, #16]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	e00f      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0xb6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d2:	6820      	ldr	r0, [r4, #0]
 80032d4:	f7ff fdf0 	bl	8002eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032d8:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032da:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032f2:	61da      	str	r2, [r3, #28]

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80032f4:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80032f6:	2000      	movs	r0, #0

    default:
      break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80032f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032fc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8003300:	bd38      	pop	{r3, r4, r5, pc}

08003302 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003302:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003304:	6884      	ldr	r4, [r0, #8]
 8003306:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800330a:	4321      	orrs	r1, r4
 800330c:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800330e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003312:	6083      	str	r3, [r0, #8]
 8003314:	bd10      	pop	{r4, pc}

08003316 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003316:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800331a:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4604      	mov	r4, r0
 8003320:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003324:	f000 808d 	beq.w	8003442 <HAL_TIM_ConfigClockSource+0x12c>

  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800332c:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800332e:	2301      	movs	r3, #1
 8003330:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003334:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800333e:	6083      	str	r3, [r0, #8]

  switch (sClockSourceConfig->ClockSource)
 8003340:	680b      	ldr	r3, [r1, #0]
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	d059      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0xe4>
 8003346:	d80a      	bhi.n	800335e <HAL_TIM_ConfigClockSource+0x48>
 8003348:	2b10      	cmp	r3, #16
 800334a:	d06d      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x112>
 800334c:	d802      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x3e>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d06a      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x112>
 8003352:	e070      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x120>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d067      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x112>
 8003358:	2b30      	cmp	r3, #48	; 0x30
 800335a:	d065      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x112>
 800335c:	e06b      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x120>
 800335e:	2b60      	cmp	r3, #96	; 0x60
 8003360:	d033      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0xb4>
 8003362:	d818      	bhi.n	8003396 <HAL_TIM_ConfigClockSource+0x80>
 8003364:	2b50      	cmp	r3, #80	; 0x50
 8003366:	d166      	bne.n	8003436 <HAL_TIM_ConfigClockSource+0x120>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003368:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336a:	684d      	ldr	r5, [r1, #4]
 800336c:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800336e:	6a01      	ldr	r1, [r0, #32]
 8003370:	f021 0101 	bic.w	r1, r1, #1
 8003374:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003376:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003378:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800337c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8003380:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003382:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003386:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003388:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800338a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800338c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003390:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8003394:	e04e      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x11e>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8003396:	2b70      	cmp	r3, #112	; 0x70
 8003398:	d00c      	beq.n	80033b4 <HAL_TIM_ConfigClockSource+0x9e>
 800339a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339e:	d14a      	bne.n	8003436 <HAL_TIM_ConfigClockSource+0x120>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033a0:	68cb      	ldr	r3, [r1, #12]
 80033a2:	684a      	ldr	r2, [r1, #4]
 80033a4:	6889      	ldr	r1, [r1, #8]
 80033a6:	f7ff ffac 	bl	8003302 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	6893      	ldr	r3, [r2, #8]
 80033ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b2:	e008      	b.n	80033c6 <HAL_TIM_ConfigClockSource+0xb0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033b4:	68cb      	ldr	r3, [r1, #12]
 80033b6:	684a      	ldr	r2, [r1, #4]
 80033b8:	6889      	ldr	r1, [r1, #8]
 80033ba:	f7ff ffa2 	bl	8003302 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033c6:	6093      	str	r3, [r2, #8]
      break;
 80033c8:	e035      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x120>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ca:	684d      	ldr	r5, [r1, #4]
 80033cc:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ce:	6a01      	ldr	r1, [r0, #32]
 80033d0:	f021 0110 	bic.w	r1, r1, #16
 80033d4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80033d8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033da:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80033e2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80033ec:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ee:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033f4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80033f8:	e01c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x11e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033fa:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fc:	684d      	ldr	r5, [r1, #4]
 80033fe:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003400:	6a01      	ldr	r1, [r0, #32]
 8003402:	f021 0101 	bic.w	r1, r1, #1
 8003406:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003408:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800340a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800340e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8003412:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003414:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003418:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800341a:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800341c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800341e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003422:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003426:	e005      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x11e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003428:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800342a:	f043 0307 	orr.w	r3, r3, #7
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800342e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003432:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003434:	6083      	str	r3, [r0, #8]
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8003436:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003438:	2000      	movs	r0, #0
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 800343a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800343e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8003442:	bd70      	pop	{r4, r5, r6, pc}

08003444 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003444:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800344a:	b530      	push	{r4, r5, lr}
 800344c:	f04f 0302 	mov.w	r3, #2
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003450:	d02d      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003452:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003456:	6803      	ldr	r3, [r0, #0]
 8003458:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800345a:	f024 0570 	bic.w	r5, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800345e:	680c      	ldr	r4, [r1, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003460:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003462:	432c      	orrs	r4, r5
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003464:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003468:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800346a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346c:	4c11      	ldr	r4, [pc, #68]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800346e:	42a3      	cmp	r3, r4
 8003470:	d012      	beq.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d00f      	beq.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003478:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800347c:	42a3      	cmp	r3, r4
 800347e:	d00b      	beq.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003480:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003484:	42a3      	cmp	r3, r4
 8003486:	d007      	beq.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003488:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800348c:	42a3      	cmp	r3, r4
 800348e:	d003      	beq.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003490:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8003494:	42a3      	cmp	r3, r4
 8003496:	d104      	bne.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003498:	f022 0480 	bic.w	r4, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800349c:	684a      	ldr	r2, [r1, #4]
 800349e:	4322      	orrs	r2, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a8:	2300      	movs	r3, #0
 80034aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ae:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80034b0:	bd30      	pop	{r4, r5, pc}
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000

080034b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d01f      	beq.n	8003500 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034c0:	68cb      	ldr	r3, [r1, #12]
 80034c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c6:	688b      	ldr	r3, [r1, #8]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034ce:	684b      	ldr	r3, [r1, #4]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034d6:	680b      	ldr	r3, [r1, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034de:	690b      	ldr	r3, [r1, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034e6:	694b      	ldr	r3, [r1, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	69ca      	ldr	r2, [r1, #28]
 80034ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f0:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034f2:	6802      	ldr	r2, [r0, #0]
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034f6:	2300      	movs	r3, #0
 80034f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80034fc:	4618      	mov	r0, r3
 80034fe:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003500:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_CommutCallback>:
 8003504:	4770      	bx	lr

08003506 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003506:	4770      	bx	lr

08003508 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SystemInit+0x18>)
 800350a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800350e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003516:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003524:	f100 0308 	add.w	r3, r0, #8
 8003528:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800352a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800352e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003530:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003532:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003534:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003536:	6003      	str	r3, [r0, #0]
 8003538:	4770      	bx	lr

0800353a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	6103      	str	r3, [r0, #16]
 800353e:	4770      	bx	lr

08003540 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003540:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003542:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800354c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800354e:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003550:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003552:	3301      	adds	r3, #1
 8003554:	6003      	str	r3, [r0, #0]
 8003556:	4770      	bx	lr

08003558 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003558:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800355a:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800355c:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800355e:	d101      	bne.n	8003564 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003560:	6903      	ldr	r3, [r0, #16]
 8003562:	e007      	b.n	8003574 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003564:	f100 0308 	add.w	r3, r0, #8
 8003568:	685c      	ldr	r4, [r3, #4]
 800356a:	6825      	ldr	r5, [r4, #0]
 800356c:	42aa      	cmp	r2, r5
 800356e:	d301      	bcc.n	8003574 <vListInsert+0x1c>
 8003570:	4623      	mov	r3, r4
 8003572:	e7f9      	b.n	8003568 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003578:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800357a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800357c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800357e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003580:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003582:	3301      	adds	r3, #1
 8003584:	6003      	str	r3, [r0, #0]
 8003586:	bd30      	pop	{r4, r5, pc}

08003588 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003588:	6841      	ldr	r1, [r0, #4]
 800358a:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800358c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800358e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003590:	6882      	ldr	r2, [r0, #8]
 8003592:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003598:	bf08      	it	eq
 800359a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800359c:	2200      	movs	r2, #0
 800359e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	3a01      	subs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035a6:	6818      	ldr	r0, [r3, #0]
}
 80035a8:	4770      	bx	lr

080035aa <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035aa:	b510      	push	{r4, lr}
 80035ac:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035ae:	f001 fc09 	bl	8004dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035b2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80035b4:	f001 fc28 	bl	8004e08 <vPortExitCritical>

	return xReturn;
}
 80035b8:	fab4 f084 	clz	r0, r4
 80035bc:	0940      	lsrs	r0, r0, #5
 80035be:	bd10      	pop	{r4, pc}

080035c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035c6:	6b86      	ldr	r6, [r0, #56]	; 0x38

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035c8:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035ca:	b932      	cbnz	r2, 80035da <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035cc:	6805      	ldr	r5, [r0, #0]
 80035ce:	bb2d      	cbnz	r5, 800361c <prvCopyDataToQueue+0x5c>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80035d0:	6840      	ldr	r0, [r0, #4]
 80035d2:	f000 ff9f 	bl	8004514 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80035d6:	6065      	str	r5, [r4, #4]
 80035d8:	e027      	b.n	800362a <prvCopyDataToQueue+0x6a>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035da:	b965      	cbnz	r5, 80035f6 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80035dc:	6880      	ldr	r0, [r0, #8]
 80035de:	f002 fc1f 	bl	8005e20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80035e2:	68a2      	ldr	r2, [r4, #8]
 80035e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035e6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035e8:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80035ea:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d317      	bcc.n	8003620 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	60a3      	str	r3, [r4, #8]
 80035f4:	e014      	b.n	8003620 <prvCopyDataToQueue+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f6:	68c0      	ldr	r0, [r0, #12]
 80035f8:	f002 fc12 	bl	8005e20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80035fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035fe:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003600:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003602:	425b      	negs	r3, r3
 8003604:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003606:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003608:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800360a:	bf3e      	ittt	cc
 800360c:	6862      	ldrcc	r2, [r4, #4]
 800360e:	189b      	addcc	r3, r3, r2
 8003610:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003612:	2d02      	cmp	r5, #2
 8003614:	d106      	bne.n	8003624 <prvCopyDataToQueue+0x64>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003616:	b13e      	cbz	r6, 8003628 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003618:	3e01      	subs	r6, #1
 800361a:	e003      	b.n	8003624 <prvCopyDataToQueue+0x64>
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 800361c:	4610      	mov	r0, r2
 800361e:	e004      	b.n	800362a <prvCopyDataToQueue+0x6a>
 8003620:	4628      	mov	r0, r5
 8003622:	e002      	b.n	800362a <prvCopyDataToQueue+0x6a>
 8003624:	2000      	movs	r0, #0
 8003626:	e000      	b.n	800362a <prvCopyDataToQueue+0x6a>
 8003628:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800362a:	3601      	adds	r6, #1
 800362c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800362e:	bd70      	pop	{r4, r5, r6, pc}

08003630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003630:	4603      	mov	r3, r0
 8003632:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003636:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003638:	b162      	cbz	r2, 8003654 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800363a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800363c:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800363e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003640:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003642:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003644:	bf24      	itt	cs
 8003646:	6819      	ldrcs	r1, [r3, #0]
 8003648:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800364a:	68d9      	ldr	r1, [r3, #12]
	}
}
 800364c:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003650:	f002 bbe6 	b.w	8005e20 <memcpy>
	}
}
 8003654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003658:	4770      	bx	lr

0800365a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800365a:	b570      	push	{r4, r5, r6, lr}
 800365c:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800365e:	f001 fbb1 	bl	8004dc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003662:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003666:	f104 0624 	add.w	r6, r4, #36	; 0x24
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800366a:	b26d      	sxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800366c:	2d00      	cmp	r5, #0
 800366e:	dd0a      	ble.n	8003686 <prvUnlockQueue+0x2c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003672:	b143      	cbz	r3, 8003686 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003674:	4630      	mov	r0, r6
 8003676:	f000 fead 	bl	80043d4 <xTaskRemoveFromEventList>
 800367a:	b108      	cbz	r0, 8003680 <prvUnlockQueue+0x26>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800367c:	f000 ff34 	bl	80044e8 <vTaskMissedYield>
 8003680:	3d01      	subs	r5, #1
 8003682:	b26d      	sxtb	r5, r5
 8003684:	e7f2      	b.n	800366c <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003686:	23ff      	movs	r3, #255	; 0xff
 8003688:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800368c:	f001 fbbc 	bl	8004e08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003690:	f001 fb98 	bl	8004dc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003694:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003698:	f104 0610 	add.w	r6, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800369c:	b26d      	sxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800369e:	2d00      	cmp	r5, #0
 80036a0:	dd0a      	ble.n	80036b8 <prvUnlockQueue+0x5e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a2:	6923      	ldr	r3, [r4, #16]
 80036a4:	b143      	cbz	r3, 80036b8 <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a6:	4630      	mov	r0, r6
 80036a8:	f000 fe94 	bl	80043d4 <xTaskRemoveFromEventList>
 80036ac:	b108      	cbz	r0, 80036b2 <prvUnlockQueue+0x58>
				{
					vTaskMissedYield();
 80036ae:	f000 ff1b 	bl	80044e8 <vTaskMissedYield>
 80036b2:	3d01      	subs	r5, #1
 80036b4:	b26d      	sxtb	r5, r5
 80036b6:	e7f2      	b.n	800369e <prvUnlockQueue+0x44>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036b8:	23ff      	movs	r3, #255	; 0xff
 80036ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80036be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80036c2:	f001 bba1 	b.w	8004e08 <vPortExitCritical>
	...

080036c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80036cc:	4604      	mov	r4, r0
 80036ce:	b940      	cbnz	r0, 80036e2 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	e7fe      	b.n	80036e0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80036e2:	f001 fb6f 	bl	8004dc4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80036e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036ea:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ec:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036ee:	4343      	muls	r3, r0
 80036f0:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036f2:	1a1b      	subs	r3, r3, r0
 80036f4:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036f6:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036f8:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036fa:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80036fc:	23ff      	movs	r3, #255	; 0xff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036fe:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 8003700:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003704:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003708:	b97d      	cbnz	r5, 800372a <xQueueGenericReset+0x62>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	b1ab      	cbz	r3, 800373a <xQueueGenericReset+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800370e:	f104 0010 	add.w	r0, r4, #16
 8003712:	f000 fe5f 	bl	80043d4 <xTaskRemoveFromEventList>
 8003716:	b180      	cbz	r0, 800373a <xQueueGenericReset+0x72>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <xQueueGenericReset+0x7c>)
 800371a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	e007      	b.n	800373a <xQueueGenericReset+0x72>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800372a:	f104 0010 	add.w	r0, r4, #16
 800372e:	f7ff fef9 	bl	8003524 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003732:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003736:	f7ff fef5 	bl	8003524 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800373a:	f001 fb65 	bl	8004e08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800373e:	2001      	movs	r0, #1
 8003740:	bd38      	pop	{r3, r4, r5, pc}
 8003742:	bf00      	nop
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003748:	b513      	push	{r0, r1, r4, lr}
 800374a:	461c      	mov	r4, r3
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800374c:	b940      	cbnz	r0, 8003760 <xQueueGenericCreateStatic+0x18>
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	e7fe      	b.n	800375e <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003760:	b943      	cbnz	r3, 8003774 <xQueueGenericCreateStatic+0x2c>
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	e7fe      	b.n	8003772 <xQueueGenericCreateStatic+0x2a>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003774:	b14a      	cbz	r2, 800378a <xQueueGenericCreateStatic+0x42>
 8003776:	b991      	cbnz	r1, 800379e <xQueueGenericCreateStatic+0x56>
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	e7fe      	b.n	8003788 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800378a:	b141      	cbz	r1, 800379e <xQueueGenericCreateStatic+0x56>
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	e7fe      	b.n	800379c <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800379e:	2350      	movs	r3, #80	; 0x50
 80037a0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037a2:	9b01      	ldr	r3, [sp, #4]
 80037a4:	2b50      	cmp	r3, #80	; 0x50
 80037a6:	d008      	beq.n	80037ba <xQueueGenericCreateStatic+0x72>
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	e7fe      	b.n	80037b8 <xQueueGenericCreateStatic+0x70>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037ba:	2301      	movs	r3, #1
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037bc:	2900      	cmp	r1, #0
 80037be:	bf08      	it	eq
 80037c0:	4622      	moveq	r2, r4
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037c6:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037c8:	6421      	str	r1, [r4, #64]	; 0x40
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037ca:	6022      	str	r2, [r4, #0]

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037cc:	4619      	mov	r1, r3
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7ff ff7a 	bl	80036c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80037d8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
 80037dc:	4620      	mov	r0, r4
 80037de:	b002      	add	sp, #8
 80037e0:	bd10      	pop	{r4, pc}
	...

080037e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	4689      	mov	r9, r1
 80037ea:	9201      	str	r2, [sp, #4]
 80037ec:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80037ee:	4604      	mov	r4, r0
 80037f0:	b940      	cbnz	r0, 8003804 <xQueueGenericSend+0x20>
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	e7fe      	b.n	8003802 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003804:	b951      	cbnz	r1, 800381c <xQueueGenericSend+0x38>
 8003806:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003808:	b143      	cbz	r3, 800381c <xQueueGenericSend+0x38>
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	e7fe      	b.n	800381a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800381c:	2f02      	cmp	r7, #2
 800381e:	d10b      	bne.n	8003838 <xQueueGenericSend+0x54>
 8003820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d008      	beq.n	8003838 <xQueueGenericSend+0x54>
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	e7fe      	b.n	8003836 <xQueueGenericSend+0x52>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003838:	f000 fe5c 	bl	80044f4 <xTaskGetSchedulerState>
 800383c:	b910      	cbnz	r0, 8003844 <xQueueGenericSend+0x60>
 800383e:	9e01      	ldr	r6, [sp, #4]
 8003840:	b10e      	cbz	r6, 8003846 <xQueueGenericSend+0x62>
 8003842:	e072      	b.n	800392a <xQueueGenericSend+0x146>
 8003844:	2600      	movs	r6, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8003846:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8003944 <xQueueGenericSend+0x160>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800384a:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800384e:	f001 fab9 	bl	8004dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003852:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003854:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003856:	429a      	cmp	r2, r3
 8003858:	d301      	bcc.n	800385e <xQueueGenericSend+0x7a>
 800385a:	2f02      	cmp	r7, #2
 800385c:	d117      	bne.n	800388e <xQueueGenericSend+0xaa>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800385e:	463a      	mov	r2, r7
 8003860:	4649      	mov	r1, r9
 8003862:	4620      	mov	r0, r4
 8003864:	f7ff feac 	bl	80035c0 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800386a:	b11b      	cbz	r3, 8003874 <xQueueGenericSend+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800386c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003870:	f000 fdb0 	bl	80043d4 <xTaskRemoveFromEventList>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003874:	b138      	cbz	r0, 8003886 <xQueueGenericSend+0xa2>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003876:	4b33      	ldr	r3, [pc, #204]	; (8003944 <xQueueGenericSend+0x160>)
 8003878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003886:	f001 fabf 	bl	8004e08 <vPortExitCritical>
				return pdPASS;
 800388a:	2001      	movs	r0, #1
 800388c:	e056      	b.n	800393c <xQueueGenericSend+0x158>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800388e:	9d01      	ldr	r5, [sp, #4]
 8003890:	b91d      	cbnz	r5, 800389a <xQueueGenericSend+0xb6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003892:	f001 fab9 	bl	8004e08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003896:	4628      	mov	r0, r5
 8003898:	e050      	b.n	800393c <xQueueGenericSend+0x158>
				}
				else if( xEntryTimeSet == pdFALSE )
 800389a:	b916      	cbnz	r6, 80038a2 <xQueueGenericSend+0xbe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800389c:	a802      	add	r0, sp, #8
 800389e:	f000 fdd9 	bl	8004454 <vTaskInternalSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038a2:	f001 fab1 	bl	8004e08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038a6:	f000 fbe7 	bl	8004078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038aa:	f001 fa8b 	bl	8004dc4 <vPortEnterCritical>
 80038ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80038b2:	2bff      	cmp	r3, #255	; 0xff
 80038b4:	bf08      	it	eq
 80038b6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80038ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80038be:	2bff      	cmp	r3, #255	; 0xff
 80038c0:	bf08      	it	eq
 80038c2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80038c6:	f001 fa9f 	bl	8004e08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038ca:	a901      	add	r1, sp, #4
 80038cc:	a802      	add	r0, sp, #8
 80038ce:	f000 fdcd 	bl	800446c <xTaskCheckForTimeOut>
 80038d2:	bb18      	cbnz	r0, 800391c <xQueueGenericSend+0x138>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038d4:	f001 fa76 	bl	8004dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80038da:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80038dc:	f001 fa94 	bl	8004e08 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038e0:	42ae      	cmp	r6, r5
 80038e2:	d115      	bne.n	8003910 <xQueueGenericSend+0x12c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038e4:	9901      	ldr	r1, [sp, #4]
 80038e6:	f104 0010 	add.w	r0, r4, #16
 80038ea:	f000 fd3b 	bl	8004364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7ff feb3 	bl	800365a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038f4:	f000 fc62 	bl	80041bc <xTaskResumeAll>
 80038f8:	b108      	cbz	r0, 80038fe <xQueueGenericSend+0x11a>
 80038fa:	2601      	movs	r6, #1
 80038fc:	e7a7      	b.n	800384e <xQueueGenericSend+0x6a>
				{
					portYIELD_WITHIN_API();
 80038fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003902:	f8ca 3000 	str.w	r3, [sl]
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	e7f4      	b.n	80038fa <xQueueGenericSend+0x116>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff fea2 	bl	800365a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003916:	f000 fc51 	bl	80041bc <xTaskResumeAll>
 800391a:	e7ee      	b.n	80038fa <xQueueGenericSend+0x116>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff fe9c 	bl	800365a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003922:	f000 fc4b 	bl	80041bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003926:	2000      	movs	r0, #0
 8003928:	e008      	b.n	800393c <xQueueGenericSend+0x158>
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	e7fe      	b.n	800393a <xQueueGenericSend+0x156>
		}
	}
}
 800393c:	b004      	add	sp, #16
 800393e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003942:	bf00      	nop
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800394c:	4688      	mov	r8, r1
 800394e:	4691      	mov	r9, r2
 8003950:	461f      	mov	r7, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003952:	4604      	mov	r4, r0
 8003954:	b940      	cbnz	r0, 8003968 <xQueueGenericSendFromISR+0x20>
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	e7fe      	b.n	8003966 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003968:	b951      	cbnz	r1, 8003980 <xQueueGenericSendFromISR+0x38>
 800396a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800396c:	b143      	cbz	r3, 8003980 <xQueueGenericSendFromISR+0x38>
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	e7fe      	b.n	800397e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003980:	2f02      	cmp	r7, #2
 8003982:	d10b      	bne.n	800399c <xQueueGenericSendFromISR+0x54>
 8003984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003986:	2b01      	cmp	r3, #1
 8003988:	d008      	beq.n	800399c <xQueueGenericSendFromISR+0x54>
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	e7fe      	b.n	800399a <xQueueGenericSendFromISR+0x52>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800399c:	f001 fb1a 	bl	8004fd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039a0:	f3ef 8611 	mrs	r6, BASEPRI
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80039b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d301      	bcc.n	80039c0 <xQueueGenericSendFromISR+0x78>
 80039bc:	2f02      	cmp	r7, #2
 80039be:	d11d      	bne.n	80039fc <xQueueGenericSendFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039c0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c4:	463a      	mov	r2, r7
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039c6:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c8:	4641      	mov	r1, r8
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7ff fdf8 	bl	80035c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039d0:	1c6b      	adds	r3, r5, #1
 80039d2:	d10d      	bne.n	80039f0 <xQueueGenericSendFromISR+0xa8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039d6:	b17b      	cbz	r3, 80039f8 <xQueueGenericSendFromISR+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80039dc:	f000 fcfa 	bl	80043d4 <xTaskRemoveFromEventList>
 80039e0:	b150      	cbz	r0, 80039f8 <xQueueGenericSendFromISR+0xb0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039e2:	f1b9 0f00 	cmp.w	r9, #0
 80039e6:	d007      	beq.n	80039f8 <xQueueGenericSendFromISR+0xb0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039e8:	2001      	movs	r0, #1
 80039ea:	f8c9 0000 	str.w	r0, [r9]
 80039ee:	e006      	b.n	80039fe <xQueueGenericSendFromISR+0xb6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039f0:	3501      	adds	r5, #1
 80039f2:	b26d      	sxtb	r5, r5
 80039f4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039f8:	2001      	movs	r0, #1
 80039fa:	e000      	b.n	80039fe <xQueueGenericSendFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039fc:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039fe:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8003a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08003a08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	4688      	mov	r8, r1
 8003a10:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a12:	4604      	mov	r4, r0
 8003a14:	b940      	cbnz	r0, 8003a28 <xQueueReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	e7fe      	b.n	8003a26 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a28:	b951      	cbnz	r1, 8003a40 <xQueueReceive+0x38>
 8003a2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003a2c:	b143      	cbz	r3, 8003a40 <xQueueReceive+0x38>
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	e7fe      	b.n	8003a3e <xQueueReceive+0x36>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a40:	f000 fd58 	bl	80044f4 <xTaskGetSchedulerState>
 8003a44:	b910      	cbnz	r0, 8003a4c <xQueueReceive+0x44>
 8003a46:	9e01      	ldr	r6, [sp, #4]
 8003a48:	b10e      	cbz	r6, 8003a4e <xQueueReceive+0x46>
 8003a4a:	e06f      	b.n	8003b2c <xQueueReceive+0x124>
 8003a4c:	2600      	movs	r6, #0
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8003a4e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8003b44 <xQueueReceive+0x13c>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8003a52:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a54:	f001 f9b6 	bl	8004dc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a58:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a5a:	b1c5      	cbz	r5, 8003a8e <xQueueReceive+0x86>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	4620      	mov	r0, r4
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a60:	3d01      	subs	r5, #1
			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a62:	f7ff fde5 	bl	8003630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a66:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	b163      	cbz	r3, 8003a86 <xQueueReceive+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a6c:	f104 0010 	add.w	r0, r4, #16
 8003a70:	f000 fcb0 	bl	80043d4 <xTaskRemoveFromEventList>
 8003a74:	b138      	cbz	r0, 8003a86 <xQueueReceive+0x7e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a76:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <xQueueReceive+0x13c>)
 8003a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a86:	f001 f9bf 	bl	8004e08 <vPortExitCritical>
				return pdPASS;
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	e057      	b.n	8003b3e <xQueueReceive+0x136>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a8e:	9d01      	ldr	r5, [sp, #4]
 8003a90:	b91d      	cbnz	r5, 8003a9a <xQueueReceive+0x92>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a92:	f001 f9b9 	bl	8004e08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a96:	4628      	mov	r0, r5
 8003a98:	e051      	b.n	8003b3e <xQueueReceive+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a9a:	b916      	cbnz	r6, 8003aa2 <xQueueReceive+0x9a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a9c:	a802      	add	r0, sp, #8
 8003a9e:	f000 fcd9 	bl	8004454 <vTaskInternalSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aa2:	f001 f9b1 	bl	8004e08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aa6:	f000 fae7 	bl	8004078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aaa:	f001 f98b 	bl	8004dc4 <vPortEnterCritical>
 8003aae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003ab2:	2bff      	cmp	r3, #255	; 0xff
 8003ab4:	bf08      	it	eq
 8003ab6:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8003aba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003abe:	2bff      	cmp	r3, #255	; 0xff
 8003ac0:	bf08      	it	eq
 8003ac2:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8003ac6:	f001 f99f 	bl	8004e08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aca:	a901      	add	r1, sp, #4
 8003acc:	a802      	add	r0, sp, #8
 8003ace:	f000 fccd 	bl	800446c <xTaskCheckForTimeOut>
 8003ad2:	b9f8      	cbnz	r0, 8003b14 <xQueueReceive+0x10c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff fd68 	bl	80035aa <prvIsQueueEmpty>
 8003ada:	b1a8      	cbz	r0, 8003b08 <xQueueReceive+0x100>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003adc:	9901      	ldr	r1, [sp, #4]
 8003ade:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ae2:	f000 fc3f 	bl	8004364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f7ff fdb7 	bl	800365a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003aec:	f000 fb66 	bl	80041bc <xTaskResumeAll>
 8003af0:	b108      	cbz	r0, 8003af6 <xQueueReceive+0xee>
 8003af2:	2601      	movs	r6, #1
 8003af4:	e7ae      	b.n	8003a54 <xQueueReceive+0x4c>
				{
					portYIELD_WITHIN_API();
 8003af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003afa:	f8c9 3000 	str.w	r3, [r9]
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	e7f4      	b.n	8003af2 <xQueueReceive+0xea>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f7ff fda6 	bl	800365a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b0e:	f000 fb55 	bl	80041bc <xTaskResumeAll>
 8003b12:	e7ee      	b.n	8003af2 <xQueueReceive+0xea>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b14:	4620      	mov	r0, r4
 8003b16:	f7ff fda0 	bl	800365a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b1a:	f000 fb4f 	bl	80041bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7ff fd43 	bl	80035aa <prvIsQueueEmpty>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d0e4      	beq.n	8003af2 <xQueueReceive+0xea>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b28:	2000      	movs	r0, #0
 8003b2a:	e008      	b.n	8003b3e <xQueueReceive+0x136>
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	e7fe      	b.n	8003b3c <xQueueReceive+0x134>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b3e:	b005      	add	sp, #20
 8003b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b48:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <vQueueAddToRegistry+0x24>)
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b4c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b4e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8003b52:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8003b56:	b925      	cbnz	r5, 8003b62 <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b58:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <vQueueAddToRegistry+0x24>)
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b5a:	6060      	str	r0, [r4, #4]
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b60:	bd30      	pop	{r4, r5, pc}
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b62:	3301      	adds	r3, #1
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d1f2      	bne.n	8003b4e <vQueueAddToRegistry+0x6>
 8003b68:	bd30      	pop	{r4, r5, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20009ab0 	.word	0x20009ab0

08003b70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	4604      	mov	r4, r0
 8003b74:	460d      	mov	r5, r1
 8003b76:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b78:	f001 f924 	bl	8004dc4 <vPortEnterCritical>
 8003b7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003b80:	2bff      	cmp	r3, #255	; 0xff
 8003b82:	bf04      	itt	eq
 8003b84:	2300      	moveq	r3, #0
 8003b86:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8003b8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003b8e:	2bff      	cmp	r3, #255	; 0xff
 8003b90:	bf04      	itt	eq
 8003b92:	2300      	moveq	r3, #0
 8003b94:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8003b98:	f001 f936 	bl	8004e08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b9e:	b92b      	cbnz	r3, 8003bac <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ba0:	4632      	mov	r2, r6
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ba8:	f000 fbf6 	bl	8004398 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bac:	4620      	mov	r0, r4
	}
 8003bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bb2:	f7ff bd52 	b.w	800365a <prvUnlockQueue>
	...

08003bb8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bbe:	f001 f901 	bl	8004dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8003bc4:	4d2d      	ldr	r5, [pc, #180]	; (8003c7c <prvAddNewTaskToReadyList+0xc4>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4f2d      	ldr	r7, [pc, #180]	; (8003c80 <prvAddNewTaskToReadyList+0xc8>)
 8003bca:	3201      	adds	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003bce:	682e      	ldr	r6, [r5, #0]
 8003bd0:	bb16      	cbnz	r6, 8003c18 <prvAddNewTaskToReadyList+0x60>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bd2:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d127      	bne.n	8003c2a <prvAddNewTaskToReadyList+0x72>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bda:	19b8      	adds	r0, r7, r6
 8003bdc:	3614      	adds	r6, #20
 8003bde:	f7ff fca1 	bl	8003524 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be2:	f5b6 6f8c 	cmp.w	r6, #1120	; 0x460
 8003be6:	d1f8      	bne.n	8003bda <prvAddNewTaskToReadyList+0x22>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003be8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003cac <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8003bec:	4e25      	ldr	r6, [pc, #148]	; (8003c84 <prvAddNewTaskToReadyList+0xcc>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f7ff fc98 	bl	8003524 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f7ff fc95 	bl	8003524 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bfa:	4823      	ldr	r0, [pc, #140]	; (8003c88 <prvAddNewTaskToReadyList+0xd0>)
 8003bfc:	f7ff fc92 	bl	8003524 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c00:	4822      	ldr	r0, [pc, #136]	; (8003c8c <prvAddNewTaskToReadyList+0xd4>)
 8003c02:	f7ff fc8f 	bl	8003524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c06:	4822      	ldr	r0, [pc, #136]	; (8003c90 <prvAddNewTaskToReadyList+0xd8>)
 8003c08:	f7ff fc8c 	bl	8003524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <prvAddNewTaskToReadyList+0xdc>)
 8003c0e:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c12:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <prvAddNewTaskToReadyList+0xe0>)
 8003c14:	601e      	str	r6, [r3, #0]
 8003c16:	e008      	b.n	8003c2a <prvAddNewTaskToReadyList+0x72>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c18:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <prvAddNewTaskToReadyList+0xe4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b92b      	cbnz	r3, 8003c2a <prvAddNewTaskToReadyList+0x72>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c1e:	682b      	ldr	r3, [r5, #0]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c24:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 8003c26:	bf98      	it	ls
 8003c28:	602c      	strls	r4, [r5, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <prvAddNewTaskToReadyList+0xe8>)
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c32:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c34:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c36:	6811      	ldr	r1, [r2, #0]
 8003c38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c3a:	2014      	movs	r0, #20
 8003c3c:	428b      	cmp	r3, r1
 8003c3e:	fb00 7003 	mla	r0, r0, r3, r7
 8003c42:	f104 0104 	add.w	r1, r4, #4
 8003c46:	bf88      	it	hi
 8003c48:	6013      	strhi	r3, [r2, #0]
 8003c4a:	f7ff fc79 	bl	8003540 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c4e:	f001 f8db 	bl	8004e08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <prvAddNewTaskToReadyList+0xe4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b163      	cbz	r3, 8003c72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d207      	bcs.n	8003c72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <prvAddNewTaskToReadyList+0xf0>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c76:	bf00      	nop
 8003c78:	200006f0 	.word	0x200006f0
 8003c7c:	200006a4 	.word	0x200006a4
 8003c80:	2000023c 	.word	0x2000023c
 8003c84:	200006dc 	.word	0x200006dc
 8003c88:	200006a8 	.word	0x200006a8
 8003c8c:	20000210 	.word	0x20000210
 8003c90:	20000224 	.word	0x20000224
 8003c94:	20000208 	.word	0x20000208
 8003c98:	200006c0 	.word	0x200006c0
 8003c9c:	2000020c 	.word	0x2000020c
 8003ca0:	200006c4 	.word	0x200006c4
 8003ca4:	200006f4 	.word	0x200006f4
 8003ca8:	e000ed04 	.word	0xe000ed04
 8003cac:	200006c8 	.word	0x200006c8

08003cb0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb0:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <prvResetNextTaskUnblockTime+0x1c>)
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <prvResetNextTaskUnblockTime+0x20>)
 8003cb8:	b911      	cbnz	r1, 8003cc0 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	e003      	b.n	8003cc8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cc4:	68d2      	ldr	r2, [r2, #12]
 8003cc6:	6852      	ldr	r2, [r2, #4]
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	4770      	bx	lr
 8003ccc:	20000208 	.word	0x20000208
 8003cd0:	20000200 	.word	0x20000200

08003cd4 <prvInitialiseNewTask.isra.2>:
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003cda:	9e09      	ldr	r6, [sp, #36]	; 0x24

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cdc:	0095      	lsls	r5, r2, #2
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003cde:	468a      	mov	sl, r1

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ce0:	462a      	mov	r2, r5
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003ce2:	4607      	mov	r7, r0

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ce4:	21a5      	movs	r1, #165	; 0xa5
 8003ce6:	6b20      	ldr	r0, [r4, #48]	; 0x30
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003ce8:	4698      	mov	r8, r3
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003cea:	f1a5 0904 	sub.w	r9, r5, #4

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cee:	f002 f8a2 	bl	8005e36 <memset>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003cf2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003cf4:	44a9      	add	r9, r5
 8003cf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003cfa:	f029 0907 	bic.w	r9, r9, #7
 8003cfe:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8003d02:	f10a 0a0f 	add.w	sl, sl, #15
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d06:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003d0a:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d0e:	7819      	ldrb	r1, [r3, #0]
 8003d10:	b109      	cbz	r1, 8003d16 <prvInitialiseNewTask.isra.2+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d12:	4553      	cmp	r3, sl
 8003d14:	d1f7      	bne.n	8003d06 <prvInitialiseNewTask.isra.2+0x32>
 8003d16:	9d08      	ldr	r5, [sp, #32]
 8003d18:	2d37      	cmp	r5, #55	; 0x37
 8003d1a:	bf28      	it	cs
 8003d1c:	2537      	movcs	r5, #55	; 0x37
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d1e:	f04f 0a00 	mov.w	sl, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d22:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d24:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d26:	1d20      	adds	r0, r4, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d28:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8003d2c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d30:	f7ff fc03 	bl	800353a <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d34:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d38:	f104 0018 	add.w	r0, r4, #24
 8003d3c:	f7ff fbfd 	bl	800353a <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d40:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d44:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d46:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d48:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d4a:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d4e:	4642      	mov	r2, r8
 8003d50:	4639      	mov	r1, r7
 8003d52:	4648      	mov	r0, r9
 8003d54:	f001 f808 	bl	8004d68 <pxPortInitialiseStack>
 8003d58:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003d5a:	b106      	cbz	r6, 8003d5e <prvInitialiseNewTask.isra.2+0x8a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d5c:	6034      	str	r4, [r6, #0]
 8003d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d62 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d62:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d64:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d68:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d6a:	b923      	cbnz	r3, 8003d76 <prvDeleteTCB+0x14>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d6c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003d6e:	f000 ff85 	bl	8004c7c <vPortFree>
				vPortFree( pxTCB );
 8003d72:	4620      	mov	r0, r4
 8003d74:	e001      	b.n	8003d7a <prvDeleteTCB+0x18>
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d103      	bne.n	8003d82 <prvDeleteTCB+0x20>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 8003d7e:	f000 bf7d 	b.w	8004c7c <vPortFree>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d008      	beq.n	8003d98 <prvDeleteTCB+0x36>
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	e7fe      	b.n	8003d96 <prvDeleteTCB+0x34>
 8003d98:	bd10      	pop	{r4, pc}
	...

08003d9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d9c:	b580      	push	{r7, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d9e:	4c13      	ldr	r4, [pc, #76]	; (8003dec <prvIdleTask+0x50>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8003da0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8003dfc <prvIdleTask+0x60>
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003da4:	4f12      	ldr	r7, [pc, #72]	; (8003df0 <prvIdleTask+0x54>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
				--uxCurrentNumberOfTasks;
 8003da6:	4d13      	ldr	r5, [pc, #76]	; (8003df4 <prvIdleTask+0x58>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	b193      	cbz	r3, 8003dd2 <prvIdleTask+0x36>
		{
			taskENTER_CRITICAL();
 8003dac:	f001 f80a 	bl	8004dc4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db4:	1d30      	adds	r0, r6, #4
 8003db6:	f7ff fbe7 	bl	8003588 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dba:	682b      	ldr	r3, [r5, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8003dc6:	f001 f81f 	bl	8004e08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f7ff ffc9 	bl	8003d62 <prvDeleteTCB>
 8003dd0:	e7ea      	b.n	8003da8 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <prvIdleTask+0x5c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d9e5      	bls.n	8003da6 <prvIdleTask+0xa>
			{
				taskYIELD();
 8003dda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003dde:	f8c8 3000 	str.w	r3, [r8]
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	e7db      	b.n	8003da4 <prvIdleTask+0x8>
 8003dec:	200006a0 	.word	0x200006a0
 8003df0:	20000210 	.word	0x20000210
 8003df4:	200006f0 	.word	0x200006f0
 8003df8:	2000023c 	.word	0x2000023c
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e02:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <prvAddCurrentTaskToDelayedList+0x60>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e04:	4d17      	ldr	r5, [pc, #92]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x64>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e06:	681e      	ldr	r6, [r3, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e08:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e0a:	6828      	ldr	r0, [r5, #0]
 8003e0c:	3004      	adds	r0, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e0e:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e10:	f7ff fbba 	bl	8003588 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e14:	1c63      	adds	r3, r4, #1
 8003e16:	462a      	mov	r2, r5
 8003e18:	d107      	bne.n	8003e2a <prvAddCurrentTaskToDelayedList+0x2a>
 8003e1a:	b137      	cbz	r7, 8003e2a <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e1c:	6829      	ldr	r1, [r5, #0]
 8003e1e:	4812      	ldr	r0, [pc, #72]	; (8003e68 <prvAddCurrentTaskToDelayedList+0x68>)
 8003e20:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e26:	f7ff bb8b 	b.w	8003540 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e2a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x64>)
 8003e30:	6054      	str	r4, [r2, #4]

			if( xTimeToWake < xConstTickCount )
 8003e32:	42a6      	cmp	r6, r4
 8003e34:	d907      	bls.n	8003e46 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e36:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <prvAddCurrentTaskToDelayedList+0x6c>)
 8003e38:	6810      	ldr	r0, [r2, #0]
 8003e3a:	6819      	ldr	r1, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e40:	3104      	adds	r1, #4
 8003e42:	f7ff bb89 	b.w	8003558 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <prvAddCurrentTaskToDelayedList+0x70>)
 8003e48:	6810      	ldr	r0, [r2, #0]
 8003e4a:	6819      	ldr	r1, [r3, #0]
 8003e4c:	3104      	adds	r1, #4
 8003e4e:	f7ff fb83 	bl	8003558 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <prvAddCurrentTaskToDelayedList+0x74>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003e58:	bf38      	it	cc
 8003e5a:	601c      	strcc	r4, [r3, #0]
 8003e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200006bc 	.word	0x200006bc
 8003e64:	200006a4 	.word	0x200006a4
 8003e68:	20000224 	.word	0x20000224
 8003e6c:	200006c0 	.word	0x200006c0
 8003e70:	20000208 	.word	0x20000208
 8003e74:	20000200 	.word	0x20000200

08003e78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003e7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e80:	b945      	cbnz	r5, 8003e94 <xTaskCreateStatic+0x1c>
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	e7fe      	b.n	8003e92 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003e94:	b944      	cbnz	r4, 8003ea8 <xTaskCreateStatic+0x30>
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	e7fe      	b.n	8003ea6 <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ea8:	265c      	movs	r6, #92	; 0x5c
 8003eaa:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003eac:	9e04      	ldr	r6, [sp, #16]
 8003eae:	2e5c      	cmp	r6, #92	; 0x5c
 8003eb0:	d008      	beq.n	8003ec4 <xTaskCreateStatic+0x4c>
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	e7fe      	b.n	8003ec2 <xTaskCreateStatic+0x4a>
		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ec4:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ec6:	2502      	movs	r5, #2
 8003ec8:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ecc:	ad05      	add	r5, sp, #20
 8003ece:	9501      	str	r5, [sp, #4]
 8003ed0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003ed2:	9402      	str	r4, [sp, #8]
 8003ed4:	9500      	str	r5, [sp, #0]
 8003ed6:	f7ff fefd 	bl	8003cd4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7ff fe6c 	bl	8003bb8 <prvAddNewTaskToReadyList>
		{
			xReturn = NULL;
		}

		return xReturn;
	}
 8003ee0:	9805      	ldr	r0, [sp, #20]
 8003ee2:	b006      	add	sp, #24
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}

08003ee6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ee6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003eea:	4607      	mov	r7, r0
 8003eec:	b085      	sub	sp, #20
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eee:	0090      	lsls	r0, r2, #2
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ef0:	4688      	mov	r8, r1
 8003ef2:	4616      	mov	r6, r2
 8003ef4:	4699      	mov	r9, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef6:	f000 fe2f 	bl	8004b58 <pvPortMalloc>

			if( pxStack != NULL )
 8003efa:	4605      	mov	r5, r0
 8003efc:	b1d8      	cbz	r0, 8003f36 <xTaskCreate+0x50>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003efe:	205c      	movs	r0, #92	; 0x5c
 8003f00:	f000 fe2a 	bl	8004b58 <pvPortMalloc>

				if( pxNewTCB != NULL )
 8003f04:	4604      	mov	r4, r0
 8003f06:	b198      	cbz	r0, 8003f30 <xTaskCreate+0x4a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

				if( pxNewTCB != NULL )
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f10:	6305      	str	r5, [r0, #48]	; 0x30
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f16:	9002      	str	r0, [sp, #8]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	4632      	mov	r2, r6
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	4641      	mov	r1, r8
 8003f20:	4638      	mov	r0, r7
 8003f22:	f7ff fed7 	bl	8003cd4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f26:	4620      	mov	r0, r4
 8003f28:	f7ff fe46 	bl	8003bb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	e004      	b.n	8003f3a <xTaskCreate+0x54>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f30:	4628      	mov	r0, r5
 8003f32:	f000 fea3 	bl	8004c7c <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f36:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8003f3a:	b005      	add	sp, #20
 8003f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003f40 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	4604      	mov	r4, r0
 8003f44:	4d22      	ldr	r5, [pc, #136]	; (8003fd0 <vTaskDelete+0x90>)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003f46:	f000 ff3d 	bl	8004dc4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003f4a:	b904      	cbnz	r4, 8003f4e <vTaskDelete+0xe>
 8003f4c:	682c      	ldr	r4, [r5, #0]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4e:	1d26      	adds	r6, r4, #4
 8003f50:	4630      	mov	r0, r6
 8003f52:	f7ff fb19 	bl	8003588 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f58:	b11b      	cbz	r3, 8003f62 <vTaskDelete+0x22>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f5a:	f104 0018 	add.w	r0, r4, #24
 8003f5e:	f7ff fb13 	bl	8003588 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003f62:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <vTaskDelete+0x94>)
 8003f64:	6813      	ldr	r3, [r2, #0]
 8003f66:	3301      	adds	r3, #1
 8003f68:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003f6a:	682b      	ldr	r3, [r5, #0]
 8003f6c:	429c      	cmp	r4, r3
 8003f6e:	d108      	bne.n	8003f82 <vTaskDelete+0x42>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003f70:	4631      	mov	r1, r6
 8003f72:	4819      	ldr	r0, [pc, #100]	; (8003fd8 <vTaskDelete+0x98>)
 8003f74:	f7ff fae4 	bl	8003540 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003f78:	4a18      	ldr	r2, [pc, #96]	; (8003fdc <vTaskDelete+0x9c>)
 8003f7a:	6813      	ldr	r3, [r2, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e008      	b.n	8003f94 <vTaskDelete+0x54>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <vTaskDelete+0xa0>)
 8003f84:	6813      	ldr	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003f86:	4620      	mov	r0, r4
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003f8c:	f7ff fee9 	bl	8003d62 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003f90:	f7ff fe8e 	bl	8003cb0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8003f94:	f000 ff38 	bl	8004e08 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <vTaskDelete+0xa4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	b1b3      	cbz	r3, 8003fcc <vTaskDelete+0x8c>
		{
			if( pxTCB == pxCurrentTCB )
 8003f9e:	682b      	ldr	r3, [r5, #0]
 8003fa0:	429c      	cmp	r4, r3
 8003fa2:	d113      	bne.n	8003fcc <vTaskDelete+0x8c>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003fa4:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <vTaskDelete+0xa8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	b143      	cbz	r3, 8003fbc <vTaskDelete+0x7c>
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	e7fe      	b.n	8003fba <vTaskDelete+0x7a>
				portYIELD_WITHIN_API();
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <vTaskDelete+0xac>)
 8003fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	bd70      	pop	{r4, r5, r6, pc}
 8003fce:	bf00      	nop
 8003fd0:	200006a4 	.word	0x200006a4
 8003fd4:	200006c4 	.word	0x200006c4
 8003fd8:	20000210 	.word	0x20000210
 8003fdc:	200006a0 	.word	0x200006a0
 8003fe0:	200006f0 	.word	0x200006f0
 8003fe4:	2000020c 	.word	0x2000020c
 8003fe8:	2000069c 	.word	0x2000069c
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ff4:	2400      	movs	r4, #0
		StackType_t *pxIdleTaskStackBuffer = NULL;
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ff6:	aa07      	add	r2, sp, #28
 8003ff8:	a906      	add	r1, sp, #24
 8003ffa:	a805      	add	r0, sp, #20
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ffc:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ffe:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004000:	f000 fd6e 	bl	8004ae0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004004:	9b05      	ldr	r3, [sp, #20]
 8004006:	9302      	str	r3, [sp, #8]
 8004008:	9b06      	ldr	r3, [sp, #24]
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	9400      	str	r4, [sp, #0]
 800400e:	4623      	mov	r3, r4
 8004010:	9a07      	ldr	r2, [sp, #28]
 8004012:	4914      	ldr	r1, [pc, #80]	; (8004064 <vTaskStartScheduler+0x74>)
 8004014:	4814      	ldr	r0, [pc, #80]	; (8004068 <vTaskStartScheduler+0x78>)
 8004016:	f7ff ff2f 	bl	8003e78 <xTaskCreateStatic>
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800401a:	b308      	cbz	r0, 8004060 <vTaskStartScheduler+0x70>
		{
			xReturn = xTimerCreateTimerTask();
 800401c:	f000 fb0e 	bl	800463c <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004020:	2801      	cmp	r0, #1
 8004022:	d112      	bne.n	800404a <vTaskStartScheduler+0x5a>
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <vTaskStartScheduler+0x7c>)
 8004036:	f04f 32ff 	mov.w	r2, #4294967295
 800403a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <vTaskStartScheduler+0x80>)
 800403e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <vTaskStartScheduler+0x84>)
 8004042:	601c      	str	r4, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004044:	f000 ff40 	bl	8004ec8 <xPortStartScheduler>
 8004048:	e00a      	b.n	8004060 <vTaskStartScheduler+0x70>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800404a:	3001      	adds	r0, #1
 800404c:	d108      	bne.n	8004060 <vTaskStartScheduler+0x70>
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	e7fe      	b.n	800405e <vTaskStartScheduler+0x6e>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004060:	b008      	add	sp, #32
 8004062:	bd10      	pop	{r4, pc}
 8004064:	08006dfe 	.word	0x08006dfe
 8004068:	08003d9d 	.word	0x08003d9d
 800406c:	20000200 	.word	0x20000200
 8004070:	2000020c 	.word	0x2000020c
 8004074:	200006bc 	.word	0x200006bc

08004078 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004078:	4a02      	ldr	r2, [pc, #8]	; (8004084 <vTaskSuspendAll+0xc>)
 800407a:	6813      	ldr	r3, [r2, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	2000069c 	.word	0x2000069c

08004088 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004088:	4b01      	ldr	r3, [pc, #4]	; (8004090 <xTaskGetTickCount+0x8>)
 800408a:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	200006bc 	.word	0x200006bc

08004094 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004094:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <xTaskIncrementTick+0xfc>)
 8004096:	681b      	ldr	r3, [r3, #0]

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409c:	2b00      	cmp	r3, #0
 800409e:	d13b      	bne.n	8004118 <xTaskIncrementTick+0x84>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040a0:	4b3c      	ldr	r3, [pc, #240]	; (8004194 <xTaskIncrementTick+0x100>)
 80040a2:	681c      	ldr	r4, [r3, #0]
 80040a4:	3401      	adds	r4, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040a6:	601c      	str	r4, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040a8:	b9bc      	cbnz	r4, 80040da <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 80040aa:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <xTaskIncrementTick+0x104>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	b142      	cbz	r2, 80040c4 <xTaskIncrementTick+0x30>
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	e7fe      	b.n	80040c2 <xTaskIncrementTick+0x2e>
 80040c4:	4a35      	ldr	r2, [pc, #212]	; (800419c <xTaskIncrementTick+0x108>)
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	6810      	ldr	r0, [r2, #0]
 80040ca:	6018      	str	r0, [r3, #0]
 80040cc:	6011      	str	r1, [r2, #0]
 80040ce:	4a34      	ldr	r2, [pc, #208]	; (80041a0 <xTaskIncrementTick+0x10c>)
 80040d0:	6813      	ldr	r3, [r2, #0]
 80040d2:	3301      	adds	r3, #1
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	f7ff fdeb 	bl	8003cb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040da:	4d32      	ldr	r5, [pc, #200]	; (80041a4 <xTaskIncrementTick+0x110>)
 80040dc:	9501      	str	r5, [sp, #4]
 80040de:	682b      	ldr	r3, [r5, #0]
 80040e0:	4e31      	ldr	r6, [pc, #196]	; (80041a8 <xTaskIncrementTick+0x114>)
 80040e2:	4f32      	ldr	r7, [pc, #200]	; (80041ac <xTaskIncrementTick+0x118>)
 80040e4:	429c      	cmp	r4, r3
 80040e6:	f04f 0b00 	mov.w	fp, #0
 80040ea:	d30b      	bcc.n	8004104 <xTaskIncrementTick+0x70>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ec:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004198 <xTaskIncrementTick+0x104>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040f0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80041b8 <xTaskIncrementTick+0x124>
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f4:	f8d8 2000 	ldr.w	r2, [r8]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	b9a2      	cbnz	r2, 8004126 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fc:	9b01      	ldr	r3, [sp, #4]
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004108:	2214      	movs	r2, #20
 800410a:	434a      	muls	r2, r1
 800410c:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 800410e:	2a02      	cmp	r2, #2
 8004110:	bf28      	it	cs
 8004112:	f04f 0b01 	movcs.w	fp, #1
 8004116:	e030      	b.n	800417a <xTaskIncrementTick+0xe6>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004118:	4a25      	ldr	r2, [pc, #148]	; (80041b0 <xTaskIncrementTick+0x11c>)
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004120:	f04f 0b00 	mov.w	fp, #0
 8004124:	e029      	b.n	800417a <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004126:	f8d8 2000 	ldr.w	r2, [r8]
 800412a:	68d2      	ldr	r2, [r2, #12]
 800412c:	68d5      	ldr	r5, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800412e:	6869      	ldr	r1, [r5, #4]

					if( xConstTickCount < xItemValue )
 8004130:	428c      	cmp	r4, r1
 8004132:	d202      	bcs.n	800413a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004134:	9b01      	ldr	r3, [sp, #4]
 8004136:	6019      	str	r1, [r3, #0]
						break;
 8004138:	e7e4      	b.n	8004104 <xTaskIncrementTick+0x70>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800413a:	f105 0a04 	add.w	sl, r5, #4
 800413e:	4650      	mov	r0, sl
 8004140:	f7ff fa22 	bl	8003588 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004144:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004146:	b119      	cbz	r1, 8004150 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004148:	f105 0018 	add.w	r0, r5, #24
 800414c:	f7ff fa1c 	bl	8003588 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004150:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004152:	f8d9 1000 	ldr.w	r1, [r9]
 8004156:	2314      	movs	r3, #20
 8004158:	4288      	cmp	r0, r1
 800415a:	bf88      	it	hi
 800415c:	f8c9 0000 	strhi.w	r0, [r9]
 8004160:	4651      	mov	r1, sl
 8004162:	fb03 6000 	mla	r0, r3, r0, r6
 8004166:	f7ff f9eb 	bl	8003540 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800416a:	6838      	ldr	r0, [r7, #0]
 800416c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800416e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8004170:	4291      	cmp	r1, r2
 8004172:	bf28      	it	cs
 8004174:	f04f 0b01 	movcs.w	fp, #1
 8004178:	e7bc      	b.n	80040f4 <xTaskIncrementTick+0x60>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800417a:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <xTaskIncrementTick+0x120>)
 800417c:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 800417e:	2a00      	cmp	r2, #0
 8004180:	bf18      	it	ne
 8004182:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8004186:	4658      	mov	r0, fp
 8004188:	b003      	add	sp, #12
 800418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418e:	bf00      	nop
 8004190:	2000069c 	.word	0x2000069c
 8004194:	200006bc 	.word	0x200006bc
 8004198:	20000208 	.word	0x20000208
 800419c:	200006c0 	.word	0x200006c0
 80041a0:	20000204 	.word	0x20000204
 80041a4:	20000200 	.word	0x20000200
 80041a8:	2000023c 	.word	0x2000023c
 80041ac:	200006a4 	.word	0x200006a4
 80041b0:	20000238 	.word	0x20000238
 80041b4:	200006f8 	.word	0x200006f8
 80041b8:	200006f4 	.word	0x200006f4

080041bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041c0:	4c2f      	ldr	r4, [pc, #188]	; (8004280 <xTaskResumeAll+0xc4>)
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	b943      	cbnz	r3, 80041d8 <xTaskResumeAll+0x1c>
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	e7fe      	b.n	80041d6 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041d8:	f000 fdf4 	bl	8004dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	3b01      	subs	r3, #1
 80041e0:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041e2:	6824      	ldr	r4, [r4, #0]
 80041e4:	b10c      	cbz	r4, 80041ea <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 80041e6:	2400      	movs	r4, #0
 80041e8:	e045      	b.n	8004276 <xTaskResumeAll+0xba>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041ea:	4b26      	ldr	r3, [pc, #152]	; (8004284 <xTaskResumeAll+0xc8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f9      	beq.n	80041e6 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041f2:	4e25      	ldr	r6, [pc, #148]	; (8004288 <xTaskResumeAll+0xcc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 80041f4:	4f25      	ldr	r7, [pc, #148]	; (800428c <xTaskResumeAll+0xd0>)
 80041f6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80042a0 <xTaskResumeAll+0xe4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041fa:	6833      	ldr	r3, [r6, #0]
 80041fc:	b1f3      	cbz	r3, 800423c <xTaskResumeAll+0x80>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80041fe:	68f3      	ldr	r3, [r6, #12]
 8004200:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004202:	1d25      	adds	r5, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004204:	f104 0018 	add.w	r0, r4, #24
 8004208:	f7ff f9be 	bl	8003588 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800420c:	4628      	mov	r0, r5
 800420e:	f7ff f9bb 	bl	8003588 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	2014      	movs	r0, #20
 8004218:	4293      	cmp	r3, r2
 800421a:	fb00 8003 	mla	r0, r0, r3, r8
 800421e:	4629      	mov	r1, r5
 8004220:	bf88      	it	hi
 8004222:	603b      	strhi	r3, [r7, #0]
 8004224:	f7ff f98c 	bl	8003540 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004228:	4b19      	ldr	r3, [pc, #100]	; (8004290 <xTaskResumeAll+0xd4>)
 800422a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8004232:	bf22      	ittt	cs
 8004234:	4b17      	ldrcs	r3, [pc, #92]	; (8004294 <xTaskResumeAll+0xd8>)
 8004236:	2201      	movcs	r2, #1
 8004238:	601a      	strcs	r2, [r3, #0]
 800423a:	e7de      	b.n	80041fa <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800423c:	b10c      	cbz	r4, 8004242 <xTaskResumeAll+0x86>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800423e:	f7ff fd37 	bl	8003cb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <xTaskResumeAll+0xdc>)
 8004244:	681c      	ldr	r4, [r3, #0]
 8004246:	461d      	mov	r5, r3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004248:	b144      	cbz	r4, 800425c <xTaskResumeAll+0xa0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 800424a:	4e12      	ldr	r6, [pc, #72]	; (8004294 <xTaskResumeAll+0xd8>)
 800424c:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800424e:	f7ff ff21 	bl	8004094 <xTaskIncrementTick>
 8004252:	b100      	cbz	r0, 8004256 <xTaskResumeAll+0x9a>
							{
								xYieldPending = pdTRUE;
 8004254:	6037      	str	r7, [r6, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004256:	3c01      	subs	r4, #1
 8004258:	d1f9      	bne.n	800424e <xTaskResumeAll+0x92>

						uxPendedTicks = 0;
 800425a:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800425c:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <xTaskResumeAll+0xd8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0c0      	beq.n	80041e6 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <xTaskResumeAll+0xe0>)
 8004266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004274:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004276:	f000 fdc7 	bl	8004e08 <vPortExitCritical>

	return xAlreadyYielded;
}
 800427a:	4620      	mov	r0, r4
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	2000069c 	.word	0x2000069c
 8004284:	200006f0 	.word	0x200006f0
 8004288:	200006a8 	.word	0x200006a8
 800428c:	200006f4 	.word	0x200006f4
 8004290:	200006a4 	.word	0x200006a4
 8004294:	200006f8 	.word	0x200006f8
 8004298:	20000238 	.word	0x20000238
 800429c:	e000ed04 	.word	0xe000ed04
 80042a0:	2000023c 	.word	0x2000023c

080042a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042a4:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042a6:	b940      	cbnz	r0, 80042ba <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80042a8:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <vTaskDelay+0x40>)
 80042aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	bd08      	pop	{r3, pc}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <vTaskDelay+0x44>)
 80042bc:	6819      	ldr	r1, [r3, #0]
 80042be:	b141      	cbz	r1, 80042d2 <vTaskDelay+0x2e>
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	e7fe      	b.n	80042d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80042d2:	f7ff fed1 	bl	8004078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042d6:	f7ff fd93 	bl	8003e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042da:	f7ff ff6f 	bl	80041bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042de:	2800      	cmp	r0, #0
 80042e0:	d0e2      	beq.n	80042a8 <vTaskDelay+0x4>
 80042e2:	bd08      	pop	{r3, pc}
 80042e4:	e000ed04 	.word	0xe000ed04
 80042e8:	2000069c 	.word	0x2000069c

080042ec <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ec:	4b18      	ldr	r3, [pc, #96]	; (8004350 <vTaskSwitchContext+0x64>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b18      	ldr	r3, [pc, #96]	; (8004354 <vTaskSwitchContext+0x68>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042f4:	b112      	cbz	r2, 80042fc <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}
	else
	{
		xYieldPending = pdFALSE;
 80042fc:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80042fe:	4b16      	ldr	r3, [pc, #88]	; (8004358 <vTaskSwitchContext+0x6c>)
 8004300:	4816      	ldr	r0, [pc, #88]	; (800435c <vTaskSwitchContext+0x70>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	461d      	mov	r5, r3
 8004306:	2714      	movs	r7, #20
 8004308:	fb07 f302 	mul.w	r3, r7, r2
 800430c:	18c1      	adds	r1, r0, r3
 800430e:	58c6      	ldr	r6, [r0, r3]
 8004310:	4c12      	ldr	r4, [pc, #72]	; (800435c <vTaskSwitchContext+0x70>)
 8004312:	b95e      	cbnz	r6, 800432c <vTaskSwitchContext+0x40>
 8004314:	b942      	cbnz	r2, 8004328 <vTaskSwitchContext+0x3c>
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	e7fe      	b.n	8004326 <vTaskSwitchContext+0x3a>
 8004328:	3a01      	subs	r2, #1
 800432a:	e7ed      	b.n	8004308 <vTaskSwitchContext+0x1c>
 800432c:	6848      	ldr	r0, [r1, #4]
 800432e:	3308      	adds	r3, #8
 8004330:	6840      	ldr	r0, [r0, #4]
 8004332:	6048      	str	r0, [r1, #4]
 8004334:	4423      	add	r3, r4
 8004336:	4298      	cmp	r0, r3
 8004338:	bf04      	itt	eq
 800433a:	6843      	ldreq	r3, [r0, #4]
 800433c:	604b      	streq	r3, [r1, #4]
 800433e:	2314      	movs	r3, #20
 8004340:	fb03 4302 	mla	r3, r3, r2, r4
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	68d9      	ldr	r1, [r3, #12]
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <vTaskSwitchContext+0x74>)
 800434a:	6019      	str	r1, [r3, #0]
 800434c:	602a      	str	r2, [r5, #0]
 800434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004350:	2000069c 	.word	0x2000069c
 8004354:	200006f8 	.word	0x200006f8
 8004358:	200006f4 	.word	0x200006f4
 800435c:	2000023c 	.word	0x2000023c
 8004360:	200006a4 	.word	0x200006a4

08004364 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004364:	b510      	push	{r4, lr}
 8004366:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004368:	b940      	cbnz	r0, 800437c <vTaskPlaceOnEventList+0x18>
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	e7fe      	b.n	800437a <vTaskPlaceOnEventList+0x16>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <vTaskPlaceOnEventList+0x30>)
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	3118      	adds	r1, #24
 8004382:	f7ff f8e9 	bl	8003558 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004386:	4620      	mov	r0, r4
 8004388:	2101      	movs	r1, #1
}
 800438a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800438e:	f7ff bd37 	b.w	8003e00 <prvAddCurrentTaskToDelayedList>
 8004392:	bf00      	nop
 8004394:	200006a4 	.word	0x200006a4

08004398 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	460d      	mov	r5, r1
 800439c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800439e:	b940      	cbnz	r0, 80043b2 <vTaskPlaceOnEventListRestricted+0x1a>
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	e7fe      	b.n	80043b0 <vTaskPlaceOnEventListRestricted+0x18>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <vTaskPlaceOnEventListRestricted+0x38>)
 80043b4:	6819      	ldr	r1, [r3, #0]
 80043b6:	3118      	adds	r1, #24
 80043b8:	f7ff f8c2 	bl	8003540 <vListInsertEnd>
		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
		{
			xTicksToWait = portMAX_DELAY;
 80043bc:	2c00      	cmp	r4, #0
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043be:	4621      	mov	r1, r4
 80043c0:	bf0c      	ite	eq
 80043c2:	4628      	moveq	r0, r5
 80043c4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80043c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			xTicksToWait = portMAX_DELAY;
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043cc:	f7ff bd18 	b.w	8003e00 <prvAddCurrentTaskToDelayedList>
 80043d0:	200006a4 	.word	0x200006a4

080043d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043d4:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80043d6:	68c3      	ldr	r3, [r0, #12]
 80043d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80043da:	b944      	cbnz	r4, 80043ee <xTaskRemoveFromEventList+0x1a>
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	e7fe      	b.n	80043ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043ee:	f104 0518 	add.w	r5, r4, #24
 80043f2:	4628      	mov	r0, r5
 80043f4:	f7ff f8c8 	bl	8003588 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <xTaskRemoveFromEventList+0x68>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	b97b      	cbnz	r3, 800441e <xTaskRemoveFromEventList+0x4a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043fe:	1d25      	adds	r5, r4, #4
 8004400:	4628      	mov	r0, r5
 8004402:	f7ff f8c1 	bl	8003588 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004406:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <xTaskRemoveFromEventList+0x6c>)
 8004408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800440a:	6811      	ldr	r1, [r2, #0]
 800440c:	428b      	cmp	r3, r1
 800440e:	bf88      	it	hi
 8004410:	6013      	strhi	r3, [r2, #0]
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <xTaskRemoveFromEventList+0x70>)
 8004414:	2014      	movs	r0, #20
 8004416:	4629      	mov	r1, r5
 8004418:	fb00 2003 	mla	r0, r0, r3, r2
 800441c:	e001      	b.n	8004422 <xTaskRemoveFromEventList+0x4e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800441e:	480a      	ldr	r0, [pc, #40]	; (8004448 <xTaskRemoveFromEventList+0x74>)
 8004420:	4629      	mov	r1, r5
 8004422:	f7ff f88d 	bl	8003540 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <xTaskRemoveFromEventList+0x78>)
 8004428:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004430:	bf83      	ittte	hi
 8004432:	4b07      	ldrhi	r3, [pc, #28]	; (8004450 <xTaskRemoveFromEventList+0x7c>)
 8004434:	2001      	movhi	r0, #1
 8004436:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8004438:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	2000069c 	.word	0x2000069c
 8004440:	200006f4 	.word	0x200006f4
 8004444:	2000023c 	.word	0x2000023c
 8004448:	200006a8 	.word	0x200006a8
 800444c:	200006a4 	.word	0x200006a4
 8004450:	200006f8 	.word	0x200006f8

08004454 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <vTaskInternalSetTimeOutState+0x10>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800445a:	4b03      	ldr	r3, [pc, #12]	; (8004468 <vTaskInternalSetTimeOutState+0x14>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6043      	str	r3, [r0, #4]
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20000204 	.word	0x20000204
 8004468:	200006bc 	.word	0x200006bc

0800446c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	460c      	mov	r4, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004470:	4605      	mov	r5, r0
 8004472:	b940      	cbnz	r0, 8004486 <xTaskCheckForTimeOut+0x1a>
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	e7fe      	b.n	8004484 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004486:	b941      	cbnz	r1, 800449a <xTaskCheckForTimeOut+0x2e>
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	e7fe      	b.n	8004498 <xTaskCheckForTimeOut+0x2c>

	taskENTER_CRITICAL();
 800449a:	f000 fc93 	bl	8004dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <xTaskCheckForTimeOut+0x74>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044a0:	6869      	ldr	r1, [r5, #4]
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044a2:	681a      	ldr	r2, [r3, #0]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	1c58      	adds	r0, r3, #1
 80044a8:	d012      	beq.n	80044d0 <xTaskCheckForTimeOut+0x64>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044aa:	480e      	ldr	r0, [pc, #56]	; (80044e4 <xTaskCheckForTimeOut+0x78>)
 80044ac:	682e      	ldr	r6, [r5, #0]
 80044ae:	6800      	ldr	r0, [r0, #0]
 80044b0:	4286      	cmp	r6, r0
 80044b2:	d001      	beq.n	80044b8 <xTaskCheckForTimeOut+0x4c>
 80044b4:	428a      	cmp	r2, r1
 80044b6:	d20d      	bcs.n	80044d4 <xTaskCheckForTimeOut+0x68>

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044b8:	1a52      	subs	r2, r2, r1
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d205      	bcs.n	80044ca <xTaskCheckForTimeOut+0x5e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044c2:	4628      	mov	r0, r5
 80044c4:	f7ff ffc6 	bl	8004454 <vTaskInternalSetTimeOutState>
 80044c8:	e002      	b.n	80044d0 <xTaskCheckForTimeOut+0x64>
			xReturn = pdFALSE;
		}
		else
		{
			*pxTicksToWait = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	e001      	b.n	80044d4 <xTaskCheckForTimeOut+0x68>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044d0:	2400      	movs	r4, #0
 80044d2:	e000      	b.n	80044d6 <xTaskCheckForTimeOut+0x6a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044d4:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80044d6:	f000 fc97 	bl	8004e08 <vPortExitCritical>

	return xReturn;
}
 80044da:	4620      	mov	r0, r4
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
 80044de:	bf00      	nop
 80044e0:	200006bc 	.word	0x200006bc
 80044e4:	20000204 	.word	0x20000204

080044e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 80044e8:	4b01      	ldr	r3, [pc, #4]	; (80044f0 <vTaskMissedYield+0x8>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	4770      	bx	lr
 80044f0:	200006f8 	.word	0x200006f8

080044f4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <xTaskGetSchedulerState+0x18>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b133      	cbz	r3, 8004508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <xTaskGetSchedulerState+0x1c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004500:	bf0c      	ite	eq
 8004502:	2002      	moveq	r0, #2
 8004504:	2000      	movne	r0, #0
 8004506:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004508:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800450a:	4770      	bx	lr
 800450c:	2000020c 	.word	0x2000020c
 8004510:	2000069c 	.word	0x2000069c

08004514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004514:	b538      	push	{r3, r4, r5, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8004516:	4604      	mov	r4, r0
 8004518:	b908      	cbnz	r0, 800451e <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 800451a:	2000      	movs	r0, #0
 800451c:	bd38      	pop	{r3, r4, r5, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <xTaskPriorityDisinherit+0x78>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4298      	cmp	r0, r3
 8004524:	d008      	beq.n	8004538 <xTaskPriorityDisinherit+0x24>
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	e7fe      	b.n	8004536 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004538:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800453a:	b943      	cbnz	r3, 800454e <xTaskPriorityDisinherit+0x3a>
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	e7fe      	b.n	800454c <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800454e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004550:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8004552:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004554:	4291      	cmp	r1, r2
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8004556:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004558:	d0df      	beq.n	800451a <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1dd      	bne.n	800451a <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800455e:	1d05      	adds	r5, r0, #4
 8004560:	4628      	mov	r0, r5
 8004562:	f7ff f811 	bl	8003588 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004566:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004568:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800456e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <xTaskPriorityDisinherit+0x7c>)
 8004572:	6811      	ldr	r1, [r2, #0]
 8004574:	428b      	cmp	r3, r1
 8004576:	bf88      	it	hi
 8004578:	6013      	strhi	r3, [r2, #0]
 800457a:	4a06      	ldr	r2, [pc, #24]	; (8004594 <xTaskPriorityDisinherit+0x80>)
 800457c:	2014      	movs	r0, #20
 800457e:	fb00 2003 	mla	r0, r0, r3, r2
 8004582:	4629      	mov	r1, r5
 8004584:	f7fe ffdc 	bl	8003540 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004588:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	200006a4 	.word	0x200006a4
 8004590:	200006f4 	.word	0x200006f4
 8004594:	2000023c 	.word	0x2000023c

08004598 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800459a:	4c11      	ldr	r4, [pc, #68]	; (80045e0 <prvCheckForValidListAndQueue+0x48>)
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800459c:	f000 fc12 	bl	8004dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045a0:	6825      	ldr	r5, [r4, #0]
 80045a2:	b9bd      	cbnz	r5, 80045d4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80045a4:	4f0f      	ldr	r7, [pc, #60]	; (80045e4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80045a6:	4e10      	ldr	r6, [pc, #64]	; (80045e8 <prvCheckForValidListAndQueue+0x50>)
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 80045a8:	4638      	mov	r0, r7
 80045aa:	f7fe ffbb 	bl	8003524 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7fe ffb8 	bl	8003524 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045b6:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <prvCheckForValidListAndQueue+0x58>)
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 80045b8:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045ba:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <prvCheckForValidListAndQueue+0x5c>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045bc:	2110      	movs	r1, #16
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 80045be:	601e      	str	r6, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045c0:	200a      	movs	r0, #10
 80045c2:	9500      	str	r5, [sp, #0]
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <prvCheckForValidListAndQueue+0x60>)
 80045c6:	f7ff f8bf 	bl	8003748 <xQueueGenericCreateStatic>
 80045ca:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045cc:	b110      	cbz	r0, 80045d4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045ce:	490b      	ldr	r1, [pc, #44]	; (80045fc <prvCheckForValidListAndQueue+0x64>)
 80045d0:	f7ff faba 	bl	8003b48 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80045d4:	b003      	add	sp, #12
 80045d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045da:	f000 bc15 	b.w	8004e08 <vPortExitCritical>
 80045de:	bf00      	nop
 80045e0:	2000081c 	.word	0x2000081c
 80045e4:	20000700 	.word	0x20000700
 80045e8:	20000714 	.word	0x20000714
 80045ec:	200006fc 	.word	0x200006fc
 80045f0:	2000072c 	.word	0x2000072c
 80045f4:	20000820 	.word	0x20000820
 80045f8:	200007cc 	.word	0x200007cc
 80045fc:	08006e03 	.word	0x08006e03

08004600 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8004600:	4291      	cmp	r1, r2
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004602:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004604:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004606:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004608:	d806      	bhi.n	8004618 <prvInsertTimerInActiveList+0x18>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800460a:	1ad2      	subs	r2, r2, r3
 800460c:	6983      	ldr	r3, [r0, #24]
 800460e:	429a      	cmp	r2, r3
 8004610:	d20d      	bcs.n	800462e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004612:	1d01      	adds	r1, r0, #4
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <prvInsertTimerInActiveList+0x34>)
 8004616:	e005      	b.n	8004624 <prvInsertTimerInActiveList+0x24>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004618:	429a      	cmp	r2, r3
 800461a:	d201      	bcs.n	8004620 <prvInsertTimerInActiveList+0x20>
 800461c:	4299      	cmp	r1, r3
 800461e:	d206      	bcs.n	800462e <prvInsertTimerInActiveList+0x2e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <prvInsertTimerInActiveList+0x38>)
 8004622:	1d01      	adds	r1, r0, #4
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f7fe ff97 	bl	8003558 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 800462a:	2000      	movs	r0, #0
 800462c:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800462e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8004630:	bd08      	pop	{r3, pc}
 8004632:	bf00      	nop
 8004634:	20000820 	.word	0x20000820
 8004638:	200006fc 	.word	0x200006fc

0800463c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800463c:	b510      	push	{r4, lr}
 800463e:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004640:	f7ff ffaa 	bl	8004598 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004644:	4b13      	ldr	r3, [pc, #76]	; (8004694 <xTimerCreateTimerTask+0x58>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	b943      	cbnz	r3, 800465c <xTimerCreateTimerTask+0x20>
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	e01a      	b.n	8004692 <xTimerCreateTimerTask+0x56>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800465c:	2400      	movs	r4, #0
			StackType_t *pxTimerTaskStackBuffer = NULL;
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800465e:	aa07      	add	r2, sp, #28
 8004660:	a906      	add	r1, sp, #24
 8004662:	a805      	add	r0, sp, #20

	if( xTimerQueue != NULL )
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004664:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004666:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004668:	f000 fa46 	bl	8004af8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800466c:	9b05      	ldr	r3, [sp, #20]
 800466e:	9302      	str	r3, [sp, #8]
 8004670:	9b06      	ldr	r3, [sp, #24]
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	2302      	movs	r3, #2
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	9a07      	ldr	r2, [sp, #28]
 800467a:	4907      	ldr	r1, [pc, #28]	; (8004698 <xTimerCreateTimerTask+0x5c>)
 800467c:	4807      	ldr	r0, [pc, #28]	; (800469c <xTimerCreateTimerTask+0x60>)
 800467e:	4623      	mov	r3, r4
 8004680:	f7ff fbfa 	bl	8003e78 <xTaskCreateStatic>
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <xTimerCreateTimerTask+0x64>)
 8004686:	6018      	str	r0, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004688:	2800      	cmp	r0, #0
 800468a:	d0de      	beq.n	800464a <xTimerCreateTimerTask+0xe>
	return xReturn;
}
 800468c:	2001      	movs	r0, #1
 800468e:	b008      	add	sp, #32
 8004690:	bd10      	pop	{r4, pc}
 8004692:	e7fe      	b.n	8004692 <xTimerCreateTimerTask+0x56>
 8004694:	2000081c 	.word	0x2000081c
 8004698:	08006e08 	.word	0x08006e08
 800469c:	08004781 	.word	0x08004781
 80046a0:	20000824 	.word	0x20000824

080046a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046a4:	b530      	push	{r4, r5, lr}
 80046a6:	4615      	mov	r5, r2
 80046a8:	b085      	sub	sp, #20
 80046aa:	461a      	mov	r2, r3
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046ac:	4603      	mov	r3, r0
 80046ae:	b940      	cbnz	r0, 80046c2 <xTimerGenericCommand+0x1e>
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	e7fe      	b.n	80046c0 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046c2:	4c0d      	ldr	r4, [pc, #52]	; (80046f8 <xTimerGenericCommand+0x54>)
 80046c4:	6820      	ldr	r0, [r4, #0]
 80046c6:	b1a8      	cbz	r0, 80046f4 <xTimerGenericCommand+0x50>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046c8:	2905      	cmp	r1, #5
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046ca:	e88d 0022 	stmia.w	sp, {r1, r5}
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80046ce:	9302      	str	r3, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046d0:	dc0c      	bgt.n	80046ec <xTimerGenericCommand+0x48>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046d2:	f7ff ff0f 	bl	80044f4 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046d6:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046d8:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046da:	bf08      	it	eq
 80046dc:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046de:	6820      	ldr	r0, [r4, #0]
 80046e0:	bf18      	it	ne
 80046e2:	461a      	movne	r2, r3
 80046e4:	4669      	mov	r1, sp
 80046e6:	f7ff f87d 	bl	80037e4 <xQueueGenericSend>
 80046ea:	e003      	b.n	80046f4 <xTimerGenericCommand+0x50>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046ec:	2300      	movs	r3, #0
 80046ee:	4669      	mov	r1, sp
 80046f0:	f7ff f92a 	bl	8003948 <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 80046f4:	b005      	add	sp, #20
 80046f6:	bd30      	pop	{r4, r5, pc}
 80046f8:	2000081c 	.word	0x2000081c

080046fc <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004700:	4e1d      	ldr	r6, [pc, #116]	; (8004778 <prvSwitchTimerLists+0x7c>)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004702:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004706:	4637      	mov	r7, r6
 8004708:	6833      	ldr	r3, [r6, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	b35a      	cbz	r2, 8004766 <prvSwitchTimerLists+0x6a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800470e:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004710:	68dc      	ldr	r4, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004712:	681d      	ldr	r5, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004714:	f104 0904 	add.w	r9, r4, #4
 8004718:	4648      	mov	r0, r9
 800471a:	f7fe ff35 	bl	8003588 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800471e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004720:	4620      	mov	r0, r4
 8004722:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004724:	69e3      	ldr	r3, [r4, #28]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d1ee      	bne.n	8004708 <prvSwitchTimerLists+0xc>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800472a:	69a3      	ldr	r3, [r4, #24]
 800472c:	442b      	add	r3, r5
			if( xReloadTime > xNextExpireTime )
 800472e:	429d      	cmp	r5, r3
 8004730:	d206      	bcs.n	8004740 <prvSwitchTimerLists+0x44>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004732:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004734:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004736:	4649      	mov	r1, r9
 8004738:	6838      	ldr	r0, [r7, #0]
 800473a:	f7fe ff0d 	bl	8003558 <vListInsert>
 800473e:	e7e3      	b.n	8004708 <prvSwitchTimerLists+0xc>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004740:	2300      	movs	r3, #0
 8004742:	f8cd 8000 	str.w	r8, [sp]
 8004746:	462a      	mov	r2, r5
 8004748:	4619      	mov	r1, r3
 800474a:	4620      	mov	r0, r4
 800474c:	f7ff ffaa 	bl	80046a4 <xTimerGenericCommand>
				configASSERT( xResult );
 8004750:	2800      	cmp	r0, #0
 8004752:	d1d9      	bne.n	8004708 <prvSwitchTimerLists+0xc>
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	e7fe      	b.n	8004764 <prvSwitchTimerLists+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8004766:	4a05      	ldr	r2, [pc, #20]	; (800477c <prvSwitchTimerLists+0x80>)
 8004768:	4903      	ldr	r1, [pc, #12]	; (8004778 <prvSwitchTimerLists+0x7c>)
 800476a:	6810      	ldr	r0, [r2, #0]
 800476c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800476e:	6013      	str	r3, [r2, #0]
}
 8004770:	b003      	add	sp, #12
 8004772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004776:	bf00      	nop
 8004778:	200006fc 	.word	0x200006fc
 800477c:	20000820 	.word	0x20000820

08004780 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004784:	4d73      	ldr	r5, [pc, #460]	; (8004954 <prvTimerTask+0x1d4>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8004786:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8004964 <prvTimerTask+0x1e4>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	462f      	mov	r7, r5
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800478e:	682b      	ldr	r3, [r5, #0]
 8004790:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8004794:	f1bb 0f00 	cmp.w	fp, #0
 8004798:	d003      	beq.n	80047a2 <prvTimerTask+0x22>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f8d3 9000 	ldr.w	r9, [r3]
 80047a0:	e000      	b.n	80047a4 <prvTimerTask+0x24>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047a2:	46d9      	mov	r9, fp
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047a4:	f7ff fc68 	bl	8004078 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047a8:	f7ff fc6e 	bl	8004088 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 80047ac:	4b6a      	ldr	r3, [pc, #424]	; (8004958 <prvTimerTask+0x1d8>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4290      	cmp	r0, r2
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047b2:	4682      	mov	sl, r0
 80047b4:	461e      	mov	r6, r3

	if( xTimeNow < xLastTime )
 80047b6:	d205      	bcs.n	80047c4 <prvTimerTask+0x44>
 80047b8:	9303      	str	r3, [sp, #12]
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
 80047ba:	2401      	movs	r4, #1

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
 80047bc:	f7ff ff9e 	bl	80046fc <prvSwitchTimerLists>
 80047c0:	9b03      	ldr	r3, [sp, #12]
 80047c2:	e000      	b.n	80047c6 <prvTimerTask+0x46>
		*pxTimerListsWereSwitched = pdTRUE;
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047c4:	2400      	movs	r4, #0
	}

	xLastTime = xTimeNow;
 80047c6:	f8c3 a000 	str.w	sl, [r3]
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
 80047ca:	2c00      	cmp	r4, #0
 80047cc:	d14e      	bne.n	800486c <prvTimerTask+0xec>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047ce:	f1bb 0f00 	cmp.w	fp, #0
 80047d2:	d030      	beq.n	8004836 <prvTimerTask+0xb6>
 80047d4:	45ca      	cmp	sl, r9
 80047d6:	d335      	bcc.n	8004844 <prvTimerTask+0xc4>
			{
				( void ) xTaskResumeAll();
 80047d8:	f7ff fcf0 	bl	80041bc <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f8d3 b00c 	ldr.w	fp, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047e4:	f10b 0004 	add.w	r0, fp, #4
 80047e8:	f7fe fece 	bl	8003588 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d119      	bne.n	8004828 <prvTimerTask+0xa8>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047f4:	f8db 1018 	ldr.w	r1, [fp, #24]
 80047f8:	464b      	mov	r3, r9
 80047fa:	4652      	mov	r2, sl
 80047fc:	4449      	add	r1, r9
 80047fe:	4658      	mov	r0, fp
 8004800:	f7ff fefe 	bl	8004600 <prvInsertTimerInActiveList>
 8004804:	b180      	cbz	r0, 8004828 <prvTimerTask+0xa8>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004806:	9400      	str	r4, [sp, #0]
 8004808:	4623      	mov	r3, r4
 800480a:	464a      	mov	r2, r9
 800480c:	4621      	mov	r1, r4
 800480e:	4658      	mov	r0, fp
 8004810:	f7ff ff48 	bl	80046a4 <xTimerGenericCommand>
			configASSERT( xResult );
 8004814:	b940      	cbnz	r0, 8004828 <prvTimerTask+0xa8>
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	e7fe      	b.n	8004826 <prvTimerTask+0xa6>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004828:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800482c:	4658      	mov	r0, fp
 800482e:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004830:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004960 <prvTimerTask+0x1e0>
 8004834:	e027      	b.n	8004886 <prvTimerTask+0x106>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004836:	4b49      	ldr	r3, [pc, #292]	; (800495c <prvTimerTask+0x1dc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	fab2 f282 	clz	r2, r2
 8004840:	0952      	lsrs	r2, r2, #5
 8004842:	e000      	b.n	8004846 <prvTimerTask+0xc6>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004844:	4622      	mov	r2, r4
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004846:	4b46      	ldr	r3, [pc, #280]	; (8004960 <prvTimerTask+0x1e0>)
 8004848:	ebca 0109 	rsb	r1, sl, r9
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	f7ff f98f 	bl	8003b70 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8004852:	f7ff fcb3 	bl	80041bc <xTaskResumeAll>
 8004856:	2800      	cmp	r0, #0
 8004858:	d1ea      	bne.n	8004830 <prvTimerTask+0xb0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800485a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800485e:	f8c8 3000 	str.w	r3, [r8]
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	e7e1      	b.n	8004830 <prvTimerTask+0xb0>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800486c:	f7ff fca6 	bl	80041bc <xTaskResumeAll>
 8004870:	e7de      	b.n	8004830 <prvTimerTask+0xb0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004872:	9b04      	ldr	r3, [sp, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	da03      	bge.n	8004880 <prvTimerTask+0x100>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004878:	9907      	ldr	r1, [sp, #28]
 800487a:	9806      	ldr	r0, [sp, #24]
 800487c:	9b05      	ldr	r3, [sp, #20]
 800487e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004880:	9b04      	ldr	r3, [sp, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	da08      	bge.n	8004898 <prvTimerTask+0x118>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004886:	2200      	movs	r2, #0
 8004888:	a904      	add	r1, sp, #16
 800488a:	f8d9 0000 	ldr.w	r0, [r9]
 800488e:	f7ff f8bb 	bl	8003a08 <xQueueReceive>
 8004892:	2800      	cmp	r0, #0
 8004894:	d1ed      	bne.n	8004872 <prvTimerTask+0xf2>
 8004896:	e77a      	b.n	800478e <prvTimerTask+0xe>
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004898:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800489a:	6963      	ldr	r3, [r4, #20]
 800489c:	b113      	cbz	r3, 80048a4 <prvTimerTask+0x124>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800489e:	1d20      	adds	r0, r4, #4
 80048a0:	f7fe fe72 	bl	8003588 <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048a4:	f7ff fbf0 	bl	8004088 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 80048a8:	6833      	ldr	r3, [r6, #0]
 80048aa:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048ac:	4683      	mov	fp, r0

	if( xTimeNow < xLastTime )
 80048ae:	d201      	bcs.n	80048b4 <prvTimerTask+0x134>
	{
		prvSwitchTimerLists();
 80048b0:	f7ff ff24 	bl	80046fc <prvSwitchTimerLists>
 80048b4:	9a04      	ldr	r2, [sp, #16]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 80048b6:	f8c6 b000 	str.w	fp, [r6]
 80048ba:	2a09      	cmp	r2, #9
 80048bc:	d8e3      	bhi.n	8004886 <prvTimerTask+0x106>
 80048be:	2301      	movs	r3, #1
 80048c0:	4093      	lsls	r3, r2
 80048c2:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 80048c6:	d129      	bne.n	800491c <prvTimerTask+0x19c>
 80048c8:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80048cc:	d102      	bne.n	80048d4 <prvTimerTask+0x154>
 80048ce:	069b      	lsls	r3, r3, #26
 80048d0:	d437      	bmi.n	8004942 <prvTimerTask+0x1c2>
 80048d2:	e7d8      	b.n	8004886 <prvTimerTask+0x106>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048d4:	69a1      	ldr	r1, [r4, #24]
 80048d6:	9b05      	ldr	r3, [sp, #20]
 80048d8:	465a      	mov	r2, fp
 80048da:	4419      	add	r1, r3
 80048dc:	4620      	mov	r0, r4
 80048de:	f7ff fe8f 	bl	8004600 <prvInsertTimerInActiveList>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d0cf      	beq.n	8004886 <prvTimerTask+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e8:	4620      	mov	r0, r4
 80048ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048ec:	69e3      	ldr	r3, [r4, #28]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d1c9      	bne.n	8004886 <prvTimerTask+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048f2:	69a2      	ldr	r2, [r4, #24]
 80048f4:	9905      	ldr	r1, [sp, #20]
 80048f6:	f8cd a000 	str.w	sl, [sp]
 80048fa:	440a      	add	r2, r1
 80048fc:	4653      	mov	r3, sl
 80048fe:	4651      	mov	r1, sl
 8004900:	4620      	mov	r0, r4
 8004902:	f7ff fecf 	bl	80046a4 <xTimerGenericCommand>
							configASSERT( xResult );
 8004906:	2800      	cmp	r0, #0
 8004908:	d1bd      	bne.n	8004886 <prvTimerTask+0x106>
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	e7fe      	b.n	800491a <prvTimerTask+0x19a>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800491c:	9905      	ldr	r1, [sp, #20]
 800491e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004920:	b941      	cbnz	r1, 8004934 <prvTimerTask+0x1b4>
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	e7fe      	b.n	8004932 <prvTimerTask+0x1b2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004934:	465b      	mov	r3, fp
 8004936:	465a      	mov	r2, fp
 8004938:	4459      	add	r1, fp
 800493a:	4620      	mov	r0, r4
 800493c:	f7ff fe60 	bl	8004600 <prvInsertTimerInActiveList>
 8004940:	e7a1      	b.n	8004886 <prvTimerTask+0x106>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004942:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d19d      	bne.n	8004886 <prvTimerTask+0x106>
						{
							vPortFree( pxTimer );
 800494a:	4620      	mov	r0, r4
 800494c:	f000 f996 	bl	8004c7c <vPortFree>
 8004950:	e799      	b.n	8004886 <prvTimerTask+0x106>
 8004952:	bf00      	nop
 8004954:	200006fc 	.word	0x200006fc
 8004958:	20000728 	.word	0x20000728
 800495c:	20000820 	.word	0x20000820
 8004960:	2000081c 	.word	0x2000081c
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004968:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800496c:	b113      	cbz	r3, 8004974 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800496e:	f06f 0005 	mvn.w	r0, #5
 8004972:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004974:	f3ef 8310 	mrs	r3, PRIMASK
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f8      	bne.n	800496e <osKernelInitialize+0x6>
 800497c:	4b07      	ldr	r3, [pc, #28]	; (800499c <osKernelInitialize+0x34>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	2802      	cmp	r0, #2
 8004982:	d103      	bne.n	800498c <osKernelInitialize+0x24>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004984:	f3ef 8311 	mrs	r3, BASEPRI
 8004988:	b123      	cbz	r3, 8004994 <osKernelInitialize+0x2c>
 800498a:	e7f0      	b.n	800496e <osKernelInitialize+0x6>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800498c:	b910      	cbnz	r0, 8004994 <osKernelInitialize+0x2c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000c84 	.word	0x20000c84

080049a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049a0:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80049a6:	b113      	cbz	r3, 80049ae <osKernelStart+0xe>
    stat = osErrorISR;
 80049a8:	f06f 0005 	mvn.w	r0, #5
 80049ac:	bd10      	pop	{r4, pc}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ae:	f3ef 8410 	mrs	r4, PRIMASK
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80049b2:	2c00      	cmp	r4, #0
 80049b4:	d1f8      	bne.n	80049a8 <osKernelStart+0x8>
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <osKernelStart+0x3c>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	2a02      	cmp	r2, #2
 80049bc:	d103      	bne.n	80049c6 <osKernelStart+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049be:	f3ef 8311 	mrs	r3, BASEPRI
 80049c2:	b143      	cbz	r3, 80049d6 <osKernelStart+0x36>
 80049c4:	e7f0      	b.n	80049a8 <osKernelStart+0x8>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80049c6:	2a01      	cmp	r2, #1
 80049c8:	d105      	bne.n	80049d6 <osKernelStart+0x36>
      KernelState = osKernelRunning;
 80049ca:	2202      	movs	r2, #2
 80049cc:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80049ce:	f7ff fb0f 	bl	8003ff0 <vTaskStartScheduler>
      stat = osOK;
 80049d2:	4620      	mov	r0, r4
 80049d4:	bd10      	pop	{r4, pc}
    } else {
      stat = osError;
 80049d6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80049da:	bd10      	pop	{r4, pc}
 80049dc:	20000c84 	.word	0x20000c84

080049e0 <osKernelGetTickFreq>:
  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}
 80049e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049e4:	4770      	bx	lr
	...

080049e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ea:	b087      	sub	sp, #28
 80049ec:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049ee:	2200      	movs	r2, #0
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049f0:	460b      	mov	r3, r1
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049f2:	9205      	str	r2, [sp, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80049f8:	2a00      	cmp	r2, #0
 80049fa:	d149      	bne.n	8004a90 <osThreadNew+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fc:	f3ef 8210 	mrs	r2, PRIMASK
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	d145      	bne.n	8004a90 <osThreadNew+0xa8>
 8004a04:	4a25      	ldr	r2, [pc, #148]	; (8004a9c <osThreadNew+0xb4>)
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	2a02      	cmp	r2, #2
 8004a0a:	d103      	bne.n	8004a14 <osThreadNew+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a0c:	f3ef 8211 	mrs	r2, BASEPRI
 8004a10:	2a00      	cmp	r2, #0
 8004a12:	d13d      	bne.n	8004a90 <osThreadNew+0xa8>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d03b      	beq.n	8004a90 <osThreadNew+0xa8>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8004a1e:	b34c      	cbz	r4, 8004a74 <osThreadNew+0x8c>
      if (attr->name != NULL) {
 8004a20:	6821      	ldr	r1, [r4, #0]
 8004a22:	b909      	cbnz	r1, 8004a28 <osThreadNew+0x40>
  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8004a24:	f10d 0113 	add.w	r1, sp, #19

    if (attr != NULL) {
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004a28:	69a5      	ldr	r5, [r4, #24]
        prio = (UBaseType_t)attr->priority;
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	bf08      	it	eq
 8004a2e:	2518      	moveq	r5, #24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a30:	1e6a      	subs	r2, r5, #1
 8004a32:	2a37      	cmp	r2, #55	; 0x37
 8004a34:	d82e      	bhi.n	8004a94 <osThreadNew+0xac>
 8004a36:	6862      	ldr	r2, [r4, #4]
 8004a38:	07d2      	lsls	r2, r2, #31
 8004a3a:	d42b      	bmi.n	8004a94 <osThreadNew+0xac>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004a3c:	6966      	ldr	r6, [r4, #20]
 8004a3e:	b10e      	cbz	r6, 8004a44 <osThreadNew+0x5c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a40:	08b2      	lsrs	r2, r6, #2
 8004a42:	e000      	b.n	8004a46 <osThreadNew+0x5e>
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 8004a44:	2280      	movs	r2, #128	; 0x80
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a46:	68a7      	ldr	r7, [r4, #8]
 8004a48:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8004a4c:	b167      	cbz	r7, 8004a68 <osThreadNew+0x80>
 8004a4e:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 8004a52:	d91d      	bls.n	8004a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a54:	6924      	ldr	r4, [r4, #16]
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a56:	b1dc      	cbz	r4, 8004a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a58:	b1d6      	cbz	r6, 8004a90 <osThreadNew+0xa8>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a5a:	9702      	str	r7, [sp, #8]
 8004a5c:	9401      	str	r4, [sp, #4]
 8004a5e:	9500      	str	r5, [sp, #0]
 8004a60:	f7ff fa0a 	bl	8003e78 <xTaskCreateStatic>
 8004a64:	9005      	str	r0, [sp, #20]
 8004a66:	e013      	b.n	8004a90 <osThreadNew+0xa8>
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a68:	f1be 0f00 	cmp.w	lr, #0
 8004a6c:	d110      	bne.n	8004a90 <osThreadNew+0xa8>
    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8004a6e:	6924      	ldr	r4, [r4, #16]
 8004a70:	b124      	cbz	r4, 8004a7c <osThreadNew+0x94>
 8004a72:	e00d      	b.n	8004a90 <osThreadNew+0xa8>
  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
    name  = &empty;
 8004a74:	f10d 0113 	add.w	r1, sp, #19
  int32_t mem;

  hTask = NULL;

  if (!IS_IRQ() && (func != NULL)) {
    stack = configMINIMAL_STACK_SIZE;
 8004a78:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8004a7a:	2518      	movs	r5, #24
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a7c:	ac05      	add	r4, sp, #20
 8004a7e:	9401      	str	r4, [sp, #4]
 8004a80:	9500      	str	r5, [sp, #0]
 8004a82:	b292      	uxth	r2, r2
 8004a84:	f7ff fa2f 	bl	8003ee6 <xTaskCreate>
 8004a88:	2801      	cmp	r0, #1
          hTask = NULL;
 8004a8a:	bf1c      	itt	ne
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	9305      	strne	r3, [sp, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a90:	9805      	ldr	r0, [sp, #20]
 8004a92:	e000      	b.n	8004a96 <osThreadNew+0xae>
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
        return (NULL);
 8004a94:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8004a96:	b007      	add	sp, #28
 8004a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000c84 	.word	0x20000c84

08004aa0 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 8004aa0:	b508      	push	{r3, lr}
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f7ff fa4c 	bl	8003f40 <vTaskDelete>
 8004aa8:	e7fe      	b.n	8004aa8 <osThreadExit+0x8>
	...

08004aac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004aac:	b508      	push	{r3, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aae:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ab2:	b113      	cbz	r3, 8004aba <osDelay+0xe>
    stat = osErrorISR;
 8004ab4:	f06f 0005 	mvn.w	r0, #5
 8004ab8:	bd08      	pop	{r3, pc}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aba:	f3ef 8310 	mrs	r3, PRIMASK
}

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f8      	bne.n	8004ab4 <osDelay+0x8>
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <osDelay+0x30>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d103      	bne.n	8004ad2 <osDelay+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aca:	f3ef 8311 	mrs	r3, BASEPRI
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <osDelay+0x8>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8004ad2:	b110      	cbz	r0, 8004ada <osDelay+0x2e>
      vTaskDelay(ticks);
 8004ad4:	f7ff fbe6 	bl	80042a4 <vTaskDelay>

  if (IS_IRQ()) {
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 8004ad8:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004ada:	bd08      	pop	{r3, pc}
 8004adc:	20000c84 	.word	0x20000c84

08004ae0 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <vApplicationGetIdleTaskMemory+0x10>)
 8004ae2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <vApplicationGetIdleTaskMemory+0x14>)
 8004ae6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000828 	.word	0x20000828
 8004af4:	20000c88 	.word	0x20000c88

08004af8 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <vApplicationGetTimerTaskMemory+0x10>)
 8004afa:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <vApplicationGetTimerTaskMemory+0x14>)
 8004afe:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4770      	bx	lr
 8004b08:	20000e88 	.word	0x20000e88
 8004b0c:	20000884 	.word	0x20000884

08004b10 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b10:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <prvInsertBlockIntoFreeList+0x40>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4282      	cmp	r2, r0
 8004b18:	d201      	bcs.n	8004b1e <prvInsertBlockIntoFreeList+0xe>
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	e7fa      	b.n	8004b14 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	185c      	adds	r4, r3, r1
 8004b22:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b24:	bf01      	itttt	eq
 8004b26:	6840      	ldreq	r0, [r0, #4]
 8004b28:	1809      	addeq	r1, r1, r0
 8004b2a:	4618      	moveq	r0, r3
 8004b2c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b2e:	6841      	ldr	r1, [r0, #4]
 8004b30:	1844      	adds	r4, r0, r1
 8004b32:	42a2      	cmp	r2, r4
 8004b34:	d107      	bne.n	8004b46 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b36:	4c07      	ldr	r4, [pc, #28]	; (8004b54 <prvInsertBlockIntoFreeList+0x44>)
 8004b38:	6824      	ldr	r4, [r4, #0]
 8004b3a:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b3c:	bf1f      	itttt	ne
 8004b3e:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b40:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b42:	1909      	addne	r1, r1, r4
 8004b44:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b46:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b48:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b4a:	bf18      	it	ne
 8004b4c:	6018      	strne	r0, [r3, #0]
 8004b4e:	bd10      	pop	{r4, pc}
 8004b50:	20000eec 	.word	0x20000eec
 8004b54:	20000ee8 	.word	0x20000ee8

08004b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5c:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8004b5e:	f7ff fa8b 	bl	8004078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b62:	4940      	ldr	r1, [pc, #256]	; (8004c64 <pvPortMalloc+0x10c>)
 8004b64:	4d40      	ldr	r5, [pc, #256]	; (8004c68 <pvPortMalloc+0x110>)
 8004b66:	680b      	ldr	r3, [r1, #0]
 8004b68:	bb0b      	cbnz	r3, 8004bae <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b6a:	4a40      	ldr	r2, [pc, #256]	; (8004c6c <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b6c:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b6e:	bf1f      	itttt	ne
 8004b70:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b72:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b76:	f502 4300 	addne.w	r3, r2, #32768	; 0x8000
 8004b7a:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b7c:	bf14      	ite	ne
 8004b7e:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b80:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b84:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004b86:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b88:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b8c:	4e38      	ldr	r6, [pc, #224]	; (8004c70 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8004b8e:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8004b90:	2000      	movs	r0, #0
 8004b92:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b94:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8004b96:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b98:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b9a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b9c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b9e:	4b35      	ldr	r3, [pc, #212]	; (8004c74 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ba0:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba4:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <pvPortMalloc+0x120>)
 8004ba6:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ba8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bac:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bae:	682f      	ldr	r7, [r5, #0]
 8004bb0:	4227      	tst	r7, r4
 8004bb2:	d146      	bne.n	8004c42 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bb4:	2c00      	cmp	r4, #0
 8004bb6:	d045      	beq.n	8004c44 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8004bb8:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bbc:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bbe:	bf1c      	itt	ne
 8004bc0:	f023 0307 	bicne.w	r3, r3, #7
 8004bc4:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d039      	beq.n	8004c3e <pvPortMalloc+0xe6>
 8004bca:	4a2b      	ldr	r2, [pc, #172]	; (8004c78 <pvPortMalloc+0x120>)
 8004bcc:	6816      	ldr	r6, [r2, #0]
 8004bce:	42b3      	cmp	r3, r6
 8004bd0:	4690      	mov	r8, r2
 8004bd2:	d836      	bhi.n	8004c42 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <pvPortMalloc+0x118>)
 8004bd6:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bd8:	6868      	ldr	r0, [r5, #4]
 8004bda:	4283      	cmp	r3, r0
 8004bdc:	d803      	bhi.n	8004be6 <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bde:	6809      	ldr	r1, [r1, #0]
 8004be0:	428d      	cmp	r5, r1
 8004be2:	d106      	bne.n	8004bf2 <pvPortMalloc+0x9a>
 8004be4:	e02d      	b.n	8004c42 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004be6:	682c      	ldr	r4, [r5, #0]
 8004be8:	2c00      	cmp	r4, #0
 8004bea:	d0f8      	beq.n	8004bde <pvPortMalloc+0x86>
 8004bec:	462a      	mov	r2, r5
 8004bee:	4625      	mov	r5, r4
 8004bf0:	e7f2      	b.n	8004bd8 <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bf2:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bf4:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bf6:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bf8:	1ac2      	subs	r2, r0, r3
 8004bfa:	2a10      	cmp	r2, #16
 8004bfc:	d90f      	bls.n	8004c1e <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bfe:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c00:	0741      	lsls	r1, r0, #29
 8004c02:	d008      	beq.n	8004c16 <pvPortMalloc+0xbe>
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	e7fe      	b.n	8004c14 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c16:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c18:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c1a:	f7ff ff79 	bl	8004b10 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c1e:	4915      	ldr	r1, [pc, #84]	; (8004c74 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c20:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c22:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c24:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c26:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c28:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8004c2a:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c2e:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c32:	bf38      	it	cc
 8004c34:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c36:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c38:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	e002      	b.n	8004c44 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c3e:	461c      	mov	r4, r3
 8004c40:	e000      	b.n	8004c44 <pvPortMalloc+0xec>
 8004c42:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c44:	f7ff faba 	bl	80041bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c48:	0763      	lsls	r3, r4, #29
 8004c4a:	d008      	beq.n	8004c5e <pvPortMalloc+0x106>
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	e7fe      	b.n	8004c5c <pvPortMalloc+0x104>
	return pvReturn;
}
 8004c5e:	4620      	mov	r0, r4
 8004c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c64:	20000ee8 	.word	0x20000ee8
 8004c68:	20008ef4 	.word	0x20008ef4
 8004c6c:	20000ef4 	.word	0x20000ef4
 8004c70:	20000eec 	.word	0x20000eec
 8004c74:	20008ef8 	.word	0x20008ef8
 8004c78:	20000ee4 	.word	0x20000ee4

08004c7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c7c:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c7e:	4604      	mov	r4, r0
 8004c80:	b370      	cbz	r0, 8004ce0 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c82:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <vPortFree+0x68>)
 8004c84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	4213      	tst	r3, r2
 8004c8c:	d108      	bne.n	8004ca0 <vPortFree+0x24>
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	e7fe      	b.n	8004c9e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ca0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004ca4:	b141      	cbz	r1, 8004cb8 <vPortFree+0x3c>
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	e7fe      	b.n	8004cb6 <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cb8:	ea23 0302 	bic.w	r3, r3, r2
 8004cbc:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8004cc0:	f7ff f9da 	bl	8004078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <vPortFree+0x6c>)
 8004cc6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8004cca:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ccc:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cd0:	440b      	add	r3, r1
 8004cd2:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cd4:	f7ff ff1c 	bl	8004b10 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8004cdc:	f7ff ba6e 	b.w	80041bc <xTaskResumeAll>
 8004ce0:	bd10      	pop	{r4, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20008ef4 	.word	0x20008ef4
 8004ce8:	20000ee4 	.word	0x20000ee4

08004cec <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <prvTaskExitError+0x3c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	d008      	beq.n	8004d0c <prvTaskExitError+0x20>
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	e7fe      	b.n	8004d0a <prvTaskExitError+0x1e>
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d1c:	9b01      	ldr	r3, [sp, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0fc      	beq.n	8004d1c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d22:	b002      	add	sp, #8
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	2000006c 	.word	0x2000006c

08004d2c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d2c:	4808      	ldr	r0, [pc, #32]	; (8004d50 <prvPortStartFirstTask+0x24>)
 8004d2e:	6800      	ldr	r0, [r0, #0]
 8004d30:	6800      	ldr	r0, [r0, #0]
 8004d32:	f380 8808 	msr	MSP, r0
 8004d36:	f04f 0000 	mov.w	r0, #0
 8004d3a:	f380 8814 	msr	CONTROL, r0
 8004d3e:	b662      	cpsie	i
 8004d40:	b661      	cpsie	f
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	df00      	svc	0
 8004d4c:	bf00      	nop
 8004d4e:	0000      	.short	0x0000
 8004d50:	e000ed08 	.word	0xe000ed08

08004d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d64 <vPortEnableVFP+0x10>
 8004d58:	6801      	ldr	r1, [r0, #0]
 8004d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d5e:	6001      	str	r1, [r0, #0]
 8004d60:	4770      	bx	lr
 8004d62:	0000      	.short	0x0000
 8004d64:	e000ed88 	.word	0xe000ed88

08004d68 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d6c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <pxPortInitialiseStack+0x28>)
 8004d72:	f840 3c0c 	str.w	r3, [r0, #-12]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d76:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d7a:	f06f 0302 	mvn.w	r3, #2
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d7e:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d82:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d86:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8004d8a:	3844      	subs	r0, #68	; 0x44
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	08004ced 	.word	0x08004ced
	...

08004da0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <pxCurrentTCBConst2>)
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	6808      	ldr	r0, [r1, #0]
 8004da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004daa:	f380 8809 	msr	PSP, r0
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8811 	msr	BASEPRI, r0
 8004dba:	4770      	bx	lr
 8004dbc:	f3af 8000 	nop.w

08004dc0 <pxCurrentTCBConst2>:
 8004dc0:	200006a4 	.word	0x200006a4

08004dc4 <vPortEnterCritical>:
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dd4:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <vPortEnterCritical+0x3c>)
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dda:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ddc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dde:	d10d      	bne.n	8004dfc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004de0:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <vPortEnterCritical+0x40>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004de8:	d008      	beq.n	8004dfc <vPortEnterCritical+0x38>
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	e7fe      	b.n	8004dfa <vPortEnterCritical+0x36>
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	2000006c 	.word	0x2000006c
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8004e08:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <vPortExitCritical+0x24>)
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	b943      	cbnz	r3, 8004e20 <vPortExitCritical+0x18>
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	e7fe      	b.n	8004e1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004e20:	3b01      	subs	r3, #1
 8004e22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e24:	b90b      	cbnz	r3, 8004e2a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	4770      	bx	lr
 8004e2c:	2000006c 	.word	0x2000006c

08004e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e30:	f3ef 8009 	mrs	r0, PSP
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <pxCurrentTCBConst>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	f01e 0f10 	tst.w	lr, #16
 8004e40:	bf08      	it	eq
 8004e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	6010      	str	r0, [r2, #0]
 8004e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e54:	f380 8811 	msr	BASEPRI, r0
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f7ff fa44 	bl	80042ec <vTaskSwitchContext>
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	f380 8811 	msr	BASEPRI, r0
 8004e6c:	bc09      	pop	{r0, r3}
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	6808      	ldr	r0, [r1, #0]
 8004e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e76:	f01e 0f10 	tst.w	lr, #16
 8004e7a:	bf08      	it	eq
 8004e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e80:	f380 8809 	msr	PSP, r0
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	f3af 8000 	nop.w

08004e90 <pxCurrentTCBConst>:
 8004e90:	200006a4 	.word	0x200006a4

08004e94 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e94:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e96:	4909      	ldr	r1, [pc, #36]	; (8004ebc <vPortSetupTimerInterrupt+0x28>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e9c:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e9e:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <vPortSetupTimerInterrupt+0x2c>)
 8004ea0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eaa:	4906      	ldr	r1, [pc, #24]	; (8004ec4 <vPortSetupTimerInterrupt+0x30>)
 8004eac:	3b01      	subs	r3, #1
 8004eae:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eb0:	2307      	movs	r3, #7
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	e000e010 	.word	0xe000e010
 8004ebc:	e000e018 	.word	0xe000e018
 8004ec0:	20000068 	.word	0x20000068
 8004ec4:	e000e014 	.word	0xe000e014

08004ec8 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ec8:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <xPortStartScheduler+0xe8>)
 8004eca:	4a3a      	ldr	r2, [pc, #232]	; (8004fb4 <xPortStartScheduler+0xec>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ecc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	4291      	cmp	r1, r2
 8004ed2:	d108      	bne.n	8004ee6 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	e7fe      	b.n	8004ee4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b33      	ldr	r3, [pc, #204]	; (8004fb8 <xPortStartScheduler+0xf0>)
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d108      	bne.n	8004f00 <xPortStartScheduler+0x38>
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	e7fe      	b.n	8004efe <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f00:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <xPortStartScheduler+0xf4>)
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f08:	22ff      	movs	r2, #255	; 0xff
 8004f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f0c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f0e:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <xPortStartScheduler+0xf8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004f1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f1e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f20:	4a28      	ldr	r2, [pc, #160]	; (8004fc4 <xPortStartScheduler+0xfc>)
 8004f22:	2307      	movs	r3, #7
 8004f24:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f26:	2100      	movs	r1, #0
 8004f28:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004f2c:	0600      	lsls	r0, r0, #24
 8004f2e:	f103 34ff 	add.w	r4, r3, #4294967295
 8004f32:	d508      	bpl.n	8004f46 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f34:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f88d 3003 	strb.w	r3, [sp, #3]
 8004f40:	2101      	movs	r1, #1
 8004f42:	4623      	mov	r3, r4
 8004f44:	e7f0      	b.n	8004f28 <xPortStartScheduler+0x60>
 8004f46:	b101      	cbz	r1, 8004f4a <xPortStartScheduler+0x82>
 8004f48:	6013      	str	r3, [r2, #0]
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f4a:	6813      	ldr	r3, [r2, #0]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d008      	beq.n	8004f62 <xPortStartScheduler+0x9a>
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	e7fe      	b.n	8004f60 <xPortStartScheduler+0x98>
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f62:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <xPortStartScheduler+0xfc>)
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f6a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f6c:	9b01      	ldr	r3, [sp, #4]
 8004f6e:	4a13      	ldr	r2, [pc, #76]	; (8004fbc <xPortStartScheduler+0xf4>)
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <xPortStartScheduler+0x100>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004f7c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004f84:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f86:	f7ff ff85 	bl	8004e94 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <xPortStartScheduler+0x104>)
 8004f8c:	2400      	movs	r4, #0
 8004f8e:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f90:	f7ff fee0 	bl	8004d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f94:	4a0e      	ldr	r2, [pc, #56]	; (8004fd0 <xPortStartScheduler+0x108>)
 8004f96:	6813      	ldr	r3, [r2, #0]
 8004f98:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f9e:	f7ff fec5 	bl	8004d2c <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fa2:	f7ff f9a3 	bl	80042ec <vTaskSwitchContext>
	prvTaskExitError();
 8004fa6:	f7ff fea1 	bl	8004cec <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
 8004faa:	4620      	mov	r0, r4
 8004fac:	b002      	add	sp, #8
 8004fae:	bd10      	pop	{r4, pc}
 8004fb0:	e000ed00 	.word	0xe000ed00
 8004fb4:	410fc271 	.word	0x410fc271
 8004fb8:	410fc270 	.word	0x410fc270
 8004fbc:	e000e400 	.word	0xe000e400
 8004fc0:	20008efc 	.word	0x20008efc
 8004fc4:	20008f00 	.word	0x20008f00
 8004fc8:	e000ed20 	.word	0xe000ed20
 8004fcc:	2000006c 	.word	0x2000006c
 8004fd0:	e000ef34 	.word	0xe000ef34

08004fd4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fd4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	d90e      	bls.n	8004ffa <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fdc:	4a10      	ldr	r2, [pc, #64]	; (8005020 <vPortValidateInterruptPriority+0x4c>)
 8004fde:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fe0:	4a10      	ldr	r2, [pc, #64]	; (8005024 <vPortValidateInterruptPriority+0x50>)
 8004fe2:	7812      	ldrb	r2, [r2, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d908      	bls.n	8004ffa <vPortValidateInterruptPriority+0x26>
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	e7fe      	b.n	8004ff8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <vPortValidateInterruptPriority+0x54>)
 8004ffc:	4a0b      	ldr	r2, [pc, #44]	; (800502c <vPortValidateInterruptPriority+0x58>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005006:	4293      	cmp	r3, r2
 8005008:	d908      	bls.n	800501c <vPortValidateInterruptPriority+0x48>
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	e7fe      	b.n	800501a <vPortValidateInterruptPriority+0x46>
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	e000e3f0 	.word	0xe000e3f0
 8005024:	20008efc 	.word	0x20008efc
 8005028:	e000ed0c 	.word	0xe000ed0c
 800502c:	20008f00 	.word	0x20008f00

08005030 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005030:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005032:	b180      	cbz	r0, 8005056 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005034:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005038:	b113      	cbz	r3, 8005040 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005040:	b109      	cbz	r1, 8005046 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005042:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005046:	2301      	movs	r3, #1
 8005048:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 800504c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800504e:	f7fb fd47 	bl	8000ae0 <USBD_LL_Init>

  return USBD_OK;
 8005052:	2000      	movs	r0, #0
 8005054:	bd08      	pop	{r3, pc}
  if(pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005056:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);

  return USBD_OK;
}
 8005058:	bd08      	pop	{r3, pc}

0800505a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800505a:	b119      	cbz	r1, 8005064 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800505c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8005060:	2000      	movs	r0, #0
 8005062:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005064:	2002      	movs	r0, #2
  }

  return status;
}
 8005066:	4770      	bx	lr

08005068 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005068:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800506a:	f7fb fd69 	bl	8000b40 <USBD_LL_Start>

  return USBD_OK;
}
 800506e:	2000      	movs	r0, #0
 8005070:	bd08      	pop	{r3, pc}

08005072 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005072:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8005074:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005078:	b90b      	cbnz	r3, 800507e <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800507a:	2002      	movs	r0, #2
 800507c:	bd08      	pop	{r3, pc}

  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4798      	blx	r3
 8005082:	2800      	cmp	r0, #0
 8005084:	d1f9      	bne.n	800507a <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005086:	bd08      	pop	{r3, pc}

08005088 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005088:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800508a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4798      	blx	r3
  return USBD_OK;
}
 8005092:	2000      	movs	r0, #0
 8005094:	bd08      	pop	{r3, pc}

08005096 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005096:	b538      	push	{r3, r4, r5, lr}
 8005098:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800509a:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 f912 	bl	80052c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80050a4:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80050a6:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);

  pdev->ep0_state = USBD_EP0_SETUP;
 80050aa:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80050ae:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80050b2:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80050b6:	f001 031f 	and.w	r3, r1, #31
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d00c      	beq.n	80050d8 <USBD_LL_SetupStage+0x42>
 80050be:	d306      	bcc.n	80050ce <USBD_LL_SetupStage+0x38>
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d10e      	bne.n	80050e2 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
    break;

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80050c4:	4629      	mov	r1, r5
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 fa6a 	bl	80055a0 <USBD_StdEPReq>
    break;
 80050cc:	e00e      	b.n	80050ec <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80050ce:	4629      	mov	r1, r5
 80050d0:	4620      	mov	r0, r4
 80050d2:	f000 f919 	bl	8005308 <USBD_StdDevReq>
    break;
 80050d6:	e009      	b.n	80050ec <USBD_LL_SetupStage+0x56>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80050d8:	4629      	mov	r1, r5
 80050da:	4620      	mov	r0, r4
 80050dc:	f000 fa3a 	bl	8005554 <USBD_StdItfReq>
    break;
 80050e0:	e004      	b.n	80050ec <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050e2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80050e6:	4620      	mov	r0, r4
 80050e8:	f7fb fd56 	bl	8000b98 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 80050ec:	2000      	movs	r0, #0
 80050ee:	bd38      	pop	{r3, r4, r5, pc}

080050f0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4605      	mov	r5, r0
 80050f4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80050f6:	bb41      	cbnz	r1, 800514a <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050f8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d11d      	bne.n	800513c <USBD_LL_DataOutStage+0x4c>
    {
      if(pep->rem_length > pep->maxpacket)
 8005100:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8005104:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8005108:	429a      	cmp	r2, r3
 800510a:	d90a      	bls.n	8005122 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 800510c:	1ad2      	subs	r2, r2, r3

        USBD_CtlContinueRx (pdev,
 800510e:	4293      	cmp	r3, r2

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8005110:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c

        USBD_CtlContinueRx (pdev,
 8005114:	4631      	mov	r1, r6
 8005116:	bf8c      	ite	hi
 8005118:	b292      	uxthhi	r2, r2
 800511a:	b29a      	uxthls	r2, r3
 800511c:	f000 fb14 	bl	8005748 <USBD_CtlContinueRx>
 8005120:	e01c      	b.n	800515c <USBD_LL_DataOutStage+0x6c>
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005122:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	b123      	cbz	r3, 8005134 <USBD_LL_DataOutStage+0x44>
 800512a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800512e:	2a03      	cmp	r2, #3
 8005130:	d100      	bne.n	8005134 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005132:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005134:	4628      	mov	r0, r5
 8005136:	f000 fb0f 	bl	8005758 <USBD_CtlSendStatus>
 800513a:	e00f      	b.n	800515c <USBD_LL_DataOutStage+0x6c>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800513c:	2b05      	cmp	r3, #5
 800513e:	d10d      	bne.n	800515c <USBD_LL_DataOutStage+0x6c>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005140:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005144:	f7fb fd28 	bl	8000b98 <USBD_LL_StallEP>
 8005148:	e008      	b.n	800515c <USBD_LL_DataOutStage+0x6c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800514a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	b133      	cbz	r3, 8005160 <USBD_LL_DataOutStage+0x70>
 8005152:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005156:	2a03      	cmp	r2, #3
 8005158:	d102      	bne.n	8005160 <USBD_LL_DataOutStage+0x70>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 800515a:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800515c:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 800515e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005160:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 8005162:	bd70      	pop	{r4, r5, r6, pc}

08005164 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	4613      	mov	r3, r2
 8005168:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800516a:	460e      	mov	r6, r1
 800516c:	2900      	cmp	r1, #0
 800516e:	d148      	bne.n	8005202 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005170:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8005174:	2a02      	cmp	r2, #2
 8005176:	d135      	bne.n	80051e4 <USBD_LL_DataInStage+0x80>
    {
      if(pep->rem_length > pep->maxpacket)
 8005178:	6a05      	ldr	r5, [r0, #32]
 800517a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800517c:	4295      	cmp	r5, r2
 800517e:	d907      	bls.n	8005190 <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -= pep->maxpacket;
 8005180:	1aaa      	subs	r2, r5, r2
 8005182:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8005184:	4619      	mov	r1, r3
 8005186:	b292      	uxth	r2, r2
 8005188:	f000 fac7 	bl	800571a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800518c:	4633      	mov	r3, r6
 800518e:	e011      	b.n	80051b4 <USBD_LL_DataInStage+0x50>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005190:	69c3      	ldr	r3, [r0, #28]
 8005192:	fbb3 f5f2 	udiv	r5, r3, r2
 8005196:	fb02 3515 	mls	r5, r2, r5, r3
 800519a:	b98d      	cbnz	r5, 80051c0 <USBD_LL_DataInStage+0x5c>
 800519c:	429a      	cmp	r2, r3
 800519e:	d80f      	bhi.n	80051c0 <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 80051a0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d20b      	bcs.n	80051c0 <USBD_LL_DataInStage+0x5c>
           (pep->total_length < pdev->ep0_data_len))
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80051a8:	462a      	mov	r2, r5
 80051aa:	f000 fab6 	bl	800571a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80051ae:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80051b2:	462b      	mov	r3, r5
 80051b4:	461a      	mov	r2, r3
 80051b6:	4619      	mov	r1, r3
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7fb fd39 	bl	8000c30 <USBD_LL_PrepareReceive>
 80051be:	e017      	b.n	80051f0 <USBD_LL_DataInStage+0x8c>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80051c0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	b12b      	cbz	r3, 80051d4 <USBD_LL_DataInStage+0x70>
 80051c8:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80051cc:	2a03      	cmp	r2, #3
 80051ce:	d101      	bne.n	80051d4 <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev);
 80051d0:	4620      	mov	r0, r4
 80051d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80051d4:	2180      	movs	r1, #128	; 0x80
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7fb fcde 	bl	8000b98 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 fac6 	bl	800576e <USBD_CtlReceiveStatus>
 80051e2:	e005      	b.n	80051f0 <USBD_LL_DataInStage+0x8c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80051e4:	f032 0304 	bics.w	r3, r2, #4
 80051e8:	d102      	bne.n	80051f0 <USBD_LL_DataInStage+0x8c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	f7fb fcd4 	bl	8000b98 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80051f0:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	f04f 0000 	mov.w	r0, #0
 80051fa:	d10e      	bne.n	800521a <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80051fc:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8005200:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8005202:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	b133      	cbz	r3, 8005218 <USBD_LL_DataInStage+0xb4>
 800520a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800520e:	2a03      	cmp	r2, #3
 8005210:	d102      	bne.n	8005218 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005212:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005214:	2000      	movs	r0, #0
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005216:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005218:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 800521a:	bd70      	pop	{r4, r5, r6, pc}

0800521c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800521c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800521e:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005220:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005222:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005224:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005226:	2640      	movs	r6, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005228:	2340      	movs	r3, #64	; 0x40
 800522a:	f7fb fc97 	bl	8000b5c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800522e:	4633      	mov	r3, r6
 8005230:	2180      	movs	r1, #128	; 0x80

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005232:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005236:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800523a:	2200      	movs	r2, #0
 800523c:	4620      	mov	r0, r4
 800523e:	f7fb fc8d 	bl	8000b5c <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8005242:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005246:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8005248:	2100      	movs	r1, #0

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800524a:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800524c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005250:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005254:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005256:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 800525a:	b123      	cbz	r3, 8005266 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800525c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005260:	4620      	mov	r0, r4
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005266:	2000      	movs	r0, #0
 8005268:	bd70      	pop	{r4, r5, r6, pc}

0800526a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800526a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800526c:	2000      	movs	r0, #0
 800526e:	4770      	bx	lr

08005270 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005270:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005274:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005278:	2304      	movs	r3, #4
 800527a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800527e:	2000      	movs	r0, #0
 8005280:	4770      	bx	lr

08005282 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8005282:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8005286:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800528a:	2000      	movs	r0, #0
 800528c:	4770      	bx	lr

0800528e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800528e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005290:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005294:	2a03      	cmp	r2, #3
 8005296:	d104      	bne.n	80052a2 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8005298:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	b103      	cbz	r3, 80052a2 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80052a0:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80052a2:	2000      	movs	r0, #0
 80052a4:	bd08      	pop	{r3, pc}

080052a6 <USBD_LL_IsoINIncomplete>:
 80052a6:	2000      	movs	r0, #0
 80052a8:	4770      	bx	lr

080052aa <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80052aa:	2000      	movs	r0, #0
 80052ac:	4770      	bx	lr

080052ae <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80052ae:	2000      	movs	r0, #0
 80052b0:	4770      	bx	lr

080052b2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80052b2:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052b4:	2201      	movs	r2, #1
 80052b6:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80052ba:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 80052be:	7901      	ldrb	r1, [r0, #4]
 80052c0:	6852      	ldr	r2, [r2, #4]
 80052c2:	4790      	blx	r2

  return USBD_OK;
}
 80052c4:	2000      	movs	r0, #0
 80052c6:	bd08      	pop	{r3, pc}

080052c8 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 80052c8:	780b      	ldrb	r3, [r1, #0]
 80052ca:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80052cc:	784b      	ldrb	r3, [r1, #1]
 80052ce:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80052d0:	78ca      	ldrb	r2, [r1, #3]
 80052d2:	788b      	ldrb	r3, [r1, #2]
 80052d4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80052d8:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80052da:	794a      	ldrb	r2, [r1, #5]
 80052dc:	790b      	ldrb	r3, [r1, #4]
 80052de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80052e2:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80052e4:	79ca      	ldrb	r2, [r1, #7]
 80052e6:	798b      	ldrb	r3, [r1, #6]
 80052e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80052ec:	80c3      	strh	r3, [r0, #6]
 80052ee:	4770      	bx	lr

080052f0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80052f0:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 80052f2:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80052f4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80052f6:	f7fb fc4f 	bl	8000b98 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80052fa:	4620      	mov	r0, r4
 80052fc:	2100      	movs	r1, #0
}
 80052fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
  USBD_LL_StallEP(pdev , 0U);
 8005302:	f7fb bc49 	b.w	8000b98 <USBD_LL_StallEP>
	...

08005308 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005308:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800530a:	780b      	ldrb	r3, [r1, #0]
 800530c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005310:	2b20      	cmp	r3, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005312:	4604      	mov	r4, r0
 8005314:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005316:	d005      	beq.n	8005324 <USBD_StdDevReq+0x1c>
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d003      	beq.n	8005324 <USBD_StdDevReq+0x1c>
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 8112 	bne.w	8005546 <USBD_StdDevReq+0x23e>
 8005322:	e006      	b.n	8005332 <USBD_StdDevReq+0x2a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005324:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005328:	4629      	mov	r1, r5
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	4620      	mov	r0, r4
 800532e:	4798      	blx	r3
    break;
 8005330:	e10b      	b.n	800554a <USBD_StdDevReq+0x242>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005332:	784b      	ldrb	r3, [r1, #1]
 8005334:	2b09      	cmp	r3, #9
 8005336:	f200 8104 	bhi.w	8005542 <USBD_StdDevReq+0x23a>
 800533a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800533e:	00d9      	.short	0x00d9
 8005340:	010200f8 	.word	0x010200f8
 8005344:	010200ef 	.word	0x010200ef
 8005348:	000a0078 	.word	0x000a0078
 800534c:	00c80102 	.word	0x00c80102
 8005350:	0096      	.short	0x0096
{
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005352:	884b      	ldrh	r3, [r1, #2]
 8005354:	0a1a      	lsrs	r2, r3, #8
 8005356:	3a01      	subs	r2, #1
 8005358:	2a06      	cmp	r2, #6
 800535a:	f200 80f2 	bhi.w	8005542 <USBD_StdDevReq+0x23a>
 800535e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005362:	0007      	.short	0x0007
 8005364:	0017000b 	.word	0x0017000b
 8005368:	00f000f0 	.word	0x00f000f0
 800536c:	0047003c 	.word	0x0047003c
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005370:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	e017      	b.n	80053a8 <USBD_StdDevReq+0xa0>
    break;

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005378:	7c02      	ldrb	r2, [r0, #16]
 800537a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800537e:	b90a      	cbnz	r2, 8005384 <USBD_StdDevReq+0x7c>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	e000      	b.n	8005386 <USBD_StdDevReq+0x7e>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	f10d 0006 	add.w	r0, sp, #6
 800538a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800538c:	2302      	movs	r3, #2
 800538e:	e03a      	b.n	8005406 <USBD_StdDevReq+0xfe>
    }
    break;

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b05      	cmp	r3, #5
 8005394:	f200 80d5 	bhi.w	8005542 <USBD_StdDevReq+0x23a>
 8005398:	e8df f003 	tbb	[pc, r3]
 800539c:	130f0b03 	.word	0x130f0b03
 80053a0:	1b17      	.short	0x1b17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80053a2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	7c20      	ldrb	r0, [r4, #16]
 80053aa:	f10d 0106 	add.w	r1, sp, #6
 80053ae:	4798      	blx	r3
 80053b0:	e02a      	b.n	8005408 <USBD_StdDevReq+0x100>
      break;

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80053b2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	e7f6      	b.n	80053a8 <USBD_StdDevReq+0xa0>
      break;

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80053ba:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	e7f2      	b.n	80053a8 <USBD_StdDevReq+0xa0>
      break;

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80053c2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	e7ee      	b.n	80053a8 <USBD_StdDevReq+0xa0>
      break;

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80053ca:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	e7ea      	b.n	80053a8 <USBD_StdDevReq+0xa0>
      break;

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80053d2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	e7e6      	b.n	80053a8 <USBD_StdDevReq+0xa0>
#endif
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80053da:	7c03      	ldrb	r3, [r0, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f040 80b0 	bne.w	8005542 <USBD_StdDevReq+0x23a>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80053e2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80053e6:	f10d 0006 	add.w	r0, sp, #6
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	4798      	blx	r3
 80053ee:	e00b      	b.n	8005408 <USBD_StdDevReq+0x100>
      USBD_CtlError(pdev , req);
      return;
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80053f0:	7c03      	ldrb	r3, [r0, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f040 80a5 	bne.w	8005542 <USBD_StdDevReq+0x23a>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80053f8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80053fc:	f10d 0006 	add.w	r0, sp, #6
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005404:	2307      	movs	r3, #7
 8005406:	7043      	strb	r3, [r0, #1]
  default:
     USBD_CtlError(pdev , req);
    return;
  }

  if((len != 0U) && (req->wLength != 0U))
 8005408:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800540c:	b152      	cbz	r2, 8005424 <USBD_StdDevReq+0x11c>
 800540e:	88eb      	ldrh	r3, [r5, #6]
 8005410:	b143      	cbz	r3, 8005424 <USBD_StdDevReq+0x11c>
  {

    len = MIN(len, req->wLength);
 8005412:	429a      	cmp	r2, r3
 8005414:	bf28      	it	cs
 8005416:	461a      	movcs	r2, r3

    USBD_CtlSendData (pdev, pbuf, len);
 8005418:	4601      	mov	r1, r0
 800541a:	4620      	mov	r0, r4
  }

  if((len != 0U) && (req->wLength != 0U))
  {

    len = MIN(len, req->wLength);
 800541c:	f8ad 2006 	strh.w	r2, [sp, #6]

    USBD_CtlSendData (pdev, pbuf, len);
 8005420:	f000 f96e 	bl	8005700 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005424:	88eb      	ldrh	r3, [r5, #6]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 808f 	bne.w	800554a <USBD_StdDevReq+0x242>
 800542c:	e07b      	b.n	8005526 <USBD_StdDevReq+0x21e>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800542e:	888b      	ldrh	r3, [r1, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 8086 	bne.w	8005542 <USBD_StdDevReq+0x23a>
 8005436:	88cb      	ldrh	r3, [r1, #6]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f040 8082 	bne.w	8005542 <USBD_StdDevReq+0x23a>
 800543e:	884e      	ldrh	r6, [r1, #2]
 8005440:	2e7f      	cmp	r6, #127	; 0x7f
 8005442:	d87e      	bhi.n	8005542 <USBD_StdDevReq+0x23a>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005444:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005448:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800544a:	b2f1      	uxtb	r1, r6

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800544c:	d079      	beq.n	8005542 <USBD_StdDevReq+0x23a>
    {
      USBD_CtlError(pdev , req);
    }
    else
    {
      pdev->dev_address = dev_addr;
 800544e:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005452:	f7fb fbd1 	bl	8000bf8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005456:	4620      	mov	r0, r4
 8005458:	f000 f97e 	bl	8005758 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800545c:	b10e      	cbz	r6, 8005462 <USBD_StdDevReq+0x15a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800545e:	2302      	movs	r3, #2
 8005460:	e000      	b.n	8005464 <USBD_StdDevReq+0x15c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005462:	2301      	movs	r3, #1
 8005464:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8005468:	e06f      	b.n	800554a <USBD_StdDevReq+0x242>
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800546a:	7889      	ldrb	r1, [r1, #2]
 800546c:	4e38      	ldr	r6, [pc, #224]	; (8005550 <USBD_StdDevReq+0x248>)

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800546e:	2901      	cmp	r1, #1
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005470:	7031      	strb	r1, [r6, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005472:	d866      	bhi.n	8005542 <USBD_StdDevReq+0x23a>
  {
    USBD_CtlError(pdev, req);
  }
  else
  {
    switch (pdev->dev_state)
 8005474:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005478:	2b02      	cmp	r3, #2
 800547a:	d002      	beq.n	8005482 <USBD_StdDevReq+0x17a>
 800547c:	2b03      	cmp	r3, #3
 800547e:	d008      	beq.n	8005492 <USBD_StdDevReq+0x18a>
 8005480:	e01d      	b.n	80054be <USBD_StdDevReq+0x1b6>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005482:	2900      	cmp	r1, #0
 8005484:	d04f      	beq.n	8005526 <USBD_StdDevReq+0x21e>
      {
        pdev->dev_config = cfgidx;
 8005486:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005488:	2303      	movs	r3, #3
    switch (pdev->dev_state)
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
      {
        pdev->dev_config = cfgidx;
 800548a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800548c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
 8005490:	e00f      	b.n	80054b2 <USBD_StdDevReq+0x1aa>
        USBD_CtlSendStatus(pdev);
      }
      break;

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005492:	b931      	cbnz	r1, 80054a2 <USBD_StdDevReq+0x19a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005494:	2302      	movs	r3, #2
 8005496:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800549a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800549c:	f7ff fdf4 	bl	8005088 <USBD_ClrClassConfig>
 80054a0:	e041      	b.n	8005526 <USBD_StdDevReq+0x21e>
        USBD_CtlSendStatus(pdev);
      }
      else if (cfgidx != pdev->dev_config)
 80054a2:	6841      	ldr	r1, [r0, #4]
 80054a4:	2901      	cmp	r1, #1
 80054a6:	d03e      	beq.n	8005526 <USBD_StdDevReq+0x21e>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80054a8:	b2c9      	uxtb	r1, r1
 80054aa:	f7ff fded 	bl	8005088 <USBD_ClrClassConfig>

        /* set new configuration */
        pdev->dev_config = cfgidx;
 80054ae:	7831      	ldrb	r1, [r6, #0]
 80054b0:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80054b2:	4620      	mov	r0, r4
 80054b4:	f7ff fddd 	bl	8005072 <USBD_SetClassConfig>
 80054b8:	2802      	cmp	r0, #2
 80054ba:	d134      	bne.n	8005526 <USBD_StdDevReq+0x21e>
 80054bc:	e041      	b.n	8005542 <USBD_StdDevReq+0x23a>
        USBD_CtlSendStatus(pdev);
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 80054be:	4629      	mov	r1, r5
 80054c0:	f7ff ff16 	bl	80052f0 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80054c4:	7831      	ldrb	r1, [r6, #0]
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7ff fdde 	bl	8005088 <USBD_ClrClassConfig>
 80054cc:	e03d      	b.n	800554a <USBD_StdDevReq+0x242>
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  if (req->wLength != 1U)
 80054ce:	88ca      	ldrh	r2, [r1, #6]
 80054d0:	2a01      	cmp	r2, #1
 80054d2:	d136      	bne.n	8005542 <USBD_StdDevReq+0x23a>
  {
    USBD_CtlError(pdev , req);
  }
  else
  {
    switch (pdev->dev_state)
 80054d4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80054d8:	b39b      	cbz	r3, 8005542 <USBD_StdDevReq+0x23a>
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d903      	bls.n	80054e6 <USBD_StdDevReq+0x1de>
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d12f      	bne.n	8005542 <USBD_StdDevReq+0x23a>
      pdev->dev_default_config = 0U;
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
      break;

    case USBD_STATE_CONFIGURED:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80054e2:	1d01      	adds	r1, r0, #4
 80054e4:	e016      	b.n	8005514 <USBD_StdDevReq+0x20c>
  {
    switch (pdev->dev_state)
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
      pdev->dev_default_config = 0U;
 80054e6:	4601      	mov	r1, r0
 80054e8:	2300      	movs	r3, #0
 80054ea:	f841 3f08 	str.w	r3, [r1, #8]!
 80054ee:	e011      	b.n	8005514 <USBD_StdDevReq+0x20c>
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 80054f0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80054f4:	3b01      	subs	r3, #1
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d823      	bhi.n	8005542 <USBD_StdDevReq+0x23a>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80054fa:	88cb      	ldrh	r3, [r1, #6]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d120      	bne.n	8005542 <USBD_StdDevReq+0x23a>
      USBD_CtlError(pdev, req);
      break;
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005500:	2301      	movs	r3, #1
 8005502:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005504:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8005508:	b10b      	cbz	r3, 800550e <USBD_StdDevReq+0x206>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800550a:	2303      	movs	r3, #3
 800550c:	60c3      	str	r3, [r0, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800550e:	2202      	movs	r2, #2
 8005510:	f104 010c 	add.w	r1, r4, #12
 8005514:	4620      	mov	r0, r4
 8005516:	f000 f8f3 	bl	8005700 <USBD_CtlSendData>
 800551a:	e016      	b.n	800554a <USBD_StdDevReq+0x242>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800551c:	884b      	ldrh	r3, [r1, #2]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d113      	bne.n	800554a <USBD_StdDevReq+0x242>
  {
    pdev->dev_remote_wakeup = 1U;
 8005522:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005526:	4620      	mov	r0, r4
 8005528:	f000 f916 	bl	8005758 <USBD_CtlSendStatus>
 800552c:	e00d      	b.n	800554a <USBD_StdDevReq+0x242>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 800552e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005532:	3b01      	subs	r3, #1
 8005534:	2b02      	cmp	r3, #2
 8005536:	d804      	bhi.n	8005542 <USBD_StdDevReq+0x23a>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005538:	884b      	ldrh	r3, [r1, #2]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d105      	bne.n	800554a <USBD_StdDevReq+0x242>
    {
      pdev->dev_remote_wakeup = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	e7ef      	b.n	8005522 <USBD_StdDevReq+0x21a>
    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
      break;

    default:
      USBD_CtlError(pdev, req);
 8005542:	4629      	mov	r1, r5
 8005544:	4620      	mov	r0, r4
      break;
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8005546:	f7ff fed3 	bl	80052f0 <USBD_CtlError>
    break;
  }

  return ret;
}
 800554a:	2000      	movs	r0, #0
 800554c:	b002      	add	sp, #8
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	20008f04 	.word	0x20008f04

08005554 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005554:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005556:	780b      	ldrb	r3, [r1, #0]
 8005558:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800555c:	2b20      	cmp	r3, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800555e:	4604      	mov	r4, r0
 8005560:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005562:	d002      	beq.n	800556a <USBD_StdItfReq+0x16>
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d000      	beq.n	800556a <USBD_StdItfReq+0x16>
 8005568:	b9b3      	cbnz	r3, 8005598 <USBD_StdItfReq+0x44>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800556a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800556e:	3b01      	subs	r3, #1
 8005570:	2b02      	cmp	r3, #2
 8005572:	d80f      	bhi.n	8005594 <USBD_StdItfReq+0x40>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005574:	792b      	ldrb	r3, [r5, #4]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d80c      	bhi.n	8005594 <USBD_StdItfReq+0x40>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800557a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800557e:	4629      	mov	r1, r5
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	4620      	mov	r0, r4
 8005584:	4798      	blx	r3

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005586:	88eb      	ldrh	r3, [r5, #6]
 8005588:	b943      	cbnz	r3, 800559c <USBD_StdItfReq+0x48>
 800558a:	b938      	cbnz	r0, 800559c <USBD_StdItfReq+0x48>
        {
          USBD_CtlSendStatus(pdev);
 800558c:	4620      	mov	r0, r4
 800558e:	f000 f8e3 	bl	8005758 <USBD_CtlSendStatus>
 8005592:	e003      	b.n	800559c <USBD_StdItfReq+0x48>
        USBD_CtlError(pdev, req);
      }
      break;

    default:
      USBD_CtlError(pdev, req);
 8005594:	4629      	mov	r1, r5
 8005596:	4620      	mov	r0, r4
      break;
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 8005598:	f7ff feaa 	bl	80052f0 <USBD_CtlError>
    break;
  }

  return USBD_OK;
}
 800559c:	2000      	movs	r0, #0
 800559e:	bd38      	pop	{r3, r4, r5, pc}

080055a0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80055a0:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055a2:	780b      	ldrb	r3, [r1, #0]
 80055a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055a8:	2b20      	cmp	r3, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80055aa:	4604      	mov	r4, r0
 80055ac:	460a      	mov	r2, r1
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ae:	d005      	beq.n	80055bc <USBD_StdEPReq+0x1c>
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d003      	beq.n	80055bc <USBD_StdEPReq+0x1c>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 8083 	bne.w	80056c0 <USBD_StdEPReq+0x120>
 80055ba:	e006      	b.n	80055ca <USBD_StdEPReq+0x2a>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80055bc:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80055c0:	4611      	mov	r1, r2
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4620      	mov	r0, r4
 80055c6:	4798      	blx	r3
    break;
 80055c8:	e07c      	b.n	80056c4 <USBD_StdEPReq+0x124>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);

      return ret;
    }

    switch (req->bRequest)
 80055ca:	784e      	ldrb	r6, [r1, #1]
{

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80055cc:	888d      	ldrh	r5, [r1, #4]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);

      return ret;
    }

    switch (req->bRequest)
 80055ce:	2e01      	cmp	r6, #1
{

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80055d0:	b2eb      	uxtb	r3, r5
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);

      return ret;
    }

    switch (req->bRequest)
 80055d2:	d015      	beq.n	8005600 <USBD_StdEPReq+0x60>
 80055d4:	d331      	bcc.n	800563a <USBD_StdEPReq+0x9a>
 80055d6:	2e03      	cmp	r6, #3
 80055d8:	d172      	bne.n	80056c0 <USBD_StdEPReq+0x120>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80055da:	f890 5274 	ldrb.w	r5, [r0, #628]	; 0x274
 80055de:	2d02      	cmp	r5, #2
 80055e0:	d015      	beq.n	800560e <USBD_StdEPReq+0x6e>
 80055e2:	2d03      	cmp	r5, #3
 80055e4:	d16c      	bne.n	80056c0 <USBD_StdEPReq+0x120>
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80055e6:	8849      	ldrh	r1, [r1, #2]
 80055e8:	b931      	cbnz	r1, 80055f8 <USBD_StdEPReq+0x58>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80055ea:	0659      	lsls	r1, r3, #25
 80055ec:	d004      	beq.n	80055f8 <USBD_StdEPReq+0x58>
 80055ee:	88d2      	ldrh	r2, [r2, #6]
 80055f0:	b912      	cbnz	r2, 80055f8 <USBD_StdEPReq+0x58>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80055f2:	4619      	mov	r1, r3
 80055f4:	f7fb fad0 	bl	8000b98 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80055f8:	4620      	mov	r0, r4
 80055fa:	f000 f8ad 	bl	8005758 <USBD_CtlSendStatus>

        break;
 80055fe:	e061      	b.n	80056c4 <USBD_StdEPReq+0x124>
      }
      break;

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005600:	f890 5274 	ldrb.w	r5, [r0, #628]	; 0x274
 8005604:	2d02      	cmp	r5, #2
 8005606:	d002      	beq.n	800560e <USBD_StdEPReq+0x6e>
 8005608:	2d03      	cmp	r5, #3
 800560a:	d00d      	beq.n	8005628 <USBD_StdEPReq+0x88>
 800560c:	e058      	b.n	80056c0 <USBD_StdEPReq+0x120>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800560e:	065e      	lsls	r6, r3, #25
 8005610:	d102      	bne.n	8005618 <USBD_StdEPReq+0x78>
          USBD_LL_StallEP(pdev, ep_addr);
          USBD_LL_StallEP(pdev, 0x80U);
        }
        else
        {
          USBD_CtlError(pdev, req);
 8005612:	4611      	mov	r1, r2
 8005614:	4620      	mov	r0, r4
 8005616:	e053      	b.n	80056c0 <USBD_StdEPReq+0x120>
      switch (pdev->dev_state)
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005618:	4619      	mov	r1, r3
 800561a:	f7fb fabd 	bl	8000b98 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800561e:	2180      	movs	r1, #128	; 0x80
 8005620:	4620      	mov	r0, r4
 8005622:	f7fb fab9 	bl	8000b98 <USBD_LL_StallEP>
 8005626:	e04d      	b.n	80056c4 <USBD_StdEPReq+0x124>
          USBD_CtlError(pdev, req);
        }
        break;

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005628:	884a      	ldrh	r2, [r1, #2]
 800562a:	2a00      	cmp	r2, #0
 800562c:	d14a      	bne.n	80056c4 <USBD_StdEPReq+0x124>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800562e:	065d      	lsls	r5, r3, #25
 8005630:	d0e2      	beq.n	80055f8 <USBD_StdEPReq+0x58>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005632:	4619      	mov	r1, r3
 8005634:	f7fb fabe 	bl	8000bb4 <USBD_LL_ClearStallEP>
 8005638:	e7de      	b.n	80055f8 <USBD_StdEPReq+0x58>
        break;
      }
      break;

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800563a:	f890 6274 	ldrb.w	r6, [r0, #628]	; 0x274
 800563e:	2e02      	cmp	r6, #2
 8005640:	d002      	beq.n	8005648 <USBD_StdEPReq+0xa8>
 8005642:	2e03      	cmp	r6, #3
 8005644:	d00c      	beq.n	8005660 <USBD_StdEPReq+0xc0>
 8005646:	e03b      	b.n	80056c0 <USBD_StdEPReq+0x120>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005648:	0659      	lsls	r1, r3, #25
 800564a:	d1e2      	bne.n	8005612 <USBD_StdEPReq+0x72>
        {
          USBD_CtlError(pdev, req);
          break;
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800564c:	062b      	lsls	r3, r5, #24
 800564e:	bf4c      	ite	mi
 8005650:	f100 0114 	addmi.w	r1, r0, #20
 8005654:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          &pdev->ep_out[ep_addr & 0x7FU];

          pep->status = 0x0000U;
 8005658:	2300      	movs	r3, #0
 800565a:	600b      	str	r3, [r1, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800565c:	2202      	movs	r2, #2
 800565e:	e02b      	b.n	80056b8 <USBD_StdEPReq+0x118>
          break;

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005660:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005664:	f003 010f 	and.w	r1, r3, #15
 8005668:	f04f 0514 	mov.w	r5, #20
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800566c:	fb05 0101 	mla	r1, r5, r1, r0

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
          break;

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005670:	d008      	beq.n	8005684 <USBD_StdEPReq+0xe4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005672:	6989      	ldr	r1, [r1, #24]
 8005674:	2900      	cmp	r1, #0
 8005676:	d0cc      	beq.n	8005612 <USBD_StdEPReq+0x72>
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800567c:	fb05 0502 	mla	r5, r5, r2, r0
 8005680:	3514      	adds	r5, #20
 8005682:	e009      	b.n	8005698 <USBD_StdEPReq+0xf8>
            break;
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005684:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
 8005688:	2900      	cmp	r1, #0
 800568a:	d0c2      	beq.n	8005612 <USBD_StdEPReq+0x72>
            USBD_CtlError(pdev, req);
            break;
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800568c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005690:	fb05 0502 	mla	r5, r5, r2, r0
 8005694:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          &pdev->ep_out[ep_addr & 0x7FU];

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005698:	f013 027f 	ands.w	r2, r3, #127	; 0x7f
 800569c:	d101      	bne.n	80056a2 <USBD_StdEPReq+0x102>
          {
            pep->status = 0x0000U;
 800569e:	602a      	str	r2, [r5, #0]
 80056a0:	e008      	b.n	80056b4 <USBD_StdEPReq+0x114>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80056a2:	4619      	mov	r1, r3
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7fb fa93 	bl	8000bd0 <USBD_LL_IsStallEP>
 80056aa:	b110      	cbz	r0, 80056b2 <USBD_StdEPReq+0x112>
          {
            pep->status = 0x0001U;
 80056ac:	2301      	movs	r3, #1
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	e000      	b.n	80056b4 <USBD_StdEPReq+0x114>
          }
          else
          {
            pep->status = 0x0000U;
 80056b2:	6028      	str	r0, [r5, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80056b4:	2202      	movs	r2, #2
 80056b6:	4629      	mov	r1, r5
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 f821 	bl	8005700 <USBD_CtlSendData>
          break;
 80056be:	e001      	b.n	80056c4 <USBD_StdEPReq+0x124>
      break;
    }
    break;

  default:
    USBD_CtlError(pdev, req);
 80056c0:	f7ff fe16 	bl	80052f0 <USBD_CtlError>
    break;
  }

  return ret;
}
 80056c4:	2000      	movs	r0, #0
 80056c6:	bd70      	pop	{r4, r5, r6, pc}

080056c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80056c8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80056ca:	b1c0      	cbz	r0, 80056fe <USBD_GetString+0x36>
 80056cc:	4605      	mov	r5, r0
 80056ce:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80056d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2c00      	cmp	r4, #0
 80056d8:	d1f9      	bne.n	80056ce <USBD_GetString+0x6>
{
  uint8_t idx = 0U;

  if (desc != NULL)
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80056da:	3301      	adds	r3, #1
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80056e0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80056e2:	2303      	movs	r3, #3
 80056e4:	704b      	strb	r3, [r1, #1]
 80056e6:	3801      	subs	r0, #1
 80056e8:	2302      	movs	r3, #2

    while (*desc != '\0')
 80056ea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80056ee:	b135      	cbz	r5, 80056fe <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 80056f6:	3302      	adds	r3, #2
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	548c      	strb	r4, [r1, r2]
 80056fc:	e7f5      	b.n	80056ea <USBD_GetString+0x22>
 80056fe:	bd30      	pop	{r4, r5, pc}

08005700 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005700:	b510      	push	{r4, lr}
 8005702:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005704:	2202      	movs	r2, #2
 8005706:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800570a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800570c:	460a      	mov	r2, r1
                                     uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800570e:	6203      	str	r3, [r0, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005710:	2100      	movs	r1, #0
 8005712:	f7fb fa7f 	bl	8000c14 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005716:	2000      	movs	r0, #0
 8005718:	bd10      	pop	{r4, pc}

0800571a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800571a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800571c:	4613      	mov	r3, r2
 800571e:	460a      	mov	r2, r1
 8005720:	2100      	movs	r1, #0
 8005722:	f7fb fa77 	bl	8000c14 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005726:	2000      	movs	r0, #0
 8005728:	bd08      	pop	{r3, pc}

0800572a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800572a:	b510      	push	{r4, lr}
 800572c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800572e:	2203      	movs	r2, #3
 8005730:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8005734:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005738:	460a      	mov	r2, r1
                                      uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800573a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800573e:	2100      	movs	r1, #0
 8005740:	f7fb fa76 	bl	8000c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005744:	2000      	movs	r0, #0
 8005746:	bd10      	pop	{r4, pc}

08005748 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005748:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800574a:	4613      	mov	r3, r2
 800574c:	460a      	mov	r2, r1
 800574e:	2100      	movs	r1, #0
 8005750:	f7fb fa6e 	bl	8000c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005754:	2000      	movs	r0, #0
 8005756:	bd08      	pop	{r3, pc}

08005758 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005758:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800575a:	2304      	movs	r3, #4
 800575c:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005760:	2300      	movs	r3, #0
 8005762:	461a      	mov	r2, r3
 8005764:	4619      	mov	r1, r3
 8005766:	f7fb fa55 	bl	8000c14 <USBD_LL_Transmit>

  return USBD_OK;
}
 800576a:	2000      	movs	r0, #0
 800576c:	bd08      	pop	{r3, pc}

0800576e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800576e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005770:	2305      	movs	r3, #5
 8005772:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005776:	2300      	movs	r3, #0
 8005778:	461a      	mov	r2, r3
 800577a:	4619      	mov	r1, r3
 800577c:	f7fb fa58 	bl	8000c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005780:	2000      	movs	r0, #0
 8005782:	bd08      	pop	{r3, pc}

08005784 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005784:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005788:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800578a:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800578e:	b15b      	cbz	r3, 80057a8 <USBD_CDC_EP0_RxReady+0x24>
 8005790:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005794:	28ff      	cmp	r0, #255	; 0xff
 8005796:	d007      	beq.n	80057a8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800579e:	4621      	mov	r1, r4
 80057a0:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80057a2:	23ff      	movs	r3, #255	; 0xff
 80057a4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80057a8:	2000      	movs	r0, #0
 80057aa:	bd10      	pop	{r4, pc}

080057ac <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80057ac:	2343      	movs	r3, #67	; 0x43
 80057ae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80057b0:	4800      	ldr	r0, [pc, #0]	; (80057b4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80057b2:	4770      	bx	lr
 80057b4:	20000070 	.word	0x20000070

080057b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80057b8:	2343      	movs	r3, #67	; 0x43
 80057ba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80057bc:	4800      	ldr	r0, [pc, #0]	; (80057c0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80057be:	4770      	bx	lr
 80057c0:	2000013c 	.word	0x2000013c

080057c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80057c4:	2343      	movs	r3, #67	; 0x43
 80057c6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80057c8:	4800      	ldr	r0, [pc, #0]	; (80057cc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80057ca:	4770      	bx	lr
 80057cc:	200000f8 	.word	0x200000f8

080057d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80057d0:	230a      	movs	r3, #10
 80057d2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80057d4:	4800      	ldr	r0, [pc, #0]	; (80057d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80057d6:	4770      	bx	lr
 80057d8:	200000ec 	.word	0x200000ec

080057dc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80057e0:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80057e4:	f7fb fa32 	bl	8000c4c <USBD_LL_GetRxDataSize>

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80057e8:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80057ec:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80057f0:	b14b      	cbz	r3, 8005806 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80057f2:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 80057f6:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8005800:	4798      	blx	r3

    return USBD_OK;
 8005802:	2000      	movs	r0, #0
 8005804:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8005806:	2002      	movs	r0, #2
  }
}
 8005808:	bd38      	pop	{r3, r4, r5, pc}

0800580a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800580a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800580c:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  PCD_HandleTypeDef *hpcd = pdev->pData;

  if(pdev->pClassData != NULL)
 8005810:	b1d6      	cbz	r6, 8005848 <USBD_CDC_DataIn+0x3e>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005812:	2214      	movs	r2, #20
 8005814:	fb02 0201 	mla	r2, r2, r1, r0
 8005818:	69d4      	ldr	r4, [r2, #28]
 800581a:	b18c      	cbz	r4, 8005840 <USBD_CDC_DataIn+0x36>
 800581c:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8005820:	271c      	movs	r7, #28
 8005822:	fb07 5301 	mla	r3, r7, r1, r5
 8005826:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8005828:	fbb4 f3f5 	udiv	r3, r4, r5
 800582c:	fb05 4413 	mls	r4, r5, r3, r4
 8005830:	b934      	cbnz	r4, 8005840 <USBD_CDC_DataIn+0x36>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005832:	61d4      	str	r4, [r2, #28]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005834:	4623      	mov	r3, r4
 8005836:	4622      	mov	r2, r4
 8005838:	f7fb f9ec 	bl	8000c14 <USBD_LL_Transmit>
    }
    else
    {
      hcdc->TxState = 0U;
    }
    return USBD_OK;
 800583c:	4620      	mov	r0, r4
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800583e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
      hcdc->TxState = 0U;
 8005840:	2000      	movs	r0, #0
 8005842:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8005846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8005848:	2002      	movs	r0, #2
  }
}
 800584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800584c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800584c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005850:	780a      	ldrb	r2, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005852:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8005856:	f04f 0800 	mov.w	r8, #0
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800585a:	f012 0460 	ands.w	r4, r2, #96	; 0x60
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800585e:	4605      	mov	r5, r0
 8005860:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
 8005862:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8005866:	f8ad 8006 	strh.w	r8, [sp, #6]
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800586a:	d026      	beq.n	80058ba <USBD_CDC_Setup+0x6e>
 800586c:	2c20      	cmp	r4, #32
 800586e:	d147      	bne.n	8005900 <USBD_CDC_Setup+0xb4>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005870:	88cc      	ldrh	r4, [r1, #6]
 8005872:	784b      	ldrb	r3, [r1, #1]
 8005874:	b1d4      	cbz	r4, 80058ac <USBD_CDC_Setup+0x60>
    {
      if (req->bmRequest & 0x80U)
 8005876:	0612      	lsls	r2, r2, #24
 8005878:	d50d      	bpl.n	8005896 <USBD_CDC_Setup+0x4a>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800587a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800587e:	4639      	mov	r1, r7
 8005880:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8005884:	4618      	mov	r0, r3
 8005886:	4622      	mov	r2, r4
 8005888:	47c8      	blx	r9
                                                          (uint8_t *)(void *)hcdc->data,
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800588a:	88f2      	ldrh	r2, [r6, #6]
 800588c:	4639      	mov	r1, r7
 800588e:	4628      	mov	r0, r5
 8005890:	f7ff ff36 	bl	8005700 <USBD_CtlSendData>
 8005894:	e008      	b.n	80058a8 <USBD_CDC_Setup+0x5c>
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8005896:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800589a:	88cb      	ldrh	r3, [r1, #6]
 800589c:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201

        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80058a0:	88ca      	ldrh	r2, [r1, #6]
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7ff ff41 	bl	800572a <USBD_CtlPrepareRx>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80058a8:	4640      	mov	r0, r8
 80058aa:	e02c      	b.n	8005906 <USBD_CDC_Setup+0xba>
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
      }
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058ac:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80058b0:	4618      	mov	r0, r3
 80058b2:	6895      	ldr	r5, [r2, #8]
 80058b4:	4622      	mov	r2, r4
 80058b6:	47a8      	blx	r5
 80058b8:	e020      	b.n	80058fc <USBD_CDC_Setup+0xb0>
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80058ba:	784f      	ldrb	r7, [r1, #1]
 80058bc:	2f0a      	cmp	r7, #10
 80058be:	d014      	beq.n	80058ea <USBD_CDC_Setup+0x9e>
 80058c0:	2f0b      	cmp	r7, #11
 80058c2:	d00b      	beq.n	80058dc <USBD_CDC_Setup+0x90>
 80058c4:	b9e7      	cbnz	r7, 8005900 <USBD_CDC_Setup+0xb4>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d10a      	bne.n	80058e4 <USBD_CDC_Setup+0x98>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80058ce:	2202      	movs	r2, #2
 80058d0:	f10d 0106 	add.w	r1, sp, #6
 80058d4:	f7ff ff14 	bl	8005700 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80058d8:	4638      	mov	r0, r7
 80058da:	e014      	b.n	8005906 <USBD_CDC_Setup+0xba>
			  ret = USBD_FAIL;
      }
      break;

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058dc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d00b      	beq.n	80058fc <USBD_CDC_Setup+0xb0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
      }
      else
      {
        USBD_CtlError (pdev, req);
 80058e4:	4631      	mov	r1, r6
 80058e6:	4628      	mov	r0, r5
 80058e8:	e00a      	b.n	8005900 <USBD_CDC_Setup+0xb4>
			  ret = USBD_FAIL;
      }
      break;

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ea:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d1f8      	bne.n	80058e4 <USBD_CDC_Setup+0x98>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80058f2:	2201      	movs	r2, #1
 80058f4:	f10d 0105 	add.w	r1, sp, #5
 80058f8:	f7ff ff02 	bl	8005700 <USBD_CtlSendData>
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  uint8_t ifalt = 0U;
  uint16_t status_info = 0U;
  uint8_t ret = USBD_OK;
 80058fc:	4620      	mov	r0, r4
 80058fe:	e002      	b.n	8005906 <USBD_CDC_Setup+0xba>
      break;
    }
    break;

  default:
    USBD_CtlError (pdev, req);
 8005900:	f7ff fcf6 	bl	80052f0 <USBD_CtlError>
    ret = USBD_FAIL;
 8005904:	2002      	movs	r0, #2
    break;
  }

  return ret;
}
 8005906:	b003      	add	sp, #12
 8005908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800590c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4604      	mov	r4, r0
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005910:	2500      	movs	r5, #0
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005912:	2181      	movs	r1, #129	; 0x81
 8005914:	f7fb f932 	bl	8000b7c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005918:	2101      	movs	r1, #1
{
  uint8_t ret = 0U;

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800591a:	62e5      	str	r5, [r4, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800591c:	4620      	mov	r0, r4
 800591e:	f7fb f92d 	bl	8000b7c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005922:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005926:	2182      	movs	r1, #130	; 0x82
 8005928:	4620      	mov	r0, r4
 800592a:	f7fb f927 	bl	8000b7c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800592e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005932:	6425      	str	r5, [r4, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005934:	b14b      	cbz	r3, 800594a <USBD_CDC_DeInit+0x3e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005936:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800593e:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8005942:	f000 fa65 	bl	8005e10 <free>
    pdev->pClassData = NULL;
 8005946:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
  }

  return ret;
}
 800594a:	2000      	movs	r0, #0
 800594c:	bd38      	pop	{r3, r4, r5, pc}

0800594e <USBD_CDC_Init>:
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800594e:	7c03      	ldrb	r3, [r0, #16]
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005954:	4604      	mov	r4, r0
  uint8_t ret = 0U;
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005956:	b953      	cbnz	r3, 800596e <USBD_CDC_Init+0x20>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800595c:	2202      	movs	r2, #2
 800595e:	2181      	movs	r1, #129	; 0x81
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005960:	2501      	movs	r5, #1
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005962:	f7fb f8fb 	bl	8000b5c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005966:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800596c:	e007      	b.n	800597e <USBD_CDC_Init+0x30>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	2202      	movs	r2, #2
 8005972:	2181      	movs	r1, #129	; 0x81
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005974:	2501      	movs	r5, #1

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005976:	f7fb f8f1 	bl	8000b5c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800597a:	62e5      	str	r5, [r4, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800597c:	2340      	movs	r3, #64	; 0x40
 800597e:	4629      	mov	r1, r5
 8005980:	2202      	movs	r2, #2
 8005982:	4620      	mov	r0, r4
 8005984:	f7fb f8ea 	bl	8000b5c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005988:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800598c:	2308      	movs	r3, #8
 800598e:	2203      	movs	r2, #3
 8005990:	2182      	movs	r1, #130	; 0x82
 8005992:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005994:	2501      	movs	r5, #1
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005996:	f7fb f8e1 	bl	8000b5c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800599a:	6425      	str	r5, [r4, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800599c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059a0:	f000 fa2e 	bl	8005e00 <malloc>
 80059a4:	4606      	mov	r6, r0
 80059a6:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80059aa:	b310      	cbz	r0, 80059f2 <USBD_CDC_Init+0xa4>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80059ac:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
    hcdc->RxState = 0U;

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80059b4:	f894 8010 	ldrb.w	r8, [r4, #16]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80059b8:	2700      	movs	r7, #0
 80059ba:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80059be:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80059c2:	f1b8 0f00 	cmp.w	r8, #0
 80059c6:	d10a      	bne.n	80059de <USBD_CDC_Init+0x90>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059cc:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80059d0:	4629      	mov	r1, r5
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7fb f92c 	bl	8000c30 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 80059d8:	4640      	mov	r0, r8
 80059da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059de:	2340      	movs	r3, #64	; 0x40
 80059e0:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80059e4:	4629      	mov	r1, r5
 80059e6:	4620      	mov	r0, r4
 80059e8:	f7fb f922 	bl	8000c30 <USBD_LL_PrepareReceive>
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  uint8_t ret = 0U;
 80059ec:	4638      	mov	r0, r7
 80059ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));

  if(pdev->pClassData == NULL)
  {
    ret = 1U;
 80059f2:	4628      	mov	r0, r5
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
}
 80059f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059f8 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80059f8:	b119      	cbz	r1, 8005a02 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80059fa:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80059fe:	2000      	movs	r0, #0
 8005a00:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8005a02:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;
  }

  return ret;
}
 8005a04:	4770      	bx	lr

08005a06 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a06:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005a0a:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->TxBuffer = pbuff;
 8005a0c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8005a14:	4770      	bx	lr

08005a16 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005a16:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8005a1a:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005a1c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8005a20:	4770      	bx	lr

08005a22 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a22:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a26:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if(pdev->pClassData != NULL)
 8005a28:	b182      	cbz	r2, 8005a4c <USBD_CDC_TransmitPacket+0x2a>
  {
    if(hcdc->TxState == 0U)
 8005a2a:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8005a2e:	2301      	movs	r3, #1
 8005a30:	b974      	cbnz	r4, 8005a50 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005a32:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005a36:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8005a3a:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005a3c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2181      	movs	r1, #129	; 0x81
 8005a44:	f7fb f8e6 	bl	8000c14 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8005a48:	4620      	mov	r0, r4
 8005a4a:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8005a4c:	2002      	movs	r0, #2
 8005a4e:	bd10      	pop	{r4, pc}

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8005a50:	4618      	mov	r0, r3
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005a52:	bd10      	pop	{r4, pc}

08005a54 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a54:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a58:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005a5a:	b162      	cbz	r2, 8005a76 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005a5c:	7c04      	ldrb	r4, [r0, #16]
 8005a5e:	b914      	cbnz	r4, 8005a66 <USBD_CDC_ReceivePacket+0x12>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a64:	e000      	b.n	8005a68 <USBD_CDC_ReceivePacket+0x14>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005a66:	2340      	movs	r3, #64	; 0x40
 8005a68:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	f7fb f8df 	bl	8000c30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005a72:	2000      	movs	r0, #0
 8005a74:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8005a76:	2002      	movs	r0, #2
  }
}
 8005a78:	bd10      	pop	{r4, pc}

08005a7a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a7a:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d036      	beq.n	8005af0 <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a86:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005a8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a8e:	b91b      	cbnz	r3, 8005a98 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a90:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a94:	f7fb f9fe 	bl	8000e94 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005a98:	68a1      	ldr	r1, [r4, #8]
 8005a9a:	6860      	ldr	r0, [r4, #4]
 8005a9c:	4308      	orrs	r0, r1
 8005a9e:	68e1      	ldr	r1, [r4, #12]
 8005aa0:	4308      	orrs	r0, r1
 8005aa2:	6921      	ldr	r1, [r4, #16]
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005aa6:	4308      	orrs	r0, r1
 8005aa8:	6961      	ldr	r1, [r4, #20]
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aaa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aae:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005ab0:	4308      	orrs	r0, r1
 8005ab2:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ab4:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005ab6:	4308      	orrs	r0, r1
 8005ab8:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005abe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005ac0:	4308      	orrs	r0, r1
 8005ac2:	69a2      	ldr	r2, [r4, #24]
 8005ac4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ac6:	4308      	orrs	r0, r1
 8005ac8:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8005acc:	4301      	orrs	r1, r0
 8005ace:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005ad0:	0c12      	lsrs	r2, r2, #16
 8005ad2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ad4:	f002 0204 	and.w	r2, r2, #4
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005adc:	69da      	ldr	r2, [r3, #28]
 8005ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ae4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005ae6:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ae8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005aea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8005aee:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8005af0:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8005af2:	bd10      	pop	{r4, pc}

08005af4 <InitRW>:

/////////////////////////////////////////////////////////////////////////////
// Defs

void InitRW()
{
 8005af4:	b508      	push	{r3, lr}
    gHostConnection = OpenUsbHostConnection( USB_READ_BUF_SIZE );
 8005af6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005afa:	f000 f8c7 	bl	8005c8c <OpenUsbHostConnection>
 8005afe:	4b01      	ldr	r3, [pc, #4]	; (8005b04 <InitRW+0x10>)
 8005b00:	6018      	str	r0, [r3, #0]
 8005b02:	bd08      	pop	{r3, pc}
 8005b04:	20009af0 	.word	0x20009af0

08005b08 <ring_buffer_init>:

void ring_buffer_init( ring_buffer_t* s, void* buff, size_t buffSz )
{
    s->buff = buff;
    s->cap  = buffSz;
    s->head = 0;
 8005b08:	2300      	movs	r3, #0
#include <stdlib.h>

void ring_buffer_init( ring_buffer_t* s, void* buff, size_t buffSz )
{
    s->buff = buff;
    s->cap  = buffSz;
 8005b0a:	e880 0006 	stmia.w	r0, {r1, r2}
    s->head = 0;
 8005b0e:	6083      	str	r3, [r0, #8]
    s->tail = 0;
 8005b10:	60c3      	str	r3, [r0, #12]
 8005b12:	4770      	bx	lr

08005b14 <ring_buffer_write>:
}

void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
 8005b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const size_t nxt[2] = { -1, s->cap - 1 };
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	6843      	ldr	r3, [r0, #4]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	440a      	add	r2, r1
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 8005b24:	4291      	cmp	r1, r2
 8005b26:	d012      	beq.n	8005b4e <ring_buffer_write+0x3a>
        s->buff[s->head] = ( (char const*)d )[i];
 8005b28:	6883      	ldr	r3, [r0, #8]
 8005b2a:	6804      	ldr	r4, [r0, #0]
 8005b2c:	f811 5b01 	ldrb.w	r5, [r1], #1
 8005b30:	54e5      	strb	r5, [r4, r3]
void ring_buffer_write( ring_buffer_t* s, void const* d, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i;

    for ( i = 0; i < len; i++, s->head -= nxt[s->head == s->cap - 1] ) {
 8005b32:	6843      	ldr	r3, [r0, #4]
 8005b34:	6884      	ldr	r4, [r0, #8]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	1b1d      	subs	r5, r3, r4
 8005b3a:	426b      	negs	r3, r5
 8005b3c:	416b      	adcs	r3, r5
 8005b3e:	ad02      	add	r5, sp, #8
 8005b40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005b44:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8005b48:	1ae4      	subs	r4, r4, r3
 8005b4a:	6084      	str	r4, [r0, #8]
 8005b4c:	e7ea      	b.n	8005b24 <ring_buffer_write+0x10>
        s->buff[s->head] = ( (char const*)d )[i];
    }
}
 8005b4e:	b003      	add	sp, #12
 8005b50:	bd30      	pop	{r4, r5, pc}

08005b52 <ring_buffer_consume>:

void ring_buffer_consume( ring_buffer_t* s, size_t len )
{
    s->tail += len;
 8005b52:	68c3      	ldr	r3, [r0, #12]
 8005b54:	4419      	add	r1, r3

    if ( s->tail >= s->cap ) {
 8005b56:	6843      	ldr	r3, [r0, #4]
    }
}

void ring_buffer_consume( ring_buffer_t* s, size_t len )
{
    s->tail += len;
 8005b58:	60c1      	str	r1, [r0, #12]

    if ( s->tail >= s->cap ) {
 8005b5a:	4299      	cmp	r1, r3
        s->tail = s->tail - s->cap;
 8005b5c:	bf24      	itt	cs
 8005b5e:	1ac9      	subcs	r1, r1, r3
 8005b60:	60c1      	strcs	r1, [r0, #12]
 8005b62:	4770      	bx	lr

08005b64 <ring_buffer_peek>:
    }
}

void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
 8005b64:	b513      	push	{r0, r1, r4, lr}
    const size_t nxt[2] = { -1, s->cap - 1 };
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	6843      	ldr	r3, [r0, #4]
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8005b6e:	68c4      	ldr	r4, [r0, #12]
    }
}

void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
 8005b70:	3b01      	subs	r3, #1
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	440a      	add	r2, r1
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8005b76:	4291      	cmp	r1, r2
 8005b78:	d013      	beq.n	8005ba2 <ring_buffer_peek+0x3e>
        ( (char*)b )[i] = s->buff[t];
 8005b7a:	6803      	ldr	r3, [r0, #0]
 8005b7c:	5d1b      	ldrb	r3, [r3, r4]
 8005b7e:	f801 3b01 	strb.w	r3, [r1], #1
void ring_buffer_peek( ring_buffer_t const* s, void* b, size_t len )
{
    const size_t nxt[2] = { -1, s->cap - 1 };
    size_t       i, t;

    for ( i = 0, t = s->tail; i < len; i++, t -= nxt[t == s->cap - 1] ) {
 8005b82:	6843      	ldr	r3, [r0, #4]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	ebc4 0e03 	rsb	lr, r4, r3
 8005b8a:	f1de 0300 	rsbs	r3, lr, #0
 8005b8e:	eb43 030e 	adc.w	r3, r3, lr
 8005b92:	f10d 0e08 	add.w	lr, sp, #8
 8005b96:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8005b9a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8005b9e:	1ae4      	subs	r4, r4, r3
 8005ba0:	e7e9      	b.n	8005b76 <ring_buffer_peek+0x12>
        ( (char*)b )[i] = s->buff[t];
    }
}
 8005ba2:	b002      	add	sp, #8
 8005ba4:	bd10      	pop	{r4, pc}

08005ba6 <ring_buffer_size>:

size_t ring_buffer_size( ring_buffer_t const* s )
{
    if ( s->head >= s->tail )
 8005ba6:	6881      	ldr	r1, [r0, #8]
 8005ba8:	68c3      	ldr	r3, [r0, #12]
 8005baa:	4299      	cmp	r1, r3
        return s->head - s->tail;
    else
        return s->cap - s->tail + s->head;
 8005bac:	bf37      	itett	cc
 8005bae:	6842      	ldrcc	r2, [r0, #4]
}

size_t ring_buffer_size( ring_buffer_t const* s )
{
    if ( s->head >= s->tail )
        return s->head - s->tail;
 8005bb0:	1ac8      	subcs	r0, r1, r3
    else
        return s->cap - s->tail + s->head;
 8005bb2:	1888      	addcc	r0, r1, r2
 8005bb4:	1ac0      	subcc	r0, r0, r3
}
 8005bb6:	4770      	bx	lr

08005bb8 <InitProcedure>:
// - Launches host communication process
// - Launches command queue/procedure process
// - Initializes hi-precision hardware timer
// - Initializes motor control logic
extern "C" void InitProcedure()
{
 8005bb8:	b500      	push	{lr}
 8005bba:	b08b      	sub	sp, #44	; 0x2c
    InitRW();
 8005bbc:	f7ff ff9a 	bl	8005af4 <InitRW>

    // Launch Host Communication Process
    osThreadAttr_t attr;
    memset( &attr, 0, sizeof( attr ) );
 8005bc0:	2224      	movs	r2, #36	; 0x24
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	a801      	add	r0, sp, #4
 8005bc6:	f000 f936 	bl	8005e36 <memset>
    attr.name       = "HostIO";
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <InitProcedure+0x34>)
 8005bcc:	9301      	str	r3, [sp, #4]
    attr.priority   = osPriorityNormal;
 8005bce:	2318      	movs	r3, #24
 8005bd0:	9307      	str	r3, [sp, #28]
    attr.stack_size = 256;
    gThHostIO       = osThreadNew( AppTask_HostIO, NULL, &attr );
 8005bd2:	aa01      	add	r2, sp, #4
    // Launch Host Communication Process
    osThreadAttr_t attr;
    memset( &attr, 0, sizeof( attr ) );
    attr.name       = "HostIO";
    attr.priority   = osPriorityNormal;
    attr.stack_size = 256;
 8005bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
    gThHostIO       = osThreadNew( AppTask_HostIO, NULL, &attr );
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4805      	ldr	r0, [pc, #20]	; (8005bf0 <InitProcedure+0x38>)
    // Launch Host Communication Process
    osThreadAttr_t attr;
    memset( &attr, 0, sizeof( attr ) );
    attr.name       = "HostIO";
    attr.priority   = osPriorityNormal;
    attr.stack_size = 256;
 8005bdc:	9306      	str	r3, [sp, #24]
    gThHostIO       = osThreadNew( AppTask_HostIO, NULL, &attr );
 8005bde:	f7fe ff03 	bl	80049e8 <osThreadNew>
 8005be2:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <InitProcedure+0x3c>)
 8005be4:	6018      	str	r0, [r3, #0]
}
 8005be6:	b00b      	add	sp, #44	; 0x2c
 8005be8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bec:	08006e10 	.word	0x08006e10
 8005bf0:	08005bf9 	.word	0x08005bf9
 8005bf4:	20008f08 	.word	0x20008f08

08005bf8 <AppTask_HostIO>:
// Host IO communication handler
//
//

extern "C" void AppTask_HostIO( void* nouse_ )
{
 8005bf8:	b530      	push	{r4, r5, lr}
    char                 buf[64];
    size_t               head   = 0;
    transceiver_result_t result = 0;
    for ( ;; ) {
        // Try read from buffer
        result = td_read( gHostConnection, buf + head, sizeof( buf ) - head );
 8005bfa:	4c0d      	ldr	r4, [pc, #52]	; (8005c30 <AppTask_HostIO+0x38>)
            osDelay( 1 );
            continue;
        }
        else if ( result < 0 ) {
            //! @todo. Reset state machine
            osDelay( OS_MS_TO_TICKS( 100u ) );
 8005bfc:	4d0d      	ldr	r5, [pc, #52]	; (8005c34 <AppTask_HostIO+0x3c>)
// Host IO communication handler
//
//

extern "C" void AppTask_HostIO( void* nouse_ )
{
 8005bfe:	b091      	sub	sp, #68	; 0x44
typedef intptr_t transceiver_descriptor_t;

//! Read data from the transceiver.
static inline transceiver_result_t td_read( transceiver_descriptor_t desc, char* buf, size_t rdcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 8005c00:	6820      	ldr	r0, [r4, #0]
    return td->read( (void*)desc, buf, rdcnt );
 8005c02:	6803      	ldr	r3, [r0, #0]
 8005c04:	2240      	movs	r2, #64	; 0x40
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4669      	mov	r1, sp
 8005c0a:	4798      	blx	r3
    for ( ;; ) {
        // Try read from buffer
        result = td_read( gHostConnection, buf + head, sizeof( buf ) - head );

        // If there's nothing to read, sleep for 1 cycle
        if ( result == 0 ) {
 8005c0c:	1e02      	subs	r2, r0, #0
 8005c0e:	d101      	bne.n	8005c14 <AppTask_HostIO+0x1c>
            osDelay( 1 );
 8005c10:	2001      	movs	r0, #1
 8005c12:	e004      	b.n	8005c1e <AppTask_HostIO+0x26>
            continue;
        }
        else if ( result < 0 ) {
 8005c14:	da06      	bge.n	8005c24 <AppTask_HostIO+0x2c>
            //! @todo. Reset state machine
            osDelay( OS_MS_TO_TICKS( 100u ) );
 8005c16:	f7fe fee3 	bl	80049e0 <osKernelGetTickFreq>
 8005c1a:	fbb5 f0f0 	udiv	r0, r5, r0
 8005c1e:	f7fe ff45 	bl	8004aac <osDelay>
            continue;
 8005c22:	e7ed      	b.n	8005c00 <AppTask_HostIO+0x8>
}

//! Write data into the transceiver
static inline transceiver_result_t td_write( transceiver_descriptor_t desc, char* buf, size_t wrcnt )
{
    transceiver_vtable_t const* td = ( (tr_desc_t__)desc )->vt_;
 8005c24:	6820      	ldr	r0, [r4, #0]
    return td->write( (void*)desc, buf, wrcnt );
 8005c26:	6803      	ldr	r3, [r0, #0]
 8005c28:	4669      	mov	r1, sp
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	4798      	blx	r3
 8005c2e:	e7e7      	b.n	8005c00 <AppTask_HostIO+0x8>
 8005c30:	20009af0 	.word	0x20009af0
 8005c34:	000186a0 	.word	0x000186a0

08005c38 <_ZL9cdc_ioctlPvi>:
#include <uEmbedded/transceiver.h>
#include <uEmbedded/uassert.h>
#include <usbd_cdc_if.h>
static transceiver_result_t cdc_read( void* desc, char* buf, size_t len );
static transceiver_result_t cdc_write( void* desc, char const* buf, size_t len );
static transceiver_result_t cdc_ioctl( void* desc, intptr_t cmd ) { return TRANSCEIVER_OK; }
 8005c38:	2000      	movs	r0, #0
 8005c3a:	4770      	bx	lr

08005c3c <_ZL9cdc_closePv>:
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
}

transceiver_result_t cdc_close( void* desc )
{
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	4604      	mov	r4, r0
}

static inline void AppFree( void* ptr )
{
    void vPortFree( void* );
    vPortFree( ptr );
 8005c40:	6840      	ldr	r0, [r0, #4]
 8005c42:	f7ff f81b 	bl	8004c7c <vPortFree>
    auto td = reinterpret_cast<usb_rw*>( desc );
    AppFree( td->rdbuf_.buff );
    td->rdbuf_.buff = nullptr;
 8005c46:	2000      	movs	r0, #0
 8005c48:	6060      	str	r0, [r4, #4]
    return TRANSCEIVER_OK;
}
 8005c4a:	bd10      	pop	{r4, pc}

08005c4c <_ZL9cdc_writePvPKcj>:
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
    return rd;
}

transceiver_result_t cdc_write( void* nouse_, char const* buf, size_t len )
{
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	4608      	mov	r0, r1
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
 8005c50:	b291      	uxth	r1, r2
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
    return rd;
}

transceiver_result_t cdc_write( void* nouse_, char const* buf, size_t len )
{
 8005c52:	4614      	mov	r4, r2
    // Force casting.
    return CDC_Transmit_FS( (uint8_t*)buf, len ) == USBD_OK ? len : 0;
 8005c54:	f7fb f896 	bl	8000d84 <CDC_Transmit_FS>
 8005c58:	2800      	cmp	r0, #0
}
 8005c5a:	bf0c      	ite	eq
 8005c5c:	4620      	moveq	r0, r4
 8005c5e:	2000      	movne	r0, #0
 8005c60:	bd10      	pop	{r4, pc}

08005c62 <_ZL8cdc_readPvPcj>:
    ring_buffer_init( &ret->rdbuf_, AppMalloc( ReadBufferSize ), ReadBufferSize );
    return reinterpret_cast<transceiver_descriptor_t>( ret );
}

static transceiver_result_t cdc_read( void* desc, char* buf, size_t len )
{
 8005c62:	b570      	push	{r4, r5, r6, lr}
    auto td = reinterpret_cast<usb_rw*>( desc );
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
 8005c64:	1d05      	adds	r5, r0, #4

/*! \breif      Do peeking and consuming at once.
    \return     Number of byte actually read. */
static inline size_t ring_buffer_read(ring_buffer_t *s, void *b, size_t len)
{
    size_t sz = ring_buffer_size(s);
 8005c66:	4628      	mov	r0, r5
    ring_buffer_init( &ret->rdbuf_, AppMalloc( ReadBufferSize ), ReadBufferSize );
    return reinterpret_cast<transceiver_descriptor_t>( ret );
}

static transceiver_result_t cdc_read( void* desc, char* buf, size_t len )
{
 8005c68:	4614      	mov	r4, r2
 8005c6a:	460e      	mov	r6, r1
 8005c6c:	f7ff ff9b 	bl	8005ba6 <ring_buffer_size>
 8005c70:	4284      	cmp	r4, r0
 8005c72:	bf28      	it	cs
 8005c74:	4604      	movcs	r4, r0
    if (sz < len)
        len = sz;
    ring_buffer_peek(s, b, len);
 8005c76:	4622      	mov	r2, r4
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f7ff ff72 	bl	8005b64 <ring_buffer_peek>
    ring_buffer_consume(s, len);
 8005c80:	4628      	mov	r0, r5
 8005c82:	4621      	mov	r1, r4
 8005c84:	f7ff ff65 	bl	8005b52 <ring_buffer_consume>
    auto td = reinterpret_cast<usb_rw*>( desc );
    auto rd = ring_buffer_read( &td->rdbuf_, buf, len );
    return rd;
}
 8005c88:	4620      	mov	r0, r4
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}

08005c8c <OpenUsbHostConnection>:
    transceiver_vtable_t const* vt_ = &usb_vt;
    ring_buffer                 rdbuf_;
} s_rw;

extern "C" transceiver_descriptor_t OpenUsbHostConnection( size_t ReadBufferSize )
{
 8005c8c:	b538      	push	{r3, r4, r5, lr}
    uassert( s_rw.rdbuf_.buff == nullptr );
 8005c8e:	4c09      	ldr	r4, [pc, #36]	; (8005cb4 <OpenUsbHostConnection+0x28>)
 8005c90:	6863      	ldr	r3, [r4, #4]
    transceiver_vtable_t const* vt_ = &usb_vt;
    ring_buffer                 rdbuf_;
} s_rw;

extern "C" transceiver_descriptor_t OpenUsbHostConnection( size_t ReadBufferSize )
{
 8005c92:	4605      	mov	r5, r0
    uassert( s_rw.rdbuf_.buff == nullptr );
 8005c94:	b12b      	cbz	r3, 8005ca2 <OpenUsbHostConnection+0x16>
 8005c96:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <OpenUsbHostConnection+0x2c>)
 8005c98:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <OpenUsbHostConnection+0x30>)
 8005c9a:	4809      	ldr	r0, [pc, #36]	; (8005cc0 <OpenUsbHostConnection+0x34>)
 8005c9c:	211f      	movs	r1, #31
 8005c9e:	f000 f859 	bl	8005d54 <__assert_func>
#endif // __cplusplus

static inline void* AppMalloc( size_t sz )
{
    void* pvPortMalloc( size_t sz );
    return pvPortMalloc( sz );
 8005ca2:	f7fe ff59 	bl	8004b58 <pvPortMalloc>
    auto ret = &s_rw;
    ring_buffer_init( &ret->rdbuf_, AppMalloc( ReadBufferSize ), ReadBufferSize );
 8005ca6:	462a      	mov	r2, r5
 8005ca8:	4601      	mov	r1, r0
 8005caa:	1d20      	adds	r0, r4, #4
 8005cac:	f7ff ff2c 	bl	8005b08 <ring_buffer_init>
    return reinterpret_cast<transceiver_descriptor_t>( ret );
}
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	20008f0c 	.word	0x20008f0c
 8005cb8:	08006e17 	.word	0x08006e17
 8005cbc:	08006e5c 	.word	0x08006e5c
 8005cc0:	08006e33 	.word	0x08006e33

08005cc4 <CdcReceiveHandler>:
    return TRANSCEIVER_OK;
}

// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
 8005cc4:	b538      	push	{r3, r4, r5, lr}
    ring_buffer_write( &s_rw.rdbuf_, Buf, len );
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
 8005cc6:	4c08      	ldr	r4, [pc, #32]	; (8005ce8 <CdcReceiveHandler+0x24>)
    return TRANSCEIVER_OK;
}

// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
 8005cc8:	4605      	mov	r5, r0
    ring_buffer_write( &s_rw.rdbuf_, Buf, len );
 8005cca:	460a      	mov	r2, r1
 8005ccc:	4601      	mov	r1, r0
 8005cce:	4807      	ldr	r0, [pc, #28]	; (8005cec <CdcReceiveHandler+0x28>)
 8005cd0:	f7ff ff20 	bl	8005b14 <ring_buffer_write>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7ff fe9d 	bl	8005a16 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 8005cdc:	4620      	mov	r0, r4
}
 8005cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
// Handler performs
extern "C" void CdcReceiveHandler( char* Buf, size_t len )
{
    ring_buffer_write( &s_rw.rdbuf_, Buf, len );
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, (uint8_t*)Buf );
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 8005ce2:	f7ff beb7 	b.w	8005a54 <USBD_CDC_ReceivePacket>
 8005ce6:	bf00      	nop
 8005ce8:	20009108 	.word	0x20009108
 8005cec:	20008f10 	.word	0x20008f10

08005cf0 <_GLOBAL__sub_I_OpenUsbHostConnection>:
    .read  = cdc_read,
    .write = cdc_write,
    .ioctl = cdc_ioctl,
    .close = cdc_close };

static struct usb_rw {
 8005cf0:	4b01      	ldr	r3, [pc, #4]	; (8005cf8 <_GLOBAL__sub_I_OpenUsbHostConnection+0x8>)
 8005cf2:	4a02      	ldr	r2, [pc, #8]	; (8005cfc <_GLOBAL__sub_I_OpenUsbHostConnection+0xc>)
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	4770      	bx	lr
 8005cf8:	20008f0c 	.word	0x20008f0c
 8005cfc:	08006e4c 	.word	0x08006e4c

08005d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d06:	e003      	b.n	8005d10 <LoopCopyDataInit>

08005d08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d08:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005d0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005d0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005d0e:	3104      	adds	r1, #4

08005d10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d10:	480b      	ldr	r0, [pc, #44]	; (8005d40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005d12:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005d14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005d16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005d18:	d3f6      	bcc.n	8005d08 <CopyDataInit>
  ldr  r2, =_sbss
 8005d1a:	4a0b      	ldr	r2, [pc, #44]	; (8005d48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005d1c:	e002      	b.n	8005d24 <LoopFillZerobss>

08005d1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005d1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005d20:	f842 3b04 	str.w	r3, [r2], #4

08005d24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005d24:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005d26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005d28:	d3f9      	bcc.n	8005d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005d2a:	f7fd fbed 	bl	8003508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d2e:	f000 f841 	bl	8005db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d32:	f7fa fc97 	bl	8000664 <main>
  bx  lr    
 8005d36:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d38:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005d3c:	08006f7c 	.word	0x08006f7c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005d44:	200001e4 	.word	0x200001e4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005d48:	200001e4 	.word	0x200001e4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005d4c:	20009af8 	.word	0x20009af8

08005d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d50:	e7fe      	b.n	8005d50 <ADC_IRQHandler>
	...

08005d54 <__assert_func>:
 8005d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d56:	461c      	mov	r4, r3
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <__assert_func+0x2c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	68d8      	ldr	r0, [r3, #12]
 8005d60:	b912      	cbnz	r2, 8005d68 <__assert_func+0x14>
 8005d62:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <__assert_func+0x30>)
 8005d64:	461a      	mov	r2, r3
 8005d66:	e000      	b.n	8005d6a <__assert_func+0x16>
 8005d68:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <__assert_func+0x34>)
 8005d6a:	9202      	str	r2, [sp, #8]
 8005d6c:	e88d 000a 	stmia.w	sp, {r1, r3}
 8005d70:	4622      	mov	r2, r4
 8005d72:	462b      	mov	r3, r5
 8005d74:	4905      	ldr	r1, [pc, #20]	; (8005d8c <__assert_func+0x38>)
 8005d76:	f000 f80b 	bl	8005d90 <fiprintf>
 8005d7a:	f000 fcc5 	bl	8006708 <abort>
 8005d7e:	bf00      	nop
 8005d80:	200001e0 	.word	0x200001e0
 8005d84:	08006ece 	.word	0x08006ece
 8005d88:	08006e93 	.word	0x08006e93
 8005d8c:	08006ea0 	.word	0x08006ea0

08005d90 <fiprintf>:
 8005d90:	b40e      	push	{r1, r2, r3}
 8005d92:	b503      	push	{r0, r1, lr}
 8005d94:	4601      	mov	r1, r0
 8005d96:	ab03      	add	r3, sp, #12
 8005d98:	4805      	ldr	r0, [pc, #20]	; (8005db0 <fiprintf+0x20>)
 8005d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d9e:	6800      	ldr	r0, [r0, #0]
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	f000 f927 	bl	8005ff4 <_vfiprintf_r>
 8005da6:	b002      	add	sp, #8
 8005da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dac:	b003      	add	sp, #12
 8005dae:	4770      	bx	lr
 8005db0:	200001e0 	.word	0x200001e0

08005db4 <__libc_init_array>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <__libc_init_array+0x3c>)
 8005db8:	4c0e      	ldr	r4, [pc, #56]	; (8005df4 <__libc_init_array+0x40>)
 8005dba:	1ae4      	subs	r4, r4, r3
 8005dbc:	10a4      	asrs	r4, r4, #2
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	461e      	mov	r6, r3
 8005dc2:	42a5      	cmp	r5, r4
 8005dc4:	d004      	beq.n	8005dd0 <__libc_init_array+0x1c>
 8005dc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dca:	4798      	blx	r3
 8005dcc:	3501      	adds	r5, #1
 8005dce:	e7f8      	b.n	8005dc2 <__libc_init_array+0xe>
 8005dd0:	f000 ffc2 	bl	8006d58 <_init>
 8005dd4:	4c08      	ldr	r4, [pc, #32]	; (8005df8 <__libc_init_array+0x44>)
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <__libc_init_array+0x48>)
 8005dd8:	1ae4      	subs	r4, r4, r3
 8005dda:	10a4      	asrs	r4, r4, #2
 8005ddc:	2500      	movs	r5, #0
 8005dde:	461e      	mov	r6, r3
 8005de0:	42a5      	cmp	r5, r4
 8005de2:	d004      	beq.n	8005dee <__libc_init_array+0x3a>
 8005de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005de8:	4798      	blx	r3
 8005dea:	3501      	adds	r5, #1
 8005dec:	e7f8      	b.n	8005de0 <__libc_init_array+0x2c>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	08006f70 	.word	0x08006f70
 8005df4:	08006f70 	.word	0x08006f70
 8005df8:	08006f78 	.word	0x08006f78
 8005dfc:	08006f70 	.word	0x08006f70

08005e00 <malloc>:
 8005e00:	4b02      	ldr	r3, [pc, #8]	; (8005e0c <malloc+0xc>)
 8005e02:	4601      	mov	r1, r0
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	f000 b86d 	b.w	8005ee4 <_malloc_r>
 8005e0a:	bf00      	nop
 8005e0c:	200001e0 	.word	0x200001e0

08005e10 <free>:
 8005e10:	4b02      	ldr	r3, [pc, #8]	; (8005e1c <free+0xc>)
 8005e12:	4601      	mov	r1, r0
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f000 b817 	b.w	8005e48 <_free_r>
 8005e1a:	bf00      	nop
 8005e1c:	200001e0 	.word	0x200001e0

08005e20 <memcpy>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	1e43      	subs	r3, r0, #1
 8005e24:	440a      	add	r2, r1
 8005e26:	4291      	cmp	r1, r2
 8005e28:	d004      	beq.n	8005e34 <memcpy+0x14>
 8005e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e32:	e7f8      	b.n	8005e26 <memcpy+0x6>
 8005e34:	bd10      	pop	{r4, pc}

08005e36 <memset>:
 8005e36:	4402      	add	r2, r0
 8005e38:	4603      	mov	r3, r0
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d002      	beq.n	8005e44 <memset+0xe>
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7fa      	b.n	8005e3a <memset+0x4>
 8005e44:	4770      	bx	lr
	...

08005e48 <_free_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	d046      	beq.n	8005ede <_free_r+0x96>
 8005e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e54:	1f0c      	subs	r4, r1, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bfb8      	it	lt
 8005e5a:	18e4      	addlt	r4, r4, r3
 8005e5c:	f000 fe38 	bl	8006ad0 <__malloc_lock>
 8005e60:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <_free_r+0x98>)
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	4611      	mov	r1, r2
 8005e66:	b913      	cbnz	r3, 8005e6e <_free_r+0x26>
 8005e68:	6063      	str	r3, [r4, #4]
 8005e6a:	6014      	str	r4, [r2, #0]
 8005e6c:	e032      	b.n	8005ed4 <_free_r+0x8c>
 8005e6e:	42a3      	cmp	r3, r4
 8005e70:	d90e      	bls.n	8005e90 <_free_r+0x48>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	18a0      	adds	r0, r4, r2
 8005e76:	4283      	cmp	r3, r0
 8005e78:	bf04      	itt	eq
 8005e7a:	6818      	ldreq	r0, [r3, #0]
 8005e7c:	685b      	ldreq	r3, [r3, #4]
 8005e7e:	6063      	str	r3, [r4, #4]
 8005e80:	bf04      	itt	eq
 8005e82:	1812      	addeq	r2, r2, r0
 8005e84:	6022      	streq	r2, [r4, #0]
 8005e86:	600c      	str	r4, [r1, #0]
 8005e88:	e024      	b.n	8005ed4 <_free_r+0x8c>
 8005e8a:	42a2      	cmp	r2, r4
 8005e8c:	d803      	bhi.n	8005e96 <_free_r+0x4e>
 8005e8e:	4613      	mov	r3, r2
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	d1f9      	bne.n	8005e8a <_free_r+0x42>
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	1819      	adds	r1, r3, r0
 8005e9a:	42a1      	cmp	r1, r4
 8005e9c:	d10b      	bne.n	8005eb6 <_free_r+0x6e>
 8005e9e:	6821      	ldr	r1, [r4, #0]
 8005ea0:	4401      	add	r1, r0
 8005ea2:	1858      	adds	r0, r3, r1
 8005ea4:	4282      	cmp	r2, r0
 8005ea6:	6019      	str	r1, [r3, #0]
 8005ea8:	d114      	bne.n	8005ed4 <_free_r+0x8c>
 8005eaa:	6810      	ldr	r0, [r2, #0]
 8005eac:	6852      	ldr	r2, [r2, #4]
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	4401      	add	r1, r0
 8005eb2:	6019      	str	r1, [r3, #0]
 8005eb4:	e00e      	b.n	8005ed4 <_free_r+0x8c>
 8005eb6:	d902      	bls.n	8005ebe <_free_r+0x76>
 8005eb8:	230c      	movs	r3, #12
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	e00a      	b.n	8005ed4 <_free_r+0x8c>
 8005ebe:	6821      	ldr	r1, [r4, #0]
 8005ec0:	1860      	adds	r0, r4, r1
 8005ec2:	4282      	cmp	r2, r0
 8005ec4:	bf04      	itt	eq
 8005ec6:	6810      	ldreq	r0, [r2, #0]
 8005ec8:	6852      	ldreq	r2, [r2, #4]
 8005eca:	6062      	str	r2, [r4, #4]
 8005ecc:	bf04      	itt	eq
 8005ece:	1809      	addeq	r1, r1, r0
 8005ed0:	6021      	streq	r1, [r4, #0]
 8005ed2:	605c      	str	r4, [r3, #4]
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eda:	f000 bdfa 	b.w	8006ad2 <__malloc_unlock>
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	20008f24 	.word	0x20008f24

08005ee4 <_malloc_r>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	1ccd      	adds	r5, r1, #3
 8005ee8:	f025 0503 	bic.w	r5, r5, #3
 8005eec:	3508      	adds	r5, #8
 8005eee:	2d0c      	cmp	r5, #12
 8005ef0:	bf38      	it	cc
 8005ef2:	250c      	movcc	r5, #12
 8005ef4:	2d00      	cmp	r5, #0
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	db01      	blt.n	8005efe <_malloc_r+0x1a>
 8005efa:	42a9      	cmp	r1, r5
 8005efc:	d902      	bls.n	8005f04 <_malloc_r+0x20>
 8005efe:	230c      	movs	r3, #12
 8005f00:	6033      	str	r3, [r6, #0]
 8005f02:	e046      	b.n	8005f92 <_malloc_r+0xae>
 8005f04:	f000 fde4 	bl	8006ad0 <__malloc_lock>
 8005f08:	4b23      	ldr	r3, [pc, #140]	; (8005f98 <_malloc_r+0xb4>)
 8005f0a:	681c      	ldr	r4, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4621      	mov	r1, r4
 8005f10:	b1a1      	cbz	r1, 8005f3c <_malloc_r+0x58>
 8005f12:	680b      	ldr	r3, [r1, #0]
 8005f14:	1b5b      	subs	r3, r3, r5
 8005f16:	d40e      	bmi.n	8005f36 <_malloc_r+0x52>
 8005f18:	2b0b      	cmp	r3, #11
 8005f1a:	d903      	bls.n	8005f24 <_malloc_r+0x40>
 8005f1c:	600b      	str	r3, [r1, #0]
 8005f1e:	18cc      	adds	r4, r1, r3
 8005f20:	50cd      	str	r5, [r1, r3]
 8005f22:	e01e      	b.n	8005f62 <_malloc_r+0x7e>
 8005f24:	428c      	cmp	r4, r1
 8005f26:	bf0d      	iteet	eq
 8005f28:	6863      	ldreq	r3, [r4, #4]
 8005f2a:	684b      	ldrne	r3, [r1, #4]
 8005f2c:	6063      	strne	r3, [r4, #4]
 8005f2e:	6013      	streq	r3, [r2, #0]
 8005f30:	bf18      	it	ne
 8005f32:	460c      	movne	r4, r1
 8005f34:	e015      	b.n	8005f62 <_malloc_r+0x7e>
 8005f36:	460c      	mov	r4, r1
 8005f38:	6849      	ldr	r1, [r1, #4]
 8005f3a:	e7e9      	b.n	8005f10 <_malloc_r+0x2c>
 8005f3c:	4c17      	ldr	r4, [pc, #92]	; (8005f9c <_malloc_r+0xb8>)
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	b91b      	cbnz	r3, 8005f4a <_malloc_r+0x66>
 8005f42:	4630      	mov	r0, r6
 8005f44:	f000 fb0e 	bl	8006564 <_sbrk_r>
 8005f48:	6020      	str	r0, [r4, #0]
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f000 fb09 	bl	8006564 <_sbrk_r>
 8005f52:	1c43      	adds	r3, r0, #1
 8005f54:	d018      	beq.n	8005f88 <_malloc_r+0xa4>
 8005f56:	1cc4      	adds	r4, r0, #3
 8005f58:	f024 0403 	bic.w	r4, r4, #3
 8005f5c:	42a0      	cmp	r0, r4
 8005f5e:	d10d      	bne.n	8005f7c <_malloc_r+0x98>
 8005f60:	6025      	str	r5, [r4, #0]
 8005f62:	4630      	mov	r0, r6
 8005f64:	f000 fdb5 	bl	8006ad2 <__malloc_unlock>
 8005f68:	f104 000b 	add.w	r0, r4, #11
 8005f6c:	1d23      	adds	r3, r4, #4
 8005f6e:	f020 0007 	bic.w	r0, r0, #7
 8005f72:	1ac3      	subs	r3, r0, r3
 8005f74:	d00e      	beq.n	8005f94 <_malloc_r+0xb0>
 8005f76:	425a      	negs	r2, r3
 8005f78:	50e2      	str	r2, [r4, r3]
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	1a21      	subs	r1, r4, r0
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f000 faf0 	bl	8006564 <_sbrk_r>
 8005f84:	3001      	adds	r0, #1
 8005f86:	d1eb      	bne.n	8005f60 <_malloc_r+0x7c>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	6033      	str	r3, [r6, #0]
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f000 fda0 	bl	8006ad2 <__malloc_unlock>
 8005f92:	2000      	movs	r0, #0
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
 8005f96:	bf00      	nop
 8005f98:	20008f24 	.word	0x20008f24
 8005f9c:	20008f20 	.word	0x20008f20

08005fa0 <__sfputc_r>:
 8005fa0:	6893      	ldr	r3, [r2, #8]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	b410      	push	{r4}
 8005fa8:	6093      	str	r3, [r2, #8]
 8005faa:	da09      	bge.n	8005fc0 <__sfputc_r+0x20>
 8005fac:	6994      	ldr	r4, [r2, #24]
 8005fae:	42a3      	cmp	r3, r4
 8005fb0:	db02      	blt.n	8005fb8 <__sfputc_r+0x18>
 8005fb2:	b2cb      	uxtb	r3, r1
 8005fb4:	2b0a      	cmp	r3, #10
 8005fb6:	d103      	bne.n	8005fc0 <__sfputc_r+0x20>
 8005fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fbc:	f000 bae2 	b.w	8006584 <__swbuf_r>
 8005fc0:	6813      	ldr	r3, [r2, #0]
 8005fc2:	1c58      	adds	r0, r3, #1
 8005fc4:	6010      	str	r0, [r2, #0]
 8005fc6:	7019      	strb	r1, [r3, #0]
 8005fc8:	b2c8      	uxtb	r0, r1
 8005fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <__sfputs_r>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	460f      	mov	r7, r1
 8005fd6:	4614      	mov	r4, r2
 8005fd8:	18d5      	adds	r5, r2, r3
 8005fda:	42ac      	cmp	r4, r5
 8005fdc:	d008      	beq.n	8005ff0 <__sfputs_r+0x20>
 8005fde:	463a      	mov	r2, r7
 8005fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f7ff ffdb 	bl	8005fa0 <__sfputc_r>
 8005fea:	1c43      	adds	r3, r0, #1
 8005fec:	d1f5      	bne.n	8005fda <__sfputs_r+0xa>
 8005fee:	e000      	b.n	8005ff2 <__sfputs_r+0x22>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ff4 <_vfiprintf_r>:
 8005ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	b09d      	sub	sp, #116	; 0x74
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	4617      	mov	r7, r2
 8005ffe:	9303      	str	r3, [sp, #12]
 8006000:	4606      	mov	r6, r0
 8006002:	b118      	cbz	r0, 800600c <_vfiprintf_r+0x18>
 8006004:	6983      	ldr	r3, [r0, #24]
 8006006:	b90b      	cbnz	r3, 800600c <_vfiprintf_r+0x18>
 8006008:	f000 fc78 	bl	80068fc <__sinit>
 800600c:	4b7f      	ldr	r3, [pc, #508]	; (800620c <_vfiprintf_r+0x218>)
 800600e:	429c      	cmp	r4, r3
 8006010:	d101      	bne.n	8006016 <_vfiprintf_r+0x22>
 8006012:	6874      	ldr	r4, [r6, #4]
 8006014:	e008      	b.n	8006028 <_vfiprintf_r+0x34>
 8006016:	4b7e      	ldr	r3, [pc, #504]	; (8006210 <_vfiprintf_r+0x21c>)
 8006018:	429c      	cmp	r4, r3
 800601a:	d101      	bne.n	8006020 <_vfiprintf_r+0x2c>
 800601c:	68b4      	ldr	r4, [r6, #8]
 800601e:	e003      	b.n	8006028 <_vfiprintf_r+0x34>
 8006020:	4b7c      	ldr	r3, [pc, #496]	; (8006214 <_vfiprintf_r+0x220>)
 8006022:	429c      	cmp	r4, r3
 8006024:	bf08      	it	eq
 8006026:	68f4      	ldreq	r4, [r6, #12]
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	0718      	lsls	r0, r3, #28
 800602c:	d50c      	bpl.n	8006048 <_vfiprintf_r+0x54>
 800602e:	6923      	ldr	r3, [r4, #16]
 8006030:	b153      	cbz	r3, 8006048 <_vfiprintf_r+0x54>
 8006032:	2300      	movs	r3, #0
 8006034:	9309      	str	r3, [sp, #36]	; 0x24
 8006036:	2320      	movs	r3, #32
 8006038:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800603c:	2330      	movs	r3, #48	; 0x30
 800603e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006042:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8006218 <_vfiprintf_r+0x224>
 8006046:	e044      	b.n	80060d2 <_vfiprintf_r+0xde>
 8006048:	4621      	mov	r1, r4
 800604a:	4630      	mov	r0, r6
 800604c:	f000 faee 	bl	800662c <__swsetup_r>
 8006050:	2800      	cmp	r0, #0
 8006052:	d0ee      	beq.n	8006032 <_vfiprintf_r+0x3e>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	e0d5      	b.n	8006206 <_vfiprintf_r+0x212>
 800605a:	9a03      	ldr	r2, [sp, #12]
 800605c:	1d11      	adds	r1, r2, #4
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	9103      	str	r1, [sp, #12]
 8006062:	2a00      	cmp	r2, #0
 8006064:	f280 808c 	bge.w	8006180 <_vfiprintf_r+0x18c>
 8006068:	4252      	negs	r2, r2
 800606a:	f043 0002 	orr.w	r0, r3, #2
 800606e:	9207      	str	r2, [sp, #28]
 8006070:	9004      	str	r0, [sp, #16]
 8006072:	f898 3000 	ldrb.w	r3, [r8]
 8006076:	2b2e      	cmp	r3, #46	; 0x2e
 8006078:	f000 8084 	beq.w	8006184 <_vfiprintf_r+0x190>
 800607c:	2203      	movs	r2, #3
 800607e:	f898 1000 	ldrb.w	r1, [r8]
 8006082:	4865      	ldr	r0, [pc, #404]	; (8006218 <_vfiprintf_r+0x224>)
 8006084:	f7fa f8bc 	bl	8000200 <memchr>
 8006088:	b148      	cbz	r0, 800609e <_vfiprintf_r+0xaa>
 800608a:	2340      	movs	r3, #64	; 0x40
 800608c:	ebcb 0000 	rsb	r0, fp, r0
 8006090:	fa03 f000 	lsl.w	r0, r3, r0
 8006094:	9b04      	ldr	r3, [sp, #16]
 8006096:	4318      	orrs	r0, r3
 8006098:	9004      	str	r0, [sp, #16]
 800609a:	f108 0801 	add.w	r8, r8, #1
 800609e:	f898 1000 	ldrb.w	r1, [r8]
 80060a2:	485e      	ldr	r0, [pc, #376]	; (800621c <_vfiprintf_r+0x228>)
 80060a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060a8:	2206      	movs	r2, #6
 80060aa:	f108 0701 	add.w	r7, r8, #1
 80060ae:	f7fa f8a7 	bl	8000200 <memchr>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	f000 8095 	beq.w	80061e2 <_vfiprintf_r+0x1ee>
 80060b8:	4b59      	ldr	r3, [pc, #356]	; (8006220 <_vfiprintf_r+0x22c>)
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 8088 	bne.w	80061d0 <_vfiprintf_r+0x1dc>
 80060c0:	9b03      	ldr	r3, [sp, #12]
 80060c2:	3307      	adds	r3, #7
 80060c4:	f023 0307 	bic.w	r3, r3, #7
 80060c8:	3308      	adds	r3, #8
 80060ca:	9303      	str	r3, [sp, #12]
 80060cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ce:	4453      	add	r3, sl
 80060d0:	9309      	str	r3, [sp, #36]	; 0x24
 80060d2:	46b8      	mov	r8, r7
 80060d4:	4645      	mov	r5, r8
 80060d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060da:	b91b      	cbnz	r3, 80060e4 <_vfiprintf_r+0xf0>
 80060dc:	ebb8 0907 	subs.w	r9, r8, r7
 80060e0:	d00f      	beq.n	8006102 <_vfiprintf_r+0x10e>
 80060e2:	e003      	b.n	80060ec <_vfiprintf_r+0xf8>
 80060e4:	2b25      	cmp	r3, #37	; 0x25
 80060e6:	d0f9      	beq.n	80060dc <_vfiprintf_r+0xe8>
 80060e8:	46a8      	mov	r8, r5
 80060ea:	e7f3      	b.n	80060d4 <_vfiprintf_r+0xe0>
 80060ec:	464b      	mov	r3, r9
 80060ee:	463a      	mov	r2, r7
 80060f0:	4621      	mov	r1, r4
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ff6c 	bl	8005fd0 <__sfputs_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	d07f      	beq.n	80061fc <_vfiprintf_r+0x208>
 80060fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fe:	444b      	add	r3, r9
 8006100:	9309      	str	r3, [sp, #36]	; 0x24
 8006102:	f898 3000 	ldrb.w	r3, [r8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d078      	beq.n	80061fc <_vfiprintf_r+0x208>
 800610a:	2300      	movs	r3, #0
 800610c:	f04f 32ff 	mov.w	r2, #4294967295
 8006110:	9304      	str	r3, [sp, #16]
 8006112:	9307      	str	r3, [sp, #28]
 8006114:	9205      	str	r2, [sp, #20]
 8006116:	9306      	str	r3, [sp, #24]
 8006118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800611c:	931a      	str	r3, [sp, #104]	; 0x68
 800611e:	2701      	movs	r7, #1
 8006120:	2205      	movs	r2, #5
 8006122:	7829      	ldrb	r1, [r5, #0]
 8006124:	483f      	ldr	r0, [pc, #252]	; (8006224 <_vfiprintf_r+0x230>)
 8006126:	f7fa f86b 	bl	8000200 <memchr>
 800612a:	f105 0801 	add.w	r8, r5, #1
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	b138      	cbz	r0, 8006142 <_vfiprintf_r+0x14e>
 8006132:	4a3c      	ldr	r2, [pc, #240]	; (8006224 <_vfiprintf_r+0x230>)
 8006134:	1a80      	subs	r0, r0, r2
 8006136:	fa07 f000 	lsl.w	r0, r7, r0
 800613a:	4318      	orrs	r0, r3
 800613c:	9004      	str	r0, [sp, #16]
 800613e:	4645      	mov	r5, r8
 8006140:	e7ee      	b.n	8006120 <_vfiprintf_r+0x12c>
 8006142:	06d9      	lsls	r1, r3, #27
 8006144:	bf44      	itt	mi
 8006146:	2220      	movmi	r2, #32
 8006148:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800614c:	071a      	lsls	r2, r3, #28
 800614e:	bf44      	itt	mi
 8006150:	222b      	movmi	r2, #43	; 0x2b
 8006152:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006156:	782a      	ldrb	r2, [r5, #0]
 8006158:	2a2a      	cmp	r2, #42	; 0x2a
 800615a:	f43f af7e 	beq.w	800605a <_vfiprintf_r+0x66>
 800615e:	9a07      	ldr	r2, [sp, #28]
 8006160:	2100      	movs	r1, #0
 8006162:	200a      	movs	r0, #10
 8006164:	46a8      	mov	r8, r5
 8006166:	3501      	adds	r5, #1
 8006168:	f898 3000 	ldrb.w	r3, [r8]
 800616c:	3b30      	subs	r3, #48	; 0x30
 800616e:	2b09      	cmp	r3, #9
 8006170:	d803      	bhi.n	800617a <_vfiprintf_r+0x186>
 8006172:	fb00 3202 	mla	r2, r0, r2, r3
 8006176:	2101      	movs	r1, #1
 8006178:	e7f4      	b.n	8006164 <_vfiprintf_r+0x170>
 800617a:	2900      	cmp	r1, #0
 800617c:	f43f af79 	beq.w	8006072 <_vfiprintf_r+0x7e>
 8006180:	9207      	str	r2, [sp, #28]
 8006182:	e776      	b.n	8006072 <_vfiprintf_r+0x7e>
 8006184:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006188:	2b2a      	cmp	r3, #42	; 0x2a
 800618a:	d10b      	bne.n	80061a4 <_vfiprintf_r+0x1b0>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	9203      	str	r2, [sp, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	bfb8      	it	lt
 8006198:	f04f 33ff 	movlt.w	r3, #4294967295
 800619c:	f108 0802 	add.w	r8, r8, #2
 80061a0:	9305      	str	r3, [sp, #20]
 80061a2:	e76b      	b.n	800607c <_vfiprintf_r+0x88>
 80061a4:	2300      	movs	r3, #0
 80061a6:	9305      	str	r3, [sp, #20]
 80061a8:	f108 0001 	add.w	r0, r8, #1
 80061ac:	4619      	mov	r1, r3
 80061ae:	250a      	movs	r5, #10
 80061b0:	4680      	mov	r8, r0
 80061b2:	3001      	adds	r0, #1
 80061b4:	f898 2000 	ldrb.w	r2, [r8]
 80061b8:	3a30      	subs	r2, #48	; 0x30
 80061ba:	2a09      	cmp	r2, #9
 80061bc:	d803      	bhi.n	80061c6 <_vfiprintf_r+0x1d2>
 80061be:	fb05 2101 	mla	r1, r5, r1, r2
 80061c2:	2301      	movs	r3, #1
 80061c4:	e7f4      	b.n	80061b0 <_vfiprintf_r+0x1bc>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f43f af58 	beq.w	800607c <_vfiprintf_r+0x88>
 80061cc:	9105      	str	r1, [sp, #20]
 80061ce:	e755      	b.n	800607c <_vfiprintf_r+0x88>
 80061d0:	ab03      	add	r3, sp, #12
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	4622      	mov	r2, r4
 80061d6:	4b14      	ldr	r3, [pc, #80]	; (8006228 <_vfiprintf_r+0x234>)
 80061d8:	a904      	add	r1, sp, #16
 80061da:	4630      	mov	r0, r6
 80061dc:	f3af 8000 	nop.w
 80061e0:	e007      	b.n	80061f2 <_vfiprintf_r+0x1fe>
 80061e2:	ab03      	add	r3, sp, #12
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	4622      	mov	r2, r4
 80061e8:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <_vfiprintf_r+0x234>)
 80061ea:	a904      	add	r1, sp, #16
 80061ec:	4630      	mov	r0, r6
 80061ee:	f000 f893 	bl	8006318 <_printf_i>
 80061f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80061f6:	4682      	mov	sl, r0
 80061f8:	f47f af68 	bne.w	80060cc <_vfiprintf_r+0xd8>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	065b      	lsls	r3, r3, #25
 8006200:	f53f af28 	bmi.w	8006054 <_vfiprintf_r+0x60>
 8006204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006206:	b01d      	add	sp, #116	; 0x74
 8006208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620c:	08006f08 	.word	0x08006f08
 8006210:	08006f28 	.word	0x08006f28
 8006214:	08006f48 	.word	0x08006f48
 8006218:	08006eda 	.word	0x08006eda
 800621c:	08006ede 	.word	0x08006ede
 8006220:	00000000 	.word	0x00000000
 8006224:	08006ed4 	.word	0x08006ed4
 8006228:	08005fd1 	.word	0x08005fd1

0800622c <_printf_common>:
 800622c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	4691      	mov	r9, r2
 8006232:	461f      	mov	r7, r3
 8006234:	690a      	ldr	r2, [r1, #16]
 8006236:	688b      	ldr	r3, [r1, #8]
 8006238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800623c:	4293      	cmp	r3, r2
 800623e:	bfb8      	it	lt
 8006240:	4613      	movlt	r3, r2
 8006242:	f8c9 3000 	str.w	r3, [r9]
 8006246:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800624a:	4606      	mov	r6, r0
 800624c:	460c      	mov	r4, r1
 800624e:	b112      	cbz	r2, 8006256 <_printf_common+0x2a>
 8006250:	3301      	adds	r3, #1
 8006252:	f8c9 3000 	str.w	r3, [r9]
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	0699      	lsls	r1, r3, #26
 800625a:	bf42      	ittt	mi
 800625c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006260:	3302      	addmi	r3, #2
 8006262:	f8c9 3000 	strmi.w	r3, [r9]
 8006266:	6825      	ldr	r5, [r4, #0]
 8006268:	f015 0506 	ands.w	r5, r5, #6
 800626c:	d110      	bne.n	8006290 <_printf_common+0x64>
 800626e:	f104 0a19 	add.w	sl, r4, #25
 8006272:	e007      	b.n	8006284 <_printf_common+0x58>
 8006274:	2301      	movs	r3, #1
 8006276:	4652      	mov	r2, sl
 8006278:	4639      	mov	r1, r7
 800627a:	4630      	mov	r0, r6
 800627c:	47c0      	blx	r8
 800627e:	3001      	adds	r0, #1
 8006280:	d01a      	beq.n	80062b8 <_printf_common+0x8c>
 8006282:	3501      	adds	r5, #1
 8006284:	68e3      	ldr	r3, [r4, #12]
 8006286:	f8d9 2000 	ldr.w	r2, [r9]
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	429d      	cmp	r5, r3
 800628e:	dbf1      	blt.n	8006274 <_printf_common+0x48>
 8006290:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	3300      	adds	r3, #0
 8006298:	bf18      	it	ne
 800629a:	2301      	movne	r3, #1
 800629c:	0692      	lsls	r2, r2, #26
 800629e:	d50f      	bpl.n	80062c0 <_printf_common+0x94>
 80062a0:	18e1      	adds	r1, r4, r3
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	2030      	movs	r0, #48	; 0x30
 80062a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062aa:	4422      	add	r2, r4
 80062ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062b4:	3302      	adds	r3, #2
 80062b6:	e003      	b.n	80062c0 <_printf_common+0x94>
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295
 80062bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c4:	4639      	mov	r1, r7
 80062c6:	4630      	mov	r0, r6
 80062c8:	47c0      	blx	r8
 80062ca:	3001      	adds	r0, #1
 80062cc:	d0f4      	beq.n	80062b8 <_printf_common+0x8c>
 80062ce:	6822      	ldr	r2, [r4, #0]
 80062d0:	f8d9 5000 	ldr.w	r5, [r9]
 80062d4:	68e3      	ldr	r3, [r4, #12]
 80062d6:	f002 0206 	and.w	r2, r2, #6
 80062da:	2a04      	cmp	r2, #4
 80062dc:	bf08      	it	eq
 80062de:	1b5d      	subeq	r5, r3, r5
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	68a3      	ldr	r3, [r4, #8]
 80062e4:	bf0c      	ite	eq
 80062e6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062ea:	2500      	movne	r5, #0
 80062ec:	4293      	cmp	r3, r2
 80062ee:	bfc4      	itt	gt
 80062f0:	1a9b      	subgt	r3, r3, r2
 80062f2:	18ed      	addgt	r5, r5, r3
 80062f4:	f04f 0900 	mov.w	r9, #0
 80062f8:	341a      	adds	r4, #26
 80062fa:	454d      	cmp	r5, r9
 80062fc:	d009      	beq.n	8006312 <_printf_common+0xe6>
 80062fe:	2301      	movs	r3, #1
 8006300:	4622      	mov	r2, r4
 8006302:	4639      	mov	r1, r7
 8006304:	4630      	mov	r0, r6
 8006306:	47c0      	blx	r8
 8006308:	3001      	adds	r0, #1
 800630a:	d0d5      	beq.n	80062b8 <_printf_common+0x8c>
 800630c:	f109 0901 	add.w	r9, r9, #1
 8006310:	e7f3      	b.n	80062fa <_printf_common+0xce>
 8006312:	2000      	movs	r0, #0
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006318 <_printf_i>:
 8006318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800631c:	4617      	mov	r7, r2
 800631e:	7e0a      	ldrb	r2, [r1, #24]
 8006320:	b085      	sub	sp, #20
 8006322:	2a6e      	cmp	r2, #110	; 0x6e
 8006324:	4698      	mov	r8, r3
 8006326:	4606      	mov	r6, r0
 8006328:	460c      	mov	r4, r1
 800632a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800632c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006330:	f000 80ae 	beq.w	8006490 <_printf_i+0x178>
 8006334:	d811      	bhi.n	800635a <_printf_i+0x42>
 8006336:	2a63      	cmp	r2, #99	; 0x63
 8006338:	d022      	beq.n	8006380 <_printf_i+0x68>
 800633a:	d809      	bhi.n	8006350 <_printf_i+0x38>
 800633c:	2a00      	cmp	r2, #0
 800633e:	f000 80bb 	beq.w	80064b8 <_printf_i+0x1a0>
 8006342:	2a58      	cmp	r2, #88	; 0x58
 8006344:	f040 80ca 	bne.w	80064dc <_printf_i+0x1c4>
 8006348:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800634c:	4983      	ldr	r1, [pc, #524]	; (800655c <_printf_i+0x244>)
 800634e:	e055      	b.n	80063fc <_printf_i+0xe4>
 8006350:	2a64      	cmp	r2, #100	; 0x64
 8006352:	d01e      	beq.n	8006392 <_printf_i+0x7a>
 8006354:	2a69      	cmp	r2, #105	; 0x69
 8006356:	d01c      	beq.n	8006392 <_printf_i+0x7a>
 8006358:	e0c0      	b.n	80064dc <_printf_i+0x1c4>
 800635a:	2a73      	cmp	r2, #115	; 0x73
 800635c:	f000 80b0 	beq.w	80064c0 <_printf_i+0x1a8>
 8006360:	d809      	bhi.n	8006376 <_printf_i+0x5e>
 8006362:	2a6f      	cmp	r2, #111	; 0x6f
 8006364:	d02e      	beq.n	80063c4 <_printf_i+0xac>
 8006366:	2a70      	cmp	r2, #112	; 0x70
 8006368:	f040 80b8 	bne.w	80064dc <_printf_i+0x1c4>
 800636c:	680a      	ldr	r2, [r1, #0]
 800636e:	f042 0220 	orr.w	r2, r2, #32
 8006372:	600a      	str	r2, [r1, #0]
 8006374:	e03e      	b.n	80063f4 <_printf_i+0xdc>
 8006376:	2a75      	cmp	r2, #117	; 0x75
 8006378:	d024      	beq.n	80063c4 <_printf_i+0xac>
 800637a:	2a78      	cmp	r2, #120	; 0x78
 800637c:	d03a      	beq.n	80063f4 <_printf_i+0xdc>
 800637e:	e0ad      	b.n	80064dc <_printf_i+0x1c4>
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006386:	1d11      	adds	r1, r2, #4
 8006388:	6019      	str	r1, [r3, #0]
 800638a:	6813      	ldr	r3, [r2, #0]
 800638c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006390:	e0a8      	b.n	80064e4 <_printf_i+0x1cc>
 8006392:	6821      	ldr	r1, [r4, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	f011 0f80 	tst.w	r1, #128	; 0x80
 800639a:	d002      	beq.n	80063a2 <_printf_i+0x8a>
 800639c:	1d11      	adds	r1, r2, #4
 800639e:	6019      	str	r1, [r3, #0]
 80063a0:	e008      	b.n	80063b4 <_printf_i+0x9c>
 80063a2:	f011 0f40 	tst.w	r1, #64	; 0x40
 80063a6:	f102 0104 	add.w	r1, r2, #4
 80063aa:	6019      	str	r1, [r3, #0]
 80063ac:	d002      	beq.n	80063b4 <_printf_i+0x9c>
 80063ae:	f9b2 3000 	ldrsh.w	r3, [r2]
 80063b2:	e000      	b.n	80063b6 <_printf_i+0x9e>
 80063b4:	6813      	ldr	r3, [r2, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da3c      	bge.n	8006434 <_printf_i+0x11c>
 80063ba:	222d      	movs	r2, #45	; 0x2d
 80063bc:	425b      	negs	r3, r3
 80063be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063c2:	e037      	b.n	8006434 <_printf_i+0x11c>
 80063c4:	6821      	ldr	r1, [r4, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80063cc:	d002      	beq.n	80063d4 <_printf_i+0xbc>
 80063ce:	1d11      	adds	r1, r2, #4
 80063d0:	6019      	str	r1, [r3, #0]
 80063d2:	e007      	b.n	80063e4 <_printf_i+0xcc>
 80063d4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80063d8:	f102 0104 	add.w	r1, r2, #4
 80063dc:	6019      	str	r1, [r3, #0]
 80063de:	d001      	beq.n	80063e4 <_printf_i+0xcc>
 80063e0:	8813      	ldrh	r3, [r2, #0]
 80063e2:	e000      	b.n	80063e6 <_printf_i+0xce>
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	7e22      	ldrb	r2, [r4, #24]
 80063e8:	495c      	ldr	r1, [pc, #368]	; (800655c <_printf_i+0x244>)
 80063ea:	2a6f      	cmp	r2, #111	; 0x6f
 80063ec:	bf14      	ite	ne
 80063ee:	220a      	movne	r2, #10
 80063f0:	2208      	moveq	r2, #8
 80063f2:	e01b      	b.n	800642c <_printf_i+0x114>
 80063f4:	2278      	movs	r2, #120	; 0x78
 80063f6:	495a      	ldr	r1, [pc, #360]	; (8006560 <_printf_i+0x248>)
 80063f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80063fc:	6822      	ldr	r2, [r4, #0]
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006404:	f100 0504 	add.w	r5, r0, #4
 8006408:	601d      	str	r5, [r3, #0]
 800640a:	d103      	bne.n	8006414 <_printf_i+0xfc>
 800640c:	0655      	lsls	r5, r2, #25
 800640e:	d501      	bpl.n	8006414 <_printf_i+0xfc>
 8006410:	8803      	ldrh	r3, [r0, #0]
 8006412:	e000      	b.n	8006416 <_printf_i+0xfe>
 8006414:	6803      	ldr	r3, [r0, #0]
 8006416:	07d0      	lsls	r0, r2, #31
 8006418:	bf44      	itt	mi
 800641a:	f042 0220 	orrmi.w	r2, r2, #32
 800641e:	6022      	strmi	r2, [r4, #0]
 8006420:	b91b      	cbnz	r3, 800642a <_printf_i+0x112>
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	f022 0220 	bic.w	r2, r2, #32
 8006428:	6022      	str	r2, [r4, #0]
 800642a:	2210      	movs	r2, #16
 800642c:	2000      	movs	r0, #0
 800642e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006432:	e001      	b.n	8006438 <_printf_i+0x120>
 8006434:	4949      	ldr	r1, [pc, #292]	; (800655c <_printf_i+0x244>)
 8006436:	220a      	movs	r2, #10
 8006438:	6865      	ldr	r5, [r4, #4]
 800643a:	60a5      	str	r5, [r4, #8]
 800643c:	2d00      	cmp	r5, #0
 800643e:	db08      	blt.n	8006452 <_printf_i+0x13a>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	f020 0004 	bic.w	r0, r0, #4
 8006446:	6020      	str	r0, [r4, #0]
 8006448:	b92b      	cbnz	r3, 8006456 <_printf_i+0x13e>
 800644a:	2d00      	cmp	r5, #0
 800644c:	d17d      	bne.n	800654a <_printf_i+0x232>
 800644e:	4675      	mov	r5, lr
 8006450:	e00c      	b.n	800646c <_printf_i+0x154>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d079      	beq.n	800654a <_printf_i+0x232>
 8006456:	4675      	mov	r5, lr
 8006458:	fbb3 f0f2 	udiv	r0, r3, r2
 800645c:	fb02 3310 	mls	r3, r2, r0, r3
 8006460:	5ccb      	ldrb	r3, [r1, r3]
 8006462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006466:	4603      	mov	r3, r0
 8006468:	2800      	cmp	r0, #0
 800646a:	d1f5      	bne.n	8006458 <_printf_i+0x140>
 800646c:	2a08      	cmp	r2, #8
 800646e:	d10b      	bne.n	8006488 <_printf_i+0x170>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	07da      	lsls	r2, r3, #31
 8006474:	d508      	bpl.n	8006488 <_printf_i+0x170>
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	6862      	ldr	r2, [r4, #4]
 800647a:	429a      	cmp	r2, r3
 800647c:	bfde      	ittt	le
 800647e:	2330      	movle	r3, #48	; 0x30
 8006480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006484:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006488:	ebc5 030e 	rsb	r3, r5, lr
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	e02e      	b.n	80064ee <_printf_i+0x1d6>
 8006490:	6808      	ldr	r0, [r1, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	6949      	ldr	r1, [r1, #20]
 8006496:	f010 0f80 	tst.w	r0, #128	; 0x80
 800649a:	d003      	beq.n	80064a4 <_printf_i+0x18c>
 800649c:	1d10      	adds	r0, r2, #4
 800649e:	6018      	str	r0, [r3, #0]
 80064a0:	6813      	ldr	r3, [r2, #0]
 80064a2:	e008      	b.n	80064b6 <_printf_i+0x19e>
 80064a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064a8:	f102 0004 	add.w	r0, r2, #4
 80064ac:	6018      	str	r0, [r3, #0]
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	d001      	beq.n	80064b6 <_printf_i+0x19e>
 80064b2:	8019      	strh	r1, [r3, #0]
 80064b4:	e000      	b.n	80064b8 <_printf_i+0x1a0>
 80064b6:	6019      	str	r1, [r3, #0]
 80064b8:	2300      	movs	r3, #0
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	4675      	mov	r5, lr
 80064be:	e016      	b.n	80064ee <_printf_i+0x1d6>
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	1d11      	adds	r1, r2, #4
 80064c4:	6019      	str	r1, [r3, #0]
 80064c6:	6815      	ldr	r5, [r2, #0]
 80064c8:	6862      	ldr	r2, [r4, #4]
 80064ca:	2100      	movs	r1, #0
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7f9 fe97 	bl	8000200 <memchr>
 80064d2:	b108      	cbz	r0, 80064d8 <_printf_i+0x1c0>
 80064d4:	1b40      	subs	r0, r0, r5
 80064d6:	6060      	str	r0, [r4, #4]
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	e004      	b.n	80064e6 <_printf_i+0x1ce>
 80064dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80064e4:	2301      	movs	r3, #1
 80064e6:	6123      	str	r3, [r4, #16]
 80064e8:	2300      	movs	r3, #0
 80064ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ee:	f8cd 8000 	str.w	r8, [sp]
 80064f2:	463b      	mov	r3, r7
 80064f4:	aa03      	add	r2, sp, #12
 80064f6:	4621      	mov	r1, r4
 80064f8:	4630      	mov	r0, r6
 80064fa:	f7ff fe97 	bl	800622c <_printf_common>
 80064fe:	3001      	adds	r0, #1
 8006500:	d102      	bne.n	8006508 <_printf_i+0x1f0>
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
 8006506:	e026      	b.n	8006556 <_printf_i+0x23e>
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	462a      	mov	r2, r5
 800650c:	4639      	mov	r1, r7
 800650e:	4630      	mov	r0, r6
 8006510:	47c0      	blx	r8
 8006512:	3001      	adds	r0, #1
 8006514:	d0f5      	beq.n	8006502 <_printf_i+0x1ea>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	079b      	lsls	r3, r3, #30
 800651a:	d510      	bpl.n	800653e <_printf_i+0x226>
 800651c:	2500      	movs	r5, #0
 800651e:	f104 0919 	add.w	r9, r4, #25
 8006522:	e007      	b.n	8006534 <_printf_i+0x21c>
 8006524:	2301      	movs	r3, #1
 8006526:	464a      	mov	r2, r9
 8006528:	4639      	mov	r1, r7
 800652a:	4630      	mov	r0, r6
 800652c:	47c0      	blx	r8
 800652e:	3001      	adds	r0, #1
 8006530:	d0e7      	beq.n	8006502 <_printf_i+0x1ea>
 8006532:	3501      	adds	r5, #1
 8006534:	68e3      	ldr	r3, [r4, #12]
 8006536:	9a03      	ldr	r2, [sp, #12]
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	429d      	cmp	r5, r3
 800653c:	dbf2      	blt.n	8006524 <_printf_i+0x20c>
 800653e:	68e0      	ldr	r0, [r4, #12]
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	4298      	cmp	r0, r3
 8006544:	bfb8      	it	lt
 8006546:	4618      	movlt	r0, r3
 8006548:	e005      	b.n	8006556 <_printf_i+0x23e>
 800654a:	780b      	ldrb	r3, [r1, #0]
 800654c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006554:	e78a      	b.n	800646c <_printf_i+0x154>
 8006556:	b005      	add	sp, #20
 8006558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800655c:	08006ee5 	.word	0x08006ee5
 8006560:	08006ef6 	.word	0x08006ef6

08006564 <_sbrk_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4c06      	ldr	r4, [pc, #24]	; (8006580 <_sbrk_r+0x1c>)
 8006568:	2300      	movs	r3, #0
 800656a:	4605      	mov	r5, r0
 800656c:	4608      	mov	r0, r1
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	f000 fbda 	bl	8006d28 <_sbrk>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <_sbrk_r+0x1a>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	b103      	cbz	r3, 800657e <_sbrk_r+0x1a>
 800657c:	602b      	str	r3, [r5, #0]
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	20009af4 	.word	0x20009af4

08006584 <__swbuf_r>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	460f      	mov	r7, r1
 8006588:	4614      	mov	r4, r2
 800658a:	4605      	mov	r5, r0
 800658c:	b118      	cbz	r0, 8006596 <__swbuf_r+0x12>
 800658e:	6983      	ldr	r3, [r0, #24]
 8006590:	b90b      	cbnz	r3, 8006596 <__swbuf_r+0x12>
 8006592:	f000 f9b3 	bl	80068fc <__sinit>
 8006596:	4b22      	ldr	r3, [pc, #136]	; (8006620 <__swbuf_r+0x9c>)
 8006598:	429c      	cmp	r4, r3
 800659a:	d101      	bne.n	80065a0 <__swbuf_r+0x1c>
 800659c:	686c      	ldr	r4, [r5, #4]
 800659e:	e008      	b.n	80065b2 <__swbuf_r+0x2e>
 80065a0:	4b20      	ldr	r3, [pc, #128]	; (8006624 <__swbuf_r+0xa0>)
 80065a2:	429c      	cmp	r4, r3
 80065a4:	d101      	bne.n	80065aa <__swbuf_r+0x26>
 80065a6:	68ac      	ldr	r4, [r5, #8]
 80065a8:	e003      	b.n	80065b2 <__swbuf_r+0x2e>
 80065aa:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <__swbuf_r+0xa4>)
 80065ac:	429c      	cmp	r4, r3
 80065ae:	bf08      	it	eq
 80065b0:	68ec      	ldreq	r4, [r5, #12]
 80065b2:	69a3      	ldr	r3, [r4, #24]
 80065b4:	60a3      	str	r3, [r4, #8]
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	071a      	lsls	r2, r3, #28
 80065ba:	d509      	bpl.n	80065d0 <__swbuf_r+0x4c>
 80065bc:	6923      	ldr	r3, [r4, #16]
 80065be:	b13b      	cbz	r3, 80065d0 <__swbuf_r+0x4c>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	6920      	ldr	r0, [r4, #16]
 80065c4:	1a18      	subs	r0, r3, r0
 80065c6:	6963      	ldr	r3, [r4, #20]
 80065c8:	4298      	cmp	r0, r3
 80065ca:	b2fe      	uxtb	r6, r7
 80065cc:	db0f      	blt.n	80065ee <__swbuf_r+0x6a>
 80065ce:	e008      	b.n	80065e2 <__swbuf_r+0x5e>
 80065d0:	4621      	mov	r1, r4
 80065d2:	4628      	mov	r0, r5
 80065d4:	f000 f82a 	bl	800662c <__swsetup_r>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d0f1      	beq.n	80065c0 <__swbuf_r+0x3c>
 80065dc:	f04f 36ff 	mov.w	r6, #4294967295
 80065e0:	e01b      	b.n	800661a <__swbuf_r+0x96>
 80065e2:	4621      	mov	r1, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 f91f 	bl	8006828 <_fflush_r>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d1f6      	bne.n	80065dc <__swbuf_r+0x58>
 80065ee:	68a3      	ldr	r3, [r4, #8]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	60a3      	str	r3, [r4, #8]
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	6022      	str	r2, [r4, #0]
 80065fa:	701f      	strb	r7, [r3, #0]
 80065fc:	6963      	ldr	r3, [r4, #20]
 80065fe:	3001      	adds	r0, #1
 8006600:	4298      	cmp	r0, r3
 8006602:	d004      	beq.n	800660e <__swbuf_r+0x8a>
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	07db      	lsls	r3, r3, #31
 8006608:	d507      	bpl.n	800661a <__swbuf_r+0x96>
 800660a:	2e0a      	cmp	r6, #10
 800660c:	d105      	bne.n	800661a <__swbuf_r+0x96>
 800660e:	4621      	mov	r1, r4
 8006610:	4628      	mov	r0, r5
 8006612:	f000 f909 	bl	8006828 <_fflush_r>
 8006616:	2800      	cmp	r0, #0
 8006618:	d1e0      	bne.n	80065dc <__swbuf_r+0x58>
 800661a:	4630      	mov	r0, r6
 800661c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800661e:	bf00      	nop
 8006620:	08006f08 	.word	0x08006f08
 8006624:	08006f28 	.word	0x08006f28
 8006628:	08006f48 	.word	0x08006f48

0800662c <__swsetup_r>:
 800662c:	4b32      	ldr	r3, [pc, #200]	; (80066f8 <__swsetup_r+0xcc>)
 800662e:	b570      	push	{r4, r5, r6, lr}
 8006630:	681d      	ldr	r5, [r3, #0]
 8006632:	4606      	mov	r6, r0
 8006634:	460c      	mov	r4, r1
 8006636:	b125      	cbz	r5, 8006642 <__swsetup_r+0x16>
 8006638:	69ab      	ldr	r3, [r5, #24]
 800663a:	b913      	cbnz	r3, 8006642 <__swsetup_r+0x16>
 800663c:	4628      	mov	r0, r5
 800663e:	f000 f95d 	bl	80068fc <__sinit>
 8006642:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <__swsetup_r+0xd0>)
 8006644:	429c      	cmp	r4, r3
 8006646:	d101      	bne.n	800664c <__swsetup_r+0x20>
 8006648:	686c      	ldr	r4, [r5, #4]
 800664a:	e008      	b.n	800665e <__swsetup_r+0x32>
 800664c:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <__swsetup_r+0xd4>)
 800664e:	429c      	cmp	r4, r3
 8006650:	d101      	bne.n	8006656 <__swsetup_r+0x2a>
 8006652:	68ac      	ldr	r4, [r5, #8]
 8006654:	e003      	b.n	800665e <__swsetup_r+0x32>
 8006656:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <__swsetup_r+0xd8>)
 8006658:	429c      	cmp	r4, r3
 800665a:	bf08      	it	eq
 800665c:	68ec      	ldreq	r4, [r5, #12]
 800665e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006662:	b29a      	uxth	r2, r3
 8006664:	0715      	lsls	r5, r2, #28
 8006666:	d41d      	bmi.n	80066a4 <__swsetup_r+0x78>
 8006668:	06d0      	lsls	r0, r2, #27
 800666a:	d402      	bmi.n	8006672 <__swsetup_r+0x46>
 800666c:	2209      	movs	r2, #9
 800666e:	6032      	str	r2, [r6, #0]
 8006670:	e03a      	b.n	80066e8 <__swsetup_r+0xbc>
 8006672:	0751      	lsls	r1, r2, #29
 8006674:	d512      	bpl.n	800669c <__swsetup_r+0x70>
 8006676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006678:	b141      	cbz	r1, 800668c <__swsetup_r+0x60>
 800667a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800667e:	4299      	cmp	r1, r3
 8006680:	d002      	beq.n	8006688 <__swsetup_r+0x5c>
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff fbe0 	bl	8005e48 <_free_r>
 8006688:	2300      	movs	r3, #0
 800668a:	6363      	str	r3, [r4, #52]	; 0x34
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	2300      	movs	r3, #0
 8006696:	6063      	str	r3, [r4, #4]
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	6023      	str	r3, [r4, #0]
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f043 0308 	orr.w	r3, r3, #8
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	b94b      	cbnz	r3, 80066bc <__swsetup_r+0x90>
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b2:	d003      	beq.n	80066bc <__swsetup_r+0x90>
 80066b4:	4621      	mov	r1, r4
 80066b6:	4630      	mov	r0, r6
 80066b8:	f000 f9ce 	bl	8006a58 <__smakebuf_r>
 80066bc:	89a2      	ldrh	r2, [r4, #12]
 80066be:	f012 0301 	ands.w	r3, r2, #1
 80066c2:	d005      	beq.n	80066d0 <__swsetup_r+0xa4>
 80066c4:	2300      	movs	r3, #0
 80066c6:	60a3      	str	r3, [r4, #8]
 80066c8:	6963      	ldr	r3, [r4, #20]
 80066ca:	425b      	negs	r3, r3
 80066cc:	61a3      	str	r3, [r4, #24]
 80066ce:	e003      	b.n	80066d8 <__swsetup_r+0xac>
 80066d0:	0792      	lsls	r2, r2, #30
 80066d2:	bf58      	it	pl
 80066d4:	6963      	ldrpl	r3, [r4, #20]
 80066d6:	60a3      	str	r3, [r4, #8]
 80066d8:	6923      	ldr	r3, [r4, #16]
 80066da:	b95b      	cbnz	r3, 80066f4 <__swsetup_r+0xc8>
 80066dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e0:	f003 0080 	and.w	r0, r3, #128	; 0x80
 80066e4:	b280      	uxth	r0, r0
 80066e6:	b130      	cbz	r0, 80066f6 <__swsetup_r+0xca>
 80066e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ec:	81a3      	strh	r3, [r4, #12]
 80066ee:	f04f 30ff 	mov.w	r0, #4294967295
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	2000      	movs	r0, #0
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	200001e0 	.word	0x200001e0
 80066fc:	08006f08 	.word	0x08006f08
 8006700:	08006f28 	.word	0x08006f28
 8006704:	08006f48 	.word	0x08006f48

08006708 <abort>:
 8006708:	b508      	push	{r3, lr}
 800670a:	2006      	movs	r0, #6
 800670c:	f000 fa0c 	bl	8006b28 <raise>
 8006710:	2001      	movs	r0, #1
 8006712:	f000 fb1f 	bl	8006d54 <_exit>
	...

08006718 <__sflush_r>:
 8006718:	898a      	ldrh	r2, [r1, #12]
 800671a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671e:	4605      	mov	r5, r0
 8006720:	0710      	lsls	r0, r2, #28
 8006722:	460c      	mov	r4, r1
 8006724:	d459      	bmi.n	80067da <__sflush_r+0xc2>
 8006726:	684b      	ldr	r3, [r1, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	dc02      	bgt.n	8006732 <__sflush_r+0x1a>
 800672c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	dd17      	ble.n	8006762 <__sflush_r+0x4a>
 8006732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006734:	b1ae      	cbz	r6, 8006762 <__sflush_r+0x4a>
 8006736:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800673a:	2300      	movs	r3, #0
 800673c:	b292      	uxth	r2, r2
 800673e:	682f      	ldr	r7, [r5, #0]
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	b10a      	cbz	r2, 8006748 <__sflush_r+0x30>
 8006744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006746:	e015      	b.n	8006774 <__sflush_r+0x5c>
 8006748:	6a21      	ldr	r1, [r4, #32]
 800674a:	2301      	movs	r3, #1
 800674c:	4628      	mov	r0, r5
 800674e:	47b0      	blx	r6
 8006750:	1c41      	adds	r1, r0, #1
 8006752:	d10f      	bne.n	8006774 <__sflush_r+0x5c>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b16b      	cbz	r3, 8006774 <__sflush_r+0x5c>
 8006758:	2b1d      	cmp	r3, #29
 800675a:	d001      	beq.n	8006760 <__sflush_r+0x48>
 800675c:	2b16      	cmp	r3, #22
 800675e:	d103      	bne.n	8006768 <__sflush_r+0x50>
 8006760:	602f      	str	r7, [r5, #0]
 8006762:	2000      	movs	r0, #0
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	075a      	lsls	r2, r3, #29
 8006778:	d505      	bpl.n	8006786 <__sflush_r+0x6e>
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	1ac0      	subs	r0, r0, r3
 800677e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006780:	b10b      	cbz	r3, 8006786 <__sflush_r+0x6e>
 8006782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006784:	1ac0      	subs	r0, r0, r3
 8006786:	2300      	movs	r3, #0
 8006788:	4602      	mov	r2, r0
 800678a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800678c:	6a21      	ldr	r1, [r4, #32]
 800678e:	4628      	mov	r0, r5
 8006790:	47b0      	blx	r6
 8006792:	1c43      	adds	r3, r0, #1
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	d106      	bne.n	80067a6 <__sflush_r+0x8e>
 8006798:	6829      	ldr	r1, [r5, #0]
 800679a:	291d      	cmp	r1, #29
 800679c:	d83a      	bhi.n	8006814 <__sflush_r+0xfc>
 800679e:	4a21      	ldr	r2, [pc, #132]	; (8006824 <__sflush_r+0x10c>)
 80067a0:	40ca      	lsrs	r2, r1
 80067a2:	07d6      	lsls	r6, r2, #31
 80067a4:	d536      	bpl.n	8006814 <__sflush_r+0xfc>
 80067a6:	2200      	movs	r2, #0
 80067a8:	6062      	str	r2, [r4, #4]
 80067aa:	04d9      	lsls	r1, r3, #19
 80067ac:	6922      	ldr	r2, [r4, #16]
 80067ae:	6022      	str	r2, [r4, #0]
 80067b0:	d504      	bpl.n	80067bc <__sflush_r+0xa4>
 80067b2:	1c42      	adds	r2, r0, #1
 80067b4:	d101      	bne.n	80067ba <__sflush_r+0xa2>
 80067b6:	682b      	ldr	r3, [r5, #0]
 80067b8:	b903      	cbnz	r3, 80067bc <__sflush_r+0xa4>
 80067ba:	6560      	str	r0, [r4, #84]	; 0x54
 80067bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067be:	602f      	str	r7, [r5, #0]
 80067c0:	2900      	cmp	r1, #0
 80067c2:	d0ce      	beq.n	8006762 <__sflush_r+0x4a>
 80067c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d002      	beq.n	80067d2 <__sflush_r+0xba>
 80067cc:	4628      	mov	r0, r5
 80067ce:	f7ff fb3b 	bl	8005e48 <_free_r>
 80067d2:	2000      	movs	r0, #0
 80067d4:	6360      	str	r0, [r4, #52]	; 0x34
 80067d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067da:	690f      	ldr	r7, [r1, #16]
 80067dc:	2f00      	cmp	r7, #0
 80067de:	d0c0      	beq.n	8006762 <__sflush_r+0x4a>
 80067e0:	0793      	lsls	r3, r2, #30
 80067e2:	680e      	ldr	r6, [r1, #0]
 80067e4:	bf08      	it	eq
 80067e6:	694b      	ldreq	r3, [r1, #20]
 80067e8:	600f      	str	r7, [r1, #0]
 80067ea:	bf18      	it	ne
 80067ec:	2300      	movne	r3, #0
 80067ee:	ebc7 0806 	rsb	r8, r7, r6
 80067f2:	608b      	str	r3, [r1, #8]
 80067f4:	e002      	b.n	80067fc <__sflush_r+0xe4>
 80067f6:	4407      	add	r7, r0
 80067f8:	ebc0 0808 	rsb	r8, r0, r8
 80067fc:	f1b8 0f00 	cmp.w	r8, #0
 8006800:	ddaf      	ble.n	8006762 <__sflush_r+0x4a>
 8006802:	4643      	mov	r3, r8
 8006804:	463a      	mov	r2, r7
 8006806:	6a21      	ldr	r1, [r4, #32]
 8006808:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800680a:	4628      	mov	r0, r5
 800680c:	47b0      	blx	r6
 800680e:	2800      	cmp	r0, #0
 8006810:	dcf1      	bgt.n	80067f6 <__sflush_r+0xde>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006822:	bf00      	nop
 8006824:	20400001 	.word	0x20400001

08006828 <_fflush_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	690b      	ldr	r3, [r1, #16]
 800682c:	4605      	mov	r5, r0
 800682e:	460c      	mov	r4, r1
 8006830:	b1db      	cbz	r3, 800686a <_fflush_r+0x42>
 8006832:	b118      	cbz	r0, 800683c <_fflush_r+0x14>
 8006834:	6983      	ldr	r3, [r0, #24]
 8006836:	b90b      	cbnz	r3, 800683c <_fflush_r+0x14>
 8006838:	f000 f860 	bl	80068fc <__sinit>
 800683c:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <_fflush_r+0x48>)
 800683e:	429c      	cmp	r4, r3
 8006840:	d101      	bne.n	8006846 <_fflush_r+0x1e>
 8006842:	686c      	ldr	r4, [r5, #4]
 8006844:	e008      	b.n	8006858 <_fflush_r+0x30>
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <_fflush_r+0x4c>)
 8006848:	429c      	cmp	r4, r3
 800684a:	d101      	bne.n	8006850 <_fflush_r+0x28>
 800684c:	68ac      	ldr	r4, [r5, #8]
 800684e:	e003      	b.n	8006858 <_fflush_r+0x30>
 8006850:	4b09      	ldr	r3, [pc, #36]	; (8006878 <_fflush_r+0x50>)
 8006852:	429c      	cmp	r4, r3
 8006854:	bf08      	it	eq
 8006856:	68ec      	ldreq	r4, [r5, #12]
 8006858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800685c:	b12b      	cbz	r3, 800686a <_fflush_r+0x42>
 800685e:	4621      	mov	r1, r4
 8006860:	4628      	mov	r0, r5
 8006862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006866:	f7ff bf57 	b.w	8006718 <__sflush_r>
 800686a:	2000      	movs	r0, #0
 800686c:	bd38      	pop	{r3, r4, r5, pc}
 800686e:	bf00      	nop
 8006870:	08006f08 	.word	0x08006f08
 8006874:	08006f28 	.word	0x08006f28
 8006878:	08006f48 	.word	0x08006f48

0800687c <_cleanup_r>:
 800687c:	4901      	ldr	r1, [pc, #4]	; (8006884 <_cleanup_r+0x8>)
 800687e:	f000 b8a9 	b.w	80069d4 <_fwalk_reent>
 8006882:	bf00      	nop
 8006884:	08006829 	.word	0x08006829

08006888 <std.isra.0>:
 8006888:	2300      	movs	r3, #0
 800688a:	b510      	push	{r4, lr}
 800688c:	4604      	mov	r4, r0
 800688e:	6003      	str	r3, [r0, #0]
 8006890:	6043      	str	r3, [r0, #4]
 8006892:	6083      	str	r3, [r0, #8]
 8006894:	8181      	strh	r1, [r0, #12]
 8006896:	6643      	str	r3, [r0, #100]	; 0x64
 8006898:	81c2      	strh	r2, [r0, #14]
 800689a:	6103      	str	r3, [r0, #16]
 800689c:	6143      	str	r3, [r0, #20]
 800689e:	6183      	str	r3, [r0, #24]
 80068a0:	4619      	mov	r1, r3
 80068a2:	2208      	movs	r2, #8
 80068a4:	305c      	adds	r0, #92	; 0x5c
 80068a6:	f7ff fac6 	bl	8005e36 <memset>
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <std.isra.0+0x38>)
 80068ac:	6263      	str	r3, [r4, #36]	; 0x24
 80068ae:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <std.isra.0+0x3c>)
 80068b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <std.isra.0+0x40>)
 80068b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068b6:	4b05      	ldr	r3, [pc, #20]	; (80068cc <std.isra.0+0x44>)
 80068b8:	6224      	str	r4, [r4, #32]
 80068ba:	6323      	str	r3, [r4, #48]	; 0x30
 80068bc:	bd10      	pop	{r4, pc}
 80068be:	bf00      	nop
 80068c0:	08006b61 	.word	0x08006b61
 80068c4:	08006b83 	.word	0x08006b83
 80068c8:	08006bbb 	.word	0x08006bbb
 80068cc:	08006bdf 	.word	0x08006bdf

080068d0 <__sfmoreglue>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	2368      	movs	r3, #104	; 0x68
 80068d4:	1e4d      	subs	r5, r1, #1
 80068d6:	435d      	muls	r5, r3
 80068d8:	460e      	mov	r6, r1
 80068da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068de:	f7ff fb01 	bl	8005ee4 <_malloc_r>
 80068e2:	4604      	mov	r4, r0
 80068e4:	b140      	cbz	r0, 80068f8 <__sfmoreglue+0x28>
 80068e6:	2100      	movs	r1, #0
 80068e8:	e880 0042 	stmia.w	r0, {r1, r6}
 80068ec:	300c      	adds	r0, #12
 80068ee:	60a0      	str	r0, [r4, #8]
 80068f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068f4:	f7ff fa9f 	bl	8005e36 <memset>
 80068f8:	4620      	mov	r0, r4
 80068fa:	bd70      	pop	{r4, r5, r6, pc}

080068fc <__sinit>:
 80068fc:	6983      	ldr	r3, [r0, #24]
 80068fe:	b510      	push	{r4, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	bb33      	cbnz	r3, 8006952 <__sinit+0x56>
 8006904:	6483      	str	r3, [r0, #72]	; 0x48
 8006906:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006908:	6503      	str	r3, [r0, #80]	; 0x50
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <__sinit+0x58>)
 800690c:	4a12      	ldr	r2, [pc, #72]	; (8006958 <__sinit+0x5c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6282      	str	r2, [r0, #40]	; 0x28
 8006912:	4298      	cmp	r0, r3
 8006914:	bf04      	itt	eq
 8006916:	2301      	moveq	r3, #1
 8006918:	6183      	streq	r3, [r0, #24]
 800691a:	f000 f81f 	bl	800695c <__sfp>
 800691e:	6060      	str	r0, [r4, #4]
 8006920:	4620      	mov	r0, r4
 8006922:	f000 f81b 	bl	800695c <__sfp>
 8006926:	60a0      	str	r0, [r4, #8]
 8006928:	4620      	mov	r0, r4
 800692a:	f000 f817 	bl	800695c <__sfp>
 800692e:	2200      	movs	r2, #0
 8006930:	60e0      	str	r0, [r4, #12]
 8006932:	2104      	movs	r1, #4
 8006934:	6860      	ldr	r0, [r4, #4]
 8006936:	f7ff ffa7 	bl	8006888 <std.isra.0>
 800693a:	2201      	movs	r2, #1
 800693c:	2109      	movs	r1, #9
 800693e:	68a0      	ldr	r0, [r4, #8]
 8006940:	f7ff ffa2 	bl	8006888 <std.isra.0>
 8006944:	2202      	movs	r2, #2
 8006946:	2112      	movs	r1, #18
 8006948:	68e0      	ldr	r0, [r4, #12]
 800694a:	f7ff ff9d 	bl	8006888 <std.isra.0>
 800694e:	2301      	movs	r3, #1
 8006950:	61a3      	str	r3, [r4, #24]
 8006952:	bd10      	pop	{r4, pc}
 8006954:	08006ed0 	.word	0x08006ed0
 8006958:	0800687d 	.word	0x0800687d

0800695c <__sfp>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	4b1c      	ldr	r3, [pc, #112]	; (80069d0 <__sfp+0x74>)
 8006960:	681e      	ldr	r6, [r3, #0]
 8006962:	69b3      	ldr	r3, [r6, #24]
 8006964:	4607      	mov	r7, r0
 8006966:	b913      	cbnz	r3, 800696e <__sfp+0x12>
 8006968:	4630      	mov	r0, r6
 800696a:	f7ff ffc7 	bl	80068fc <__sinit>
 800696e:	3648      	adds	r6, #72	; 0x48
 8006970:	68b4      	ldr	r4, [r6, #8]
 8006972:	6873      	ldr	r3, [r6, #4]
 8006974:	3b01      	subs	r3, #1
 8006976:	d404      	bmi.n	8006982 <__sfp+0x26>
 8006978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800697c:	b17d      	cbz	r5, 800699e <__sfp+0x42>
 800697e:	3468      	adds	r4, #104	; 0x68
 8006980:	e7f8      	b.n	8006974 <__sfp+0x18>
 8006982:	6833      	ldr	r3, [r6, #0]
 8006984:	b10b      	cbz	r3, 800698a <__sfp+0x2e>
 8006986:	6836      	ldr	r6, [r6, #0]
 8006988:	e7f2      	b.n	8006970 <__sfp+0x14>
 800698a:	2104      	movs	r1, #4
 800698c:	4638      	mov	r0, r7
 800698e:	f7ff ff9f 	bl	80068d0 <__sfmoreglue>
 8006992:	6030      	str	r0, [r6, #0]
 8006994:	2800      	cmp	r0, #0
 8006996:	d1f6      	bne.n	8006986 <__sfp+0x2a>
 8006998:	230c      	movs	r3, #12
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800699e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069a2:	81e3      	strh	r3, [r4, #14]
 80069a4:	2301      	movs	r3, #1
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	6665      	str	r5, [r4, #100]	; 0x64
 80069aa:	6025      	str	r5, [r4, #0]
 80069ac:	60a5      	str	r5, [r4, #8]
 80069ae:	6065      	str	r5, [r4, #4]
 80069b0:	6125      	str	r5, [r4, #16]
 80069b2:	6165      	str	r5, [r4, #20]
 80069b4:	61a5      	str	r5, [r4, #24]
 80069b6:	2208      	movs	r2, #8
 80069b8:	4629      	mov	r1, r5
 80069ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069be:	f7ff fa3a 	bl	8005e36 <memset>
 80069c2:	6365      	str	r5, [r4, #52]	; 0x34
 80069c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80069c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80069c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80069ca:	4620      	mov	r0, r4
 80069cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ce:	bf00      	nop
 80069d0:	08006ed0 	.word	0x08006ed0

080069d4 <_fwalk_reent>:
 80069d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	4680      	mov	r8, r0
 80069da:	4689      	mov	r9, r1
 80069dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069e0:	2600      	movs	r6, #0
 80069e2:	b194      	cbz	r4, 8006a0a <_fwalk_reent+0x36>
 80069e4:	68a5      	ldr	r5, [r4, #8]
 80069e6:	6867      	ldr	r7, [r4, #4]
 80069e8:	3f01      	subs	r7, #1
 80069ea:	d40c      	bmi.n	8006a06 <_fwalk_reent+0x32>
 80069ec:	89ab      	ldrh	r3, [r5, #12]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d907      	bls.n	8006a02 <_fwalk_reent+0x2e>
 80069f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069f6:	3301      	adds	r3, #1
 80069f8:	d003      	beq.n	8006a02 <_fwalk_reent+0x2e>
 80069fa:	4629      	mov	r1, r5
 80069fc:	4640      	mov	r0, r8
 80069fe:	47c8      	blx	r9
 8006a00:	4306      	orrs	r6, r0
 8006a02:	3568      	adds	r5, #104	; 0x68
 8006a04:	e7f0      	b.n	80069e8 <_fwalk_reent+0x14>
 8006a06:	6824      	ldr	r4, [r4, #0]
 8006a08:	e7eb      	b.n	80069e2 <_fwalk_reent+0xe>
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006a10 <__swhatbuf_r>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	460e      	mov	r6, r1
 8006a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	b090      	sub	sp, #64	; 0x40
 8006a1c:	4614      	mov	r4, r2
 8006a1e:	461d      	mov	r5, r3
 8006a20:	da06      	bge.n	8006a30 <__swhatbuf_r+0x20>
 8006a22:	2300      	movs	r3, #0
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	89b3      	ldrh	r3, [r6, #12]
 8006a28:	061a      	lsls	r2, r3, #24
 8006a2a:	d50e      	bpl.n	8006a4a <__swhatbuf_r+0x3a>
 8006a2c:	2340      	movs	r3, #64	; 0x40
 8006a2e:	e00e      	b.n	8006a4e <__swhatbuf_r+0x3e>
 8006a30:	aa01      	add	r2, sp, #4
 8006a32:	f000 f8fb 	bl	8006c2c <_fstat_r>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	dbf3      	blt.n	8006a22 <__swhatbuf_r+0x12>
 8006a3a:	9a02      	ldr	r2, [sp, #8]
 8006a3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a44:	425a      	negs	r2, r3
 8006a46:	415a      	adcs	r2, r3
 8006a48:	602a      	str	r2, [r5, #0]
 8006a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a4e:	2000      	movs	r0, #0
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	b010      	add	sp, #64	; 0x40
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a58 <__smakebuf_r>:
 8006a58:	898b      	ldrh	r3, [r1, #12]
 8006a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a5c:	079e      	lsls	r6, r3, #30
 8006a5e:	4605      	mov	r5, r0
 8006a60:	460c      	mov	r4, r1
 8006a62:	d410      	bmi.n	8006a86 <__smakebuf_r+0x2e>
 8006a64:	ab01      	add	r3, sp, #4
 8006a66:	466a      	mov	r2, sp
 8006a68:	f7ff ffd2 	bl	8006a10 <__swhatbuf_r>
 8006a6c:	9900      	ldr	r1, [sp, #0]
 8006a6e:	4606      	mov	r6, r0
 8006a70:	4628      	mov	r0, r5
 8006a72:	f7ff fa37 	bl	8005ee4 <_malloc_r>
 8006a76:	b968      	cbnz	r0, 8006a94 <__smakebuf_r+0x3c>
 8006a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7c:	059a      	lsls	r2, r3, #22
 8006a7e:	d422      	bmi.n	8006ac6 <__smakebuf_r+0x6e>
 8006a80:	f043 0302 	orr.w	r3, r3, #2
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a8a:	6023      	str	r3, [r4, #0]
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	6163      	str	r3, [r4, #20]
 8006a92:	e018      	b.n	8006ac6 <__smakebuf_r+0x6e>
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <__smakebuf_r+0x74>)
 8006a96:	62ab      	str	r3, [r5, #40]	; 0x28
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	6020      	str	r0, [r4, #0]
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	9b00      	ldr	r3, [sp, #0]
 8006aa4:	6163      	str	r3, [r4, #20]
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	6120      	str	r0, [r4, #16]
 8006aaa:	b14b      	cbz	r3, 8006ac0 <__smakebuf_r+0x68>
 8006aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f000 f8cd 	bl	8006c50 <_isatty_r>
 8006ab6:	b118      	cbz	r0, 8006ac0 <__smakebuf_r+0x68>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	81a3      	strh	r3, [r4, #12]
 8006ac0:	89a0      	ldrh	r0, [r4, #12]
 8006ac2:	4330      	orrs	r0, r6
 8006ac4:	81a0      	strh	r0, [r4, #12]
 8006ac6:	b002      	add	sp, #8
 8006ac8:	bd70      	pop	{r4, r5, r6, pc}
 8006aca:	bf00      	nop
 8006acc:	0800687d 	.word	0x0800687d

08006ad0 <__malloc_lock>:
 8006ad0:	4770      	bx	lr

08006ad2 <__malloc_unlock>:
 8006ad2:	4770      	bx	lr

08006ad4 <_raise_r>:
 8006ad4:	291f      	cmp	r1, #31
 8006ad6:	b538      	push	{r3, r4, r5, lr}
 8006ad8:	4604      	mov	r4, r0
 8006ada:	460d      	mov	r5, r1
 8006adc:	d904      	bls.n	8006ae8 <_raise_r+0x14>
 8006ade:	2316      	movs	r3, #22
 8006ae0:	6003      	str	r3, [r0, #0]
 8006ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006aea:	b112      	cbz	r2, 8006af2 <_raise_r+0x1e>
 8006aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006af0:	b94b      	cbnz	r3, 8006b06 <_raise_r+0x32>
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 f832 	bl	8006b5c <_getpid_r>
 8006af8:	462a      	mov	r2, r5
 8006afa:	4601      	mov	r1, r0
 8006afc:	4620      	mov	r0, r4
 8006afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b02:	f000 b819 	b.w	8006b38 <_kill_r>
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d00c      	beq.n	8006b24 <_raise_r+0x50>
 8006b0a:	1c59      	adds	r1, r3, #1
 8006b0c:	d103      	bne.n	8006b16 <_raise_r+0x42>
 8006b0e:	2316      	movs	r3, #22
 8006b10:	6003      	str	r3, [r0, #0]
 8006b12:	2001      	movs	r0, #1
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	2400      	movs	r4, #0
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b1e:	4798      	blx	r3
 8006b20:	4620      	mov	r0, r4
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	2000      	movs	r0, #0
 8006b26:	bd38      	pop	{r3, r4, r5, pc}

08006b28 <raise>:
 8006b28:	4b02      	ldr	r3, [pc, #8]	; (8006b34 <raise+0xc>)
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	f7ff bfd1 	b.w	8006ad4 <_raise_r>
 8006b32:	bf00      	nop
 8006b34:	200001e0 	.word	0x200001e0

08006b38 <_kill_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4c07      	ldr	r4, [pc, #28]	; (8006b58 <_kill_r+0x20>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4605      	mov	r5, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	f000 f8d7 	bl	8006cf8 <_kill>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	d102      	bne.n	8006b54 <_kill_r+0x1c>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	b103      	cbz	r3, 8006b54 <_kill_r+0x1c>
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
 8006b56:	bf00      	nop
 8006b58:	20009af4 	.word	0x20009af4

08006b5c <_getpid_r>:
 8006b5c:	f000 b8bc 	b.w	8006cd8 <_getpid>

08006b60 <__sread>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	460c      	mov	r4, r1
 8006b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b68:	f000 f894 	bl	8006c94 <_read_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	bfab      	itete	ge
 8006b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b72:	89a3      	ldrhlt	r3, [r4, #12]
 8006b74:	181b      	addge	r3, r3, r0
 8006b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b7a:	bfac      	ite	ge
 8006b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b7e:	81a3      	strhlt	r3, [r4, #12]
 8006b80:	bd10      	pop	{r4, pc}

08006b82 <__swrite>:
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	461f      	mov	r7, r3
 8006b88:	898b      	ldrh	r3, [r1, #12]
 8006b8a:	05db      	lsls	r3, r3, #23
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	4616      	mov	r6, r2
 8006b92:	d505      	bpl.n	8006ba0 <__swrite+0x1e>
 8006b94:	2302      	movs	r3, #2
 8006b96:	2200      	movs	r2, #0
 8006b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9c:	f000 f868 	bl	8006c70 <_lseek_r>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	4632      	mov	r2, r6
 8006bae:	463b      	mov	r3, r7
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb6:	f000 b817 	b.w	8006be8 <_write_r>

08006bba <__sseek>:
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc2:	f000 f855 	bl	8006c70 <_lseek_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	bf15      	itete	ne
 8006bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bd6:	81a3      	strheq	r3, [r4, #12]
 8006bd8:	bf18      	it	ne
 8006bda:	81a3      	strhne	r3, [r4, #12]
 8006bdc:	bd10      	pop	{r4, pc}

08006bde <__sclose>:
 8006bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be2:	f000 b813 	b.w	8006c0c <_close_r>
	...

08006be8 <_write_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4c07      	ldr	r4, [pc, #28]	; (8006c08 <_write_r+0x20>)
 8006bec:	4605      	mov	r5, r0
 8006bee:	4608      	mov	r0, r1
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	6022      	str	r2, [r4, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f000 f8a4 	bl	8006d44 <_write>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_write_r+0x1e>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_write_r+0x1e>
 8006c04:	602b      	str	r3, [r5, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20009af4 	.word	0x20009af4

08006c0c <_close_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4c06      	ldr	r4, [pc, #24]	; (8006c28 <_close_r+0x1c>)
 8006c10:	2300      	movs	r3, #0
 8006c12:	4605      	mov	r5, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	f000 f84e 	bl	8006cb8 <_close>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_close_r+0x1a>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_close_r+0x1a>
 8006c24:	602b      	str	r3, [r5, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	20009af4 	.word	0x20009af4

08006c2c <_fstat_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4c07      	ldr	r4, [pc, #28]	; (8006c4c <_fstat_r+0x20>)
 8006c30:	2300      	movs	r3, #0
 8006c32:	4605      	mov	r5, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	f000 f845 	bl	8006cc8 <_fstat>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d102      	bne.n	8006c48 <_fstat_r+0x1c>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	b103      	cbz	r3, 8006c48 <_fstat_r+0x1c>
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	bd38      	pop	{r3, r4, r5, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20009af4 	.word	0x20009af4

08006c50 <_isatty_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4c06      	ldr	r4, [pc, #24]	; (8006c6c <_isatty_r+0x1c>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4605      	mov	r5, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	6023      	str	r3, [r4, #0]
 8006c5c:	f000 f844 	bl	8006ce8 <_isatty>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_isatty_r+0x1a>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_isatty_r+0x1a>
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	20009af4 	.word	0x20009af4

08006c70 <_lseek_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4c07      	ldr	r4, [pc, #28]	; (8006c90 <_lseek_r+0x20>)
 8006c74:	4605      	mov	r5, r0
 8006c76:	4608      	mov	r0, r1
 8006c78:	4611      	mov	r1, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	6022      	str	r2, [r4, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f000 f842 	bl	8006d08 <_lseek>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_lseek_r+0x1e>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_lseek_r+0x1e>
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	20009af4 	.word	0x20009af4

08006c94 <_read_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4c07      	ldr	r4, [pc, #28]	; (8006cb4 <_read_r+0x20>)
 8006c98:	4605      	mov	r5, r0
 8006c9a:	4608      	mov	r0, r1
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	6022      	str	r2, [r4, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f000 f838 	bl	8006d18 <_read>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_read_r+0x1e>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_read_r+0x1e>
 8006cb0:	602b      	str	r3, [r5, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	20009af4 	.word	0x20009af4

08006cb8 <_close>:
 8006cb8:	4b02      	ldr	r3, [pc, #8]	; (8006cc4 <_close+0xc>)
 8006cba:	2258      	movs	r2, #88	; 0x58
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc2:	4770      	bx	lr
 8006cc4:	20009af4 	.word	0x20009af4

08006cc8 <_fstat>:
 8006cc8:	4b02      	ldr	r3, [pc, #8]	; (8006cd4 <_fstat+0xc>)
 8006cca:	2258      	movs	r2, #88	; 0x58
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd2:	4770      	bx	lr
 8006cd4:	20009af4 	.word	0x20009af4

08006cd8 <_getpid>:
 8006cd8:	4b02      	ldr	r3, [pc, #8]	; (8006ce4 <_getpid+0xc>)
 8006cda:	2258      	movs	r2, #88	; 0x58
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce2:	4770      	bx	lr
 8006ce4:	20009af4 	.word	0x20009af4

08006ce8 <_isatty>:
 8006ce8:	4b02      	ldr	r3, [pc, #8]	; (8006cf4 <_isatty+0xc>)
 8006cea:	2258      	movs	r2, #88	; 0x58
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	2000      	movs	r0, #0
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20009af4 	.word	0x20009af4

08006cf8 <_kill>:
 8006cf8:	4b02      	ldr	r3, [pc, #8]	; (8006d04 <_kill+0xc>)
 8006cfa:	2258      	movs	r2, #88	; 0x58
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	4770      	bx	lr
 8006d04:	20009af4 	.word	0x20009af4

08006d08 <_lseek>:
 8006d08:	4b02      	ldr	r3, [pc, #8]	; (8006d14 <_lseek+0xc>)
 8006d0a:	2258      	movs	r2, #88	; 0x58
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d12:	4770      	bx	lr
 8006d14:	20009af4 	.word	0x20009af4

08006d18 <_read>:
 8006d18:	4b02      	ldr	r3, [pc, #8]	; (8006d24 <_read+0xc>)
 8006d1a:	2258      	movs	r2, #88	; 0x58
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d22:	4770      	bx	lr
 8006d24:	20009af4 	.word	0x20009af4

08006d28 <_sbrk>:
 8006d28:	4a04      	ldr	r2, [pc, #16]	; (8006d3c <_sbrk+0x14>)
 8006d2a:	4905      	ldr	r1, [pc, #20]	; (8006d40 <_sbrk+0x18>)
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bf08      	it	eq
 8006d32:	460b      	moveq	r3, r1
 8006d34:	4418      	add	r0, r3
 8006d36:	6010      	str	r0, [r2, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	4770      	bx	lr
 8006d3c:	20008f28 	.word	0x20008f28
 8006d40:	20009af8 	.word	0x20009af8

08006d44 <_write>:
 8006d44:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <_write+0xc>)
 8006d46:	2258      	movs	r2, #88	; 0x58
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4e:	4770      	bx	lr
 8006d50:	20009af4 	.word	0x20009af4

08006d54 <_exit>:
 8006d54:	e7fe      	b.n	8006d54 <_exit>
 8006d56:	bf00      	nop

08006d58 <_init>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr

08006d64 <_fini>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr
